0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 53 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   DA                     DB   lsb(nop_)   ; SP
0221   A7                     DB   lsb(not_)   ; !
0222   DA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   DA                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   DA                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   C2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   DA                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   AC                     DB   lsb(eq_)   ; =
023E   B1                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   D1                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   DA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1B 04               JP   num   
0303                HEXNUM_:      
0303   C3 4B 04               JP   hexnum   
0306                ARG_:        
0306   C3 0A 05               JP   arg   
0309                PROP_:       
0309   C3 28 05               JP   prop   
030C                STRING_:      
030C   C3 68 04               JP   string   
030F                PAREN_:      
030F   C3 96 04               JP   paren   
0312                PARENEND_:      
0312   C3 98 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD D0 07               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD F3 07               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 88 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 2B 05               JP   get1   
034C                BLOCK_:      
034C   C3 9A 04               JP   block   
034F                BLOCKEND_:      
034F   C3 D3 04               JP   blockend   
0352                CHAR_:       
0352   C3 81 04               JP   char   
0355                ARRAY_:      
0355   C3 6E 05               JP   array   
0358                ARRAYEND_:      
0358   C3 70 05               JP   arrayEnd   
035B                IDENT_:      
035B   C3 41 06               JP   ident   
035E                SYMBOL_:      
035E   C3 19 06               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD D0 07               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 FF 03               JP   mul   
0393                SUB_:        ; negative sign or subtract
0393   03                     INC   bc   ; check if sign of a number
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 30                  CP   "0"   
0398   38 05                  JR   c,sub1   
039A   FE 3A                  CP   "9"+1   
039C   DA 00 03               JP   c,num_   
039F                SUB1:        ; Subtract the value 2nd on stack from top of stack
039F   D1                     POP   de   
03A0   E1                     POP   hl   ; Entry point for INVert
03A1                SUB2:        
03A1   B7                     OR   a   ; Entry point for NEGate
03A2   ED 52                  SBC   hl,de   
03A4   E5                     PUSH   hl   
03A5   DD E9                  JP   (ix)   
03A7                NOT_:        ; logical invert, any non zero value
03A7   21 00 00               LD   hl,0   ; is considered true
03AA   18 01                  JR   eq1   
03AC                EQ_:         
03AC   E1                     POP   hl   
03AD                EQ1:         
03AD   D1                     POP   de   
03AE   C3 9B 06               JP   equals   
03B1                GT_:         
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 02                  JR   lt1   
03B5                LT_:         
03B5   E1                     POP   hl   
03B6   D1                     POP   de   
03B7                LT1:         
03B7   03                     INC   bc   
03B8   0A                     LD   a,(bc)   
03B9   FE 3D                  CP   "="   
03BB   CA A3 06               JP   z,lessthaneq   
03BE   0B                     DEC   bc   
03BF   C3 A8 06               JP   lessthan   
03C2                DIV_:        
03C2   D1                     POP   de   ; get first value
03C3   E1                     POP   hl   ; get 2nd value
03C4   C5                     PUSH   bc   ; preserve the IP
03C5   44 4D                  LD   bc,hl   
03C7   CD 45 07               CALL   divide   
03CA   22 98 18               LD   (vFrac),hl   
03CD   C1                     POP   bc   
03CE   D5                     PUSH   de   ; push result
03CF   DD E9                  JP   (ix)   
03D1                COMMENT_:      
03D1   03                     INC   bc   ; point to next char
03D2   0A                     LD   a,(bc)   
03D3   FE 20                  CP   " "   ; terminate on any char less than SP
03D5   30 FA                  JR   nc,comment_   
03D7   0B                     DEC   bc   
03D8   DD E9                  JP   (ix)   
03DA                NOP_:        
03DA   DD E9                  JP   (ix)   
03DC                             ;*******************************************************************
03DC                             ; word operators
03DC                             ;*******************************************************************
03DC                             ; shl
03DC                             ; value count -- value2          shift left count places
03DC                SHL:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 01                  JR   shl2   
03E4                SHL1:        
03E4   29                     ADD   hl,hl   ; left shift hl
03E5                SHL2:        
03E5   10 FD                  DJNZ   shl1   
03E7   E5                     PUSH   hl   
03E8   42 4B                  LD   bc,de   ; restore IP
03EA   DD E9                  JP   (ix)   
03EC                             ; shr
03EC                             ; value count -- value2          shift left count places
03EC                SHR:         
03EC   50 59                  LD   de,bc   ; save IP
03EE   C1                     POP   bc   ; bc = count
03EF   41                     LD   b,c   ; b = loop counter
03F0   E1                     POP   hl   
03F1   04                     INC   b   ; test for counter=0 case
03F2   18 04                  JR   shr2   
03F4                SHR1:        
03F4   CB 3C                  SRL   h   ; right shift hl
03F6   CB 1D                  RR   l   
03F8                SHR2:        
03F8   10 FA                  DJNZ   shr1   
03FA   E5                     PUSH   hl   
03FB   42 4B                  LD   bc,de   ; restore IP
03FD   DD E9                  JP   (ix)   
03FF                MUL:         ;=19
03FF   D1                     POP   de   ; get first value
0400   E1                     POP   hl   
0401   C5                     PUSH   bc   ; Preserve the IP
0402   44                     LD   b,h   ; bc = 2nd value
0403   4D                     LD   c,l   
0404   21 00 00               LD   hl,0   
0407   3E 10                  LD   a,16   
0409                MUL2:        
0409   29                     ADD   hl,hl   
040A   CB 13                  RL   e   
040C   CB 12                  RL   d   
040E   30 04                  JR   nc,$+6   
0410   09                     ADD   hl,bc   
0411   30 01                  JR   nc,$+3   
0413   13                     INC   de   
0414   3D                     DEC   a   
0415   20 F2                  JR   nz,mul2   
0417   C1                     POP   bc   ; Restore the IP
0418   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0419   DD E9                  JP   (ix)   
041B                NUM:         
041B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041E   0A                     LD   a,(bc)   ; Get numeral or -
041F   FE 2D                  CP   "-"   
0421   20 01                  JR   nz,num0   
0423   03                     INC   bc   ; move to next char, no flags affected
0424                NUM0:        
0424   08                     EX   af,af'   ; save zero flag = 0 for later
0425                NUM1:        
0425   0A                     LD   a,(bc)   ; read digit
0426   D6 30                  SUB   "0"   ; less than 0?
0428   38 13                  JR   c,num2   ; not a digit, exit loop
042A   FE 0A                  CP   10   ; greater that 9?
042C   30 0F                  JR   nc,num2   ; not a digit, exit loop
042E   03                     INC   bc   ; inc IP
042F   54 5D                  LD   de,hl   ; multiply hl * 10
0431   29                     ADD   hl,hl   
0432   29                     ADD   hl,hl   
0433   19                     ADD   hl,de   
0434   29                     ADD   hl,hl   
0435   85                     ADD   a,l   ; add digit in a to hl
0436   6F                     LD   l,a   
0437   3E 00                  LD   a,0   
0439   8C                     ADC   a,h   
043A   67                     LD   h,a   
043B   18 E8                  JR   num1   
043D                NUM2:        
043D   0B                     DEC   bc   
043E   08                     EX   af,af'   ; restore zero flag
043F   20 07                  JR   nz,num3   
0441   EB                     EX   de,hl   ; negate the value of hl
0442   21 00 00               LD   hl,0   
0445   B7                     OR   a   ; jump to sub2
0446   ED 52                  SBC   hl,de   
0448                NUM3:        
0448   E5                     PUSH   hl   ; Put the number on the stack
0449   DD E9                  JP   (ix)   ; and process the next character
044B                HEXNUM:      ; 
044B   21 00 00               LD   hl,0   ; Clear hl to accept the number
044E                HEXNUM1:      
044E   03                     INC   bc   
044F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0450   CB 77                  BIT   6,a   ; is it uppercase alpha?
0452   28 02                  JR   z,hexnum2   ; no a decimal
0454   D6 07                  SUB   7   ; sub 7  to make $a - $F
0456                HEXNUM2:      
0456   D6 30                  SUB   $30   ; Form decimal digit
0458   DA 3D 04               JP   c,num2   
045B   FE 10                  CP   $0F+1   
045D   D2 3D 04               JP   nc,num2   
0460   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0461   29                     ADD   hl,hl   ; 4X
0462   29                     ADD   hl,hl   ; 8X
0463   29                     ADD   hl,hl   ; 16X
0464   85                     ADD   a,l   ; add into bottom of hl
0465   6F                     LD   l,a   ; 
0466   18 E6                  JR   hexnum1   
0468                             ; 
0468                STRING:      
0468   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
046C   D5                     PUSH   de   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   12                     LD   (de),a   
0471   13                     INC   de   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   12                     LD   (de),a   
047A   13                     INC   de   
047B   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
047F   DD E9                  JP   (ix)   
0481                CHAR:        
0481   21 00 00               LD   hl,0   ; if `` is empty
0484                CHAR1:       
0484   03                     INC   bc   ; point to next char
0485   0A                     LD   a,(bc)   
0486   FE 60                  CP   "`"   ; ` is the string terminator
0488   28 09                  JR   z,char3   
048A   FE 5C                  CP   $5c   ; \ is the escape
048C   20 02                  JR   nz,char2   
048E   03                     INC   bc   
048F   0A                     LD   a,(bc)   
0490                CHAR2:       
0490   6F                     LD   l,a   
0491   18 F1                  JR   char1   
0493                CHAR3:       
0493   E5                     PUSH   hl   
0494   DD E9                  JP   (ix)   
0496                PAREN:       
0496   DD E9                  JP   (ix)   
0498                             ;     ld ix,paren2
0498                             ;     jr block
0498                             ; paren2:
0498                             ;     ld ix,next
0498                             ;     jp exec
0498                PARENEND:      
0498   DD E9                  JP   (ix)   
049A                             ;     pop hl                      ; hl = last result
049A                             ;     pop de
049A                             ;     pop bc
049A                             ;     pop bc
049A                             ;     push hl
049A                             ;     ld iyh,d
049A                             ;     ld iyl,e
049A                             ;     ld ix,next
049A                             ;     jp (ix)
049A                BLOCK:       
049A   03                     INC   bc   
049B   C5                     PUSH   bc   ; return first opcode of block
049C   16 01                  LD   d,1   ; nesting: count first parenthesis
049E                BLOCK1:      ; Skip to end of definition
049E   0A                     LD   a,(bc)   ; Get the next character
049F   03                     INC   bc   ; Point to next character
04A0   FE 21                  CP   " " + 1   ; ignore whitespace
04A2   38 FA                  JR   c,block1   
04A4   FE 29                  CP   ")"   
04A6   28 25                  JR   z,block4   
04A8   FE 7D                  CP   "}"   
04AA   28 21                  JR   z,block4   
04AC   FE 5D                  CP   "]"   
04AE   28 1D                  JR   z,block4   
04B0   FE 28                  CP   "("   
04B2   28 13                  JR   z,block3   
04B4   FE 7B                  CP   "{"   
04B6   28 0F                  JR   z,block3   
04B8   FE 5B                  CP   "["   
04BA   28 0B                  JR   z,block3   
04BC   FE 27                  CP   "'"   
04BE   28 07                  JR   z,block3   
04C0   FE 60                  CP   "`"   
04C2   20 DA                  JR   nz,block1   
04C4                BLOCK2:      
04C4   14                     INC   d   
04C5   18 D7                  JR   block1   
04C7                BLOCK3:      
04C7   3E 80                  LD   a,$80   
04C9   AA                     XOR   d   
04CA   47                     LD   b,a   
04CB   18 D1                  JR   block1   
04CD                BLOCK4:      
04CD   15                     DEC   d   
04CE   20 CE                  JR   nz,block1   ; get the next element
04D0   0B                     DEC   bc   ; balanced, exit
04D1   DD E9                  JP   (ix)   
04D3                BLOCKEND:      
04D3   D9                     EXX      
04D4   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04D7   FD 56 01               LD   d,(iy+1)   
04DA   FD 4E 06               LD   c,(iy+6)   ; bc = IP
04DD   FD 46 07               LD   b,(iy+7)   
04E0   D9                     EXX      
04E1   21 00 00               LD   hl,0   ; hl = sp
04E4   39                     ADD   hl,sp   
04E5   FD 54                  LD   d,iyh   ; de = BP
04E7   FD 5D                  LD   e,iyl   
04E9   42 4B                  LD   bc,de   ; bc = BP
04EB   EB                     EX   de,hl   ; hl = BP, de = sp
04EC   B7                     OR   a   
04ED   ED 52                  SBC   hl,de   ; hl = BP - sp = count
04EF   50 59                  LD   de,bc   ; de = BP
04F1   44 4D                  LD   bc,hl   ; bc = count
04F3   EB                     EX   de,hl   ; hl = BP-1
04F4   2B                     DEC   hl   
04F5   FD 5E 02               LD   e,(iy+2)   ; de = SCP-1
04F8   FD 56 03               LD   d,(iy+3)   
04FB   1B                     DEC   de   
04FC   ED B8                  LDDR      
04FE   13                     INC   de   ; sp = new sp
04FF   EB                     EX   de,hl   
0500   F9                     LD   sp,hl   
0501   D9                     EXX      
0502   D5                     PUSH   de   ; oldBP
0503   C5                     PUSH   bc   ; IP
0504   D9                     EXX      
0505   C1                     POP   bc   
0506   FD E1                  POP   IY   
0508   DD E9                  JP   (ix)   
050A                             ; $1..9
050A                             ; returns value of arg
050A                ARG:         
050A   03                     INC   bc   ; get next char
050B   0A                     LD   a,(bc)   
050C   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
050E   E6 0F                  AND   $0F   ; mask
0510   87                     ADD   a,a   ; double
0511   6F                     LD   l,a   ; hl = offset into args
0512   26 00                  LD   h,0   
0514   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0517   FD 56 03               LD   d,(iy+3)   
051A   EB                     EX   de,hl   ; hl = SCP - offset
051B   B7                     OR   a   
051C   ED 52                  SBC   hl,de   
051E   2B                     DEC   hl   ; de = arg
051F   56                     LD   d,(hl)   
0520   2B                     DEC   hl   
0521   5E                     LD   e,(hl)   
0522   D5                     PUSH   de   ; push arg
0523   22 9E 18               LD   (vSetter),hl   ; store address in setter
0526   DD E9                  JP   (ix)   
0528                             ; @1..9
0528                             ; returns address of prop
0528                PROP:        
0528                             ;     inc bc                      ; get next char
0528                             ;     ld a,(bc)
0528                             ;     sub "1"                     ; treat as a digit, 1 based index
0528                             ;     and $0F                     ; mask
0528                             ;     add a,a                     ; double
0528                             ;     ld l,a                      ; hl = offset into args
0528                             ;     ld h,0
0528                             ;     ld e,(iy+6)                 ; de = closure array
0528                             ;     ld d,(iy+7)
0528                             ;     add hl,de                   ; find address of prop in array
0528                             ;     ld (vSetter),hl             ; store address in setter
0528                             ;     ld e,(hl)
0528                             ;     inc hl
0528                             ;     ld d,(hl)
0528                             ;     push de                     ; push prop value
0528   DD E9                  JP   (ix)   
052A                             ; addr -- value
052A                DOLET:       
052A                GET:         
052A   E1                     POP   hl   
052B                GET1:        
052B   22 9E 18               LD   (vSetter),hl   ; store address in setter
052E   16 00                  LD   d,0   
0530   5E                     LD   e,(hl)   
0531   3A 9A 18               LD   a,(vDataWidth)   
0534   3D                     DEC   a   
0535   28 02                  JR   z,get2   
0537   23                     INC   hl   
0538   56                     LD   d,(hl)   
0539                GET2:        
0539   D5                     PUSH   de   
053A   DD E9                  JP   (ix)   
053C                             ; newvalue -- oldvalue
053C                SET:         
053C   D1                     POP   de   ; new value
053D   E1                     POP   hl   ; discard last accessed value
053E   2A 9E 18               LD   hl,(vSetter)   
0541   7E                     LD   a,(hl)   ; save lsb of old value
0542   73                     LD   (hl),e   
0543   5F                     LD   e,a   
0544   3A 9A 18               LD   a,(vDataWidth)   
0547   3D                     DEC   a   
0548   28 04                  JR   z,set1   
054A   23                     INC   hl   
054B   7E                     LD   a,(hl)   ; save msb of old value
054C   72                     LD   (hl),d   
054D   57                     LD   d,a   
054E                SET1:        
054E   D5                     PUSH   de   ; return old value
054F   DD E9                  JP   (ix)   
0551                             ; ifte
0551                             ; condition then -- value
0551                IF:          
0551   DD E9                  JP   (ix)   
0553                             ; ld de,0                      ; NUL pointer for else
0553                             ; jr ifte1
0553                             ; ifte
0553                             ; condition then else -- value
0553                IFTE:        
0553   DD E9                  JP   (ix)   
0555                             ;     pop de                      ; de = else
0555                             ; ifte1:
0555                             ;     pop hl                      ; hl = then
0555                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
0555                             ;     inc hl                      ; check for true
0555                             ;     ld a,h
0555                             ;     or l
0555                             ;     pop hl                      ; hl = then
0555                             ;     jr z,ifte2
0555                             ;     ex de,hl                    ; condition = false, hl = else
0555                             ; ifte2:
0555                             ;     ld a,h                      ; check if hl is NUL
0555                             ;     or l
0555                             ;     jr z,ifte3
0555                             ;     push bc                     ; push IP
0555                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0555                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0555                             ;     push de                     ; push SCP
0555                             ;     push iy                     ; push BP
0555                             ;     ld iy,0                     ; iy = sp
0555                             ;     add iy,sp
0555                             ;     ld bc,hl                    ; IP = then
0555                             ;     dec bc
0555                             ; ifte3:
0555                             ;     jp (ix)
0555                             ; switch
0555                             ; index array -- value
0555                SWITCH:      
0555   D1                     POP   de   ; de = array
0556   E1                     POP   hl   ; hl = index
0557   29                     ADD   hl,hl   ; indec *= 2
0558   19                     ADD   hl,de   ; add array[0]
0559   4E                     LD   c,(hl)   ; bc = case
055A   23                     INC   hl   
055B   46                     LD   b,(hl)   
055C   0B                     DEC   bc   
055D   DD E9                  JP   (ix)   
055F                             ; c b --
055F                             ; loops until c = 0
055F                LOOP:        
055F   DD E9                  JP   (ix)   
0561                             ;     pop de                      ; de = block                    c
0561                             ;     pop hl                      ; hl = condition
0561                             ;     push de
0561                             ;     push bc                     ; push IP
0561                             ;     ld bc,de                    ; bc = block
0561                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0561                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0561                             ;     push de                     ; push SCP
0561                             ;     push iy                     ; push BP
0561                             ;     ld iy,0                     ; iy = sp
0561                             ;     add iy,sp
0561                             ; loop1:
0561                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0561                             ;     or h
0561                             ;     jr z,loop3
0561                             ;     ld de,loop2-1               ; IP return address
0561                             ;     push de
0561                             ;     ld e,(iy+2)                 ; push parent SCP
0561                             ;     ld d,(iy+3)
0561                             ;     push de                     ;
0561                             ;     push iy                     ; push BP
0561                             ;     ld iy,0                     ; iy = sp
0561                             ;     add iy,sp
0561                             ;     push hl                     ; push condition
0561                             ;     dec bc
0561                             ;     jp (ix)
0561                             ; loop2:
0561                             ;     db ESC                      ; escape from interpreter
0561                             ;     ld c,(iy+6)                 ; bc = block
0561                             ;     ld b,(iy+7)
0561                             ;     pop hl                      ; hl = condition
0561                             ;     jr loop1
0561                             ; loop3:
0561                             ;     ld d,iyh                    ; de = BP
0561                             ;     ld e,iyl
0561                             ;     ex de,hl                    ; hl = BP, de = result
0561                             ;     ld sp,hl                    ; sp = BP
0561                             ;     pop hl                      ; hl = old BP
0561                             ;     pop bc                      ; pop SCP (discard)
0561                             ;     pop bc                      ; bc = IP
0561                             ;     ld sp,hl                    ; sp = old BP
0561                             ;     ld iy,0                     ; iy = sp
0561                             ;     add iy,sp
0561                             ;     ld ix,next                  ; needed?
0561                             ;     jp (ix)
0561                WORDS:       
0561   21 02 00               LD   hl,2   
0564   18 03                  JR   bytes1   
0566                BYTES:       
0566   21 01 00               LD   hl,1   
0569                BYTES1:      
0569   22 9A 18               LD   (vDataWidth),hl   
056C   DD E9                  JP   (ix)   
056E                ARRAY:       
056E   DD E9                  JP   (ix)   
0570                             ;     push bc                     ; create stack frame, push IP
0570                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0570                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0570                             ;     push de                     ; push SCP
0570                             ;     push iy                     ; push BP
0570                             ;     ld iy,0                     ; BP = SP
0570                             ;     add iy,sp
0570                             ;     jp (ix)
0570                ARRAYEND:      
0570   DD E9                  JP   (ix)   
0572                             ;     ld d,iyh                    ; de = BP
0572                             ;     ld e,iyl
0572                             ;     ld ixh,d                    ; ix = BP
0572                             ;     ld ixl,e
0572                             ;     ld hl,de                    ; hl = de
0572                             ;     or a
0572                             ;     sbc hl,sp                   ; hl = array count (items on stack)
0572                             ;     srl h
0572                             ;     rr l
0572                             ;     ex de,hl                    ; de = count
0572                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0572                             ;     ld (hl),e
0572                             ;     inc hl
0572                             ;     ld (hl),d
0572                             ;     inc hl                      ; hl = array[0], de = count
0572                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
0572                             ;     cp 1
0572                             ;     jr nz, arrayEnd2
0572                             ; arrayEnd1:                      ; byte
0572                             ;     ld a,(ix-2)
0572                             ;     ld (hl),a
0572                             ;     inc hl
0572                             ;     dec ix
0572                             ;     dec ix
0572                             ;     dec de
0572                             ;     ld a,e
0572                             ;     or d
0572                             ;     jr nz,arrayEnd1
0572                             ;     jr arrayEnd3
0572                             ; arrayEnd2:                      ; word
0572                             ;     ld a,(ix-2)
0572                             ;     ld (hl),a
0572                             ;     inc hl
0572                             ;     ld a,(ix-1)
0572                             ;     ld (hl),a
0572                             ;     inc hl
0572                             ;     dec ix
0572                             ;     dec ix
0572                             ;     dec de
0572                             ;     ld a,e
0572                             ;     or d
0572                             ;     jr nz,arrayEnd2
0572                             ; arrayEnd3:
0572                             ;     ld d,iyh                    ; de = BP, hl = end of array
0572                             ;     ld e,iyl
0572                             ;     ex de,hl                    ; hl = BP, de = end of array
0572                             ;     ld sp,hl                    ; sp = BP
0572                             ;     pop hl                      ; hl = old BP, de = end of array
0572                             ;     pop ix                      ; pop SCP (discard)
0572                             ;     pop ix                      ; pop IP (discard)
0572                             ;     ex de,hl
0572                             ;     ld iyh,d
0572                             ;     ld iyl,e
0572                             ;     ex de,hl
0572                             ;     ; ld sp,hl                    ; sp = old BP
0572                             ;     ; ld iy,0                     ; iy = sp
0572                             ;     ; add iy,sp
0572                             ;     ld ix,next
0572                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
0572                             ;     inc hl
0572                             ;     inc hl
0572                             ;     push hl                     ; return array[0]
0572                             ;     ex de,hl                    ; hl = end of array, de = array[0]
0572                             ;     or a
0572                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
0572                             ;     ex de,hl
0572                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0572                             ;     ld (hl),e                   ; array[-2] = size
0572                             ;     inc hl
0572                             ;     ld (hl),d
0572                             ;     inc hl
0572                             ;     add hl,de
0572                             ;     ld (vHeapPtr),hl
0572                             ;     jp (ix)
0572                             ; str -- num
0572                HASH:        
0572   E1                     POP   hl   
0573   C5                     PUSH   bc   
0574   44 4D                  LD   bc,hl   
0576   CD E2 06               CALL   hashStr   
0579   C1                     POP   bc   
057A   E5                     PUSH   hl   
057B   DD E9                  JP   (ix)   
057D                             ; symbol block arity --
057D                DEF:         
057D   21 00 00               LD   hl,0   ; array = 0
0580   E5                     PUSH   hl   ; falls through
0581                             ; symbol block arity array --
0581                CLOSURE:      
0581                DEF0:        
0581   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0584   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0586   23                     INC   hl   
0587   36 77                  LD   (hl),lsb(call)   
0589   23                     INC   hl   
058A   36 0A                  LD   (hl),msb(call)   
058C   23                     INC   hl   
058D   D1                     POP   de   ; pop array
058E   73                     LD   (hl),e   ; compile array
058F   23                     INC   hl   
0590   72                     LD   (hl),d   
0591   23                     INC   hl   
0592   D1                     POP   de   
0593   73                     LD   (hl),e   ; compile arity
0594   23                     INC   hl   
0595   72                     LD   (hl),d   
0596   23                     INC   hl   
0597   D1                     POP   de   ; de = block
0598   C5                     PUSH   bc   ; (sp) = IP (sp+2) = symbol
0599   06 01                  LD   b,1   ; b = nesting
059B                DEF1:        
059B   1A                     LD   a,(de)   
059C   13                     INC   de   
059D   77                     LD   (hl),a   
059E   23                     INC   hl   
059F   FE 29                  CP   ")"   
05A1   28 25                  JR   z,def4   
05A3   FE 7D                  CP   "}"   
05A5   28 21                  JR   z,def4   
05A7   FE 5D                  CP   "]"   
05A9   28 1D                  JR   z,def4   
05AB   FE 28                  CP   "("   
05AD   28 13                  JR   z,def3   
05AF   FE 7B                  CP   "{"   
05B1   28 0F                  JR   z,def3   
05B3   FE 5B                  CP   "["   
05B5   28 0B                  JR   z,def3   
05B7   FE 27                  CP   "'"   
05B9   28 07                  JR   z,def3   
05BB   FE 60                  CP   "`"   
05BD   20 DC                  JR   nz,def1   
05BF                DEF2:        
05BF   04                     INC   b   
05C0   18 D9                  JR   def1   
05C2                DEF3:        
05C2   3E 80                  LD   a,$80   
05C4   A8                     XOR   b   
05C5   47                     LD   b,a   
05C6   18 D3                  JR   def1   
05C8                DEF4:        
05C8   05                     DEC   b   
05C9   20 D0                  JR   nz,def1   ; get the next element
05CB                             ; xor a                       ; end with NUL ??? needed?
05CB                             ; ld (hl),a
05CB   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
05CF   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
05D2   E1                     POP   hl   ; de = defstart, hl = IP
05D3   E3                     EX   (sp),hl   ; hl = symbol, de = defstart, (sp) = IP
05D4   44 4D                  LD   bc,hl   ; bc = symbol
05D6   CD FB 06               CALL   defineEntry   
05D9   38 00                  JR   c,def5   
05DB                             ; call error
05DB                             ; .cstr "Def Collision"
05DB                DEF5:        
05DB   C1                     POP   bc   ; bc = IP
05DC   DD E9                  JP   (ix)   
05DE                             ; symbol value --
05DE                LET:         
05DE   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
05E0   E3                     EX   (sp),hl   
05E1   EB                     EX   de,hl   
05E2   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
05E5   36 CD                  LD   (hl),$cd   ; compile "call dolet"
05E7   23                     INC   hl   
05E8   36 2A                  LD   (hl),lsb(dolet)   
05EA   23                     INC   hl   
05EB   36 05                  LD   (hl),msb(dolet)   
05ED   23                     INC   hl   
05EE   73                     LD   (hl),e   
05EF   23                     INC   hl   
05F0   72                     LD   (hl),d   
05F1   2B                     DEC   hl   
05F2   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
05F6   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
05F9   E1                     POP   hl   ; de = addr, hl = IP
05FA   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
05FB   44 4D                  LD   bc,hl   ; bc = symbol
05FD   CD FB 06               CALL   defineEntry   
0600   38 00                  JR   c,let2   
0602                             ; call error
0602                             ; .cstr "Let Collision"
0602                LET2:        
0602   C1                     POP   bc   
0603   DD E9                  JP   (ix)   
0605                             ; str -- addr
0605                ADDR:        
0605   E1                     POP   hl   ; hl = hash
0606   C5                     PUSH   bc   
0607   44 4D                  LD   bc,hl   
0609   CD 21 07               CALL   lookupEntry   
060C   38 03                  JR   c,addr1   
060E   21 00 00               LD   hl,0   
0611                             ; call printStr		
0611                             ; .cstr "Undefined"
0611                             ; jp interpret
0611                ADDR1:       
0611   C1                     POP   bc   
0612   11 03 00               LD   de,3   
0615   19                     ADD   hl,de   
0616   E5                     PUSH   hl   
0617   DD E9                  JP   (ix)   
0619                SYMBOL:      
0619   03                     INC   bc   
061A   11 00 1A               LD   de,PAD   
061D   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
061F   18 02                  JR   symbol1   
0621                SYMBOL0:      ; copy to PAD area
0621   03                     INC   bc   ; characters that are part of the identifier
0622   13                     INC   de   
0623                SYMBOL1:      ; 0-9 A-Z a-z _
0623   0A                     LD   a,(bc)   
0624   12                     LD   (de),a   
0625   FE 21                  CP   " "+1   
0627   38 0A                  JR   c,symbol2   
0629   6F                     LD   l,a   
062A   7E                     LD   a,(hl)   
062B   FE 5B                  CP   lsb(ident_)   
062D   28 F2                  JR   z,symbol0   
062F   FE 00                  CP   lsb(num_)   
0631   28 EE                  JR   z,symbol0   
0633                SYMBOL2:      
0633   0B                     DEC   bc   
0634   AF                     XOR   a   
0635   12                     LD   (de),a   ; terminate string with NUL
0636   C5                     PUSH   bc   
0637   01 00 1A               LD   bc,PAD   
063A   CD E2 06               CALL   hashStr   ; hl = hash
063D   C1                     POP   bc   
063E   E5                     PUSH   hl   
063F   DD E9                  JP   (ix)   
0641                IDENT:       
0641   11 00 1A               LD   de,PAD   
0644   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0646   18 02                  JR   ident1   
0648                IDENT0:      ; copy to PAD area
0648   03                     INC   bc   ; characters that are part of the identifier
0649   13                     INC   de   
064A                IDENT1:      ; 0-9 A-Z a-z _
064A   0A                     LD   a,(bc)   
064B   12                     LD   (de),a   
064C                             ; or a
064C                             ; jr z,ident2
064C   FE 21                  CP   " "+1   
064E   38 0A                  JR   c,ident2   
0650   6F                     LD   l,a   
0651   7E                     LD   a,(hl)   
0652   FE 5B                  CP   lsb(ident_)   
0654   28 F2                  JR   z,ident0   
0656   FE 00                  CP   lsb(num_)   
0658   28 EE                  JR   z,ident0   
065A                IDENT2:      
065A   0B                     DEC   bc   
065B   AF                     XOR   a   
065C   12                     LD   (de),a   ; terminate string with NUL
065D   C5                     PUSH   bc   
065E   01 00 1A               LD   bc,PAD   
0661   CD E2 06               CALL   hashStr   ; hl = hash
0664   44 4D                  LD   bc,hl   
0666   CD 21 07               CALL   lookupEntry   
0669   C1                     POP   bc   
066A   38 02                  JR   c,ident3   ; todo: no entry? print an error message
066C   DD E9                  JP   (ix)   
066E                IDENT3:      
066E   E9                     JP   (hl)   
066F                FRAC:        
066F   2A 98 18               LD   hl,(vFrac)   
0672   E5                     PUSH   hl   
0673   DD E9                  JP   (ix)   
0675                SQRT1:       
0675   E1                     POP   hl   
0676   C5                     PUSH   bc   
0677   CD 5E 07               CALL   squareRoot   
067A   ED 43 98 18            LD   (vFrac),bc   
067E   C1                     POP   bc   
067F   D5                     PUSH   de   
0680   DD E9                  JP   (ix)   
0682                ABS1:        
0682   E1                     POP   hl   
0683   CB 7C                  BIT   7,h   
0685   C8                     RET   z   
0686   AF                     XOR   a   
0687   95                     SUB   l   
0688   6F                     LD   l,a   
0689   9F                     SBC   a,a   
068A   94                     SUB   h   
068B   67                     LD   h,a   
068C   E5                     PUSH   hl   
068D   DD E9                  JP   (ix)   
068F                MOD:         
068F   D1                     POP   de   ; get first value
0690   E1                     POP   hl   ; get 2nd value
0691   C5                     PUSH   bc   ; preserve the IP
0692   44 4D                  LD   bc,hl   
0694   CD 45 07               CALL   divide   
0697   C1                     POP   bc   
0698   E5                     PUSH   hl   ; push remainder
0699   DD E9                  JP   (ix)   
069B                             ; hl = value1, de = value2
069B                             ; hl = result
069B                EQUALS:      
069B   B7                     OR   a   ; reset the carry flag
069C   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
069E   28 10                  JR   z,true1   
06A0   C3 B6 06               JP   false1   
06A3                             ; hl = value1 de = value2
06A3                             ; hl = result
06A3                LESSTHANEQ:      
06A3   B7                     OR   a   
06A4   ED 52                  SBC   hl,de   
06A6   18 05                  JR   lessthan1   
06A8                             ; hl = value1 de = value2
06A8                             ; hl = result
06A8                LESSTHAN:      
06A8   B7                     OR   a   
06A9   ED 52                  SBC   hl,de   
06AB   28 09                  JR   z,false1   
06AD                LESSTHAN1:      
06AD   FA B6 06               JP   m,false1   
06B0                TRUE1:       
06B0   21 FF FF               LD   hl,TRUE   
06B3   E5                     PUSH   hl   
06B4   DD E9                  JP   (ix)   
06B6                FALSE1:      
06B6   21 00 00               LD   hl,FALSE   
06B9   E5                     PUSH   hl   
06BA   DD E9                  JP   (ix)   
06BC                             ; Z80 port input
06BC                             ; port -- value
06BC                INPUT:       
06BC   E1                     POP   hl   
06BD   59                     LD   e,c   ; save IP
06BE   4D                     LD   c,l   
06BF   ED 68                  IN   l,(c)   
06C1   26 00                  LD   h,0   
06C3   4B                     LD   c,e   ; restore IP
06C4   E5                     PUSH   hl   
06C5   DD E9                  JP   (ix)   
06C7                             ; Z80 port output
06C7                             ; value port --
06C7                OUTPUT:      
06C7   E1                     POP   hl   
06C8   59                     LD   e,c   ; save IP
06C9   4D                     LD   c,l   
06CA   E1                     POP   hl   
06CB   ED 69                  OUT   (c),l   
06CD   4B                     LD   c,e   ; restore IP
06CE   DD E9                  JP   (ix)   
06D0                KEY:         
06D0   CD 81 00               CALL   getchar   
06D3   26 00                  LD   h,0   
06D5   6F                     LD   l,a   
06D6   E5                     PUSH   hl   
06D7   DD E9                  JP   (ix)   
06D9                NEG:         
06D9   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
06DC   D1                     POP   de   
06DD   C3 A1 03               JP   sub2   ; use the SUBtract routine
06E0                FILTER:      
06E0                MAP:         
06E0                SCAN:        
06E0   DD E9                  JP   (ix)   
06E2                             ; -------------------------------------------------------------------------------
06E2                             ; hash C-string
06E2                             ; BC = str
06E2                             ; HL = hash
06E2                HASHSTR:      
06E2   21 00 00               LD   hl,0   
06E5                HASHSTR1:      
06E5   0A                     LD   a,(bc)   ; load next char
06E6   03                     INC   bc   
06E7   FE 00                  CP   0   ; NUL?
06E9   C8                     RET   z   
06EA                HASHSTR2:      
06EA   16 00                  LD   d,0   
06EC   5F                     LD   e,a   
06ED   19                     ADD   hl,de   
06EE   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
06F0   29                     ADD   hl,hl   ; shift left
06F1   19                     ADD   hl,de   ; add
06F2   29                     ADD   hl,hl   ; shift left
06F3   29                     ADD   hl,hl   ; shift left
06F4   29                     ADD   hl,hl   ; shift left
06F5   29                     ADD   hl,hl   ; shift left
06F6   29                     ADD   hl,hl   ; shift left
06F7   29                     ADD   hl,hl   ; shift left
06F8   19                     ADD   hl,de   ; add
06F9   18 EA                  JR   hashStr1   
06FB                             ; add entry to hash slots and hash pointers
06FB                             ; bc = hash (b = hi, c = lo), de = addr
06FB                             ; sets carry if successful
06FB                DEFINEENTRY:      
06FB   CB 21                  SLA   c   ; lo = lo * 2
06FD   69                     LD   l,c   ; lo1 = lo
06FE   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0700                DEFINEENTRY0:      
0700   7E                     LD   a,(hl)   ; a = (lo1)
0701   FE FF                  CP   UNUSED   ; is it unused?
0703   28 12                  JR   z,defineEntry3   ; yes, add entry
0705   79                     LD   a,c   ; a = lo
0706   BE                     CP   (hl)   ; compare (lo1) with lo
0707   20 06                  JR   nz,defineEntry1   ; no match loop around
0709   2C                     INC   l   
070A   78                     LD   a,b   ; a = hi
070B   BE                     CP   (hl)   ; compare (lo1+1) with hi
070C   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
070E   2D                     DEC   l   ; restore l
070F                DEFINEENTRY1:      
070F   2C                     INC   l   ; try next entry
0710   2C                     INC   l   
0711   79                     LD   a,c   ; compare lo and lo1
0712   BD                     CP   l   ; if equal then there's no space left, reject
0713   20 EB                  JR   nz,defineEntry0   
0715                DEFINEENTRY2:      
0715   B7                     OR   a   ; clear carry flag, failure
0716   C9                     RET      
0717                DEFINEENTRY3:      ; new entry
0717   71                     LD   (hl),c   ; (lo1) = hash lo
0718   23                     INC   hl   
0719   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
071A   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
071C   72                     LD   (hl),d   
071D   2B                     DEC   hl   
071E   73                     LD   (hl),e   ; (slot + 2) = address
071F   37                     SCF      ; set carry flag, success
0720   C9                     RET      
0721                             ; looks up hash and returns address
0721                             ; bc = hash
0721                             ; returns addr in hl, sets carry if successful
0721                LOOKUPENTRY:      
0721   CB 21                  SLA   c   ; lo = lo * 2
0723   69                     LD   l,c   ; lo1 = lo
0724   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0726                LOOKUPENTRY0:      
0726   7E                     LD   a,(hl)   ; a = (hl), slot
0727   FE FF                  CP   UNUSED   ; is it unused?
0729   28 EA                  JR   z,defineEntry2   ; yes, does not exist
072B   79                     LD   a,c   ; a = lo
072C   BE                     CP   (hl)   ; compare (lo1) with lo
072D   20 06                  JR   nz,lookupEntry1   ; no match loop around
072F   2C                     INC   l   
0730   78                     LD   a,b   ; a = hi
0731   BE                     CP   (hl)   ; compare (lo1+1) with hi
0732   28 09                  JR   z,lookupEntry3   
0734   2D                     DEC   l   
0735                LOOKUPENTRY1:      
0735   2C                     INC   l   
0736   2C                     INC   l   
0737   79                     LD   a,c   
0738   BD                     CP   l   ; no space left, reject
0739   20 EB                  JR   nz,lookupEntry0   
073B                LOOKUPENTRY2:      
073B   B7                     OR   a   ; clear carry flag, failure
073C   C9                     RET      
073D                LOOKUPENTRY3:      
073D   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
073F   56                     LD   d,(hl)   
0740   2D                     DEC   l   ; restore l
0741   5E                     LD   e,(hl)   ; (slot + 2) = address
0742   EB                     EX   de,hl   
0743   37                     SCF      
0744   C9                     RET      
0745                             ; division subroutine.
0745                             ; bc: divisor, de: dividend, hl: remainder
0745                DIVIDE:      
0745   21 00 00               LD   hl,0   ; zero the remainder
0748   3E 10                  LD   a,16   ; loop counter
074A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
074A   CB 21                  SLA   c   
074C   CB 10                  RL   b   
074E   ED 6A                  ADC   hl,hl   
0750   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0752   38 03                  JR   c,divide2   
0754   0C                     INC   c   
0755   18 01                  JR   divide3   
0757                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0757   19                     ADD   hl,de   
0758                DIVIDE3:      
0758   3D                     DEC   a   
0759   20 EF                  JR   nz,divide1   
075B   50 59                  LD   de,bc   ; result from bc to de
075D   C9                     RET      
075E                             ; squareroot
075E                             ; Input: HL = value
075E                             ; Result: DE = square root BC = remainder
075E                SQUAREROOT:      
075E   01 00 08               LD   bc,0800h   
0761   59                     LD   e,c   
0762   AF                     XOR   a   
0763                SQUAREROOT1:      
0763   29                     ADD   hl,hl   
0764   CB 11                  RL   c   
0766   ED 6A                  ADC   hl,hl   
0768   CB 11                  RL   c   
076A   30 02                  JR   nc,$+4   
076C   CB C5                  SET   0,l   
076E   7B                     LD   a,e   
076F   87                     ADD   a,a   
0770   5F                     LD   e,a   
0771   87                     ADD   a,a   
0772   CB 45                  BIT   0,l   
0774   20 03                  JR   nz,$+5   
0776   91                     SUB   c   
0777   30 05                  JR   nc,squareRoot4   
0779   79                     LD   a,c   
077A   93                     SUB   e   
077B   1C                     INC   e   
077C   93                     SUB   e   
077D   4F                     LD   c,a   
077E                SQUAREROOT4:      
077E   10 E3                  DJNZ   squareRoot1   
0780   CB 45                  BIT   0,l   
0782   28 01                  JR   z,squareRoot5   
0784   04                     INC   b   
0785                SQUAREROOT5:      
0785   16 00                  LD   d,0   
0787   C9                     RET      
0788                PRTDEC:      
0788   CB 7C                  BIT   7,h   
078A   28 0B                  JR   z,prtdec0   
078C   3E 2D                  LD   a,"-"   
078E   CD 85 00               CALL   putchar   
0791   AF                     XOR   a   
0792   95                     SUB   l   
0793   6F                     LD   l,a   
0794   9F                     SBC   a,a   
0795   94                     SUB   h   
0796   67                     LD   h,a   
0797                PRTDEC0:      
0797   C5                     PUSH   bc   
0798   0E 00                  LD   c,0   ; leading zeros flag = false
079A   11 F0 D8               LD   de,-10000   
079D   CD B9 07               CALL   prtdec1   
07A0   11 18 FC               LD   de,-1000   
07A3   CD B9 07               CALL   prtdec1   
07A6   11 9C FF               LD   de,-100   
07A9   CD B9 07               CALL   prtdec1   
07AC   1E F6                  LD   e,-10   
07AE   CD B9 07               CALL   prtdec1   
07B1   0C                     INC   c   ; flag = true for at least digit
07B2   1E FF                  LD   e,-1   
07B4   CD B9 07               CALL   prtdec1   
07B7   C1                     POP   bc   
07B8   C9                     RET      
07B9                PRTDEC1:      
07B9   06 2F                  LD   b,"0"-1   
07BB                PRTDEC2:      
07BB   04                     INC   b   
07BC   19                     ADD   hl,de   
07BD   38 FC                  JR   c,prtdec2   
07BF   ED 52                  SBC   hl,de   
07C1   3E 30                  LD   a,"0"   
07C3   B8                     CP   b   
07C4   20 05                  JR   nz,prtdec3   
07C6   AF                     XOR   a   
07C7   B1                     OR   c   
07C8   C8                     RET   z   
07C9   18 01                  JR   prtdec4   
07CB                PRTDEC3:      
07CB   0C                     INC   c   
07CC                PRTDEC4:      
07CC   78                     LD   a,b   
07CD   C3 85 00               JP   putchar   
07D0                PRTHEX:      ; display hl as a 16-bit number in hex.
07D0   C5                     PUSH   bc   ; preserve the IP
07D1   7C                     LD   a,h   
07D2   CD DB 07               CALL   prthex2   
07D5   7D                     LD   a,l   
07D6   CD DB 07               CALL   prthex2   
07D9   C1                     POP   bc   
07DA   C9                     RET      
07DB                PRTHEX2:      
07DB   4F                     LD   c,a   
07DC   1F                     RRA      
07DD   1F                     RRA      
07DE   1F                     RRA      
07DF   1F                     RRA      
07E0   CD E4 07               CALL   prthex3   
07E3   79                     LD   a,c   
07E4                PRTHEX3:      
07E4   E6 0F                  AND   0x0F   
07E6   C6 90                  ADD   a,0x90   
07E8   27                     DAA      
07E9   CE 40                  ADC   a,0x40   
07EB   27                     DAA      
07EC   C3 85 00               JP   putchar   
07EF                PRTSTR0:      
07EF   CD 85 00               CALL   putchar   
07F2   23                     INC   hl   
07F3                PRTSTR:      
07F3   7E                     LD   a,(hl)   
07F4   B7                     OR   a   
07F5   20 F8                  JR   nz,prtstr0   
07F7   C9                     RET      
07F8                             ; **************************************************************************
07F8                             ; calculate nesting value
07F8                             ; a is char to be tested,
07F8                             ; e is the nesting value (initially 0)
07F8                             ; e is increased by ( and [
07F8                             ; e is decreased by ) and ]
07F8                             ; e has its bit 7 toggled by `
07F8                             ; limited to 127 levels
07F8                             ; **************************************************************************
07F8                NESTING:      
07F8   FE 22                  CP   $22   ; quote char
07FA   20 0A                  JR   nz,nesting1   
07FC   CB 7B                  BIT   7,e   
07FE   28 03                  JR   z,nesting1a   
0800   CB BB                  RES   7,e   
0802   C9                     RET      
0803                NESTING1A:      
0803   CB FB                  SET   7,e   
0805   C9                     RET      
0806                NESTING1:      
0806   CB 7B                  BIT   7,e   
0808   C0                     RET   nz   
0809   FE 7B                  CP   "{"   
080B   28 08                  JR   z,nesting2   
080D   FE 5B                  CP   "["   
080F   28 04                  JR   z,nesting2   
0811   FE 28                  CP   "("   
0813   20 02                  JR   nz,nesting3   
0815                NESTING2:      
0815   1C                     INC   e   
0816   C9                     RET      
0817                NESTING3:      
0817   FE 7D                  CP   "}"   
0819   28 07                  JR   z,nesting4   
081B   FE 5D                  CP   "]"   
081D   28 03                  JR   z,nesting4   
081F   FE 29                  CP   ")"   
0821   C0                     RET   nz   
0822                NESTING4:      
0822   1D                     DEC   e   
0823   C9                     RET      
0824                PROMPT:      
0824   CD 34 08               CALL   printStr   
0827   0D 0A 3E 20 00         .CSTR   "\r\n> "   
082C   C9                     RET      
082D                CRLF:        
082D   CD 34 08               CALL   printStr   
0830   0D 0A 00               .CSTR   "\r\n"   
0833   C9                     RET      
0834                PRINTSTR:      
0834   E3                     EX   (sp),hl   ; swap			
0835   CD F3 07               CALL   prtstr   
0838   23                     INC   hl   ; inc past NUL
0839   E3                     EX   (sp),hl   ; put it back	
083A   C9                     RET      
083B                DEFINE:      
083B   E1                     POP   hl   
083C   7E                     LD   a,(hl)   
083D   23                     INC   hl   
083E   44 4D                  LD   bc,hl   
0840   5F                     LD   e,a   
0841   16 00                  LD   d,0   
0843   19                     ADD   hl,de   
0844   5E                     LD   e,(hl)   
0845   23                     INC   hl   
0846   56                     LD   d,(hl)   
0847   23                     INC   hl   
0848   E5                     PUSH   hl   ; bc = str
0849   D5                     PUSH   de   
084A   CD E2 06               CALL   hashStr   ; hl = hash
084D   D1                     POP   de   
084E   44 4D                  LD   bc,hl   
0850   C3 FB 06               JP   defineEntry   
0853                INIT:        
0853   DD 21 29 0A            LD   ix,next   
0857   FD 21 80 18            LD   iy,STACK   
085B   21 80 01               LD   hl,isysVars   
085E   11 98 18               LD   de,sysVars   
0861   01 10 00               LD   bc,8 * 2   
0864   ED B0                  LDIR      
0866   3E FF                  LD   a,UNUSED   
0868   06 00                  LD   b,0   
086A   21 00 1B               LD   hl,hashSlots   
086D                INIT1:       
086D   77                     LD   (hl),a   
086E   23                     INC   hl   
086F   10 FC                  DJNZ   init1   
0871   CD 3B 08               CALL   define   
0874   04 61 62 73 00         .PSTR   "abs",0   
0879   82 06                  DW   abs1   
087B   CD 3B 08               CALL   define   
087E   05 61 64 64 72 00      .PSTR   "addr",0   
0884   05 06                  DW   addr   
0886   CD 3B 08               CALL   define   
0889   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0890   66 05                  DW   bytes   
0892   CD 3B 08               CALL   define   
0895   05 63 61 6C 6C 00      .PSTR   "call",0   
089B   77 0A                  DW   call   
089D   CD 3B 08               CALL   define   
08A0   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
08A9   81 05                  DW   closure   
08AB   CD 3B 08               CALL   define   
08AE   04 64 65 66 00         .PSTR   "def",0   
08B3   7D 05                  DW   def   
08B5   CD 3B 08               CALL   define   
08B8   05 65 78 65 63 00      .PSTR   "exec",0   
08BE   5E 0A                  DW   exec   
08C0   CD 3B 08               CALL   define   
08C3   06 66 61 6C 73 65 00   .PSTR   "false",0   
08CA   00 00                  DW   false   
08CC   CD 3B 08               CALL   define   
08CF   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
08D7   E0 06                  DW   filter   
08D9   CD 3B 08               CALL   define   
08DC   05 66 72 61 63 00      .PSTR   "frac",0   
08E2   6F 06                  DW   frac   
08E4   CD 3B 08               CALL   define   
08E7   04 67 65 74 00         .PSTR   "get",0   
08EC   2A 05                  DW   get   
08EE   CD 3B 08               CALL   define   
08F1   05 68 61 73 68 00      .PSTR   "hash",0   
08F7   72 05                  DW   hash   
08F9   CD 3B 08               CALL   define   
08FC   06 69 6E 70 75 74 00   .PSTR   "input",0   
0903   BC 06                  DW   input   
0905   CD 3B 08               CALL   define   
0908   03 69 66 00            .PSTR   "if",0   
090C   51 05                  DW   if   
090E   CD 3B 08               CALL   define   
0911   05 69 66 74 65 00      .PSTR   "ifte",0   
0917   53 05                  DW   ifte   
0919   CD 3B 08               CALL   define   
091C   04 6B 65 79 00         .PSTR   "key",0   
0921   D0 06                  DW   key   
0923   CD 3B 08               CALL   define   
0926   04 6C 65 74 00         .PSTR   "let",0   
092B   DE 05                  DW   let   
092D   CD 3B 08               CALL   define   
0930   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0936   5F 05                  DW   loop   
0938   CD 3B 08               CALL   define   
093B   04 6D 61 70 00         .PSTR   "map",0   
0940   E0 06                  DW   map   
0942   CD 3B 08               CALL   define   
0945   04 6D 6F 64 00         .PSTR   "mod",0   
094A   8F 06                  DW   mod   
094C   CD 3B 08               CALL   define   
094F   04 6E 65 67 00         .PSTR   "neg",0   
0954   D9 06                  DW   neg   
0956   CD 3B 08               CALL   define   
0959   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0961   C7 06                  DW   output   
0963   CD 3B 08               CALL   define   
0966   05 73 63 61 6E 00      .PSTR   "scan",0   
096C   01 00                  DW   scan   
096E   CD 3B 08               CALL   define   
0971   04 73 65 74 00         .PSTR   "set",0   
0976   3C 05                  DW   set   
0978   CD 3B 08               CALL   define   
097B   04 73 68 6C 00         .PSTR   "shl",0   
0980   DC 03                  DW   shl   
0982   CD 3B 08               CALL   define   
0985   04 73 68 72 00         .PSTR   "shr",0   
098A   EC 03                  DW   shr   
098C   CD 3B 08               CALL   define   
098F   05 73 71 72 74 00      .PSTR   "sqrt",0   
0995   75 06                  DW   sqrt1   
0997   CD 3B 08               CALL   define   
099A   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09A2   55 05                  DW   switch   
09A4   CD 3B 08               CALL   define   
09A7   05 74 72 75 65 00      .PSTR   "true",0   
09AD   FF FF                  DW   true   
09AF   CD 3B 08               CALL   define   
09B2   06 77 6F 72 64 73 00   .PSTR   "words",0   
09B9   61 05                  DW   words   
09BB   C9                     RET      
09BC                START:       
09BC   31 80 18               LD   sp,STACK   ; start of Siena
09BF   CD 53 08               CALL   init   ; setups
09C2   CD 34 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09C5   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
09D2                INTERPRET:      
09D2   CD 24 08               CALL   prompt   
09D5   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09D8   ED 43 9C 18            LD   (vTIBPtr),bc   
09DC                INTERPRET2:      ; calc nesting (a macro might have changed it)
09DC   1E 00                  LD   e,0   ; initilize nesting value
09DE   C5                     PUSH   bc   ; save offset into TIB,
09DF                             ; bc is also the count of chars in TIB
09DF   21 00 19               LD   hl,TIB   ; hl is start of TIB
09E2   18 06                  JR   interpret4   
09E4                INTERPRET3:      
09E4   7E                     LD   a,(hl)   ; a = char in TIB
09E5   23                     INC   hl   ; inc pointer into TIB
09E6   0B                     DEC   bc   ; dec count of chars in TIB
09E7   CD F8 07               CALL   nesting   ; update nesting value
09EA                INTERPRET4:      
09EA   79                     LD   a,c   ; is count zero?
09EB   B0                     OR   b   
09EC   20 F6                  JR   nz,interpret3   ; if not loop
09EE   C1                     POP   bc   ; restore offset into TIB
09EF                WAITCHAR:      
09EF   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09F2   FE 20                  CP   $20   ; compare to space
09F4   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
09F6   FE 00                  CP   $0   ; is it end of string? NUL end of string
09F8                             ; ???? NEEDED?
09F8   28 27                  JR   z,waitchar4   
09FA   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09FC   28 10                  JR   z,waitchar3   ; if anything else its macro/control
09FE                MACRO:       
09FE                             ;  ld (vTIBPtr),bc
09FE                             ;  ld hl,ctrlCodes
09FE                             ;  add a,l			            ; look up key of macros
09FE                             ;  ld l,a
09FE                             ;  ld e,(hl)
09FE                             ;  ld a,e
09FE                             ;  or a
09FE                             ;  jr z,macro1
09FE                             ;  ld d,msb(macros)
09FE                             ;  push de
09FE                             ;  call call		            ; Siena exec_ operation and jump to it
09FE                             ;  db DC1,0
09FE                             ; macro1:
09FE                             ;  ld bc,(vTIBPtr)
09FE   18 DC                  JR   interpret2   
0A00                WAITCHAR1:      
0A00   21 00 19               LD   hl,TIB   
0A03   09                     ADD   hl,bc   
0A04   77                     LD   (hl),a   ; store the character in textbuf
0A05   03                     INC   bc   
0A06   CD 85 00               CALL   putchar   ; echo character to screen
0A09   CD F8 07               CALL   nesting   
0A0C   18 E1                  JR   waitchar   ; wait for next character
0A0E                WAITCHAR3:      
0A0E   21 00 19               LD   hl,TIB   
0A11   09                     ADD   hl,bc   
0A12   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A14   23                     INC   hl   
0A15   36 0A                  LD   (hl),"\n"   
0A17   23                     INC   hl   
0A18   03                     INC   bc   
0A19   03                     INC   bc   
0A1A   CD 2D 08               CALL   crlf   ; echo character to screen
0A1D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A1E   B7                     OR   a   
0A1F   20 CE                  JR   nz,waitchar   
0A21                             ; ld (hl),ETX                 ; store end of text ETX in text buffer ??? NEEDED?
0A21                             ; inc bc
0A21                WAITCHAR4:      
0A21   ED 43 9C 18            LD   (vTIBPtr),bc   
0A25   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A28                             ; we pressed enter
0A28   0B                     DEC   bc   
0A29                NEXT:        
0A29   03                     INC   bc   ; Increment the IP
0A2A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A2B   FE 20                  CP   " "   ; whitespace?
0A2D   28 FA                  JR   z,next   ; space? ignore
0A2F   38 07                  JR   c,next1   
0A31   6F                     LD   l,a   ; index into table
0A32   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A34   6E                     LD   l,(hl)   ; get low jump address
0A35   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A37   E9                     JP   (hl)   ; Jump to routine
0A38                NEXT1:       
0A38   FE 1B                  CP   ESC   ; escape from interpreter
0A3A   28 07                  JR   z,escape   
0A3C   FE 00                  CP   NUL   ; end of input string?
0A3E   28 07                  JR   z,exit   
0A40   C3 D2 09               JP   interpret   ; no, other whitespace, macros?
0A43                ESCAPE:      
0A43   60 69                  LD   hl,bc   ; address of code after escape opcode
0A45   23                     INC   hl   
0A46   E9                     JP   (hl)   
0A47                EXIT:        
0A47   50 59                  LD   de,bc   ; address of code after exit opcode
0A49   13                     INC   de   
0A4A   D9                     EXX      
0A4B   C1                     POP   bc   ; bc = last result
0A4C   E1                     POP   hl   ; pop array (discard)
0A4D   FD 54                  LD   d,iyh   ; de = BP
0A4F   FD 5D                  LD   e,iyl   
0A51   EB                     EX   de,hl   ; hl = BP
0A52   F9                     LD   sp,hl   ; sp = BP
0A53   D9                     EXX      
0A54   E1                     POP   hl   ; hl = old BP
0A55   C1                     POP   bc   ; pop SCP (discard)
0A56   C1                     POP   bc   ; pop array (discard)
0A57   C1                     POP   bc   ; bc = IP
0A58   F9                     LD   sp,hl   ; sp = old BP
0A59   D9                     EXX      
0A5A   C5                     PUSH   bc   ; push result
0A5B   D9                     EXX      
0A5C   EB                     EX   de,hl   
0A5D   E9                     JP   (hl)   
0A5E                             ; execute a block of code
0A5E                             ; uses parent scope
0A5E                EXEC:        ; execute code at pointer
0A5E   E1                     POP   hl   ; hl = pointer to code
0A5F   7C                     LD   a,h   ; skip if destination address is NUL
0A60   B5                     OR   l   
0A61   28 12                  JR   z,exec2   
0A63   C5                     PUSH   bc   ; push IP
0A64   11 00 00               LD   de,0   
0A67   D5                     PUSH   de   ; array = 0
0A68   FD E5                  PUSH   iy   ; push SCP
0A6A   FD E5                  PUSH   iy   ; push BP
0A6C   FD 21 00 00            LD   iy,0   ; BP = SP
0A70   FD 39                  ADD   iy,sp   
0A72   44 4D                  LD   bc,hl   ; IP = pointer to code
0A74   0B                     DEC   bc   ; dec to prepare for next routine
0A75                EXEC2:       
0A75   DD E9                  JP   (ix)   
0A77                             ; call with args
0A77                             ; creates a scope
0A77                CALL:        ; execute code at pointer
0A77   E1                     POP   hl   ; hl = pointer to code
0A78                CALL1:       
0A78   7C                     LD   a,h   ; skip if destination address is NUL
0A79   B5                     OR   l   
0A7A   28 1B                  JR   z,call2   
0A7C   C5                     PUSH   bc   ; push IP
0A7D   5E                     LD   e,(hl)   ; de = array
0A7E   23                     INC   hl   
0A7F   56                     LD   d,(hl)   
0A80   23                     INC   hl   
0A81   D5                     PUSH   de   ; push array
0A82   5E                     LD   e,(hl)   ; de = arity
0A83   23                     INC   hl   
0A84   56                     LD   d,(hl)   ; hl = block-1
0A85   EB                     EX   de,hl   ; hl = arity, de = block-1
0A86   29                     ADD   hl,hl   ; hl = arity * 2 bytes
0A87   01 04 00               LD   bc,4   ; hl = arity * 2 - 4 bytes (ip,array)
0A8A   09                     ADD   hl,bc   
0A8B   39                     ADD   hl,sp   ; hl = pointer to first arg
0A8C   E5                     PUSH   hl   ; push hl
0A8D   FD E5                  PUSH   iy   ; push BP
0A8F   FD 21 00 00            LD   iy,0   ; BP = SP
0A93   FD 39                  ADD   iy,sp   
0A95   42 4B                  LD   bc,de   ; IP = block-1, ready for NEXT
0A97                CALL2:       
0A97   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x {1} 0 def x", 1
4000   31 80 18               LD   SP,STACK   
4003   CD 53 08               CALL   init   
4006   CD 5E 0A               CALL   exec   
4009   3A 78 20 7B 31 7D 20 30 20 64 65 66 20 78 00 .CSTR   ":x {1} 0 def x"   
4018                          ;*Macro unroll:  expect ":x {1} 0 def x",1
4018   E1                     POP   HL   
4019   E5                     PUSH   HL   
401A   11 01 00               LD   DE,1   
401D   B7                     OR   A   
401E   ED 52                  SBC   HL,DE   
4020   7D                     LD   A,L   
4021   B4                     OR   H   
4022   28 59                  JR   Z,expectM_0_2312S43   
4024   CD 34 08               CALL   printStr   
4027   43 6F 64 65 3A 20 3A 78 20 7B 31 7D 20 30 20 64 65 66 20 78 00 .CSTR   "Code: ",":x {1} 0 def x"   
403C   CD 34 08               CALL   printStr   
403F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404E   21 01 00               LD   HL,1   
4051   CD 88 07               CALL   prtdec   
4054   CD 34 08               CALL   printStr   
4057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4064   E1                     POP   hl   
4065   E5                     PUSH   hl   
4066   CD 88 07               CALL   prtdec   
4069   E1                     POP   hl   
406A   CD 34 08               CALL   printStr   
406D   20 28 23 00            .CSTR   " (#"   
4071   CD D0 07               CALL   prthex   
4074   CD 34 08               CALL   printStr   
4077   29 0D 0A 00            .CSTR   ")\r\n"   
407B   76                     HALT      
407C   00                     .CSTR      
407D                EXPECTM_0_2312S43:      
407D   E1                     POP   HL   
407E                          ;*Macro unroll:  test ":x {$1} 1 def 2 x", 2
407E   31 80 18               LD   SP,STACK   
4081   CD 53 08               CALL   init   
4084   CD 5E 0A               CALL   exec   
4087   3A 78 20 7B 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   ":x {$1} 1 def 2 x"   
4099                          ;*Macro unroll:  expect ":x {$1} 1 def 2 x",2
4099   E1                     POP   HL   
409A   E5                     PUSH   HL   
409B   11 02 00               LD   DE,2   
409E   B7                     OR   A   
409F   ED 52                  SBC   HL,DE   
40A1   7D                     LD   A,L   
40A2   B4                     OR   H   
40A3   28 5C                  JR   Z,expectM_0_2313S43   
40A5   CD 34 08               CALL   printStr   
40A8   43 6F 64 65 3A 20 3A 78 20 7B 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x {$1} 1 def 2 x"   
40C0   CD 34 08               CALL   printStr   
40C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D2   21 02 00               LD   HL,2   
40D5   CD 88 07               CALL   prtdec   
40D8   CD 34 08               CALL   printStr   
40DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E8   E1                     POP   hl   
40E9   E5                     PUSH   hl   
40EA   CD 88 07               CALL   prtdec   
40ED   E1                     POP   hl   
40EE   CD 34 08               CALL   printStr   
40F1   20 28 23 00            .CSTR   " (#"   
40F5   CD D0 07               CALL   prthex   
40F8   CD 34 08               CALL   printStr   
40FB   29 0D 0A 00            .CSTR   ")\r\n"   
40FF   76                     HALT      
4100   00                     .CSTR      
4101                EXPECTM_0_2313S43:      
4101   E1                     POP   HL   
4102                          ;*Macro unroll:  test ":x {$1 3 set $1} 1 def 2 x", 3
4102   31 80 18               LD   SP,STACK   
4105   CD 53 08               CALL   init   
4108   CD 5E 0A               CALL   exec   
410B   3A 78 20 7B 24 31 20 33 20 73 65 74 20 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   ":x {$1 3 set $1} 1 def 2 x"   
4126                          ;*Macro unroll:  expect ":x {$1 3 set $1} 1 def 2 x",3
4126   E1                     POP   HL   
4127   E5                     PUSH   HL   
4128   11 03 00               LD   DE,3   
412B   B7                     OR   A   
412C   ED 52                  SBC   HL,DE   
412E   7D                     LD   A,L   
412F   B4                     OR   H   
4130   28 65                  JR   Z,expectM_0_2314S43   
4132   CD 34 08               CALL   printStr   
4135   43 6F 64 65 3A 20 3A 78 20 7B 24 31 20 33 20 73 65 74 20 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x {$1 3 set $1} 1 def 2 x"   
4156   CD 34 08               CALL   printStr   
4159   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4168   21 03 00               LD   HL,3   
416B   CD 88 07               CALL   prtdec   
416E   CD 34 08               CALL   printStr   
4171   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417E   E1                     POP   hl   
417F   E5                     PUSH   hl   
4180   CD 88 07               CALL   prtdec   
4183   E1                     POP   hl   
4184   CD 34 08               CALL   printStr   
4187   20 28 23 00            .CSTR   " (#"   
418B   CD D0 07               CALL   prthex   
418E   CD 34 08               CALL   printStr   
4191   29 0D 0A 00            .CSTR   ")\r\n"   
4195   76                     HALT      
4196   00                     .CSTR      
4197                EXPECTM_0_2314S43:      
4197   E1                     POP   HL   
4198                          ;*Macro unroll:  test ":x { 3 2 } 0 def x + ", 5
4198   31 80 18               LD   SP,STACK   
419B   CD 53 08               CALL   init   
419E   CD 5E 0A               CALL   exec   
41A1   3A 78 20 7B 20 33 20 32 20 7D 20 30 20 64 65 66 20 78 20 2B 20 00 .CSTR   ":x { 3 2 } 0 def x + "   
41B7                          ;*Macro unroll:  expect ":x { 3 2 } 0 def x + ",5
41B7   E1                     POP   HL   
41B8   E5                     PUSH   HL   
41B9   11 05 00               LD   DE,5   
41BC   B7                     OR   A   
41BD   ED 52                  SBC   HL,DE   
41BF   7D                     LD   A,L   
41C0   B4                     OR   H   
41C1   28 60                  JR   Z,expectM_0_2315S43   
41C3   CD 34 08               CALL   printStr   
41C6   43 6F 64 65 3A 20 3A 78 20 7B 20 33 20 32 20 7D 20 30 20 64 65 66 20 78 20 2B 20 00 .CSTR   "Code: ",":x { 3 2 } 0 def x + "   
41E2   CD 34 08               CALL   printStr   
41E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41F4   21 05 00               LD   HL,5   
41F7   CD 88 07               CALL   prtdec   
41FA   CD 34 08               CALL   printStr   
41FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
420A   E1                     POP   hl   
420B   E5                     PUSH   hl   
420C   CD 88 07               CALL   prtdec   
420F   E1                     POP   hl   
4210   CD 34 08               CALL   printStr   
4213   20 28 23 00            .CSTR   " (#"   
4217   CD D0 07               CALL   prthex   
421A   CD 34 08               CALL   printStr   
421D   29 0D 0A 00            .CSTR   ")\r\n"   
4221   76                     HALT      
4222   00                     .CSTR      
4223                EXPECTM_0_2315S43:      
4223   E1                     POP   HL   
4224                          ;*Macro unroll:  test ":x { $1 2 } 1 def 5 x + ", 7
4224   31 80 18               LD   SP,STACK   
4227   CD 53 08               CALL   init   
422A   CD 5E 0A               CALL   exec   
422D   3A 78 20 7B 20 24 31 20 32 20 7D 20 31 20 64 65 66 20 35 20 78 20 2B 20 00 .CSTR   ":x { $1 2 } 1 def 5 x + "   
4246                          ;*Macro unroll:  expect ":x { $1 2 } 1 def 5 x + ",7
4246   E1                     POP   HL   
4247   E5                     PUSH   HL   
4248   11 07 00               LD   DE,7   
424B   B7                     OR   A   
424C   ED 52                  SBC   HL,DE   
424E   7D                     LD   A,L   
424F   B4                     OR   H   
4250   28 63                  JR   Z,expectM_0_2316S43   
4252   CD 34 08               CALL   printStr   
4255   43 6F 64 65 3A 20 3A 78 20 7B 20 24 31 20 32 20 7D 20 31 20 64 65 66 20 35 20 78 20 2B 20 00 .CSTR   "Code: ",":x { $1 2 } 1 def 5 x + "   
4274   CD 34 08               CALL   printStr   
4277   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4286   21 07 00               LD   HL,7   
4289   CD 88 07               CALL   prtdec   
428C   CD 34 08               CALL   printStr   
428F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
429C   E1                     POP   hl   
429D   E5                     PUSH   hl   
429E   CD 88 07               CALL   prtdec   
42A1   E1                     POP   hl   
42A2   CD 34 08               CALL   printStr   
42A5   20 28 23 00            .CSTR   " (#"   
42A9   CD D0 07               CALL   prthex   
42AC   CD 34 08               CALL   printStr   
42AF   29 0D 0A 00            .CSTR   ")\r\n"   
42B3   76                     HALT      
42B4   00                     .CSTR      
42B5                EXPECTM_0_2316S43:      
42B5   E1                     POP   HL   
42B6                          ;*Macro unroll:  test "-1",-1
42B6   31 80 18               LD   SP,STACK   
42B9   CD 53 08               CALL   init   
42BC   CD 5E 0A               CALL   exec   
42BF   2D 31 00               .CSTR   "-1"   
42C2                          ;*Macro unroll:  expect "-1",-1
42C2   E1                     POP   HL   
42C3   E5                     PUSH   HL   
42C4   11 FF FF               LD   DE,-1   
42C7   B7                     OR   A   
42C8   ED 52                  SBC   HL,DE   
42CA   7D                     LD   A,L   
42CB   B4                     OR   H   
42CC   28 4D                  JR   Z,expectM_0_2317S43   
42CE   CD 34 08               CALL   printStr   
42D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
42DA   CD 34 08               CALL   printStr   
42DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42EC   21 FF FF               LD   HL,-1   
42EF   CD 88 07               CALL   prtdec   
42F2   CD 34 08               CALL   printStr   
42F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4302   E1                     POP   hl   
4303   E5                     PUSH   hl   
4304   CD 88 07               CALL   prtdec   
4307   E1                     POP   hl   
4308   CD 34 08               CALL   printStr   
430B   20 28 23 00            .CSTR   " (#"   
430F   CD D0 07               CALL   prthex   
4312   CD 34 08               CALL   printStr   
4315   29 0D 0A 00            .CSTR   ")\r\n"   
4319   76                     HALT      
431A   00                     .CSTR      
431B                EXPECTM_0_2317S43:      
431B   E1                     POP   HL   
431C                          ;*Macro unroll:  test "-1 2 +",1
431C   31 80 18               LD   SP,STACK   
431F   CD 53 08               CALL   init   
4322   CD 5E 0A               CALL   exec   
4325   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
432C                          ;*Macro unroll:  expect "-1 2 +",1
432C   E1                     POP   HL   
432D   E5                     PUSH   HL   
432E   11 01 00               LD   DE,1   
4331   B7                     OR   A   
4332   ED 52                  SBC   HL,DE   
4334   7D                     LD   A,L   
4335   B4                     OR   H   
4336   28 51                  JR   Z,expectM_0_2318S43   
4338   CD 34 08               CALL   printStr   
433B   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
4348   CD 34 08               CALL   printStr   
434B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435A   21 01 00               LD   HL,1   
435D   CD 88 07               CALL   prtdec   
4360   CD 34 08               CALL   printStr   
4363   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4370   E1                     POP   hl   
4371   E5                     PUSH   hl   
4372   CD 88 07               CALL   prtdec   
4375   E1                     POP   hl   
4376   CD 34 08               CALL   printStr   
4379   20 28 23 00            .CSTR   " (#"   
437D   CD D0 07               CALL   prthex   
4380   CD 34 08               CALL   printStr   
4383   29 0D 0A 00            .CSTR   ")\r\n"   
4387   76                     HALT      
4388   00                     .CSTR      
4389                EXPECTM_0_2318S43:      
4389   E1                     POP   HL   
438A                          ;*Macro unroll:  test "-1 1 +",0
438A   31 80 18               LD   SP,STACK   
438D   CD 53 08               CALL   init   
4390   CD 5E 0A               CALL   exec   
4393   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
439A                          ;*Macro unroll:  expect "-1 1 +",0
439A   E1                     POP   HL   
439B   E5                     PUSH   HL   
439C   11 00 00               LD   DE,0   
439F   B7                     OR   A   
43A0   ED 52                  SBC   HL,DE   
43A2   7D                     LD   A,L   
43A3   B4                     OR   H   
43A4   28 51                  JR   Z,expectM_0_2319S43   
43A6   CD 34 08               CALL   printStr   
43A9   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
43B6   CD 34 08               CALL   printStr   
43B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C8   21 00 00               LD   HL,0   
43CB   CD 88 07               CALL   prtdec   
43CE   CD 34 08               CALL   printStr   
43D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DE   E1                     POP   hl   
43DF   E5                     PUSH   hl   
43E0   CD 88 07               CALL   prtdec   
43E3   E1                     POP   hl   
43E4   CD 34 08               CALL   printStr   
43E7   20 28 23 00            .CSTR   " (#"   
43EB   CD D0 07               CALL   prthex   
43EE   CD 34 08               CALL   printStr   
43F1   29 0D 0A 00            .CSTR   ")\r\n"   
43F5   76                     HALT      
43F6   00                     .CSTR      
43F7                EXPECTM_0_2319S43:      
43F7   E1                     POP   HL   
43F8                          ;*Macro unroll:  test "-1 -1 -",0
43F8   31 80 18               LD   SP,STACK   
43FB   CD 53 08               CALL   init   
43FE   CD 5E 0A               CALL   exec   
4401   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
4409                          ;*Macro unroll:  expect "-1 -1 -",0
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 00 00               LD   DE,0   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   28 52                  JR   Z,expectM_0_2320S43   
4415   CD 34 08               CALL   printStr   
4418   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4426   CD 34 08               CALL   printStr   
4429   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4438   21 00 00               LD   HL,0   
443B   CD 88 07               CALL   prtdec   
443E   CD 34 08               CALL   printStr   
4441   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444E   E1                     POP   hl   
444F   E5                     PUSH   hl   
4450   CD 88 07               CALL   prtdec   
4453   E1                     POP   hl   
4454   CD 34 08               CALL   printStr   
4457   20 28 23 00            .CSTR   " (#"   
445B   CD D0 07               CALL   prthex   
445E   CD 34 08               CALL   printStr   
4461   29 0D 0A 00            .CSTR   ")\r\n"   
4465   76                     HALT      
4466   00                     .CSTR      
4467                EXPECTM_0_2320S43:      
4467   E1                     POP   HL   
4468                          ;*Macro unroll:  test "1 2 +", 3
4468   31 80 18               LD   SP,STACK   
446B   CD 53 08               CALL   init   
446E   CD 5E 0A               CALL   exec   
4471   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4477                          ;*Macro unroll:  expect "1 2 +",3
4477   E1                     POP   HL   
4478   E5                     PUSH   HL   
4479   11 03 00               LD   DE,3   
447C   B7                     OR   A   
447D   ED 52                  SBC   HL,DE   
447F   7D                     LD   A,L   
4480   B4                     OR   H   
4481   28 50                  JR   Z,expectM_0_2321S43   
4483   CD 34 08               CALL   printStr   
4486   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4492   CD 34 08               CALL   printStr   
4495   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A4   21 03 00               LD   HL,3   
44A7   CD 88 07               CALL   prtdec   
44AA   CD 34 08               CALL   printStr   
44AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44BA   E1                     POP   hl   
44BB   E5                     PUSH   hl   
44BC   CD 88 07               CALL   prtdec   
44BF   E1                     POP   hl   
44C0   CD 34 08               CALL   printStr   
44C3   20 28 23 00            .CSTR   " (#"   
44C7   CD D0 07               CALL   prthex   
44CA   CD 34 08               CALL   printStr   
44CD   29 0D 0A 00            .CSTR   ")\r\n"   
44D1   76                     HALT      
44D2   00                     .CSTR      
44D3                EXPECTM_0_2321S43:      
44D3   E1                     POP   HL   
44D4                          ;*Macro unroll:  test "4 1 2 +", 3
44D4   31 80 18               LD   SP,STACK   
44D7   CD 53 08               CALL   init   
44DA   CD 5E 0A               CALL   exec   
44DD   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
44E5                          ;*Macro unroll:  expect "4 1 2 +",3
44E5   E1                     POP   HL   
44E6   E5                     PUSH   HL   
44E7   11 03 00               LD   DE,3   
44EA   B7                     OR   A   
44EB   ED 52                  SBC   HL,DE   
44ED   7D                     LD   A,L   
44EE   B4                     OR   H   
44EF   28 52                  JR   Z,expectM_0_2322S43   
44F1   CD 34 08               CALL   printStr   
44F4   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4502   CD 34 08               CALL   printStr   
4505   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4514   21 03 00               LD   HL,3   
4517   CD 88 07               CALL   prtdec   
451A   CD 34 08               CALL   printStr   
451D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452A   E1                     POP   hl   
452B   E5                     PUSH   hl   
452C   CD 88 07               CALL   prtdec   
452F   E1                     POP   hl   
4530   CD 34 08               CALL   printStr   
4533   20 28 23 00            .CSTR   " (#"   
4537   CD D0 07               CALL   prthex   
453A   CD 34 08               CALL   printStr   
453D   29 0D 0A 00            .CSTR   ")\r\n"   
4541   76                     HALT      
4542   00                     .CSTR      
4543                EXPECTM_0_2322S43:      
4543   E1                     POP   HL   
4544                          ;*Macro unroll:  test "1", 1
4544   31 80 18               LD   SP,STACK   
4547   CD 53 08               CALL   init   
454A   CD 5E 0A               CALL   exec   
454D   31 00                  .CSTR   "1"   
454F                          ;*Macro unroll:  expect "1",1
454F   E1                     POP   HL   
4550   E5                     PUSH   HL   
4551   11 01 00               LD   DE,1   
4554   B7                     OR   A   
4555   ED 52                  SBC   HL,DE   
4557   7D                     LD   A,L   
4558   B4                     OR   H   
4559   28 4C                  JR   Z,expectM_0_2323S43   
455B   CD 34 08               CALL   printStr   
455E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4566   CD 34 08               CALL   printStr   
4569   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4578   21 01 00               LD   HL,1   
457B   CD 88 07               CALL   prtdec   
457E   CD 34 08               CALL   printStr   
4581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458E   E1                     POP   hl   
458F   E5                     PUSH   hl   
4590   CD 88 07               CALL   prtdec   
4593   E1                     POP   hl   
4594   CD 34 08               CALL   printStr   
4597   20 28 23 00            .CSTR   " (#"   
459B   CD D0 07               CALL   prthex   
459E   CD 34 08               CALL   printStr   
45A1   29 0D 0A 00            .CSTR   ")\r\n"   
45A5   76                     HALT      
45A6   00                     .CSTR      
45A7                EXPECTM_0_2323S43:      
45A7   E1                     POP   HL   
45A8                          ;*Macro unroll:  test "2", 2
45A8   31 80 18               LD   SP,STACK   
45AB   CD 53 08               CALL   init   
45AE   CD 5E 0A               CALL   exec   
45B1   32 00                  .CSTR   "2"   
45B3                          ;*Macro unroll:  expect "2",2
45B3   E1                     POP   HL   
45B4   E5                     PUSH   HL   
45B5   11 02 00               LD   DE,2   
45B8   B7                     OR   A   
45B9   ED 52                  SBC   HL,DE   
45BB   7D                     LD   A,L   
45BC   B4                     OR   H   
45BD   28 4C                  JR   Z,expectM_0_2324S43   
45BF   CD 34 08               CALL   printStr   
45C2   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
45CA   CD 34 08               CALL   printStr   
45CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45DC   21 02 00               LD   HL,2   
45DF   CD 88 07               CALL   prtdec   
45E2   CD 34 08               CALL   printStr   
45E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F2   E1                     POP   hl   
45F3   E5                     PUSH   hl   
45F4   CD 88 07               CALL   prtdec   
45F7   E1                     POP   hl   
45F8   CD 34 08               CALL   printStr   
45FB   20 28 23 00            .CSTR   " (#"   
45FF   CD D0 07               CALL   prthex   
4602   CD 34 08               CALL   printStr   
4605   29 0D 0A 00            .CSTR   ")\r\n"   
4609   76                     HALT      
460A   00                     .CSTR      
460B                EXPECTM_0_2324S43:      
460B   E1                     POP   HL   
460C                          ;*Macro unroll:  test "``", 0
460C   31 80 18               LD   SP,STACK   
460F   CD 53 08               CALL   init   
4612   CD 5E 0A               CALL   exec   
4615   60 60 00               .CSTR   "``"   
4618                          ;*Macro unroll:  expect "``",0
4618   E1                     POP   HL   
4619   E5                     PUSH   HL   
461A   11 00 00               LD   DE,0   
461D   B7                     OR   A   
461E   ED 52                  SBC   HL,DE   
4620   7D                     LD   A,L   
4621   B4                     OR   H   
4622   28 4D                  JR   Z,expectM_0_2325S43   
4624   CD 34 08               CALL   printStr   
4627   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
4630   CD 34 08               CALL   printStr   
4633   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4642   21 00 00               LD   HL,0   
4645   CD 88 07               CALL   prtdec   
4648   CD 34 08               CALL   printStr   
464B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4658   E1                     POP   hl   
4659   E5                     PUSH   hl   
465A   CD 88 07               CALL   prtdec   
465D   E1                     POP   hl   
465E   CD 34 08               CALL   printStr   
4661   20 28 23 00            .CSTR   " (#"   
4665   CD D0 07               CALL   prthex   
4668   CD 34 08               CALL   printStr   
466B   29 0D 0A 00            .CSTR   ")\r\n"   
466F   76                     HALT      
4670   00                     .CSTR      
4671                EXPECTM_0_2325S43:      
4671   E1                     POP   HL   
4672                          ;*Macro unroll:  test "`a`", $61
4672   31 80 18               LD   SP,STACK   
4675   CD 53 08               CALL   init   
4678   CD 5E 0A               CALL   exec   
467B   60 61 60 00            .CSTR   "`a`"   
467F                          ;*Macro unroll:  expect "`a`",$61
467F   E1                     POP   HL   
4680   E5                     PUSH   HL   
4681   11 61 00               LD   DE,$61   
4684   B7                     OR   A   
4685   ED 52                  SBC   HL,DE   
4687   7D                     LD   A,L   
4688   B4                     OR   H   
4689   28 4E                  JR   Z,expectM_0_2326S43   
468B   CD 34 08               CALL   printStr   
468E   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
4698   CD 34 08               CALL   printStr   
469B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46AA   21 61 00               LD   HL,$61   
46AD   CD 88 07               CALL   prtdec   
46B0   CD 34 08               CALL   printStr   
46B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46C0   E1                     POP   hl   
46C1   E5                     PUSH   hl   
46C2   CD 88 07               CALL   prtdec   
46C5   E1                     POP   hl   
46C6   CD 34 08               CALL   printStr   
46C9   20 28 23 00            .CSTR   " (#"   
46CD   CD D0 07               CALL   prthex   
46D0   CD 34 08               CALL   printStr   
46D3   29 0D 0A 00            .CSTR   ")\r\n"   
46D7   76                     HALT      
46D8   00                     .CSTR      
46D9                EXPECTM_0_2326S43:      
46D9   E1                     POP   HL   
46DA                          ;*Macro unroll:  test "`\\``", $60
46DA   31 80 18               LD   SP,STACK   
46DD   CD 53 08               CALL   init   
46E0   CD 5E 0A               CALL   exec   
46E3   60 5C 60 60 00         .CSTR   "`\\``"   
46E8                          ;*Macro unroll:  expect "`\\``",$60
46E8   E1                     POP   HL   
46E9   E5                     PUSH   HL   
46EA   11 60 00               LD   DE,$60   
46ED   B7                     OR   A   
46EE   ED 52                  SBC   HL,DE   
46F0   7D                     LD   A,L   
46F1   B4                     OR   H   
46F2   28 4F                  JR   Z,expectM_0_2327S43   
46F4   CD 34 08               CALL   printStr   
46F7   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
4702   CD 34 08               CALL   printStr   
4705   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4714   21 60 00               LD   HL,$60   
4717   CD 88 07               CALL   prtdec   
471A   CD 34 08               CALL   printStr   
471D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
472A   E1                     POP   hl   
472B   E5                     PUSH   hl   
472C   CD 88 07               CALL   prtdec   
472F   E1                     POP   hl   
4730   CD 34 08               CALL   printStr   
4733   20 28 23 00            .CSTR   " (#"   
4737   CD D0 07               CALL   prthex   
473A   CD 34 08               CALL   printStr   
473D   29 0D 0A 00            .CSTR   ")\r\n"   
4741   76                     HALT      
4742   00                     .CSTR      
4743                EXPECTM_0_2327S43:      
4743   E1                     POP   HL   
4744                          ;*Macro unroll:  test "1", 1
4744   31 80 18               LD   SP,STACK   
4747   CD 53 08               CALL   init   
474A   CD 5E 0A               CALL   exec   
474D   31 00                  .CSTR   "1"   
474F                          ;*Macro unroll:  expect "1",1
474F   E1                     POP   HL   
4750   E5                     PUSH   HL   
4751   11 01 00               LD   DE,1   
4754   B7                     OR   A   
4755   ED 52                  SBC   HL,DE   
4757   7D                     LD   A,L   
4758   B4                     OR   H   
4759   28 4C                  JR   Z,expectM_0_2328S43   
475B   CD 34 08               CALL   printStr   
475E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4766   CD 34 08               CALL   printStr   
4769   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4778   21 01 00               LD   HL,1   
477B   CD 88 07               CALL   prtdec   
477E   CD 34 08               CALL   printStr   
4781   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
478E   E1                     POP   hl   
478F   E5                     PUSH   hl   
4790   CD 88 07               CALL   prtdec   
4793   E1                     POP   hl   
4794   CD 34 08               CALL   printStr   
4797   20 28 23 00            .CSTR   " (#"   
479B   CD D0 07               CALL   prthex   
479E   CD 34 08               CALL   printStr   
47A1   29 0D 0A 00            .CSTR   ")\r\n"   
47A5   76                     HALT      
47A6   00                     .CSTR      
47A7                EXPECTM_0_2328S43:      
47A7   E1                     POP   HL   
47A8                          ;*Macro unroll:  test "0", 0
47A8   31 80 18               LD   SP,STACK   
47AB   CD 53 08               CALL   init   
47AE   CD 5E 0A               CALL   exec   
47B1   30 00                  .CSTR   "0"   
47B3                          ;*Macro unroll:  expect "0",0
47B3   E1                     POP   HL   
47B4   E5                     PUSH   HL   
47B5   11 00 00               LD   DE,0   
47B8   B7                     OR   A   
47B9   ED 52                  SBC   HL,DE   
47BB   7D                     LD   A,L   
47BC   B4                     OR   H   
47BD   28 4C                  JR   Z,expectM_0_2329S43   
47BF   CD 34 08               CALL   printStr   
47C2   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
47CA   CD 34 08               CALL   printStr   
47CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DC   21 00 00               LD   HL,0   
47DF   CD 88 07               CALL   prtdec   
47E2   CD 34 08               CALL   printStr   
47E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47F2   E1                     POP   hl   
47F3   E5                     PUSH   hl   
47F4   CD 88 07               CALL   prtdec   
47F7   E1                     POP   hl   
47F8   CD 34 08               CALL   printStr   
47FB   20 28 23 00            .CSTR   " (#"   
47FF   CD D0 07               CALL   prthex   
4802   CD 34 08               CALL   printStr   
4805   29 0D 0A 00            .CSTR   ")\r\n"   
4809   76                     HALT      
480A   00                     .CSTR      
480B                EXPECTM_0_2329S43:      
480B   E1                     POP   HL   
480C                          ;*Macro unroll:  test "10", 10
480C   31 80 18               LD   SP,STACK   
480F   CD 53 08               CALL   init   
4812   CD 5E 0A               CALL   exec   
4815   31 30 00               .CSTR   "10"   
4818                          ;*Macro unroll:  expect "10",10
4818   E1                     POP   HL   
4819   E5                     PUSH   HL   
481A   11 0A 00               LD   DE,10   
481D   B7                     OR   A   
481E   ED 52                  SBC   HL,DE   
4820   7D                     LD   A,L   
4821   B4                     OR   H   
4822   28 4D                  JR   Z,expectM_0_2330S43   
4824   CD 34 08               CALL   printStr   
4827   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4830   CD 34 08               CALL   printStr   
4833   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4842   21 0A 00               LD   HL,10   
4845   CD 88 07               CALL   prtdec   
4848   CD 34 08               CALL   printStr   
484B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4858   E1                     POP   hl   
4859   E5                     PUSH   hl   
485A   CD 88 07               CALL   prtdec   
485D   E1                     POP   hl   
485E   CD 34 08               CALL   printStr   
4861   20 28 23 00            .CSTR   " (#"   
4865   CD D0 07               CALL   prthex   
4868   CD 34 08               CALL   printStr   
486B   29 0D 0A 00            .CSTR   ")\r\n"   
486F   76                     HALT      
4870   00                     .CSTR      
4871                EXPECTM_0_2330S43:      
4871   E1                     POP   HL   
4872                          ;*Macro unroll:  test "123", 123
4872   31 80 18               LD   SP,STACK   
4875   CD 53 08               CALL   init   
4878   CD 5E 0A               CALL   exec   
487B   31 32 33 00            .CSTR   "123"   
487F                          ;*Macro unroll:  expect "123",123
487F   E1                     POP   HL   
4880   E5                     PUSH   HL   
4881   11 7B 00               LD   DE,123   
4884   B7                     OR   A   
4885   ED 52                  SBC   HL,DE   
4887   7D                     LD   A,L   
4888   B4                     OR   H   
4889   28 4E                  JR   Z,expectM_0_2331S43   
488B   CD 34 08               CALL   printStr   
488E   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
4898   CD 34 08               CALL   printStr   
489B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48AA   21 7B 00               LD   HL,123   
48AD   CD 88 07               CALL   prtdec   
48B0   CD 34 08               CALL   printStr   
48B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C0   E1                     POP   hl   
48C1   E5                     PUSH   hl   
48C2   CD 88 07               CALL   prtdec   
48C5   E1                     POP   hl   
48C6   CD 34 08               CALL   printStr   
48C9   20 28 23 00            .CSTR   " (#"   
48CD   CD D0 07               CALL   prthex   
48D0   CD 34 08               CALL   printStr   
48D3   29 0D 0A 00            .CSTR   ")\r\n"   
48D7   76                     HALT      
48D8   00                     .CSTR      
48D9                EXPECTM_0_2331S43:      
48D9   E1                     POP   HL   
48DA                          ;*Macro unroll:  test "#10", $10
48DA   31 80 18               LD   SP,STACK   
48DD   CD 53 08               CALL   init   
48E0   CD 5E 0A               CALL   exec   
48E3   23 31 30 00            .CSTR   "#10"   
48E7                          ;*Macro unroll:  expect "#10",$10
48E7   E1                     POP   HL   
48E8   E5                     PUSH   HL   
48E9   11 10 00               LD   DE,$10   
48EC   B7                     OR   A   
48ED   ED 52                  SBC   HL,DE   
48EF   7D                     LD   A,L   
48F0   B4                     OR   H   
48F1   28 4E                  JR   Z,expectM_0_2332S43   
48F3   CD 34 08               CALL   printStr   
48F6   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4900   CD 34 08               CALL   printStr   
4903   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4912   21 10 00               LD   HL,$10   
4915   CD 88 07               CALL   prtdec   
4918   CD 34 08               CALL   printStr   
491B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4928   E1                     POP   hl   
4929   E5                     PUSH   hl   
492A   CD 88 07               CALL   prtdec   
492D   E1                     POP   hl   
492E   CD 34 08               CALL   printStr   
4931   20 28 23 00            .CSTR   " (#"   
4935   CD D0 07               CALL   prthex   
4938   CD 34 08               CALL   printStr   
493B   29 0D 0A 00            .CSTR   ")\r\n"   
493F   76                     HALT      
4940   00                     .CSTR      
4941                EXPECTM_0_2332S43:      
4941   E1                     POP   HL   
4942                          ;*Macro unroll:  test "#FF", $FF
4942   31 80 18               LD   SP,STACK   
4945   CD 53 08               CALL   init   
4948   CD 5E 0A               CALL   exec   
494B   23 46 46 00            .CSTR   "#FF"   
494F                          ;*Macro unroll:  expect "#FF",$FF
494F   E1                     POP   HL   
4950   E5                     PUSH   HL   
4951   11 FF 00               LD   DE,$FF   
4954   B7                     OR   A   
4955   ED 52                  SBC   HL,DE   
4957   7D                     LD   A,L   
4958   B4                     OR   H   
4959   28 4E                  JR   Z,expectM_0_2333S43   
495B   CD 34 08               CALL   printStr   
495E   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
4968   CD 34 08               CALL   printStr   
496B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
497A   21 FF 00               LD   HL,$FF   
497D   CD 88 07               CALL   prtdec   
4980   CD 34 08               CALL   printStr   
4983   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4990   E1                     POP   hl   
4991   E5                     PUSH   hl   
4992   CD 88 07               CALL   prtdec   
4995   E1                     POP   hl   
4996   CD 34 08               CALL   printStr   
4999   20 28 23 00            .CSTR   " (#"   
499D   CD D0 07               CALL   prthex   
49A0   CD 34 08               CALL   printStr   
49A3   29 0D 0A 00            .CSTR   ")\r\n"   
49A7   76                     HALT      
49A8   00                     .CSTR      
49A9                EXPECTM_0_2333S43:      
49A9   E1                     POP   HL   
49AA                          ;*Macro unroll:  test "1 2 +", 3
49AA   31 80 18               LD   SP,STACK   
49AD   CD 53 08               CALL   init   
49B0   CD 5E 0A               CALL   exec   
49B3   31 20 32 20 2B 00      .CSTR   "1 2 +"   
49B9                          ;*Macro unroll:  expect "1 2 +",3
49B9   E1                     POP   HL   
49BA   E5                     PUSH   HL   
49BB   11 03 00               LD   DE,3   
49BE   B7                     OR   A   
49BF   ED 52                  SBC   HL,DE   
49C1   7D                     LD   A,L   
49C2   B4                     OR   H   
49C3   28 50                  JR   Z,expectM_0_2334S43   
49C5   CD 34 08               CALL   printStr   
49C8   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
49D4   CD 34 08               CALL   printStr   
49D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49E6   21 03 00               LD   HL,3   
49E9   CD 88 07               CALL   prtdec   
49EC   CD 34 08               CALL   printStr   
49EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49FC   E1                     POP   hl   
49FD   E5                     PUSH   hl   
49FE   CD 88 07               CALL   prtdec   
4A01   E1                     POP   hl   
4A02   CD 34 08               CALL   printStr   
4A05   20 28 23 00            .CSTR   " (#"   
4A09   CD D0 07               CALL   prthex   
4A0C   CD 34 08               CALL   printStr   
4A0F   29 0D 0A 00            .CSTR   ")\r\n"   
4A13   76                     HALT      
4A14   00                     .CSTR      
4A15                EXPECTM_0_2334S43:      
4A15   E1                     POP   HL   
4A16                          ;*Macro unroll:  test "123 456 +", 123+456
4A16   31 80 18               LD   SP,STACK   
4A19   CD 53 08               CALL   init   
4A1C   CD 5E 0A               CALL   exec   
4A1F   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4A29                          ;*Macro unroll:  expect "123 456 +",123+456
4A29   E1                     POP   HL   
4A2A   E5                     PUSH   HL   
4A2B   11 43 02               LD   DE,123+456   
4A2E   B7                     OR   A   
4A2F   ED 52                  SBC   HL,DE   
4A31   7D                     LD   A,L   
4A32   B4                     OR   H   
4A33   28 54                  JR   Z,expectM_0_2335S43   
4A35   CD 34 08               CALL   printStr   
4A38   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4A48   CD 34 08               CALL   printStr   
4A4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A5A   21 43 02               LD   HL,123+456   
4A5D   CD 88 07               CALL   prtdec   
4A60   CD 34 08               CALL   printStr   
4A63   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A70   E1                     POP   hl   
4A71   E5                     PUSH   hl   
4A72   CD 88 07               CALL   prtdec   
4A75   E1                     POP   hl   
4A76   CD 34 08               CALL   printStr   
4A79   20 28 23 00            .CSTR   " (#"   
4A7D   CD D0 07               CALL   prthex   
4A80   CD 34 08               CALL   printStr   
4A83   29 0D 0A 00            .CSTR   ")\r\n"   
4A87   76                     HALT      
4A88   00                     .CSTR      
4A89                EXPECTM_0_2335S43:      
4A89   E1                     POP   HL   
4A8A                          ;*Macro unroll:  test "64 128 +", 64+128
4A8A   31 80 18               LD   SP,STACK   
4A8D   CD 53 08               CALL   init   
4A90   CD 5E 0A               CALL   exec   
4A93   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4A9C                          ;*Macro unroll:  expect "64 128 +",64+128
4A9C   E1                     POP   HL   
4A9D   E5                     PUSH   HL   
4A9E   11 C0 00               LD   DE,64+128   
4AA1   B7                     OR   A   
4AA2   ED 52                  SBC   HL,DE   
4AA4   7D                     LD   A,L   
4AA5   B4                     OR   H   
4AA6   28 53                  JR   Z,expectM_0_2336S43   
4AA8   CD 34 08               CALL   printStr   
4AAB   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4ABA   CD 34 08               CALL   printStr   
4ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ACC   21 C0 00               LD   HL,64+128   
4ACF   CD 88 07               CALL   prtdec   
4AD2   CD 34 08               CALL   printStr   
4AD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AE2   E1                     POP   hl   
4AE3   E5                     PUSH   hl   
4AE4   CD 88 07               CALL   prtdec   
4AE7   E1                     POP   hl   
4AE8   CD 34 08               CALL   printStr   
4AEB   20 28 23 00            .CSTR   " (#"   
4AEF   CD D0 07               CALL   prthex   
4AF2   CD 34 08               CALL   printStr   
4AF5   29 0D 0A 00            .CSTR   ")\r\n"   
4AF9   76                     HALT      
4AFA   00                     .CSTR      
4AFB                EXPECTM_0_2336S43:      
4AFB   E1                     POP   HL   
4AFC                          ;*Macro unroll:  test "5 3 -", 2
4AFC   31 80 18               LD   SP,STACK   
4AFF   CD 53 08               CALL   init   
4B02   CD 5E 0A               CALL   exec   
4B05   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4B0B                          ;*Macro unroll:  expect "5 3 -",2
4B0B   E1                     POP   HL   
4B0C   E5                     PUSH   HL   
4B0D   11 02 00               LD   DE,2   
4B10   B7                     OR   A   
4B11   ED 52                  SBC   HL,DE   
4B13   7D                     LD   A,L   
4B14   B4                     OR   H   
4B15   28 50                  JR   Z,expectM_0_2337S43   
4B17   CD 34 08               CALL   printStr   
4B1A   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4B26   CD 34 08               CALL   printStr   
4B29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B38   21 02 00               LD   HL,2   
4B3B   CD 88 07               CALL   prtdec   
4B3E   CD 34 08               CALL   printStr   
4B41   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B4E   E1                     POP   hl   
4B4F   E5                     PUSH   hl   
4B50   CD 88 07               CALL   prtdec   
4B53   E1                     POP   hl   
4B54   CD 34 08               CALL   printStr   
4B57   20 28 23 00            .CSTR   " (#"   
4B5B   CD D0 07               CALL   prthex   
4B5E   CD 34 08               CALL   printStr   
4B61   29 0D 0A 00            .CSTR   ")\r\n"   
4B65   76                     HALT      
4B66   00                     .CSTR      
4B67                EXPECTM_0_2337S43:      
4B67   E1                     POP   HL   
4B68                          ;*Macro unroll:  test "3 5 &", 1
4B68   31 80 18               LD   SP,STACK   
4B6B   CD 53 08               CALL   init   
4B6E   CD 5E 0A               CALL   exec   
4B71   33 20 35 20 26 00      .CSTR   "3 5 &"   
4B77                          ;*Macro unroll:  expect "3 5 &",1
4B77   E1                     POP   HL   
4B78   E5                     PUSH   HL   
4B79   11 01 00               LD   DE,1   
4B7C   B7                     OR   A   
4B7D   ED 52                  SBC   HL,DE   
4B7F   7D                     LD   A,L   
4B80   B4                     OR   H   
4B81   28 50                  JR   Z,expectM_0_2338S43   
4B83   CD 34 08               CALL   printStr   
4B86   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4B92   CD 34 08               CALL   printStr   
4B95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BA4   21 01 00               LD   HL,1   
4BA7   CD 88 07               CALL   prtdec   
4BAA   CD 34 08               CALL   printStr   
4BAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BBA   E1                     POP   hl   
4BBB   E5                     PUSH   hl   
4BBC   CD 88 07               CALL   prtdec   
4BBF   E1                     POP   hl   
4BC0   CD 34 08               CALL   printStr   
4BC3   20 28 23 00            .CSTR   " (#"   
4BC7   CD D0 07               CALL   prthex   
4BCA   CD 34 08               CALL   printStr   
4BCD   29 0D 0A 00            .CSTR   ")\r\n"   
4BD1   76                     HALT      
4BD2   00                     .CSTR      
4BD3                EXPECTM_0_2338S43:      
4BD3   E1                     POP   HL   
4BD4                          ;*Macro unroll:  test "3 5 |", 7
4BD4   31 80 18               LD   SP,STACK   
4BD7   CD 53 08               CALL   init   
4BDA   CD 5E 0A               CALL   exec   
4BDD   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4BE3                          ;*Macro unroll:  expect "3 5 |",7
4BE3   E1                     POP   HL   
4BE4   E5                     PUSH   HL   
4BE5   11 07 00               LD   DE,7   
4BE8   B7                     OR   A   
4BE9   ED 52                  SBC   HL,DE   
4BEB   7D                     LD   A,L   
4BEC   B4                     OR   H   
4BED   28 50                  JR   Z,expectM_0_2339S43   
4BEF   CD 34 08               CALL   printStr   
4BF2   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4BFE   CD 34 08               CALL   printStr   
4C01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C10   21 07 00               LD   HL,7   
4C13   CD 88 07               CALL   prtdec   
4C16   CD 34 08               CALL   printStr   
4C19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C26   E1                     POP   hl   
4C27   E5                     PUSH   hl   
4C28   CD 88 07               CALL   prtdec   
4C2B   E1                     POP   hl   
4C2C   CD 34 08               CALL   printStr   
4C2F   20 28 23 00            .CSTR   " (#"   
4C33   CD D0 07               CALL   prthex   
4C36   CD 34 08               CALL   printStr   
4C39   29 0D 0A 00            .CSTR   ")\r\n"   
4C3D   76                     HALT      
4C3E   00                     .CSTR      
4C3F                EXPECTM_0_2339S43:      
4C3F   E1                     POP   HL   
4C40                          ;*Macro unroll:  test "2 3 *", 6
4C40   31 80 18               LD   SP,STACK   
4C43   CD 53 08               CALL   init   
4C46   CD 5E 0A               CALL   exec   
4C49   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4C4F                          ;*Macro unroll:  expect "2 3 *",6
4C4F   E1                     POP   HL   
4C50   E5                     PUSH   HL   
4C51   11 06 00               LD   DE,6   
4C54   B7                     OR   A   
4C55   ED 52                  SBC   HL,DE   
4C57   7D                     LD   A,L   
4C58   B4                     OR   H   
4C59   28 50                  JR   Z,expectM_0_2340S43   
4C5B   CD 34 08               CALL   printStr   
4C5E   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4C6A   CD 34 08               CALL   printStr   
4C6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C7C   21 06 00               LD   HL,6   
4C7F   CD 88 07               CALL   prtdec   
4C82   CD 34 08               CALL   printStr   
4C85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C92   E1                     POP   hl   
4C93   E5                     PUSH   hl   
4C94   CD 88 07               CALL   prtdec   
4C97   E1                     POP   hl   
4C98   CD 34 08               CALL   printStr   
4C9B   20 28 23 00            .CSTR   " (#"   
4C9F   CD D0 07               CALL   prthex   
4CA2   CD 34 08               CALL   printStr   
4CA5   29 0D 0A 00            .CSTR   ")\r\n"   
4CA9   76                     HALT      
4CAA   00                     .CSTR      
4CAB                EXPECTM_0_2340S43:      
4CAB   E1                     POP   HL   
4CAC                          ;*Macro unroll:  test "1 2 3 + *", 5
4CAC   31 80 18               LD   SP,STACK   
4CAF   CD 53 08               CALL   init   
4CB2   CD 5E 0A               CALL   exec   
4CB5   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4CBF                          ;*Macro unroll:  expect "1 2 3 + *",5
4CBF   E1                     POP   HL   
4CC0   E5                     PUSH   HL   
4CC1   11 05 00               LD   DE,5   
4CC4   B7                     OR   A   
4CC5   ED 52                  SBC   HL,DE   
4CC7   7D                     LD   A,L   
4CC8   B4                     OR   H   
4CC9   28 54                  JR   Z,expectM_0_2341S43   
4CCB   CD 34 08               CALL   printStr   
4CCE   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4CDE   CD 34 08               CALL   printStr   
4CE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CF0   21 05 00               LD   HL,5   
4CF3   CD 88 07               CALL   prtdec   
4CF6   CD 34 08               CALL   printStr   
4CF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D06   E1                     POP   hl   
4D07   E5                     PUSH   hl   
4D08   CD 88 07               CALL   prtdec   
4D0B   E1                     POP   hl   
4D0C   CD 34 08               CALL   printStr   
4D0F   20 28 23 00            .CSTR   " (#"   
4D13   CD D0 07               CALL   prthex   
4D16   CD 34 08               CALL   printStr   
4D19   29 0D 0A 00            .CSTR   ")\r\n"   
4D1D   76                     HALT      
4D1E   00                     .CSTR      
4D1F                EXPECTM_0_2341S43:      
4D1F   E1                     POP   HL   
4D20                          ;*Macro unroll:  test "10 sqrt", 3
4D20   31 80 18               LD   SP,STACK   
4D23   CD 53 08               CALL   init   
4D26   CD 5E 0A               CALL   exec   
4D29   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
4D31                          ;*Macro unroll:  expect "10 sqrt",3
4D31   E1                     POP   HL   
4D32   E5                     PUSH   HL   
4D33   11 03 00               LD   DE,3   
4D36   B7                     OR   A   
4D37   ED 52                  SBC   HL,DE   
4D39   7D                     LD   A,L   
4D3A   B4                     OR   H   
4D3B   28 52                  JR   Z,expectM_0_2342S43   
4D3D   CD 34 08               CALL   printStr   
4D40   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
4D4E   CD 34 08               CALL   printStr   
4D51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D60   21 03 00               LD   HL,3   
4D63   CD 88 07               CALL   prtdec   
4D66   CD 34 08               CALL   printStr   
4D69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D76   E1                     POP   hl   
4D77   E5                     PUSH   hl   
4D78   CD 88 07               CALL   prtdec   
4D7B   E1                     POP   hl   
4D7C   CD 34 08               CALL   printStr   
4D7F   20 28 23 00            .CSTR   " (#"   
4D83   CD D0 07               CALL   prthex   
4D86   CD 34 08               CALL   printStr   
4D89   29 0D 0A 00            .CSTR   ")\r\n"   
4D8D   76                     HALT      
4D8E   00                     .CSTR      
4D8F                EXPECTM_0_2342S43:      
4D8F   E1                     POP   HL   
4D90                          ;*Macro unroll:  test "10 sqrt frac", 1
4D90   31 80 18               LD   SP,STACK   
4D93   CD 53 08               CALL   init   
4D96   CD 5E 0A               CALL   exec   
4D99   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4DA6                          ;*Macro unroll:  expect "10 sqrt frac",1
4DA6   E1                     POP   HL   
4DA7   E5                     PUSH   HL   
4DA8   11 01 00               LD   DE,1   
4DAB   B7                     OR   A   
4DAC   ED 52                  SBC   HL,DE   
4DAE   7D                     LD   A,L   
4DAF   B4                     OR   H   
4DB0   28 57                  JR   Z,expectM_0_2343S43   
4DB2   CD 34 08               CALL   printStr   
4DB5   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4DC8   CD 34 08               CALL   printStr   
4DCB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DDA   21 01 00               LD   HL,1   
4DDD   CD 88 07               CALL   prtdec   
4DE0   CD 34 08               CALL   printStr   
4DE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DF0   E1                     POP   hl   
4DF1   E5                     PUSH   hl   
4DF2   CD 88 07               CALL   prtdec   
4DF5   E1                     POP   hl   
4DF6   CD 34 08               CALL   printStr   
4DF9   20 28 23 00            .CSTR   " (#"   
4DFD   CD D0 07               CALL   prthex   
4E00   CD 34 08               CALL   printStr   
4E03   29 0D 0A 00            .CSTR   ")\r\n"   
4E07   76                     HALT      
4E08   00                     .CSTR      
4E09                EXPECTM_0_2343S43:      
4E09   E1                     POP   HL   
4E0A                          ;*Macro unroll:  test "7 3 /", 2
4E0A   31 80 18               LD   SP,STACK   
4E0D   CD 53 08               CALL   init   
4E10   CD 5E 0A               CALL   exec   
4E13   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4E19                          ;*Macro unroll:  expect "7 3 /",2
4E19   E1                     POP   HL   
4E1A   E5                     PUSH   HL   
4E1B   11 02 00               LD   DE,2   
4E1E   B7                     OR   A   
4E1F   ED 52                  SBC   HL,DE   
4E21   7D                     LD   A,L   
4E22   B4                     OR   H   
4E23   28 50                  JR   Z,expectM_0_2344S43   
4E25   CD 34 08               CALL   printStr   
4E28   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4E34   CD 34 08               CALL   printStr   
4E37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E46   21 02 00               LD   HL,2   
4E49   CD 88 07               CALL   prtdec   
4E4C   CD 34 08               CALL   printStr   
4E4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E5C   E1                     POP   hl   
4E5D   E5                     PUSH   hl   
4E5E   CD 88 07               CALL   prtdec   
4E61   E1                     POP   hl   
4E62   CD 34 08               CALL   printStr   
4E65   20 28 23 00            .CSTR   " (#"   
4E69   CD D0 07               CALL   prthex   
4E6C   CD 34 08               CALL   printStr   
4E6F   29 0D 0A 00            .CSTR   ")\r\n"   
4E73   76                     HALT      
4E74   00                     .CSTR      
4E75                EXPECTM_0_2344S43:      
4E75   E1                     POP   HL   
4E76                          ;*Macro unroll:  test "7 3 / frac", 1
4E76   31 80 18               LD   SP,STACK   
4E79   CD 53 08               CALL   init   
4E7C   CD 5E 0A               CALL   exec   
4E7F   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
4E8A                          ;*Macro unroll:  expect "7 3 / frac",1
4E8A   E1                     POP   HL   
4E8B   E5                     PUSH   HL   
4E8C   11 01 00               LD   DE,1   
4E8F   B7                     OR   A   
4E90   ED 52                  SBC   HL,DE   
4E92   7D                     LD   A,L   
4E93   B4                     OR   H   
4E94   28 55                  JR   Z,expectM_0_2345S43   
4E96   CD 34 08               CALL   printStr   
4E99   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
4EAA   CD 34 08               CALL   printStr   
4EAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EBC   21 01 00               LD   HL,1   
4EBF   CD 88 07               CALL   prtdec   
4EC2   CD 34 08               CALL   printStr   
4EC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ED2   E1                     POP   hl   
4ED3   E5                     PUSH   hl   
4ED4   CD 88 07               CALL   prtdec   
4ED7   E1                     POP   hl   
4ED8   CD 34 08               CALL   printStr   
4EDB   20 28 23 00            .CSTR   " (#"   
4EDF   CD D0 07               CALL   prthex   
4EE2   CD 34 08               CALL   printStr   
4EE5   29 0D 0A 00            .CSTR   ")\r\n"   
4EE9   76                     HALT      
4EEA   00                     .CSTR      
4EEB                EXPECTM_0_2345S43:      
4EEB   E1                     POP   HL   
4EEC                          ;*Macro unroll:  test "2 3 =", FALSE
4EEC   31 80 18               LD   SP,STACK   
4EEF   CD 53 08               CALL   init   
4EF2   CD 5E 0A               CALL   exec   
4EF5   32 20 33 20 3D 00      .CSTR   "2 3 ="   
4EFB                          ;*Macro unroll:  expect "2 3 =",FALSE
4EFB   E1                     POP   HL   
4EFC   E5                     PUSH   HL   
4EFD   11 00 00               LD   DE,FALSE   
4F00   B7                     OR   A   
4F01   ED 52                  SBC   HL,DE   
4F03   7D                     LD   A,L   
4F04   B4                     OR   H   
4F05   28 50                  JR   Z,expectM_0_2346S43   
4F07   CD 34 08               CALL   printStr   
4F0A   43 6F 64 65 3A 20 32 20 33 20 3D 00 .CSTR   "Code: ","2 3 ="   
4F16   CD 34 08               CALL   printStr   
4F19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F28   21 00 00               LD   HL,FALSE   
4F2B   CD 88 07               CALL   prtdec   
4F2E   CD 34 08               CALL   printStr   
4F31   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F3E   E1                     POP   hl   
4F3F   E5                     PUSH   hl   
4F40   CD 88 07               CALL   prtdec   
4F43   E1                     POP   hl   
4F44   CD 34 08               CALL   printStr   
4F47   20 28 23 00            .CSTR   " (#"   
4F4B   CD D0 07               CALL   prthex   
4F4E   CD 34 08               CALL   printStr   
4F51   29 0D 0A 00            .CSTR   ")\r\n"   
4F55   76                     HALT      
4F56   00                     .CSTR      
4F57                EXPECTM_0_2346S43:      
4F57   E1                     POP   HL   
4F58                          ;*Macro unroll:  test "3 3 =", TRUE
4F58   31 80 18               LD   SP,STACK   
4F5B   CD 53 08               CALL   init   
4F5E   CD 5E 0A               CALL   exec   
4F61   33 20 33 20 3D 00      .CSTR   "3 3 ="   
4F67                          ;*Macro unroll:  expect "3 3 =",TRUE
4F67   E1                     POP   HL   
4F68   E5                     PUSH   HL   
4F69   11 FF FF               LD   DE,TRUE   
4F6C   B7                     OR   A   
4F6D   ED 52                  SBC   HL,DE   
4F6F   7D                     LD   A,L   
4F70   B4                     OR   H   
4F71   28 50                  JR   Z,expectM_0_2347S43   
4F73   CD 34 08               CALL   printStr   
4F76   43 6F 64 65 3A 20 33 20 33 20 3D 00 .CSTR   "Code: ","3 3 ="   
4F82   CD 34 08               CALL   printStr   
4F85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F94   21 FF FF               LD   HL,TRUE   
4F97   CD 88 07               CALL   prtdec   
4F9A   CD 34 08               CALL   printStr   
4F9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FAA   E1                     POP   hl   
4FAB   E5                     PUSH   hl   
4FAC   CD 88 07               CALL   prtdec   
4FAF   E1                     POP   hl   
4FB0   CD 34 08               CALL   printStr   
4FB3   20 28 23 00            .CSTR   " (#"   
4FB7   CD D0 07               CALL   prthex   
4FBA   CD 34 08               CALL   printStr   
4FBD   29 0D 0A 00            .CSTR   ")\r\n"   
4FC1   76                     HALT      
4FC2   00                     .CSTR      
4FC3                EXPECTM_0_2347S43:      
4FC3   E1                     POP   HL   
4FC4                          ;*Macro unroll:  test "1 2 <", TRUE
4FC4   31 80 18               LD   SP,STACK   
4FC7   CD 53 08               CALL   init   
4FCA   CD 5E 0A               CALL   exec   
4FCD   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4FD3                          ;*Macro unroll:  expect "1 2 <",TRUE
4FD3   E1                     POP   HL   
4FD4   E5                     PUSH   HL   
4FD5   11 FF FF               LD   DE,TRUE   
4FD8   B7                     OR   A   
4FD9   ED 52                  SBC   HL,DE   
4FDB   7D                     LD   A,L   
4FDC   B4                     OR   H   
4FDD   28 50                  JR   Z,expectM_0_2348S43   
4FDF   CD 34 08               CALL   printStr   
4FE2   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4FEE   CD 34 08               CALL   printStr   
4FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5000   21 FF FF               LD   HL,TRUE   
5003   CD 88 07               CALL   prtdec   
5006   CD 34 08               CALL   printStr   
5009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5016   E1                     POP   hl   
5017   E5                     PUSH   hl   
5018   CD 88 07               CALL   prtdec   
501B   E1                     POP   hl   
501C   CD 34 08               CALL   printStr   
501F   20 28 23 00            .CSTR   " (#"   
5023   CD D0 07               CALL   prthex   
5026   CD 34 08               CALL   printStr   
5029   29 0D 0A 00            .CSTR   ")\r\n"   
502D   76                     HALT      
502E   00                     .CSTR      
502F                EXPECTM_0_2348S43:      
502F   E1                     POP   HL   
5030                          ;*Macro unroll:  test "2 1 <", FALSE
5030   31 80 18               LD   SP,STACK   
5033   CD 53 08               CALL   init   
5036   CD 5E 0A               CALL   exec   
5039   32 20 31 20 3C 00      .CSTR   "2 1 <"   
503F                          ;*Macro unroll:  expect "2 1 <",FALSE
503F   E1                     POP   HL   
5040   E5                     PUSH   HL   
5041   11 00 00               LD   DE,FALSE   
5044   B7                     OR   A   
5045   ED 52                  SBC   HL,DE   
5047   7D                     LD   A,L   
5048   B4                     OR   H   
5049   28 50                  JR   Z,expectM_0_2349S43   
504B   CD 34 08               CALL   printStr   
504E   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
505A   CD 34 08               CALL   printStr   
505D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
506C   21 00 00               LD   HL,FALSE   
506F   CD 88 07               CALL   prtdec   
5072   CD 34 08               CALL   printStr   
5075   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5082   E1                     POP   hl   
5083   E5                     PUSH   hl   
5084   CD 88 07               CALL   prtdec   
5087   E1                     POP   hl   
5088   CD 34 08               CALL   printStr   
508B   20 28 23 00            .CSTR   " (#"   
508F   CD D0 07               CALL   prthex   
5092   CD 34 08               CALL   printStr   
5095   29 0D 0A 00            .CSTR   ")\r\n"   
5099   76                     HALT      
509A   00                     .CSTR      
509B                EXPECTM_0_2349S43:      
509B   E1                     POP   HL   
509C                          ;*Macro unroll:  test "2 3 <", TRUE
509C   31 80 18               LD   SP,STACK   
509F   CD 53 08               CALL   init   
50A2   CD 5E 0A               CALL   exec   
50A5   32 20 33 20 3C 00      .CSTR   "2 3 <"   
50AB                          ;*Macro unroll:  expect "2 3 <",TRUE
50AB   E1                     POP   HL   
50AC   E5                     PUSH   HL   
50AD   11 FF FF               LD   DE,TRUE   
50B0   B7                     OR   A   
50B1   ED 52                  SBC   HL,DE   
50B3   7D                     LD   A,L   
50B4   B4                     OR   H   
50B5   28 50                  JR   Z,expectM_0_2350S43   
50B7   CD 34 08               CALL   printStr   
50BA   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
50C6   CD 34 08               CALL   printStr   
50C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50D8   21 FF FF               LD   HL,TRUE   
50DB   CD 88 07               CALL   prtdec   
50DE   CD 34 08               CALL   printStr   
50E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50EE   E1                     POP   hl   
50EF   E5                     PUSH   hl   
50F0   CD 88 07               CALL   prtdec   
50F3   E1                     POP   hl   
50F4   CD 34 08               CALL   printStr   
50F7   20 28 23 00            .CSTR   " (#"   
50FB   CD D0 07               CALL   prthex   
50FE   CD 34 08               CALL   printStr   
5101   29 0D 0A 00            .CSTR   ")\r\n"   
5105   76                     HALT      
5106   00                     .CSTR      
5107                EXPECTM_0_2350S43:      
5107   E1                     POP   HL   
5108                          ;*Macro unroll:  test "3 3 <", FALSE
5108   31 80 18               LD   SP,STACK   
510B   CD 53 08               CALL   init   
510E   CD 5E 0A               CALL   exec   
5111   33 20 33 20 3C 00      .CSTR   "3 3 <"   
5117                          ;*Macro unroll:  expect "3 3 <",FALSE
5117   E1                     POP   HL   
5118   E5                     PUSH   HL   
5119   11 00 00               LD   DE,FALSE   
511C   B7                     OR   A   
511D   ED 52                  SBC   HL,DE   
511F   7D                     LD   A,L   
5120   B4                     OR   H   
5121   28 50                  JR   Z,expectM_0_2351S43   
5123   CD 34 08               CALL   printStr   
5126   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
5132   CD 34 08               CALL   printStr   
5135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5144   21 00 00               LD   HL,FALSE   
5147   CD 88 07               CALL   prtdec   
514A   CD 34 08               CALL   printStr   
514D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
515A   E1                     POP   hl   
515B   E5                     PUSH   hl   
515C   CD 88 07               CALL   prtdec   
515F   E1                     POP   hl   
5160   CD 34 08               CALL   printStr   
5163   20 28 23 00            .CSTR   " (#"   
5167   CD D0 07               CALL   prthex   
516A   CD 34 08               CALL   printStr   
516D   29 0D 0A 00            .CSTR   ")\r\n"   
5171   76                     HALT      
5172   00                     .CSTR      
5173                EXPECTM_0_2351S43:      
5173   E1                     POP   HL   
5174                          ;*Macro unroll:  test "1 2 >", FALSE
5174   31 80 18               LD   SP,STACK   
5177   CD 53 08               CALL   init   
517A   CD 5E 0A               CALL   exec   
517D   31 20 32 20 3E 00      .CSTR   "1 2 >"   
5183                          ;*Macro unroll:  expect "1 2 >",FALSE
5183   E1                     POP   HL   
5184   E5                     PUSH   HL   
5185   11 00 00               LD   DE,FALSE   
5188   B7                     OR   A   
5189   ED 52                  SBC   HL,DE   
518B   7D                     LD   A,L   
518C   B4                     OR   H   
518D   28 50                  JR   Z,expectM_0_2352S43   
518F   CD 34 08               CALL   printStr   
5192   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
519E   CD 34 08               CALL   printStr   
51A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51B0   21 00 00               LD   HL,FALSE   
51B3   CD 88 07               CALL   prtdec   
51B6   CD 34 08               CALL   printStr   
51B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51C6   E1                     POP   hl   
51C7   E5                     PUSH   hl   
51C8   CD 88 07               CALL   prtdec   
51CB   E1                     POP   hl   
51CC   CD 34 08               CALL   printStr   
51CF   20 28 23 00            .CSTR   " (#"   
51D3   CD D0 07               CALL   prthex   
51D6   CD 34 08               CALL   printStr   
51D9   29 0D 0A 00            .CSTR   ")\r\n"   
51DD   76                     HALT      
51DE   00                     .CSTR      
51DF                EXPECTM_0_2352S43:      
51DF   E1                     POP   HL   
51E0                          ;*Macro unroll:  test "2 1 >", TRUE
51E0   31 80 18               LD   SP,STACK   
51E3   CD 53 08               CALL   init   
51E6   CD 5E 0A               CALL   exec   
51E9   32 20 31 20 3E 00      .CSTR   "2 1 >"   
51EF                          ;*Macro unroll:  expect "2 1 >",TRUE
51EF   E1                     POP   HL   
51F0   E5                     PUSH   HL   
51F1   11 FF FF               LD   DE,TRUE   
51F4   B7                     OR   A   
51F5   ED 52                  SBC   HL,DE   
51F7   7D                     LD   A,L   
51F8   B4                     OR   H   
51F9   28 50                  JR   Z,expectM_0_2353S43   
51FB   CD 34 08               CALL   printStr   
51FE   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
520A   CD 34 08               CALL   printStr   
520D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
521C   21 FF FF               LD   HL,TRUE   
521F   CD 88 07               CALL   prtdec   
5222   CD 34 08               CALL   printStr   
5225   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5232   E1                     POP   hl   
5233   E5                     PUSH   hl   
5234   CD 88 07               CALL   prtdec   
5237   E1                     POP   hl   
5238   CD 34 08               CALL   printStr   
523B   20 28 23 00            .CSTR   " (#"   
523F   CD D0 07               CALL   prthex   
5242   CD 34 08               CALL   printStr   
5245   29 0D 0A 00            .CSTR   ")\r\n"   
5249   76                     HALT      
524A   00                     .CSTR      
524B                EXPECTM_0_2353S43:      
524B   E1                     POP   HL   
524C                          ;*Macro unroll:  test "3 3 >", FALSE
524C   31 80 18               LD   SP,STACK   
524F   CD 53 08               CALL   init   
5252   CD 5E 0A               CALL   exec   
5255   33 20 33 20 3E 00      .CSTR   "3 3 >"   
525B                          ;*Macro unroll:  expect "3 3 >",FALSE
525B   E1                     POP   HL   
525C   E5                     PUSH   HL   
525D   11 00 00               LD   DE,FALSE   
5260   B7                     OR   A   
5261   ED 52                  SBC   HL,DE   
5263   7D                     LD   A,L   
5264   B4                     OR   H   
5265   28 50                  JR   Z,expectM_0_2354S43   
5267   CD 34 08               CALL   printStr   
526A   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
5276   CD 34 08               CALL   printStr   
5279   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5288   21 00 00               LD   HL,FALSE   
528B   CD 88 07               CALL   prtdec   
528E   CD 34 08               CALL   printStr   
5291   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
529E   E1                     POP   hl   
529F   E5                     PUSH   hl   
52A0   CD 88 07               CALL   prtdec   
52A3   E1                     POP   hl   
52A4   CD 34 08               CALL   printStr   
52A7   20 28 23 00            .CSTR   " (#"   
52AB   CD D0 07               CALL   prthex   
52AE   CD 34 08               CALL   printStr   
52B1   29 0D 0A 00            .CSTR   ")\r\n"   
52B5   76                     HALT      
52B6   00                     .CSTR      
52B7                EXPECTM_0_2354S43:      
52B7   E1                     POP   HL   
52B8                          ;*Macro unroll:  test "4 3 >", TRUE
52B8   31 80 18               LD   SP,STACK   
52BB   CD 53 08               CALL   init   
52BE   CD 5E 0A               CALL   exec   
52C1   34 20 33 20 3E 00      .CSTR   "4 3 >"   
52C7                          ;*Macro unroll:  expect "4 3 >",TRUE
52C7   E1                     POP   HL   
52C8   E5                     PUSH   HL   
52C9   11 FF FF               LD   DE,TRUE   
52CC   B7                     OR   A   
52CD   ED 52                  SBC   HL,DE   
52CF   7D                     LD   A,L   
52D0   B4                     OR   H   
52D1   28 50                  JR   Z,expectM_0_2355S43   
52D3   CD 34 08               CALL   printStr   
52D6   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
52E2   CD 34 08               CALL   printStr   
52E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52F4   21 FF FF               LD   HL,TRUE   
52F7   CD 88 07               CALL   prtdec   
52FA   CD 34 08               CALL   printStr   
52FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
530A   E1                     POP   hl   
530B   E5                     PUSH   hl   
530C   CD 88 07               CALL   prtdec   
530F   E1                     POP   hl   
5310   CD 34 08               CALL   printStr   
5313   20 28 23 00            .CSTR   " (#"   
5317   CD D0 07               CALL   prthex   
531A   CD 34 08               CALL   printStr   
531D   29 0D 0A 00            .CSTR   ")\r\n"   
5321   76                     HALT      
5322   00                     .CSTR      
5323                EXPECTM_0_2355S43:      
5323   E1                     POP   HL   
5324                          ;*Macro unroll:  test "2 2 <=", TRUE
5324   31 80 18               LD   SP,STACK   
5327   CD 53 08               CALL   init   
532A   CD 5E 0A               CALL   exec   
532D   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
5334                          ;*Macro unroll:  expect "2 2 <=",TRUE
5334   E1                     POP   HL   
5335   E5                     PUSH   HL   
5336   11 FF FF               LD   DE,TRUE   
5339   B7                     OR   A   
533A   ED 52                  SBC   HL,DE   
533C   7D                     LD   A,L   
533D   B4                     OR   H   
533E   28 51                  JR   Z,expectM_0_2356S43   
5340   CD 34 08               CALL   printStr   
5343   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
5350   CD 34 08               CALL   printStr   
5353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5362   21 FF FF               LD   HL,TRUE   
5365   CD 88 07               CALL   prtdec   
5368   CD 34 08               CALL   printStr   
536B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5378   E1                     POP   hl   
5379   E5                     PUSH   hl   
537A   CD 88 07               CALL   prtdec   
537D   E1                     POP   hl   
537E   CD 34 08               CALL   printStr   
5381   20 28 23 00            .CSTR   " (#"   
5385   CD D0 07               CALL   prthex   
5388   CD 34 08               CALL   printStr   
538B   29 0D 0A 00            .CSTR   ")\r\n"   
538F   76                     HALT      
5390   00                     .CSTR      
5391                EXPECTM_0_2356S43:      
5391   E1                     POP   HL   
5392                          ;*Macro unroll:  test "2 2 >=", TRUE
5392   31 80 18               LD   SP,STACK   
5395   CD 53 08               CALL   init   
5398   CD 5E 0A               CALL   exec   
539B   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
53A2                          ;*Macro unroll:  expect "2 2 >=",TRUE
53A2   E1                     POP   HL   
53A3   E5                     PUSH   HL   
53A4   11 FF FF               LD   DE,TRUE   
53A7   B7                     OR   A   
53A8   ED 52                  SBC   HL,DE   
53AA   7D                     LD   A,L   
53AB   B4                     OR   H   
53AC   28 51                  JR   Z,expectM_0_2357S43   
53AE   CD 34 08               CALL   printStr   
53B1   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
53BE   CD 34 08               CALL   printStr   
53C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53D0   21 FF FF               LD   HL,TRUE   
53D3   CD 88 07               CALL   prtdec   
53D6   CD 34 08               CALL   printStr   
53D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53E6   E1                     POP   hl   
53E7   E5                     PUSH   hl   
53E8   CD 88 07               CALL   prtdec   
53EB   E1                     POP   hl   
53EC   CD 34 08               CALL   printStr   
53EF   20 28 23 00            .CSTR   " (#"   
53F3   CD D0 07               CALL   prthex   
53F6   CD 34 08               CALL   printStr   
53F9   29 0D 0A 00            .CSTR   ")\r\n"   
53FD   76                     HALT      
53FE   00                     .CSTR      
53FF                EXPECTM_0_2357S43:      
53FF   E1                     POP   HL   
5400                             ; test ":x 1000 let x 10 set x", 10
5400                             ; test ":x [100] { @1 } closure x", 100
5400                             ; test ":x [100 200] { @2 } closure x", 200
5400                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
5400                             ; test "0 [{1}] switch", 1
5400                             ; test "1 [{1} {2} {3}] switch", 2
5400                             ; test "9 [{1} {5}] switch", 5
5400                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
5400                             ; test "bytes 'ABC' get", $41
5400                             ; test "bytes [1 2 3] get", 1
5400                             ; test ":xyz 123 const ; xyz", 123
5400                             ; test ":x 1 const ; x", 1
5400                             ; test ":x 'A' const x get", $41
5400                             ; test ":x [1] const x get", 1
5400                             ; test ":x [1 2 3] const x 2? get", 3
5400                             ; test "2 (1 2 +) *", 6
5400                             ; test ":xyz 123 const ; xyz", 123
5400                             ; test ":xyz 123 let ; xyz get", 123
5400                             ; test "1 2 {$1 $2 +} call", 3
5400                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
5400                             ; test ":xyz {1} def :xyz addr call", 1
5400                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
5400                             ; test ":xyz {10} def :xyz addr exec", 10
5400                             ; test ":xyz {10} def :xyz addr call", 10
5400                             ; test "'hello' hash", $7f54
5400                             ; test ":hello", $7f54
5400                             ; test "bytes [1 2 3]", $1e02
5400                             ; test "bytes [1 2 3] 1? get", 2
5400                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
5400                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
5400                             ; test "words [1 2 3]", $1e02
5400                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
5400                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
5400                             ; test "words [10 20 30] 1 ? get", 10
5400                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
5400                             ; test "{{{1} exec} exec} exec", 1
5400                             ; test "5 {{{$1} exec} exec} call", 5
5400                             ; test "5 {$1} call", 5
5400                             ; test "5 {{$1} exec} call", 5
5400                             ; test "2 1 {{$1} call} call", 2
5400                             ; test "2 1 {$2} call", 1
5400                             ; test "2 1 {$1} call", 2
5400                             ; test "2 1 {$2} call", 1
5400                             ; test "2 4 {$2} call", 4
5400                             ; test "{{1} call} call", 1
5400                             ; test "5 {-1 {$1} if} call", 5
5400                             ; test "0 {} loop", 0
5400                             ; test "1 {1-} loop", $1a00
5400                             ; test ":h {1} def :h addr call", 1
5400                             ; ; call enter
5400                             ; ;     .cstr "1 3",$22,"+"
5400                             ; ; expect "1 3 DUP +", 6
5400   CD 34 08               CALL   printStr   
5403   44 6F 6E 65 21 00      .CSTR   "Done!"   
5409   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06E0 DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1819 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1821 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 256 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 258 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 260 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 262 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 264 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 266 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 268 IN Siena.asm
AND_:               0361 DEFINED AT LINE 270 IN Siena.asm
AND1:               0368 DEFINED AT LINE 278 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 302 IN Siena.asm
OR_:                036C DEFINED AT LINE 283 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 293 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
INV_:               037E DEFINED AT LINE 304 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 308 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 315 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 320 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB1:               039F DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
SUB2:               03A1 DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 1249 IN Siena.asm
NOT_:               03A7 DEFINED AT LINE 340 IN Siena.asm
EQ_:                03AC DEFINED AT LINE 344 IN Siena.asm
EQ1:                03AD DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
GT_:                03B1 DEFINED AT LINE 350 IN Siena.asm
LT_:                03B5 DEFINED AT LINE 355 IN Siena.asm
LT1:                03B7 DEFINED AT LINE 358 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
DIV_:               03C2 DEFINED AT LINE 366 IN Siena.asm
COMMENT_:           03D1 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
NOP_:               03DA DEFINED AT LINE 385 IN Siena.asm
SHL:                03DC DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
SHL1:               03E4 DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
SHL2:               03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHR:                03EC DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
SHR1:               03F4 DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
SHR2:               03F8 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
MUL:                03FF DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
MUL2:               0409 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
NUM:                041B DEFINED AT LINE 451 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0424 DEFINED AT LINE 457 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
NUM1:               0425 DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
NUM2:               043D DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
NUM3:               0448 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
HEXNUM:             044B DEFINED AT LINE 489 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            044E DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
HEXNUM2:            0456 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
STRING:             0468 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
STRING2:            0473 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
CHAR:               0481 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
CHAR1:              0484 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
CHAR2:              0490 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR3:              0493 DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PAREN:              0496 DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PARENEND:           0498 DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              049A DEFINED AT LINE 567 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
BLOCK1:             049E DEFINED AT LINE 571 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 594 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
BLOCK2:             04C4 DEFINED AT LINE 595 IN Siena.asm
BLOCK3:             04C7 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 592 IN Siena.asm
BLOCK4:             04CD DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
BLOCKEND:           04D3 DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
ARG:                050A DEFINED AT LINE 645 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0528 DEFINED AT LINE 668 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              052A DEFINED AT LINE 687 IN Siena.asm
GET:                052A DEFINED AT LINE 688 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
GET1:               052B DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
GET2:               0539 DEFINED AT LINE 699 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
SET:                053C DEFINED AT LINE 704 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
SET1:               054E DEFINED AT LINE 718 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
IF:                 0551 DEFINED AT LINE 724 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
IFTE:               0553 DEFINED AT LINE 731 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
SWITCH:             0555 DEFINED AT LINE 761 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
LOOP:               055F DEFINED AT LINE 774 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
WORDS:              0561 DEFINED AT LINE 824 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
BYTES:              0566 DEFINED AT LINE 827 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
BYTES1:             0569 DEFINED AT LINE 829 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
ARRAY:              056E DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARRAYEND:           0570 DEFINED AT LINE 844 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
HASH:               0572 DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
DEF:                057D DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
CLOSURE:            0581 DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
DEF0:               0581 DEFINED AT LINE 955 IN Siena.asm
DEF1:               059B DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
DEF2:               05BF DEFINED AT LINE 1002 IN Siena.asm
DEF3:               05C2 DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
DEF4:               05C8 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
DEF5:               05DB DEFINED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
LET:                05DE DEFINED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
LET2:               0602 DEFINED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
ADDR:               0605 DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
ADDR1:              0611 DEFINED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
SYMBOL:             0619 DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
SYMBOL0:            0621 DEFINED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
SYMBOL1:            0623 DEFINED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
SYMBOL2:            0633 DEFINED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1091 IN Siena.asm
IDENT:              0641 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
IDENT0:             0648 DEFINED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
IDENT1:             064A DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
IDENT2:             065A DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
IDENT3:             066E DEFINED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
FRAC:               066F DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
SQRT1:              0675 DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
ABS1:               0682 DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
MOD:                068F DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
EQUALS:             069B DEFINED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHANEQ:         06A3 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
LESSTHAN:           06A8 DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
LESSTHAN1:          06AD DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
TRUE1:              06B0 DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1186 IN Siena.asm
FALSE1:             06B6 DEFINED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
INPUT:              06BC DEFINED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
OUTPUT:             06C7 DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
KEY:                06D0 DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
NEG:                06D9 DEFINED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
FILTER:             06E0 DEFINED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
MAP:                06E0 DEFINED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
HASHSTR:            06E2 DEFINED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 943 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
HASHSTR1:           06E5 DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
HASHSTR2:           06EA DEFINED AT LINE 1270 IN Siena.asm
DEFINEENTRY:        06FB DEFINED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
DEFINEENTRY0:       0700 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
DEFINEENTRY1:       070F DEFINED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
DEFINEENTRY2:       0715 DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1335 IN Siena.asm
DEFINEENTRY3:       0717 DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
LOOKUPENTRY:        0721 DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
LOOKUPENTRY0:       0726 DEFINED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
LOOKUPENTRY1:       0735 DEFINED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
LOOKUPENTRY2:       073B DEFINED AT LINE 1350 IN Siena.asm
LOOKUPENTRY3:       073D DEFINED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
DIVIDE:             0745 DEFINED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
DIVIDE1:            074A DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
DIVIDE2:            0757 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
DIVIDE3:            0758 DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
SQUAREROOT:         075E DEFINED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
SQUAREROOT1:        0763 DEFINED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1413 IN Siena.asm
SQUAREROOT4:        077E DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
SQUAREROOT5:        0785 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
PRTDEC:             0788 DEFINED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0797 DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
PRTDEC1:            07B9 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
PRTDEC2:            07BB DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
PRTDEC3:            07CB DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
PRTDEC4:            07CC DEFINED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1461 IN Siena.asm
PRTHEX:             07D0 DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            07DB DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
PRTHEX3:            07E4 DEFINED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
PRTSTR0:            07EF DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
PRTSTR:             07F3 DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
NESTING:            07F8 DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
NESTING1A:          0803 DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
NESTING1:           0806 DEFINED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
NESTING2:           0815 DEFINED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
NESTING3:           0817 DEFINED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
NESTING4:           0822 DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
PROMPT:             0824 DEFINED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
CRLF:               082D DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
PRINTSTR:           0834 DEFINED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 140
DEFINE:             083B DEFINED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
INIT:               0853 DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              086D DEFINED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
START:              09BC DEFINED AT LINE 1718 IN Siena.asm
INTERPRET:          09D2 DEFINED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1823 IN Siena.asm
INTERPRET2:         09DC DEFINED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
INTERPRET3:         09E4 DEFINED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
INTERPRET4:         09EA DEFINED AT LINE 1743 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
WAITCHAR:           09EF DEFINED AT LINE 1749 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
MACRO:              09FE DEFINED AT LINE 1759 IN Siena.asm
WAITCHAR1:          0A00 DEFINED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
WAITCHAR3:          0A0E DEFINED AT LINE 1785 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
WAITCHAR4:          0A21 DEFINED AT LINE 1801 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
NEXT:               0A29 DEFINED AT LINE 1807 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1811 IN Siena.asm
NEXT1:              0A38 DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 1812 IN Siena.asm
ESCAPE:             0A43 DEFINED AT LINE 1825 IN Siena.asm
                    > USED AT LINE 1820 IN Siena.asm
EXIT:               0A47 DEFINED AT LINE 1830 IN Siena.asm
                    > USED AT LINE 1822 IN Siena.asm
EXEC:               0A5E DEFINED AT LINE 1854 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0A75 DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 1858 IN Siena.asm
CALL:               0A77 DEFINED AT LINE 1873 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
CALL1:              0A78 DEFINED AT LINE 1875 IN Siena.asm
CALL2:              0A97 DEFINED AT LINE 1902 IN Siena.asm
                    > USED AT LINE 1878 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1584 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 372 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 663 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
                    > USED AT LINE 1786 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1590 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2312S43:  407D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2313S43:  4101 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2314S43:  4197 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2315S43:  4223 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2316S43:  42B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2317S43:  431B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2318S43:  4389 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2319S43:  43F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2320S43:  4467 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2321S43:  44D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2322S43:  4543 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2323S43:  45A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2324S43:  460B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2325S43:  4671 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2326S43:  46D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2327S43:  4743 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2328S43:  47A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2329S43:  480B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2330S43:  4871 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2331S43:  48D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2332S43:  4941 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2333S43:  49A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2334S43:  4A15 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2335S43:  4A89 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2336S43:  4AFB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2337S43:  4B67 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2338S43:  4BD3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2339S43:  4C3F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2340S43:  4CAB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2341S43:  4D1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2342S43:  4D8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2343S43:  4E09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2344S43:  4E75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2345S43:  4EEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2346S43:  4F57 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2347S43:  4FC3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2348S43:  502F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2349S43:  509B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2350S43:  5107 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2351S43:  5173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2352S43:  51DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2353S43:  524B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2354S43:  52B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2355S43:  5323 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2356S43:  5391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2357S43:  53FF DEFINED AT LINE 34
                    > USED AT LINE 10
