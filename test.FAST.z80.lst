0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL prtstr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL prtdec
0000                 CALL prtstr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL prtdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 LD SP,DSTACK
0000                 CALL init
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 45 03               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   1   ; not FF, for Siena
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Siena)
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                .macro LITDAT,len
00CC                             ; 
00CC                 DB len
00CC                .endm
00CC                 
00CC                .macro REPDAT,len,data
00CC                             ; 
00CC                 DB (len | $80)
00CC                 DB data
00CC                .endm
00CC                 
00CC                .macro ENDDAT,
00CC                             ; 
00CC                 DB 0
00CC                .endm
00CC                 
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                IOPCODES:      
0190                          ;*Macro unroll:  LITDAT 4		            ; macros for compression
0190   04                     DB   4   ; macros for compression
0191   6A                     DB   lsb(exit_)   ; NUL
0192   89                     DB   lsb(nop_)   ; SOH
0193   89                     DB   lsb(nop_)   ; STX
0194   67                     DB   lsb(etx_)   ; ETX
0195                          ;*Macro unroll:  LITDAT 29
0195   1D                     DB   29   
0196                             ; REPDAT 29, lsb(nop_)
0196   89                     DB   lsb(nop_)   ; 
0197   89                     DB   lsb(nop_)   ; 
0198   89                     DB   lsb(nop_)   ; 
0199   89                     DB   lsb(nop_)   ; 
019A   89                     DB   lsb(nop_)   ; 
019B   89                     DB   lsb(nop_)   ; 
019C   89                     DB   lsb(nop_)   ; 
019D   89                     DB   lsb(nop_)   ; 
019E   89                     DB   lsb(nop_)   ; 
019F   89                     DB   lsb(nop_)   ; 
01A0   89                     DB   lsb(nop_)   ; 
01A1   89                     DB   lsb(nop_)   ; 
01A2   89                     DB   lsb(nop_)   ; 
01A3   89                     DB   lsb(nop_)   ; 
01A4   89                     DB   lsb(nop_)   ; 
01A5   89                     DB   lsb(nop_)   ; 
01A6   89                     DB   lsb(nop_)   ; 
01A7   89                     DB   lsb(nop_)   ; 
01A8   89                     DB   lsb(nop_)   ; 
01A9   89                     DB   lsb(nop_)   ; 
01AA   89                     DB   lsb(nop_)   ; 
01AB   89                     DB   lsb(nop_)   ; 
01AC   89                     DB   lsb(nop_)   ; 
01AD   89                     DB   lsb(nop_)   ; 
01AE   89                     DB   lsb(nop_)   ; 
01AF   89                     DB   lsb(nop_)   ; 
01B0   89                     DB   lsb(nop_)   ; 
01B1   89                     DB   lsb(nop_)   ; 
01B2   89                     DB   lsb(nop_)   ; 
01B3                          ;*Macro unroll:  LITDAT 15
01B3   0F                     DB   15   
01B4   89                     DB   lsb(nop_)   ;    !
01B5   89                     DB   lsb(nop_)   ;    "
01B6   03                     DB   lsb(hexnum_)   ;    #
01B7   06                     DB   lsb(arg_)   ;    $
01B8   89                     DB   lsb(nop_)   ;    %
01B9   89                     DB   lsb(nop_)   ;    &
01BA   09                     DB   lsb(strDef_)   ;    '
01BB   89                     DB   lsb(nop_)   ;    (
01BC   89                     DB   lsb(nop_)   ;    )
01BD   89                     DB   lsb(nop_)   ;    *
01BE   0C                     DB   lsb(newAdd2_)   ;    +
01BF   89                     DB   lsb(nop_)   ;    ,
01C0   00                     DB   lsb(num_)   ;    -
01C1   12                     DB   lsb(dot_)   ;    .
01C2   89                     DB   lsb(nop_)   ;    /	
01C3                             ; REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C3                          ;*Macro unroll:  LITDAT 10
01C3   0A                     DB   10   
01C4   00                     DB   lsb(num_)   ;    0
01C5   00                     DB   lsb(num_)   ;    1
01C6   00                     DB   lsb(num_)   ;    2
01C7   00                     DB   lsb(num_)   ;    3
01C8   00                     DB   lsb(num_)   ;    4
01C9   00                     DB   lsb(num_)   ;    5
01CA   00                     DB   lsb(num_)   ;    6
01CB   00                     DB   lsb(num_)   ;    7
01CC   00                     DB   lsb(num_)   ;    8
01CD   00                     DB   lsb(num_)   ;    9
01CE                          ;*Macro unroll:  LITDAT 7
01CE   07                     DB   7   
01CF   89                     DB   lsb(nop_)   ;    :
01D0   89                     DB   lsb(nop_)   ;    ;
01D1   89                     DB   lsb(nop_)   ;    <
01D2   89                     DB   lsb(nop_)   ;    =
01D3   89                     DB   lsb(nop_)   ;    >
01D4   89                     DB   lsb(nop_)   ;    ?
01D5   74                     DB   lsb(fetch_)   ;    @
01D6                             ; REPDAT 26, lsb(call_)		; call a command a, b ....z
01D6                          ;*Macro unroll:  LITDAT 26
01D6   1A                     DB   26   
01D7   48                     DB   lsb(call_)   ;    A
01D8   48                     DB   lsb(call_)   ;    B
01D9   48                     DB   lsb(call_)   ;    C
01DA   48                     DB   lsb(call_)   ;    D
01DB   48                     DB   lsb(call_)   ;    E
01DC   48                     DB   lsb(call_)   ;    F
01DD   48                     DB   lsb(call_)   ;    G
01DE   48                     DB   lsb(call_)   ;    h
01DF   48                     DB   lsb(call_)   ;    I
01E0   48                     DB   lsb(call_)   ;    J
01E1   48                     DB   lsb(call_)   ;    K
01E2   48                     DB   lsb(call_)   ;    L
01E3   48                     DB   lsb(call_)   ;    M
01E4   48                     DB   lsb(call_)   ;    N
01E5   48                     DB   lsb(call_)   ;    O
01E6   48                     DB   lsb(call_)   ;    p
01E7   48                     DB   lsb(call_)   ;    Q
01E8   48                     DB   lsb(call_)   ;    R
01E9   48                     DB   lsb(call_)   ;    S
01EA   48                     DB   lsb(call_)   ;    T
01EB   48                     DB   lsb(call_)   ;    U
01EC   48                     DB   lsb(call_)   ;    V
01ED   48                     DB   lsb(call_)   ;    W
01EE   48                     DB   lsb(call_)   ;    X
01EF   48                     DB   lsb(call_)   ;    Y
01F0   48                     DB   lsb(call_)   ;    Z
01F1                          ;*Macro unroll:  LITDAT 6
01F1   06                     DB   6   
01F2   89                     DB   lsb(nop_)   ;    [
01F3   89                     DB   lsb(nop_)   ;    \
01F4   89                     DB   lsb(nop_)   ;    ]
01F5   89                     DB   lsb(nop_)   ;    ^
01F6   89                     DB   lsb(nop_)   ;    _
01F7   89                     DB   lsb(nop_)   ;    `    	
01F8                             ; REPDAT 26, lsb(var_)		
01F8                          ;*Macro unroll:  LITDAT 26
01F8   1A                     DB   26   
01F9   0C                     DB   lsb(a_)   ;    a
01FA   02                     DB   lsb(var_)   ;    b
01FB   0F                     DB   lsb(c_)   ;    c
01FC   12                     DB   lsb(d_)   ;    d
01FD   15                     DB   lsb(e_)   ;    e
01FE   18                     DB   lsb(f_)   ;    f
01FF   1B                     DB   lsb(g_)   ;    g
0200   02                     DB   lsb(var_)   ;    h
0201   1E                     DB   lsb(i_)   ;    i
0202   02                     DB   lsb(var_)   ;    j
0203   21                     DB   lsb(k_)   ;    k
0204   24                     DB   lsb(l_)   ;    l
0205   27                     DB   lsb(m_)   ;    m
0206   27                     DB   lsb(m_)   ;    n
0207   2D                     DB   lsb(o_)   ;    o
0208   30                     DB   lsb(p_)   ;    p
0209   02                     DB   lsb(var_)   ;    q
020A   33                     DB   lsb(r_)   ;    r
020B   36                     DB   lsb(s_)   ;    s
020C   02                     DB   lsb(var_)   ;    t
020D   39                     DB   lsb(u_)   ;    u
020E   02                     DB   lsb(var_)   ;    v
020F   3C                     DB   lsb(w_)   ;    w
0210   3F                     DB   lsb(x_)   ;    x
0211   02                     DB   lsb(var_)   ;    y
0212   02                     DB   lsb(var_)   ;    z
0213                          ;*Macro unroll:  LITDAT 5
0213   05                     DB   5   
0214   89                     DB   lsb(nop_)   ;    {
0215   2A                     DB   lsb(or_)   ;    |
0216   89                     DB   lsb(nop_)   ;    }
0217   89                     DB   lsb(nop_)   ;    ~
0218   89                     DB   lsb(nop_)   ;    DEL	
0219                          ;*Macro unroll:  LITDAT 32
0219   20                     DB   32   
021A   00                     DB   lsb(EMPTY)   ; NUL ^@
021B   00                     DB   lsb(EMPTY)   ; SOH ^a  1
021C   00                     DB   lsb(EMPTY)   ; STX ^b  2
021D   00                     DB   lsb(EMPTY)   ; ETX ^c  3
021E   00                     DB   lsb(EMPTY)   ; EOT ^d  4
021F   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0220   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0221   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0222   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0223   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0224   00                     DB   lsb(EMPTY)   ; LF  ^J 10
0225   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0226   00                     DB   lsb(EMPTY)   ; FF  ^l 12
0227   00                     DB   lsb(EMPTY)   ; CR  ^m 13
0228   00                     DB   lsb(EMPTY)   ; SO  ^N 14
0229   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022A   00                     DB   lsb(EMPTY)   ; DLE ^p 16
022B   00                     DB   lsb(EMPTY)   ; ^Q
022C   00                     DB   lsb(EMPTY)   ; ^R
022D   00                     DB   lsb(EMPTY)   ; ^S
022E   00                     DB   lsb(EMPTY)   ; ^T
022F   00                     DB   lsb(EMPTY)   ; ^U
0230   00                     DB   lsb(EMPTY)   ; ^V
0231   00                     DB   lsb(EMPTY)   ; ^W
0232   00                     DB   lsb(EMPTY)   ; ^X
0233   00                     DB   lsb(EMPTY)   ; ^Y
0234   00                     DB   lsb(EMPTY)   ; ^Z
0235   00                     DB   lsb(EMPTY)   ; ^[
0236   00                     DB   lsb(EMPTY)   ; ^\
0237   00                     DB   lsb(EMPTY)   ; ^]
0238   00                     DB   lsb(EMPTY)   ; ^^
0239   00                     DB   lsb(EMPTY)   ; ^_
023A                          ;*Macro unroll:  LITDAT 5
023A   05                     DB   5   
023B   00                     DB   lsb(aNop_)   ;a0    sp  				;space
023C   00                     DB   lsb(aNop_)   ;a1    \!  			; this is a bug shud be lsb(cstore_)
023D   00                     DB   lsb(aNop_)   ;a2    \"  				
023E   00                     DB   lsb(aNop_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
023F   00                     DB   lsb(aNop_)   ;a4    \$  prints a newline to output	
0240                             ; REPDAT 3, lsb(aNop_)
0240                          ;*Macro unroll:  LITDAT 3
0240   03                     DB   3   
0241   00                     DB   lsb(aNop_)   ; 
0242   00                     DB   lsb(aNop_)   ; 
0243   00                     DB   lsb(aNop_)   ; 
0244                          ;*Macro unroll:  LITDAT 8
0244   08                     DB   8   
0245   00                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
0246   00                     DB   lsb(aNop_)   ;a9    \)
0247   00                     DB   lsb(aNop_)   ;aa    \*
0248   00                     DB   lsb(aNop_)   ;ab    \+
0249   00                     DB   lsb(aNop_)   ;ac    \,  ( b -- ) prints a char
024A   00                     DB   lsb(aNop_)   ;ad    \-
024B   00                     DB   lsb(aNop_)   ;ae    \.  ( b -- ) prints a string from add term by null char
024C   00                     DB   lsb(aNop_)   ;af    \/
024D                             ; REPDAT 10, lsb(aNop_)
024D                          ;*Macro unroll:  LITDAT 10
024D   0A                     DB   10   
024E   00                     DB   lsb(aNop_)   ; 
024F   00                     DB   lsb(aNop_)   ; 
0250   00                     DB   lsb(aNop_)   ; 
0251   00                     DB   lsb(aNop_)   ; 
0252   00                     DB   lsb(aNop_)   ; 
0253   00                     DB   lsb(aNop_)   ; 
0254   00                     DB   lsb(aNop_)   ; 
0255   00                     DB   lsb(aNop_)   ; 
0256   00                     DB   lsb(aNop_)   ; 
0257   00                     DB   lsb(aNop_)   ; 
0258                          ;*Macro unroll:  LITDAT 7
0258   07                     DB   7   
0259   00                     DB   lsb(aNop_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
025A   00                     DB   lsb(aNop_)   ;bb    \;
025B   00                     DB   lsb(aNop_)   ;bc    \<  ( port -- val )
025C   00                     DB   lsb(aNop_)   ;bd    \=
025D   00                     DB   lsb(aNop_)   ;be    \>  ( val port -- )
025E   00                     DB   lsb(aNop_)   ;bf    \?
025F   00                     DB   lsb(aNop_)   ;c0    \@ byte fetch
0260                             ; REPDAT 26, lsb(aNop_)
0260                          ;*Macro unroll:  LITDAT 26
0260   1A                     DB   26   
0261   00                     DB   lsb(aNop_)   ; 
0262   00                     DB   lsb(aNop_)   ; 
0263   00                     DB   lsb(aNop_)   ; 
0264   00                     DB   lsb(aNop_)   ; 
0265   00                     DB   lsb(aNop_)   ; 
0266   00                     DB   lsb(aNop_)   ; 
0267   00                     DB   lsb(aNop_)   ; 
0268   00                     DB   lsb(aNop_)   ; 
0269   00                     DB   lsb(aNop_)   ; 
026A   00                     DB   lsb(aNop_)   ; 
026B   00                     DB   lsb(aNop_)   ; 
026C   00                     DB   lsb(aNop_)   ; 
026D   00                     DB   lsb(aNop_)   ; 
026E   00                     DB   lsb(aNop_)   ; 
026F   00                     DB   lsb(aNop_)   ; 
0270   00                     DB   lsb(aNop_)   ; 
0271   00                     DB   lsb(aNop_)   ; 
0272   00                     DB   lsb(aNop_)   ; 
0273   00                     DB   lsb(aNop_)   ; 
0274   00                     DB   lsb(aNop_)   ; 
0275   00                     DB   lsb(aNop_)   ; 
0276   00                     DB   lsb(aNop_)   ; 
0277   00                     DB   lsb(aNop_)   ; 
0278   00                     DB   lsb(aNop_)   ; 
0279   00                     DB   lsb(aNop_)   ; 
027A   00                     DB   lsb(aNop_)   ; 
027B                          ;*Macro unroll:  LITDAT 6
027B   06                     DB   6   
027C   00                     DB   lsb(aNop_)   
027D   00                     DB   lsb(aNop_)   
027E   00                     DB   lsb(aNop_)   
027F   00                     DB   lsb(aNop_)   
0280   00                     DB   lsb(aNop_)   
0281   00                     DB   lsb(aNop_)   
0282                             ; REPDAT 8, lsb(altVar_)  ;e1	\a...\h
0282                          ;*Macro unroll:  LITDAT 8
0282   08                     DB   8   
0283   00                     DB   lsb(aNop_)   
0284   00                     DB   lsb(aNop_)   
0285   00                     DB   lsb(aNop_)   
0286   00                     DB   lsb(aNop_)   
0287   00                     DB   lsb(aNop_)   
0288   00                     DB   lsb(aNop_)   
0289   00                     DB   lsb(aNop_)   
028A   00                     DB   lsb(aNop_)   
028B                          ;*Macro unroll:  LITDAT 2
028B   02                     DB   2   
028C   00                     DB   lsb(aNop_)   
028D   00                     DB   lsb(aNop_)   
028E                             ; REPDAT 16, lsb(altVar_)		; \k...\z
028E                          ;*Macro unroll:  LITDAT 16
028E   10                     DB   16   
028F   00                     DB   lsb(aNop_)   
0290   00                     DB   lsb(aNop_)   
0291   00                     DB   lsb(aNop_)   
0292   00                     DB   lsb(aNop_)   
0293   00                     DB   lsb(aNop_)   
0294   00                     DB   lsb(aNop_)   
0295   00                     DB   lsb(aNop_)   
0296   00                     DB   lsb(aNop_)   
0297   00                     DB   lsb(aNop_)   
0298   00                     DB   lsb(aNop_)   
0299   00                     DB   lsb(aNop_)   
029A   00                     DB   lsb(aNop_)   
029B   00                     DB   lsb(aNop_)   
029C   00                     DB   lsb(aNop_)   
029D   00                     DB   lsb(aNop_)   
029E   00                     DB   lsb(aNop_)   
029F                          ;*Macro unroll:  LITDAT 5
029F   05                     DB   5   
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5                          ;*Macro unroll:  ENDDAT
02A5   00                     DB   0   
02A6                ETX:         ;=12
02A6   21 00 E6               LD   hl,-DSTACK   
02A9   39                     ADD   hl,sp   
02AA   30 03                  JR   nc,etx1   
02AC   31 00 1A               LD   sp,DSTACK   
02AF                ETX1:        
02AF   18 16                  JR   interpret   
02B1                START:       
02B1   31 00 1A               LD   sp,DSTACK   ; start of Siena
02B4   CD 45 03               CALL   init   ; setups
02B7   CD 93 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
02BA   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02C7                INTERPRET:      
02C7   CD 97 07               CALL   prompt   
02CA   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02CD   ED 43 84 1B            LD   (vTIBPtr),bc   
02D1                INTERPRET2:      ; calc nesting (a macro might have changed it)
02D1   1E 00                  LD   e,0   ; initilize nesting value
02D3   C5                     PUSH   bc   ; save offset into TIB,
02D4                             ; bc is also the count of chars in TIB
02D4   21 00 18               LD   hl,TIB   ; hl is start of TIB
02D7   18 06                  JR   interpret4   
02D9                INTERPRET3:      
02D9   7E                     LD   a,(hl)   ; a = char in TIB
02DA   23                     INC   hl   ; inc pointer into TIB
02DB   0B                     DEC   bc   ; dec count of chars in TIB
02DC   CD B8 03               CALL   nesting   ; update nesting value
02DF                INTERPRET4:      
02DF   79                     LD   a,c   ; is count zero?
02E0   B0                     OR   b   
02E1   20 F6                  JR   nz,interpret3   ; if not loop
02E3   C1                     POP   bc   ; restore offset into TIB
02E4                             ; *******************************************************************
02E4                             ; Wait for a character from the serial input (keyboard)
02E4                             ; and store it in the text buffer. Keep accepting characters,
02E4                             ; increasing the instruction pointer bc - until a newline received.
02E4                             ; *******************************************************************
02E4                WAITCHAR:      
02E4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02E7   FE 20                  CP   $20   ; compare to space
02E9   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02EB   FE 00                  CP   $0   ; is it end of string? null end of string
02ED   28 45                  JR   z,waitchar4   
02EF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02F1   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
02F3                             ; ld d,0
02F3                MACRO:       ;=25
02F3   ED 43 84 1B            LD   (vTIBPtr),bc   
02F7   21 80 1A               LD   hl,ctrlCodes   
02FA   85                     ADD   a,l   ;look up key of macros
02FB   6F                     LD   l,a   
02FC   5E                     LD   e,(hl)   
02FD   7B                     LD   a,e   
02FE   B7                     OR   a   
02FF   28 09                  JR   z,macro1   
0301   16 01                  LD   d,msb(macros)   
0303   D5                     PUSH   de   
0304   CD 89 03               CALL   ENTER   ;Siena go operation and jump to it
0307   67 6F 00               .CSTR   "go"   
030A                MACRO1:      
030A   ED 4B 84 1B            LD   bc,(vTIBPtr)   
030E   18 C1                  JR   interpret2   
0310                WAITCHAR1:      
0310   21 00 18               LD   hl,TIB   
0313   09                     ADD   hl,bc   
0314   77                     LD   (hl),a   ; store the character in textbuf
0315   03                     INC   bc   
0316   CD 85 00               CALL   putchar   ; echo character to screen
0319   CD B8 03               CALL   nesting   
031C   18 C6                  JR   waitchar   ; wait for next character
031E                WAITCHAR3:      
031E   21 00 18               LD   hl,TIB   
0321   09                     ADD   hl,bc   
0322   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0324   23                     INC   hl   
0325   36 0A                  LD   (hl),"\n"   
0327   23                     INC   hl   ; ????
0328   03                     INC   bc   
0329   03                     INC   bc   
032A   CD BF 07               CALL   crlf   ; echo character to screen
032D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
032E   B7                     OR   a   
032F   20 B3                  JR   nz,waitchar   
0331   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0333   03                     INC   bc   
0334                WAITCHAR4:      
0334   ED 43 84 1B            LD   (vTIBPtr),bc   
0338   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
033B   0B                     DEC   bc   
033C                             ; ********************************************************************************
033C                             ; 
033C                             ; Dispatch Routine.
033C                             ; 
033C                             ; Get the next character and form a 1 byte jump address
033C                             ; 
033C                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
033C                             ; jump to the selected function.
033C                             ; 
033C                             ; Individual handler routines will deal with each category:
033C                             ; 
033C                             ; 1. Detect characters a-z and jump to the User Command handler routine
033C                             ; 
033C                             ; 2. Detect characters a-z and jump to the variable handler routine
033C                             ; 
033C                             ; 3. All other characters are punctuation and cause a jump to the associated
033C                             ; primitive code.
033C                             ; 
033C                             ; Instruction Pointer IP bc is incremented
033C                             ; 
033C                             ; *********************************************************************************
033C                NEXT:        ;=9
033C   03                     INC   bc   ;  Increment the IP
033D   0A                     LD   a,(bc)   ;  Get the next character and dispatch
033E   6F                     LD   l,a   ;  Index into table
033F   26 1A                  LD   h,msb(opcodes)   ;  Start address of jump table
0341   6E                     LD   l,(hl)   ;  get low jump address
0342   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
0344   E9                     JP   (hl)   ;  Jump to routine
0345                INIT:        
0345   FD 21 00 1A            LD   iy,DSTACK   
0349   DD 21 80 19            LD   ix,RSTACK   
034D   21 80 01               LD   hl,ialtVars   
0350   11 80 1B               LD   de,altVars   
0353   01 10 00               LD   bc,8 * 2   
0356   ED B0                  LDIR      
0358   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
035B   54 5D                  LD   de,hl   
035D   13                     INC   de   
035E   36 00                  LD   (hl),0   
0360   01 68 00               LD   bc,DATASIZE   
0363   ED B0                  LDIR      
0365                INITOPS:      
0365   21 90 01               LD   hl,iOpcodes   
0368   11 00 1A               LD   de,opcodes   
036B   01 00 01               LD   bc,256   
036E                INITOPS1:      
036E   7E                     LD   a,(hl)   
036F   23                     INC   hl   
0370   CB 27                  SLA   a   
0372   C8                     RET   z   
0373   38 09                  JR   c,initOps2   
0375   CB 3F                  SRL   a   
0377   4F                     LD   c,a   
0378   06 00                  LD   b,0   
037A   ED B0                  LDIR      
037C   18 F0                  JR   initOps1   
037E                INITOPS2:      
037E   CB 3F                  SRL   a   
0380   47                     LD   b,a   
0381   7E                     LD   a,(hl)   
0382   23                     INC   hl   
0383                INITOPS2A:      
0383   12                     LD   (de),a   
0384   13                     INC   de   
0385   10 FC                  DJNZ   initOps2a   
0387   18 E5                  JR   initOps1   
0389                ENTER:       ;=9
0389   60 69                  LD   hl,bc   
038B   CD A9 07               CALL   rpush   ; save Instruction Pointer
038E   C1                     POP   bc   
038F   0B                     DEC   bc   
0390   C3 3C 03               JP   next   
0393                PRINTSTR:      ;=14
0393   E3                     EX   (sp),hl   ; swap			
0394   CD A4 07               CALL   putStr   
0397   23                     INC   hl   ; inc past null
0398   E3                     EX   (sp),hl   ; put it back	
0399   C9                     RET      
039A                LOOKUPREF:      
039A   16 00                  LD   d,0   
039C                LOOKUPREF0:      
039C   FE 61                  CP   "a"   
039E   30 06                  JR   nc,lookupRef2   
03A0                LOOKUPREF1:      
03A0   D6 61                  SUB   "a"   
03A2   1E 00                  LD   e,0   
03A4   18 04                  JR   lookupRef3   
03A6                LOOKUPREF2:      
03A6   D6 61                  SUB   "a"   
03A8   1E 34                  LD   e,26*2   
03AA                LOOKUPREF3:      
03AA   87                     ADD   a,a   
03AB   83                     ADD   a,e   
03AC   21 C0 1B               LD   hl,DATA   
03AF   85                     ADD   a,l   
03B0   6F                     LD   l,a   
03B1   3E 00                  LD   a,0   
03B3   8C                     ADC   a,h   
03B4   67                     LD   h,a   
03B5   AF                     XOR   a   
03B6   B3                     OR   e   ; sets z flag if a-z
03B7   C9                     RET      
03B8                             ; **************************************************************************
03B8                             ; calculate nesting value
03B8                             ; a is char to be tested,
03B8                             ; e is the nesting value (initially 0)
03B8                             ; e is increased by ( and [
03B8                             ; e is decreased by ) and ]
03B8                             ; e has its bit 7 toggled by `
03B8                             ; limited to 127 levels
03B8                             ; **************************************************************************
03B8                NESTING:      ; 
03B8   FE 22                  CP   $22   ; quote char
03BA   20 0A                  JR   nz,nesting1   
03BC   CB 7B                  BIT   7,e   
03BE   28 03                  JR   z,nesting1a   
03C0   CB BB                  RES   7,e   
03C2   C9                     RET      
03C3                NESTING1A:      
03C3   CB FB                  SET   7,e   
03C5   C9                     RET      
03C6                NESTING1:      
03C6   CB 7B                  BIT   7,e   
03C8   C0                     RET   nz   
03C9   FE 7B                  CP   "{"   
03CB   28 08                  JR   z,nesting2   
03CD   FE 5B                  CP   "["   
03CF   28 04                  JR   z,nesting2   
03D1   FE 28                  CP   "("   
03D3   20 02                  JR   nz,nesting3   
03D5                NESTING2:      
03D5   1C                     INC   e   
03D6   C9                     RET      
03D7                NESTING3:      
03D7   FE 7D                  CP   "}"   
03D9   28 07                  JR   z,nesting4   
03DB   FE 5D                  CP   "]"   
03DD   28 03                  JR   z,nesting4   
03DF   FE 29                  CP   ")"   
03E1   C0                     RET   nz   
03E2                NESTING4:      
03E2   1D                     DEC   e   
03E3   C9                     RET      
03E4                             ; **********************************************************************			
03E4                             ; Page 4 primitive routines
03E4                             ; **********************************************************************
03E4                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 C6 07               JP   num   
0403                HEXNUM_:      
0403   C3 F2 07               JP   hexnum   
0406                ARG_:        
0406   C3 76 08               JP   arg   
0409                STRDEF_:      
0409   C3 90 08               JP   strDef   
040C                NEWADD2_:      
040C   C3 E2 08               JP   newAdd2   
040F                GO_:         
040F   C3 00 09               JP   go   
0412                DOT_:        
0412   E1                     POP   hl   
0413   CD 0F 08               CALL   prtdec   
0416                DOT2:        
0416   3E 20                  LD   a," "   
0418   CD 85 00               CALL   putchar   
041B   C3 3C 03               JP   next   
041E                AND_:        
041E   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
041F   E1                     POP   hl   ; 
0420   7B                     LD   a,e   ; 
0421   A5                     AND   l   ; 
0422   6F                     LD   l,a   ; 
0423   7A                     LD   a,d   ; 
0424   A4                     AND   h   ; 
0425                AND1:        
0425   67                     LD   h,a   ; 
0426   E5                     PUSH   hl   ; 
0427   C3 3C 03               JP   next   ; 
042A                             ; 
042A                OR_:         
042A   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
042B   E1                     POP   hl   
042C   7B                     LD   a,e   
042D   B5                     OR   l   
042E   6F                     LD   l,a   
042F   7A                     LD   a,d   
0430   B4                     OR   h   
0431   18 F2                  JR   and1   
0433                XOR_:        
0433   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0434                XOR1:        
0434   E1                     POP   hl   
0435   7B                     LD   a,e   
0436   AD                     XOR   l   
0437   6F                     LD   l,a   
0438   7A                     LD   a,d   
0439   AC                     XOR   h   
043A   18 E9                  JR   and1   
043C                INV_:        ; Bitwise INVert the top member of the stack
043C   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
043F   18 F3                  JR   xor1   
0441                ADD_:        ; add the top 2 members of the stack
0441   D1                     POP   de   
0442   E1                     POP   hl   
0443   19                     ADD   hl,de   
0444   E5                     PUSH   hl   
0445   C3 3C 03               JP   next   
0448                CALL_:       
0448   0A                     LD   a,(bc)   
0449   CD A0 03               CALL   lookupRef1   
044C   5E                     LD   e,(hl)   
044D   23                     INC   hl   
044E   56                     LD   d,(hl)   
044F   C3 01 09               JP   go1   
0452                HDOT_:       ; print hexadecimal
0452   E1                     POP   hl   
0453   CD 57 08               CALL   prthex   
0456   18 BE                  JR   dot2   
0458                DROP_:       ; Discard the top member of the stack
0458   E1                     POP   hl   
0459   C3 3C 03               JP   next   
045C                UNDROP_:      
045C   3B                     DEC   sp   
045D   3B                     DEC   sp   
045E   C3 3C 03               JP   next   
0461                DUP_:        
0461   E1                     POP   hl   ; Duplicate the top member of the stack
0462   E5                     PUSH   hl   
0463   E5                     PUSH   hl   
0464   C3 3C 03               JP   next   
0467                ETX_:        
0467   C3 A6 02               JP   ETX   
046A                EXIT_:       
046A   03                     INC   bc   ; store offests into a table of bytes, smaller
046B   50 59                  LD   de,bc   
046D   CD B4 07               CALL   rpop   ; Restore Instruction pointer
0470   44 4D                  LD   bc,hl   
0472   EB                     EX   de,hl   
0473   E9                     JP   (hl)   
0474                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0474   E1                     POP   hl   
0475                FETCH1:      
0475   5E                     LD   e,(hl)   
0476   23                     INC   hl   
0477   56                     LD   d,(hl)   
0478   D5                     PUSH   de   
0479   C3 3C 03               JP   next   
047C                KEY_:        
047C   CD 81 00               CALL   getchar   
047F   26 00                  LD   h,0   
0481   6F                     LD   l,a   
0482   E5                     PUSH   hl   
0483   C3 3C 03               JP   next   
0486   C3 7A 07     MUL_:     JP   mul   
0489                NOP_:        
0489   C3 3C 03               JP   next   ; hardwire white space to always go to next (important for arrays)
048C                OVER_:       
048C   E1                     POP   hl   ; Duplicate 2nd element of the stack
048D   D1                     POP   de   
048E   D5                     PUSH   de   
048F   E5                     PUSH   hl   
0490   D5                     PUSH   de   ; and push it to top of stack
0491   C3 3C 03               JP   next   
0494                RET_:        
0494   CD B4 07               CALL   rpop   ; Restore Instruction pointer
0497   44 4D                  LD   bc,hl   
0499   C3 3C 03               JP   next   
049C                ROT_:        ; a b c -- b c a
049C   D1                     POP   de   ; a b    de = c
049D   E1                     POP   hl   ; a       hl = b
049E   E3                     EX   (sp),hl   ; b       hl = a
049F   D5                     PUSH   de   ; b c
04A0   E5                     PUSH   hl   ; b c a
04A1   C3 3C 03               JP   next   
04A4                             ;  Left shift { is multiply by 2		
04A4                SHL_:        
04A4   E1                     POP   hl   ; Duplicate the top member of the stack
04A5   29                     ADD   hl,hl   
04A6   E5                     PUSH   hl   ; shift left fallthrough into add_
04A7   C3 3C 03               JP   next   ; 
04AA                             ;  Right shift } is a divide by 2		
04AA                SHR_:        
04AA   E1                     POP   hl   ; Get the top member of the stack
04AB                SHR1:        
04AB   CB 3C                  SRL   h   
04AD   CB 1D                  RR   l   
04AF   E5                     PUSH   hl   
04B0   C3 3C 03               JP   next   ; 
04B3                STORE_:      ; Store the value at the address placed on the top of the stack
04B3   E1                     POP   hl   
04B4   D1                     POP   de   
04B5   73                     LD   (hl),e   
04B6   23                     INC   hl   
04B7   72                     LD   (hl),d   
04B8   C3 3C 03               JP   next   
04BB                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04BB   E1                     POP   hl   
04BC   E3                     EX   (sp),hl   
04BD   E5                     PUSH   hl   
04BE   C3 3C 03               JP   next   
04C1                NEG_:        
04C1   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04C4   D1                     POP   de   ; 
04C5   18 02                  JR   sub2   ; use the SUBtract routine
04C7                SUB_:        ; Subtract the value 2nd on stack from top of stack
04C7   D1                     POP   de   ; 
04C8   E1                     POP   hl   ; Entry point for INVert
04C9                SUB2:        
04C9   B7                     OR   a   ; Entry point for NEGate
04CA   ED 52                  SBC   hl,de   ; 15t
04CC   E5                     PUSH   hl   ; 
04CD   C3 3C 03               JP   next   ; 
04D0                             ; 5
04D0                EQ_:         
04D0   E1                     POP   hl   
04D1   D1                     POP   de   
04D2   B7                     OR   a   ; reset the carry flag
04D3   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04D5   28 15                  JR   z,true_   
04D7                FALSE_:      
04D7   21 00 00               LD   hl,0   
04DA   E5                     PUSH   hl   
04DB   C3 3C 03               JP   next   
04DE                GT_:         
04DE   D1                     POP   de   
04DF   E1                     POP   hl   
04E0   18 02                  JR   lt1   
04E2                LT_:         
04E2   E1                     POP   hl   
04E3   D1                     POP   de   
04E4                LT1:         
04E4   B7                     OR   a   ; reset the carry flag
04E5   ED 52                  SBC   hl,de   
04E7   28 EE                  JR   z,false_   
04E9   FA D7 04               JP   m,false_   
04EC                TRUE_:       
04EC   21 01 00               LD   hl,1   
04EF   E5                     PUSH   hl   
04F0   C3 3C 03               JP   next   
04F3                GTE_:        
04F3   D1                     POP   de   
04F4   E1                     POP   hl   
04F5   18 02                  JR   lte1   
04F7                LTE_:        
04F7   E1                     POP   hl   
04F8   D1                     POP   de   
04F9                LTE1:        
04F9   B7                     OR   a   ; reset the carry flag
04FA   ED 52                  SBC   hl,de   
04FC   FA D7 04               JP   m,false_   
04FF   C3 01 00               JP   true   
0502                VAR_:        
0502   0A                     LD   a,(bc)   
0503   CD A6 03               CALL   lookupRef2   
0506   E5                     PUSH   hl   
0507   C3 3C 03               JP   next   
050A                LAMBDA_:      
050A   18 3C                  JR   lambda   
050C                A_:          
050C   C3 63 06               JP   a   
050F                C_:          
050F   C3 73 06               JP   c   
0512                D_:          
0512   C3 83 06               JP   d   
0515                E_:          
0515   C3 9D 06               JP   e   
0518                F_:          
0518   C3 A8 06               JP   f   
051B                G_:          
051B   C3 B3 06               JP   g   
051E                I_:          
051E   C3 C8 06               JP   i   
0521                K_:          
0521   C3 D8 06               JP   k   
0524                L_:          
0524   C3 E6 06               JP   l   
0527                M_:          
0527   C3 F6 06               JP   m   
052A                N_:          
052A   C3 06 07               JP   n   
052D                O_:          
052D   C3 11 07               JP   o   
0530                P_:          
0530   C3 21 07               JP   p   
0533                R_:          
0533   C3 2C 07               JP   r   
0536                S_:          
0536   C3 37 07               JP   s   
0539                U_:          
0539   C3 56 07               JP   u   
053C                W_:          
053C   C3 61 07               JP   w   
053F                X_:          
053F   C3 6C 07               JP   x   
0542                DIV_:        
0542   18 1A                  JR   div   
0544                             ;*******************************************************************
0544                             ; Page 5 primitive routines
0544                             ;*******************************************************************
0544                             ;falls through
0544   E5                     PUSH   hl   
0545   C3 3C 03               JP   next   
0548                LAMBDA:      ;=
0548   03                     INC   bc   
0549   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; start of defintion
054D   D5                     PUSH   de   
054E                LAMBDA1:      ; Skip to end of definition
054E   0A                     LD   a,(bc)   ; Get the next character
054F   03                     INC   bc   ; Point to next character
0550   12                     LD   (de),a   
0551   13                     INC   de   
0552   FE 29                  CP   ")"   ; Is it a semicolon
0554   20 F8                  JR   nz,lambda1   ; get the next element
0556                LAMBDA2:      
0556   0B                     DEC   bc   
0557   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
055B   C3 3C 03               JP   next   
055E                             ; ********************************************************************
055E                             ; 16-bit division subroutine.
055E                             ; 
055E                             ; bc: divisor, de: dividend, hl: remainder
055E                             ; *********************************************************************
055E                             ; This divides de by bc, storing the result in de, remainder in hl
055E                             ; *********************************************************************
055E                             ; 1382 cycles
055E                             ; 35 bytes (reduced from 48)
055E                             ; 
055E                DIV:         ;=34
055E   D1                     POP   de   ; get first value
055F   E1                     POP   hl   ; get 2nd value
0560   C5                     PUSH   bc   ; Preserve the IP
0561   44                     LD   b,h   ; bc = 2nd value
0562   4D                     LD   c,l   
0563                             ; 
0563   21 00 00               LD   hl,0   ; Zero the remainder
0566   3E 10                  LD   a,16   ; Loop counter
0568                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0568   CB 21                  SLA   c   
056A   CB 10                  RL   b   
056C   ED 6A                  ADC   hl,hl   
056E   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0570   38 03                  JR   c,div2   
0572   0C                     INC   c   
0573   18 01                  JR   div3   
0575                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
0575   19                     ADD   hl,de   
0576                DIV3:        
0576   3D                     DEC   a   
0577   20 EF                  JR   nz,div1   
0579   50                     LD   d,b   ; Result from bc to de
057A   59                     LD   e,c   
057B                DIV4:        
057B   C1                     POP   bc   ; Restore the IP
057C   D5                     PUSH   de   ; push Result
057D   E5                     PUSH   hl   ; push remainder
057E   C3 3C 03               JP   next   
0581                             ;=57
0581                             ; **************************************************************************
0581                             ; Page 6 Alt primitives
0581                             ; **************************************************************************
0581                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 3C 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 3C 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 3C 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 3C 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 3C 03               JP   next   
0623                EXEC_:       
0623   CD 29 06               CALL   exec1   
0626   C3 3C 03               JP   next   
0629                EXEC1:       
0629   E1                     POP   hl   
062A   E3                     EX   (sp),hl   
062B   E9                     JP   (hl)   
062C                PROMPT_:      
062C   CD 97 07               CALL   prompt   
062F   C3 3C 03               JP   next   
0632                INPORT_:      ; \<
0632   E1                     POP   hl   
0633   79                     LD   a,c   
0634   4D                     LD   c,l   
0635   ED 68                  IN   l,(c)   
0637   26 00                  LD   h,0   
0639   4F                     LD   c,a   
063A   E5                     PUSH   hl   
063B   C3 3C 03               JP   next   
063E                NEWLN_:      
063E   CD BF 07               CALL   crlf   
0641   C3 3C 03               JP   next   
0644                OUTPORT_:      
0644   E1                     POP   hl   
0645   59                     LD   e,c   
0646   4D                     LD   c,l   
0647   E1                     POP   hl   
0648   ED 69                  OUT   (c),l   
064A   4B                     LD   c,e   
064B   C3 3C 03               JP   next   
064E                PRTSTR_:      
064E                PRTSTR:      
064E   E1                     POP   hl   
064F   CD A4 07               CALL   putStr   
0652   C3 3C 03               JP   next   
0655                RPUSH_:      
0655   E1                     POP   hl   
0656   CD A9 07               CALL   rpush   
0659   C3 3C 03               JP   next   
065C                RPOP_:       
065C   CD B4 07               CALL   rpop   
065F   E5                     PUSH   hl   
0660   C3 3C 03               JP   next   
0663                             ; **************************************************************************
0663                             ; Page 6 primitive routines continued  (page 7)
0663                             ; **************************************************************************
0663                             ; falls through to following page
0663                A:           
0663   03                     INC   bc   
0664   0A                     LD   a,(bc)   
0665   FE 64                  CP   "d"   
0667   CA 41 04               JP   z,add_   
066A   FE 6E                  CP   "n"   
066C   CA 1E 04               JP   z,and_   
066F   0B                     DEC   bc   
0670   C3 02 05               JP   var_   
0673                C:           
0673   03                     INC   bc   
0674   0A                     LD   a,(bc)   
0675   FE 61                  CP   "a"   
0677   CA 77 07               JP   z,case_   
067A   FE 6C                  CP   "l"   
067C   CA 77 07               JP   z,closure_   
067F   0B                     DEC   bc   
0680   C3 02 05               JP   var_   
0683                D:           
0683   03                     INC   bc   
0684   0A                     LD   a,(bc)   
0685   FE 65                  CP   "e"   
0687   CA 77 07               JP   z,def_   
068A   FE 69                  CP   "i"   
068C   CA 42 05               JP   z,div_   
068F   FE 72                  CP   "r"   
0691   CA 58 04               JP   z,drop_   
0694   FE 75                  CP   "u"   
0696   CA 61 04               JP   z,dup_   
0699   0B                     DEC   bc   
069A   C3 02 05               JP   var_   
069D                E:           
069D   03                     INC   bc   
069E   0A                     LD   a,(bc)   
069F   FE 71                  CP   "q"   
06A1   CA D0 04               JP   z,eq_   
06A4   0B                     DEC   bc   
06A5   C3 02 05               JP   var_   
06A8                F:           
06A8   03                     INC   bc   
06A9   0A                     LD   a,(bc)   
06AA   FE 69                  CP   "i"   
06AC   CA 77 07               JP   z,filter_   
06AF   0B                     DEC   bc   
06B0   C3 02 05               JP   var_   
06B3                G:           
06B3   03                     INC   bc   
06B4   0A                     LD   a,(bc)   
06B5   FE 65                  CP   "e"   
06B7   CA 77 07               JP   z,get_   
06BA   FE 6F                  CP   "o"   
06BC   CA 0F 04               JP   z,go_   
06BF   FE 74                  CP   "t"   
06C1   CA DE 04               JP   z,gt_   
06C4   0B                     DEC   bc   
06C5   C3 02 05               JP   var_   
06C8                I:           
06C8   03                     INC   bc   
06C9   0A                     LD   a,(bc)   
06CA   FE 66                  CP   "f"   
06CC   CA 77 07               JP   z,if_   
06CF   FE 6E                  CP   "n"   
06D1   CA 3C 04               JP   z,inv_   
06D4   0B                     DEC   bc   
06D5   C3 02 05               JP   var_   
06D8                K:           
06D8   C3 6C 07               JP   x   
06DB   03                     INC   bc   
06DC   0A                     LD   a,(bc)   
06DD   FE 65                  CP   "e"   
06DF   CA 7C 04               JP   z,key_   
06E2   0B                     DEC   bc   
06E3   C3 02 05               JP   var_   
06E6                L:           
06E6   03                     INC   bc   
06E7   0A                     LD   a,(bc)   
06E8   FE 65                  CP   "e"   
06EA   CA 77 07               JP   z,let_   
06ED   FE 74                  CP   "t"   
06EF   CA E2 04               JP   z,lt_   
06F2   0B                     DEC   bc   
06F3   C3 02 05               JP   var_   
06F6                M:           
06F6   03                     INC   bc   
06F7   0A                     LD   a,(bc)   
06F8   FE 61                  CP   "a"   
06FA   CA 77 07               JP   z,map_   
06FD   FE 75                  CP   "u"   
06FF   CA 86 04               JP   z,mul_   
0702   0B                     DEC   bc   
0703   C3 02 05               JP   var_   
0706                N:           
0706   03                     INC   bc   
0707   0A                     LD   a,(bc)   
0708   FE 65                  CP   "e"   
070A   CA C1 04               JP   z,neg_   
070D   0B                     DEC   bc   
070E   C3 02 05               JP   var_   
0711                O:           
0711   03                     INC   bc   
0712   0A                     LD   a,(bc)   
0713   FE 76                  CP   "v"   
0715   CA 8C 04               JP   z,over_   
0718   FE 72                  CP   "r"   
071A   CA 2A 04               JP   z,or_   
071D   0B                     DEC   bc   
071E   C3 02 05               JP   var_   
0721                P:           
0721   03                     INC   bc   
0722   0A                     LD   a,(bc)   
0723   FE 72                  CP   "r"   
0725   CA 77 07               JP   z,print_   
0728   0B                     DEC   bc   
0729   C3 02 05               JP   var_   
072C                R:           
072C   03                     INC   bc   
072D   0A                     LD   a,(bc)   
072E   FE 6F                  CP   "o"   
0730   CA 9C 04               JP   z,rot_   
0733   0B                     DEC   bc   
0734   C3 02 05               JP   var_   
0737                S:           
0737   03                     INC   bc   
0738   0A                     LD   a,(bc)   
0739   FE 63                  CP   "c"   
073B   CA 77 07               JP   z,scan_   
073E   FE 65                  CP   "e"   
0740   CA 77 07               JP   z,set_   
0743   FE 68                  CP   "h"   
0745   CA 77 07               JP   z,shift_   
0748   FE 75                  CP   "u"   
074A   CA C7 04               JP   z,sub_   
074D   FE 77                  CP   "w"   
074F   CA BB 04               JP   z,swap_   
0752   0B                     DEC   bc   
0753   C3 02 05               JP   var_   
0756                U:           
0756   03                     INC   bc   
0757   0A                     LD   a,(bc)   
0758   FE 6E                  CP   "n"   
075A   CA 5C 04               JP   z,undrop_   
075D   0B                     DEC   bc   
075E   C3 02 05               JP   var_   
0761                W:           
0761   03                     INC   bc   
0762   0A                     LD   a,(bc)   
0763   FE 68                  CP   "h"   
0765   CA 77 07               JP   z,while_   
0768   0B                     DEC   bc   
0769   C3 02 05               JP   var_   
076C                X:           
076C   03                     INC   bc   
076D   0A                     LD   a,(bc)   
076E   FE 78                  CP   "x"   
0770   CA 33 04               JP   z,xor_   
0773   0B                     DEC   bc   
0774   C3 02 05               JP   var_   
0777                CASE_:       
0777                CLOSURE_:      
0777                DEF_:        
0777                FILTER_:      
0777                GET_:        
0777                IF_:         
0777                LET_:        
0777                MAP_:        
0777                PRINT_:      
0777                SCAN_:       
0777                SET_:        
0777                SHIFT_:      
0777                WHILE_:      
0777   C3 3C 03               JP   next   
077A                             ;*******************************************************************
077A                             ; Page 5 primitive routines continued
077A                             ;*******************************************************************
077A                             ; ********************************************************************
077A                             ; 16-bit multiply
077A                MUL:         ;=19
077A   D1                     POP   de   ; get first value
077B   E1                     POP   hl   
077C   C5                     PUSH   bc   ; Preserve the IP
077D   44                     LD   b,h   ; bc = 2nd value
077E   4D                     LD   c,l   
077F   21 00 00               LD   hl,0   
0782   3E 10                  LD   a,16   
0784                MUL2:        
0784   29                     ADD   hl,hl   
0785   CB 13                  RL   e   
0787   CB 12                  RL   d   
0789   30 04                  JR   nc,$+6   
078B   09                     ADD   hl,bc   
078C   30 01                  JR   nc,$+3   
078E   13                     INC   de   
078F   3D                     DEC   a   
0790   20 F2                  JR   nz,mul2   
0792   C1                     POP   bc   ; Restore the IP
0793   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0794   C3 3C 03               JP   next   
0797                             ;*******************************************************************
0797                             ; Subroutines
0797                             ;*******************************************************************
0797                PROMPT:      
0797   CD 93 03               CALL   printStr   
079A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
079F   C9                     RET      
07A0                PUTSTR0:      
07A0   CD 85 00               CALL   putchar   
07A3   23                     INC   hl   
07A4                PUTSTR:      
07A4   7E                     LD   a,(hl)   
07A5   B7                     OR   a   
07A6   20 F8                  JR   nz,putStr0   
07A8   C9                     RET      
07A9                RPUSH:       
07A9   DD 2B                  DEC   ix   
07AB   DD 74 00               LD   (ix+0),h   
07AE   DD 2B                  DEC   ix   
07B0   DD 75 00               LD   (ix+0),l   
07B3   C9                     RET      
07B4                RPOP:        
07B4   DD 6E 00               LD   l,(ix+0)   
07B7   DD 23                  INC   ix   
07B9   DD 66 00               LD   h,(ix+0)   
07BC   DD 23                  INC   ix   
07BE                RPOP2:       
07BE   C9                     RET      
07BF                CRLF:        
07BF   CD 93 03               CALL   printStr   
07C2   0D 0A 00               .CSTR   "\r\n"   
07C5   C9                     RET      
07C6                             ;*******************************************************************
07C6                             ;*******************************************************************
07C6                NUM:         
07C6   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C9   0A                     LD   a,(bc)   ; Get numeral or -
07CA   FE 2D                  CP   "-"   
07CC   20 01                  JR   nz,num0   
07CE   03                     INC   bc   ; no flags are affected
07CF                NUM0:        
07CF   08                     EX   af,af'   ; save zero flag = 0 for later
07D0                NUM1:        
07D0   0A                     LD   a,(bc)   
07D1   D6 30                  SUB   30h   
07D3   38 0E                  JR   c,num2   ; not a number, exit loop
07D5   03                     INC   bc   
07D6   54                     LD   d,h   
07D7   5D                     LD   e,l   
07D8   29                     ADD   hl,hl   
07D9   29                     ADD   hl,hl   
07DA   19                     ADD   hl,de   
07DB   29                     ADD   hl,hl   
07DC   85                     ADD   a,l   
07DD   6F                     LD   l,a   
07DE   30 F0                  JR   nc,num1   
07E0   24                     INC   h   
07E1   18 ED                  JR   num1   
07E3                NUM2:        
07E3   0B                     DEC   bc   
07E4   08                     EX   af,af'   ; restore zero flag
07E5   20 07                  JR   nz,num3   
07E7   EB                     EX   de,hl   ; negate the value of hl
07E8   21 00 00               LD   hl,0   
07EB   B7                     OR   a   ; jump to sub2
07EC   ED 52                  SBC   hl,de   
07EE                NUM3:        
07EE   E5                     PUSH   hl   ; Put the number on the stack
07EF   C3 3C 03               JP   next   ; and process the next character
07F2                HEXNUM:      ; 
07F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
07F5                HEXNUM1:      
07F5   03                     INC   bc   
07F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
07F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
07F9   28 02                  JR   z,hexnum2   ; no a decimal
07FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
07FD                HEXNUM2:      
07FD   D6 30                  SUB   $30   ; Form decimal digit
07FF   DA E3 07               JP   c,num2   
0802   FE 10                  CP   $0F+1   
0804   D2 E3 07               JP   nc,num2   
0807   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0808   29                     ADD   hl,hl   ; 4X
0809   29                     ADD   hl,hl   ; 8X
080A   29                     ADD   hl,hl   ; 16X
080B   85                     ADD   a,l   ; add into bottom of hl
080C   6F                     LD   l,a   ; 
080D   18 E6                  JR   hexnum1   
080F                PRTDEC:      ;=34 ; removes leading zeros
080F                             ; ld a,h
080F                             ; or l
080F                             ; ld a, "0"
080F                             ; jp z, putchar
080F   CB 7C                  BIT   7,h   
0811   28 0B                  JR   z,prtdec0   
0813   3E 2D                  LD   a,"-"   
0815   CD 85 00               CALL   putchar   
0818   AF                     XOR   a   
0819   95                     SUB   l   
081A   6F                     LD   l,a   
081B   9F                     SBC   a,a   
081C   94                     SUB   h   
081D   67                     LD   h,a   
081E                PRTDEC0:      
081E   C5                     PUSH   bc   
081F   0E 00                  LD   c,0   ; leading zeros flag = false
0821   11 F0 D8               LD   de,-10000   
0824   CD 40 08               CALL   prtdec1   
0827   11 18 FC               LD   de,-1000   
082A   CD 40 08               CALL   prtdec1   
082D   11 9C FF               LD   de,-100   
0830   CD 40 08               CALL   prtdec1   
0833   1E F6                  LD   e,-10   
0835   CD 40 08               CALL   prtdec1   
0838   0C                     INC   c   ; flag = true for at least digit
0839   1E FF                  LD   e,-1   
083B   CD 40 08               CALL   prtdec1   
083E   C1                     POP   bc   
083F   C9                     RET      
0840                PRTDEC1:      
0840   06 2F                  LD   b,"0"-1   
0842                PRTDEC2:      
0842   04                     INC   b   
0843   19                     ADD   hl,de   
0844   38 FC                  JR   c,prtdec2   
0846   ED 52                  SBC   hl,de   
0848   3E 30                  LD   a,"0"   
084A   B8                     CP   b   
084B   20 05                  JR   nz,prtdec3   
084D   AF                     XOR   a   
084E   B1                     OR   c   
084F   C8                     RET   z   
0850   18 01                  JR   prtdec4   
0852                PRTDEC3:      
0852   0C                     INC   c   
0853                PRTDEC4:      
0853   78                     LD   a,b   
0854   C3 85 00               JP   putchar   
0857                             ; 
0857                PRTHEX:      
0857                             ; Display hl as a 16-bit number in hex.
0857   C5                     PUSH   bc   ; preserve the IP
0858   7C                     LD   a,h   
0859   CD 62 08               CALL   prthex2   
085C   7D                     LD   a,l   
085D   CD 62 08               CALL   prthex2   
0860   C1                     POP   bc   
0861   C9                     RET      
0862                PRTHEX2:      
0862   4F                     LD   c,a   
0863   1F                     RRA      
0864   1F                     RRA      
0865   1F                     RRA      
0866   1F                     RRA      
0867   CD 6B 08               CALL   prthex3   
086A   79                     LD   a,c   
086B                PRTHEX3:      
086B   E6 0F                  AND   0x0F   
086D   C6 90                  ADD   a,0x90   
086F   27                     DAA      
0870   CE 40                  ADC   a,0x40   
0872   27                     DAA      
0873   C3 85 00               JP   putchar   
0876                             ; 
0876                ARG:         
0876   03                     INC   bc   ; get next char
0877   0A                     LD   a,(bc)   
0878   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
087A   E6 07                  AND   $07   ; mask
087C   87                     ADD   a,a   ; double
087D   6F                     LD   l,a   
087E   26 00                  LD   h,0   
0880   FD 5D                  LD   e,iyl   
0882   FD 54                  LD   d,iyh   
0884   EB                     EX   de,hl   
0885   B7                     OR   a   
0886   ED 52                  SBC   hl,de   
0888   2B                     DEC   hl   
0889   56                     LD   d,(hl)   
088A   2B                     DEC   hl   
088B   5E                     LD   e,(hl)   
088C   D5                     PUSH   de   
088D   C3 3C 03               JP   next   
0890                             ; 
0890                STRDEF:      
0890   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0894   D5                     PUSH   de   ; save start of string
0895   03                     INC   bc   ; point to next char
0896   18 03                  JR   strDef2   
0898                STRDEF1:      
0898   12                     LD   (de),a   
0899   13                     INC   de   ; increase count
089A   03                     INC   bc   ; point to next char
089B                STRDEF2:      
089B   0A                     LD   a,(bc)   
089C   FE 27                  CP   "'"   ; ' is the string terminator
089E   20 F8                  JR   nz,strDef1   
08A0   AF                     XOR   a   ; write null to terminate string
08A1   12                     LD   (de),a   
08A2   13                     INC   de   
08A3   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
08A7   C3 3C 03               JP   next   
08AA                NEWADD:      
08AA   C5                     PUSH   bc   ; push interpreter pointer
08AB   FD 56 FF               LD   d,(iy-1)   
08AE   FD 5E FE               LD   e,(iy-2)   
08B1   FD 66 FD               LD   h,(iy-3)   
08B4   FD 6E FC               LD   l,(iy-4)   
08B7   FD E5                  PUSH   iy   ; push base pointer
08B9   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
08BD   FD 39                  ADD   iy,sp   
08BF   19                     ADD   hl,de   
08C0   E5                     PUSH   hl   
08C1   FD 46 FD               LD   b,(iy-3)   ; return from routine
08C4   FD 4E FC               LD   c,(iy-4)   
08C7   D9                     EXX      ; preserve bc
08C8   FD 54                  LD   d,iyh   ; de = BP
08CA   FD 5D                  LD   e,iyl   ; 
08CC   62 6B                  LD   hl,de   ; hl = BP
08CE   B7                     OR   a   ; bc = diff in bytes
08CF   ED 72                  SBC   HL,SP   ; 
08D1   44 4D                  LD   bc,hl   ; 
08D3   EB                     EX   de,hl   ; hl = BP
08D4   FD 56 FF               LD   d,(iy-1)   ; old BP in DE
08D7   FD 5E FE               LD   e,(iy-2)   
08DA   ED B8                  LDDR      ; de decremented past
08DC   EB                     EX   de,hl   ; sp = de
08DD   F9                     LD   sp,hl   
08DE   D9                     EXX      ; restore bc
08DF   C3 3C 03               JP   next   
08E2                NEWADD2:      
08E2   C5                     PUSH   bc   ; push IP
08E3   FD 56 FF               LD   d,(iy-1)   
08E6   FD 5E FE               LD   e,(iy-2)   
08E9   FD 66 FD               LD   h,(iy-3)   
08EC   FD 6E FC               LD   l,(iy-4)   
08EF   FD E5                  PUSH   iy   ; push base pointer
08F1   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
08F5   FD 39                  ADD   iy,sp   
08F7   19                     ADD   hl,de   ; hl = hl + de
08F8   EB                     EX   de,hl   ; de = result
08F9   E1                     POP   hl   ; hl = old BP
08FA   C1                     POP   bc   ; bc = IP
08FB   F9                     LD   sp,hl   ; sp = old BP
08FC   D5                     PUSH   de   ; push result
08FD   C3 3C 03               JP   next   
0900                GO:          ;\^
0900   D1                     POP   de   
0901                GO1:         
0901   7A                     LD   a,d   ; skip if destination address is null
0902   B3                     OR   e   
0903   28 0E                  JR   z,go3   
0905   60 69                  LD   hl,bc   
0907   03                     INC   bc   ; read next char from source
0908   0A                     LD   a,(bc)   ; if ; to tail call optimise
0909   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
090B   28 03                  JR   z,go2   
090D   CD A9 07               CALL   rpush   ; save Instruction Pointer
0910                GO2:         
0910   42 4B                  LD   bc,de   
0912   0B                     DEC   bc   
0913                GO3:         
0913   C3 3C 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000                          ;*Macro unroll:  test "1 2 +", 3
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 45 03               CALL   init   
4006   CD 89 03               CALL   enter   
4009   31 20 32 20 2B 00      .CSTR   "1 2 +"   
400F                          ;*Macro unroll:  expect "1 2 +",3
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 03 00               LD   DE,3   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 2E                  JR   Z,expectM_0_2056S31   
401B   CD 4E 06               CALL   prtstr   
401E   31 20 32 20 2B 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "1 2 +","\r\nActual: "   
402E   CD 0F 08               CALL   prtdec   
4031   CD 4E 06               CALL   prtstr   
4034   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4041   21 03 00               LD   HL,3   
4044   CD 0F 08               CALL   prtdec   
4047   76                     HALT      
4048   00                     .CSTR      
4049                EXPECTM_0_2056S31:      
4049   E1                     POP   HL   
404A                             ; 
404A                             ; test "'A' @", 65
404A                             ; test "10 $1", 10
404A                             ; test "10 20 $1", 10
404A                             ; test "10 20 $2", 20
404A                             ; test "10 20 30 $3", 30
404A                             ; 
404A                             ; test "1", 1
404A                             ; test "0", 0
404A                             ; test "10", 10
404A                             ; test "123", 123
404A                             ; test "$10", $10
404A                             ; test "$FF", $FF
404A                             ; test "2 3 =", 0
404A                             ; test "3 3 =", 1
404A                             ; test "2 3 <", 1
404A                             ; test "3 3 <", 0
404A                             ; test "3 3 >", 0
404A                             ; test "4 3 >", 1
404A                             ; test "1 2 +", 3
404A                             ; test "123 456 +", 123+456
404A                             ; test "64 128 +", 64+128
404A                             ; test "5 3 -", 2
404A                             ; test "3 5 &", 1
404A                             ; test "3 5 |", 7
404A                             ; test "2 3 *", 6
404A                             ; test "1 2 3 + *", 5
404A                             ; 
404A                             ; ; test "1 2 3 ' +", 3
404A                             ; ; test "1_ 2 +",1
404A                             ; ; test "1_ 1 +",0
404A                             ; ; call enter
404A                             ; ;     .cstr "1 3",$22,"+"
404A                             ; ; expect "1 3 DUP +", 6
404A                             ; 
404A                             ; ; test "5 2/'", 2
404A                             ; ; test "3 5$ -", 2
404A                             ; ; test "5 2/$ '", 1
404A                             ; ; test "2 3%++", 7
404A                             ; ; test "1 2 3~''", 2
404A                             ; ; test "1 2 3~+*", 8
404A                             ; ; test "2a!a@",2
404A                             ; ; test "3x! 1 x@+x! x@", 4
404A                             ; ; test "3x! 1_ x@+x! x@", 2
404A                             ; 
404A                             ; 
404A                             ; 
404A                             ; ; test "1{", 2
404A                             ; ; test "1}", 0
404A                             ; ; test "2}", 1
404A                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
404A                             ; ; test "(2) \\^", 2
404A                             ; ; test ":X1; X", 1
404A                             ; ; test ":A100;A", 100
404A                             ; ; test ":Aa!; 3A a@", 3
404A                             ; ; test ":Aa!;:Ba@;4AB", 4
404A                             ; ; test "[]$ '", 0
404A                             ; ; test "[3]$ '", 1
404A                             ; ; test "[3]'@", 3
404A                             ; ; test "[1 2 3]'@", 1
404A                             ; ; test "[1 2 3]'2+@", 2
404A                             ; ; test "\\h@[1]''\\h@$-", 2
404A                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
404A                             ; ; test "\\[]$ '", 0
404A                             ; ; test "\\[3]'\\@", 3
404A                             ; ; test "\\[3]$ '", 1
404A                             ; ; test "\\[1 2 3]'\\@", 1
404A                             ; ; test "\\[1 2 3]'1+\\@", 2
404A                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
404A                             ; ; test "\\h@\\[1]''\\h@$-", 1
404A                             ; ; test "\\`A`\\@",65
404A                             ; ; test "0 0(1+)", 0
404A                             ; ; test "0 1(1+)", 1
404A                             ; ; test "0 2(1+)", 2
404A                             ; ; test "0 1(0(1+))", 0
404A                             ; ; test "0 1(1(1+))", 1
404A                             ; ; test "0 2(1(1+))", 2
404A                             ; ; test "0 2(2(1+))", 4
404A                             ; ; test "0 1(\\i@+)", 0
404A                             ; ; test "0 2(\\i@+)", 1
404A                             ; ; test "0 3(\\i@+)", 3
404A                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
404A                             ; ; test "0t! 10(1 t@+t!) t@",10
404A                             ; ; test "0(100)(200)",200
404A                             ; ; test "1(100)(200)",100
404A                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
404A                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
404A                             ; ; test ":X10;\\0X", 10
404A                             ; ; test "2 \\1x! \\1x@", 2
404A                             ; 
404A   CD 93 03               CALL   printStr   
404D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4053   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 421 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 451 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 872 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 519 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 48 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 53 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
IOPCODES:           0190 DEFINED AT LINE 65 IN Siena.asm
                    > USED AT LINE 523 IN Siena.asm
ETX:                02A6 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 734 IN Siena.asm
ETX1:               02AF DEFINED AT LINE 381 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
START:              02B1 DEFINED AT LINE 384 IN Siena.asm
INTERPRET:          02C7 DEFINED AT LINE 390 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
INTERPRET2:         02D1 DEFINED AT LINE 396 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
INTERPRET3:         02D9 DEFINED AT LINE 403 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
INTERPRET4:         02DF DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
WAITCHAR:           02E4 DEFINED AT LINE 420 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
MACRO:              02F3 DEFINED AT LINE 429 IN Siena.asm
MACRO1:             030A DEFINED AT LINE 442 IN Siena.asm
                    > USED AT LINE 437 IN Siena.asm
WAITCHAR1:          0310 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
WAITCHAR3:          031E DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
WAITCHAR4:          0334 DEFINED AT LINE 471 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
NEXT:               033C DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
                    > USED AT LINE 657 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
                    > USED AT LINE 732 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
                    > USED AT LINE 879 IN Siena.asm
                    > USED AT LINE 931 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
INIT:               0345 DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 28
INITOPS:            0365 DEFINED AT LINE 522 IN Siena.asm
INITOPS1:           036E DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 548 IN Siena.asm
INITOPS2:           037E DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
INITOPS2A:          0383 DEFINED AT LINE 544 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
ENTER:              0389 DEFINED AT LINE 550 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 29
PRINTSTR:           0393 DEFINED AT LINE 557 IN Siena.asm
                    > USED AT LINE 387 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 110
LOOKUPREF:          039A DEFINED AT LINE 564 IN Siena.asm
LOOKUPREF0:         039C DEFINED AT LINE 566 IN Siena.asm
LOOKUPREF1:         03A0 DEFINED AT LINE 569 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
LOOKUPREF2:         03A6 DEFINED AT LINE 573 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
LOOKUPREF3:         03AA DEFINED AT LINE 576 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
NESTING:            03B8 DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 407 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
NESTING1A:          03C3 DEFINED AT LINE 606 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
NESTING1:           03C6 DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
NESTING2:           03D5 DEFINED AT LINE 618 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
                    > USED AT LINE 615 IN Siena.asm
NESTING3:           03D7 DEFINED AT LINE 621 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
NESTING4:           03E2 DEFINED AT LINE 628 IN Siena.asm
                    > USED AT LINE 623 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 636 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 638 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 640 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 642 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 644 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 646 IN Siena.asm
GO_:                040F DEFINED AT LINE 648 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
DOT_:               0412 DEFINED AT LINE 651 IN Siena.asm
DOT2:               0416 DEFINED AT LINE 654 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
AND_:               041E DEFINED AT LINE 659 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
AND1:               0425 DEFINED AT LINE 667 IN Siena.asm
                    > USED AT LINE 681 IN Siena.asm
                    > USED AT LINE 692 IN Siena.asm
OR_:                042A DEFINED AT LINE 673 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
XOR_:               0433 DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
XOR1:               0434 DEFINED AT LINE 685 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
INV_:               043C DEFINED AT LINE 694 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
ADD_:               0441 DEFINED AT LINE 698 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
CALL_:              0448 DEFINED AT LINE 705 IN Siena.asm
HDOT_:              0452 DEFINED AT LINE 714 IN Siena.asm
DROP_:              0458 DEFINED AT LINE 719 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
UNDROP_:            045C DEFINED AT LINE 723 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
DUP_:               0461 DEFINED AT LINE 728 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
ETX_:               0467 DEFINED AT LINE 733 IN Siena.asm
EXIT_:              046A DEFINED AT LINE 736 IN Siena.asm
FETCH_:             0474 DEFINED AT LINE 744 IN Siena.asm
FETCH1:             0475 DEFINED AT LINE 746 IN Siena.asm
KEY_:               047C DEFINED AT LINE 754 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
MUL_:               0486 DEFINED AT LINE 761 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
NOP_:               0489 DEFINED AT LINE 763 IN Siena.asm
OVER_:              048C DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
RET_:               0494 DEFINED AT LINE 775 IN Siena.asm
ROT_:               049C DEFINED AT LINE 780 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
SHL_:               04A4 DEFINED AT LINE 789 IN Siena.asm
SHR_:               04AA DEFINED AT LINE 796 IN Siena.asm
SHR1:               04AB DEFINED AT LINE 798 IN Siena.asm
STORE_:             04B3 DEFINED AT LINE 804 IN Siena.asm
SWAP_:              04BB DEFINED AT LINE 812 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
NEG_:               04C1 DEFINED AT LINE 818 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
SUB_:               04C7 DEFINED AT LINE 823 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
SUB2:               04C9 DEFINED AT LINE 826 IN Siena.asm
                    > USED AT LINE 821 IN Siena.asm
EQ_:                04D0 DEFINED AT LINE 832 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
FALSE_:             04D7 DEFINED AT LINE 838 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
                    > USED AT LINE 855 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
GT_:                04DE DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
LT_:                04E2 DEFINED AT LINE 848 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
LT1:                04E4 DEFINED AT LINE 851 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
TRUE_:              04EC DEFINED AT LINE 856 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
GTE_:               04F3 DEFINED AT LINE 861 IN Siena.asm
LTE_:               04F7 DEFINED AT LINE 865 IN Siena.asm
LTE1:               04F9 DEFINED AT LINE 868 IN Siena.asm
                    > USED AT LINE 864 IN Siena.asm
VAR_:               0502 DEFINED AT LINE 875 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
LAMBDA_:            050A DEFINED AT LINE 881 IN Siena.asm
A_:                 050C DEFINED AT LINE 884 IN Siena.asm
C_:                 050F DEFINED AT LINE 886 IN Siena.asm
D_:                 0512 DEFINED AT LINE 888 IN Siena.asm
E_:                 0515 DEFINED AT LINE 890 IN Siena.asm
F_:                 0518 DEFINED AT LINE 892 IN Siena.asm
G_:                 051B DEFINED AT LINE 894 IN Siena.asm
I_:                 051E DEFINED AT LINE 896 IN Siena.asm
K_:                 0521 DEFINED AT LINE 898 IN Siena.asm
L_:                 0524 DEFINED AT LINE 900 IN Siena.asm
M_:                 0527 DEFINED AT LINE 902 IN Siena.asm
N_:                 052A DEFINED AT LINE 904 IN Siena.asm
O_:                 052D DEFINED AT LINE 906 IN Siena.asm
P_:                 0530 DEFINED AT LINE 908 IN Siena.asm
R_:                 0533 DEFINED AT LINE 910 IN Siena.asm
S_:                 0536 DEFINED AT LINE 912 IN Siena.asm
U_:                 0539 DEFINED AT LINE 914 IN Siena.asm
W_:                 053C DEFINED AT LINE 916 IN Siena.asm
X_:                 053F DEFINED AT LINE 918 IN Siena.asm
DIV_:               0542 DEFINED AT LINE 921 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
LAMBDA:             0548 DEFINED AT LINE 933 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
LAMBDA1:            054E DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 943 IN Siena.asm
LAMBDA2:            0556 DEFINED AT LINE 944 IN Siena.asm
DIV:                055E DEFINED AT LINE 962 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
DIV1:               0568 DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
DIV2:               0575 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
DIV3:               0576 DEFINED AT LINE 983 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
DIV4:               057B DEFINED AT LINE 988 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 1001 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 1003 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 1006 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 1021 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 1027 IN Siena.asm
EXEC_:              0623 DEFINED AT LINE 1033 IN Siena.asm
EXEC1:              0629 DEFINED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
PROMPT_:            062C DEFINED AT LINE 1041 IN Siena.asm
INPORT_:            0632 DEFINED AT LINE 1046 IN Siena.asm
NEWLN_:             063E DEFINED AT LINE 1056 IN Siena.asm
OUTPORT_:           0644 DEFINED AT LINE 1060 IN Siena.asm
PRTSTR_:            064E DEFINED AT LINE 1069 IN Siena.asm
PRTSTR:             064E DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 11
                    > USED AT LINE 15
RPUSH_:             0655 DEFINED AT LINE 1076 IN Siena.asm
RPOP_:              065C DEFINED AT LINE 1081 IN Siena.asm
A:                  0663 DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 404 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
                    > USED AT LINE 432 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
                    > USED AT LINE 436 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
                    > USED AT LINE 466 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 584 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
                    > USED AT LINE 665 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 869 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 7
C:                  0673 DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 979 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
D:                  0683 DEFINED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 438 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 665 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 889 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
E:                  069D DEFINED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
                    > USED AT LINE 434 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
                    > USED AT LINE 604 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 619 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 807 IN Siena.asm
                    > USED AT LINE 891 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
F:                  06A8 DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 893 IN Siena.asm
G:                  06B3 DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 895 IN Siena.asm
I:                  06C8 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 897 IN Siena.asm
K:                  06D8 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 899 IN Siena.asm
L:                  06E6 DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 432 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 663 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
                    > USED AT LINE 677 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 901 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 7
M:                  06F6 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 855 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
                    > USED AT LINE 903 IN Siena.asm
N:                  0706 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 905 IN Siena.asm
O:                  0711 DEFINED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 907 IN Siena.asm
P:                  0721 DEFINED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 909 IN Siena.asm
R:                  072C DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 911 IN Siena.asm
S:                  0737 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
U:                  0756 DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 915 IN Siena.asm
W:                  0761 DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 917 IN Siena.asm
X:                  076C DEFINED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
CASE_:              0777 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
CLOSURE_:           0777 DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
DEF_:               0777 DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
FILTER_:            0777 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
GET_:               0777 DEFINED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
IF_:                0777 DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
LET_:               0777 DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
MAP_:               0777 DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
PRINT_:             0777 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
SCAN_:              0777 DEFINED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
SET_:               0777 DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
SHIFT_:             0777 DEFINED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
WHILE_:             0777 DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
MUL:                077A DEFINED AT LINE 1286 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
MUL2:               0784 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
PROMPT:             0797 DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
PUTSTR0:            07A0 DEFINED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1325 IN Siena.asm
PUTSTR:             07A4 DEFINED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
RPUSH:              07A9 DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 552 IN Siena.asm
                    > USED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
RPOP:               07B4 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 739 IN Siena.asm
                    > USED AT LINE 776 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
RPOP2:              07BE DEFINED AT LINE 1340 IN Siena.asm
CRLF:               07BF DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
NUM:                07C6 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
NUM0:               07CF DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
NUM1:               07D0 DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
NUM2:               07E3 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
NUM3:               07EE DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
HEXNUM:             07F2 DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
HEXNUM1:            07F5 DEFINED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
HEXNUM2:            07FD DEFINED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
PRTDEC:             080F DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
                    > USED AT LINE 13
                    > USED AT LINE 18
PRTDEC0:            081E DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
PRTDEC1:            0840 DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
PRTDEC2:            0842 DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
PRTDEC3:            0852 DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
PRTDEC4:            0853 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
PRTHEX:             0857 DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
PRTHEX2:            0862 DEFINED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
PRTHEX3:            086B DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
ARG:                0876 DEFINED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
STRDEF:             0890 DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
STRDEF1:            0898 DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
STRDEF2:            089B DEFINED AT LINE 1519 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
NEWADD:             08AA DEFINED AT LINE 1529 IN Siena.asm
NEWADD2:            08E2 DEFINED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
GO:                 0900 DEFINED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
GO1:                0901 DEFINED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
GO2:                0910 DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
GO3:                0913 DEFINED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 400 IN Siena.asm
                    > USED AT LINE 447 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 509 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 54 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 380 IN Siena.asm
                    > USED AT LINE 385 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 27
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 524 IN Siena.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 431 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 511 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 443 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 935 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 61 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
EXPECTM_0_2056S31:  4049 DEFINED AT LINE 22
                    > USED AT LINE 9
