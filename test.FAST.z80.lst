0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD E7 07               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   DA                     DB   lsb(nop_)   ; SP
0221   A7                     DB   lsb(not_)   ; !
0222   DA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   DA                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   DA                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   C2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   DA                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   AC                     DB   lsb(eq_)   ; =
023E   B1                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   D1                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   DA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1B 04               JP   num   
0303                HEXNUM_:      
0303   C3 4B 04               JP   hexnum   
0306                ARG_:        
0306   C3 9E 04               JP   arg   
0309                PROP_:       
0309   C3 BC 04               JP   prop   
030C                STRING_:      
030C   C3 68 04               JP   string   
030F                PAREN_:      
030F   C3 96 04               JP   paren   
0312                PARENEND_:      
0312   C3 98 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD 64 07               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 87 07               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 1C 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 BF 04               JP   get1   
034C                BLOCK_:      
034C   C3 9A 04               JP   block   
034F                BLOCKEND_:      
034F   C3 9C 04               JP   blockend   
0352                CHAR_:       
0352   C3 81 04               JP   char   
0355                ARRAY_:      
0355   C3 02 05               JP   array   
0358                ARRAYEND_:      
0358   C3 04 05               JP   arrayEnd   
035B                IDENT_:      
035B   C3 D6 05               JP   ident   
035E                SYMBOL_:      
035E   C3 AF 05               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD 64 07               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 FF 03               JP   mul   
0393                SUB_:        ; negative sign or subtract
0393   03                     INC   bc   ; check if sign of a number
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 30                  CP   "0"   
0398   38 05                  JR   c,sub1   
039A   FE 3A                  CP   "9"+1   
039C   DA 00 03               JP   c,num_   
039F                SUB1:        ; Subtract the value 2nd on stack from top of stack
039F   D1                     POP   de   
03A0   E1                     POP   hl   ; Entry point for INVert
03A1                SUB2:        
03A1   B7                     OR   a   ; Entry point for NEGate
03A2   ED 52                  SBC   hl,de   
03A4   E5                     PUSH   hl   
03A5   DD E9                  JP   (ix)   
03A7                NOT_:        ; logical invert, any non zero value
03A7   21 00 00               LD   hl,0   ; is considered true
03AA   18 01                  JR   eq1   
03AC                EQ_:         
03AC   E1                     POP   hl   
03AD                EQ1:         
03AD   D1                     POP   de   
03AE   C3 2F 06               JP   equals   
03B1                GT_:         
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 02                  JR   lt1   
03B5                LT_:         
03B5   E1                     POP   hl   
03B6   D1                     POP   de   
03B7                LT1:         
03B7   03                     INC   bc   
03B8   0A                     LD   a,(bc)   
03B9   FE 3D                  CP   "="   
03BB   CA 37 06               JP   z,lessthaneq   
03BE   0B                     DEC   bc   
03BF   C3 3C 06               JP   lessthan   
03C2                DIV_:        
03C2   D1                     POP   de   ; get first value
03C3   E1                     POP   hl   ; get 2nd value
03C4   C5                     PUSH   bc   ; preserve the IP
03C5   44 4D                  LD   bc,hl   
03C7   CD D9 06               CALL   divide   
03CA   22 98 18               LD   (vFrac),hl   
03CD   C1                     POP   bc   
03CE   D5                     PUSH   de   ; push result
03CF   DD E9                  JP   (ix)   
03D1                COMMENT_:      
03D1   03                     INC   bc   ; point to next char
03D2   0A                     LD   a,(bc)   
03D3   FE 20                  CP   " "   ; terminate on any char less than SP
03D5   30 FA                  JR   nc,comment_   
03D7   0B                     DEC   bc   
03D8   DD E9                  JP   (ix)   
03DA                NOP_:        
03DA   DD E9                  JP   (ix)   
03DC                             ;*******************************************************************
03DC                             ; word operators
03DC                             ;*******************************************************************
03DC                             ; shl
03DC                             ; value count -- value2          shift left count places
03DC                SHL:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 01                  JR   shl2   
03E4                SHL1:        
03E4   29                     ADD   hl,hl   ; left shift hl
03E5                SHL2:        
03E5   10 FD                  DJNZ   shl1   
03E7   E5                     PUSH   hl   
03E8   42 4B                  LD   bc,de   ; restore IP
03EA   DD E9                  JP   (ix)   
03EC                             ; shr
03EC                             ; value count -- value2          shift left count places
03EC                SHR:         
03EC   50 59                  LD   de,bc   ; save IP
03EE   C1                     POP   bc   ; bc = count
03EF   41                     LD   b,c   ; b = loop counter
03F0   E1                     POP   hl   
03F1   04                     INC   b   ; test for counter=0 case
03F2   18 04                  JR   shr2   
03F4                SHR1:        
03F4   CB 3C                  SRL   h   ; right shift hl
03F6   CB 1D                  RR   l   
03F8                SHR2:        
03F8   10 FA                  DJNZ   shr1   
03FA   E5                     PUSH   hl   
03FB   42 4B                  LD   bc,de   ; restore IP
03FD   DD E9                  JP   (ix)   
03FF                MUL:         ;=19
03FF   D1                     POP   de   ; get first value
0400   E1                     POP   hl   
0401   C5                     PUSH   bc   ; Preserve the IP
0402   44                     LD   b,h   ; bc = 2nd value
0403   4D                     LD   c,l   
0404   21 00 00               LD   hl,0   
0407   3E 10                  LD   a,16   
0409                MUL2:        
0409   29                     ADD   hl,hl   
040A   CB 13                  RL   e   
040C   CB 12                  RL   d   
040E   30 04                  JR   nc,$+6   
0410   09                     ADD   hl,bc   
0411   30 01                  JR   nc,$+3   
0413   13                     INC   de   
0414   3D                     DEC   a   
0415   20 F2                  JR   nz,mul2   
0417   C1                     POP   bc   ; Restore the IP
0418   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0419   DD E9                  JP   (ix)   
041B                NUM:         
041B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041E   0A                     LD   a,(bc)   ; Get numeral or -
041F   FE 2D                  CP   "-"   
0421   20 01                  JR   nz,num0   
0423   03                     INC   bc   ; move to next char, no flags affected
0424                NUM0:        
0424   08                     EX   af,af'   ; save zero flag = 0 for later
0425                NUM1:        
0425   0A                     LD   a,(bc)   ; read digit
0426   D6 30                  SUB   "0"   ; less than 0?
0428   38 13                  JR   c,num2   ; not a digit, exit loop
042A   FE 0A                  CP   10   ; greater that 9?
042C   30 0F                  JR   nc,num2   ; not a digit, exit loop
042E   03                     INC   bc   ; inc IP
042F   54 5D                  LD   de,hl   ; multiply hl * 10
0431   29                     ADD   hl,hl   
0432   29                     ADD   hl,hl   
0433   19                     ADD   hl,de   
0434   29                     ADD   hl,hl   
0435   85                     ADD   a,l   ; add digit in a to hl
0436   6F                     LD   l,a   
0437   3E 00                  LD   a,0   
0439   8C                     ADC   a,h   
043A   67                     LD   h,a   
043B   18 E8                  JR   num1   
043D                NUM2:        
043D   0B                     DEC   bc   
043E   08                     EX   af,af'   ; restore zero flag
043F   20 07                  JR   nz,num3   
0441   EB                     EX   de,hl   ; negate the value of hl
0442   21 00 00               LD   hl,0   
0445   B7                     OR   a   ; jump to sub2
0446   ED 52                  SBC   hl,de   
0448                NUM3:        
0448   E5                     PUSH   hl   ; Put the number on the stack
0449   DD E9                  JP   (ix)   ; and process the next character
044B                HEXNUM:      ; 
044B   21 00 00               LD   hl,0   ; Clear hl to accept the number
044E                HEXNUM1:      
044E   03                     INC   bc   
044F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0450   CB 77                  BIT   6,a   ; is it uppercase alpha?
0452   28 02                  JR   z,hexnum2   ; no a decimal
0454   D6 07                  SUB   7   ; sub 7  to make $a - $F
0456                HEXNUM2:      
0456   D6 30                  SUB   $30   ; Form decimal digit
0458   DA 3D 04               JP   c,num2   
045B   FE 10                  CP   $0F+1   
045D   D2 3D 04               JP   nc,num2   
0460   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0461   29                     ADD   hl,hl   ; 4X
0462   29                     ADD   hl,hl   ; 8X
0463   29                     ADD   hl,hl   ; 16X
0464   85                     ADD   a,l   ; add into bottom of hl
0465   6F                     LD   l,a   ; 
0466   18 E6                  JR   hexnum1   
0468                             ; 
0468                STRING:      
0468   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
046C   D5                     PUSH   de   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   12                     LD   (de),a   
0471   13                     INC   de   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   12                     LD   (de),a   
047A   13                     INC   de   
047B   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
047F   DD E9                  JP   (ix)   
0481                CHAR:        
0481   21 00 00               LD   hl,0   ; if `` is empty
0484                CHAR1:       
0484   03                     INC   bc   ; point to next char
0485   0A                     LD   a,(bc)   
0486   FE 60                  CP   "`"   ; ` is the string terminator
0488   28 09                  JR   z,char3   
048A   FE 5C                  CP   $5c   ; \ is the escape
048C   20 02                  JR   nz,char2   
048E   03                     INC   bc   
048F   0A                     LD   a,(bc)   
0490                CHAR2:       
0490   6F                     LD   l,a   
0491   18 F1                  JR   char1   
0493                CHAR3:       
0493   E5                     PUSH   hl   
0494   DD E9                  JP   (ix)   
0496                PAREN:       
0496   DD E9                  JP   (ix)   
0498                             ;     ld ix,paren2
0498                             ;     jr block
0498                             ; paren2:
0498                             ;     ld ix,next
0498                             ;     jp exec
0498                PARENEND:      
0498   DD E9                  JP   (ix)   
049A                             ;     pop hl                      ; hl = last result
049A                             ;     pop de
049A                             ;     pop bc
049A                             ;     pop bc
049A                             ;     push hl
049A                             ;     ld iyh,d
049A                             ;     ld iyl,e
049A                             ;     ld ix,next
049A                             ;     jp (ix)
049A                BLOCK:       
049A   DD E9                  JP   (ix)   
049C                             ;     inc bc
049C                             ;     push bc                     ; return first opcode of block
049C                             ;     ld d,1                      ; nesting: count first parenthesis
049C                             ; block1:                         ; Skip to end of definition
049C                             ;     ld a,(bc)                   ; Get the next character
049C                             ;     inc bc                      ; Point to next character
049C                             ;     cp " " + 1                  ; ignore whitespace
049C                             ;     jr c,block1
049C                             ;     cp ")"
049C                             ;     jr z,block4
049C                             ;     cp "}"
049C                             ;     jr z,block4
049C                             ;     cp "]"
049C                             ;     jr z,block4
049C                             ;     cp "("
049C                             ;     jr z,block3
049C                             ;     cp "{"
049C                             ;     jr z,block3
049C                             ;     cp "["
049C                             ;     jr z,block3
049C                             ;     cp "'"
049C                             ;     jr z,block3
049C                             ;     cp "`"
049C                             ;     jr nz,block1
049C                             ; block2:
049C                             ;     inc d
049C                             ;     jr block1
049C                             ; block3:
049C                             ;     ld a,$80
049C                             ;     xor d
049C                             ;     ld b,a
049C                             ;     jr block1
049C                             ; block4:
049C                             ;     dec d
049C                             ;     jr nz, block1                 ; get the next element
049C                             ;     dec bc                      ; balanced, exit
049C                             ;     jp (ix)
049C                BLOCKEND:      
049C   DD E9                  JP   (ix)   
049E                             ;     pop hl                      ; hl = last result
049E                             ;     ld d,iyh                    ; de = BP
049E                             ;     ld e,iyl
049E                             ;     ex de,hl                    ; hl = BP, de = result
049E                             ;     ld sp,hl                    ; sp = BP
049E                             ;     pop hl                      ; hl = old BP
049E                             ;     pop bc                      ; pop SCP (discard)
049E                             ;     pop bc                      ; bc = IP
049E                             ;     ld sp,hl                    ; sp = old BP
049E                             ;     ld iy,0                     ; iy = sp
049E                             ;     add iy,sp
049E                             ;     push de                     ; push result
049E                             ;     jp (ix)
049E                             ; $1..9
049E                             ; returns value of arg
049E                ARG:         
049E   03                     INC   bc   ; get next char
049F   0A                     LD   a,(bc)   
04A0   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04A2   E6 0F                  AND   $0F   ; mask
04A4   87                     ADD   a,a   ; double
04A5   6F                     LD   l,a   ; hl = offset into args
04A6   26 00                  LD   h,0   
04A8   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04AB   FD 56 03               LD   d,(iy+3)   
04AE   EB                     EX   de,hl   ; hl = SCP - offset
04AF   B7                     OR   a   
04B0   ED 52                  SBC   hl,de   
04B2   2B                     DEC   hl   ; de = arg
04B3   22 9E 18               LD   (vSetter),hl   ; store address in setter
04B6   56                     LD   d,(hl)   
04B7   2B                     DEC   hl   
04B8   5E                     LD   e,(hl)   
04B9   D5                     PUSH   de   ; push arg
04BA   DD E9                  JP   (ix)   
04BC                             ; @1..9
04BC                             ; returns address of prop
04BC                PROP:        
04BC                             ;     inc bc                      ; get next char
04BC                             ;     ld a,(bc)
04BC                             ;     sub "1"                     ; treat as a digit, 1 based index
04BC                             ;     and $0F                     ; mask
04BC                             ;     add a,a                     ; double
04BC                             ;     ld l,a                      ; hl = offset into args
04BC                             ;     ld h,0
04BC                             ;     ld e,(iy+6)                 ; de = closure array
04BC                             ;     ld d,(iy+7)
04BC                             ;     add hl,de                   ; find address of prop in array
04BC                             ;     ld (vSetter),hl             ; store address in setter
04BC                             ;     ld e,(hl)
04BC                             ;     inc hl
04BC                             ;     ld d,(hl)
04BC                             ;     push de                     ; push prop value
04BC   DD E9                  JP   (ix)   
04BE                             ; addr -- value
04BE                DOLET:       
04BE                GET:         
04BE   E1                     POP   hl   
04BF                GET1:        
04BF   22 9E 18               LD   (vSetter),hl   ; store address in setter
04C2   16 00                  LD   d,0   
04C4   5E                     LD   e,(hl)   
04C5   3A 9A 18               LD   a,(vDataWidth)   
04C8   3D                     DEC   a   
04C9   28 02                  JR   z,get2   
04CB   23                     INC   hl   
04CC   56                     LD   d,(hl)   
04CD                GET2:        
04CD   D5                     PUSH   de   
04CE   DD E9                  JP   (ix)   
04D0                             ; newvalue -- oldvalue
04D0                SET:         
04D0   D1                     POP   de   ; new value
04D1   E1                     POP   hl   ; discard last accessed value
04D2   2A 9E 18               LD   hl,(vSetter)   
04D5   7E                     LD   a,(hl)   ; save lsb of old value
04D6   73                     LD   (hl),e   
04D7   5F                     LD   e,a   
04D8   3A 9A 18               LD   a,(vDataWidth)   
04DB   3D                     DEC   a   
04DC   28 04                  JR   z,set1   
04DE   23                     INC   hl   
04DF   7E                     LD   a,(hl)   ; save msb of old value
04E0   72                     LD   (hl),d   
04E1   57                     LD   d,a   
04E2                SET1:        
04E2   D5                     PUSH   de   ; return old value
04E3   DD E9                  JP   (ix)   
04E5                             ; ifte
04E5                             ; condition then -- value
04E5                IF:          
04E5   DD E9                  JP   (ix)   
04E7                             ; ld de,0                      ; NUL pointer for else
04E7                             ; jr ifte1
04E7                             ; ifte
04E7                             ; condition then else -- value
04E7                IFTE:        
04E7   DD E9                  JP   (ix)   
04E9                             ;     pop de                      ; de = else
04E9                             ; ifte1:
04E9                             ;     pop hl                      ; hl = then
04E9                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
04E9                             ;     inc hl                      ; check for true
04E9                             ;     ld a,h
04E9                             ;     or l
04E9                             ;     pop hl                      ; hl = then
04E9                             ;     jr z,ifte2
04E9                             ;     ex de,hl                    ; condition = false, hl = else
04E9                             ; ifte2:
04E9                             ;     ld a,h                      ; check if hl is NUL
04E9                             ;     or l
04E9                             ;     jr z,ifte3
04E9                             ;     push bc                     ; push IP
04E9                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
04E9                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
04E9                             ;     push de                     ; push SCP
04E9                             ;     push iy                     ; push BP
04E9                             ;     ld iy,0                     ; iy = sp
04E9                             ;     add iy,sp
04E9                             ;     ld bc,hl                    ; IP = then
04E9                             ;     dec bc
04E9                             ; ifte3:
04E9                             ;     jp (ix)
04E9                             ; switch
04E9                             ; index array -- value
04E9                SWITCH:      
04E9   D1                     POP   de   ; de = array
04EA   E1                     POP   hl   ; hl = index
04EB   29                     ADD   hl,hl   ; indec *= 2
04EC   19                     ADD   hl,de   ; add array[0]
04ED   4E                     LD   c,(hl)   ; bc = case
04EE   23                     INC   hl   
04EF   46                     LD   b,(hl)   
04F0   0B                     DEC   bc   
04F1   DD E9                  JP   (ix)   
04F3                             ; c b --
04F3                             ; loops until c = 0
04F3                LOOP:        
04F3   DD E9                  JP   (ix)   
04F5                             ;     pop de                      ; de = block                    c
04F5                             ;     pop hl                      ; hl = condition
04F5                             ;     push de
04F5                             ;     push bc                     ; push IP
04F5                             ;     ld bc,de                    ; bc = block
04F5                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
04F5                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
04F5                             ;     push de                     ; push SCP
04F5                             ;     push iy                     ; push BP
04F5                             ;     ld iy,0                     ; iy = sp
04F5                             ;     add iy,sp
04F5                             ; loop1:
04F5                             ;     ld a,l                      ; bc = block, hl = condition = zero?
04F5                             ;     or h
04F5                             ;     jr z,loop3
04F5                             ;     ld de,loop2-1               ; IP return address
04F5                             ;     push de
04F5                             ;     ld e,(iy+2)                 ; push parent SCP
04F5                             ;     ld d,(iy+3)
04F5                             ;     push de                     ;
04F5                             ;     push iy                     ; push BP
04F5                             ;     ld iy,0                     ; iy = sp
04F5                             ;     add iy,sp
04F5                             ;     push hl                     ; push condition
04F5                             ;     dec bc
04F5                             ;     jp (ix)
04F5                             ; loop2:
04F5                             ;     db ESC                      ; escape from interpreter
04F5                             ;     ld c,(iy+6)                 ; bc = block
04F5                             ;     ld b,(iy+7)
04F5                             ;     pop hl                      ; hl = condition
04F5                             ;     jr loop1
04F5                             ; loop3:
04F5                             ;     ld d,iyh                    ; de = BP
04F5                             ;     ld e,iyl
04F5                             ;     ex de,hl                    ; hl = BP, de = result
04F5                             ;     ld sp,hl                    ; sp = BP
04F5                             ;     pop hl                      ; hl = old BP
04F5                             ;     pop bc                      ; pop SCP (discard)
04F5                             ;     pop bc                      ; bc = IP
04F5                             ;     ld sp,hl                    ; sp = old BP
04F5                             ;     ld iy,0                     ; iy = sp
04F5                             ;     add iy,sp
04F5                             ;     ld ix,next                  ; needed?
04F5                             ;     jp (ix)
04F5                WORDS:       
04F5   21 02 00               LD   hl,2   
04F8   18 03                  JR   bytes1   
04FA                BYTES:       
04FA   21 01 00               LD   hl,1   
04FD                BYTES1:      
04FD   22 9A 18               LD   (vDataWidth),hl   
0500   DD E9                  JP   (ix)   
0502                ARRAY:       
0502   DD E9                  JP   (ix)   
0504                             ;     push bc                     ; create stack frame, push IP
0504                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0504                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0504                             ;     push de                     ; push SCP
0504                             ;     push iy                     ; push BP
0504                             ;     ld iy,0                     ; BP = SP
0504                             ;     add iy,sp
0504                             ;     jp (ix)
0504                ARRAYEND:      
0504   DD E9                  JP   (ix)   
0506                             ;     ld d,iyh                    ; de = BP
0506                             ;     ld e,iyl
0506                             ;     ld ixh,d                    ; ix = BP
0506                             ;     ld ixl,e
0506                             ;     ld hl,de                    ; hl = de
0506                             ;     or a
0506                             ;     sbc hl,sp                   ; hl = array count (items on stack)
0506                             ;     srl h
0506                             ;     rr l
0506                             ;     ex de,hl                    ; de = count
0506                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0506                             ;     ld (hl),e
0506                             ;     inc hl
0506                             ;     ld (hl),d
0506                             ;     inc hl                      ; hl = array[0], de = count
0506                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
0506                             ;     cp 1
0506                             ;     jr nz, arrayEnd2
0506                             ; arrayEnd1:                      ; byte
0506                             ;     ld a,(ix-2)
0506                             ;     ld (hl),a
0506                             ;     inc hl
0506                             ;     dec ix
0506                             ;     dec ix
0506                             ;     dec de
0506                             ;     ld a,e
0506                             ;     or d
0506                             ;     jr nz,arrayEnd1
0506                             ;     jr arrayEnd3
0506                             ; arrayEnd2:                      ; word
0506                             ;     ld a,(ix-2)
0506                             ;     ld (hl),a
0506                             ;     inc hl
0506                             ;     ld a,(ix-1)
0506                             ;     ld (hl),a
0506                             ;     inc hl
0506                             ;     dec ix
0506                             ;     dec ix
0506                             ;     dec de
0506                             ;     ld a,e
0506                             ;     or d
0506                             ;     jr nz,arrayEnd2
0506                             ; arrayEnd3:
0506                             ;     ld d,iyh                    ; de = BP, hl = end of array
0506                             ;     ld e,iyl
0506                             ;     ex de,hl                    ; hl = BP, de = end of array
0506                             ;     ld sp,hl                    ; sp = BP
0506                             ;     pop hl                      ; hl = old BP, de = end of array
0506                             ;     pop ix                      ; pop SCP (discard)
0506                             ;     pop ix                      ; pop IP (discard)
0506                             ;     ex de,hl
0506                             ;     ld iyh,d
0506                             ;     ld iyl,e
0506                             ;     ex de,hl
0506                             ;     ; ld sp,hl                    ; sp = old BP
0506                             ;     ; ld iy,0                     ; iy = sp
0506                             ;     ; add iy,sp
0506                             ;     ld ix,next
0506                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
0506                             ;     inc hl
0506                             ;     inc hl
0506                             ;     push hl                     ; return array[0]
0506                             ;     ex de,hl                    ; hl = end of array, de = array[0]
0506                             ;     or a
0506                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
0506                             ;     ex de,hl
0506                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0506                             ;     ld (hl),e                   ; array[-2] = size
0506                             ;     inc hl
0506                             ;     ld (hl),d
0506                             ;     inc hl
0506                             ;     add hl,de
0506                             ;     ld (vHeapPtr),hl
0506                             ;     jp (ix)
0506                             ; str -- num
0506                HASH:        
0506   E1                     POP   hl   
0507   C5                     PUSH   bc   
0508   44 4D                  LD   bc,hl   
050A   CD 76 06               CALL   hashStr   
050D   C1                     POP   bc   
050E   E5                     PUSH   hl   
050F   DD E9                  JP   (ix)   
0511                             ; symbol block arity --
0511                DEF:         
0511   21 00 00               LD   hl,0   ; array = 0
0514   E5                     PUSH   hl   ; falls through
0515                             ; symbol block arity array --
0515                CLOSURE:      
0515                DEF0:        
0515   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0518   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
051A   23                     INC   hl   
051B   36 13                  LD   (hl),lsb(call)   
051D   23                     INC   hl   
051E   36 0A                  LD   (hl),msb(call)   
0520   23                     INC   hl   
0521   D1                     POP   de   ; pop array
0522   73                     LD   (hl),e   ; compile array
0523   23                     INC   hl   
0524   72                     LD   (hl),d   
0525   23                     INC   hl   
0526   D1                     POP   de   
0527   73                     LD   (hl),e   ; compile arity
0528   23                     INC   hl   
0529   72                     LD   (hl),d   
052A   23                     INC   hl   
052B   D1                     POP   de   ; de = block
052C   C5                     PUSH   bc   ; (sp) = IP (sp+2) = symbol
052D   06 01                  LD   b,1   ; b = nesting
052F                DEF1:        
052F   1A                     LD   a,(de)   
0530   13                     INC   de   
0531   77                     LD   (hl),a   
0532   23                     INC   hl   
0533   FE 29                  CP   ")"   
0535   28 25                  JR   z,def4   
0537   FE 7D                  CP   "}"   
0539   28 21                  JR   z,def4   
053B   FE 5D                  CP   "]"   
053D   28 1D                  JR   z,def4   
053F   FE 28                  CP   "("   
0541   28 13                  JR   z,def3   
0543   FE 7B                  CP   "{"   
0545   28 0F                  JR   z,def3   
0547   FE 5B                  CP   "["   
0549   28 0B                  JR   z,def3   
054B   FE 27                  CP   "'"   
054D   28 07                  JR   z,def3   
054F   FE 60                  CP   "`"   
0551   20 DC                  JR   nz,def1   
0553                DEF2:        
0553   04                     INC   b   
0554   18 D9                  JR   def1   
0556                DEF3:        
0556   3E 80                  LD   a,$80   
0558   A8                     XOR   b   
0559   47                     LD   b,a   
055A   18 D3                  JR   def1   
055C                DEF4:        
055C   05                     DEC   b   
055D   20 D0                  JR   nz,def1   ; get the next element
055F   AF                     XOR   a   ; end with NUL ??? needed?
0560   77                     LD   (hl),a   
0561   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0565   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0568   E1                     POP   hl   ; de = defstart, hl = IP
0569   E3                     EX   (sp),hl   ; hl = symbol, de = defstart, (sp) = IP
056A   44 4D                  LD   bc,hl   ; bc = symbol
056C   CD 8F 06               CALL   defineEntry   
056F   38 00                  JR   c,def5   
0571                             ; call error
0571                             ; .cstr "Def Collision"
0571                DEF5:        
0571   C1                     POP   bc   ; bc = IP
0572   DD E9                  JP   (ix)   
0574                             ; symbol value --
0574                LET:         
0574   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0576   E3                     EX   (sp),hl   
0577   EB                     EX   de,hl   
0578   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
057B   36 CD                  LD   (hl),$cd   ; compile "call dolet"
057D   23                     INC   hl   
057E   36 BE                  LD   (hl),lsb(dolet)   
0580   23                     INC   hl   
0581   36 04                  LD   (hl),msb(dolet)   
0583   23                     INC   hl   
0584   73                     LD   (hl),e   
0585   23                     INC   hl   
0586   72                     LD   (hl),d   
0587   2B                     DEC   hl   
0588   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
058C   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
058F   E1                     POP   hl   ; de = addr, hl = IP
0590   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0591   44 4D                  LD   bc,hl   ; bc = symbol
0593   CD 8F 06               CALL   defineEntry   
0596   38 00                  JR   c,let2   
0598                             ; call error
0598                             ; .cstr "Let Collision"
0598                LET2:        
0598   C1                     POP   bc   
0599   DD E9                  JP   (ix)   
059B                             ; str -- addr
059B                ADDR:        
059B   E1                     POP   hl   ; hl = hash
059C   C5                     PUSH   bc   
059D   44 4D                  LD   bc,hl   
059F   CD B5 06               CALL   lookupEntry   
05A2   38 03                  JR   c,addr1   
05A4   21 00 00               LD   hl,0   
05A7                             ; call printStr		
05A7                             ; .cstr "Undefined"
05A7                             ; jp interpret
05A7                ADDR1:       
05A7   C1                     POP   bc   
05A8   11 03 00               LD   de,3   
05AB   19                     ADD   hl,de   
05AC   E5                     PUSH   hl   
05AD   DD E9                  JP   (ix)   
05AF                SYMBOL:      
05AF   03                     INC   bc   
05B0   11 00 1A               LD   de,PAD   
05B3   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
05B5   18 02                  JR   symbol1   
05B7                SYMBOL0:      ; copy to PAD area
05B7   03                     INC   bc   ; characters that are part of the identifier
05B8   13                     INC   de   
05B9                SYMBOL1:      ; 0-9 A-Z a-z _
05B9   0A                     LD   a,(bc)   
05BA   12                     LD   (de),a   
05BB   B7                     OR   a   
05BC   28 0A                  JR   z,symbol2   
05BE   6F                     LD   l,a   
05BF   7E                     LD   a,(hl)   
05C0   FE 5B                  CP   lsb(ident_)   
05C2   28 F3                  JR   z,symbol0   
05C4   FE 00                  CP   lsb(num_)   
05C6   28 EF                  JR   z,symbol0   
05C8                SYMBOL2:      
05C8   0B                     DEC   bc   
05C9   AF                     XOR   a   
05CA   12                     LD   (de),a   ; terminate string with NUL
05CB   C5                     PUSH   bc   
05CC   01 00 1A               LD   bc,PAD   
05CF   CD 76 06               CALL   hashStr   ; hl = hash
05D2   C1                     POP   bc   
05D3   E5                     PUSH   hl   
05D4   DD E9                  JP   (ix)   
05D6                IDENT:       
05D6   11 00 1A               LD   de,PAD   
05D9   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
05DB   18 02                  JR   ident1   
05DD                IDENT0:      ; copy to PAD area
05DD   03                     INC   bc   ; characters that are part of the identifier
05DE   13                     INC   de   
05DF                IDENT1:      ; 0-9 A-Z a-z _
05DF   0A                     LD   a,(bc)   
05E0   12                     LD   (de),a   
05E1   B7                     OR   a   
05E2   28 0A                  JR   z,ident2   
05E4   6F                     LD   l,a   
05E5   7E                     LD   a,(hl)   
05E6   FE 5B                  CP   lsb(ident_)   
05E8   28 F3                  JR   z,ident0   
05EA   FE 00                  CP   lsb(num_)   
05EC   28 EF                  JR   z,ident0   
05EE                IDENT2:      
05EE   0B                     DEC   bc   
05EF   AF                     XOR   a   
05F0   12                     LD   (de),a   ; terminate string with NUL
05F1   C5                     PUSH   bc   
05F2   01 00 1A               LD   bc,PAD   
05F5   CD 76 06               CALL   hashStr   ; hl = hash
05F8   44 4D                  LD   bc,hl   
05FA   CD B5 06               CALL   lookupEntry   
05FD   C1                     POP   bc   
05FE   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0600   DD E9                  JP   (ix)   
0602                IDENT3:      
0602   E9                     JP   (hl)   
0603                FRAC:        
0603   2A 98 18               LD   hl,(vFrac)   
0606   E5                     PUSH   hl   
0607   DD E9                  JP   (ix)   
0609                SQRT1:       
0609   E1                     POP   hl   
060A   C5                     PUSH   bc   
060B   CD F2 06               CALL   squareRoot   
060E   ED 43 98 18            LD   (vFrac),bc   
0612   C1                     POP   bc   
0613   D5                     PUSH   de   
0614   DD E9                  JP   (ix)   
0616                ABS1:        
0616   E1                     POP   hl   
0617   CB 7C                  BIT   7,h   
0619   C8                     RET   z   
061A   AF                     XOR   a   
061B   95                     SUB   l   
061C   6F                     LD   l,a   
061D   9F                     SBC   a,a   
061E   94                     SUB   h   
061F   67                     LD   h,a   
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                MOD:         
0623   D1                     POP   de   ; get first value
0624   E1                     POP   hl   ; get 2nd value
0625   C5                     PUSH   bc   ; preserve the IP
0626   44 4D                  LD   bc,hl   
0628   CD D9 06               CALL   divide   
062B   C1                     POP   bc   
062C   E5                     PUSH   hl   ; push remainder
062D   DD E9                  JP   (ix)   
062F                             ; hl = value1, de = value2
062F                             ; hl = result
062F                EQUALS:      
062F   B7                     OR   a   ; reset the carry flag
0630   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0632   28 10                  JR   z,true1   
0634   C3 4A 06               JP   false1   
0637                             ; hl = value1 de = value2
0637                             ; hl = result
0637                LESSTHANEQ:      
0637   B7                     OR   a   
0638   ED 52                  SBC   hl,de   
063A   18 05                  JR   lessthan1   
063C                             ; hl = value1 de = value2
063C                             ; hl = result
063C                LESSTHAN:      
063C   B7                     OR   a   
063D   ED 52                  SBC   hl,de   
063F   28 09                  JR   z,false1   
0641                LESSTHAN1:      
0641   FA 4A 06               JP   m,false1   
0644                TRUE1:       
0644   21 FF FF               LD   hl,TRUE   
0647   E5                     PUSH   hl   
0648   DD E9                  JP   (ix)   
064A                FALSE1:      
064A   21 00 00               LD   hl,FALSE   
064D   E5                     PUSH   hl   
064E   DD E9                  JP   (ix)   
0650                             ; Z80 port input
0650                             ; port -- value
0650                INPUT:       
0650   E1                     POP   hl   
0651   59                     LD   e,c   ; save IP
0652   4D                     LD   c,l   
0653   ED 68                  IN   l,(c)   
0655   26 00                  LD   h,0   
0657   4B                     LD   c,e   ; restore IP
0658   E5                     PUSH   hl   
0659   DD E9                  JP   (ix)   
065B                             ; Z80 port output
065B                             ; value port --
065B                OUTPUT:      
065B   E1                     POP   hl   
065C   59                     LD   e,c   ; save IP
065D   4D                     LD   c,l   
065E   E1                     POP   hl   
065F   ED 69                  OUT   (c),l   
0661   4B                     LD   c,e   ; restore IP
0662   DD E9                  JP   (ix)   
0664                KEY:         
0664   CD 81 00               CALL   getchar   
0667   26 00                  LD   h,0   
0669   6F                     LD   l,a   
066A   E5                     PUSH   hl   
066B   DD E9                  JP   (ix)   
066D                NEG:         
066D   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0670   D1                     POP   de   
0671   C3 A1 03               JP   sub2   ; use the SUBtract routine
0674                FILTER:      
0674                MAP:         
0674                SCAN:        
0674   DD E9                  JP   (ix)   
0676                             ; -------------------------------------------------------------------------------
0676                             ; hash C-string
0676                             ; BC = str
0676                             ; HL = hash
0676                HASHSTR:      
0676   21 00 00               LD   hl,0   
0679                HASHSTR1:      
0679   0A                     LD   a,(bc)   ; load next char
067A   03                     INC   bc   
067B   FE 00                  CP   0   ; NUL?
067D   C8                     RET   z   
067E                HASHSTR2:      
067E   16 00                  LD   d,0   
0680   5F                     LD   e,a   
0681   19                     ADD   hl,de   
0682   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0684   29                     ADD   hl,hl   ; shift left
0685   19                     ADD   hl,de   ; add
0686   29                     ADD   hl,hl   ; shift left
0687   29                     ADD   hl,hl   ; shift left
0688   29                     ADD   hl,hl   ; shift left
0689   29                     ADD   hl,hl   ; shift left
068A   29                     ADD   hl,hl   ; shift left
068B   29                     ADD   hl,hl   ; shift left
068C   19                     ADD   hl,de   ; add
068D   18 EA                  JR   hashStr1   
068F                             ; add entry to hash slots and hash pointers
068F                             ; bc = hash (b = hi, c = lo), de = addr
068F                             ; sets carry if successful
068F                DEFINEENTRY:      
068F   CB 21                  SLA   c   ; lo = lo * 2
0691   69                     LD   l,c   ; lo1 = lo
0692   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0694                DEFINEENTRY0:      
0694   7E                     LD   a,(hl)   ; a = (lo1)
0695   FE FF                  CP   UNUSED   ; is it unused?
0697   28 12                  JR   z,defineEntry3   ; yes, add entry
0699   79                     LD   a,c   ; a = lo
069A   BE                     CP   (hl)   ; compare (lo1) with lo
069B   20 06                  JR   nz,defineEntry1   ; no match loop around
069D   2C                     INC   l   
069E   78                     LD   a,b   ; a = hi
069F   BE                     CP   (hl)   ; compare (lo1+1) with hi
06A0   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
06A2   2D                     DEC   l   ; restore l
06A3                DEFINEENTRY1:      
06A3   2C                     INC   l   ; try next entry
06A4   2C                     INC   l   
06A5   79                     LD   a,c   ; compare lo and lo1
06A6   BD                     CP   l   ; if equal then there's no space left, reject
06A7   20 EB                  JR   nz,defineEntry0   
06A9                DEFINEENTRY2:      
06A9   B7                     OR   a   ; clear carry flag, failure
06AA   C9                     RET      
06AB                DEFINEENTRY3:      ; new entry
06AB   71                     LD   (hl),c   ; (lo1) = hash lo
06AC   23                     INC   hl   
06AD   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
06AE   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
06B0   72                     LD   (hl),d   
06B1   2B                     DEC   hl   
06B2   73                     LD   (hl),e   ; (slot + 2) = address
06B3   37                     SCF      ; set carry flag, success
06B4   C9                     RET      
06B5                             ; looks up hash and returns address
06B5                             ; bc = hash
06B5                             ; returns addr in hl, sets carry if successful
06B5                LOOKUPENTRY:      
06B5   CB 21                  SLA   c   ; lo = lo * 2
06B7   69                     LD   l,c   ; lo1 = lo
06B8   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
06BA                LOOKUPENTRY0:      
06BA   7E                     LD   a,(hl)   ; a = (hl), slot
06BB   FE FF                  CP   UNUSED   ; is it unused?
06BD   28 EA                  JR   z,defineEntry2   ; yes, does not exist
06BF   79                     LD   a,c   ; a = lo
06C0   BE                     CP   (hl)   ; compare (lo1) with lo
06C1   20 06                  JR   nz,lookupEntry1   ; no match loop around
06C3   2C                     INC   l   
06C4   78                     LD   a,b   ; a = hi
06C5   BE                     CP   (hl)   ; compare (lo1+1) with hi
06C6   28 09                  JR   z,lookupEntry3   
06C8   2D                     DEC   l   
06C9                LOOKUPENTRY1:      
06C9   2C                     INC   l   
06CA   2C                     INC   l   
06CB   79                     LD   a,c   
06CC   BD                     CP   l   ; no space left, reject
06CD   20 EB                  JR   nz,lookupEntry0   
06CF                LOOKUPENTRY2:      
06CF   B7                     OR   a   ; clear carry flag, failure
06D0   C9                     RET      
06D1                LOOKUPENTRY3:      
06D1   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
06D3   56                     LD   d,(hl)   
06D4   2D                     DEC   l   ; restore l
06D5   5E                     LD   e,(hl)   ; (slot + 2) = address
06D6   EB                     EX   de,hl   
06D7   37                     SCF      
06D8   C9                     RET      
06D9                             ; division subroutine.
06D9                             ; bc: divisor, de: dividend, hl: remainder
06D9                DIVIDE:      
06D9   21 00 00               LD   hl,0   ; zero the remainder
06DC   3E 10                  LD   a,16   ; loop counter
06DE                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06DE   CB 21                  SLA   c   
06E0   CB 10                  RL   b   
06E2   ED 6A                  ADC   hl,hl   
06E4   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06E6   38 03                  JR   c,divide2   
06E8   0C                     INC   c   
06E9   18 01                  JR   divide3   
06EB                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06EB   19                     ADD   hl,de   
06EC                DIVIDE3:      
06EC   3D                     DEC   a   
06ED   20 EF                  JR   nz,divide1   
06EF   50 59                  LD   de,bc   ; result from bc to de
06F1   C9                     RET      
06F2                             ; squareroot
06F2                             ; Input: HL = value
06F2                             ; Result: DE = square root BC = remainder
06F2                SQUAREROOT:      
06F2   01 00 08               LD   bc,0800h   
06F5   59                     LD   e,c   
06F6   AF                     XOR   a   
06F7                SQUAREROOT1:      
06F7   29                     ADD   hl,hl   
06F8   CB 11                  RL   c   
06FA   ED 6A                  ADC   hl,hl   
06FC   CB 11                  RL   c   
06FE   30 02                  JR   nc,$+4   
0700   CB C5                  SET   0,l   
0702   7B                     LD   a,e   
0703   87                     ADD   a,a   
0704   5F                     LD   e,a   
0705   87                     ADD   a,a   
0706   CB 45                  BIT   0,l   
0708   20 03                  JR   nz,$+5   
070A   91                     SUB   c   
070B   30 05                  JR   nc,squareRoot4   
070D   79                     LD   a,c   
070E   93                     SUB   e   
070F   1C                     INC   e   
0710   93                     SUB   e   
0711   4F                     LD   c,a   
0712                SQUAREROOT4:      
0712   10 E3                  DJNZ   squareRoot1   
0714   CB 45                  BIT   0,l   
0716   28 01                  JR   z,squareRoot5   
0718   04                     INC   b   
0719                SQUAREROOT5:      
0719   16 00                  LD   d,0   
071B   C9                     RET      
071C                PRTDEC:      
071C   CB 7C                  BIT   7,h   
071E   28 0B                  JR   z,prtdec0   
0720   3E 2D                  LD   a,"-"   
0722   CD 85 00               CALL   putchar   
0725   AF                     XOR   a   
0726   95                     SUB   l   
0727   6F                     LD   l,a   
0728   9F                     SBC   a,a   
0729   94                     SUB   h   
072A   67                     LD   h,a   
072B                PRTDEC0:      
072B   C5                     PUSH   bc   
072C   0E 00                  LD   c,0   ; leading zeros flag = false
072E   11 F0 D8               LD   de,-10000   
0731   CD 4D 07               CALL   prtdec1   
0734   11 18 FC               LD   de,-1000   
0737   CD 4D 07               CALL   prtdec1   
073A   11 9C FF               LD   de,-100   
073D   CD 4D 07               CALL   prtdec1   
0740   1E F6                  LD   e,-10   
0742   CD 4D 07               CALL   prtdec1   
0745   0C                     INC   c   ; flag = true for at least digit
0746   1E FF                  LD   e,-1   
0748   CD 4D 07               CALL   prtdec1   
074B   C1                     POP   bc   
074C   C9                     RET      
074D                PRTDEC1:      
074D   06 2F                  LD   b,"0"-1   
074F                PRTDEC2:      
074F   04                     INC   b   
0750   19                     ADD   hl,de   
0751   38 FC                  JR   c,prtdec2   
0753   ED 52                  SBC   hl,de   
0755   3E 30                  LD   a,"0"   
0757   B8                     CP   b   
0758   20 05                  JR   nz,prtdec3   
075A   AF                     XOR   a   
075B   B1                     OR   c   
075C   C8                     RET   z   
075D   18 01                  JR   prtdec4   
075F                PRTDEC3:      
075F   0C                     INC   c   
0760                PRTDEC4:      
0760   78                     LD   a,b   
0761   C3 85 00               JP   putchar   
0764                PRTHEX:      ; display hl as a 16-bit number in hex.
0764   C5                     PUSH   bc   ; preserve the IP
0765   7C                     LD   a,h   
0766   CD 6F 07               CALL   prthex2   
0769   7D                     LD   a,l   
076A   CD 6F 07               CALL   prthex2   
076D   C1                     POP   bc   
076E   C9                     RET      
076F                PRTHEX2:      
076F   4F                     LD   c,a   
0770   1F                     RRA      
0771   1F                     RRA      
0772   1F                     RRA      
0773   1F                     RRA      
0774   CD 78 07               CALL   prthex3   
0777   79                     LD   a,c   
0778                PRTHEX3:      
0778   E6 0F                  AND   0x0F   
077A   C6 90                  ADD   a,0x90   
077C   27                     DAA      
077D   CE 40                  ADC   a,0x40   
077F   27                     DAA      
0780   C3 85 00               JP   putchar   
0783                PRTSTR0:      
0783   CD 85 00               CALL   putchar   
0786   23                     INC   hl   
0787                PRTSTR:      
0787   7E                     LD   a,(hl)   
0788   B7                     OR   a   
0789   20 F8                  JR   nz,prtstr0   
078B   C9                     RET      
078C                             ; **************************************************************************
078C                             ; calculate nesting value
078C                             ; a is char to be tested,
078C                             ; e is the nesting value (initially 0)
078C                             ; e is increased by ( and [
078C                             ; e is decreased by ) and ]
078C                             ; e has its bit 7 toggled by `
078C                             ; limited to 127 levels
078C                             ; **************************************************************************
078C                NESTING:      
078C   FE 22                  CP   $22   ; quote char
078E   20 0A                  JR   nz,nesting1   
0790   CB 7B                  BIT   7,e   
0792   28 03                  JR   z,nesting1a   
0794   CB BB                  RES   7,e   
0796   C9                     RET      
0797                NESTING1A:      
0797   CB FB                  SET   7,e   
0799   C9                     RET      
079A                NESTING1:      
079A   CB 7B                  BIT   7,e   
079C   C0                     RET   nz   
079D   FE 7B                  CP   "{"   
079F   28 08                  JR   z,nesting2   
07A1   FE 5B                  CP   "["   
07A3   28 04                  JR   z,nesting2   
07A5   FE 28                  CP   "("   
07A7   20 02                  JR   nz,nesting3   
07A9                NESTING2:      
07A9   1C                     INC   e   
07AA   C9                     RET      
07AB                NESTING3:      
07AB   FE 7D                  CP   "}"   
07AD   28 07                  JR   z,nesting4   
07AF   FE 5D                  CP   "]"   
07B1   28 03                  JR   z,nesting4   
07B3   FE 29                  CP   ")"   
07B5   C0                     RET   nz   
07B6                NESTING4:      
07B6   1D                     DEC   e   
07B7   C9                     RET      
07B8                PROMPT:      
07B8   CD C8 07               CALL   printStr   
07BB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07C0   C9                     RET      
07C1                CRLF:        
07C1   CD C8 07               CALL   printStr   
07C4   0D 0A 00               .CSTR   "\r\n"   
07C7   C9                     RET      
07C8                PRINTSTR:      
07C8   E3                     EX   (sp),hl   ; swap			
07C9   CD 87 07               CALL   prtstr   
07CC   23                     INC   hl   ; inc past NUL
07CD   E3                     EX   (sp),hl   ; put it back	
07CE   C9                     RET      
07CF                DEFINE:      
07CF   E1                     POP   hl   
07D0   7E                     LD   a,(hl)   
07D1   23                     INC   hl   
07D2   44 4D                  LD   bc,hl   
07D4   5F                     LD   e,a   
07D5   16 00                  LD   d,0   
07D7   19                     ADD   hl,de   
07D8   5E                     LD   e,(hl)   
07D9   23                     INC   hl   
07DA   56                     LD   d,(hl)   
07DB   23                     INC   hl   
07DC   E5                     PUSH   hl   ; bc = str
07DD   D5                     PUSH   de   
07DE   CD 76 06               CALL   hashStr   ; hl = hash
07E1   D1                     POP   de   
07E2   44 4D                  LD   bc,hl   
07E4   C3 8F 06               JP   defineEntry   
07E7                INIT:        
07E7   DD 21 C0 09            LD   ix,next   
07EB   FD 21 80 18            LD   iy,STACK   
07EF   21 80 01               LD   hl,isysVars   
07F2   11 98 18               LD   de,sysVars   
07F5   01 10 00               LD   bc,8 * 2   
07F8   ED B0                  LDIR      
07FA   3E FF                  LD   a,UNUSED   
07FC   06 00                  LD   b,0   
07FE   21 00 1B               LD   hl,hashSlots   
0801                INIT1:       
0801   77                     LD   (hl),a   
0802   23                     INC   hl   
0803   10 FC                  DJNZ   init1   
0805   CD CF 07               CALL   define   
0808   04 61 62 73 00         .PSTR   "abs",0   
080D   16 06                  DW   abs1   
080F   CD CF 07               CALL   define   
0812   05 61 64 64 72 00      .PSTR   "addr",0   
0818   9B 05                  DW   addr   
081A   CD CF 07               CALL   define   
081D   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0824   FA 04                  DW   bytes   
0826   CD CF 07               CALL   define   
0829   05 63 61 6C 6C 00      .PSTR   "call",0   
082F   13 0A                  DW   call   
0831   CD CF 07               CALL   define   
0834   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
083D   15 05                  DW   closure   
083F   CD CF 07               CALL   define   
0842   04 64 65 66 00         .PSTR   "def",0   
0847   11 05                  DW   def   
0849   CD CF 07               CALL   define   
084C   05 65 78 65 63 00      .PSTR   "exec",0   
0852   F5 09                  DW   exec   
0854   CD CF 07               CALL   define   
0857   06 66 61 6C 73 65 00   .PSTR   "false",0   
085E   00 00                  DW   false   
0860   CD CF 07               CALL   define   
0863   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
086B   74 06                  DW   filter   
086D   CD CF 07               CALL   define   
0870   05 66 72 61 63 00      .PSTR   "frac",0   
0876   03 06                  DW   frac   
0878   CD CF 07               CALL   define   
087B   04 67 65 74 00         .PSTR   "get",0   
0880   BE 04                  DW   get   
0882   CD CF 07               CALL   define   
0885   05 68 61 73 68 00      .PSTR   "hash",0   
088B   06 05                  DW   hash   
088D   CD CF 07               CALL   define   
0890   06 69 6E 70 75 74 00   .PSTR   "input",0   
0897   50 06                  DW   input   
0899   CD CF 07               CALL   define   
089C   03 69 66 00            .PSTR   "if",0   
08A0   E5 04                  DW   if   
08A2   CD CF 07               CALL   define   
08A5   05 69 66 74 65 00      .PSTR   "ifte",0   
08AB   E7 04                  DW   ifte   
08AD   CD CF 07               CALL   define   
08B0   04 6B 65 79 00         .PSTR   "key",0   
08B5   64 06                  DW   key   
08B7   CD CF 07               CALL   define   
08BA   04 6C 65 74 00         .PSTR   "let",0   
08BF   74 05                  DW   let   
08C1   CD CF 07               CALL   define   
08C4   05 6C 6F 6F 70 00      .PSTR   "loop",0   
08CA   F3 04                  DW   loop   
08CC   CD CF 07               CALL   define   
08CF   04 6D 61 70 00         .PSTR   "map",0   
08D4   74 06                  DW   map   
08D6   CD CF 07               CALL   define   
08D9   04 6D 6F 64 00         .PSTR   "mod",0   
08DE   23 06                  DW   mod   
08E0   CD CF 07               CALL   define   
08E3   04 6E 65 67 00         .PSTR   "neg",0   
08E8   6D 06                  DW   neg   
08EA   CD CF 07               CALL   define   
08ED   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
08F5   5B 06                  DW   output   
08F7   CD CF 07               CALL   define   
08FA   05 73 63 61 6E 00      .PSTR   "scan",0   
0900   01 00                  DW   scan   
0902   CD CF 07               CALL   define   
0905   04 73 65 74 00         .PSTR   "set",0   
090A   D0 04                  DW   set   
090C   CD CF 07               CALL   define   
090F   04 73 68 6C 00         .PSTR   "shl",0   
0914   DC 03                  DW   shl   
0916   CD CF 07               CALL   define   
0919   04 73 68 72 00         .PSTR   "shr",0   
091E   EC 03                  DW   shr   
0920   CD CF 07               CALL   define   
0923   05 73 71 72 74 00      .PSTR   "sqrt",0   
0929   09 06                  DW   sqrt1   
092B   CD CF 07               CALL   define   
092E   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0936   E9 04                  DW   switch   
0938   CD CF 07               CALL   define   
093B   05 74 72 75 65 00      .PSTR   "true",0   
0941   FF FF                  DW   true   
0943   CD CF 07               CALL   define   
0946   06 77 6F 72 64 73 00   .PSTR   "words",0   
094D   F5 04                  DW   words   
094F   C9                     RET      
0950                START:       
0950   31 80 18               LD   sp,STACK   ; start of Siena
0953   CD E7 07               CALL   init   ; setups
0956   CD C8 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0959   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0966                INTERPRET:      
0966   CD B8 07               CALL   prompt   
0969   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
096C   ED 43 9C 18            LD   (vTIBPtr),bc   
0970                INTERPRET2:      ; calc nesting (a macro might have changed it)
0970   1E 00                  LD   e,0   ; initilize nesting value
0972   C5                     PUSH   bc   ; save offset into TIB,
0973                             ; bc is also the count of chars in TIB
0973   21 00 19               LD   hl,TIB   ; hl is start of TIB
0976   18 06                  JR   interpret4   
0978                INTERPRET3:      
0978   7E                     LD   a,(hl)   ; a = char in TIB
0979   23                     INC   hl   ; inc pointer into TIB
097A   0B                     DEC   bc   ; dec count of chars in TIB
097B   CD 8C 07               CALL   nesting   ; update nesting value
097E                INTERPRET4:      
097E   79                     LD   a,c   ; is count zero?
097F   B0                     OR   b   
0980   20 F6                  JR   nz,interpret3   ; if not loop
0982   C1                     POP   bc   ; restore offset into TIB
0983                WAITCHAR:      
0983   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0986   FE 20                  CP   $20   ; compare to space
0988   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
098A   FE 00                  CP   $0   ; is it end of string? NUL end of string
098C                             ; ???? NEEDED?
098C   28 2A                  JR   z,waitchar4   
098E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0990   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0992                MACRO:       
0992                             ;  ld (vTIBPtr),bc
0992                             ;  ld hl,ctrlCodes
0992                             ;  add a,l			            ; look up key of macros
0992                             ;  ld l,a
0992                             ;  ld e,(hl)
0992                             ;  ld a,e
0992                             ;  or a
0992                             ;  jr z,macro1
0992                             ;  ld d,msb(macros)
0992                             ;  push de
0992                             ;  call call		            ; Siena exec_ operation and jump to it
0992                             ;  db DC1,0
0992                             ; macro1:
0992                             ;  ld bc,(vTIBPtr)
0992   18 DC                  JR   interpret2   
0994                WAITCHAR1:      
0994   21 00 19               LD   hl,TIB   
0997   09                     ADD   hl,bc   
0998   77                     LD   (hl),a   ; store the character in textbuf
0999   03                     INC   bc   
099A   CD 85 00               CALL   putchar   ; echo character to screen
099D   CD 8C 07               CALL   nesting   
09A0   18 E1                  JR   waitchar   ; wait for next character
09A2                WAITCHAR3:      
09A2   21 00 19               LD   hl,TIB   
09A5   09                     ADD   hl,bc   
09A6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09A8   23                     INC   hl   
09A9   36 0A                  LD   (hl),"\n"   
09AB   23                     INC   hl   
09AC   03                     INC   bc   
09AD   03                     INC   bc   
09AE   CD C1 07               CALL   crlf   ; echo character to screen
09B1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09B2   B7                     OR   a   
09B3   20 CE                  JR   nz,waitchar   
09B5   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
09B7   03                     INC   bc   
09B8                WAITCHAR4:      
09B8   ED 43 9C 18            LD   (vTIBPtr),bc   
09BC   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09BF                             ; we pressed enter
09BF   0B                     DEC   bc   
09C0                NEXT:        
09C0   03                     INC   bc   ; Increment the IP
09C1   0A                     LD   a,(bc)   ; Get the next character and dispatch
09C2   FE 20                  CP   " "   ; whitespace?
09C4   28 FA                  JR   z,next   ; space? ignore
09C6   38 07                  JR   c,next1   
09C8   6F                     LD   l,a   ; index into table
09C9   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09CB   6E                     LD   l,(hl)   ; get low jump address
09CC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09CE   E9                     JP   (hl)   ; Jump to routine
09CF                NEXT1:       
09CF   FE 1B                  CP   ESC   ; escape from interpreter
09D1   28 07                  JR   z,escape   
09D3   FE 00                  CP   NUL   ; end of input string?
09D5   28 07                  JR   z,exit   
09D7   C3 66 09               JP   interpret   ; no, other whitespace, macros?
09DA                ESCAPE:      
09DA   60 69                  LD   hl,bc   ; address of code after escape opcode
09DC   23                     INC   hl   
09DD   E9                     JP   (hl)   
09DE                EXIT:        
09DE   50 59                  LD   de,bc   ; address of code after exit opcode
09E0   13                     INC   de   
09E1   D9                     EXX      
09E2   C1                     POP   bc   ; bc = last result
09E3   E1                     POP   hl   ; pop array (discard)
09E4   FD 54                  LD   d,iyh   ; de = BP
09E6   FD 5D                  LD   e,iyl   
09E8   EB                     EX   de,hl   ; hl = BP
09E9   F9                     LD   sp,hl   ; sp = BP
09EA   D9                     EXX      
09EB   E1                     POP   hl   ; hl = old BP
09EC   C1                     POP   bc   ; pop SCP (discard)
09ED   C1                     POP   bc   ; pop array (discard)
09EE   C1                     POP   bc   ; bc = IP
09EF   F9                     LD   sp,hl   ; sp = old BP
09F0   D9                     EXX      
09F1   C5                     PUSH   bc   ; push result
09F2   D9                     EXX      
09F3   EB                     EX   de,hl   
09F4   E9                     JP   (hl)   
09F5                             ; execute a block of code
09F5                             ; uses parent scope
09F5                EXEC:        ; execute code at pointer
09F5   E1                     POP   hl   ; hl = pointer to code
09F6   7C                     LD   a,h   ; skip if destination address is NUL
09F7   B5                     OR   l   
09F8   28 17                  JR   z,exec2   
09FA   C5                     PUSH   bc   ; push IP
09FB   11 00 00               LD   de,0   
09FE   D5                     PUSH   de   ; array = 0
09FF   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A02   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A05   D5                     PUSH   de   ; push SCP
0A06   FD E5                  PUSH   iy   ; push BP
0A08   FD 21 00 00            LD   iy,0   ; BP = SP
0A0C   FD 39                  ADD   iy,sp   
0A0E   44 4D                  LD   bc,hl   ; IP = pointer to code
0A10   0B                     DEC   bc   ; dec to prepare for next routine
0A11                EXEC2:       
0A11   DD E9                  JP   (ix)   
0A13                             ; call with args
0A13                             ; pushes array, creates a scope
0A13                             ; doclosure:
0A13                             ;     pop hl
0A13                             ;     ld e,(hl)                   ; load array and push
0A13                             ;     inc hl
0A13                             ;     ld d,(hl)
0A13                             ;     inc hl
0A13                             ;     push de
0A13                             ;     jp call1
0A13                             ; call with args
0A13                             ; creates a scope
0A13                CALL:        ; execute code at pointer
0A13   E1                     POP   hl   ; hl = pointer to code
0A14                CALL1:       
0A14   7C                     LD   a,h   ; skip if destination address is NUL
0A15   B5                     OR   l   
0A16   28 1B                  JR   z,call2   
0A18   C5                     PUSH   bc   ; push IP
0A19   5E                     LD   e,(hl)   ; de = array
0A1A   23                     INC   hl   
0A1B   56                     LD   d,(hl)   
0A1C   23                     INC   hl   
0A1D   D5                     PUSH   de   ; push array
0A1E   5E                     LD   e,(hl)   ; de = arity
0A1F   23                     INC   hl   
0A20   56                     LD   d,(hl)   ; hl = block-1
0A21   EB                     EX   de,hl   ; hl = arity, de = block-1
0A22   29                     ADD   hl,hl   ; hl = arity * 2 bytes
0A23   01 04 00               LD   bc,4   ; subtract 4 bytes (ip,array)
0A26   09                     ADD   hl,bc   
0A27   39                     ADD   hl,sp   ; hl = pointer to first arg
0A28   E5                     PUSH   hl   ; push hl
0A29   FD E5                  PUSH   iy   ; push BP
0A2B   FD 21 00 00            LD   iy,0   ; BP = SP
0A2F   FD 39                  ADD   iy,sp   
0A31   42 4B                  LD   bc,de   ; IP = block-1, ready for NEXT
0A33                CALL2:       
0A33   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                             ; base:   .set 37
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "-1",-1
4000                             ; test "-1 2 +",1
4000                             ; test "-1 1 +",0
4000                             ; test "1 2 +", 3
4000                             ; test "4 1 2 +", 3
4000                             ; test "1", 1
4000                             ; test "2", 2
4000                             ; test "``", 0
4000                             ; test "`a`", $61
4000                             ; test "`\\``", $60
4000                             ; test "1", 1
4000                             ; test "0", 0
4000                             ; test "10", 10
4000                             ; test "123", 123
4000                             ; test "#10", $10
4000                             ; test "#FF", $FF
4000                             ; test "2 3 =", FALSE
4000                             ; test "3 3 =", TRUE
4000                             ; test "2 3 <", TRUE
4000                             ; test "3 3 <", FALSE
4000                             ; test "3 3 >", FALSE
4000                             ; test "4 3 >", TRUE
4000                             ; test "1 2 +", 3
4000                             ; test "123 456 +", 123+456
4000                             ; test "64 128 +", 64+128
4000                             ; test "5 3 -", 2
4000                             ; test "3 5 &", 1
4000                             ; test "3 5 |", 7
4000                             ; test "2 3 *", 6
4000                             ; test "1 2 3 + *", 5
4000                             ; test ":x 1000 let x 10 set x", 10
4000                             ; test ":x [100] { @1 } closure x", 100
4000                             ; test ":x [100 200] { @2 } closure x", 200
4000                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4000                             ; test "0 [{1}] switch", 1
4000                             ; test "1 [{1} {2} {3}] switch", 2
4000                             ; test "9 [{1} {5}] switch", 5
4000                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4000                             ; test "bytes 'ABC' get", $41
4000                             ; test "bytes [1 2 3] get", 1
4000                             ; test ":xyz 123 const ; xyz", 123
4000                             ; test ":x 1 const ; x", 1
4000                             ; test ":x 'A' const x get", $41
4000                             ; test ":x [1] const x get", 1
4000                             ; test ":x [1 2 3] const x 2? get", 3
4000                             ; test "2 (1 2 +) *", 6
4000                             ; test ":xyz 123 const ; xyz", 123
4000                             ; test ":xyz 123 let ; xyz get", 123
4000                             ; test "1 2 {$1 $2 +} call", 3
4000                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4000                             ; test ":xyz {1} def :xyz addr call", 1
4000                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4000                             ; test ":xyz {10} def :xyz addr exec", 10
4000                             ; test ":xyz {10} def :xyz addr call", 10
4000                             ; test "'hello' hash", $7f54
4000                             ; test ":hello", $7f54
4000                             ; test "bytes [1 2 3]", $1e02
4000                             ; test "bytes [1 2 3] 1? get", 2
4000                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4000                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4000                             ; test "words [1 2 3]", $1e02
4000                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4000                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4000                             ; test "words [10 20 30] 1 ? get", 10
4000                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4000                             ; test "{{{1} exec} exec} exec", 1
4000                             ; test "5 {{{$1} exec} exec} call", 5
4000                             ; test "5 {$1} call", 5
4000                             ; test "5 {{$1} exec} call", 5
4000                             ; test "2 1 {{$1} call} call", 2
4000                             ; test "2 1 {$2} call", 1
4000                             ; test "2 1 {$1} call", 2
4000                             ; test "2 1 {$2} call", 1
4000                             ; test "2 4 {$2} call", 4
4000                             ; test "{{1} call} call", 1
4000                             ; test "5 {-1 {$1} if} call", 5
4000                             ; test "0 {} loop", 0
4000                             ; test "1 {1-} loop", $1a00
4000                          ;*Macro unroll:  test "1 2 <", TRUE
4000   31 80 18               LD   SP,STACK   
4003   CD E7 07               CALL   init   
4006   CD F5 09               CALL   exec   
4009   31 20 32 20 3C 00      .CSTR   "1 2 <"   
400F                          ;*Macro unroll:  expect "1 2 <",TRUE
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 FF FF               LD   DE,TRUE   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 50                  JR   Z,expectM_0_2384S43   
401B   CD C8 07               CALL   printStr   
401E   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
402A   CD C8 07               CALL   printStr   
402D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403C   21 FF FF               LD   HL,TRUE   
403F   CD 1C 07               CALL   prtdec   
4042   CD C8 07               CALL   printStr   
4045   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4052   E1                     POP   hl   
4053   E5                     PUSH   hl   
4054   CD 1C 07               CALL   prtdec   
4057   E1                     POP   hl   
4058   CD C8 07               CALL   printStr   
405B   20 28 23 00            .CSTR   " (#"   
405F   CD 64 07               CALL   prthex   
4062   CD C8 07               CALL   printStr   
4065   29 0D 0A 00            .CSTR   ")\r\n"   
4069   76                     HALT      
406A   00                     .CSTR      
406B                EXPECTM_0_2384S43:      
406B   E1                     POP   HL   
406C                          ;*Macro unroll:  test "2 2 <=", TRUE
406C   31 80 18               LD   SP,STACK   
406F   CD E7 07               CALL   init   
4072   CD F5 09               CALL   exec   
4075   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
407C                          ;*Macro unroll:  expect "2 2 <=",TRUE
407C   E1                     POP   HL   
407D   E5                     PUSH   HL   
407E   11 FF FF               LD   DE,TRUE   
4081   B7                     OR   A   
4082   ED 52                  SBC   HL,DE   
4084   7D                     LD   A,L   
4085   B4                     OR   H   
4086   28 51                  JR   Z,expectM_0_2385S43   
4088   CD C8 07               CALL   printStr   
408B   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
4098   CD C8 07               CALL   printStr   
409B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40AA   21 FF FF               LD   HL,TRUE   
40AD   CD 1C 07               CALL   prtdec   
40B0   CD C8 07               CALL   printStr   
40B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40C0   E1                     POP   hl   
40C1   E5                     PUSH   hl   
40C2   CD 1C 07               CALL   prtdec   
40C5   E1                     POP   hl   
40C6   CD C8 07               CALL   printStr   
40C9   20 28 23 00            .CSTR   " (#"   
40CD   CD 64 07               CALL   prthex   
40D0   CD C8 07               CALL   printStr   
40D3   29 0D 0A 00            .CSTR   ")\r\n"   
40D7   76                     HALT      
40D8   00                     .CSTR      
40D9                EXPECTM_0_2385S43:      
40D9   E1                     POP   HL   
40DA                          ;*Macro unroll:  test "2 1 <", FALSE
40DA   31 80 18               LD   SP,STACK   
40DD   CD E7 07               CALL   init   
40E0   CD F5 09               CALL   exec   
40E3   32 20 31 20 3C 00      .CSTR   "2 1 <"   
40E9                          ;*Macro unroll:  expect "2 1 <",FALSE
40E9   E1                     POP   HL   
40EA   E5                     PUSH   HL   
40EB   11 00 00               LD   DE,FALSE   
40EE   B7                     OR   A   
40EF   ED 52                  SBC   HL,DE   
40F1   7D                     LD   A,L   
40F2   B4                     OR   H   
40F3   28 50                  JR   Z,expectM_0_2386S43   
40F5   CD C8 07               CALL   printStr   
40F8   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4104   CD C8 07               CALL   printStr   
4107   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4116   21 00 00               LD   HL,FALSE   
4119   CD 1C 07               CALL   prtdec   
411C   CD C8 07               CALL   printStr   
411F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
412C   E1                     POP   hl   
412D   E5                     PUSH   hl   
412E   CD 1C 07               CALL   prtdec   
4131   E1                     POP   hl   
4132   CD C8 07               CALL   printStr   
4135   20 28 23 00            .CSTR   " (#"   
4139   CD 64 07               CALL   prthex   
413C   CD C8 07               CALL   printStr   
413F   29 0D 0A 00            .CSTR   ")\r\n"   
4143   76                     HALT      
4144   00                     .CSTR      
4145                EXPECTM_0_2386S43:      
4145   E1                     POP   HL   
4146                          ;*Macro unroll:  test "1 2 >", FALSE
4146   31 80 18               LD   SP,STACK   
4149   CD E7 07               CALL   init   
414C   CD F5 09               CALL   exec   
414F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4155                          ;*Macro unroll:  expect "1 2 >",FALSE
4155   E1                     POP   HL   
4156   E5                     PUSH   HL   
4157   11 00 00               LD   DE,FALSE   
415A   B7                     OR   A   
415B   ED 52                  SBC   HL,DE   
415D   7D                     LD   A,L   
415E   B4                     OR   H   
415F   28 50                  JR   Z,expectM_0_2387S43   
4161   CD C8 07               CALL   printStr   
4164   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4170   CD C8 07               CALL   printStr   
4173   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4182   21 00 00               LD   HL,FALSE   
4185   CD 1C 07               CALL   prtdec   
4188   CD C8 07               CALL   printStr   
418B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4198   E1                     POP   hl   
4199   E5                     PUSH   hl   
419A   CD 1C 07               CALL   prtdec   
419D   E1                     POP   hl   
419E   CD C8 07               CALL   printStr   
41A1   20 28 23 00            .CSTR   " (#"   
41A5   CD 64 07               CALL   prthex   
41A8   CD C8 07               CALL   printStr   
41AB   29 0D 0A 00            .CSTR   ")\r\n"   
41AF   76                     HALT      
41B0   00                     .CSTR      
41B1                EXPECTM_0_2387S43:      
41B1   E1                     POP   HL   
41B2                          ;*Macro unroll:  test "2 2 >=", TRUE
41B2   31 80 18               LD   SP,STACK   
41B5   CD E7 07               CALL   init   
41B8   CD F5 09               CALL   exec   
41BB   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
41C2                          ;*Macro unroll:  expect "2 2 >=",TRUE
41C2   E1                     POP   HL   
41C3   E5                     PUSH   HL   
41C4   11 FF FF               LD   DE,TRUE   
41C7   B7                     OR   A   
41C8   ED 52                  SBC   HL,DE   
41CA   7D                     LD   A,L   
41CB   B4                     OR   H   
41CC   28 51                  JR   Z,expectM_0_2388S43   
41CE   CD C8 07               CALL   printStr   
41D1   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
41DE   CD C8 07               CALL   printStr   
41E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41F0   21 FF FF               LD   HL,TRUE   
41F3   CD 1C 07               CALL   prtdec   
41F6   CD C8 07               CALL   printStr   
41F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4206   E1                     POP   hl   
4207   E5                     PUSH   hl   
4208   CD 1C 07               CALL   prtdec   
420B   E1                     POP   hl   
420C   CD C8 07               CALL   printStr   
420F   20 28 23 00            .CSTR   " (#"   
4213   CD 64 07               CALL   prthex   
4216   CD C8 07               CALL   printStr   
4219   29 0D 0A 00            .CSTR   ")\r\n"   
421D   76                     HALT      
421E   00                     .CSTR      
421F                EXPECTM_0_2388S43:      
421F   E1                     POP   HL   
4220                          ;*Macro unroll:  test "2 1 >", TRUE
4220   31 80 18               LD   SP,STACK   
4223   CD E7 07               CALL   init   
4226   CD F5 09               CALL   exec   
4229   32 20 31 20 3E 00      .CSTR   "2 1 >"   
422F                          ;*Macro unroll:  expect "2 1 >",TRUE
422F   E1                     POP   HL   
4230   E5                     PUSH   HL   
4231   11 FF FF               LD   DE,TRUE   
4234   B7                     OR   A   
4235   ED 52                  SBC   HL,DE   
4237   7D                     LD   A,L   
4238   B4                     OR   H   
4239   28 50                  JR   Z,expectM_0_2389S43   
423B   CD C8 07               CALL   printStr   
423E   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
424A   CD C8 07               CALL   printStr   
424D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
425C   21 FF FF               LD   HL,TRUE   
425F   CD 1C 07               CALL   prtdec   
4262   CD C8 07               CALL   printStr   
4265   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4272   E1                     POP   hl   
4273   E5                     PUSH   hl   
4274   CD 1C 07               CALL   prtdec   
4277   E1                     POP   hl   
4278   CD C8 07               CALL   printStr   
427B   20 28 23 00            .CSTR   " (#"   
427F   CD 64 07               CALL   prthex   
4282   CD C8 07               CALL   printStr   
4285   29 0D 0A 00            .CSTR   ")\r\n"   
4289   76                     HALT      
428A   00                     .CSTR      
428B                EXPECTM_0_2389S43:      
428B   E1                     POP   HL   
428C                          ;*Macro unroll:  test "10 sqrt", 3
428C   31 80 18               LD   SP,STACK   
428F   CD E7 07               CALL   init   
4292   CD F5 09               CALL   exec   
4295   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
429D                          ;*Macro unroll:  expect "10 sqrt",3
429D   E1                     POP   HL   
429E   E5                     PUSH   HL   
429F   11 03 00               LD   DE,3   
42A2   B7                     OR   A   
42A3   ED 52                  SBC   HL,DE   
42A5   7D                     LD   A,L   
42A6   B4                     OR   H   
42A7   28 52                  JR   Z,expectM_0_2390S43   
42A9   CD C8 07               CALL   printStr   
42AC   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
42BA   CD C8 07               CALL   printStr   
42BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CC   21 03 00               LD   HL,3   
42CF   CD 1C 07               CALL   prtdec   
42D2   CD C8 07               CALL   printStr   
42D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42E2   E1                     POP   hl   
42E3   E5                     PUSH   hl   
42E4   CD 1C 07               CALL   prtdec   
42E7   E1                     POP   hl   
42E8   CD C8 07               CALL   printStr   
42EB   20 28 23 00            .CSTR   " (#"   
42EF   CD 64 07               CALL   prthex   
42F2   CD C8 07               CALL   printStr   
42F5   29 0D 0A 00            .CSTR   ")\r\n"   
42F9   76                     HALT      
42FA   00                     .CSTR      
42FB                EXPECTM_0_2390S43:      
42FB   E1                     POP   HL   
42FC                          ;*Macro unroll:  test "10 sqrt frac", 1
42FC   31 80 18               LD   SP,STACK   
42FF   CD E7 07               CALL   init   
4302   CD F5 09               CALL   exec   
4305   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4312                          ;*Macro unroll:  expect "10 sqrt frac",1
4312   E1                     POP   HL   
4313   E5                     PUSH   HL   
4314   11 01 00               LD   DE,1   
4317   B7                     OR   A   
4318   ED 52                  SBC   HL,DE   
431A   7D                     LD   A,L   
431B   B4                     OR   H   
431C   28 57                  JR   Z,expectM_0_2391S43   
431E   CD C8 07               CALL   printStr   
4321   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4334   CD C8 07               CALL   printStr   
4337   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4346   21 01 00               LD   HL,1   
4349   CD 1C 07               CALL   prtdec   
434C   CD C8 07               CALL   printStr   
434F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
435C   E1                     POP   hl   
435D   E5                     PUSH   hl   
435E   CD 1C 07               CALL   prtdec   
4361   E1                     POP   hl   
4362   CD C8 07               CALL   printStr   
4365   20 28 23 00            .CSTR   " (#"   
4369   CD 64 07               CALL   prthex   
436C   CD C8 07               CALL   printStr   
436F   29 0D 0A 00            .CSTR   ")\r\n"   
4373   76                     HALT      
4374   00                     .CSTR      
4375                EXPECTM_0_2391S43:      
4375   E1                     POP   HL   
4376                          ;*Macro unroll:  test "7 3 /", 2
4376   31 80 18               LD   SP,STACK   
4379   CD E7 07               CALL   init   
437C   CD F5 09               CALL   exec   
437F   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4385                          ;*Macro unroll:  expect "7 3 /",2
4385   E1                     POP   HL   
4386   E5                     PUSH   HL   
4387   11 02 00               LD   DE,2   
438A   B7                     OR   A   
438B   ED 52                  SBC   HL,DE   
438D   7D                     LD   A,L   
438E   B4                     OR   H   
438F   28 50                  JR   Z,expectM_0_2392S43   
4391   CD C8 07               CALL   printStr   
4394   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
43A0   CD C8 07               CALL   printStr   
43A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43B2   21 02 00               LD   HL,2   
43B5   CD 1C 07               CALL   prtdec   
43B8   CD C8 07               CALL   printStr   
43BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43C8   E1                     POP   hl   
43C9   E5                     PUSH   hl   
43CA   CD 1C 07               CALL   prtdec   
43CD   E1                     POP   hl   
43CE   CD C8 07               CALL   printStr   
43D1   20 28 23 00            .CSTR   " (#"   
43D5   CD 64 07               CALL   prthex   
43D8   CD C8 07               CALL   printStr   
43DB   29 0D 0A 00            .CSTR   ")\r\n"   
43DF   76                     HALT      
43E0   00                     .CSTR      
43E1                EXPECTM_0_2392S43:      
43E1   E1                     POP   HL   
43E2                          ;*Macro unroll:  test "7 3 / frac", 1
43E2   31 80 18               LD   SP,STACK   
43E5   CD E7 07               CALL   init   
43E8   CD F5 09               CALL   exec   
43EB   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
43F6                          ;*Macro unroll:  expect "7 3 / frac",1
43F6   E1                     POP   HL   
43F7   E5                     PUSH   HL   
43F8   11 01 00               LD   DE,1   
43FB   B7                     OR   A   
43FC   ED 52                  SBC   HL,DE   
43FE   7D                     LD   A,L   
43FF   B4                     OR   H   
4400   28 55                  JR   Z,expectM_0_2393S43   
4402   CD C8 07               CALL   printStr   
4405   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
4416   CD C8 07               CALL   printStr   
4419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4428   21 01 00               LD   HL,1   
442B   CD 1C 07               CALL   prtdec   
442E   CD C8 07               CALL   printStr   
4431   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
443E   E1                     POP   hl   
443F   E5                     PUSH   hl   
4440   CD 1C 07               CALL   prtdec   
4443   E1                     POP   hl   
4444   CD C8 07               CALL   printStr   
4447   20 28 23 00            .CSTR   " (#"   
444B   CD 64 07               CALL   prthex   
444E   CD C8 07               CALL   printStr   
4451   29 0D 0A 00            .CSTR   ")\r\n"   
4455   76                     HALT      
4456   00                     .CSTR      
4457                EXPECTM_0_2393S43:      
4457   E1                     POP   HL   
4458                          ;*Macro unroll:  test "1 2 +", 3
4458   31 80 18               LD   SP,STACK   
445B   CD E7 07               CALL   init   
445E   CD F5 09               CALL   exec   
4461   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4467                          ;*Macro unroll:  expect "1 2 +",3
4467   E1                     POP   HL   
4468   E5                     PUSH   HL   
4469   11 03 00               LD   DE,3   
446C   B7                     OR   A   
446D   ED 52                  SBC   HL,DE   
446F   7D                     LD   A,L   
4470   B4                     OR   H   
4471   28 50                  JR   Z,expectM_0_2394S43   
4473   CD C8 07               CALL   printStr   
4476   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4482   CD C8 07               CALL   printStr   
4485   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4494   21 03 00               LD   HL,3   
4497   CD 1C 07               CALL   prtdec   
449A   CD C8 07               CALL   printStr   
449D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44AA   E1                     POP   hl   
44AB   E5                     PUSH   hl   
44AC   CD 1C 07               CALL   prtdec   
44AF   E1                     POP   hl   
44B0   CD C8 07               CALL   printStr   
44B3   20 28 23 00            .CSTR   " (#"   
44B7   CD 64 07               CALL   prthex   
44BA   CD C8 07               CALL   printStr   
44BD   29 0D 0A 00            .CSTR   ")\r\n"   
44C1   76                     HALT      
44C2   00                     .CSTR      
44C3                EXPECTM_0_2394S43:      
44C3   E1                     POP   HL   
44C4                             ; test ":h {1} def :h addr call", 1
44C4                             ; ; call enter
44C4                             ; ;     .cstr "1 3",$22,"+"
44C4                             ; ; expect "1 3 DUP +", 6
44C4   CD C8 07               CALL   printStr   
44C7   44 6F 6E 65 21 00      .CSTR   "Done!"   
44CD   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0674 DEFINED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1780 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 256 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 258 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 260 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 262 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 264 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 266 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 268 IN Siena.asm
AND_:               0361 DEFINED AT LINE 270 IN Siena.asm
AND1:               0368 DEFINED AT LINE 278 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 302 IN Siena.asm
OR_:                036C DEFINED AT LINE 283 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 293 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
INV_:               037E DEFINED AT LINE 304 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 308 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 315 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 320 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB1:               039F DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
SUB2:               03A1 DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
NOT_:               03A7 DEFINED AT LINE 340 IN Siena.asm
EQ_:                03AC DEFINED AT LINE 344 IN Siena.asm
EQ1:                03AD DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
GT_:                03B1 DEFINED AT LINE 350 IN Siena.asm
LT_:                03B5 DEFINED AT LINE 355 IN Siena.asm
LT1:                03B7 DEFINED AT LINE 358 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
DIV_:               03C2 DEFINED AT LINE 366 IN Siena.asm
COMMENT_:           03D1 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
NOP_:               03DA DEFINED AT LINE 385 IN Siena.asm
SHL:                03DC DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
SHL1:               03E4 DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
SHL2:               03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHR:                03EC DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
SHR1:               03F4 DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
SHR2:               03F8 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
MUL:                03FF DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
MUL2:               0409 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
NUM:                041B DEFINED AT LINE 451 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0424 DEFINED AT LINE 457 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
NUM1:               0425 DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
NUM2:               043D DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
NUM3:               0448 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
HEXNUM:             044B DEFINED AT LINE 489 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            044E DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
HEXNUM2:            0456 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
STRING:             0468 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
STRING2:            0473 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
CHAR:               0481 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
CHAR1:              0484 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
CHAR2:              0490 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR3:              0493 DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PAREN:              0496 DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PARENEND:           0498 DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              049A DEFINED AT LINE 567 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
BLOCKEND:           049C DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
ARG:                049E DEFINED AT LINE 629 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               04BC DEFINED AT LINE 652 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              04BE DEFINED AT LINE 671 IN Siena.asm
GET:                04BE DEFINED AT LINE 672 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
GET1:               04BF DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
GET2:               04CD DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
SET:                04D0 DEFINED AT LINE 688 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
SET1:               04E2 DEFINED AT LINE 702 IN Siena.asm
                    > USED AT LINE 697 IN Siena.asm
IF:                 04E5 DEFINED AT LINE 708 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
IFTE:               04E7 DEFINED AT LINE 715 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
SWITCH:             04E9 DEFINED AT LINE 745 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
LOOP:               04F3 DEFINED AT LINE 758 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
WORDS:              04F5 DEFINED AT LINE 808 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
BYTES:              04FA DEFINED AT LINE 811 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
BYTES1:             04FD DEFINED AT LINE 813 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
ARRAY:              0502 DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARRAYEND:           0504 DEFINED AT LINE 828 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
HASH:               0506 DEFINED AT LINE 923 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
DEF:                0511 DEFINED AT LINE 933 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
CLOSURE:            0515 DEFINED AT LINE 938 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
DEF0:               0515 DEFINED AT LINE 939 IN Siena.asm
DEF1:               052F DEFINED AT LINE 962 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
DEF2:               0553 DEFINED AT LINE 986 IN Siena.asm
DEF3:               0556 DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
DEF4:               055C DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
DEF5:               0571 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
LET:                0574 DEFINED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
LET2:               0598 DEFINED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
ADDR:               059B DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
ADDR1:              05A7 DEFINED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
SYMBOL:             05AF DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
SYMBOL0:            05B7 DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
SYMBOL1:            05B9 DEFINED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
SYMBOL2:            05C8 DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
IDENT:              05D6 DEFINED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
IDENT0:             05DD DEFINED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
IDENT1:             05DF DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
IDENT2:             05EE DEFINED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
IDENT3:             0602 DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
FRAC:               0603 DEFINED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
SQRT1:              0609 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
ABS1:               0616 DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
MOD:                0623 DEFINED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
EQUALS:             062F DEFINED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHANEQ:         0637 DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
LESSTHAN:           063C DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
LESSTHAN1:          0641 DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
TRUE1:              0644 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
FALSE1:             064A DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1186 IN Siena.asm
INPUT:              0650 DEFINED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
OUTPUT:             065B DEFINED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
KEY:                0664 DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
NEG:                066D DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
FILTER:             0674 DEFINED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
MAP:                0674 DEFINED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
HASHSTR:            0676 DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 927 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
HASHSTR1:           0679 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
HASHSTR2:           067E DEFINED AT LINE 1252 IN Siena.asm
DEFINEENTRY:        068F DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
DEFINEENTRY0:       0694 DEFINED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1292 IN Siena.asm
DEFINEENTRY1:       06A3 DEFINED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 1281 IN Siena.asm
DEFINEENTRY2:       06A9 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
DEFINEENTRY3:       06AB DEFINED AT LINE 1296 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
LOOKUPENTRY:        06B5 DEFINED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
LOOKUPENTRY0:       06BA DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1331 IN Siena.asm
LOOKUPENTRY1:       06C9 DEFINED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
LOOKUPENTRY2:       06CF DEFINED AT LINE 1332 IN Siena.asm
LOOKUPENTRY3:       06D1 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
DIVIDE:             06D9 DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
DIVIDE1:            06DE DEFINED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
DIVIDE2:            06EB DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
DIVIDE3:            06EC DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
SQUAREROOT:         06F2 DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
SQUAREROOT1:        06F7 DEFINED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
SQUAREROOT4:        0712 DEFINED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
SQUAREROOT5:        0719 DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
PRTDEC:             071C DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            072B DEFINED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
PRTDEC1:            074D DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
PRTDEC2:            074F DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
PRTDEC3:            075F DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
PRTDEC4:            0760 DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
PRTHEX:             0764 DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            076F DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
PRTHEX3:            0778 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
PRTSTR0:            0783 DEFINED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
PRTSTR:             0787 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
NESTING:            078C DEFINED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
NESTING1A:          0797 DEFINED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
NESTING1:           079A DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
NESTING2:           07A9 DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
NESTING3:           07AB DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
NESTING4:           07B6 DEFINED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
PROMPT:             07B8 DEFINED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
CRLF:               07C1 DEFINED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
PRINTSTR:           07C8 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 137
DEFINE:             07CF DEFINED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
INIT:               07E7 DEFINED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              0801 DEFINED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
START:              0950 DEFINED AT LINE 1700 IN Siena.asm
INTERPRET:          0966 DEFINED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
INTERPRET2:         0970 DEFINED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
INTERPRET3:         0978 DEFINED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
INTERPRET4:         097E DEFINED AT LINE 1725 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
WAITCHAR:           0983 DEFINED AT LINE 1731 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
MACRO:              0992 DEFINED AT LINE 1741 IN Siena.asm
WAITCHAR1:          0994 DEFINED AT LINE 1758 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
WAITCHAR3:          09A2 DEFINED AT LINE 1767 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
WAITCHAR4:          09B8 DEFINED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
NEXT:               09C0 DEFINED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1793 IN Siena.asm
NEXT1:              09CF DEFINED AT LINE 1800 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
ESCAPE:             09DA DEFINED AT LINE 1807 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
EXIT:               09DE DEFINED AT LINE 1812 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
EXEC:               09F5 DEFINED AT LINE 1836 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0A11 DEFINED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
CALL:               0A13 DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
CALL1:              0A14 DEFINED AT LINE 1870 IN Siena.asm
CALL2:              0A33 DEFINED AT LINE 1897 IN Siena.asm
                    > USED AT LINE 1873 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1566 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 372 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1572 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2384S43:  406B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2385S43:  40D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2386S43:  4145 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2387S43:  41B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2388S43:  421F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2389S43:  428B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2390S43:  42FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2391S43:  4375 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2392S43:  43E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2393S43:  4457 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2394S43:  44C3 DEFINED AT LINE 34
                    > USED AT LINE 10
