0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 83 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   B0                     DB   lsb(exit_)   ; NUL
0201   C8                     DB   lsb(nop_)   ; SOH
0202   C8                     DB   lsb(nop_)   ; STX
0203   AD                     DB   lsb(etx_)   ; ETX
0204   C8                     DB   lsb(nop_)   ; 
0205   C8                     DB   lsb(nop_)   ; 
0206   C8                     DB   lsb(nop_)   ; 
0207   C8                     DB   lsb(nop_)   ; 
0208   C8                     DB   lsb(nop_)   ; 
0209   C8                     DB   lsb(nop_)   ; 
020A   C8                     DB   lsb(nop_)   ; 
020B   C8                     DB   lsb(nop_)   ; 
020C   C8                     DB   lsb(nop_)   ; 
020D   C8                     DB   lsb(nop_)   ; 
020E   C8                     DB   lsb(nop_)   ; 
020F   C8                     DB   lsb(nop_)   ; 
0210   C8                     DB   lsb(nop_)   ; 
0211   C8                     DB   lsb(nop_)   ; 
0212   C8                     DB   lsb(nop_)   ; 
0213   C8                     DB   lsb(nop_)   ; 
0214   C8                     DB   lsb(nop_)   ; 
0215   C8                     DB   lsb(nop_)   ; 
0216   C8                     DB   lsb(nop_)   ; 
0217   C8                     DB   lsb(nop_)   ; 
0218   C8                     DB   lsb(nop_)   ; 
0219   C8                     DB   lsb(nop_)   ; 
021A   C8                     DB   lsb(nop_)   ; 
021B   C8                     DB   lsb(nop_)   ; 
021C   C8                     DB   lsb(nop_)   ; 
021D   C8                     DB   lsb(nop_)   ; 
021E   C8                     DB   lsb(nop_)   ; 
021F   C8                     DB   lsb(nop_)   ; 
0220   C8                     DB   lsb(nop_)   ; 
0221   C8                     DB   lsb(nop_)   ;    !
0222   C8                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C8                     DB   lsb(nop_)   ;    %
0226   C8                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   24                     DB   lsb(block_)   ;    (
0229   27                     DB   lsb(blockend_)   ;    )
022A   C8                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C8                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   18                     DB   lsb(dot_)   ;    .
022F   C8                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C8                     DB   lsb(nop_)   ;    :
023B   C8                     DB   lsb(nop_)   ;    ;
023C   C8                     DB   lsb(nop_)   ;    <
023D   C8                     DB   lsb(nop_)   ;    =
023E   C8                     DB   lsb(nop_)   ;    >
023F   C8                     DB   lsb(nop_)   ;    ?
0240   B3                     DB   lsb(fetch_)   ;    @
0241   8D                     DB   lsb(call_)   ;    A
0242   8D                     DB   lsb(call_)   ;    B
0243   8D                     DB   lsb(call_)   ;    C
0244   8D                     DB   lsb(call_)   ;    D
0245   8D                     DB   lsb(call_)   ;    E
0246   8D                     DB   lsb(call_)   ;    F
0247   8D                     DB   lsb(call_)   ;    G
0248   8D                     DB   lsb(call_)   ;    h
0249   8D                     DB   lsb(call_)   ;    I
024A   8D                     DB   lsb(call_)   ;    J
024B   8D                     DB   lsb(call_)   ;    K
024C   8D                     DB   lsb(call_)   ;    L
024D   8D                     DB   lsb(call_)   ;    M
024E   8D                     DB   lsb(call_)   ;    N
024F   8D                     DB   lsb(call_)   ;    O
0250   8D                     DB   lsb(call_)   ;    p
0251   8D                     DB   lsb(call_)   ;    Q
0252   8D                     DB   lsb(call_)   ;    R
0253   8D                     DB   lsb(call_)   ;    S
0254   8D                     DB   lsb(call_)   ;    T
0255   8D                     DB   lsb(call_)   ;    U
0256   8D                     DB   lsb(call_)   ;    V
0257   8D                     DB   lsb(call_)   ;    W
0258   8D                     DB   lsb(call_)   ;    X
0259   8D                     DB   lsb(call_)   ;    Y
025A   8D                     DB   lsb(call_)   ;    Z
025B   C8                     DB   lsb(nop_)   ;    [
025C   C8                     DB   lsb(nop_)   ;    \
025D   C8                     DB   lsb(nop_)   ;    ]
025E   C8                     DB   lsb(nop_)   ;    ^
025F   C8                     DB   lsb(nop_)   ;    _
0260   2A                     DB   lsb(char_)   ;    `    	
0261   2D                     DB   lsb(a_)   ;    a
0262   39                     DB   lsb(var_)   ;    b
0263   30                     DB   lsb(c_)   ;    c
0264   33                     DB   lsb(d_)   ;    d
0265   36                     DB   lsb(e_)   ;    e
0266   39                     DB   lsb(f_)   ;    f
0267   3C                     DB   lsb(g_)   ;    g
0268   39                     DB   lsb(var_)   ;    h
0269   3F                     DB   lsb(i_)   ;    i
026A   39                     DB   lsb(var_)   ;    j
026B   42                     DB   lsb(k_)   ;    k
026C   45                     DB   lsb(l_)   ;    l
026D   48                     DB   lsb(m_)   ;    m
026E   48                     DB   lsb(m_)   ;    n
026F   4E                     DB   lsb(o_)   ;    o
0270   51                     DB   lsb(p_)   ;    p
0271   39                     DB   lsb(var_)   ;    q
0272   54                     DB   lsb(r_)   ;    r
0273   57                     DB   lsb(s_)   ;    s
0274   39                     DB   lsb(var_)   ;    t
0275   5A                     DB   lsb(u_)   ;    u
0276   39                     DB   lsb(var_)   ;    v
0277   5D                     DB   lsb(w_)   ;    w
0278   60                     DB   lsb(x_)   ;    x
0279   39                     DB   lsb(var_)   ;    y
027A   39                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   6F                     DB   lsb(or_)   ;    |
027D   15                     DB   lsb(lambdaEnd_)   ;    }
027E   C8                     DB   lsb(nop_)   ;    ~
027F   C8                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                NESTINGSTR:      
0300   22 27 28 29 5B 5D 7B 7D 60 00 .CSTR   $22,"'()[]{}`"   
030A                ETX:         
030A   21 00 E6               LD   hl,-DSTACK   
030D   39                     ADD   hl,sp   
030E   30 03                  JR   nc,etx1   
0310   31 00 1A               LD   sp,DSTACK   
0313                ETX1:        
0313   18 16                  JR   interpret   
0315                START:       
0315   31 00 1A               LD   sp,DSTACK   ; start of Siena
0318   CD 83 08               CALL   init   ; setups
031B   CD A4 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
031E   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
032B                INTERPRET:      
032B   CD 9F 07               CALL   prompt   
032E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0331   ED 43 84 1B            LD   (vTIBPtr),bc   
0335                INTERPRET2:      ; calc nesting (a macro might have changed it)
0335   1E 00                  LD   e,0   ; initilize nesting value
0337   C5                     PUSH   bc   ; save offset into TIB,
0338                             ; bc is also the count of chars in TIB
0338   21 00 18               LD   hl,TIB   ; hl is start of TIB
033B   18 06                  JR   interpret4   
033D                INTERPRET3:      
033D   7E                     LD   a,(hl)   ; a = char in TIB
033E   23                     INC   hl   ; inc pointer into TIB
033F   0B                     DEC   bc   ; dec count of chars in TIB
0340   CD C9 08               CALL   nesting   ; update nesting value
0343                INTERPRET4:      
0343   79                     LD   a,c   ; is count zero?
0344   B0                     OR   b   
0345   20 F6                  JR   nz,interpret3   ; if not loop
0347   C1                     POP   bc   ; restore offset into TIB
0348                WAITCHAR:      
0348   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
034B   FE 20                  CP   $20   ; compare to space
034D   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
034F   FE 00                  CP   $0   ; is it end of string? null end of string
0351   28 45                  JR   z,waitchar4   
0353   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0355   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
0357                MACRO:       
0357   ED 43 84 1B            LD   (vTIBPtr),bc   
035B   21 80 1A               LD   hl,ctrlCodes   
035E   85                     ADD   a,l   ; look up key of macros
035F   6F                     LD   l,a   
0360   5E                     LD   e,(hl)   
0361   7B                     LD   a,e   
0362   B7                     OR   a   
0363   28 09                  JR   z,macro1   
0365   16 01                  LD   d,msb(macros)   
0367   D5                     PUSH   de   
0368   CD 43 09               CALL   enter   ; Siena go operation and jump to it
036B   67 6F 00               .CSTR   "go"   
036E                MACRO1:      
036E   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0372   18 C1                  JR   interpret2   
0374                WAITCHAR1:      
0374   21 00 18               LD   hl,TIB   
0377   09                     ADD   hl,bc   
0378   77                     LD   (hl),a   ; store the character in textbuf
0379   03                     INC   bc   
037A   CD 85 00               CALL   putchar   ; echo character to screen
037D   CD C9 08               CALL   nesting   
0380   18 C6                  JR   waitchar   ; wait for next character
0382                WAITCHAR3:      
0382   21 00 18               LD   hl,TIB   
0385   09                     ADD   hl,bc   
0386   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0388   23                     INC   hl   
0389   36 0A                  LD   (hl),"\n"   
038B   23                     INC   hl   
038C   03                     INC   bc   
038D   03                     INC   bc   
038E   CD C7 07               CALL   crlf   ; echo character to screen
0391   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0392   B7                     OR   a   
0393   20 B3                  JR   nz,waitchar   
0395   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0397   03                     INC   bc   
0398                WAITCHAR4:      
0398   ED 43 84 1B            LD   (vTIBPtr),bc   
039C   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
039F   0B                     DEC   bc   
03A0                             ; ********************************************************************************
03A0                             ; 
03A0                             ; Dispatch Routine.
03A0                             ; 
03A0                             ; Get the next character and form a 1 byte jump address
03A0                             ; 
03A0                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
03A0                             ; jump to the selected function.
03A0                             ; 
03A0                             ; Individual handler routines will deal with each category:
03A0                             ; 
03A0                             ; 1. Detect characters a-z and jump to the User Command handler routine
03A0                             ; 
03A0                             ; 2. Detect characters a-z and jump to the variable handler routine
03A0                             ; 
03A0                             ; 3. All other characters are punctuation and cause a jump to the associated
03A0                             ; primitive code.
03A0                             ; 
03A0                             ; Instruction Pointer IP bc is incremented
03A0                             ; 
03A0                             ; *********************************************************************************
03A0                NEXT:        
03A0   03                     INC   bc   ;  Increment the IP
03A1   0A                     LD   a,(bc)   ;  Get the next character and dispatch
03A2   6F                     LD   l,a   ;  Index into table
03A3   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
03A5   6E                     LD   l,(hl)   ;  get low jump address
03A6   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
03A8   E9                     JP   (hl)   ;  Jump to routine
03A9                             ; **********************************************************************			
03A9                             ; Page 4 primitive routines
03A9                             ; **********************************************************************
03A9                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 CE 07               JP   num   
0403                HEXNUM_:      
0403   C3 FF 07               JP   hexnum   
0406                ARG_:        
0406   C3 A6 09               JP   arg   
0409                STRDEF_:      
0409   C3 F5 08               JP   strDef   
040C                NEWADD2_:      
040C   C3 25 09               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 57 09               JP   lambda   
0412                GO_:         
0412   C3 43 09               JP   go   
0415                LAMBDAEND_:      
0415   C3 92 09               JP   lambdaEnd   
0418                DOT_:        
0418   E1                     POP   hl   
0419   CD 1C 08               CALL   prtdec   
041C                DOT2:        
041C   3E 20                  LD   a," "   
041E   CD 85 00               CALL   putchar   
0421   C3 A0 03               JP   next   
0424                BLOCK_:      
0424   C3 EF 09               JP   block   
0427                BLOCKEND_:      
0427   C3 22 0A               JP   blockend   
042A                CHAR_:       
042A   C3 0F 09               JP   char   
042D                A_:          
042D   C3 63 06               JP   a   
0430                C_:          
0430   C3 73 06               JP   c   
0433                D_:          
0433   C3 83 06               JP   d   
0436                E_:          
0436   C3 9D 06               JP   e   
0439                F_:          
0439   C3 A8 06               JP   f   
043C                G_:          
043C   C3 B3 06               JP   g   
043F                I_:          
043F   C3 C8 06               JP   i   
0442                K_:          
0442   C3 E0 06               JP   k   
0445                L_:          
0445   C3 EE 06               JP   l   
0448                M_:          
0448   C3 FE 06               JP   m   
044B                N_:          
044B   C3 0E 07               JP   n   
044E                O_:          
044E   C3 19 07               JP   o   
0451                P_:          
0451   C3 29 07               JP   p   
0454                R_:          
0454   C3 34 07               JP   r   
0457                S_:          
0457   C3 3F 07               JP   s   
045A                U_:          
045A   C3 5E 07               JP   u   
045D                W_:          
045D   C3 69 07               JP   w   
0460                X_:          
0460   C3 74 07               JP   x   
0463                AND_:        
0463   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0464   E1                     POP   hl   
0465   7B                     LD   a,e   
0466   A5                     AND   l   
0467   6F                     LD   l,a   
0468   7A                     LD   a,d   
0469   A4                     AND   h   
046A                AND1:        
046A   67                     LD   h,a   
046B   E5                     PUSH   hl   
046C   C3 A0 03               JP   next   
046F                OR_:         
046F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0470   E1                     POP   hl   
0471   7B                     LD   a,e   
0472   B5                     OR   l   
0473   6F                     LD   l,a   
0474   7A                     LD   a,d   
0475   B4                     OR   h   
0476   18 F2                  JR   and1   
0478                XOR_:        
0478   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0479                XOR1:        
0479   E1                     POP   hl   
047A   7B                     LD   a,e   
047B   AD                     XOR   l   
047C   6F                     LD   l,a   
047D   7A                     LD   a,d   
047E   AC                     XOR   h   
047F   18 E9                  JR   and1   
0481                INV_:        ; Bitwise INVert the top member of the stack
0481   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0484   18 F3                  JR   xor1   
0486                ADD_:        ; add the top 2 members of the stack
0486   D1                     POP   de   
0487   E1                     POP   hl   
0488   19                     ADD   hl,de   
0489   E5                     PUSH   hl   
048A   C3 A0 03               JP   next   
048D                CALL_:       
048D   0A                     LD   a,(bc)   
048E   CD B1 08               CALL   lookupRef1   
0491   5E                     LD   e,(hl)   
0492   23                     INC   hl   
0493   56                     LD   d,(hl)   
0494   C3 44 09               JP   go1   
0497                HDOT_:       ; print hexadecimal
0497   E1                     POP   hl   
0498   CD 64 08               CALL   prthex   
049B   C3 1C 04               JP   dot2   
049E                DROP_:       ; Discard the top member of the stack
049E   E1                     POP   hl   
049F   C3 A0 03               JP   next   
04A2                UNDROP_:      
04A2   3B                     DEC   sp   
04A3   3B                     DEC   sp   
04A4   C3 A0 03               JP   next   
04A7                DUP_:        
04A7   E1                     POP   hl   ; Duplicate the top member of the stack
04A8   E5                     PUSH   hl   
04A9   E5                     PUSH   hl   
04AA   C3 A0 03               JP   next   
04AD                ETX_:        
04AD   C3 0A 03               JP   ETX   
04B0                EXIT_:       
04B0   C3 C2 09               JP   exit   
04B3                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B3   E1                     POP   hl   
04B4                FETCH1:      
04B4   5E                     LD   e,(hl)   
04B5   23                     INC   hl   
04B6   56                     LD   d,(hl)   
04B7   D5                     PUSH   de   
04B8   C3 A0 03               JP   next   
04BB                KEY_:        
04BB   CD 81 00               CALL   getchar   
04BE   26 00                  LD   h,0   
04C0   6F                     LD   l,a   
04C1   E5                     PUSH   hl   
04C2   C3 A0 03               JP   next   
04C5   C3 82 07     MUL_:     JP   mul   
04C8                NOP_:        
04C8   C3 A0 03               JP   next   ; hardwire white space to always go to next (important for arrays)
04CB                OVER_:       
04CB   E1                     POP   hl   ; Duplicate 2nd element of the stack
04CC   D1                     POP   de   
04CD   D5                     PUSH   de   
04CE   E5                     PUSH   hl   
04CF   D5                     PUSH   de   ; and push it to top of stack
04D0   C3 A0 03               JP   next   
04D3                ROT_:        ; a b c -- b c a
04D3   D1                     POP   de   ; a b    de = c
04D4   E1                     POP   hl   ; a       hl = b
04D5   E3                     EX   (sp),hl   ; b       hl = a
04D6   D5                     PUSH   de   ; b c
04D7   E5                     PUSH   hl   ; b c a
04D8   C3 A0 03               JP   next   
04DB                             ;  Left shift { is multiply by 2		
04DB                SHL_:        
04DB   E1                     POP   hl   ; Duplicate the top member of the stack
04DC   29                     ADD   hl,hl   
04DD   E5                     PUSH   hl   ; shift left fallthrough into add_
04DE   C3 A0 03               JP   next   
04E1                             ;  Right shift } is a divide by 2		
04E1                SHR_:        
04E1   E1                     POP   hl   ; Get the top member of the stack
04E2                SHR1:        
04E2   CB 3C                  SRL   h   
04E4   CB 1D                  RR   l   
04E6   E5                     PUSH   hl   
04E7   C3 A0 03               JP   next   
04EA                STORE_:      ; Store the value at the address placed on the top of the stack
04EA   E1                     POP   hl   
04EB   D1                     POP   de   
04EC   73                     LD   (hl),e   
04ED   23                     INC   hl   
04EE   72                     LD   (hl),d   
04EF   C3 A0 03               JP   next   
04F2                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04F2   E1                     POP   hl   
04F3   E3                     EX   (sp),hl   
04F4   E5                     PUSH   hl   
04F5   C3 A0 03               JP   next   
04F8                NEG_:        
04F8   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04FB   D1                     POP   de   
04FC   18 02                  JR   sub2   ; use the SUBtract routine
04FE                SUB_:        ; Subtract the value 2nd on stack from top of stack
04FE   D1                     POP   de   
04FF   E1                     POP   hl   ; Entry point for INVert
0500                SUB2:        
0500   B7                     OR   a   ; Entry point for NEGate
0501   ED 52                  SBC   hl,de   
0503   E5                     PUSH   hl   
0504   C3 A0 03               JP   next   
0507                EQ_:         
0507   E1                     POP   hl   
0508   D1                     POP   de   
0509   B7                     OR   a   ; reset the carry flag
050A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
050C   28 15                  JR   z,true_   
050E                FALSE_:      
050E   21 00 00               LD   hl,0   
0511   E5                     PUSH   hl   
0512   C3 A0 03               JP   next   
0515                GT_:         
0515   D1                     POP   de   
0516   E1                     POP   hl   
0517   18 02                  JR   lt1   
0519                LT_:         
0519   E1                     POP   hl   
051A   D1                     POP   de   
051B                LT1:         
051B   B7                     OR   a   ; reset the carry flag
051C   ED 52                  SBC   hl,de   
051E   28 EE                  JR   z,false_   
0520   FA 0E 05               JP   m,false_   
0523                TRUE_:       
0523   21 01 00               LD   hl,1   
0526   E5                     PUSH   hl   
0527   C3 A0 03               JP   next   
052A                GTE_:        
052A   D1                     POP   de   
052B   E1                     POP   hl   
052C   18 02                  JR   lte1   
052E                LTE_:        
052E   E1                     POP   hl   
052F   D1                     POP   de   
0530                LTE1:        
0530   B7                     OR   a   ; reset the carry flag
0531   ED 52                  SBC   hl,de   
0533   FA 0E 05               JP   m,false_   
0536   C3 FF FF               JP   true   
0539                VAR_:        
0539   0A                     LD   a,(bc)   
053A   CD B7 08               CALL   lookupRef2   
053D   E5                     PUSH   hl   
053E   C3 A0 03               JP   next   
0541                DIV_:        
0541   18 04                  JR   div   
0543                             ;*******************************************************************
0543                             ; Page 5 primitive routines
0543                             ;*******************************************************************
0543                             ;falls through
0543   E5                     PUSH   hl   
0544   C3 A0 03               JP   next   
0547                             ; ********************************************************************
0547                             ; 16-bit division subroutine.
0547                             ; 
0547                             ; bc: divisor, de: dividend, hl: remainder
0547                             ; *********************************************************************
0547                             ; This divides de by bc, storing the result in de, remainder in hl
0547                             ; *********************************************************************
0547                             ; 1382 cycles
0547                             ; 35 bytes (reduced from 48)
0547                             ; 
0547                DIV:         ;=34
0547   D1                     POP   de   ; get first value
0548   E1                     POP   hl   ; get 2nd value
0549   C5                     PUSH   bc   ; Preserve the IP
054A   44                     LD   b,h   ; bc = 2nd value
054B   4D                     LD   c,l   
054C                             ; 
054C   21 00 00               LD   hl,0   ; Zero the remainder
054F   3E 10                  LD   a,16   ; Loop counter
0551                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0551   CB 21                  SLA   c   
0553   CB 10                  RL   b   
0555   ED 6A                  ADC   hl,hl   
0557   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0559   38 03                  JR   c,div2   
055B   0C                     INC   c   
055C   18 01                  JR   div3   
055E                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
055E   19                     ADD   hl,de   
055F                DIV3:        
055F   3D                     DEC   a   
0560   20 EF                  JR   nz,div1   
0562   50                     LD   d,b   ; Result from bc to de
0563   59                     LD   e,c   
0564                DIV4:        
0564   C1                     POP   bc   ; Restore the IP
0565   D5                     PUSH   de   ; push Result
0566   E5                     PUSH   hl   ; push remainder
0567   C3 A0 03               JP   next   
056A                             ;=57
056A                             ; **************************************************************************
056A                             ; Page 6 Alt primitives
056A                             ; **************************************************************************
056A                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 A0 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 A0 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 A0 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 A0 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 A0 03               JP   next   
0623                EXEC_:       
0623   CD 29 06               CALL   exec1   
0626   C3 A0 03               JP   next   
0629                EXEC1:       
0629   E1                     POP   hl   
062A   E3                     EX   (sp),hl   
062B   E9                     JP   (hl)   
062C                PROMPT_:      
062C   CD 9F 07               CALL   prompt   
062F   C3 A0 03               JP   next   
0632                INPORT_:      ; \<
0632   E1                     POP   hl   
0633   79                     LD   a,c   
0634   4D                     LD   c,l   
0635   ED 68                  IN   l,(c)   
0637   26 00                  LD   h,0   
0639   4F                     LD   c,a   
063A   E5                     PUSH   hl   
063B   C3 A0 03               JP   next   
063E                NEWLN_:      
063E   CD C7 07               CALL   crlf   
0641   C3 A0 03               JP   next   
0644                OUTPORT_:      
0644   E1                     POP   hl   
0645   59                     LD   e,c   
0646   4D                     LD   c,l   
0647   E1                     POP   hl   
0648   ED 69                  OUT   (c),l   
064A   4B                     LD   c,e   
064B   C3 A0 03               JP   next   
064E                PRTSTR_:      
064E                PRTSTR:      
064E   E1                     POP   hl   
064F   CD AC 07               CALL   putStr   
0652   C3 A0 03               JP   next   
0655                RPUSH_:      
0655   E1                     POP   hl   
0656   CD B1 07               CALL   rpush   
0659   C3 A0 03               JP   next   
065C                RPOP_:       
065C   CD BC 07               CALL   rpop   
065F   E5                     PUSH   hl   
0660   C3 A0 03               JP   next   
0663                             ; **************************************************************************
0663                             ; Page 6 primitive routines continued  (page 7)
0663                             ; **************************************************************************
0663                             ; falls through to following page
0663                A:           
0663   03                     INC   bc   
0664   0A                     LD   a,(bc)   
0665   FE 64                  CP   "d"   
0667   CA 86 04               JP   z,add_   
066A   FE 6E                  CP   "n"   
066C   CA 63 04               JP   z,and_   
066F   0B                     DEC   bc   
0670   C3 39 05               JP   var_   
0673                C:           
0673   03                     INC   bc   
0674   0A                     LD   a,(bc)   
0675   FE 61                  CP   "a"   
0677   CA 7F 07               JP   z,case_   
067A   FE 6C                  CP   "l"   
067C   CA 7F 07               JP   z,closure_   
067F   0B                     DEC   bc   
0680   C3 39 05               JP   var_   
0683                D:           
0683   03                     INC   bc   
0684   0A                     LD   a,(bc)   
0685   FE 65                  CP   "e"   
0687   CA 7F 07               JP   z,def_   
068A   FE 69                  CP   "i"   
068C   CA 41 05               JP   z,div_   
068F   FE 72                  CP   "r"   
0691   CA 9E 04               JP   z,drop_   
0694   FE 75                  CP   "u"   
0696   CA A7 04               JP   z,dup_   
0699   0B                     DEC   bc   
069A   C3 39 05               JP   var_   
069D                E:           
069D   03                     INC   bc   
069E   0A                     LD   a,(bc)   
069F   FE 71                  CP   "q"   
06A1   CA 07 05               JP   z,eq_   
06A4   0B                     DEC   bc   
06A5   C3 39 05               JP   var_   
06A8                F:           
06A8   03                     INC   bc   
06A9   0A                     LD   a,(bc)   
06AA   FE 69                  CP   "i"   
06AC   CA 7F 07               JP   z,filter_   
06AF   0B                     DEC   bc   
06B0   C3 39 05               JP   var_   
06B3                G:           
06B3   03                     INC   bc   
06B4   0A                     LD   a,(bc)   
06B5   FE 65                  CP   "e"   
06B7   CA 7F 07               JP   z,get_   
06BA   FE 6F                  CP   "o"   
06BC   CA 12 04               JP   z,go_   
06BF   FE 74                  CP   "t"   
06C1   CA 15 05               JP   z,gt_   
06C4   0B                     DEC   bc   
06C5   C3 39 05               JP   var_   
06C8                I:           
06C8   03                     INC   bc   
06C9   0A                     LD   a,(bc)   
06CA   FE 66                  CP   "f"   
06CC   CA 3B 0A               JP   z,if   
06CF   FE 6E                  CP   "n"   
06D1   C2 DC 06               JP   nz,i1   
06D4   FE 76                  CP   "v"   
06D6   CA 81 04               JP   z,inv_   
06D9   C3 D6 09               JP   in   
06DC                I1:          
06DC   0B                     DEC   bc   
06DD   C3 39 05               JP   var_   
06E0                K:           
06E0   C3 74 07               JP   x   
06E3   03                     INC   bc   
06E4   0A                     LD   a,(bc)   
06E5   FE 65                  CP   "e"   
06E7   CA BB 04               JP   z,key_   
06EA   0B                     DEC   bc   
06EB   C3 39 05               JP   var_   
06EE                L:           
06EE   03                     INC   bc   
06EF   0A                     LD   a,(bc)   
06F0   FE 65                  CP   "e"   
06F2   CA 7F 07               JP   z,let_   
06F5   FE 74                  CP   "t"   
06F7   CA 19 05               JP   z,lt_   
06FA   0B                     DEC   bc   
06FB   C3 39 05               JP   var_   
06FE                M:           
06FE   03                     INC   bc   
06FF   0A                     LD   a,(bc)   
0700   FE 61                  CP   "a"   
0702   CA 7F 07               JP   z,map_   
0705   FE 75                  CP   "u"   
0707   CA C5 04               JP   z,mul_   
070A   0B                     DEC   bc   
070B   C3 39 05               JP   var_   
070E                N:           
070E   03                     INC   bc   
070F   0A                     LD   a,(bc)   
0710   FE 65                  CP   "e"   
0712   CA F8 04               JP   z,neg_   
0715   0B                     DEC   bc   
0716   C3 39 05               JP   var_   
0719                O:           
0719   03                     INC   bc   
071A   0A                     LD   a,(bc)   
071B   FE 76                  CP   "v"   
071D   CA CB 04               JP   z,over_   
0720   FE 72                  CP   "r"   
0722   CA 6F 04               JP   z,or_   
0725   0B                     DEC   bc   
0726   C3 39 05               JP   var_   
0729                P:           
0729   03                     INC   bc   
072A   0A                     LD   a,(bc)   
072B   FE 72                  CP   "r"   
072D   CA 7F 07               JP   z,print_   
0730   0B                     DEC   bc   
0731   C3 39 05               JP   var_   
0734                R:           
0734   03                     INC   bc   
0735   0A                     LD   a,(bc)   
0736   FE 6F                  CP   "o"   
0738   CA D3 04               JP   z,rot_   
073B   0B                     DEC   bc   
073C   C3 39 05               JP   var_   
073F                S:           
073F   03                     INC   bc   
0740   0A                     LD   a,(bc)   
0741   FE 63                  CP   "c"   
0743   CA 7F 07               JP   z,scan_   
0746   FE 65                  CP   "e"   
0748   CA 7F 07               JP   z,set_   
074B   FE 68                  CP   "h"   
074D   CA 7F 07               JP   z,shift_   
0750   FE 75                  CP   "u"   
0752   CA FE 04               JP   z,sub_   
0755   FE 77                  CP   "w"   
0757   CA F2 04               JP   z,swap_   
075A   0B                     DEC   bc   
075B   C3 39 05               JP   var_   
075E                U:           
075E   03                     INC   bc   
075F   0A                     LD   a,(bc)   
0760   FE 6E                  CP   "n"   
0762   CA A2 04               JP   z,undrop_   
0765   0B                     DEC   bc   
0766   C3 39 05               JP   var_   
0769                W:           
0769   03                     INC   bc   
076A   0A                     LD   a,(bc)   
076B   FE 68                  CP   "h"   
076D   CA 7F 07               JP   z,while_   
0770   0B                     DEC   bc   
0771   C3 39 05               JP   var_   
0774                X:           
0774   03                     INC   bc   
0775   0A                     LD   a,(bc)   
0776   FE 78                  CP   "x"   
0778   CA 78 04               JP   z,xor_   
077B   0B                     DEC   bc   
077C   C3 39 05               JP   var_   
077F                CASE_:       
077F                CLOSURE_:      
077F                DEF_:        
077F                FILTER_:      
077F                GET_:        
077F                IF_:         
077F                LET_:        
077F                MAP_:        
077F                PRINT_:      
077F                SCAN_:       
077F                SET_:        
077F                SHIFT_:      
077F                WHILE_:      
077F   C3 A0 03               JP   next   
0782                             ;*******************************************************************
0782                             ; Page 5 primitive routines continued
0782                             ;*******************************************************************
0782                             ; ********************************************************************
0782                             ; 16-bit multiply
0782                MUL:         ;=19
0782   D1                     POP   de   ; get first value
0783   E1                     POP   hl   
0784   C5                     PUSH   bc   ; Preserve the IP
0785   44                     LD   b,h   ; bc = 2nd value
0786   4D                     LD   c,l   
0787   21 00 00               LD   hl,0   
078A   3E 10                  LD   a,16   
078C                MUL2:        
078C   29                     ADD   hl,hl   
078D   CB 13                  RL   e   
078F   CB 12                  RL   d   
0791   30 04                  JR   nc,$+6   
0793   09                     ADD   hl,bc   
0794   30 01                  JR   nc,$+3   
0796   13                     INC   de   
0797   3D                     DEC   a   
0798   20 F2                  JR   nz,mul2   
079A   C1                     POP   bc   ; Restore the IP
079B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
079C   C3 A0 03               JP   next   
079F                             ;*******************************************************************
079F                             ; Subroutines
079F                             ;*******************************************************************
079F                PROMPT:      
079F   CD A4 08               CALL   printStr   
07A2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07A7   C9                     RET      
07A8                PUTSTR0:      
07A8   CD 85 00               CALL   putchar   
07AB   23                     INC   hl   
07AC                PUTSTR:      
07AC   7E                     LD   a,(hl)   
07AD   B7                     OR   a   
07AE   20 F8                  JR   nz,putStr0   
07B0   C9                     RET      
07B1                RPUSH:       
07B1   DD 2B                  DEC   ix   
07B3   DD 74 00               LD   (ix+0),h   
07B6   DD 2B                  DEC   ix   
07B8   DD 75 00               LD   (ix+0),l   
07BB   C9                     RET      
07BC                RPOP:        
07BC   DD 6E 00               LD   l,(ix+0)   
07BF   DD 23                  INC   ix   
07C1   DD 66 00               LD   h,(ix+0)   
07C4   DD 23                  INC   ix   
07C6                RPOP2:       
07C6   C9                     RET      
07C7                CRLF:        
07C7   CD A4 08               CALL   printStr   
07CA   0D 0A 00               .CSTR   "\r\n"   
07CD   C9                     RET      
07CE                             ;*******************************************************************
07CE                             ;*******************************************************************
07CE                NUM:         
07CE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07D1   0A                     LD   a,(bc)   ; Get numeral or -
07D2   FE 2D                  CP   "-"   
07D4   20 01                  JR   nz,num0   
07D6   03                     INC   bc   ; move to next char, no flags affected
07D7                NUM0:        
07D7   08                     EX   af,af'   ; save zero flag = 0 for later
07D8                NUM1:        
07D8   0A                     LD   a,(bc)   ; read digit
07D9   D6 30                  SUB   "0"   ; less than 0?
07DB   38 13                  JR   c,num2   ; not a digit, exit loop
07DD   FE 0A                  CP   10   ; greater that 9?
07DF   30 0F                  JR   nc,num2   ; not a digit, exit loop
07E1   03                     INC   bc   ; inc IP
07E2   54 5D                  LD   de,hl   ; multiply hl * 10
07E4   29                     ADD   hl,hl   
07E5   29                     ADD   hl,hl   
07E6   19                     ADD   hl,de   
07E7   29                     ADD   hl,hl   
07E8   85                     ADD   a,l   ; add digit in a to hl
07E9   6F                     LD   l,a   
07EA   3E 00                  LD   a,0   
07EC   8C                     ADC   a,h   
07ED   67                     LD   h,a   
07EE   18 E8                  JR   num1   
07F0                NUM2:        
07F0   0B                     DEC   bc   
07F1   08                     EX   af,af'   ; restore zero flag
07F2   20 07                  JR   nz,num3   
07F4   EB                     EX   de,hl   ; negate the value of hl
07F5   21 00 00               LD   hl,0   
07F8   B7                     OR   a   ; jump to sub2
07F9   ED 52                  SBC   hl,de   
07FB                NUM3:        
07FB   E5                     PUSH   hl   ; Put the number on the stack
07FC   C3 A0 03               JP   next   ; and process the next character
07FF                HEXNUM:      ; 
07FF   21 00 00               LD   hl,0   ; Clear hl to accept the number
0802                HEXNUM1:      
0802   03                     INC   bc   
0803   0A                     LD   a,(bc)   ; Get the character which is a numeral
0804   CB 77                  BIT   6,a   ; is it uppercase alpha?
0806   28 02                  JR   z,hexnum2   ; no a decimal
0808   D6 07                  SUB   7   ; sub 7  to make $a - $F
080A                HEXNUM2:      
080A   D6 30                  SUB   $30   ; Form decimal digit
080C   DA F0 07               JP   c,num2   
080F   FE 10                  CP   $0F+1   
0811   D2 F0 07               JP   nc,num2   
0814   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0815   29                     ADD   hl,hl   ; 4X
0816   29                     ADD   hl,hl   ; 8X
0817   29                     ADD   hl,hl   ; 16X
0818   85                     ADD   a,l   ; add into bottom of hl
0819   6F                     LD   l,a   ; 
081A   18 E6                  JR   hexnum1   
081C                PRTDEC:      ;=34 ; removes leading zeros
081C                             ; ld a,h
081C                             ; or l
081C                             ; ld a, "0"
081C                             ; jp z, putchar
081C   CB 7C                  BIT   7,h   
081E   28 0B                  JR   z,prtdec0   
0820   3E 2D                  LD   a,"-"   
0822   CD 85 00               CALL   putchar   
0825   AF                     XOR   a   
0826   95                     SUB   l   
0827   6F                     LD   l,a   
0828   9F                     SBC   a,a   
0829   94                     SUB   h   
082A   67                     LD   h,a   
082B                PRTDEC0:      
082B   C5                     PUSH   bc   
082C   0E 00                  LD   c,0   ; leading zeros flag = false
082E   11 F0 D8               LD   de,-10000   
0831   CD 4D 08               CALL   prtdec1   
0834   11 18 FC               LD   de,-1000   
0837   CD 4D 08               CALL   prtdec1   
083A   11 9C FF               LD   de,-100   
083D   CD 4D 08               CALL   prtdec1   
0840   1E F6                  LD   e,-10   
0842   CD 4D 08               CALL   prtdec1   
0845   0C                     INC   c   ; flag = true for at least digit
0846   1E FF                  LD   e,-1   
0848   CD 4D 08               CALL   prtdec1   
084B   C1                     POP   bc   
084C   C9                     RET      
084D                PRTDEC1:      
084D   06 2F                  LD   b,"0"-1   
084F                PRTDEC2:      
084F   04                     INC   b   
0850   19                     ADD   hl,de   
0851   38 FC                  JR   c,prtdec2   
0853   ED 52                  SBC   hl,de   
0855   3E 30                  LD   a,"0"   
0857   B8                     CP   b   
0858   20 05                  JR   nz,prtdec3   
085A   AF                     XOR   a   
085B   B1                     OR   c   
085C   C8                     RET   z   
085D   18 01                  JR   prtdec4   
085F                PRTDEC3:      
085F   0C                     INC   c   
0860                PRTDEC4:      
0860   78                     LD   a,b   
0861   C3 85 00               JP   putchar   
0864                             ; 
0864                PRTHEX:      
0864                             ; Display hl as a 16-bit number in hex.
0864   C5                     PUSH   bc   ; preserve the IP
0865   7C                     LD   a,h   
0866   CD 6F 08               CALL   prthex2   
0869   7D                     LD   a,l   
086A   CD 6F 08               CALL   prthex2   
086D   C1                     POP   bc   
086E   C9                     RET      
086F                PRTHEX2:      
086F   4F                     LD   c,a   
0870   1F                     RRA      
0871   1F                     RRA      
0872   1F                     RRA      
0873   1F                     RRA      
0874   CD 78 08               CALL   prthex3   
0877   79                     LD   a,c   
0878                PRTHEX3:      
0878   E6 0F                  AND   0x0F   
087A   C6 90                  ADD   a,0x90   
087C   27                     DAA      
087D   CE 40                  ADC   a,0x40   
087F   27                     DAA      
0880   C3 85 00               JP   putchar   
0883                INIT:        
0883   FD 21 00 1A            LD   iy,DSTACK   
0887   DD 21 80 19            LD   ix,RSTACK   
088B   21 80 01               LD   hl,ialtVars   
088E   11 80 1B               LD   de,altVars   
0891   01 10 00               LD   bc,8 * 2   
0894   ED B0                  LDIR      
0896   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
0899   54 5D                  LD   de,hl   
089B   13                     INC   de   
089C   36 00                  LD   (hl),0   
089E   01 68 00               LD   bc,DATASIZE   
08A1   ED B0                  LDIR      
08A3   C9                     RET      
08A4                PRINTSTR:      
08A4   E3                     EX   (sp),hl   ; swap			
08A5   CD AC 07               CALL   putStr   
08A8   23                     INC   hl   ; inc past null
08A9   E3                     EX   (sp),hl   ; put it back	
08AA   C9                     RET      
08AB                LOOKUPREF:      
08AB   16 00                  LD   d,0   
08AD                LOOKUPREF0:      
08AD   FE 61                  CP   "a"   
08AF   30 06                  JR   nc,lookupRef2   
08B1                LOOKUPREF1:      
08B1   D6 61                  SUB   "a"   
08B3   1E 00                  LD   e,0   
08B5   18 04                  JR   lookupRef3   
08B7                LOOKUPREF2:      
08B7   D6 61                  SUB   "a"   
08B9   1E 34                  LD   e,26*2   
08BB                LOOKUPREF3:      
08BB   87                     ADD   a,a   
08BC   83                     ADD   a,e   
08BD   21 C0 1B               LD   hl,DATA   
08C0   85                     ADD   a,l   
08C1   6F                     LD   l,a   
08C2   3E 00                  LD   a,0   
08C4   8C                     ADC   a,h   
08C5   67                     LD   h,a   
08C6   AF                     XOR   a   
08C7   B3                     OR   e   ; sets z flag if a-z
08C8   C9                     RET      
08C9                             ; **************************************************************************
08C9                             ; calculate nesting value
08C9                             ; a is char to be tested,
08C9                             ; e is the nesting value (initially 0)
08C9                             ; e is increased by ( and [
08C9                             ; e is decreased by ) and ]
08C9                             ; e has its bit 7 toggled by `
08C9                             ; limited to 127 levels
08C9                             ; **************************************************************************
08C9                NESTING:      
08C9   FE 22                  CP   $22   ; quote char
08CB   20 0A                  JR   nz,nesting1   
08CD   CB 7B                  BIT   7,e   
08CF   28 03                  JR   z,nesting1a   
08D1   CB BB                  RES   7,e   
08D3   C9                     RET      
08D4                NESTING1A:      
08D4   CB FB                  SET   7,e   
08D6   C9                     RET      
08D7                NESTING1:      
08D7   CB 7B                  BIT   7,e   
08D9   C0                     RET   nz   
08DA   FE 7B                  CP   "{"   
08DC   28 08                  JR   z,nesting2   
08DE   FE 5B                  CP   "["   
08E0   28 04                  JR   z,nesting2   
08E2   FE 28                  CP   "("   
08E4   20 02                  JR   nz,nesting3   
08E6                NESTING2:      
08E6   1C                     INC   e   
08E7   C9                     RET      
08E8                NESTING3:      
08E8   FE 7D                  CP   "}"   
08EA   28 07                  JR   z,nesting4   
08EC   FE 5D                  CP   "]"   
08EE   28 03                  JR   z,nesting4   
08F0   FE 29                  CP   ")"   
08F2   C0                     RET   nz   
08F3                NESTING4:      
08F3   1D                     DEC   e   
08F4   C9                     RET      
08F5                             ; 
08F5                STRDEF:      
08F5   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
08F9   D5                     PUSH   de   ; save start of string
08FA   03                     INC   bc   ; point to next char
08FB   18 03                  JR   strDef2   
08FD                STRDEF1:      
08FD   12                     LD   (de),a   
08FE   13                     INC   de   ; increase count
08FF   03                     INC   bc   ; point to next char
0900                STRDEF2:      
0900   0A                     LD   a,(bc)   
0901   FE 27                  CP   "'"   ; ' is the string terminator
0903   20 F8                  JR   nz,strDef1   
0905   AF                     XOR   a   ; write null to terminate string
0906   12                     LD   (de),a   
0907   13                     INC   de   
0908   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
090C   C3 A0 03               JP   next   
090F                CHAR:        
090F   21 00 00               LD   hl,0   ; if `` is empty
0912                CHAR1:       
0912   03                     INC   bc   ; point to next char
0913   0A                     LD   a,(bc)   
0914   FE 60                  CP   "`"   ; ` is the string terminator
0916   28 09                  JR   z,char3   
0918   FE 5C                  CP   $5c   ; \ is the escape
091A   20 02                  JR   nz,char2   
091C   03                     INC   bc   
091D   0A                     LD   a,(bc)   
091E                CHAR2:       
091E   6F                     LD   l,a   
091F   18 F1                  JR   char1   
0921                CHAR3:       
0921   E5                     PUSH   hl   
0922                             ; dec bc
0922   C3 A0 03               JP   next   
0925                NEWADD2:      
0925   C5                     PUSH   bc   ; push IP
0926   FD 56 FF               LD   d,(iy-1)   
0929   FD 5E FE               LD   e,(iy-2)   
092C   FD 66 FD               LD   h,(iy-3)   
092F   FD 6E FC               LD   l,(iy-4)   
0932   FD E5                  PUSH   iy   ; push base pointer
0934   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
0938   FD 39                  ADD   iy,sp   
093A   19                     ADD   hl,de   ; hl = hl + de
093B   EB                     EX   de,hl   ; de = result
093C   E1                     POP   hl   ; hl = old BP
093D   C1                     POP   bc   ; bc = IP
093E   F9                     LD   sp,hl   ; sp = old BP
093F   D5                     PUSH   de   ; push result
0940   C3 A0 03               JP   next   
0943                ENTER:       
0943                GO:          ; execute Siena lambda at pointer
0943   D1                     POP   de   ; de = pointer to lambda
0944                GO1:         
0944   7A                     LD   a,d   ; skip if destination address is null
0945   B3                     OR   e   
0946   28 0C                  JR   z,go3   
0948                GO2:         
0948   C5                     PUSH   bc   ; save IP
0949   FD E5                  PUSH   iy   ; push base pointer
094B   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
094F   FD 39                  ADD   iy,sp   
0951   42 4B                  LD   bc,de   ; IP = pointer to lambda
0953   0B                     DEC   bc   ; dec to prepare for next routine
0954                GO3:         
0954   C3 A0 03               JP   next   
0957                LAMBDA:      
0957   03                     INC   bc   
0958   2A 8E 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
095B   E5                     PUSH   hl   
095C   16 01                  LD   d,1   ; nesting: count first parenthesis
095E                LAMBDA1:      ; Skip to end of definition
095E   0A                     LD   a,(bc)   ; Get the next character
095F   03                     INC   bc   ; Point to next character
0960   77                     LD   (hl),a   
0961   23                     INC   hl   
0962   FE 27                  CP   "'"   
0964   28 1C                  JR   z,lambda2   
0966   FE 28                  CP   "("   
0968   28 18                  JR   z,lambda2   
096A   FE 29                  CP   ")"   
096C   28 14                  JR   z,lambda2   
096E   FE 7B                  CP   "{"   
0970   28 10                  JR   z,lambda2   
0972   FE 7D                  CP   "}"   ; Is it the end of the definition?
0974   28 0C                  JR   z,lambda2   
0976   FE 5B                  CP   "["   
0978   28 08                  JR   z,lambda2   
097A   FE 5D                  CP   "]"   
097C   28 04                  JR   z,lambda2   
097E   FE 60                  CP   "`"   
0980   20 DC                  JR   nz,lambda1   
0982                LAMBDA2:      
0982   14                     INC   d   
0983   CB 42                  BIT   0,d   ; balanced?
0985   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0987   FE 7D                  CP   "}"   ; Is it the end of the definition?
0989   20 D3                  JR   nz,lambda1   ; get the next element
098B   0B                     DEC   bc   
098C   22 8E 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
098F   C3 A0 03               JP   next   
0992                LAMBDAEND:      
0992   E1                     POP   hl   ; hl = last result
0993   FD 54                  LD   d,iyh   ; de = BP
0995   FD 5D                  LD   e,iyl   
0997   EB                     EX   de,hl   ; hl = BP, de = result
0998   F9                     LD   sp,hl   ; sp = BP
0999   E1                     POP   hl   ; hl = old BP
099A   C1                     POP   bc   ; bc = IP
099B   F9                     LD   sp,hl   ; sp = old BP
099C   FD 21 00 00            LD   iy,0   ; iy = sp
09A0   FD 39                  ADD   iy,sp   
09A2   D5                     PUSH   de   ; push result
09A3   C3 A0 03               JP   next   
09A6                ARG:         
09A6   03                     INC   bc   ; get next char
09A7   0A                     LD   a,(bc)   
09A8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09AA   E6 07                  AND   $07   ; mask
09AC   87                     ADD   a,a   ; double
09AD   6F                     LD   l,a   
09AE   26 00                  LD   h,0   
09B0   FD 5E 00               LD   e,(iy+0)   
09B3   FD 56 01               LD   d,(iy+1)   
09B6   EB                     EX   de,hl   
09B7   B7                     OR   a   
09B8   ED 52                  SBC   hl,de   
09BA   2B                     DEC   hl   
09BB   56                     LD   d,(hl)   
09BC   2B                     DEC   hl   
09BD   5E                     LD   e,(hl)   
09BE   D5                     PUSH   de   
09BF   C3 A0 03               JP   next   
09C2                             ; 
09C2                EXIT:        
09C2   50 59                  LD   de,bc   ; address of code after exit opcode
09C4   13                     INC   de   
09C5   D9                     EXX      
09C6   C1                     POP   bc   ; bc = last result
09C7   FD 54                  LD   d,iyh   ; de = BP
09C9   FD 5D                  LD   e,iyl   
09CB   EB                     EX   de,hl   ; hl = BP, de = result
09CC   F9                     LD   sp,hl   ; sp = BP
09CD   D9                     EXX      
09CE   E1                     POP   hl   ; hl = old BP
09CF   C1                     POP   bc   ; bc = IP
09D0   F9                     LD   sp,hl   ; sp = old BP
09D1   D9                     EXX      
09D2   C5                     PUSH   bc   ; push result
09D3   D9                     EXX      
09D4   EB                     EX   de,hl   
09D5   E9                     JP   (hl)   
09D6                IN:          
09D6   E1                     POP   hl   ; hl = string
09D7   D1                     POP   de   ; de = char
09D8   CD E5 09               CALL   contains   
09DB   21 00 00               LD   hl,0   ; hl = result
09DE   28 01                  JR   z,in1   
09E0   2B                     DEC   hl   ; if nz de = $ffff
09E1                IN1:         
09E1   E5                     PUSH   hl   ; push result
09E2   C3 A0 03               JP   next   
09E5                             ; contains
09E5                             ; search string for char
09E5                             ; e=char hl=str
09E5                             ; set zero flag if string doesn't contain char
09E5                CONTAINS:      
09E5   7E                     LD   a,(hl)   
09E6   23                     INC   hl   
09E7   FE 00                  CP   0   ; is end of string
09E9   C8                     RET   z   
09EA   BB                     CP   e   
09EB   20 F8                  JR   nz,contains   
09ED   B7                     OR   a   ; a is never 0, or a resets zero flag
09EE   C9                     RET      
09EF                BLOCK:       
09EF   03                     INC   bc   
09F0   C5                     PUSH   bc   ; return first opcode of block
09F1   16 01                  LD   d,1   ; nesting: count first parenthesis
09F3                BLOCK1:      ; Skip to end of definition
09F3   0A                     LD   a,(bc)   ; Get the next character
09F4   03                     INC   bc   ; Point to next character
09F5   FE 27                  CP   "'"   
09F7   28 1C                  JR   z,block2   
09F9   FE 28                  CP   "("   
09FB   28 18                  JR   z,block2   
09FD   FE 29                  CP   ")"   
09FF   28 14                  JR   z,block2   
0A01   FE 7B                  CP   "{"   
0A03   28 10                  JR   z,block2   
0A05   FE 7D                  CP   "}"   
0A07   28 0C                  JR   z,block2   
0A09   FE 5B                  CP   "["   
0A0B   28 08                  JR   z,block2   
0A0D   FE 5D                  CP   "]"   
0A0F   28 04                  JR   z,block2   
0A11   FE 60                  CP   "`"   
0A13   20 DE                  JR   nz,block1   
0A15                BLOCK2:      
0A15   14                     INC   d   
0A16   CB 42                  BIT   0,d   ; balanced?
0A18   20 D9                  JR   nz,block1   ; not balanced, get the next element
0A1A   FE 29                  CP   ")"   ; Is it the end of the block?
0A1C   20 D5                  JR   nz,block1   ; get the next element
0A1E   0B                     DEC   bc   
0A1F   C3 A0 03               JP   next   
0A22                BLOCKEND:      
0A22   E1                     POP   hl   ; hl = last result
0A23   FD 54                  LD   d,iyh   ; de = BP
0A25   FD 5D                  LD   e,iyl   
0A27   EB                     EX   de,hl   ; hl = BP, de = result
0A28   F9                     LD   sp,hl   ; sp = BP
0A29   3B                     DEC   sp   
0A2A   3B                     DEC   sp   
0A2B   E1                     POP   hl   ; hl = stack frame's old BP
0A2C   C1                     POP   bc   ; discard parent old BP
0A2D   C1                     POP   bc   ; bc = IP
0A2E   F9                     LD   sp,hl   ; sp = old BP
0A2F   FD 21 00 00            LD   iy,0   ; iy = sp
0A33   FD 39                  ADD   iy,sp   
0A35   3B                     DEC   sp   ; preserve old BP if present
0A36   3B                     DEC   sp   
0A37   D5                     PUSH   de   ; push result
0A38   C3 A0 03               JP   next   
0A3B                IF:          
0A3B   E1                     POP   hl   ; hl = then block
0A3C   D1                     POP   de   ; de = condition
0A3D   13                     INC   de   ; check for true
0A3E   7A                     LD   a,d   
0A3F   B3                     OR   e   
0A40   28 03                  JR   z,if2   
0A42   C3 A0 03               JP   next   ; condition = false, continue
0A45                IF2:         ; condition = true, hl = then block
0A45   C5                     PUSH   bc   ; push IP
0A46   FD 5E 00               LD   e,(iy+0)   
0A49   FD 56 01               LD   d,(iy+1)   ; get old BP from parent stack frame
0A4C   D5                     PUSH   de   ; make this the old BP for this stack frame
0A4D   FD 54                  LD   d,iyh   ; so we can reference parent frame's args
0A4F   FD 5D                  LD   e,iyl   
0A51   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
0A55   FD 39                  ADD   iy,sp   
0A57   D5                     PUSH   de   ; save this frame's old BP immediately
0A58   44 4D                  LD   bc,hl   ; after parent old BP
0A5A   0B                     DEC   bc   
0A5B   C3 A0 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                             ; 
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; 
4000                             ; test "2", 2
4000                             ; test "5 0(0(2)if)if", 5
4000                             ; test "5 0(-1(2)if)if", 5
4000                             ; test "5 -1(2)if", 2
4000                          ;*Macro unroll:  test "5 -1(-1(2)if)if", 2
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 83 08               CALL   init   
4006   CD 43 09               CALL   enter   
4009   35 20 2D 31 28 2D 31 28 32 29 69 66 29 69 66 00 .CSTR   "5 -1(-1(2)if)if"   
4019                          ;*Macro unroll:  expect "5 -1(-1(2)if)if",2
4019   E1                     POP   HL   
401A   E5                     PUSH   HL   
401B   11 02 00               LD   DE,2   
401E   B7                     OR   A   
401F   ED 52                  SBC   HL,DE   
4021   7D                     LD   A,L   
4022   B4                     OR   H   
4023   28 5A                  JR   Z,expectM_0_2125S43   
4025   CD A4 08               CALL   printStr   
4028   43 6F 64 65 3A 20 35 20 2D 31 28 2D 31 28 32 29 69 66 29 69 66 00 .CSTR   "Code: ","5 -1(-1(2)if)if"   
403E   CD A4 08               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 02 00               LD   HL,2   
4053   CD 1C 08               CALL   prtdec   
4056   CD A4 08               CALL   printStr   
4059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4066   E1                     POP   hl   
4067   E5                     PUSH   hl   
4068   CD 1C 08               CALL   prtdec   
406B   E1                     POP   hl   
406C   CD A4 08               CALL   printStr   
406F   20 28 23 00            .CSTR   " (#"   
4073   CD 64 08               CALL   prthex   
4076   CD A4 08               CALL   printStr   
4079   29 0D 0A 00            .CSTR   ")\r\n"   
407D   76                     HALT      
407E   00                     .CSTR      
407F                EXPECTM_0_2125S43:      
407F   E1                     POP   HL   
4080                             ; 
4080                             ; 
4080                             ; test "{{1}go}go", 1
4080                             ; test "5{-1($1)if}go", 5
4080                             ; 
4080                             ; test "1", 1
4080                             ; test "{1}go", 1
4080                             ; test "2{$1}go", 2
4080                             ; test "2 4{$2}go", 4
4080                             ; test "``", 0
4080                             ; test "`a`", $61
4080                             ; test "`\\``", $60
4080                             ; test "`b` 'cba' in", -1
4080                             ; test "`x` 'cba' in", 0
4080                             ; test "1 2 +", 3
4080                             ; test "5 -1(2)if", 2
4080                             ; test "5 0(2)if", 5
4080                             ; 
4080                             ; 
4080                             ; test "'A' @", 65
4080                             ; 
4080                             ; test "1", 1
4080                             ; test "0", 0
4080                             ; test "10", 10
4080                             ; test "123", 123
4080                             ; test "$10", $10
4080                             ; test "$FF", $FF
4080                             ; test "2 3 =", 0
4080                             ; test "3 3 =", 1
4080                             ; test "2 3 <", 1
4080                             ; test "3 3 <", 0
4080                             ; test "3 3 >", 0
4080                             ; test "4 3 >", 1
4080                             ; test "1 2 +", 3
4080                             ; test "123 456 +", 123+456
4080                             ; test "64 128 +", 64+128
4080                             ; test "5 3 -", 2
4080                             ; test "3 5 &", 1
4080                             ; test "3 5 |", 7
4080                             ; test "2 3 *", 6
4080                             ; test "1 2 3 + *", 5
4080                             ; 
4080                             ; ; test "1 2 3 ' +", 3
4080                             ; ; test "1_ 2 +",1
4080                             ; ; test "1_ 1 +",0
4080                             ; ; call enter
4080                             ; ;     .cstr "1 3",$22,"+"
4080                             ; ; expect "1 3 DUP +", 6
4080                             ; 
4080                             ; ; test "5 2/'", 2
4080                             ; ; test "3 5$ -", 2
4080                             ; ; test "5 2/$ '", 1
4080                             ; ; test "2 3%++", 7
4080                             ; ; test "1 2 3~''", 2
4080                             ; ; test "1 2 3~+*", 8
4080                             ; ; test "2a!a@",2
4080                             ; ; test "3x! 1 x@+x! x@", 4
4080                             ; ; test "3x! 1_ x@+x! x@", 2
4080                             ; 
4080                             ; 
4080                             ; 
4080                             ; ; test "1{", 2
4080                             ; ; test "1}", 0
4080                             ; ; test "2}", 1
4080                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4080                             ; ; test "(2) \\^", 2
4080                             ; ; test ":X1; X", 1
4080                             ; ; test ":A100;A", 100
4080                             ; ; test ":Aa!; 3A a@", 3
4080                             ; ; test ":Aa!;:Ba@;4AB", 4
4080                             ; ; test "[]$ '", 0
4080                             ; ; test "[3]$ '", 1
4080                             ; ; test "[3]'@", 3
4080                             ; ; test "[1 2 3]'@", 1
4080                             ; ; test "[1 2 3]'2+@", 2
4080                             ; ; test "\\h@[1]''\\h@$-", 2
4080                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4080                             ; ; test "\\[]$ '", 0
4080                             ; ; test "\\[3]'\\@", 3
4080                             ; ; test "\\[3]$ '", 1
4080                             ; ; test "\\[1 2 3]'\\@", 1
4080                             ; ; test "\\[1 2 3]'1+\\@", 2
4080                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4080                             ; ; test "\\h@\\[1]''\\h@$-", 1
4080                             ; ; test "\\`A`\\@",65
4080                             ; ; test "0 0(1+)", 0
4080                             ; ; test "0 1(1+)", 1
4080                             ; ; test "0 2(1+)", 2
4080                             ; ; test "0 1(0(1+))", 0
4080                             ; ; test "0 1(1(1+))", 1
4080                             ; ; test "0 2(1(1+))", 2
4080                             ; ; test "0 2(2(1+))", 4
4080                             ; ; test "0 1(\\i@+)", 0
4080                             ; ; test "0 2(\\i@+)", 1
4080                             ; ; test "0 3(\\i@+)", 3
4080                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4080                             ; ; test "0t! 10(1 t@+t!) t@",10
4080                             ; ; test "0(100)(200)",200
4080                             ; ; test "1(100)(200)",100
4080                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4080                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4080                             ; ; test ":X10;\\0X", 10
4080                             ; ; test "2 \\1x! \\1x@", 2
4080                             ; 
4080   CD A4 08               CALL   printStr   
4083   44 6F 6E 65 21 00      .CSTR   "Done!"   
4089   76                     HALT      
408A                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 351 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
NESTINGSTR:         0300 DEFINED AT LINE 308 IN Siena.asm
ETX:                030A DEFINED AT LINE 311 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
ETX1:               0313 DEFINED AT LINE 316 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
START:              0315 DEFINED AT LINE 319 IN Siena.asm
INTERPRET:          032B DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
INTERPRET2:         0335 DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
INTERPRET3:         033D DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
INTERPRET4:         0343 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
WAITCHAR:           0348 DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
MACRO:              0357 DEFINED AT LINE 359 IN Siena.asm
MACRO1:             036E DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
WAITCHAR1:          0374 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
WAITCHAR3:          0382 DEFINED AT LINE 385 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
WAITCHAR4:          0398 DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
NEXT:               03A0 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 857 IN Siena.asm
                    > USED AT LINE 863 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 441 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 443 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 445 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 447 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 449 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 451 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 453 IN Siena.asm
GO_:                0412 DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 930 IN Siena.asm
LAMBDAEND_:         0415 DEFINED AT LINE 457 IN Siena.asm
DOT_:               0418 DEFINED AT LINE 459 IN Siena.asm
DOT2:               041C DEFINED AT LINE 462 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
BLOCK_:             0424 DEFINED AT LINE 466 IN Siena.asm
BLOCKEND_:          0427 DEFINED AT LINE 468 IN Siena.asm
CHAR_:              042A DEFINED AT LINE 470 IN Siena.asm
A_:                 042D DEFINED AT LINE 472 IN Siena.asm
C_:                 0430 DEFINED AT LINE 474 IN Siena.asm
D_:                 0433 DEFINED AT LINE 476 IN Siena.asm
E_:                 0436 DEFINED AT LINE 478 IN Siena.asm
F_:                 0439 DEFINED AT LINE 480 IN Siena.asm
G_:                 043C DEFINED AT LINE 482 IN Siena.asm
I_:                 043F DEFINED AT LINE 484 IN Siena.asm
K_:                 0442 DEFINED AT LINE 486 IN Siena.asm
L_:                 0445 DEFINED AT LINE 488 IN Siena.asm
M_:                 0448 DEFINED AT LINE 490 IN Siena.asm
N_:                 044B DEFINED AT LINE 492 IN Siena.asm
O_:                 044E DEFINED AT LINE 494 IN Siena.asm
P_:                 0451 DEFINED AT LINE 496 IN Siena.asm
R_:                 0454 DEFINED AT LINE 498 IN Siena.asm
S_:                 0457 DEFINED AT LINE 500 IN Siena.asm
U_:                 045A DEFINED AT LINE 502 IN Siena.asm
W_:                 045D DEFINED AT LINE 504 IN Siena.asm
X_:                 0460 DEFINED AT LINE 506 IN Siena.asm
AND_:               0463 DEFINED AT LINE 509 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
AND1:               046A DEFINED AT LINE 517 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
OR_:                046F DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
XOR_:               0478 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
XOR1:               0479 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
INV_:               0481 DEFINED AT LINE 544 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
ADD_:               0486 DEFINED AT LINE 548 IN Siena.asm
                    > USED AT LINE 878 IN Siena.asm
CALL_:              048D DEFINED AT LINE 555 IN Siena.asm
HDOT_:              0497 DEFINED AT LINE 563 IN Siena.asm
DROP_:              049E DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
UNDROP_:            04A2 DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
DUP_:               04A7 DEFINED AT LINE 577 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
ETX_:               04AD DEFINED AT LINE 582 IN Siena.asm
EXIT_:              04B0 DEFINED AT LINE 585 IN Siena.asm
FETCH_:             04B3 DEFINED AT LINE 588 IN Siena.asm
FETCH1:             04B4 DEFINED AT LINE 590 IN Siena.asm
KEY_:               04BB DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 955 IN Siena.asm
MUL_:               04C5 DEFINED AT LINE 605 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
NOP_:               04C8 DEFINED AT LINE 607 IN Siena.asm
OVER_:              04CB DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
ROT_:               04D3 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
SHL_:               04DB DEFINED AT LINE 628 IN Siena.asm
SHR_:               04E1 DEFINED AT LINE 635 IN Siena.asm
SHR1:               04E2 DEFINED AT LINE 637 IN Siena.asm
STORE_:             04EA DEFINED AT LINE 643 IN Siena.asm
SWAP_:              04F2 DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
NEG_:               04F8 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
SUB_:               04FE DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
SUB2:               0500 DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
EQ_:                0507 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 912 IN Siena.asm
FALSE_:             050E DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
GT_:                0515 DEFINED AT LINE 682 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
LT_:                0519 DEFINED AT LINE 687 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
LT1:                051B DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
TRUE_:              0523 DEFINED AT LINE 695 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
GTE_:               052A DEFINED AT LINE 700 IN Siena.asm
LTE_:               052E DEFINED AT LINE 704 IN Siena.asm
LTE1:               0530 DEFINED AT LINE 707 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
VAR_:               0539 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
DIV_:               0541 DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
DIV:                0547 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
DIV1:               0551 DEFINED AT LINE 756 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
DIV2:               055E DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
DIV3:               055F DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
DIV4:               0564 DEFINED AT LINE 772 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 785 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 787 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 790 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 805 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 811 IN Siena.asm
EXEC_:              0623 DEFINED AT LINE 817 IN Siena.asm
EXEC1:              0629 DEFINED AT LINE 820 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
PROMPT_:            062C DEFINED AT LINE 825 IN Siena.asm
INPORT_:            0632 DEFINED AT LINE 830 IN Siena.asm
NEWLN_:             063E DEFINED AT LINE 840 IN Siena.asm
OUTPORT_:           0644 DEFINED AT LINE 844 IN Siena.asm
PRTSTR_:            064E DEFINED AT LINE 853 IN Siena.asm
PRTSTR:             064E DEFINED AT LINE 854 IN Siena.asm
RPUSH_:             0655 DEFINED AT LINE 860 IN Siena.asm
RPOP_:              065C DEFINED AT LINE 865 IN Siena.asm
A:                  0663 DEFINED AT LINE 874 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 953 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
                    > USED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
C:                  0673 DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
D:                  0683 DEFINED AT LINE 894 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
E:                  069D DEFINED AT LINE 908 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
F:                  06A8 DEFINED AT LINE 916 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
G:                  06B3 DEFINED AT LINE 924 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
I:                  06C8 DEFINED AT LINE 936 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
I1:                 06DC DEFINED AT LINE 946 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
K:                  06E0 DEFINED AT LINE 950 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
L:                  06EE DEFINED AT LINE 959 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 527 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 8
M:                  06FE DEFINED AT LINE 969 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
N:                  070E DEFINED AT LINE 979 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
O:                  0719 DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
P:                  0729 DEFINED AT LINE 997 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
R:                  0734 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
S:                  073F DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
U:                  075E DEFINED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
W:                  0769 DEFINED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
X:                  0774 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 951 IN Siena.asm
CASE_:              077F DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
CLOSURE_:           077F DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
DEF_:               077F DEFINED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
FILTER_:            077F DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
GET_:               077F DEFINED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
IF_:                077F DEFINED AT LINE 1057 IN Siena.asm
LET_:               077F DEFINED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
MAP_:               077F DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
PRINT_:             077F DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
SCAN_:              077F DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
SET_:               077F DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
SHIFT_:             077F DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
WHILE_:             077F DEFINED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
MUL:                0782 DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
MUL2:               078C DEFINED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
PROMPT:             079F DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
PUTSTR0:            07A8 DEFINED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
PUTSTR:             07AC DEFINED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
RPUSH:              07B1 DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 862 IN Siena.asm
RPOP:               07BC DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
RPOP2:              07C6 DEFINED AT LINE 1128 IN Siena.asm
CRLF:               07C7 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
NUM:                07CE DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
NUM0:               07D7 DEFINED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
NUM1:               07D8 DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
NUM2:               07F0 DEFINED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
NUM3:               07FB DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
HEXNUM:             07FF DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
HEXNUM1:            0802 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
HEXNUM2:            080A DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
PRTDEC:             081C DEFINED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            082B DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
PRTDEC1:            084D DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
PRTDEC2:            084F DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
PRTDEC3:            085F DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
PRTDEC4:            0860 DEFINED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
PRTHEX:             0864 DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            086F DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
PRTHEX3:            0878 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
INIT:               0883 DEFINED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 40
PRINTSTR:           08A4 DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 127
LOOKUPREF:          08AB DEFINED AT LINE 1298 IN Siena.asm
LOOKUPREF0:         08AD DEFINED AT LINE 1300 IN Siena.asm
LOOKUPREF1:         08B1 DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
LOOKUPREF2:         08B7 DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
LOOKUPREF3:         08BB DEFINED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
NESTING:            08C9 DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
NESTING1A:          08D4 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
NESTING1:           08D7 DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1335 IN Siena.asm
NESTING2:           08E6 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
NESTING3:           08E8 DEFINED AT LINE 1355 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
NESTING4:           08F3 DEFINED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 1359 IN Siena.asm
STRDEF:             08F5 DEFINED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
STRDEF1:            08FD DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
STRDEF2:            0900 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1371 IN Siena.asm
CHAR:               090F DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
CHAR1:              0912 DEFINED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
CHAR2:              091E DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
CHAR3:              0921 DEFINED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
NEWADD2:            0925 DEFINED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
ENTER:              0943 DEFINED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 41
GO:                 0943 DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
GO1:                0944 DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
GO2:                0948 DEFINED AT LINE 1434 IN Siena.asm
GO3:                0954 DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
LAMBDA:             0957 DEFINED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
LAMBDA1:            095E DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
LAMBDA2:            0982 DEFINED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
LAMBDAEND:          0992 DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
ARG:                09A6 DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
EXIT:               09C2 DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
IN:                 09D6 DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 945 IN Siena.asm
IN1:                09E1 DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
CONTAINS:           09E5 DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
BLOCK:              09EF DEFINED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
BLOCK1:             09F3 DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
BLOCK2:             0A15 DEFINED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
BLOCKEND:           0A22 DEFINED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
IF:                 0A3B DEFINED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
IF2:                0A45 DEFINED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1277 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 40 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 361 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1279 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2125S43:  407F DEFINED AT LINE 34
                    > USED AT LINE 10
