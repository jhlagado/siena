0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL prtstr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL prtdec
0000                 CALL prtstr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL prtdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 LD SP,DSTACK
0000                 CALL init
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 9F 03               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   1   ; not FF, for Siena
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Siena)
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   A6                     DB   lsb(exit_)   ; NUL
0201   C5                     DB   lsb(nop_)   ; SOH
0202   C5                     DB   lsb(nop_)   ; STX
0203   A3                     DB   lsb(etx_)   ; ETX
0204   C5                     DB   lsb(nop_)   ; 
0205   C5                     DB   lsb(nop_)   ; 
0206   C5                     DB   lsb(nop_)   ; 
0207   C5                     DB   lsb(nop_)   ; 
0208   C5                     DB   lsb(nop_)   ; 
0209   C5                     DB   lsb(nop_)   ; 
020A   C5                     DB   lsb(nop_)   ; 
020B   C5                     DB   lsb(nop_)   ; 
020C   C5                     DB   lsb(nop_)   ; 
020D   C5                     DB   lsb(nop_)   ; 
020E   C5                     DB   lsb(nop_)   ; 
020F   C5                     DB   lsb(nop_)   ; 
0210   C5                     DB   lsb(nop_)   ; 
0211   C5                     DB   lsb(nop_)   ; 
0212   C5                     DB   lsb(nop_)   ; 
0213   C5                     DB   lsb(nop_)   ; 
0214   C5                     DB   lsb(nop_)   ; 
0215   C5                     DB   lsb(nop_)   ; 
0216   C5                     DB   lsb(nop_)   ; 
0217   C5                     DB   lsb(nop_)   ; 
0218   C5                     DB   lsb(nop_)   ; 
0219   C5                     DB   lsb(nop_)   ; 
021A   C5                     DB   lsb(nop_)   ; 
021B   C5                     DB   lsb(nop_)   ; 
021C   C5                     DB   lsb(nop_)   ; 
021D   C5                     DB   lsb(nop_)   ; 
021E   C5                     DB   lsb(nop_)   ; 
021F   C5                     DB   lsb(nop_)   ; 
0220   C5                     DB   lsb(nop_)   ; 
0221   C5                     DB   lsb(nop_)   ;    !
0222   C5                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C5                     DB   lsb(nop_)   ;    %
0226   C5                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   0F                     DB   lsb(lambda_)   ;    (
0229   15                     DB   lsb(return_)   ;    )
022A   C5                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C5                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   18                     DB   lsb(dot_)   ;    .
022F   C5                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C5                     DB   lsb(nop_)   ;    :
023B   C5                     DB   lsb(nop_)   ;    ;
023C   C5                     DB   lsb(nop_)   ;    <
023D   C5                     DB   lsb(nop_)   ;    =
023E   C5                     DB   lsb(nop_)   ;    >
023F   C5                     DB   lsb(nop_)   ;    ?
0240   B0                     DB   lsb(fetch_)   ;    @
0241   84                     DB   lsb(call_)   ;    A
0242   84                     DB   lsb(call_)   ;    B
0243   84                     DB   lsb(call_)   ;    C
0244   84                     DB   lsb(call_)   ;    D
0245   84                     DB   lsb(call_)   ;    E
0246   84                     DB   lsb(call_)   ;    F
0247   84                     DB   lsb(call_)   ;    G
0248   84                     DB   lsb(call_)   ;    h
0249   84                     DB   lsb(call_)   ;    I
024A   84                     DB   lsb(call_)   ;    J
024B   84                     DB   lsb(call_)   ;    K
024C   84                     DB   lsb(call_)   ;    L
024D   84                     DB   lsb(call_)   ;    M
024E   84                     DB   lsb(call_)   ;    N
024F   84                     DB   lsb(call_)   ;    O
0250   84                     DB   lsb(call_)   ;    p
0251   84                     DB   lsb(call_)   ;    Q
0252   84                     DB   lsb(call_)   ;    R
0253   84                     DB   lsb(call_)   ;    S
0254   84                     DB   lsb(call_)   ;    T
0255   84                     DB   lsb(call_)   ;    U
0256   84                     DB   lsb(call_)   ;    V
0257   84                     DB   lsb(call_)   ;    W
0258   84                     DB   lsb(call_)   ;    X
0259   84                     DB   lsb(call_)   ;    Y
025A   84                     DB   lsb(call_)   ;    Z
025B   C5                     DB   lsb(nop_)   ;    [
025C   C5                     DB   lsb(nop_)   ;    \
025D   C5                     DB   lsb(nop_)   ;    ]
025E   C5                     DB   lsb(nop_)   ;    ^
025F   C5                     DB   lsb(nop_)   ;    _
0260   C5                     DB   lsb(nop_)   ;    `    	
0261   24                     DB   lsb(a_)   ;    a
0262   36                     DB   lsb(var_)   ;    b
0263   27                     DB   lsb(c_)   ;    c
0264   2A                     DB   lsb(d_)   ;    d
0265   2D                     DB   lsb(e_)   ;    e
0266   30                     DB   lsb(f_)   ;    f
0267   33                     DB   lsb(g_)   ;    g
0268   36                     DB   lsb(var_)   ;    h
0269   36                     DB   lsb(i_)   ;    i
026A   36                     DB   lsb(var_)   ;    j
026B   39                     DB   lsb(k_)   ;    k
026C   3C                     DB   lsb(l_)   ;    l
026D   3F                     DB   lsb(m_)   ;    m
026E   3F                     DB   lsb(m_)   ;    n
026F   45                     DB   lsb(o_)   ;    o
0270   48                     DB   lsb(p_)   ;    p
0271   36                     DB   lsb(var_)   ;    q
0272   4B                     DB   lsb(r_)   ;    r
0273   4E                     DB   lsb(s_)   ;    s
0274   36                     DB   lsb(var_)   ;    t
0275   51                     DB   lsb(u_)   ;    u
0276   36                     DB   lsb(var_)   ;    v
0277   54                     DB   lsb(w_)   ;    w
0278   57                     DB   lsb(x_)   ;    x
0279   36                     DB   lsb(var_)   ;    y
027A   36                     DB   lsb(var_)   ;    z
027B   C5                     DB   lsb(nop_)   ;    {
027C   66                     DB   lsb(or_)   ;    |
027D   C5                     DB   lsb(nop_)   ;    }
027E   C5                     DB   lsb(nop_)   ;    ~
027F   C5                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   ;a0    sp  				;space
02A1   00                     DB   lsb(aNop_)   ;a1    \!  			; this is a bug shud be lsb(cstore_)
02A2   00                     DB   lsb(aNop_)   ;a2    \"  				
02A3   00                     DB   lsb(aNop_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
02A4   00                     DB   lsb(aNop_)   ;a4    \$  prints a newline to output	
02A5   00                     DB   lsb(aNop_)   ; 
02A6   00                     DB   lsb(aNop_)   ; 
02A7   00                     DB   lsb(aNop_)   ; 
02A8   00                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
02A9   00                     DB   lsb(aNop_)   ;a9    \)
02AA   00                     DB   lsb(aNop_)   ;aa    \*
02AB   00                     DB   lsb(aNop_)   ;ab    \+
02AC   00                     DB   lsb(aNop_)   ;ac    \,  ( b -- ) prints a char
02AD   00                     DB   lsb(aNop_)   ;ad    \-
02AE   00                     DB   lsb(aNop_)   ;ae    \.  ( b -- ) prints a string from add term by null char
02AF   00                     DB   lsb(aNop_)   ;af    \/
02B0   00                     DB   lsb(aNop_)   ; 
02B1   00                     DB   lsb(aNop_)   ; 
02B2   00                     DB   lsb(aNop_)   ; 
02B3   00                     DB   lsb(aNop_)   ; 
02B4   00                     DB   lsb(aNop_)   ; 
02B5   00                     DB   lsb(aNop_)   ; 
02B6   00                     DB   lsb(aNop_)   ; 
02B7   00                     DB   lsb(aNop_)   ; 
02B8   00                     DB   lsb(aNop_)   ; 
02B9   00                     DB   lsb(aNop_)   ; 
02BA   00                     DB   lsb(aNop_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
02BB   00                     DB   lsb(aNop_)   ;bb    \;
02BC   00                     DB   lsb(aNop_)   ;bc    \<  ( port -- val )
02BD   00                     DB   lsb(aNop_)   ;bd    \=
02BE   00                     DB   lsb(aNop_)   ;be    \>  ( val port -- )
02BF   00                     DB   lsb(aNop_)   ;bf    \?
02C0   00                     DB   lsb(aNop_)   ;c0    \@ byte fetch
02C1   00                     DB   lsb(aNop_)   ; 
02C2   00                     DB   lsb(aNop_)   ; 
02C3   00                     DB   lsb(aNop_)   ; 
02C4   00                     DB   lsb(aNop_)   ; 
02C5   00                     DB   lsb(aNop_)   ; 
02C6   00                     DB   lsb(aNop_)   ; 
02C7   00                     DB   lsb(aNop_)   ; 
02C8   00                     DB   lsb(aNop_)   ; 
02C9   00                     DB   lsb(aNop_)   ; 
02CA   00                     DB   lsb(aNop_)   ; 
02CB   00                     DB   lsb(aNop_)   ; 
02CC   00                     DB   lsb(aNop_)   ; 
02CD   00                     DB   lsb(aNop_)   ; 
02CE   00                     DB   lsb(aNop_)   ; 
02CF   00                     DB   lsb(aNop_)   ; 
02D0   00                     DB   lsb(aNop_)   ; 
02D1   00                     DB   lsb(aNop_)   ; 
02D2   00                     DB   lsb(aNop_)   ; 
02D3   00                     DB   lsb(aNop_)   ; 
02D4   00                     DB   lsb(aNop_)   ; 
02D5   00                     DB   lsb(aNop_)   ; 
02D6   00                     DB   lsb(aNop_)   ; 
02D7   00                     DB   lsb(aNop_)   ; 
02D8   00                     DB   lsb(aNop_)   ; 
02D9   00                     DB   lsb(aNop_)   ; 
02DA   00                     DB   lsb(aNop_)   ; 
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                ETX:         
0300   21 00 E6               LD   hl,-DSTACK   
0303   39                     ADD   hl,sp   
0304   30 03                  JR   nc,etx1   
0306   31 00 1A               LD   sp,DSTACK   
0309                ETX1:        
0309   18 16                  JR   interpret   
030B                START:       
030B   31 00 1A               LD   sp,DSTACK   ; start of Siena
030E   CD 9F 03               CALL   init   ; setups
0311   CD CA 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0314   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0321                INTERPRET:      
0321   CD 97 08               CALL   prompt   
0324   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0327   ED 43 84 1B            LD   (vTIBPtr),bc   
032B                INTERPRET2:      ; calc nesting (a macro might have changed it)
032B   1E 00                  LD   e,0   ; initilize nesting value
032D   C5                     PUSH   bc   ; save offset into TIB,
032E                             ; bc is also the count of chars in TIB
032E   21 00 18               LD   hl,TIB   ; hl is start of TIB
0331   18 06                  JR   interpret4   
0333                INTERPRET3:      
0333   7E                     LD   a,(hl)   ; a = char in TIB
0334   23                     INC   hl   ; inc pointer into TIB
0335   0B                     DEC   bc   ; dec count of chars in TIB
0336   CD EF 03               CALL   nesting   ; update nesting value
0339                INTERPRET4:      
0339   79                     LD   a,c   ; is count zero?
033A   B0                     OR   b   
033B   20 F6                  JR   nz,interpret3   ; if not loop
033D   C1                     POP   bc   ; restore offset into TIB
033E                WAITCHAR:      
033E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0341   FE 20                  CP   $20   ; compare to space
0343   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0345   FE 00                  CP   $0   ; is it end of string? null end of string
0347   28 45                  JR   z,waitchar4   
0349   FE 0D                  CP   "\r"   ; carriage return? ascii 13
034B   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
034D                MACRO:       
034D   ED 43 84 1B            LD   (vTIBPtr),bc   
0351   21 80 1A               LD   hl,ctrlCodes   
0354   85                     ADD   a,l   ; look up key of macros
0355   6F                     LD   l,a   
0356   5E                     LD   e,(hl)   
0357   7B                     LD   a,e   
0358   B7                     OR   a   
0359   28 09                  JR   z,macro1   
035B   16 01                  LD   d,msb(macros)   
035D   D5                     PUSH   de   
035E   CD C0 03               CALL   ENTER   ; Siena go operation and jump to it
0361   67 6F 00               .CSTR   "go"   
0364                MACRO1:      
0364   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0368   18 C1                  JR   interpret2   
036A                WAITCHAR1:      
036A   21 00 18               LD   hl,TIB   
036D   09                     ADD   hl,bc   
036E   77                     LD   (hl),a   ; store the character in textbuf
036F   03                     INC   bc   
0370   CD 85 00               CALL   putchar   ; echo character to screen
0373   CD EF 03               CALL   nesting   
0376   18 C6                  JR   waitchar   ; wait for next character
0378                WAITCHAR3:      
0378   21 00 18               LD   hl,TIB   
037B   09                     ADD   hl,bc   
037C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
037E   23                     INC   hl   
037F   36 0A                  LD   (hl),"\n"   
0381   23                     INC   hl   
0382   03                     INC   bc   
0383   03                     INC   bc   
0384   CD BF 08               CALL   crlf   ; echo character to screen
0387   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0388   B7                     OR   a   
0389   20 B3                  JR   nz,waitchar   
038B   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
038D   03                     INC   bc   
038E                WAITCHAR4:      
038E   ED 43 84 1B            LD   (vTIBPtr),bc   
0392   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0395   0B                     DEC   bc   
0396                             ; ********************************************************************************
0396                             ; 
0396                             ; Dispatch Routine.
0396                             ; 
0396                             ; Get the next character and form a 1 byte jump address
0396                             ; 
0396                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
0396                             ; jump to the selected function.
0396                             ; 
0396                             ; Individual handler routines will deal with each category:
0396                             ; 
0396                             ; 1. Detect characters a-z and jump to the User Command handler routine
0396                             ; 
0396                             ; 2. Detect characters a-z and jump to the variable handler routine
0396                             ; 
0396                             ; 3. All other characters are punctuation and cause a jump to the associated
0396                             ; primitive code.
0396                             ; 
0396                             ; Instruction Pointer IP bc is incremented
0396                             ; 
0396                             ; *********************************************************************************
0396                NEXT:        
0396   03                     INC   bc   ;  Increment the IP
0397   0A                     LD   a,(bc)   ;  Get the next character and dispatch
0398   6F                     LD   l,a   ;  Index into table
0399   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
039B   6E                     LD   l,(hl)   ;  get low jump address
039C   26 05                  LD   h,msb(page4)   ;  Load h with the 1st page address
039E   E9                     JP   (hl)   ;  Jump to routine
039F                INIT:        
039F   FD 21 00 1A            LD   iy,DSTACK   
03A3   DD 21 80 19            LD   ix,RSTACK   
03A7   21 80 01               LD   hl,ialtVars   
03AA   11 80 1B               LD   de,altVars   
03AD   01 10 00               LD   bc,8 * 2   
03B0   ED B0                  LDIR      
03B2   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
03B5   54 5D                  LD   de,hl   
03B7   13                     INC   de   
03B8   36 00                  LD   (hl),0   
03BA   01 68 00               LD   bc,DATASIZE   
03BD   ED B0                  LDIR      
03BF   C9                     RET      
03C0                             ; initOps:
03C0                             ;     ld hl, iOpcodes
03C0                             ;     ld de, opcodes
03C0                             ;     ld bc, 256
03C0                             ; initOps1:
03C0                             ;     ld a,(hl)
03C0                             ;     inc hl
03C0                             ;     sla a
03C0                             ;     ret z
03C0                             ;     jr c, initOps2
03C0                             ;     srl a
03C0                             ;     ld c,a
03C0                             ;     ld b,0
03C0                             ;     ldir
03C0                             ;     jr initOps1
03C0                             ; initOps2:
03C0                             ;     srl a
03C0                             ;     ld b,a
03C0                             ;     ld a,(hl)
03C0                             ;     inc hl
03C0                             ; initOps2a:
03C0                             ;     ld (de),a
03C0                             ;     inc de
03C0                             ;     djnz initOps2a
03C0                             ;     jr initOps1
03C0                ENTER:       ;=9
03C0   60 69                  LD   hl,bc   
03C2   CD A9 08               CALL   rpush   ; save Instruction Pointer
03C5   C1                     POP   bc   
03C6   0B                     DEC   bc   
03C7   C3 96 03               JP   next   
03CA                PRINTSTR:      
03CA   E3                     EX   (sp),hl   ; swap			
03CB   CD A4 08               CALL   putStr   
03CE   23                     INC   hl   ; inc past null
03CF   E3                     EX   (sp),hl   ; put it back	
03D0   C9                     RET      
03D1                LOOKUPREF:      
03D1   16 00                  LD   d,0   
03D3                LOOKUPREF0:      
03D3   FE 61                  CP   "a"   
03D5   30 06                  JR   nc,lookupRef2   
03D7                LOOKUPREF1:      
03D7   D6 61                  SUB   "a"   
03D9   1E 00                  LD   e,0   
03DB   18 04                  JR   lookupRef3   
03DD                LOOKUPREF2:      
03DD   D6 61                  SUB   "a"   
03DF   1E 34                  LD   e,26*2   
03E1                LOOKUPREF3:      
03E1   87                     ADD   a,a   
03E2   83                     ADD   a,e   
03E3   21 C0 1B               LD   hl,DATA   
03E6   85                     ADD   a,l   
03E7   6F                     LD   l,a   
03E8   3E 00                  LD   a,0   
03EA   8C                     ADC   a,h   
03EB   67                     LD   h,a   
03EC   AF                     XOR   a   
03ED   B3                     OR   e   ; sets z flag if a-z
03EE   C9                     RET      
03EF                             ; **************************************************************************
03EF                             ; calculate nesting value
03EF                             ; a is char to be tested,
03EF                             ; e is the nesting value (initially 0)
03EF                             ; e is increased by ( and [
03EF                             ; e is decreased by ) and ]
03EF                             ; e has its bit 7 toggled by `
03EF                             ; limited to 127 levels
03EF                             ; **************************************************************************
03EF                NESTING:      
03EF   FE 22                  CP   $22   ; quote char
03F1   20 0A                  JR   nz,nesting1   
03F3   CB 7B                  BIT   7,e   
03F5   28 03                  JR   z,nesting1a   
03F7   CB BB                  RES   7,e   
03F9   C9                     RET      
03FA                NESTING1A:      
03FA   CB FB                  SET   7,e   
03FC   C9                     RET      
03FD                NESTING1:      
03FD   CB 7B                  BIT   7,e   
03FF   C0                     RET   nz   
0400   FE 7B                  CP   "{"   
0402   28 08                  JR   z,nesting2   
0404   FE 5B                  CP   "["   
0406   28 04                  JR   z,nesting2   
0408   FE 28                  CP   "("   
040A   20 02                  JR   nz,nesting3   
040C                NESTING2:      
040C   1C                     INC   e   
040D   C9                     RET      
040E                NESTING3:      
040E   FE 7D                  CP   "}"   
0410   28 07                  JR   z,nesting4   
0412   FE 5D                  CP   "]"   
0414   28 03                  JR   z,nesting4   
0416   FE 29                  CP   ")"   
0418   C0                     RET   nz   
0419                NESTING4:      
0419   1D                     DEC   e   
041A   C9                     RET      
041B                             ; **********************************************************************			
041B                             ; Page 4 primitive routines
041B                             ; **********************************************************************
041B                          ALIGN   $100   
0500                PAGE4:       
0500                NUM_:        
0500   C3 C6 08               JP   num   
0503                HEXNUM_:      
0503   C3 F2 08               JP   hexnum   
0506                ARG_:        
0506   C3 76 09               JP   arg   
0509                STRDEF_:      
0509   C3 90 09               JP   strDef   
050C                NEWADD2_:      
050C   C3 AA 09               JP   newAdd2   
050F                LAMBDA_:      
050F   C3 C8 09               JP   lambda   
0512                GO_:         
0512   C3 DE 09               JP   go   
0515                RETURN_:      
0515   C3 F2 09               JP   return   
0518                DOT_:        
0518   E1                     POP   hl   
0519   CD 0F 09               CALL   prtdec   
051C                DOT2:        
051C   3E 20                  LD   a," "   
051E   CD 85 00               CALL   putchar   
0521   C3 96 03               JP   next   
0524                A_:          
0524   C3 63 07               JP   a   
0527                C_:          
0527   C3 73 07               JP   c   
052A                D_:          
052A   C3 83 07               JP   d   
052D                E_:          
052D   C3 9D 07               JP   e   
0530                F_:          
0530   C3 A8 07               JP   f   
0533                G_:          
0533   C3 B3 07               JP   g   
0536                I_:          
0536   C3 C8 07               JP   i   
0539                K_:          
0539   C3 D8 07               JP   k   
053C                L_:          
053C   C3 E6 07               JP   l   
053F                M_:          
053F   C3 F6 07               JP   m   
0542                N_:          
0542   C3 06 08               JP   n   
0545                O_:          
0545   C3 11 08               JP   o   
0548                P_:          
0548   C3 21 08               JP   p   
054B                R_:          
054B   C3 2C 08               JP   r   
054E                S_:          
054E   C3 37 08               JP   s   
0551                U_:          
0551   C3 56 08               JP   u   
0554                W_:          
0554   C3 61 08               JP   w   
0557                X_:          
0557   C3 6C 08               JP   x   
055A                AND_:        
055A   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
055B   E1                     POP   hl   
055C   7B                     LD   a,e   
055D   A5                     AND   l   
055E   6F                     LD   l,a   
055F   7A                     LD   a,d   
0560   A4                     AND   h   
0561                AND1:        
0561   67                     LD   h,a   
0562   E5                     PUSH   hl   
0563   C3 96 03               JP   next   
0566                OR_:         
0566   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0567   E1                     POP   hl   
0568   7B                     LD   a,e   
0569   B5                     OR   l   
056A   6F                     LD   l,a   
056B   7A                     LD   a,d   
056C   B4                     OR   h   
056D   18 F2                  JR   and1   
056F                XOR_:        
056F   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0570                XOR1:        
0570   E1                     POP   hl   
0571   7B                     LD   a,e   
0572   AD                     XOR   l   
0573   6F                     LD   l,a   
0574   7A                     LD   a,d   
0575   AC                     XOR   h   
0576   18 E9                  JR   and1   
0578                INV_:        ; Bitwise INVert the top member of the stack
0578   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
057B   18 F3                  JR   xor1   
057D                ADD_:        ; add the top 2 members of the stack
057D   D1                     POP   de   
057E   E1                     POP   hl   
057F   19                     ADD   hl,de   
0580   E5                     PUSH   hl   
0581   C3 96 03               JP   next   
0584                CALL_:       
0584   0A                     LD   a,(bc)   
0585   CD D7 03               CALL   lookupRef1   
0588   5E                     LD   e,(hl)   
0589   23                     INC   hl   
058A   56                     LD   d,(hl)   
058B   C3 DF 09               JP   go1   
058E                HDOT_:       ; print hexadecimal
058E   E1                     POP   hl   
058F   CD 57 09               CALL   prthex   
0592   18 88                  JR   dot2   
0594                DROP_:       ; Discard the top member of the stack
0594   E1                     POP   hl   
0595   C3 96 03               JP   next   
0598                UNDROP_:      
0598   3B                     DEC   sp   
0599   3B                     DEC   sp   
059A   C3 96 03               JP   next   
059D                DUP_:        
059D   E1                     POP   hl   ; Duplicate the top member of the stack
059E   E5                     PUSH   hl   
059F   E5                     PUSH   hl   
05A0   C3 96 03               JP   next   
05A3                ETX_:        
05A3   C3 00 03               JP   ETX   
05A6                EXIT_:       
05A6   03                     INC   bc   ; store offests into a table of bytes, smaller
05A7   50 59                  LD   de,bc   
05A9   CD B4 08               CALL   rpop   ; Restore Instruction pointer
05AC   44 4D                  LD   bc,hl   
05AE   EB                     EX   de,hl   
05AF   E9                     JP   (hl)   
05B0                FETCH_:      ; Fetch the value from the address placed on the top of the stack
05B0   E1                     POP   hl   
05B1                FETCH1:      
05B1   5E                     LD   e,(hl)   
05B2   23                     INC   hl   
05B3   56                     LD   d,(hl)   
05B4   D5                     PUSH   de   
05B5   C3 96 03               JP   next   
05B8                KEY_:        
05B8   CD 81 00               CALL   getchar   
05BB   26 00                  LD   h,0   
05BD   6F                     LD   l,a   
05BE   E5                     PUSH   hl   
05BF   C3 96 03               JP   next   
05C2   C3 7A 08     MUL_:     JP   mul   
05C5                NOP_:        
05C5   C3 96 03               JP   next   ; hardwire white space to always go to next (important for arrays)
05C8                OVER_:       
05C8   E1                     POP   hl   ; Duplicate 2nd element of the stack
05C9   D1                     POP   de   
05CA   D5                     PUSH   de   
05CB   E5                     PUSH   hl   
05CC   D5                     PUSH   de   ; and push it to top of stack
05CD   C3 96 03               JP   next   
05D0                ROT_:        ; a b c -- b c a
05D0   D1                     POP   de   ; a b    de = c
05D1   E1                     POP   hl   ; a       hl = b
05D2   E3                     EX   (sp),hl   ; b       hl = a
05D3   D5                     PUSH   de   ; b c
05D4   E5                     PUSH   hl   ; b c a
05D5   C3 96 03               JP   next   
05D8                             ;  Left shift { is multiply by 2		
05D8                SHL_:        
05D8   E1                     POP   hl   ; Duplicate the top member of the stack
05D9   29                     ADD   hl,hl   
05DA   E5                     PUSH   hl   ; shift left fallthrough into add_
05DB   C3 96 03               JP   next   
05DE                             ;  Right shift } is a divide by 2		
05DE                SHR_:        
05DE   E1                     POP   hl   ; Get the top member of the stack
05DF                SHR1:        
05DF   CB 3C                  SRL   h   
05E1   CB 1D                  RR   l   
05E3   E5                     PUSH   hl   
05E4   C3 96 03               JP   next   
05E7                STORE_:      ; Store the value at the address placed on the top of the stack
05E7   E1                     POP   hl   
05E8   D1                     POP   de   
05E9   73                     LD   (hl),e   
05EA   23                     INC   hl   
05EB   72                     LD   (hl),d   
05EC   C3 96 03               JP   next   
05EF                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
05EF   E1                     POP   hl   
05F0   E3                     EX   (sp),hl   
05F1   E5                     PUSH   hl   
05F2   C3 96 03               JP   next   
05F5                NEG_:        
05F5   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
05F8   D1                     POP   de   
05F9   18 02                  JR   sub2   ; use the SUBtract routine
05FB                SUB_:        ; Subtract the value 2nd on stack from top of stack
05FB   D1                     POP   de   
05FC   E1                     POP   hl   ; Entry point for INVert
05FD                SUB2:        
05FD   B7                     OR   a   ; Entry point for NEGate
05FE   ED 52                  SBC   hl,de   
0600   E5                     PUSH   hl   
0601   C3 96 03               JP   next   
0604                EQ_:         
0604   E1                     POP   hl   
0605   D1                     POP   de   
0606   B7                     OR   a   ; reset the carry flag
0607   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0609   28 15                  JR   z,true_   
060B                FALSE_:      
060B   21 00 00               LD   hl,0   
060E   E5                     PUSH   hl   
060F   C3 96 03               JP   next   
0612                GT_:         
0612   D1                     POP   de   
0613   E1                     POP   hl   
0614   18 02                  JR   lt1   
0616                LT_:         
0616   E1                     POP   hl   
0617   D1                     POP   de   
0618                LT1:         
0618   B7                     OR   a   ; reset the carry flag
0619   ED 52                  SBC   hl,de   
061B   28 EE                  JR   z,false_   
061D   FA 0B 06               JP   m,false_   
0620                TRUE_:       
0620   21 01 00               LD   hl,1   
0623   E5                     PUSH   hl   
0624   C3 96 03               JP   next   
0627                GTE_:        
0627   D1                     POP   de   
0628   E1                     POP   hl   
0629   18 02                  JR   lte1   
062B                LTE_:        
062B   E1                     POP   hl   
062C   D1                     POP   de   
062D                LTE1:        
062D   B7                     OR   a   ; reset the carry flag
062E   ED 52                  SBC   hl,de   
0630   FA 0B 06               JP   m,false_   
0633   C3 01 00               JP   true   
0636                VAR_:        
0636   0A                     LD   a,(bc)   
0637   CD DD 03               CALL   lookupRef2   
063A   E5                     PUSH   hl   
063B   C3 96 03               JP   next   
063E                DIV_:        
063E   18 04                  JR   div   
0640                             ;*******************************************************************
0640                             ; Page 5 primitive routines
0640                             ;*******************************************************************
0640                             ;falls through
0640   E5                     PUSH   hl   
0641   C3 96 03               JP   next   
0644                             ; ********************************************************************
0644                             ; 16-bit division subroutine.
0644                             ; 
0644                             ; bc: divisor, de: dividend, hl: remainder
0644                             ; *********************************************************************
0644                             ; This divides de by bc, storing the result in de, remainder in hl
0644                             ; *********************************************************************
0644                             ; 1382 cycles
0644                             ; 35 bytes (reduced from 48)
0644                             ; 
0644                DIV:         ;=34
0644   D1                     POP   de   ; get first value
0645   E1                     POP   hl   ; get 2nd value
0646   C5                     PUSH   bc   ; Preserve the IP
0647   44                     LD   b,h   ; bc = 2nd value
0648   4D                     LD   c,l   
0649                             ; 
0649   21 00 00               LD   hl,0   ; Zero the remainder
064C   3E 10                  LD   a,16   ; Loop counter
064E                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
064E   CB 21                  SLA   c   
0650   CB 10                  RL   b   
0652   ED 6A                  ADC   hl,hl   
0654   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0656   38 03                  JR   c,div2   
0658   0C                     INC   c   
0659   18 01                  JR   div3   
065B                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
065B   19                     ADD   hl,de   
065C                DIV3:        
065C   3D                     DEC   a   
065D   20 EF                  JR   nz,div1   
065F   50                     LD   d,b   ; Result from bc to de
0660   59                     LD   e,c   
0661                DIV4:        
0661   C1                     POP   bc   ; Restore the IP
0662   D5                     PUSH   de   ; push Result
0663   E5                     PUSH   hl   ; push remainder
0664   C3 96 03               JP   next   
0667                             ;=57
0667                             ; **************************************************************************
0667                             ; Page 6 Alt primitives
0667                             ; **************************************************************************
0667                          ALIGN   $100   
0700                PAGE6:       
0700                ANOP_:       
0700   C3 96 03               JP   next   
0703                CFETCH_:      
0703   E1                     POP   hl   
0704   16 00                  LD   d,0   
0706   5E                     LD   e,(hl)   
0707   D5                     PUSH   de   
0708   C3 96 03               JP   next   
070B                COMMENT_:      
070B   03                     INC   bc   ; point to next char
070C   0A                     LD   a,(bc)   
070D   FE 0D                  CP   "\r"   ; terminate at cr
070F   20 FA                  JR   nz,comment_   
0711   0B                     DEC   bc   
0712   C3 96 03               JP   next   
0715                CSTORE_:      
0715   E1                     POP   hl   
0716   D1                     POP   de   
0717   73                     LD   (hl),e   
0718   C3 96 03               JP   next   
071B                EMIT_:       
071B   E1                     POP   hl   
071C   7D                     LD   a,l   
071D   CD 85 00               CALL   putchar   
0720   C3 96 03               JP   next   
0723                EXEC_:       
0723   CD 29 07               CALL   exec1   
0726   C3 96 03               JP   next   
0729                EXEC1:       
0729   E1                     POP   hl   
072A   E3                     EX   (sp),hl   
072B   E9                     JP   (hl)   
072C                PROMPT_:      
072C   CD 97 08               CALL   prompt   
072F   C3 96 03               JP   next   
0732                INPORT_:      ; \<
0732   E1                     POP   hl   
0733   79                     LD   a,c   
0734   4D                     LD   c,l   
0735   ED 68                  IN   l,(c)   
0737   26 00                  LD   h,0   
0739   4F                     LD   c,a   
073A   E5                     PUSH   hl   
073B   C3 96 03               JP   next   
073E                NEWLN_:      
073E   CD BF 08               CALL   crlf   
0741   C3 96 03               JP   next   
0744                OUTPORT_:      
0744   E1                     POP   hl   
0745   59                     LD   e,c   
0746   4D                     LD   c,l   
0747   E1                     POP   hl   
0748   ED 69                  OUT   (c),l   
074A   4B                     LD   c,e   
074B   C3 96 03               JP   next   
074E                PRTSTR_:      
074E                PRTSTR:      
074E   E1                     POP   hl   
074F   CD A4 08               CALL   putStr   
0752   C3 96 03               JP   next   
0755                RPUSH_:      
0755   E1                     POP   hl   
0756   CD A9 08               CALL   rpush   
0759   C3 96 03               JP   next   
075C                RPOP_:       
075C   CD B4 08               CALL   rpop   
075F   E5                     PUSH   hl   
0760   C3 96 03               JP   next   
0763                             ; **************************************************************************
0763                             ; Page 6 primitive routines continued  (page 7)
0763                             ; **************************************************************************
0763                             ; falls through to following page
0763                A:           
0763   03                     INC   bc   
0764   0A                     LD   a,(bc)   
0765   FE 64                  CP   "d"   
0767   CA 7D 05               JP   z,add_   
076A   FE 6E                  CP   "n"   
076C   CA 5A 05               JP   z,and_   
076F   0B                     DEC   bc   
0770   C3 36 06               JP   var_   
0773                C:           
0773   03                     INC   bc   
0774   0A                     LD   a,(bc)   
0775   FE 61                  CP   "a"   
0777   CA 77 08               JP   z,case_   
077A   FE 6C                  CP   "l"   
077C   CA 77 08               JP   z,closure_   
077F   0B                     DEC   bc   
0780   C3 36 06               JP   var_   
0783                D:           
0783   03                     INC   bc   
0784   0A                     LD   a,(bc)   
0785   FE 65                  CP   "e"   
0787   CA 77 08               JP   z,def_   
078A   FE 69                  CP   "i"   
078C   CA 3E 06               JP   z,div_   
078F   FE 72                  CP   "r"   
0791   CA 94 05               JP   z,drop_   
0794   FE 75                  CP   "u"   
0796   CA 9D 05               JP   z,dup_   
0799   0B                     DEC   bc   
079A   C3 36 06               JP   var_   
079D                E:           
079D   03                     INC   bc   
079E   0A                     LD   a,(bc)   
079F   FE 71                  CP   "q"   
07A1   CA 04 06               JP   z,eq_   
07A4   0B                     DEC   bc   
07A5   C3 36 06               JP   var_   
07A8                F:           
07A8   03                     INC   bc   
07A9   0A                     LD   a,(bc)   
07AA   FE 69                  CP   "i"   
07AC   CA 77 08               JP   z,filter_   
07AF   0B                     DEC   bc   
07B0   C3 36 06               JP   var_   
07B3                G:           
07B3   03                     INC   bc   
07B4   0A                     LD   a,(bc)   
07B5   FE 65                  CP   "e"   
07B7   CA 77 08               JP   z,get_   
07BA   FE 6F                  CP   "o"   
07BC   CA 12 05               JP   z,go_   
07BF   FE 74                  CP   "t"   
07C1   CA 12 06               JP   z,gt_   
07C4   0B                     DEC   bc   
07C5   C3 36 06               JP   var_   
07C8                I:           
07C8   03                     INC   bc   
07C9   0A                     LD   a,(bc)   
07CA   FE 66                  CP   "f"   
07CC   CA 77 08               JP   z,if_   
07CF   FE 6E                  CP   "n"   
07D1   CA 78 05               JP   z,inv_   
07D4   0B                     DEC   bc   
07D5   C3 36 06               JP   var_   
07D8                K:           
07D8   C3 6C 08               JP   x   
07DB   03                     INC   bc   
07DC   0A                     LD   a,(bc)   
07DD   FE 65                  CP   "e"   
07DF   CA B8 05               JP   z,key_   
07E2   0B                     DEC   bc   
07E3   C3 36 06               JP   var_   
07E6                L:           
07E6   03                     INC   bc   
07E7   0A                     LD   a,(bc)   
07E8   FE 65                  CP   "e"   
07EA   CA 77 08               JP   z,let_   
07ED   FE 74                  CP   "t"   
07EF   CA 16 06               JP   z,lt_   
07F2   0B                     DEC   bc   
07F3   C3 36 06               JP   var_   
07F6                M:           
07F6   03                     INC   bc   
07F7   0A                     LD   a,(bc)   
07F8   FE 61                  CP   "a"   
07FA   CA 77 08               JP   z,map_   
07FD   FE 75                  CP   "u"   
07FF   CA C2 05               JP   z,mul_   
0802   0B                     DEC   bc   
0803   C3 36 06               JP   var_   
0806                N:           
0806   03                     INC   bc   
0807   0A                     LD   a,(bc)   
0808   FE 65                  CP   "e"   
080A   CA F5 05               JP   z,neg_   
080D   0B                     DEC   bc   
080E   C3 36 06               JP   var_   
0811                O:           
0811   03                     INC   bc   
0812   0A                     LD   a,(bc)   
0813   FE 76                  CP   "v"   
0815   CA C8 05               JP   z,over_   
0818   FE 72                  CP   "r"   
081A   CA 66 05               JP   z,or_   
081D   0B                     DEC   bc   
081E   C3 36 06               JP   var_   
0821                P:           
0821   03                     INC   bc   
0822   0A                     LD   a,(bc)   
0823   FE 72                  CP   "r"   
0825   CA 77 08               JP   z,print_   
0828   0B                     DEC   bc   
0829   C3 36 06               JP   var_   
082C                R:           
082C   03                     INC   bc   
082D   0A                     LD   a,(bc)   
082E   FE 6F                  CP   "o"   
0830   CA D0 05               JP   z,rot_   
0833   0B                     DEC   bc   
0834   C3 36 06               JP   var_   
0837                S:           
0837   03                     INC   bc   
0838   0A                     LD   a,(bc)   
0839   FE 63                  CP   "c"   
083B   CA 77 08               JP   z,scan_   
083E   FE 65                  CP   "e"   
0840   CA 77 08               JP   z,set_   
0843   FE 68                  CP   "h"   
0845   CA 77 08               JP   z,shift_   
0848   FE 75                  CP   "u"   
084A   CA FB 05               JP   z,sub_   
084D   FE 77                  CP   "w"   
084F   CA EF 05               JP   z,swap_   
0852   0B                     DEC   bc   
0853   C3 36 06               JP   var_   
0856                U:           
0856   03                     INC   bc   
0857   0A                     LD   a,(bc)   
0858   FE 6E                  CP   "n"   
085A   CA 98 05               JP   z,undrop_   
085D   0B                     DEC   bc   
085E   C3 36 06               JP   var_   
0861                W:           
0861   03                     INC   bc   
0862   0A                     LD   a,(bc)   
0863   FE 68                  CP   "h"   
0865   CA 77 08               JP   z,while_   
0868   0B                     DEC   bc   
0869   C3 36 06               JP   var_   
086C                X:           
086C   03                     INC   bc   
086D   0A                     LD   a,(bc)   
086E   FE 78                  CP   "x"   
0870   CA 6F 05               JP   z,xor_   
0873   0B                     DEC   bc   
0874   C3 36 06               JP   var_   
0877                CASE_:       
0877                CLOSURE_:      
0877                DEF_:        
0877                FILTER_:      
0877                GET_:        
0877                IF_:         
0877                LET_:        
0877                MAP_:        
0877                PRINT_:      
0877                SCAN_:       
0877                SET_:        
0877                SHIFT_:      
0877                WHILE_:      
0877   C3 96 03               JP   next   
087A                             ;*******************************************************************
087A                             ; Page 5 primitive routines continued
087A                             ;*******************************************************************
087A                             ; ********************************************************************
087A                             ; 16-bit multiply
087A                MUL:         ;=19
087A   D1                     POP   de   ; get first value
087B   E1                     POP   hl   
087C   C5                     PUSH   bc   ; Preserve the IP
087D   44                     LD   b,h   ; bc = 2nd value
087E   4D                     LD   c,l   
087F   21 00 00               LD   hl,0   
0882   3E 10                  LD   a,16   
0884                MUL2:        
0884   29                     ADD   hl,hl   
0885   CB 13                  RL   e   
0887   CB 12                  RL   d   
0889   30 04                  JR   nc,$+6   
088B   09                     ADD   hl,bc   
088C   30 01                  JR   nc,$+3   
088E   13                     INC   de   
088F   3D                     DEC   a   
0890   20 F2                  JR   nz,mul2   
0892   C1                     POP   bc   ; Restore the IP
0893   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0894   C3 96 03               JP   next   
0897                             ;*******************************************************************
0897                             ; Subroutines
0897                             ;*******************************************************************
0897                PROMPT:      
0897   CD CA 03               CALL   printStr   
089A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
089F   C9                     RET      
08A0                PUTSTR0:      
08A0   CD 85 00               CALL   putchar   
08A3   23                     INC   hl   
08A4                PUTSTR:      
08A4   7E                     LD   a,(hl)   
08A5   B7                     OR   a   
08A6   20 F8                  JR   nz,putStr0   
08A8   C9                     RET      
08A9                RPUSH:       
08A9   DD 2B                  DEC   ix   
08AB   DD 74 00               LD   (ix+0),h   
08AE   DD 2B                  DEC   ix   
08B0   DD 75 00               LD   (ix+0),l   
08B3   C9                     RET      
08B4                RPOP:        
08B4   DD 6E 00               LD   l,(ix+0)   
08B7   DD 23                  INC   ix   
08B9   DD 66 00               LD   h,(ix+0)   
08BC   DD 23                  INC   ix   
08BE                RPOP2:       
08BE   C9                     RET      
08BF                CRLF:        
08BF   CD CA 03               CALL   printStr   
08C2   0D 0A 00               .CSTR   "\r\n"   
08C5   C9                     RET      
08C6                             ;*******************************************************************
08C6                             ;*******************************************************************
08C6                NUM:         
08C6   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
08C9   0A                     LD   a,(bc)   ; Get numeral or -
08CA   FE 2D                  CP   "-"   
08CC   20 01                  JR   nz,num0   
08CE   03                     INC   bc   ; no flags are affected
08CF                NUM0:        
08CF   08                     EX   af,af'   ; save zero flag = 0 for later
08D0                NUM1:        
08D0   0A                     LD   a,(bc)   
08D1   D6 30                  SUB   30h   
08D3   38 0E                  JR   c,num2   ; not a number, exit loop
08D5   03                     INC   bc   
08D6   54                     LD   d,h   
08D7   5D                     LD   e,l   
08D8   29                     ADD   hl,hl   
08D9   29                     ADD   hl,hl   
08DA   19                     ADD   hl,de   
08DB   29                     ADD   hl,hl   
08DC   85                     ADD   a,l   
08DD   6F                     LD   l,a   
08DE   30 F0                  JR   nc,num1   
08E0   24                     INC   h   
08E1   18 ED                  JR   num1   
08E3                NUM2:        
08E3   0B                     DEC   bc   
08E4   08                     EX   af,af'   ; restore zero flag
08E5   20 07                  JR   nz,num3   
08E7   EB                     EX   de,hl   ; negate the value of hl
08E8   21 00 00               LD   hl,0   
08EB   B7                     OR   a   ; jump to sub2
08EC   ED 52                  SBC   hl,de   
08EE                NUM3:        
08EE   E5                     PUSH   hl   ; Put the number on the stack
08EF   C3 96 03               JP   next   ; and process the next character
08F2                HEXNUM:      ; 
08F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
08F5                HEXNUM1:      
08F5   03                     INC   bc   
08F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
08F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
08F9   28 02                  JR   z,hexnum2   ; no a decimal
08FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
08FD                HEXNUM2:      
08FD   D6 30                  SUB   $30   ; Form decimal digit
08FF   DA E3 08               JP   c,num2   
0902   FE 10                  CP   $0F+1   
0904   D2 E3 08               JP   nc,num2   
0907   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0908   29                     ADD   hl,hl   ; 4X
0909   29                     ADD   hl,hl   ; 8X
090A   29                     ADD   hl,hl   ; 16X
090B   85                     ADD   a,l   ; add into bottom of hl
090C   6F                     LD   l,a   ; 
090D   18 E6                  JR   hexnum1   
090F                PRTDEC:      ;=34 ; removes leading zeros
090F                             ; ld a,h
090F                             ; or l
090F                             ; ld a, "0"
090F                             ; jp z, putchar
090F   CB 7C                  BIT   7,h   
0911   28 0B                  JR   z,prtdec0   
0913   3E 2D                  LD   a,"-"   
0915   CD 85 00               CALL   putchar   
0918   AF                     XOR   a   
0919   95                     SUB   l   
091A   6F                     LD   l,a   
091B   9F                     SBC   a,a   
091C   94                     SUB   h   
091D   67                     LD   h,a   
091E                PRTDEC0:      
091E   C5                     PUSH   bc   
091F   0E 00                  LD   c,0   ; leading zeros flag = false
0921   11 F0 D8               LD   de,-10000   
0924   CD 40 09               CALL   prtdec1   
0927   11 18 FC               LD   de,-1000   
092A   CD 40 09               CALL   prtdec1   
092D   11 9C FF               LD   de,-100   
0930   CD 40 09               CALL   prtdec1   
0933   1E F6                  LD   e,-10   
0935   CD 40 09               CALL   prtdec1   
0938   0C                     INC   c   ; flag = true for at least digit
0939   1E FF                  LD   e,-1   
093B   CD 40 09               CALL   prtdec1   
093E   C1                     POP   bc   
093F   C9                     RET      
0940                PRTDEC1:      
0940   06 2F                  LD   b,"0"-1   
0942                PRTDEC2:      
0942   04                     INC   b   
0943   19                     ADD   hl,de   
0944   38 FC                  JR   c,prtdec2   
0946   ED 52                  SBC   hl,de   
0948   3E 30                  LD   a,"0"   
094A   B8                     CP   b   
094B   20 05                  JR   nz,prtdec3   
094D   AF                     XOR   a   
094E   B1                     OR   c   
094F   C8                     RET   z   
0950   18 01                  JR   prtdec4   
0952                PRTDEC3:      
0952   0C                     INC   c   
0953                PRTDEC4:      
0953   78                     LD   a,b   
0954   C3 85 00               JP   putchar   
0957                             ; 
0957                PRTHEX:      
0957                             ; Display hl as a 16-bit number in hex.
0957   C5                     PUSH   bc   ; preserve the IP
0958   7C                     LD   a,h   
0959   CD 62 09               CALL   prthex2   
095C   7D                     LD   a,l   
095D   CD 62 09               CALL   prthex2   
0960   C1                     POP   bc   
0961   C9                     RET      
0962                PRTHEX2:      
0962   4F                     LD   c,a   
0963   1F                     RRA      
0964   1F                     RRA      
0965   1F                     RRA      
0966   1F                     RRA      
0967   CD 6B 09               CALL   prthex3   
096A   79                     LD   a,c   
096B                PRTHEX3:      
096B   E6 0F                  AND   0x0F   
096D   C6 90                  ADD   a,0x90   
096F   27                     DAA      
0970   CE 40                  ADC   a,0x40   
0972   27                     DAA      
0973   C3 85 00               JP   putchar   
0976                             ; 
0976                ARG:         
0976   03                     INC   bc   ; get next char
0977   0A                     LD   a,(bc)   
0978   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
097A   E6 07                  AND   $07   ; mask
097C   87                     ADD   a,a   ; double
097D   6F                     LD   l,a   
097E   26 00                  LD   h,0   
0980   FD 5D                  LD   e,iyl   
0982   FD 54                  LD   d,iyh   
0984   EB                     EX   de,hl   
0985   B7                     OR   a   
0986   ED 52                  SBC   hl,de   
0988   2B                     DEC   hl   
0989   56                     LD   d,(hl)   
098A   2B                     DEC   hl   
098B   5E                     LD   e,(hl)   
098C   D5                     PUSH   de   
098D   C3 96 03               JP   next   
0990                             ; 
0990                STRDEF:      
0990   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0994   D5                     PUSH   de   ; save start of string
0995   03                     INC   bc   ; point to next char
0996   18 03                  JR   strDef2   
0998                STRDEF1:      
0998   12                     LD   (de),a   
0999   13                     INC   de   ; increase count
099A   03                     INC   bc   ; point to next char
099B                STRDEF2:      
099B   0A                     LD   a,(bc)   
099C   FE 27                  CP   "'"   ; ' is the string terminator
099E   20 F8                  JR   nz,strDef1   
09A0   AF                     XOR   a   ; write null to terminate string
09A1   12                     LD   (de),a   
09A2   13                     INC   de   
09A3   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
09A7   C3 96 03               JP   next   
09AA                NEWADD2:      
09AA   C5                     PUSH   bc   ; push IP
09AB   FD 56 FF               LD   d,(iy-1)   
09AE   FD 5E FE               LD   e,(iy-2)   
09B1   FD 66 FD               LD   h,(iy-3)   
09B4   FD 6E FC               LD   l,(iy-4)   
09B7   FD E5                  PUSH   iy   ; push base pointer
09B9   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
09BD   FD 39                  ADD   iy,sp   
09BF   19                     ADD   hl,de   ; hl = hl + de
09C0   EB                     EX   de,hl   ; de = result
09C1   E1                     POP   hl   ; hl = old BP
09C2   C1                     POP   bc   ; bc = IP
09C3   F9                     LD   sp,hl   ; sp = old BP
09C4   D5                     PUSH   de   ; push result
09C5   C3 96 03               JP   next   
09C8                LAMBDA:      
09C8   03                     INC   bc   
09C9   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; start of lambda defintion
09CD   D5                     PUSH   de   
09CE                LAMBDA1:      ; Skip to end of definition
09CE   0A                     LD   a,(bc)   ; Get the next character
09CF   03                     INC   bc   ; Point to next character
09D0   12                     LD   (de),a   
09D1   13                     INC   de   
09D2   FE 29                  CP   ")"   ; Is it the end of the definition?
09D4   20 F8                  JR   nz,lambda1   ; get the next element
09D6   0B                     DEC   bc   
09D7   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
09DB   C3 96 03               JP   next   
09DE                GO:          ; execute Siena lambda at pointer
09DE   D1                     POP   de   ; de = pointer to lambda
09DF                GO1:         
09DF   7A                     LD   a,d   ; skip if destination address is null
09E0   B3                     OR   e   
09E1   28 0C                  JR   z,go2   
09E3   C5                     PUSH   bc   ; save IP
09E4   FD E5                  PUSH   iy   ; push base pointer
09E6   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
09EA   FD 39                  ADD   iy,sp   
09EC   42 4B                  LD   bc,de   ; IP = pointer to lambda
09EE   0B                     DEC   bc   ; dec to prepare for next routine
09EF                GO2:         
09EF   C3 96 03               JP   next   
09F2                RETURN:      
09F2   D1                     POP   de   ; de = result
09F3   E1                     POP   hl   ; hl = old BP
09F4   C1                     POP   bc   ; bc = IP
09F5   F9                     LD   sp,hl   ; sp = old BP
09F6   D5                     PUSH   de   ; push result
09F7   C3 96 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000                          ;*Macro unroll:  test "(1)go", 1
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 9F 03               CALL   init   
4006   CD C0 03               CALL   enter   
4009   28 31 29 67 6F 00      .CSTR   "(1)go"   
400F                          ;*Macro unroll:  expect "(1)go",1
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 01 00               LD   DE,1   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 2E                  JR   Z,expectM_0_1976S31   
401B   CD 4E 07               CALL   prtstr   
401E   28 31 29 67 6F 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "(1)go","\r\nActual: "   
402E   CD 0F 09               CALL   prtdec   
4031   CD 4E 07               CALL   prtstr   
4034   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4041   21 01 00               LD   HL,1   
4044   CD 0F 09               CALL   prtdec   
4047   76                     HALT      
4048   00                     .CSTR      
4049                EXPECTM_0_1976S31:      
4049   E1                     POP   HL   
404A                             ; test "1 2 +", 3
404A                             ; 
404A                             ; test "'A' @", 65
404A                             ; test "10 $1", 10
404A                             ; test "10 20 $1", 10
404A                             ; test "10 20 $2", 20
404A                             ; test "10 20 30 $3", 30
404A                             ; 
404A                             ; test "1", 1
404A                             ; test "0", 0
404A                             ; test "10", 10
404A                             ; test "123", 123
404A                             ; test "$10", $10
404A                             ; test "$FF", $FF
404A                             ; test "2 3 =", 0
404A                             ; test "3 3 =", 1
404A                             ; test "2 3 <", 1
404A                             ; test "3 3 <", 0
404A                             ; test "3 3 >", 0
404A                             ; test "4 3 >", 1
404A                             ; test "1 2 +", 3
404A                             ; test "123 456 +", 123+456
404A                             ; test "64 128 +", 64+128
404A                             ; test "5 3 -", 2
404A                             ; test "3 5 &", 1
404A                             ; test "3 5 |", 7
404A                             ; test "2 3 *", 6
404A                             ; test "1 2 3 + *", 5
404A                             ; 
404A                             ; ; test "1 2 3 ' +", 3
404A                             ; ; test "1_ 2 +",1
404A                             ; ; test "1_ 1 +",0
404A                             ; ; call enter
404A                             ; ;     .cstr "1 3",$22,"+"
404A                             ; ; expect "1 3 DUP +", 6
404A                             ; 
404A                             ; ; test "5 2/'", 2
404A                             ; ; test "3 5$ -", 2
404A                             ; ; test "5 2/$ '", 1
404A                             ; ; test "2 3%++", 7
404A                             ; ; test "1 2 3~''", 2
404A                             ; ; test "1 2 3~+*", 8
404A                             ; ; test "2a!a@",2
404A                             ; ; test "3x! 1 x@+x! x@", 4
404A                             ; ; test "3x! 1_ x@+x! x@", 2
404A                             ; 
404A                             ; 
404A                             ; 
404A                             ; ; test "1{", 2
404A                             ; ; test "1}", 0
404A                             ; ; test "2}", 1
404A                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
404A                             ; ; test "(2) \\^", 2
404A                             ; ; test ":X1; X", 1
404A                             ; ; test ":A100;A", 100
404A                             ; ; test ":Aa!; 3A a@", 3
404A                             ; ; test ":Aa!;:Ba@;4AB", 4
404A                             ; ; test "[]$ '", 0
404A                             ; ; test "[3]$ '", 1
404A                             ; ; test "[3]'@", 3
404A                             ; ; test "[1 2 3]'@", 1
404A                             ; ; test "[1 2 3]'2+@", 2
404A                             ; ; test "\\h@[1]''\\h@$-", 2
404A                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
404A                             ; ; test "\\[]$ '", 0
404A                             ; ; test "\\[3]'\\@", 3
404A                             ; ; test "\\[3]$ '", 1
404A                             ; ; test "\\[1 2 3]'\\@", 1
404A                             ; ; test "\\[1 2 3]'1+\\@", 2
404A                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
404A                             ; ; test "\\h@\\[1]''\\h@$-", 1
404A                             ; ; test "\\`A`\\@",65
404A                             ; ; test "0 0(1+)", 0
404A                             ; ; test "0 1(1+)", 1
404A                             ; ; test "0 2(1+)", 2
404A                             ; ; test "0 1(0(1+))", 0
404A                             ; ; test "0 1(1(1+))", 1
404A                             ; ; test "0 2(1(1+))", 2
404A                             ; ; test "0 2(2(1+))", 4
404A                             ; ; test "0 1(\\i@+)", 0
404A                             ; ; test "0 2(\\i@+)", 1
404A                             ; ; test "0 3(\\i@+)", 3
404A                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
404A                             ; ; test "0t! 10(1 t@+t!) t@",10
404A                             ; ; test "0(100)(200)",200
404A                             ; ; test "1(100)(200)",100
404A                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
404A                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
404A                             ; ; test ":X10;\\0X", 10
404A                             ; ; test "2 \\1x! \\1x@", 2
404A                             ; 
404A   CD CA 03               CALL   printStr   
404D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4053   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 348 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 937 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 437 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
ETX:                0300 DEFINED AT LINE 308 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
ETX1:               0309 DEFINED AT LINE 313 IN Siena.asm
                    > USED AT LINE 311 IN Siena.asm
START:              030B DEFINED AT LINE 316 IN Siena.asm
INTERPRET:          0321 DEFINED AT LINE 322 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
INTERPRET2:         032B DEFINED AT LINE 328 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
INTERPRET3:         0333 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
INTERPRET4:         0339 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 333 IN Siena.asm
WAITCHAR:           033E DEFINED AT LINE 347 IN Siena.asm
                    > USED AT LINE 380 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
MACRO:              034D DEFINED AT LINE 356 IN Siena.asm
MACRO1:             0364 DEFINED AT LINE 369 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
WAITCHAR1:          036A DEFINED AT LINE 373 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
WAITCHAR3:          0378 DEFINED AT LINE 382 IN Siena.asm
                    > USED AT LINE 354 IN Siena.asm
WAITCHAR4:          038E DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
NEXT:               0396 DEFINED AT LINE 425 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 671 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 699 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
                    > USED AT LINE 740 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 821 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
                    > USED AT LINE 911 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
INIT:               039F DEFINED AT LINE 434 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 318 IN Siena.asm
                    > USED AT LINE 28
ENTER:              03C0 DEFINED AT LINE 478 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 29
PRINTSTR:           03CA DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 111
LOOKUPREF:          03D1 DEFINED AT LINE 492 IN Siena.asm
LOOKUPREF0:         03D3 DEFINED AT LINE 494 IN Siena.asm
LOOKUPREF1:         03D7 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
LOOKUPREF2:         03DD DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 496 IN Siena.asm
                    > USED AT LINE 839 IN Siena.asm
LOOKUPREF3:         03E1 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
NESTING:            03EF DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
NESTING1A:          03FA DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
NESTING1:           03FD DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
NESTING2:           040C DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
NESTING3:           040E DEFINED AT LINE 549 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
NESTING4:           0419 DEFINED AT LINE 556 IN Siena.asm
                    > USED AT LINE 551 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
PAGE4:              0500 DEFINED AT LINE 564 IN Siena.asm
NUM_:               0500 DEFINED AT LINE 566 IN Siena.asm
HEXNUM_:            0503 DEFINED AT LINE 568 IN Siena.asm
ARG_:               0506 DEFINED AT LINE 570 IN Siena.asm
STRDEF_:            0509 DEFINED AT LINE 572 IN Siena.asm
NEWADD2_:           050C DEFINED AT LINE 574 IN Siena.asm
LAMBDA_:            050F DEFINED AT LINE 576 IN Siena.asm
GO_:                0512 DEFINED AT LINE 578 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
RETURN_:            0515 DEFINED AT LINE 580 IN Siena.asm
DOT_:               0518 DEFINED AT LINE 583 IN Siena.asm
DOT2:               051C DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 684 IN Siena.asm
A_:                 0524 DEFINED AT LINE 590 IN Siena.asm
C_:                 0527 DEFINED AT LINE 592 IN Siena.asm
D_:                 052A DEFINED AT LINE 594 IN Siena.asm
E_:                 052D DEFINED AT LINE 596 IN Siena.asm
F_:                 0530 DEFINED AT LINE 598 IN Siena.asm
G_:                 0533 DEFINED AT LINE 600 IN Siena.asm
I_:                 0536 DEFINED AT LINE 602 IN Siena.asm
K_:                 0539 DEFINED AT LINE 604 IN Siena.asm
L_:                 053C DEFINED AT LINE 606 IN Siena.asm
M_:                 053F DEFINED AT LINE 608 IN Siena.asm
N_:                 0542 DEFINED AT LINE 610 IN Siena.asm
O_:                 0545 DEFINED AT LINE 612 IN Siena.asm
P_:                 0548 DEFINED AT LINE 614 IN Siena.asm
R_:                 054B DEFINED AT LINE 616 IN Siena.asm
S_:                 054E DEFINED AT LINE 618 IN Siena.asm
U_:                 0551 DEFINED AT LINE 620 IN Siena.asm
W_:                 0554 DEFINED AT LINE 622 IN Siena.asm
X_:                 0557 DEFINED AT LINE 624 IN Siena.asm
AND_:               055A DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
AND1:               0561 DEFINED AT LINE 635 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
OR_:                0566 DEFINED AT LINE 641 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
XOR_:               056F DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
XOR1:               0570 DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
INV_:               0578 DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
ADD_:               057D DEFINED AT LINE 666 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
CALL_:              0584 DEFINED AT LINE 673 IN Siena.asm
HDOT_:              058E DEFINED AT LINE 681 IN Siena.asm
DROP_:              0594 DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
UNDROP_:            0598 DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
DUP_:               059D DEFINED AT LINE 695 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
ETX_:               05A3 DEFINED AT LINE 700 IN Siena.asm
EXIT_:              05A6 DEFINED AT LINE 703 IN Siena.asm
FETCH_:             05B0 DEFINED AT LINE 711 IN Siena.asm
FETCH1:             05B1 DEFINED AT LINE 713 IN Siena.asm
KEY_:               05B8 DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
MUL_:               05C2 DEFINED AT LINE 728 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
NOP_:               05C5 DEFINED AT LINE 730 IN Siena.asm
OVER_:              05C8 DEFINED AT LINE 734 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
ROT_:               05D0 DEFINED AT LINE 742 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
SHL_:               05D8 DEFINED AT LINE 751 IN Siena.asm
SHR_:               05DE DEFINED AT LINE 758 IN Siena.asm
SHR1:               05DF DEFINED AT LINE 760 IN Siena.asm
STORE_:             05E7 DEFINED AT LINE 766 IN Siena.asm
SWAP_:              05EF DEFINED AT LINE 774 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
NEG_:               05F5 DEFINED AT LINE 780 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
SUB_:               05FB DEFINED AT LINE 785 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
SUB2:               05FD DEFINED AT LINE 788 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
EQ_:                0604 DEFINED AT LINE 794 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
FALSE_:             060B DEFINED AT LINE 800 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
GT_:                0612 DEFINED AT LINE 805 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
LT_:                0616 DEFINED AT LINE 810 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
LT1:                0618 DEFINED AT LINE 813 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
TRUE_:              0620 DEFINED AT LINE 818 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
GTE_:               0627 DEFINED AT LINE 823 IN Siena.asm
LTE_:               062B DEFINED AT LINE 827 IN Siena.asm
LTE1:               062D DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
VAR_:               0636 DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
DIV_:               063E DEFINED AT LINE 844 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
DIV:                0644 DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
DIV1:               064E DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
DIV2:               065B DEFINED AT LINE 888 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
DIV3:               065C DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
DIV4:               0661 DEFINED AT LINE 895 IN Siena.asm
PAGE6:              0700 DEFINED AT LINE 908 IN Siena.asm
ANOP_:              0700 DEFINED AT LINE 910 IN Siena.asm
CFETCH_:            0703 DEFINED AT LINE 913 IN Siena.asm
COMMENT_:           070B DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
CSTORE_:            0715 DEFINED AT LINE 928 IN Siena.asm
EMIT_:              071B DEFINED AT LINE 934 IN Siena.asm
EXEC_:              0723 DEFINED AT LINE 940 IN Siena.asm
EXEC1:              0729 DEFINED AT LINE 943 IN Siena.asm
                    > USED AT LINE 941 IN Siena.asm
PROMPT_:            072C DEFINED AT LINE 948 IN Siena.asm
INPORT_:            0732 DEFINED AT LINE 953 IN Siena.asm
NEWLN_:             073E DEFINED AT LINE 963 IN Siena.asm
OUTPORT_:           0744 DEFINED AT LINE 967 IN Siena.asm
PRTSTR_:            074E DEFINED AT LINE 976 IN Siena.asm
PRTSTR:             074E DEFINED AT LINE 977 IN Siena.asm
                    > USED AT LINE 11
                    > USED AT LINE 15
RPUSH_:             0755 DEFINED AT LINE 983 IN Siena.asm
RPOP_:              075C DEFINED AT LINE 988 IN Siena.asm
A:                  0763 DEFINED AT LINE 997 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 336 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 376 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
                    > USED AT LINE 393 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 657 IN Siena.asm
                    > USED AT LINE 658 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 724 IN Siena.asm
                    > USED AT LINE 789 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 831 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
                    > USED AT LINE 891 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
                    > USED AT LINE 955 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 7
C:                  0773 DEFINED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 874 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 955 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
D:                  0783 DEFINED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
                    > USED AT LINE 658 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 893 IN Siena.asm
                    > USED AT LINE 915 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
E:                  079D DEFINED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 361 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
                    > USED AT LINE 931 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
F:                  07A8 DEFINED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
G:                  07B3 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
I:                  07C8 DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
K:                  07D8 DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
L:                  07E6 DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
                    > USED AT LINE 657 IN Siena.asm
                    > USED AT LINE 724 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 874 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 7
M:                  07F6 DEFINED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 609 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
N:                  0806 DEFINED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 611 IN Siena.asm
O:                  0811 DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
P:                  0821 DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 615 IN Siena.asm
R:                  082C DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
S:                  0837 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 619 IN Siena.asm
U:                  0856 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
W:                  0861 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 623 IN Siena.asm
X:                  086C DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
CASE_:              0877 DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
CLOSURE_:           0877 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
DEF_:               0877 DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1021 IN Siena.asm
FILTER_:            0877 DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
GET_:               0877 DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
IF_:                0877 DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
LET_:               0877 DEFINED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
MAP_:               0877 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
PRINT_:             0877 DEFINED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
SCAN_:              0877 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
SET_:               0877 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
SHIFT_:             0877 DEFINED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
WHILE_:             0877 DEFINED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
MUL:                087A DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 728 IN Siena.asm
MUL2:               0884 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
PROMPT:             0897 DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
PUTSTR0:            08A0 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
PUTSTR:             08A4 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
                    > USED AT LINE 979 IN Siena.asm
RPUSH:              08A9 DEFINED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
RPOP:               08B4 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
RPOP2:              08BE DEFINED AT LINE 1247 IN Siena.asm
CRLF:               08BF DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
                    > USED AT LINE 964 IN Siena.asm
NUM:                08C6 DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
NUM0:               08CF DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
NUM1:               08D0 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1280 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
NUM2:               08E3 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
NUM3:               08EE DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1286 IN Siena.asm
HEXNUM:             08F2 DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
HEXNUM1:            08F5 DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
HEXNUM2:            08FD DEFINED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
PRTDEC:             090F DEFINED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 13
                    > USED AT LINE 18
PRTDEC0:            091E DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
PRTDEC1:            0940 DEFINED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1346 IN Siena.asm
PRTDEC2:            0942 DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
PRTDEC3:            0952 DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
PRTDEC4:            0953 DEFINED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
PRTHEX:             0957 DEFINED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 683 IN Siena.asm
PRTHEX2:            0962 DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
PRTHEX3:            096B DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
ARG:                0976 DEFINED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
STRDEF:             0990 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 573 IN Siena.asm
STRDEF1:            0998 DEFINED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1429 IN Siena.asm
STRDEF2:            099B DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
NEWADD2:            09AA DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
LAMBDA:             09C8 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
LAMBDA1:            09CE DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
GO:                 09DE DEFINED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
GO1:                09DF DEFINED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
GO2:                09EF DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
RETURN:             09F2 DEFINED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 436 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 40 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
                    > USED AT LINE 27
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 358 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 438 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 442 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
EXPECTM_0_1976S31:  4049 DEFINED AT LINE 22
                    > USED AT LINE 9
