0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD D4 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   B5 0A                  DW   next   ; g nNext
018E   00 1D                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available @ " % , ; DEL
0220   CA                     DB   lsb(nop_)   ; SP
0221   97                     DB   lsb(not_)   ; !
0222   CA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CA                     DB   lsb(nop_)   ; %
0226   51                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   CA                     DB   lsb(nop_)   ; )
022A   80                     DB   lsb(mul_)   ; *
022B   73                     DB   lsb(add_)   ; +
022C   CA                     DB   lsb(nop_)   ; ,
022D   83                     DB   lsb(sub_)   ; -
022E   0F                     DB   lsb(dot_)   ; .
022F   B2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   4E                     DB   lsb(symbol_)   ; :
023B   CA                     DB   lsb(nop_)   ; ;
023C   A5                     DB   lsb(lt_)   ; <
023D   9C                     DB   lsb(eq_)   ; =
023E   A1                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(index_)   ; ?
0240   CA                     DB   lsb(nop_)   ; @
0241   4B                     DB   lsb(ident_)   ; A
0242   4B                     DB   lsb(ident_)   ; B
0243   4B                     DB   lsb(ident_)   ; C
0244   4B                     DB   lsb(ident_)   ; D
0245   4B                     DB   lsb(ident_)   ; E
0246   4B                     DB   lsb(ident_)   ; F
0247   4B                     DB   lsb(ident_)   ; G
0248   4B                     DB   lsb(ident_)   ; h
0249   4B                     DB   lsb(ident_)   ; I
024A   4B                     DB   lsb(ident_)   ; J
024B   4B                     DB   lsb(ident_)   ; K
024C   4B                     DB   lsb(ident_)   ; L
024D   4B                     DB   lsb(ident_)   ; M
024E   4B                     DB   lsb(ident_)   ; N
024F   4B                     DB   lsb(ident_)   ; O
0250   4B                     DB   lsb(ident_)   ; p
0251   4B                     DB   lsb(ident_)   ; Q
0252   4B                     DB   lsb(ident_)   ; R
0253   4B                     DB   lsb(ident_)   ; S
0254   4B                     DB   lsb(ident_)   ; T
0255   4B                     DB   lsb(ident_)   ; U
0256   4B                     DB   lsb(ident_)   ; V
0257   4B                     DB   lsb(ident_)   ; W
0258   4B                     DB   lsb(ident_)   ; X
0259   4B                     DB   lsb(ident_)   ; Y
025A   4B                     DB   lsb(ident_)   ; Z
025B   45                     DB   lsb(array_)   ; [
025C   C1                     DB   lsb(comment_)   ; \
025D   48                     DB   lsb(arrayEnd_)   ; ]
025E   65                     DB   lsb(xor_)   ; ^
025F   4B                     DB   lsb(ident_)   ; _
0260   42                     DB   lsb(char_)   ; `    	
0261   4B                     DB   lsb(ident_)   ; a
0262   4B                     DB   lsb(ident_)   ; b
0263   4B                     DB   lsb(ident_)   ; c
0264   4B                     DB   lsb(ident_)   ; d
0265   4B                     DB   lsb(ident_)   ; e
0266   4B                     DB   lsb(ident_)   ; f
0267   4B                     DB   lsb(ident_)   ; g
0268   4B                     DB   lsb(ident_)   ; h
0269   4B                     DB   lsb(ident_)   ; i
026A   4B                     DB   lsb(ident_)   ; j
026B   4B                     DB   lsb(ident_)   ; k
026C   4B                     DB   lsb(ident_)   ; l
026D   4B                     DB   lsb(ident_)   ; m
026E   4B                     DB   lsb(ident_)   ; n
026F   4B                     DB   lsb(ident_)   ; o
0270   4B                     DB   lsb(ident_)   ; p
0271   4B                     DB   lsb(ident_)   ; q
0272   4B                     DB   lsb(ident_)   ; r
0273   4B                     DB   lsb(ident_)   ; s
0274   4B                     DB   lsb(ident_)   ; t
0275   4B                     DB   lsb(ident_)   ; u
0276   4B                     DB   lsb(ident_)   ; v
0277   4B                     DB   lsb(ident_)   ; w
0278   4B                     DB   lsb(ident_)   ; x
0279   4B                     DB   lsb(ident_)   ; y
027A   4B                     DB   lsb(ident_)   ; z
027B   3C                     DB   lsb(block_)   ; {
027C   5C                     DB   lsb(or_)   ; |
027D   3F                     DB   lsb(blockEnd_)   ; }
027E   6E                     DB   lsb(inv_)   ; ~
027F   CA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0B 04               JP   num   
0303                HEXNUM_:      
0303   C3 3B 04               JP   hexnum   
0306                ARG_:        
0306   C3 B8 0B               JP   arg   
0309                STRING_:      
0309   C3 58 04               JP   string   
030C                ARG_LIST_:      
030C   C3 7C 04               JP   arg_list   
030F                DOT_:        
030F   E1                     POP   hl   
0310   03                     INC   bc   
0311   0A                     LD   a,(bc)   
0312   FE 68                  CP   "h"   
0314   20 05                  JR   nz,dot1   
0316   CD 4D 08               CALL   prthex   
0319   18 17                  JR   dot4   
031B                DOT1:        
031B   FE 73                  CP   "s"   
031D   20 05                  JR   nz,dot2   
031F   CD 70 08               CALL   prtstr   
0322   18 0E                  JR   dot4   
0324                DOT2:        
0324   FE 63                  CP   "c"   
0326   20 06                  JR   nz,dot3   
0328   7D                     LD   a,l   
0329   CD 85 00               CALL   putchar   
032C   18 04                  JR   dot4   
032E                DOT3:        
032E   0B                     DEC   bc   
032F   CD 05 08               CALL   prtdec   
0332                DOT4:        
0332   3E 20                  LD   a," "   
0334   CD 85 00               CALL   putchar   
0337   DD E9                  JP   (ix)   
0339                             ; addr index -- addr2
0339                INDEX_:      
0339   C3 6D 05               JP   index   
033C                BLOCK_:      
033C   C3 C3 04               JP   block   
033F                BLOCKEND_:      
033F   C3 00 05               JP   blockend   
0342                CHAR_:       
0342   C3 AE 04               JP   char   
0345                ARRAY_:      
0345   C3 A4 05               JP   array   
0348                ARRAYEND_:      
0348   C3 C0 05               JP   arrayEnd   
034B                IDENT_:      
034B   C3 BA 06               JP   ident   
034E                SYMBOL_:      
034E   C3 92 06               JP   symbol   
0351                AND_:        
0351   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0352   E1                     POP   hl   
0353   7B                     LD   a,e   
0354   A5                     AND   l   
0355   6F                     LD   l,a   
0356   7A                     LD   a,d   
0357   A4                     AND   h   
0358                AND1:        
0358   67                     LD   h,a   
0359   E5                     PUSH   hl   
035A   DD E9                  JP   (ix)   
035C                OR_:         
035C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
035D   E1                     POP   hl   
035E   7B                     LD   a,e   
035F   B5                     OR   l   
0360   6F                     LD   l,a   
0361   7A                     LD   a,d   
0362   B4                     OR   h   
0363   18 F3                  JR   and1   
0365                XOR_:        
0365   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0366                XOR1:        
0366   E1                     POP   hl   
0367   7B                     LD   a,e   
0368   AD                     XOR   l   
0369   6F                     LD   l,a   
036A   7A                     LD   a,d   
036B   AC                     XOR   h   
036C   18 EA                  JR   and1   
036E                INV_:        ; Bitwise INVert the top member of the stack
036E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0371   18 F3                  JR   xor1   
0373                ADD_:        ; add the top 2 members of the stack
0373   D1                     POP   de   
0374   E1                     POP   hl   
0375   19                     ADD   hl,de   
0376   E5                     PUSH   hl   
0377   DD E9                  JP   (ix)   
0379                HDOT_:       ; print hexadecimal
0379   E1                     POP   hl   
037A   CD 4D 08               CALL   prthex   
037D   C3 2E 03               JP   dot3   
0380                MUL_:        
0380   C3 EF 03               JP   mul   
0383                SUB_:        ; negative sign or subtract
0383   03                     INC   bc   ; check if sign of a number
0384   0A                     LD   a,(bc)   
0385   0B                     DEC   bc   
0386   FE 30                  CP   "0"   
0388   38 05                  JR   c,sub1   
038A   FE 3A                  CP   "9"+1   
038C   DA 00 03               JP   c,num_   
038F                SUB1:        ; Subtract the value 2nd on stack from top of stack
038F   D1                     POP   de   
0390   E1                     POP   hl   ; Entry point for INVert
0391                SUB2:        
0391   B7                     OR   a   ; Entry point for NEGate
0392   ED 52                  SBC   hl,de   
0394   E5                     PUSH   hl   
0395   DD E9                  JP   (ix)   
0397                NOT_:        ; logical invert, any non zero value
0397   21 00 00               LD   hl,0   ; is considered true
039A   18 01                  JR   eq1   
039C                EQ_:         
039C   E1                     POP   hl   
039D                EQ1:         
039D   D1                     POP   de   
039E   C3 14 07               JP   equals   
03A1                GT_:         
03A1   D1                     POP   de   
03A2   E1                     POP   hl   
03A3   18 02                  JR   lt1   
03A5                LT_:         
03A5   E1                     POP   hl   
03A6   D1                     POP   de   
03A7                LT1:         
03A7   03                     INC   bc   
03A8   0A                     LD   a,(bc)   
03A9   FE 3D                  CP   "="   
03AB   CA 1C 07               JP   z,lessthaneq   
03AE   0B                     DEC   bc   
03AF   C3 21 07               JP   lessthan   
03B2                DIV_:        
03B2   D1                     POP   de   ; get first value
03B3   E1                     POP   hl   ; get 2nd value
03B4   C5                     PUSH   bc   ; preserve the IP
03B5   44 4D                  LD   bc,hl   
03B7   CD C2 07               CALL   divide   
03BA   22 98 18               LD   (vFrac),hl   
03BD   C1                     POP   bc   
03BE   D5                     PUSH   de   ; push result
03BF   DD E9                  JP   (ix)   
03C1                COMMENT_:      
03C1   03                     INC   bc   ; point to next char
03C2   0A                     LD   a,(bc)   
03C3   FE 20                  CP   " "   ; terminate on any char less than SP
03C5   30 FA                  JR   nc,comment_   
03C7   0B                     DEC   bc   
03C8   DD E9                  JP   (ix)   
03CA                NOP_:        
03CA   DD E9                  JP   (ix)   
03CC                             ;*******************************************************************
03CC                             ; word operators
03CC                             ;*******************************************************************
03CC                             ; shl
03CC                             ; value count -- value2          shift left count places
03CC                SHL:         
03CC   50 59                  LD   de,bc   ; save IP
03CE   C1                     POP   bc   ; bc = count
03CF   41                     LD   b,c   ; b = loop counter
03D0   E1                     POP   hl   
03D1   04                     INC   b   ; test for counter=0 case
03D2   18 01                  JR   shl2   
03D4                SHL1:        
03D4   29                     ADD   hl,hl   ; left shift hl
03D5                SHL2:        
03D5   10 FD                  DJNZ   shl1   
03D7   E5                     PUSH   hl   
03D8   42 4B                  LD   bc,de   ; restore IP
03DA   DD E9                  JP   (ix)   
03DC                             ; shr
03DC                             ; value count -- value2          shift left count places
03DC                SHR:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 04                  JR   shr2   
03E4                SHR1:        
03E4   CB 3C                  SRL   h   ; right shift hl
03E6   CB 1D                  RR   l   
03E8                SHR2:        
03E8   10 FA                  DJNZ   shr1   
03EA   E5                     PUSH   hl   
03EB   42 4B                  LD   bc,de   ; restore IP
03ED   DD E9                  JP   (ix)   
03EF                MUL:         ;=19
03EF   D1                     POP   de   ; get first value
03F0   E1                     POP   hl   
03F1   C5                     PUSH   bc   ; Preserve the IP
03F2   44                     LD   b,h   ; bc = 2nd value
03F3   4D                     LD   c,l   
03F4   21 00 00               LD   hl,0   
03F7   3E 10                  LD   a,16   
03F9                MUL2:        
03F9   29                     ADD   hl,hl   
03FA   CB 13                  RL   e   
03FC   CB 12                  RL   d   
03FE   30 04                  JR   nc,$+6   
0400   09                     ADD   hl,bc   
0401   30 01                  JR   nc,$+3   
0403   13                     INC   de   
0404   3D                     DEC   a   
0405   20 F2                  JR   nz,mul2   
0407   C1                     POP   bc   ; Restore the IP
0408   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0409   DD E9                  JP   (ix)   
040B                NUM:         
040B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040E   0A                     LD   a,(bc)   ; Get numeral or -
040F   FE 2D                  CP   "-"   
0411   20 01                  JR   nz,num0   
0413   03                     INC   bc   ; move to next char, no flags affected
0414                NUM0:        
0414   08                     EX   af,af'   ; save zero flag = 0 for later
0415                NUM1:        
0415   0A                     LD   a,(bc)   ; read digit
0416   D6 30                  SUB   "0"   ; less than 0?
0418   38 13                  JR   c,num2   ; not a digit, exit loop
041A   FE 0A                  CP   10   ; greater that 9?
041C   30 0F                  JR   nc,num2   ; not a digit, exit loop
041E   03                     INC   bc   ; inc IP
041F   54 5D                  LD   de,hl   ; multiply hl * 10
0421   29                     ADD   hl,hl   
0422   29                     ADD   hl,hl   
0423   19                     ADD   hl,de   
0424   29                     ADD   hl,hl   
0425   85                     ADD   a,l   ; add digit in a to hl
0426   6F                     LD   l,a   
0427   3E 00                  LD   a,0   
0429   8C                     ADC   a,h   
042A   67                     LD   h,a   
042B   18 E8                  JR   num1   
042D                NUM2:        
042D   0B                     DEC   bc   
042E   08                     EX   af,af'   ; restore zero flag
042F   20 07                  JR   nz,num3   
0431   EB                     EX   de,hl   ; negate the value of hl
0432   21 00 00               LD   hl,0   
0435   B7                     OR   a   ; jump to sub2
0436   ED 52                  SBC   hl,de   
0438                NUM3:        
0438   E5                     PUSH   hl   ; Put the number on the stack
0439   DD E9                  JP   (ix)   ; and process the next character
043B                HEXNUM:      
043B   21 00 00               LD   hl,0   ; Clear hl to accept the number
043E                HEXNUM1:      
043E   03                     INC   bc   
043F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0440   CB 77                  BIT   6,a   ; is it uppercase alpha?
0442   28 02                  JR   z,hexnum2   ; no a decimal
0444   D6 07                  SUB   7   ; sub 7  to make $a - $F
0446                HEXNUM2:      
0446   D6 30                  SUB   $30   ; Form decimal digit
0448   DA 2D 04               JP   c,num2   
044B   FE 10                  CP   $0F+1   
044D   D2 2D 04               JP   nc,num2   
0450   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0451   29                     ADD   hl,hl   ; 4X
0452   29                     ADD   hl,hl   ; 8X
0453   29                     ADD   hl,hl   ; 16X
0454   85                     ADD   a,l   ; add into bottom of hl
0455   6F                     LD   l,a   ; 
0456   18 E6                  JR   hexnum1   
0458                             ; string
0458                             ; -- ptr                        ; points to start of string chars,
0458                             ; length is stored at start - 2 bytes
0458                STRING:      
0458   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045B   23                     INC   hl   ; skip length field to start
045C   23                     INC   hl   
045D   E5                     PUSH   hl   ; save start of string
045E   03                     INC   bc   ; point to next char
045F   18 03                  JR   string2   
0461                STRING1:      
0461   77                     LD   (hl),a   
0462   23                     INC   hl   ; increase count
0463   03                     INC   bc   ; point to next char
0464                STRING2:      
0464   0A                     LD   a,(bc)   
0465   FE 27                  CP   "'"   ; ' is the string terminator
0467   20 F8                  JR   nz,string1   
0469   AF                     XOR   a   ; write NUL to terminate string
046A   77                     LD   (hl),a   ; hl = end of string
046B   23                     INC   hl   
046C   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
046F   2B                     DEC   hl   ; hl = end of string without terminator
0470   D1                     POP   de   ; de = start of string
0471   D5                     PUSH   de   ; return start of string
0472   B7                     OR   a   ; hl = length bytes, de = start of string
0473   ED 52                  SBC   hl,de   
0475   EB                     EX   de,hl   
0476   2B                     DEC   hl   ; write length bytes to length field at start - 2
0477   72                     LD   (hl),d   
0478   2B                     DEC   hl   
0479   73                     LD   (hl),e   
047A   DD E9                  JP   (ix)   
047C                             ; arg_list - parses input (ab:c)
047C                             ; names after the : represent uninitialised locals
047C                             ; return values are the state of the stack after the block ends
047C                ARG_LIST:      
047C   11 00 00               LD   de,0   ; d = count locals, e = count args ()
047F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0482   23                     INC   hl   ; skip length field to start
0483   23                     INC   hl   
0484   E5                     PUSH   hl   ; save start of arg_list
0485   03                     INC   bc   ; point to next char
0486                ARG_LIST1:      
0486   0A                     LD   a,(bc)   
0487   FE 29                  CP   ")"   ; ) is the arg_list terminator
0489   28 12                  JR   z,arg_list4   
048B   FE 3A                  CP   ":"   
048D   20 03                  JR   nz,arg_list2   
048F   14                     INC   d   ; non zero value local count acts as flag
0490   20 08                  JR   nz,arg_list3   
0492                ARG_LIST2:      
0492   77                     LD   (hl),a   
0493   23                     INC   hl   
0494   1C                     INC   e   ; increase arg count
0495   AF                     XOR   a   
0496   B2                     OR   d   
0497   28 01                  JR   z,arg_list3   
0499   14                     INC   d   ; if d > 0 increase local count
049A                ARG_LIST3:      
049A   03                     INC   bc   ; point to next char
049B   18 E9                  JR   arg_list1   
049D                ARG_LIST4:      
049D   AF                     XOR   a   
049E   B2                     OR   d   
049F   28 01                  JR   z,arg_list5   
04A1   15                     DEC   d   ; remove initial inc
04A2                ARG_LIST5:      
04A2   23                     INC   hl   
04A3   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A6   E1                     POP   hl   ; hl = start of arg_list
04A7   E5                     PUSH   hl   ; return start of string
04A8   2B                     DEC   hl   ; write length bytes to length field at start - 2
04A9   72                     LD   (hl),d   
04AA   2B                     DEC   hl   
04AB   73                     LD   (hl),e   
04AC   DD E9                  JP   (ix)   
04AE                CHAR:        
04AE   21 00 00               LD   hl,0   ; if `` is empty
04B1                CHAR1:       
04B1   03                     INC   bc   ; point to next char
04B2   0A                     LD   a,(bc)   
04B3   FE 60                  CP   "`"   ; ` is the string terminator
04B5   28 09                  JR   z,char3   
04B7   FE 5C                  CP   $5c   ; \ is the escape
04B9   20 02                  JR   nz,char2   
04BB   03                     INC   bc   
04BC   0A                     LD   a,(bc)   
04BD                CHAR2:       
04BD   6F                     LD   l,a   
04BE   18 F1                  JR   char1   
04C0                CHAR3:       
04C0   E5                     PUSH   hl   
04C1   DD E9                  JP   (ix)   
04C3                BLOCK:       
04C3   03                     INC   bc   
04C4   C5                     PUSH   bc   ; return first opcode of block
04C5   16 01                  LD   d,1   ; nesting: count first parenthesis
04C7                BLOCK1:      ; Skip to end of definition
04C7   0A                     LD   a,(bc)   ; Get the next character
04C8   03                     INC   bc   ; Point to next character
04C9   FE 21                  CP   " " + 1   ; ignore whitespace
04CB   38 FA                  JR   c,block1   
04CD   FE 29                  CP   ")"   
04CF   28 29                  JR   z,block4   
04D1   FE 7D                  CP   "}"   
04D3   28 25                  JR   z,block4   
04D5   FE 5D                  CP   "]"   
04D7   28 21                  JR   z,block4   
04D9   FE 28                  CP   "("   
04DB   28 12                  JR   z,block2   
04DD   FE 7B                  CP   "{"   
04DF   28 0E                  JR   z,block2   
04E1   FE 5B                  CP   "["   
04E3   28 0A                  JR   z,block2   
04E5   FE 27                  CP   "'"   
04E7   28 09                  JR   z,block3   
04E9   FE 60                  CP   "`"   
04EB   28 05                  JR   z,block3   
04ED   18 D8                  JR   block1   
04EF                BLOCK2:      
04EF   14                     INC   d   
04F0   18 D5                  JR   block1   
04F2                BLOCK3:      
04F2   3E 80                  LD   a,$80   
04F4   AA                     XOR   d   
04F5   47                     LD   b,a   
04F6   20 CF                  JR   nz,block1   
04F8   18 03                  JR   block5   
04FA                BLOCK4:      
04FA   15                     DEC   d   
04FB   20 CA                  JR   nz,block1   ; get the next element
04FD                BLOCK5:      
04FD   0B                     DEC   bc   ; balanced, exit
04FE   DD E9                  JP   (ix)   
0500                BLOCKEND:      
0500   D9                     EXX      
0501   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0504   FD 56 01               LD   d,(iy+1)   
0507   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050A   FD 46 07               LD   b,(iy+7)   
050D   D9                     EXX      
050E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0511   FD 56 03               LD   d,(iy+3)   
0514   EB                     EX   de,hl   
0515   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0518   FD 56 01               LD   d,(iy+1)   
051B                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
051B   13                     INC   de   ; for carry flag <=
051C   B7                     OR   a   
051D   ED 52                  SBC   hl,de   
051F   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0521   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0523   FD 5D                  LD   e,iyl   
0525   21 08 00               LD   hl,8   
0528   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0529   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
052A   18 0C                  JR   blockend2   
052C                BLOCKEND1:      ; same scope
052C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
052F   FD 56 03               LD   d,(iy+3)   
0532   EB                     EX   de,hl   
0533   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0535   FD 5D                  LD   e,iyl   
0537   EB                     EX   de,hl   
0538                BLOCKEND2:      
0538   44 4D                  LD   bc,hl   ; bc = hl = BP
053A   B7                     OR   a   ; hl = BP - SP = count
053B   ED 72                  SBC   hl,sp   
053D   C5                     PUSH   bc   ; bc = count, hl = BP
053E   44 4D                  LD   bc,hl   
0540   E1                     POP   hl   
0541   2B                     DEC   hl   ; hl = BP-1
0542   1B                     DEC   de   ; de = args*-1
0543   ED B8                  LDDR      
0545   13                     INC   de   ; hl = new tos
0546   EB                     EX   de,hl   
0547   F9                     LD   sp,hl   ; sp = new tos
0548   D9                     EXX      ; bc = IP, iy = oldBP
0549   D5                     PUSH   de   
054A   C5                     PUSH   bc   
054B   D9                     EXX      
054C   C1                     POP   bc   
054D   FD E1                  POP   iy   
054F   DD E9                  JP   (ix)   
0551                             ; if
0551                             ; condition then -- value
0551                IF:          
0551   11 00 00               LD   de,0   ; NUL pointer for else
0554   18 01                  JR   ifte1   
0556                             ; ifte
0556                             ; condition then else -- value
0556                IFTE:        
0556   D1                     POP   de   ; de = else
0557                IFTE1:       
0557   E1                     POP   hl   ; hl = then
0558   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0559   7C                     LD   a,h   
055A   B5                     OR   l   
055B   E1                     POP   hl   ; hl = then
055C   CA F8 0A               JP   z,exec0   ; if z de = else
055F   EB                     EX   de,hl   ; condition = false, hl = else
0560   C3 F8 0A               JP   exec0   
0563                             ; switch
0563                             ; index array -- value
0563                SWITCH:      
0563   D1                     POP   de   ; de = array
0564   E1                     POP   hl   ; hl = index
0565   29                     ADD   hl,hl   ; if data width = 2 then double
0566   19                     ADD   hl,de   ; add addr
0567   5E                     LD   e,(hl)   
0568   23                     INC   hl   
0569   56                     LD   d,(hl)   
056A   C3 F8 0A               JP   exec0   
056D                             ; index of an array, based on vDataWidth
056D                             ; array num -- value    ; also sets vPointer to address
056D                INDEX:       
056D   E1                     POP   hl   ; hl = index
056E   D1                     POP   de   ; de = array
056F   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0572   3D                     DEC   a   
0573   28 01                  JR   z,index1   
0575                INDEX0:      
0575   29                     ADD   hl,hl   ; if data width = 2 then double
0576                INDEX1:      
0576   19                     ADD   hl,de   ; add addr
0577   22 9E 18               LD   (vPointer),hl   ; store address in setter
057A   16 00                  LD   d,0   
057C   5E                     LD   e,(hl)   
057D   B7                     OR   a   ; check data width again
057E   28 02                  JR   z,index2   
0580   23                     INC   hl   
0581   56                     LD   d,(hl)   
0582                INDEX2:      
0582   D5                     PUSH   de   
0583   DD E9                  JP   (ix)   
0585                             ; newvalue --
0585                SET:         
0585   E1                     POP   hl   ; discard last accessed value
0586   D1                     POP   de   ; new value
0587   2A 9E 18               LD   hl,(vPointer)   
058A   73                     LD   (hl),e   
058B   3A 9A 18               LD   a,(vDataWidth)   
058E   3D                     DEC   a   
058F   28 02                  JR   z,set1   
0591   23                     INC   hl   
0592   72                     LD   (hl),d   
0593                SET1:        
0593   DD E9                  JP   (ix)   
0595                             ; c b --
0595                             ; loops until c = 0
0595                LOOP:        
0595   DD E9                  JP   (ix)   
0597                             ;     pop de                      ; de = block                    c
0597                             ;     pop hl                      ; hl = condition
0597                             ;     push de
0597                             ;     push bc                     ; push IP
0597                             ;     ld bc,de                    ; bc = block
0597                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
0597                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0597                             ;     push de                     ; push ScopeBP
0597                             ;     push iy                     ; push BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ; loop1:
0597                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0597                             ;     or h
0597                             ;     jr z,loop3
0597                             ;     ld de,loop2-1               ; IP return address
0597                             ;     push de
0597                             ;     ld e,(iy+2)                 ; push parent ScopeBP
0597                             ;     ld d,(iy+3)
0597                             ;     push de                     ;
0597                             ;     push iy                     ; push BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ;     push hl                     ; push condition
0597                             ;     dec bc
0597                             ;     jp (ix)
0597                             ; loop2:
0597                             ;     db ESC                      ; escape from interpreter
0597                             ;     ld c,(iy+6)                 ; bc = block
0597                             ;     ld b,(iy+7)
0597                             ;     pop hl                      ; hl = condition
0597                             ;     jr loop1
0597                             ; loop3:
0597                             ;     ld d,iyh                    ; de = BP
0597                             ;     ld e,iyl
0597                             ;     ex de,hl                    ; hl = BP, de = result
0597                             ;     ld sp,hl                    ; sp = BP
0597                             ;     pop hl                      ; hl = old BP
0597                             ;     pop bc                      ; pop ScopeBP (discard)
0597                             ;     pop bc                      ; bc = IP
0597                             ;     ld sp,hl                    ; sp = old BP
0597                             ;     ld iy,0                     ; iy = sp
0597                             ;     add iy,sp
0597                             ;     ld ix,(vNext)                  ; needed?
0597                             ;     jp (ix)
0597                WORDS:       
0597   21 02 00               LD   hl,2   
059A   18 03                  JR   bytes1   
059C                BYTES:       
059C   21 01 00               LD   hl,1   
059F                BYTES1:      
059F   22 9A 18               LD   (vDataWidth),hl   
05A2   DD E9                  JP   (ix)   
05A4                ARRAY:       
05A4   11 00 00               LD   de,0   ; create stack frame
05A7   D5                     PUSH   de   ; push null for IP
05A8   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05AB   FD 56 05               LD   d,(iy+5)   ; 
05AE   D5                     PUSH   de   ; 
05AF   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05B2   FD 56 03               LD   d,(iy+3)   ; 
05B5   D5                     PUSH   de   ; 
05B6   FD E5                  PUSH   iy   ; push BP
05B8   FD 21 00 00            LD   iy,0   ; BP = SP
05BC   FD 39                  ADD   iy,sp   
05BE   DD E9                  JP   (ix)   
05C0                ARRAYEND:      
05C0   FD 54                  LD   d,iyh   ; de = BP
05C2   FD 5D                  LD   e,iyl   
05C4   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
05C8   62 6B                  LD   hl,de   ; hl = de = BP
05CA   B7                     OR   a   
05CB   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05CD   CB 3C                  SRL   h   ; 
05CF   CB 1D                  RR   l   
05D1   44 4D                  LD   bc,hl   ; bc = count
05D3   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05D6   71                     LD   (hl),c   ; write num items in length word
05D7   23                     INC   hl   
05D8   70                     LD   (hl),b   
05D9   23                     INC   hl   ; hl = array[0], bc = count
05DA                             ; de = BP, hl = array[0], bc = count
05DA   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05DD   FE 01                  CP   1   
05DF   20 10                  JR   nz,arrayEnd2   
05E1                ARRAYEND1:      ; byte
05E1   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05E4   77                     LD   (hl),a   ; write a to array item
05E5   23                     INC   hl   ; move to next byte in array
05E6   FD 2B                  DEC   iy   ; move tho next word on stack
05E8   FD 2B                  DEC   iy   
05EA   0B                     DEC   bc   ; dec items count
05EB   79                     LD   a,c   ; if not zero loop
05EC   B0                     OR   b   
05ED   20 F2                  JR   nz,arrayEnd1   
05EF   18 13                  JR   arrayEnd3   
05F1                ARRAYEND2:      ; word
05F1   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F4   77                     LD   (hl),a   ; write lsb of array item
05F5   23                     INC   hl   ; move to msb of array item
05F6   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
05F9   77                     LD   (hl),a   ; write msb of array item
05FA   23                     INC   hl   ; move to next word in array
05FB   FD 2B                  DEC   iy   ; move to next word on stack
05FD   FD 2B                  DEC   iy   
05FF   0B                     DEC   bc   ; dec items count
0600   79                     LD   a,c   ; if not zero loop
0601   B0                     OR   b   
0602   20 ED                  JR   nz,arrayEnd2   
0604                ARRAYEND3:      
0604   EB                     EX   de,hl   ; de = end of array, hl = BP
0605   F9                     LD   sp,hl   ; sp = BP
0606   E1                     POP   hl   ; de = end of array, hl = old BP
0607   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0608   FD 62                  LD   iyh,d   
060A   FD 6B                  LD   iyl,e   
060C   D1                     POP   de   ; pop arg_list (discard)
060D   D1                     POP   de   ; pop ScopeBP (discard)
060E   D1                     POP   de   ; pop IP (discard)
060F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0613   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0616   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
061A   13                     INC   de   ; de = array[0]
061B   13                     INC   de   
061C   D5                     PUSH   de   ; return array[0]
061D   DD E9                  JP   (ix)   
061F                             ; str -- num
061F                HASH:        
061F   E1                     POP   hl   
0620   C5                     PUSH   bc   
0621   44 4D                  LD   bc,hl   
0623   CD 5B 07               CALL   hashStr   
0626   C1                     POP   bc   
0627   E5                     PUSH   hl   
0628   DD E9                  JP   (ix)   
062A                             ; symbol func --
062A                DEF:         
062A   DD 21 31 06            LD   ix,def1   
062E   C3 60 0B               JP   func   
0631                DEF1:        
0631   DD 2A A4 18            LD   ix,(vNext)   
0635   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0636   60 69                  LD   hl,bc   
0638   18 24                  JR   let1   
063A                             ; symbol value --
063A                LET:         
063A   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
063C   E3                     EX   (sp),hl   
063D   EB                     EX   de,hl   
063E   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0641   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0643   23                     INC   hl   
0644   36 69                  LD   (hl),lsb(dolet)   
0646   23                     INC   hl   
0647   36 06                  LD   (hl),msb(dolet)   
0649   23                     INC   hl   
064A   73                     LD   (hl),e   
064B   23                     INC   hl   
064C   72                     LD   (hl),d   
064D   ED 5B A2 18            LD   de,(vHashStr)   
0651   23                     INC   hl   
0652   73                     LD   (hl),e   
0653   23                     INC   hl   
0654   72                     LD   (hl),d   
0655   2B                     DEC   hl   
0656   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
065A   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
065D   E1                     POP   hl   ; de = addr, hl = IP
065E                LET1:        
065E   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
065F   44 4D                  LD   bc,hl   ; bc = symbol
0661   CD 78 07               CALL   defineEntry   
0664   38 00                  JR   c,let2   
0666                             ; call error
0666                             ; .cstr "Let Collision"
0666                LET2:        
0666   C1                     POP   bc   
0667   DD E9                  JP   (ix)   
0669                             ; addr -- value
0669                DOLET:       
0669   E1                     POP   hl   
066A   22 9E 18               LD   (vPointer),hl   ; store address in setter
066D                DOLET2:      
066D   5E                     LD   e,(hl)   
066E   23                     INC   hl   
066F   56                     LD   d,(hl)   
0670   23                     INC   hl   
0671                DOLET3:      
0671   D5                     PUSH   de   
0672   5E                     LD   e,(hl)   
0673   23                     INC   hl   
0674   56                     LD   d,(hl)   
0675   ED 53 A2 18            LD   (vHashStr),de   
0679   DD E9                  JP   (ix)   
067B                             ; symbol -- ptr
067B                ADDR:        
067B   E1                     POP   hl   ; hl = hash
067C   C5                     PUSH   bc   
067D   44 4D                  LD   bc,hl   
067F   CD 9E 07               CALL   lookupEntry   
0682   38 03                  JR   c,addr1   
0684   21 00 00               LD   hl,0   
0687                             ; call printStr		
0687                             ; .cstr "Undefined"
0687                             ; jp interpret
0687                ADDR1:       
0687   C1                     POP   bc   
0688   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
068B   19                     ADD   hl,de   
068C   22 9E 18               LD   (vPointer),hl   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                SYMBOL:      
0692   03                     INC   bc   
0693   11 00 1A               LD   de,PAD   
0696   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0698   18 02                  JR   symbol1   
069A                SYMBOL0:      ; copy to PAD area
069A   03                     INC   bc   ; characters that are part of the identifier
069B   13                     INC   de   
069C                SYMBOL1:      ; 0-9 A-Z a-z _
069C   0A                     LD   a,(bc)   
069D   12                     LD   (de),a   
069E   FE 21                  CP   " "+1   
06A0   38 0A                  JR   c,symbol2   
06A2   6F                     LD   l,a   
06A3   7E                     LD   a,(hl)   
06A4   FE 4B                  CP   lsb(ident_)   
06A6   28 F2                  JR   z,symbol0   
06A8   FE 00                  CP   lsb(num_)   
06AA   28 EE                  JR   z,symbol0   
06AC                SYMBOL2:      
06AC   0B                     DEC   bc   
06AD   AF                     XOR   a   
06AE   12                     LD   (de),a   ; terminate string with NUL
06AF   C5                     PUSH   bc   
06B0   01 00 1A               LD   bc,PAD   
06B3   CD 5B 07               CALL   hashStr   ; hl = hash
06B6   C1                     POP   bc   
06B7   E5                     PUSH   hl   
06B8   DD E9                  JP   (ix)   
06BA                IDENT:       
06BA   11 00 1A               LD   de,PAD   
06BD   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06BF   18 02                  JR   ident1   
06C1                IDENT0:      ; copy to PAD area
06C1   03                     INC   bc   ; characters that are part of the identifier
06C2   13                     INC   de   
06C3                IDENT1:      ; 0-9 A-Z a-z _
06C3   0A                     LD   a,(bc)   
06C4   12                     LD   (de),a   
06C5                             ; or a
06C5                             ; jr z,ident2
06C5   FE 21                  CP   " "+1   
06C7   38 0A                  JR   c,ident2   
06C9   6F                     LD   l,a   
06CA   7E                     LD   a,(hl)   
06CB   FE 4B                  CP   lsb(ident_)   
06CD   28 F2                  JR   z,ident0   
06CF   FE 00                  CP   lsb(num_)   
06D1   28 EE                  JR   z,ident0   
06D3                IDENT2:      
06D3   0B                     DEC   bc   
06D4   AF                     XOR   a   
06D5   12                     LD   (de),a   ; terminate string with NUL
06D6   C5                     PUSH   bc   
06D7   01 00 1A               LD   bc,PAD   
06DA   CD 5B 07               CALL   hashStr   ; hl = hash
06DD   44 4D                  LD   bc,hl   
06DF   CD 9E 07               CALL   lookupEntry   
06E2   C1                     POP   bc   
06E3   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06E5   DD E9                  JP   (ix)   
06E7                IDENT3:      
06E7   E9                     JP   (hl)   
06E8                FRAC:        
06E8   2A 98 18               LD   hl,(vFrac)   
06EB   E5                     PUSH   hl   
06EC   DD E9                  JP   (ix)   
06EE                          ALIGN   2   
06EE                SQRT1:       
06EE   E1                     POP   hl   
06EF   C5                     PUSH   bc   
06F0   CD DB 07               CALL   squareRoot   
06F3   ED 43 98 18            LD   (vFrac),bc   
06F7   C1                     POP   bc   
06F8   D5                     PUSH   de   
06F9   DD E9                  JP   (ix)   
06FB                ABS1:        
06FB   E1                     POP   hl   
06FC   CB 7C                  BIT   7,h   
06FE   C8                     RET   z   
06FF   AF                     XOR   a   
0700   95                     SUB   l   
0701   6F                     LD   l,a   
0702   9F                     SBC   a,a   
0703   94                     SUB   h   
0704   67                     LD   h,a   
0705   E5                     PUSH   hl   
0706   DD E9                  JP   (ix)   
0708                MOD:         
0708   D1                     POP   de   ; get first value
0709   E1                     POP   hl   ; get 2nd value
070A   C5                     PUSH   bc   ; preserve the IP
070B   44 4D                  LD   bc,hl   
070D   CD C2 07               CALL   divide   
0710   C1                     POP   bc   
0711   E5                     PUSH   hl   ; push remainder
0712   DD E9                  JP   (ix)   
0714                             ; hl = value1, de = value2
0714                             ; hl = result
0714                EQUALS:      
0714   B7                     OR   a   ; reset the carry flag
0715   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0717   28 10                  JR   z,true1   
0719   C3 2F 07               JP   false1   
071C                             ; hl = value1 de = value2
071C                             ; hl = result
071C                LESSTHANEQ:      
071C   B7                     OR   a   
071D   ED 52                  SBC   hl,de   
071F   18 05                  JR   lessthan1   
0721                             ; hl = value1 de = value2
0721                             ; hl = result
0721                LESSTHAN:      
0721   B7                     OR   a   
0722   ED 52                  SBC   hl,de   
0724   28 09                  JR   z,false1   
0726                LESSTHAN1:      
0726   FA 2F 07               JP   m,false1   
0729                TRUE1:       
0729   21 FF FF               LD   hl,TRUE   
072C   E5                     PUSH   hl   
072D   DD E9                  JP   (ix)   
072F                NULL1:       
072F                FALSE1:      
072F   21 00 00               LD   hl,FALSE   
0732   E5                     PUSH   hl   
0733   DD E9                  JP   (ix)   
0735                             ; Z80 port input
0735                             ; port -- value
0735                INPUT:       
0735   E1                     POP   hl   
0736   59                     LD   e,c   ; save IP
0737   4D                     LD   c,l   
0738   ED 68                  IN   l,(c)   
073A   26 00                  LD   h,0   
073C   4B                     LD   c,e   ; restore IP
073D   E5                     PUSH   hl   
073E   DD E9                  JP   (ix)   
0740                             ; Z80 port output
0740                             ; value port --
0740                OUTPUT:      
0740   E1                     POP   hl   
0741   59                     LD   e,c   ; save IP
0742   4D                     LD   c,l   
0743   E1                     POP   hl   
0744   ED 69                  OUT   (c),l   
0746   4B                     LD   c,e   ; restore IP
0747   DD E9                  JP   (ix)   
0749                KEY:         
0749   CD 81 00               CALL   getchar   
074C   26 00                  LD   h,0   
074E   6F                     LD   l,a   
074F   E5                     PUSH   hl   
0750   DD E9                  JP   (ix)   
0752                NEG:         
0752   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0755   D1                     POP   de   
0756   C3 91 03               JP   sub2   ; use the SUBtract routine
0759                FILTER:      
0759                MAP:         
0759                SCAN:        
0759   DD E9                  JP   (ix)   
075B                             ; -------------------------------------------------------------------------------
075B                             ; hash C-string
075B                             ; BC = str
075B                             ; HL = hash
075B                HASHSTR:      
075B   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
075F   21 00 00               LD   hl,0   
0762                HASHSTR1:      
0762   0A                     LD   a,(bc)   ; load next char
0763   03                     INC   bc   
0764   FE 00                  CP   0   ; NUL?
0766   C8                     RET   z   
0767                HASHSTR2:      
0767   16 00                  LD   d,0   
0769   5F                     LD   e,a   
076A   19                     ADD   hl,de   
076B   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
076D   29                     ADD   hl,hl   ; shift left
076E   19                     ADD   hl,de   ; add
076F   29                     ADD   hl,hl   ; shift left
0770   29                     ADD   hl,hl   ; shift left
0771   29                     ADD   hl,hl   ; shift left
0772   29                     ADD   hl,hl   ; shift left
0773   29                     ADD   hl,hl   ; shift left
0774   29                     ADD   hl,hl   ; shift left
0775   19                     ADD   hl,de   ; add
0776   18 EA                  JR   hashStr1   
0778                             ; add entry to hash slots and hash pointers
0778                             ; bc = hash (b = hi, c = lo), de = addr
0778                             ; sets carry if successful
0778                DEFINEENTRY:      
0778   CB 21                  SLA   c   ; lo = lo * 2
077A   69                     LD   l,c   ; lo1 = lo
077B   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077D                DEFINEENTRY0:      
077D   7E                     LD   a,(hl)   ; a = (lo1)
077E   FE FF                  CP   UNUSED   ; is it unused?
0780   28 12                  JR   z,defineEntry3   ; yes, add entry
0782   79                     LD   a,c   ; a = lo
0783   BE                     CP   (hl)   ; compare (lo1) with lo
0784   20 06                  JR   nz,defineEntry1   ; no match loop around
0786   2C                     INC   l   
0787   78                     LD   a,b   ; a = hi
0788   BE                     CP   (hl)   ; compare (lo1+1) with hi
0789   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
078B   2D                     DEC   l   ; restore l
078C                DEFINEENTRY1:      
078C   2C                     INC   l   ; try next entry
078D   2C                     INC   l   
078E   79                     LD   a,c   ; compare lo and lo1
078F   BD                     CP   l   ; if equal then there's no space left, reject
0790   20 EB                  JR   nz,defineEntry0   
0792                DEFINEENTRY2:      
0792   B7                     OR   a   ; clear carry flag, failure
0793   C9                     RET      
0794                DEFINEENTRY3:      ; new entry
0794   71                     LD   (hl),c   ; (lo1) = hash lo
0795   23                     INC   hl   
0796   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0797   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0799   72                     LD   (hl),d   
079A   2B                     DEC   hl   
079B   73                     LD   (hl),e   ; (slot + 2) = address
079C   37                     SCF      ; set carry flag, success
079D   C9                     RET      
079E                             ; looks up hash and returns address
079E                             ; bc = hash
079E                             ; returns addr in hl, sets carry if successful
079E                LOOKUPENTRY:      
079E   CB 21                  SLA   c   ; lo = lo * 2
07A0   69                     LD   l,c   ; lo1 = lo
07A1   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07A3                LOOKUPENTRY0:      
07A3   7E                     LD   a,(hl)   ; a = (hl), slot
07A4   FE FF                  CP   UNUSED   ; is it unused?
07A6   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07A8   79                     LD   a,c   ; a = lo
07A9   BE                     CP   (hl)   ; compare (lo1) with lo
07AA   20 06                  JR   nz,lookupEntry1   ; no match loop around
07AC   2C                     INC   l   
07AD   78                     LD   a,b   ; a = hi
07AE   BE                     CP   (hl)   ; compare (lo1+1) with hi
07AF   28 09                  JR   z,lookupEntry3   
07B1   2D                     DEC   l   
07B2                LOOKUPENTRY1:      
07B2   2C                     INC   l   
07B3   2C                     INC   l   
07B4   79                     LD   a,c   
07B5   BD                     CP   l   ; no space left, reject
07B6   20 EB                  JR   nz,lookupEntry0   
07B8                LOOKUPENTRY2:      
07B8   B7                     OR   a   ; clear carry flag, failure
07B9   C9                     RET      
07BA                LOOKUPENTRY3:      
07BA   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07BC   56                     LD   d,(hl)   
07BD   2D                     DEC   l   ; restore l
07BE   5E                     LD   e,(hl)   ; (slot + 2) = address
07BF   EB                     EX   de,hl   
07C0   37                     SCF      
07C1   C9                     RET      
07C2                             ; division subroutine.
07C2                             ; bc: divisor, de: dividend, hl: remainder
07C2                DIVIDE:      
07C2   21 00 00               LD   hl,0   ; zero the remainder
07C5   3E 10                  LD   a,16   ; loop counter
07C7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07C7   CB 21                  SLA   c   
07C9   CB 10                  RL   b   
07CB   ED 6A                  ADC   hl,hl   
07CD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07CF   38 03                  JR   c,divide2   
07D1   0C                     INC   c   
07D2   18 01                  JR   divide3   
07D4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D4   19                     ADD   hl,de   
07D5                DIVIDE3:      
07D5   3D                     DEC   a   
07D6   20 EF                  JR   nz,divide1   
07D8   50 59                  LD   de,bc   ; result from bc to de
07DA   C9                     RET      
07DB                             ; squareroot
07DB                             ; Input: HL = value
07DB                             ; Result: DE = square root BC = remainder
07DB                SQUAREROOT:      
07DB   01 00 08               LD   bc,0800h   
07DE   59                     LD   e,c   
07DF   AF                     XOR   a   
07E0                SQUAREROOT1:      
07E0   29                     ADD   hl,hl   
07E1   CB 11                  RL   c   
07E3   ED 6A                  ADC   hl,hl   
07E5   CB 11                  RL   c   
07E7   30 02                  JR   nc,$+4   
07E9   CB C5                  SET   0,l   
07EB   7B                     LD   a,e   
07EC   87                     ADD   a,a   
07ED   5F                     LD   e,a   
07EE   87                     ADD   a,a   
07EF   CB 45                  BIT   0,l   
07F1   20 03                  JR   nz,$+5   
07F3   91                     SUB   c   
07F4   30 05                  JR   nc,squareRoot4   
07F6   79                     LD   a,c   
07F7   93                     SUB   e   
07F8   1C                     INC   e   
07F9   93                     SUB   e   
07FA   4F                     LD   c,a   
07FB                SQUAREROOT4:      
07FB   10 E3                  DJNZ   squareRoot1   
07FD   CB 45                  BIT   0,l   
07FF   28 01                  JR   z,squareRoot5   
0801   04                     INC   b   
0802                SQUAREROOT5:      
0802   16 00                  LD   d,0   
0804   C9                     RET      
0805                             ; print decimal
0805                             ; hl = value
0805                PRTDEC:      
0805   CB 7C                  BIT   7,h   
0807   28 0B                  JR   z,prtdec0   
0809   3E 2D                  LD   a,"-"   
080B   CD 85 00               CALL   putchar   
080E   AF                     XOR   a   
080F   95                     SUB   l   
0810   6F                     LD   l,a   
0811   9F                     SBC   a,a   
0812   94                     SUB   h   
0813   67                     LD   h,a   
0814                PRTDEC0:      
0814   C5                     PUSH   bc   
0815   0E 00                  LD   c,0   ; leading zeros flag = false
0817   11 F0 D8               LD   de,-10000   
081A   CD 36 08               CALL   prtdec1   
081D   11 18 FC               LD   de,-1000   
0820   CD 36 08               CALL   prtdec1   
0823   11 9C FF               LD   de,-100   
0826   CD 36 08               CALL   prtdec1   
0829   1E F6                  LD   e,-10   
082B   CD 36 08               CALL   prtdec1   
082E   0C                     INC   c   ; flag = true for at least digit
082F   1E FF                  LD   e,-1   
0831   CD 36 08               CALL   prtdec1   
0834   C1                     POP   bc   
0835   C9                     RET      
0836                PRTDEC1:      
0836   06 2F                  LD   b,"0"-1   
0838                PRTDEC2:      
0838   04                     INC   b   
0839   19                     ADD   hl,de   
083A   38 FC                  JR   c,prtdec2   
083C   ED 52                  SBC   hl,de   
083E   3E 30                  LD   a,"0"   
0840   B8                     CP   b   
0841   20 05                  JR   nz,prtdec3   
0843   AF                     XOR   a   
0844   B1                     OR   c   
0845   C8                     RET   z   
0846   18 01                  JR   prtdec4   
0848                PRTDEC3:      
0848   0C                     INC   c   
0849                PRTDEC4:      
0849   78                     LD   a,b   
084A   C3 85 00               JP   putchar   
084D                PRTHEX:      ; display hl as a 16-bit number in hex.
084D   C5                     PUSH   bc   ; preserve the IP
084E   7C                     LD   a,h   
084F   CD 58 08               CALL   prthex2   
0852   7D                     LD   a,l   
0853   CD 58 08               CALL   prthex2   
0856   C1                     POP   bc   
0857   C9                     RET      
0858                PRTHEX2:      
0858   4F                     LD   c,a   
0859   1F                     RRA      
085A   1F                     RRA      
085B   1F                     RRA      
085C   1F                     RRA      
085D   CD 61 08               CALL   prthex3   
0860   79                     LD   a,c   
0861                PRTHEX3:      
0861   E6 0F                  AND   0x0F   
0863   C6 90                  ADD   a,0x90   
0865   27                     DAA      
0866   CE 40                  ADC   a,0x40   
0868   27                     DAA      
0869   C3 85 00               JP   putchar   
086C                PRTSTR0:      
086C   CD 85 00               CALL   putchar   
086F   23                     INC   hl   
0870                PRTSTR:      
0870   7E                     LD   a,(hl)   
0871   B7                     OR   a   
0872   20 F8                  JR   nz,prtstr0   
0874   C9                     RET      
0875                             ; **************************************************************************
0875                             ; calculate nesting value
0875                             ; a is char to be tested,
0875                             ; e is the nesting value (initially 0)
0875                             ; e is increased by ( and [
0875                             ; e is decreased by ) and ]
0875                             ; e has its bit 7 toggled by `
0875                             ; limited to 127 levels
0875                             ; **************************************************************************
0875                NESTING:      
0875   FE 22                  CP   $22   ; quote char
0877   20 0A                  JR   nz,nesting1   
0879   CB 7B                  BIT   7,e   
087B   28 03                  JR   z,nesting1a   
087D   CB BB                  RES   7,e   
087F   C9                     RET      
0880                NESTING1A:      
0880   CB FB                  SET   7,e   
0882   C9                     RET      
0883                NESTING1:      
0883   CB 7B                  BIT   7,e   
0885   C0                     RET   nz   
0886   FE 7B                  CP   "{"   
0888   28 08                  JR   z,nesting2   
088A   FE 5B                  CP   "["   
088C   28 04                  JR   z,nesting2   
088E   FE 28                  CP   "("   
0890   20 02                  JR   nz,nesting3   
0892                NESTING2:      
0892   1C                     INC   e   
0893   C9                     RET      
0894                NESTING3:      
0894   FE 7D                  CP   "}"   
0896   28 07                  JR   z,nesting4   
0898   FE 5D                  CP   "]"   
089A   28 03                  JR   z,nesting4   
089C   FE 29                  CP   ")"   
089E   C0                     RET   nz   
089F                NESTING4:      
089F   1D                     DEC   e   
08A0   C9                     RET      
08A1                PROMPT:      
08A1   CD B1 08               CALL   printStr   
08A4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08A9   C9                     RET      
08AA                CRLF:        
08AA   CD B1 08               CALL   printStr   
08AD   0D 0A 00               .CSTR   "\r\n"   
08B0   C9                     RET      
08B1                             ; prints a null teminated string
08B1                             ; the string should be immedaitely following the call
08B1                PRINTSTR:      
08B1   E3                     EX   (sp),hl   ; swap			
08B2   CD 70 08               CALL   prtstr   
08B5   23                     INC   hl   ; inc past NUL
08B6   E3                     EX   (sp),hl   ; put it back	
08B7   C9                     RET      
08B8                             ; executes a null teminated string (null executes exit_)
08B8                             ; the string should be immedaitely following the call
08B8                EXECSTR:      ; create a root stack frame
08B8                             ; pop bc                      ; bc = code*
08B8                             ; dec bc                      ; dec to prepare for next routine
08B8                             ; ld de,0
08B8                             ; push de                     ; push fake IP
08B8                             ; push de                     ; push null arglist*
08B8                             ; push de                     ; push null first_arg*
08B8                             ; push de                     ; push fake BP
08B8                             ; jp (ix)
08B8                BRANCH:      ; executes the address on the stack
08B8   C1                     POP   bc   ; bc = code*
08B9   0B                     DEC   bc   ; dec to prepare for next routine
08BA   DD E9                  JP   (ix)   
08BC                DEFINE:      
08BC   E1                     POP   hl   
08BD   7E                     LD   a,(hl)   
08BE   23                     INC   hl   
08BF   44 4D                  LD   bc,hl   
08C1   5F                     LD   e,a   
08C2   16 00                  LD   d,0   
08C4   19                     ADD   hl,de   
08C5   5E                     LD   e,(hl)   
08C6   23                     INC   hl   
08C7   56                     LD   d,(hl)   
08C8   23                     INC   hl   
08C9   E5                     PUSH   hl   ; bc = str
08CA   D5                     PUSH   de   
08CB   CD 5B 07               CALL   hashStr   ; hl = hash
08CE   D1                     POP   de   
08CF   44 4D                  LD   bc,hl   
08D1   C3 78 07               JP   defineEntry   
08D4                INIT:        
08D4   DD 2A A4 18            LD   ix,(vNext)   
08D8   FD 21 80 18            LD   iy,STACK   
08DC   21 80 01               LD   hl,isysVars   
08DF   11 98 18               LD   de,sysVars   
08E2   01 10 00               LD   bc,8 * 2   
08E5   ED B0                  LDIR      
08E7   3E FF                  LD   a,UNUSED   
08E9   06 00                  LD   b,0   
08EB   21 00 1B               LD   hl,hashSlots   
08EE                INIT1:       
08EE   77                     LD   (hl),a   
08EF   23                     INC   hl   
08F0   10 FC                  DJNZ   init1   
08F2   CD BC 08               CALL   define   
08F5   04 61 62 73 00         .PSTR   "abs",0   
08FA   FB 06                  DW   abs1   
08FC   CD BC 08               CALL   define   
08FF   05 61 64 64 72 00      .PSTR   "addr",0   
0905   7B 06                  DW   addr   
0907   CD BC 08               CALL   define   
090A   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0911   9C 05                  DW   bytes   
0913   CD BC 08               CALL   define   
0916   05 63 61 6C 6C 00      .PSTR   "call",0   
091C   F5 0A                  DW   call   
091E   CD BC 08               CALL   define   
0921   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
092A   EF 0B                  DW   closure   
092C   CD BC 08               CALL   define   
092F   04 64 65 66 00         .PSTR   "def",0   
0934   2A 06                  DW   def   
0936   CD BC 08               CALL   define   
0939   05 65 78 65 63 00      .PSTR   "exec",0   
093F   F7 0A                  DW   exec   
0941   CD BC 08               CALL   define   
0944   06 66 61 6C 73 65 00   .PSTR   "false",0   
094B   2F 07                  DW   false1   
094D   CD BC 08               CALL   define   
0950   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0958   59 07                  DW   filter   
095A   CD BC 08               CALL   define   
095D   05 66 72 61 63 00      .PSTR   "frac",0   
0963   E8 06                  DW   frac   
0965   CD BC 08               CALL   define   
0968   05 66 75 6E 63 00      .PSTR   "func",0   
096E   60 0B                  DW   func   
0970   CD BC 08               CALL   define   
0973   05 68 61 73 68 00      .PSTR   "hash",0   
0979   1F 06                  DW   hash   
097B   CD BC 08               CALL   define   
097E   06 69 6E 70 75 74 00   .PSTR   "input",0   
0985   35 07                  DW   input   
0987   CD BC 08               CALL   define   
098A   03 69 66 00            .PSTR   "if",0   
098E   51 05                  DW   if   
0990   CD BC 08               CALL   define   
0993   05 69 66 74 65 00      .PSTR   "ifte",0   
0999   56 05                  DW   ifte   
099B   CD BC 08               CALL   define   
099E   04 6B 65 79 00         .PSTR   "key",0   
09A3   49 07                  DW   key   
09A5   CD BC 08               CALL   define   
09A8   04 6C 65 74 00         .PSTR   "let",0   
09AD   3A 06                  DW   let   
09AF   CD BC 08               CALL   define   
09B2   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09B8   95 05                  DW   loop   
09BA   CD BC 08               CALL   define   
09BD   04 6D 61 70 00         .PSTR   "map",0   
09C2   59 07                  DW   map   
09C4   CD BC 08               CALL   define   
09C7   04 6D 6F 64 00         .PSTR   "mod",0   
09CC   08 07                  DW   mod   
09CE   CD BC 08               CALL   define   
09D1   04 6E 65 67 00         .PSTR   "neg",0   
09D6   52 07                  DW   neg   
09D8   CD BC 08               CALL   define   
09DB   04 6E 69 6C 00         .PSTR   "nil",0   
09E0   2F 07                  DW   null1   
09E2   CD BC 08               CALL   define   
09E5   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09ED   40 07                  DW   output   
09EF   CD BC 08               CALL   define   
09F2   05 73 63 61 6E 00      .PSTR   "scan",0   
09F8   01 00                  DW   scan   
09FA   CD BC 08               CALL   define   
09FD   04 73 65 74 00         .PSTR   "set",0   
0A02   85 05                  DW   set   
0A04   CD BC 08               CALL   define   
0A07   04 73 68 6C 00         .PSTR   "shl",0   
0A0C   CC 03                  DW   shl   
0A0E   CD BC 08               CALL   define   
0A11   04 73 68 72 00         .PSTR   "shr",0   
0A16   DC 03                  DW   shr   
0A18   CD BC 08               CALL   define   
0A1B   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A21   EE 06                  DW   sqrt1   
0A23   CD BC 08               CALL   define   
0A26   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A2E   63 05                  DW   switch   
0A30   CD BC 08               CALL   define   
0A33   05 74 72 75 65 00      .PSTR   "true",0   
0A39   29 07                  DW   true1   
0A3B   CD BC 08               CALL   define   
0A3E   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A45   97 05                  DW   words   
0A47   C9                     RET      
0A48                START:       
0A48   31 80 18               LD   sp,STACK   ; start of Siena
0A4B   CD D4 08               CALL   init   ; setups
0A4E   CD B1 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A51   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A5E                INTERPRET:      
0A5E   CD A1 08               CALL   prompt   
0A61   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A64   ED 43 9C 18            LD   (vTIBPtr),bc   
0A68                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A68   1E 00                  LD   e,0   ; initilize nesting value
0A6A   C5                     PUSH   bc   ; save offset into TIB,
0A6B                             ; bc is also the count of chars in TIB
0A6B   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A6E   18 06                  JR   interpret4   
0A70                INTERPRET3:      
0A70   7E                     LD   a,(hl)   ; a = char in TIB
0A71   23                     INC   hl   ; inc pointer into TIB
0A72   0B                     DEC   bc   ; dec count of chars in TIB
0A73   CD 75 08               CALL   nesting   ; update nesting value
0A76                INTERPRET4:      
0A76   79                     LD   a,c   ; is count zero?
0A77   B0                     OR   b   
0A78   20 F6                  JR   nz,interpret3   ; if not loop
0A7A   C1                     POP   bc   ; restore offset into TIB
0A7B                WAITCHAR:      
0A7B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A7E   FE 20                  CP   $20   ; compare to space
0A80   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A82   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A84                             ; ???? NEEDED?
0A84   28 27                  JR   z,waitchar4   
0A86   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A88   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A8A                MACRO:       
0A8A                             ;  ld (vTIBPtr),bc
0A8A                             ;  ld hl,ctrlCodes
0A8A                             ;  add a,l			            ; look up key of macros
0A8A                             ;  ld l,a
0A8A                             ;  ld e,(hl)
0A8A                             ;  ld a,e
0A8A                             ;  or a
0A8A                             ;  jr z,macro1
0A8A                             ;  ld d,msb(macros)
0A8A                             ;  push de
0A8A                             ;  call call		            ; Siena exec_ operation and jump to it
0A8A                             ;  db DC1,0
0A8A                             ; macro1:
0A8A                             ;  ld bc,(vTIBPtr)
0A8A   18 DC                  JR   interpret2   
0A8C                WAITCHAR1:      
0A8C   21 00 19               LD   hl,TIB   
0A8F   09                     ADD   hl,bc   
0A90   77                     LD   (hl),a   ; store the character in textbuf
0A91   03                     INC   bc   
0A92   CD 85 00               CALL   putchar   ; echo character to screen
0A95   CD 75 08               CALL   nesting   
0A98   18 E1                  JR   waitchar   ; wait for next character
0A9A                WAITCHAR3:      
0A9A   21 00 19               LD   hl,TIB   
0A9D   09                     ADD   hl,bc   
0A9E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0AA0   23                     INC   hl   
0AA1   36 0A                  LD   (hl),"\n"   
0AA3   23                     INC   hl   
0AA4   03                     INC   bc   
0AA5   03                     INC   bc   
0AA6   CD AA 08               CALL   crlf   ; echo character to screen
0AA9   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0AAA   B7                     OR   a   
0AAB   20 CE                  JR   nz,waitchar   
0AAD                WAITCHAR4:      
0AAD   ED 43 9C 18            LD   (vTIBPtr),bc   
0AB1   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AB4                             ; we pressed enter
0AB4   0B                     DEC   bc   
0AB5                NEXT:        
0AB5   03                     INC   bc   ; Increment the IP
0AB6   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AB7   FE 20                  CP   " "   ; whitespace?
0AB9   28 FA                  JR   z,next   ; space? ignore
0ABB   38 0B                  JR   c,next1   
0ABD   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0ABF   30 1A                  JR   nc,next2   
0AC1   6F                     LD   l,a   ; index into table
0AC2   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AC4   6E                     LD   l,(hl)   ; get low jump address
0AC5   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AC7   E9                     JP   (hl)   ; Jump to routine
0AC8                NEXT1:       
0AC8   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0ACA   28 15                  JR   z,escape_   
0ACC   FE 00                  CP   NUL   ; end of input string?
0ACE   28 12                  JR   z,exit_   
0AD0   FE 11                  CP   DC1   ; literal number
0AD2   28 11                  JR   z,literal_   
0AD4   FE 12                  CP   DC2   ; enter routine
0AD6   28 16                  JR   z,enter_   
0AD8   C3 5E 0A               JP   interpret   ; no, other whitespace, macros?
0ADB                NEXT2:       
0ADB   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
0ADC   03                     INC   bc   
0ADD   0A                     LD   a,(bc)   
0ADE   6F                     LD   l,a   
0ADF   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
0AE0   E9                     JP   (hl)   
0AE1                ESCAPE_:      
0AE1   03                     INC   bc   ; falls through
0AE2                EXIT_:       
0AE2   60 69                  LD   hl,bc   
0AE4   E9                     JP   (hl)   
0AE5                LITERAL_:      
0AE5   03                     INC   bc   
0AE6   0A                     LD   a,(bc)   
0AE7   6F                     LD   l,a   
0AE8   03                     INC   bc   
0AE9   0A                     LD   a,(bc)   
0AEA   67                     LD   h,a   
0AEB   E5                     PUSH   hl   
0AEC   DD E9                  JP   (ix)   
0AEE                ENTER_:      
0AEE   03                     INC   bc   
0AEF   0A                     LD   a,(bc)   
0AF0   6F                     LD   l,a   
0AF1   03                     INC   bc   
0AF2   0A                     LD   a,(bc)   
0AF3   67                     LD   h,a   
0AF4   E9                     JP   (hl)   
0AF5                             ; arg1 .. argn func -- ?
0AF5                CALL:        
0AF5   E1                     POP   hl   
0AF6   E9                     JP   (hl)   
0AF7                             ; execute a block of code which ends with }
0AF7                             ; creates a root scope if BP == stack
0AF7                             ; else uses outer scope
0AF7                EXEC:        
0AF7   D1                     POP   de   ; de = block*
0AF8                EXEC0:       
0AF8   7B                     LD   a,e   ; if block* == null, exit
0AF9   B2                     OR   d   
0AFA   20 02                  JR   nz,exec1   
0AFC   DD E9                  JP   (ix)   
0AFE                EXEC1:       
0AFE   C5                     PUSH   bc   ; push IP
0AFF   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B02   FD 44                  LD   b,iyh   
0B04   FD 4D                  LD   c,iyl   
0B06   B7                     OR   a   ; hl = stack - BP = root_scope
0B07   ED 42                  SBC   hl,bc   
0B09   7D                     LD   a,l   ; if root_scope, skip
0B0A   B4                     OR   h   
0B0B   28 11                  JR   z,exec2   
0B0D   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B10   FD 46 05               LD   b,(iy+5)   
0B13   C5                     PUSH   bc   
0B14   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0B17   FD 46 03               LD   b,(iy+3)   
0B1A   60 69                  LD   hl,bc   
0B1C   18 34                  JR   doCall4   
0B1E                EXEC2:       
0B1E   E5                     PUSH   hl   ; push arg_list (null)
0B1F   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0B22   39                     ADD   hl,sp   
0B23   18 2D                  JR   doCall4   ; 
0B25                             ; call with args
0B25                             ; creates a scope
0B25                             ; code* -- ?
0B25                DOCALL:      ; execute code at pointer
0B25   E1                     POP   hl   ; hl = code*
0B26   7D                     LD   a,l   ; if code* == null, skip
0B27   B4                     OR   h   
0B28   28 34                  JR   z,doCall5   
0B2A   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0B2B   23                     INC   hl   
0B2C   56                     LD   d,(hl)   
0B2D   23                     INC   hl   
0B2E   EB                     EX   de,hl   
0B2F   7D                     LD   a,l   ; if arg_list* != null skip
0B30   B4                     OR   h   
0B31   20 08                  JR   nz,doCall1   
0B33   C5                     PUSH   bc   ; push IP
0B34   E5                     PUSH   hl   ; push arg_list (null)
0B35   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0B38   39                     ADD   hl,sp   
0B39   18 17                  JR   doCall4   
0B3B                DOCALL1:      
0B3B   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0B3C   7E                     LD   a,(hl)   
0B3D   23                     INC   hl   
0B3E   B7                     OR   a   
0B3F   28 05                  JR   z,doCall3   
0B41                DOCALL2:      
0B41   3B                     DEC   sp   
0B42   3B                     DEC   sp   
0B43   3D                     DEC   a   
0B44   20 FB                  JR   nz,doCall2   
0B46                DOCALL3:      
0B46   C5                     PUSH   bc   ; push IP
0B47   E5                     PUSH   hl   ; push arg_list*
0B48   2B                     DEC   hl   ; hl = num_args*
0B49   2B                     DEC   hl   
0B4A   7E                     LD   a,(hl)   ; hl = num_args * 2
0B4B   87                     ADD   a,a   
0B4C   C6 04                  ADD   a,4   ; offset for IP and arg_list
0B4E   6F                     LD   l,a   
0B4F   26 00                  LD   h,$0   
0B51   39                     ADD   hl,sp   ; hl = first_arg*
0B52                DOCALL4:      
0B52   E5                     PUSH   hl   ; push first_arg
0B53   FD E5                  PUSH   iy   ; push BP
0B55   FD 21 00 00            LD   iy,0   ; BP = SP
0B59   FD 39                  ADD   iy,sp   
0B5B   42 4B                  LD   bc,de   ; bc = de = block*-1
0B5D   0B                     DEC   bc   
0B5E                DOCALL5:      
0B5E   DD E9                  JP   (ix)   
0B60                             ; arg_list* block* -- ptr
0B60                FUNC:        
0B60   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B63   36 CD                  LD   (hl),$cd   ; compile "call doCall"
0B65   23                     INC   hl   
0B66   36 25                  LD   (hl),lsb(doCall)   
0B68   23                     INC   hl   
0B69   36 0B                  LD   (hl),msb(doCall)   
0B6B   23                     INC   hl   
0B6C   D1                     POP   de   ; hl = heapPtr, de = block
0B6D   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
0B6E   E3                     EX   (sp),hl   
0B6F   EB                     EX   de,hl   
0B70   73                     LD   (hl),e   ; compile arg_list*
0B71   23                     INC   hl   
0B72   72                     LD   (hl),d   
0B73   23                     INC   hl   
0B74   D1                     POP   de   ; de = block*
0B75   C5                     PUSH   bc   ; (sp) = IP
0B76   06 01                  LD   b,1   ; b = nesting
0B78                FUNC1:       
0B78   1A                     LD   a,(de)   
0B79   13                     INC   de   
0B7A   77                     LD   (hl),a   
0B7B   23                     INC   hl   
0B7C   FE 29                  CP   ")"   
0B7E   28 29                  JR   z,func4   
0B80   FE 7D                  CP   "}"   
0B82   28 25                  JR   z,func4   
0B84   FE 5D                  CP   "]"   
0B86   28 21                  JR   z,func4   
0B88   FE 28                  CP   "("   
0B8A   28 12                  JR   z,func2   
0B8C   FE 7B                  CP   "{"   
0B8E   28 0E                  JR   z,func2   
0B90   FE 5B                  CP   "["   
0B92   28 0A                  JR   z,func2   
0B94   FE 27                  CP   "'"   
0B96   28 09                  JR   z,func3   
0B98   FE 60                  CP   "`"   
0B9A   28 05                  JR   z,func3   
0B9C   18 DA                  JR   func1   
0B9E                FUNC2:       
0B9E   04                     INC   b   
0B9F   18 D7                  JR   func1   
0BA1                FUNC3:       
0BA1   3E 80                  LD   a,$80   
0BA3   A8                     XOR   b   
0BA4   47                     LD   b,a   
0BA5   20 D1                  JR   nz,func1   
0BA7   18 03                  JR   func4a   
0BA9                FUNC4:       
0BA9   05                     DEC   b   
0BAA   20 CC                  JR   nz,func1   ; get the next element
0BAC                FUNC4A:      
0BAC   23                     INC   hl   
0BAD   C1                     POP   bc   ; de = defstart, hl = IP
0BAE   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0BB2   D5                     PUSH   de   
0BB3   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0BB6   DD E9                  JP   (ix)   
0BB8                             ; $a .. $z
0BB8                             ; -- value
0BB8                             ; returns value of arg
0BB8                ARG:         
0BB8   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0BBB   FD 56 05               LD   d,(iy+5)   
0BBE   EB                     EX   de,hl   
0BBF   7D                     LD   a,l   ; arg_list* == null, skip
0BC0   B4                     OR   h   
0BC1   28 1C                  JR   z,arg0a   
0BC3   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0BC4   2B                     DEC   hl   
0BC5   7E                     LD   a,(hl)   
0BC6   23                     INC   hl   
0BC7   23                     INC   hl   
0BC8   B7                     OR   a   
0BC9   28 14                  JR   z,arg0a   ; num_args == 0, skip
0BCB   5F                     LD   e,a   ; e = a = num_args
0BCC   03                     INC   bc   ; a = next char = arg_name
0BCD   0A                     LD   a,(bc)   
0BCE   C5                     PUSH   bc   ; save IP
0BCF   43                     LD   b,e   ; b = e = num_args
0BD0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BD3   FD 56 03               LD   d,(iy+3)   
0BD6                ARG0:        
0BD6   1B                     DEC   de   ; a = arg_name, de = next arg*
0BD7   1B                     DEC   de   
0BD8   BE                     CP   (hl)   
0BD9   28 09                  JR   z,arg1   
0BDB   23                     INC   hl   ; hl = next arg_list*
0BDC   10 F8                  DJNZ   arg0   
0BDE   C1                     POP   bc   ; no match, restore IP
0BDF                ARG0A:       
0BDF   11 00 00               LD   de,0   ; return 0
0BE2   18 08                  JR   arg1a   
0BE4                ARG1:        
0BE4   C1                     POP   bc   ; restore IP
0BE5   EB                     EX   de,hl   ; hl = arg*
0BE6   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0BE9   5E                     LD   e,(hl)   
0BEA   23                     INC   hl   
0BEB   56                     LD   d,(hl)   ; de = arg
0BEC                ARG1A:       
0BEC   D5                     PUSH   de   ; push arg
0BED   DD E9                  JP   (ix)   
0BEF                             ; closure:
0BEF                             ; array -- addr
0BEF                CLOSURE:      
0BEF   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap_ptr
0BF2   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0BF4   23                     INC   hl   
0BF5   36 09                  LD   (hl),lsb(doClosure)   
0BF7   23                     INC   hl   
0BF8   36 0C                  LD   (hl),msb(doClosure)   
0BFA   D1                     POP   de   
0BFB   23                     INC   hl   
0BFC   73                     LD   (hl),e   
0BFD   23                     INC   hl   
0BFE   72                     LD   (hl),d   
0BFF   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = closure start
0C03   D5                     PUSH   de   
0C04   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
0C07   DD E9                  JP   (ix)   
0C09                             ; code* -- arr1 arr2 .. arrn func
0C09                DOCLOSURE:      
0C09   E1                     POP   hl   ; hl = code*
0C0A   5E                     LD   e,(hl)   ; de = array
0C0B   23                     INC   hl   
0C0C   56                     LD   d,(hl)   
0C0D   23                     INC   hl   
0C0E   7B                     LD   a,e   ; de == null, skip
0C0F   B2                     OR   d   
0C10   28 17                  JR   z,doClosure3   
0C12   EB                     EX   de,hl   ; hl = array
0C13   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
0C17   2B                     DEC   hl   ; bc = count
0C18   46                     LD   b,(hl)   
0C19   2B                     DEC   hl   
0C1A   4E                     LD   c,(hl)   
0C1B   23                     INC   hl   ; push each item on stack
0C1C   23                     INC   hl   
0C1D   18 06                  JR   doClosure2   
0C1F                DOCLOSURE1:      
0C1F   5E                     LD   e,(hl)   
0C20   23                     INC   hl   
0C21   56                     LD   d,(hl)   
0C22   23                     INC   hl   
0C23   D5                     PUSH   de   
0C24   0B                     DEC   bc   
0C25                DOCLOSURE2:      
0C25   79                     LD   a,c   
0C26   B0                     OR   b   
0C27   20 F6                  JR   nz,doClosure1   
0C29                DOCLOSURE3:      
0C29   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0C2D   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; initialised sys variables
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                VTEMP1:   DS   2   ; uninitialised sys variables
18AA                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   CD B8 08               CALL   execStr   
4003   39                     DB   "9"   
4004                          ;*Macro unroll:  kall sqrt1
4004   83                     DB   msb(sqrt1 / 2) + $80   
4005   77                     DB   lsb(sqrt1 / 2)   
4006   00                     DB   0   
4007                          ;*Macro unroll:  expect "9 sqrt",3
4007   E1                     POP   HL   
4008   E5                     PUSH   HL   
4009   11 03 00               LD   DE,3   
400C   B7                     OR   A   
400D   ED 52                  SBC   HL,DE   
400F   7D                     LD   A,L   
4010   B4                     OR   H   
4011   28 51                  JR   Z,expectM_2513S22   
4013   CD B1 08               CALL   printStr   
4016   43 6F 64 65 3A 20 39 20 73 71 72 74 00 .CSTR   "Code: ","9 sqrt"   
4023   CD B1 08               CALL   printStr   
4026   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4035   21 03 00               LD   HL,3   
4038   CD 05 08               CALL   prtdec   
403B   CD B1 08               CALL   printStr   
403E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404B   E1                     POP   hl   
404C   E5                     PUSH   hl   
404D   CD 05 08               CALL   prtdec   
4050   E1                     POP   hl   
4051   CD B1 08               CALL   printStr   
4054   20 28 23 00            .CSTR   " (#"   
4058   CD 4D 08               CALL   prthex   
405B   CD B1 08               CALL   printStr   
405E   29 0D 0A 00            .CSTR   ")\r\n"   
4062   76                     HALT      
4063   00                     .CSTR      
4064                EXPECTM_2513S22:      
4064   E1                     POP   HL   
4065                          ;*Macro unroll:  test "1", 1
4065   31 80 18               LD   SP,STACK   
4068   CD D4 08               CALL   init   
406B   CD B8 08               CALL   execStr   
406E   31 00                  .CSTR   "1"   
4070                          ;*Macro unroll:  expect "1",1
4070   E1                     POP   HL   
4071   E5                     PUSH   HL   
4072   11 01 00               LD   DE,1   
4075   B7                     OR   A   
4076   ED 52                  SBC   HL,DE   
4078   7D                     LD   A,L   
4079   B4                     OR   H   
407A   28 4C                  JR   Z,expectM_0_2514S43   
407C   CD B1 08               CALL   printStr   
407F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4087   CD B1 08               CALL   printStr   
408A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4099   21 01 00               LD   HL,1   
409C   CD 05 08               CALL   prtdec   
409F   CD B1 08               CALL   printStr   
40A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AF   E1                     POP   hl   
40B0   E5                     PUSH   hl   
40B1   CD 05 08               CALL   prtdec   
40B4   E1                     POP   hl   
40B5   CD B1 08               CALL   printStr   
40B8   20 28 23 00            .CSTR   " (#"   
40BC   CD 4D 08               CALL   prthex   
40BF   CD B1 08               CALL   printStr   
40C2   29 0D 0A 00            .CSTR   ")\r\n"   
40C6   76                     HALT      
40C7   00                     .CSTR      
40C8                EXPECTM_0_2514S43:      
40C8   E1                     POP   HL   
40C9                          ;*Macro unroll:  test "2", 2
40C9   31 80 18               LD   SP,STACK   
40CC   CD D4 08               CALL   init   
40CF   CD B8 08               CALL   execStr   
40D2   32 00                  .CSTR   "2"   
40D4                          ;*Macro unroll:  expect "2",2
40D4   E1                     POP   HL   
40D5   E5                     PUSH   HL   
40D6   11 02 00               LD   DE,2   
40D9   B7                     OR   A   
40DA   ED 52                  SBC   HL,DE   
40DC   7D                     LD   A,L   
40DD   B4                     OR   H   
40DE   28 4C                  JR   Z,expectM_0_2515S43   
40E0   CD B1 08               CALL   printStr   
40E3   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
40EB   CD B1 08               CALL   printStr   
40EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FD   21 02 00               LD   HL,2   
4100   CD 05 08               CALL   prtdec   
4103   CD B1 08               CALL   printStr   
4106   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4113   E1                     POP   hl   
4114   E5                     PUSH   hl   
4115   CD 05 08               CALL   prtdec   
4118   E1                     POP   hl   
4119   CD B1 08               CALL   printStr   
411C   20 28 23 00            .CSTR   " (#"   
4120   CD 4D 08               CALL   prthex   
4123   CD B1 08               CALL   printStr   
4126   29 0D 0A 00            .CSTR   ")\r\n"   
412A   76                     HALT      
412B   00                     .CSTR      
412C                EXPECTM_0_2515S43:      
412C   E1                     POP   HL   
412D                          ;*Macro unroll:  test "1", 1
412D   31 80 18               LD   SP,STACK   
4130   CD D4 08               CALL   init   
4133   CD B8 08               CALL   execStr   
4136   31 00                  .CSTR   "1"   
4138                          ;*Macro unroll:  expect "1",1
4138   E1                     POP   HL   
4139   E5                     PUSH   HL   
413A   11 01 00               LD   DE,1   
413D   B7                     OR   A   
413E   ED 52                  SBC   HL,DE   
4140   7D                     LD   A,L   
4141   B4                     OR   H   
4142   28 4C                  JR   Z,expectM_0_2516S43   
4144   CD B1 08               CALL   printStr   
4147   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
414F   CD B1 08               CALL   printStr   
4152   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4161   21 01 00               LD   HL,1   
4164   CD 05 08               CALL   prtdec   
4167   CD B1 08               CALL   printStr   
416A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4177   E1                     POP   hl   
4178   E5                     PUSH   hl   
4179   CD 05 08               CALL   prtdec   
417C   E1                     POP   hl   
417D   CD B1 08               CALL   printStr   
4180   20 28 23 00            .CSTR   " (#"   
4184   CD 4D 08               CALL   prthex   
4187   CD B1 08               CALL   printStr   
418A   29 0D 0A 00            .CSTR   ")\r\n"   
418E   76                     HALT      
418F   00                     .CSTR      
4190                EXPECTM_0_2516S43:      
4190   E1                     POP   HL   
4191                          ;*Macro unroll:  test "0", 0
4191   31 80 18               LD   SP,STACK   
4194   CD D4 08               CALL   init   
4197   CD B8 08               CALL   execStr   
419A   30 00                  .CSTR   "0"   
419C                          ;*Macro unroll:  expect "0",0
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 00 00               LD   DE,0   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   28 4C                  JR   Z,expectM_0_2517S43   
41A8   CD B1 08               CALL   printStr   
41AB   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
41B3   CD B1 08               CALL   printStr   
41B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C5   21 00 00               LD   HL,0   
41C8   CD 05 08               CALL   prtdec   
41CB   CD B1 08               CALL   printStr   
41CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DB   E1                     POP   hl   
41DC   E5                     PUSH   hl   
41DD   CD 05 08               CALL   prtdec   
41E0   E1                     POP   hl   
41E1   CD B1 08               CALL   printStr   
41E4   20 28 23 00            .CSTR   " (#"   
41E8   CD 4D 08               CALL   prthex   
41EB   CD B1 08               CALL   printStr   
41EE   29 0D 0A 00            .CSTR   ")\r\n"   
41F2   76                     HALT      
41F3   00                     .CSTR      
41F4                EXPECTM_0_2517S43:      
41F4   E1                     POP   HL   
41F5                          ;*Macro unroll:  test "10", 10
41F5   31 80 18               LD   SP,STACK   
41F8   CD D4 08               CALL   init   
41FB   CD B8 08               CALL   execStr   
41FE   31 30 00               .CSTR   "10"   
4201                          ;*Macro unroll:  expect "10",10
4201   E1                     POP   HL   
4202   E5                     PUSH   HL   
4203   11 0A 00               LD   DE,10   
4206   B7                     OR   A   
4207   ED 52                  SBC   HL,DE   
4209   7D                     LD   A,L   
420A   B4                     OR   H   
420B   28 4D                  JR   Z,expectM_0_2518S43   
420D   CD B1 08               CALL   printStr   
4210   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
4219   CD B1 08               CALL   printStr   
421C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422B   21 0A 00               LD   HL,10   
422E   CD 05 08               CALL   prtdec   
4231   CD B1 08               CALL   printStr   
4234   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4241   E1                     POP   hl   
4242   E5                     PUSH   hl   
4243   CD 05 08               CALL   prtdec   
4246   E1                     POP   hl   
4247   CD B1 08               CALL   printStr   
424A   20 28 23 00            .CSTR   " (#"   
424E   CD 4D 08               CALL   prthex   
4251   CD B1 08               CALL   printStr   
4254   29 0D 0A 00            .CSTR   ")\r\n"   
4258   76                     HALT      
4259   00                     .CSTR      
425A                EXPECTM_0_2518S43:      
425A   E1                     POP   HL   
425B                          ;*Macro unroll:  test "123", 123
425B   31 80 18               LD   SP,STACK   
425E   CD D4 08               CALL   init   
4261   CD B8 08               CALL   execStr   
4264   31 32 33 00            .CSTR   "123"   
4268                          ;*Macro unroll:  expect "123",123
4268   E1                     POP   HL   
4269   E5                     PUSH   HL   
426A   11 7B 00               LD   DE,123   
426D   B7                     OR   A   
426E   ED 52                  SBC   HL,DE   
4270   7D                     LD   A,L   
4271   B4                     OR   H   
4272   28 4E                  JR   Z,expectM_0_2519S43   
4274   CD B1 08               CALL   printStr   
4277   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
4281   CD B1 08               CALL   printStr   
4284   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4293   21 7B 00               LD   HL,123   
4296   CD 05 08               CALL   prtdec   
4299   CD B1 08               CALL   printStr   
429C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42A9   E1                     POP   hl   
42AA   E5                     PUSH   hl   
42AB   CD 05 08               CALL   prtdec   
42AE   E1                     POP   hl   
42AF   CD B1 08               CALL   printStr   
42B2   20 28 23 00            .CSTR   " (#"   
42B6   CD 4D 08               CALL   prthex   
42B9   CD B1 08               CALL   printStr   
42BC   29 0D 0A 00            .CSTR   ")\r\n"   
42C0   76                     HALT      
42C1   00                     .CSTR      
42C2                EXPECTM_0_2519S43:      
42C2   E1                     POP   HL   
42C3                          ;*Macro unroll:  test "-1",-1
42C3   31 80 18               LD   SP,STACK   
42C6   CD D4 08               CALL   init   
42C9   CD B8 08               CALL   execStr   
42CC   2D 31 00               .CSTR   "-1"   
42CF                          ;*Macro unroll:  expect "-1",-1
42CF   E1                     POP   HL   
42D0   E5                     PUSH   HL   
42D1   11 FF FF               LD   DE,-1   
42D4   B7                     OR   A   
42D5   ED 52                  SBC   HL,DE   
42D7   7D                     LD   A,L   
42D8   B4                     OR   H   
42D9   28 4D                  JR   Z,expectM_0_2520S43   
42DB   CD B1 08               CALL   printStr   
42DE   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
42E7   CD B1 08               CALL   printStr   
42EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42F9   21 FF FF               LD   HL,-1   
42FC   CD 05 08               CALL   prtdec   
42FF   CD B1 08               CALL   printStr   
4302   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
430F   E1                     POP   hl   
4310   E5                     PUSH   hl   
4311   CD 05 08               CALL   prtdec   
4314   E1                     POP   hl   
4315   CD B1 08               CALL   printStr   
4318   20 28 23 00            .CSTR   " (#"   
431C   CD 4D 08               CALL   prthex   
431F   CD B1 08               CALL   printStr   
4322   29 0D 0A 00            .CSTR   ")\r\n"   
4326   76                     HALT      
4327   00                     .CSTR      
4328                EXPECTM_0_2520S43:      
4328   E1                     POP   HL   
4329                          ;*Macro unroll:  test "``", 0
4329   31 80 18               LD   SP,STACK   
432C   CD D4 08               CALL   init   
432F   CD B8 08               CALL   execStr   
4332   60 60 00               .CSTR   "``"   
4335                          ;*Macro unroll:  expect "``",0
4335   E1                     POP   HL   
4336   E5                     PUSH   HL   
4337   11 00 00               LD   DE,0   
433A   B7                     OR   A   
433B   ED 52                  SBC   HL,DE   
433D   7D                     LD   A,L   
433E   B4                     OR   H   
433F   28 4D                  JR   Z,expectM_0_2521S43   
4341   CD B1 08               CALL   printStr   
4344   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
434D   CD B1 08               CALL   printStr   
4350   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
435F   21 00 00               LD   HL,0   
4362   CD 05 08               CALL   prtdec   
4365   CD B1 08               CALL   printStr   
4368   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4375   E1                     POP   hl   
4376   E5                     PUSH   hl   
4377   CD 05 08               CALL   prtdec   
437A   E1                     POP   hl   
437B   CD B1 08               CALL   printStr   
437E   20 28 23 00            .CSTR   " (#"   
4382   CD 4D 08               CALL   prthex   
4385   CD B1 08               CALL   printStr   
4388   29 0D 0A 00            .CSTR   ")\r\n"   
438C   76                     HALT      
438D   00                     .CSTR      
438E                EXPECTM_0_2521S43:      
438E   E1                     POP   HL   
438F                          ;*Macro unroll:  test "`a`", $61
438F   31 80 18               LD   SP,STACK   
4392   CD D4 08               CALL   init   
4395   CD B8 08               CALL   execStr   
4398   60 61 60 00            .CSTR   "`a`"   
439C                          ;*Macro unroll:  expect "`a`",$61
439C   E1                     POP   HL   
439D   E5                     PUSH   HL   
439E   11 61 00               LD   DE,$61   
43A1   B7                     OR   A   
43A2   ED 52                  SBC   HL,DE   
43A4   7D                     LD   A,L   
43A5   B4                     OR   H   
43A6   28 4E                  JR   Z,expectM_0_2522S43   
43A8   CD B1 08               CALL   printStr   
43AB   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
43B5   CD B1 08               CALL   printStr   
43B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C7   21 61 00               LD   HL,$61   
43CA   CD 05 08               CALL   prtdec   
43CD   CD B1 08               CALL   printStr   
43D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DD   E1                     POP   hl   
43DE   E5                     PUSH   hl   
43DF   CD 05 08               CALL   prtdec   
43E2   E1                     POP   hl   
43E3   CD B1 08               CALL   printStr   
43E6   20 28 23 00            .CSTR   " (#"   
43EA   CD 4D 08               CALL   prthex   
43ED   CD B1 08               CALL   printStr   
43F0   29 0D 0A 00            .CSTR   ")\r\n"   
43F4   76                     HALT      
43F5   00                     .CSTR      
43F6                EXPECTM_0_2522S43:      
43F6   E1                     POP   HL   
43F7                          ;*Macro unroll:  test "`\\``", $60
43F7   31 80 18               LD   SP,STACK   
43FA   CD D4 08               CALL   init   
43FD   CD B8 08               CALL   execStr   
4400   60 5C 60 60 00         .CSTR   "`\\``"   
4405                          ;*Macro unroll:  expect "`\\``",$60
4405   E1                     POP   HL   
4406   E5                     PUSH   HL   
4407   11 60 00               LD   DE,$60   
440A   B7                     OR   A   
440B   ED 52                  SBC   HL,DE   
440D   7D                     LD   A,L   
440E   B4                     OR   H   
440F   28 4F                  JR   Z,expectM_0_2523S43   
4411   CD B1 08               CALL   printStr   
4414   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
441F   CD B1 08               CALL   printStr   
4422   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4431   21 60 00               LD   HL,$60   
4434   CD 05 08               CALL   prtdec   
4437   CD B1 08               CALL   printStr   
443A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4447   E1                     POP   hl   
4448   E5                     PUSH   hl   
4449   CD 05 08               CALL   prtdec   
444C   E1                     POP   hl   
444D   CD B1 08               CALL   printStr   
4450   20 28 23 00            .CSTR   " (#"   
4454   CD 4D 08               CALL   prthex   
4457   CD B1 08               CALL   printStr   
445A   29 0D 0A 00            .CSTR   ")\r\n"   
445E   76                     HALT      
445F   00                     .CSTR      
4460                EXPECTM_0_2523S43:      
4460   E1                     POP   HL   
4461                          ;*Macro unroll:  test "#10", $10
4461   31 80 18               LD   SP,STACK   
4464   CD D4 08               CALL   init   
4467   CD B8 08               CALL   execStr   
446A   23 31 30 00            .CSTR   "#10"   
446E                          ;*Macro unroll:  expect "#10",$10
446E   E1                     POP   HL   
446F   E5                     PUSH   HL   
4470   11 10 00               LD   DE,$10   
4473   B7                     OR   A   
4474   ED 52                  SBC   HL,DE   
4476   7D                     LD   A,L   
4477   B4                     OR   H   
4478   28 4E                  JR   Z,expectM_0_2524S43   
447A   CD B1 08               CALL   printStr   
447D   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4487   CD B1 08               CALL   printStr   
448A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4499   21 10 00               LD   HL,$10   
449C   CD 05 08               CALL   prtdec   
449F   CD B1 08               CALL   printStr   
44A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44AF   E1                     POP   hl   
44B0   E5                     PUSH   hl   
44B1   CD 05 08               CALL   prtdec   
44B4   E1                     POP   hl   
44B5   CD B1 08               CALL   printStr   
44B8   20 28 23 00            .CSTR   " (#"   
44BC   CD 4D 08               CALL   prthex   
44BF   CD B1 08               CALL   printStr   
44C2   29 0D 0A 00            .CSTR   ")\r\n"   
44C6   76                     HALT      
44C7   00                     .CSTR      
44C8                EXPECTM_0_2524S43:      
44C8   E1                     POP   HL   
44C9                          ;*Macro unroll:  test "#FF", $FF
44C9   31 80 18               LD   SP,STACK   
44CC   CD D4 08               CALL   init   
44CF   CD B8 08               CALL   execStr   
44D2   23 46 46 00            .CSTR   "#FF"   
44D6                          ;*Macro unroll:  expect "#FF",$FF
44D6   E1                     POP   HL   
44D7   E5                     PUSH   HL   
44D8   11 FF 00               LD   DE,$FF   
44DB   B7                     OR   A   
44DC   ED 52                  SBC   HL,DE   
44DE   7D                     LD   A,L   
44DF   B4                     OR   H   
44E0   28 4E                  JR   Z,expectM_0_2525S43   
44E2   CD B1 08               CALL   printStr   
44E5   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
44EF   CD B1 08               CALL   printStr   
44F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4501   21 FF 00               LD   HL,$FF   
4504   CD 05 08               CALL   prtdec   
4507   CD B1 08               CALL   printStr   
450A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4517   E1                     POP   hl   
4518   E5                     PUSH   hl   
4519   CD 05 08               CALL   prtdec   
451C   E1                     POP   hl   
451D   CD B1 08               CALL   printStr   
4520   20 28 23 00            .CSTR   " (#"   
4524   CD 4D 08               CALL   prthex   
4527   CD B1 08               CALL   printStr   
452A   29 0D 0A 00            .CSTR   ")\r\n"   
452E   76                     HALT      
452F   00                     .CSTR      
4530                EXPECTM_0_2525S43:      
4530   E1                     POP   HL   
4531                          ;*Macro unroll:  test "-1 2 +",1
4531   31 80 18               LD   SP,STACK   
4534   CD D4 08               CALL   init   
4537   CD B8 08               CALL   execStr   
453A   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
4541                          ;*Macro unroll:  expect "-1 2 +",1
4541   E1                     POP   HL   
4542   E5                     PUSH   HL   
4543   11 01 00               LD   DE,1   
4546   B7                     OR   A   
4547   ED 52                  SBC   HL,DE   
4549   7D                     LD   A,L   
454A   B4                     OR   H   
454B   28 51                  JR   Z,expectM_0_2526S43   
454D   CD B1 08               CALL   printStr   
4550   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
455D   CD B1 08               CALL   printStr   
4560   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
456F   21 01 00               LD   HL,1   
4572   CD 05 08               CALL   prtdec   
4575   CD B1 08               CALL   printStr   
4578   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4585   E1                     POP   hl   
4586   E5                     PUSH   hl   
4587   CD 05 08               CALL   prtdec   
458A   E1                     POP   hl   
458B   CD B1 08               CALL   printStr   
458E   20 28 23 00            .CSTR   " (#"   
4592   CD 4D 08               CALL   prthex   
4595   CD B1 08               CALL   printStr   
4598   29 0D 0A 00            .CSTR   ")\r\n"   
459C   76                     HALT      
459D   00                     .CSTR      
459E                EXPECTM_0_2526S43:      
459E   E1                     POP   HL   
459F                          ;*Macro unroll:  test "-1 1 +",0
459F   31 80 18               LD   SP,STACK   
45A2   CD D4 08               CALL   init   
45A5   CD B8 08               CALL   execStr   
45A8   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
45AF                          ;*Macro unroll:  expect "-1 1 +",0
45AF   E1                     POP   HL   
45B0   E5                     PUSH   HL   
45B1   11 00 00               LD   DE,0   
45B4   B7                     OR   A   
45B5   ED 52                  SBC   HL,DE   
45B7   7D                     LD   A,L   
45B8   B4                     OR   H   
45B9   28 51                  JR   Z,expectM_0_2527S43   
45BB   CD B1 08               CALL   printStr   
45BE   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
45CB   CD B1 08               CALL   printStr   
45CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45DD   21 00 00               LD   HL,0   
45E0   CD 05 08               CALL   prtdec   
45E3   CD B1 08               CALL   printStr   
45E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F3   E1                     POP   hl   
45F4   E5                     PUSH   hl   
45F5   CD 05 08               CALL   prtdec   
45F8   E1                     POP   hl   
45F9   CD B1 08               CALL   printStr   
45FC   20 28 23 00            .CSTR   " (#"   
4600   CD 4D 08               CALL   prthex   
4603   CD B1 08               CALL   printStr   
4606   29 0D 0A 00            .CSTR   ")\r\n"   
460A   76                     HALT      
460B   00                     .CSTR      
460C                EXPECTM_0_2527S43:      
460C   E1                     POP   HL   
460D                          ;*Macro unroll:  test "1 2 +", 3
460D   31 80 18               LD   SP,STACK   
4610   CD D4 08               CALL   init   
4613   CD B8 08               CALL   execStr   
4616   31 20 32 20 2B 00      .CSTR   "1 2 +"   
461C                          ;*Macro unroll:  expect "1 2 +",3
461C   E1                     POP   HL   
461D   E5                     PUSH   HL   
461E   11 03 00               LD   DE,3   
4621   B7                     OR   A   
4622   ED 52                  SBC   HL,DE   
4624   7D                     LD   A,L   
4625   B4                     OR   H   
4626   28 50                  JR   Z,expectM_0_2528S43   
4628   CD B1 08               CALL   printStr   
462B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4637   CD B1 08               CALL   printStr   
463A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4649   21 03 00               LD   HL,3   
464C   CD 05 08               CALL   prtdec   
464F   CD B1 08               CALL   printStr   
4652   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
465F   E1                     POP   hl   
4660   E5                     PUSH   hl   
4661   CD 05 08               CALL   prtdec   
4664   E1                     POP   hl   
4665   CD B1 08               CALL   printStr   
4668   20 28 23 00            .CSTR   " (#"   
466C   CD 4D 08               CALL   prthex   
466F   CD B1 08               CALL   printStr   
4672   29 0D 0A 00            .CSTR   ")\r\n"   
4676   76                     HALT      
4677   00                     .CSTR      
4678                EXPECTM_0_2528S43:      
4678   E1                     POP   HL   
4679                          ;*Macro unroll:  test "4 1 2 +", 3
4679   31 80 18               LD   SP,STACK   
467C   CD D4 08               CALL   init   
467F   CD B8 08               CALL   execStr   
4682   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
468A                          ;*Macro unroll:  expect "4 1 2 +",3
468A   E1                     POP   HL   
468B   E5                     PUSH   HL   
468C   11 03 00               LD   DE,3   
468F   B7                     OR   A   
4690   ED 52                  SBC   HL,DE   
4692   7D                     LD   A,L   
4693   B4                     OR   H   
4694   28 52                  JR   Z,expectM_0_2529S43   
4696   CD B1 08               CALL   printStr   
4699   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
46A7   CD B1 08               CALL   printStr   
46AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B9   21 03 00               LD   HL,3   
46BC   CD 05 08               CALL   prtdec   
46BF   CD B1 08               CALL   printStr   
46C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46CF   E1                     POP   hl   
46D0   E5                     PUSH   hl   
46D1   CD 05 08               CALL   prtdec   
46D4   E1                     POP   hl   
46D5   CD B1 08               CALL   printStr   
46D8   20 28 23 00            .CSTR   " (#"   
46DC   CD 4D 08               CALL   prthex   
46DF   CD B1 08               CALL   printStr   
46E2   29 0D 0A 00            .CSTR   ")\r\n"   
46E6   76                     HALT      
46E7   00                     .CSTR      
46E8                EXPECTM_0_2529S43:      
46E8   E1                     POP   HL   
46E9                          ;*Macro unroll:  test "1 2 +", 3
46E9   31 80 18               LD   SP,STACK   
46EC   CD D4 08               CALL   init   
46EF   CD B8 08               CALL   execStr   
46F2   31 20 32 20 2B 00      .CSTR   "1 2 +"   
46F8                          ;*Macro unroll:  expect "1 2 +",3
46F8   E1                     POP   HL   
46F9   E5                     PUSH   HL   
46FA   11 03 00               LD   DE,3   
46FD   B7                     OR   A   
46FE   ED 52                  SBC   HL,DE   
4700   7D                     LD   A,L   
4701   B4                     OR   H   
4702   28 50                  JR   Z,expectM_0_2530S43   
4704   CD B1 08               CALL   printStr   
4707   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4713   CD B1 08               CALL   printStr   
4716   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4725   21 03 00               LD   HL,3   
4728   CD 05 08               CALL   prtdec   
472B   CD B1 08               CALL   printStr   
472E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473B   E1                     POP   hl   
473C   E5                     PUSH   hl   
473D   CD 05 08               CALL   prtdec   
4740   E1                     POP   hl   
4741   CD B1 08               CALL   printStr   
4744   20 28 23 00            .CSTR   " (#"   
4748   CD 4D 08               CALL   prthex   
474B   CD B1 08               CALL   printStr   
474E   29 0D 0A 00            .CSTR   ")\r\n"   
4752   76                     HALT      
4753   00                     .CSTR      
4754                EXPECTM_0_2530S43:      
4754   E1                     POP   HL   
4755                          ;*Macro unroll:  test "123 456 +", 123+456
4755   31 80 18               LD   SP,STACK   
4758   CD D4 08               CALL   init   
475B   CD B8 08               CALL   execStr   
475E   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4768                          ;*Macro unroll:  expect "123 456 +",123+456
4768   E1                     POP   HL   
4769   E5                     PUSH   HL   
476A   11 43 02               LD   DE,123+456   
476D   B7                     OR   A   
476E   ED 52                  SBC   HL,DE   
4770   7D                     LD   A,L   
4771   B4                     OR   H   
4772   28 54                  JR   Z,expectM_0_2531S43   
4774   CD B1 08               CALL   printStr   
4777   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4787   CD B1 08               CALL   printStr   
478A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4799   21 43 02               LD   HL,123+456   
479C   CD 05 08               CALL   prtdec   
479F   CD B1 08               CALL   printStr   
47A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AF   E1                     POP   hl   
47B0   E5                     PUSH   hl   
47B1   CD 05 08               CALL   prtdec   
47B4   E1                     POP   hl   
47B5   CD B1 08               CALL   printStr   
47B8   20 28 23 00            .CSTR   " (#"   
47BC   CD 4D 08               CALL   prthex   
47BF   CD B1 08               CALL   printStr   
47C2   29 0D 0A 00            .CSTR   ")\r\n"   
47C6   76                     HALT      
47C7   00                     .CSTR      
47C8                EXPECTM_0_2531S43:      
47C8   E1                     POP   HL   
47C9                          ;*Macro unroll:  test "64 128 +", 64+128
47C9   31 80 18               LD   SP,STACK   
47CC   CD D4 08               CALL   init   
47CF   CD B8 08               CALL   execStr   
47D2   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
47DB                          ;*Macro unroll:  expect "64 128 +",64+128
47DB   E1                     POP   HL   
47DC   E5                     PUSH   HL   
47DD   11 C0 00               LD   DE,64+128   
47E0   B7                     OR   A   
47E1   ED 52                  SBC   HL,DE   
47E3   7D                     LD   A,L   
47E4   B4                     OR   H   
47E5   28 53                  JR   Z,expectM_0_2532S43   
47E7   CD B1 08               CALL   printStr   
47EA   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
47F9   CD B1 08               CALL   printStr   
47FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
480B   21 C0 00               LD   HL,64+128   
480E   CD 05 08               CALL   prtdec   
4811   CD B1 08               CALL   printStr   
4814   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4821   E1                     POP   hl   
4822   E5                     PUSH   hl   
4823   CD 05 08               CALL   prtdec   
4826   E1                     POP   hl   
4827   CD B1 08               CALL   printStr   
482A   20 28 23 00            .CSTR   " (#"   
482E   CD 4D 08               CALL   prthex   
4831   CD B1 08               CALL   printStr   
4834   29 0D 0A 00            .CSTR   ")\r\n"   
4838   76                     HALT      
4839   00                     .CSTR      
483A                EXPECTM_0_2532S43:      
483A   E1                     POP   HL   
483B                          ;*Macro unroll:  test "-1 -1 -",0
483B   31 80 18               LD   SP,STACK   
483E   CD D4 08               CALL   init   
4841   CD B8 08               CALL   execStr   
4844   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
484C                          ;*Macro unroll:  expect "-1 -1 -",0
484C   E1                     POP   HL   
484D   E5                     PUSH   HL   
484E   11 00 00               LD   DE,0   
4851   B7                     OR   A   
4852   ED 52                  SBC   HL,DE   
4854   7D                     LD   A,L   
4855   B4                     OR   H   
4856   28 52                  JR   Z,expectM_0_2533S43   
4858   CD B1 08               CALL   printStr   
485B   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4869   CD B1 08               CALL   printStr   
486C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
487B   21 00 00               LD   HL,0   
487E   CD 05 08               CALL   prtdec   
4881   CD B1 08               CALL   printStr   
4884   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4891   E1                     POP   hl   
4892   E5                     PUSH   hl   
4893   CD 05 08               CALL   prtdec   
4896   E1                     POP   hl   
4897   CD B1 08               CALL   printStr   
489A   20 28 23 00            .CSTR   " (#"   
489E   CD 4D 08               CALL   prthex   
48A1   CD B1 08               CALL   printStr   
48A4   29 0D 0A 00            .CSTR   ")\r\n"   
48A8   76                     HALT      
48A9   00                     .CSTR      
48AA                EXPECTM_0_2533S43:      
48AA   E1                     POP   HL   
48AB                          ;*Macro unroll:  test "5 3 -", 2
48AB   31 80 18               LD   SP,STACK   
48AE   CD D4 08               CALL   init   
48B1   CD B8 08               CALL   execStr   
48B4   35 20 33 20 2D 00      .CSTR   "5 3 -"   
48BA                          ;*Macro unroll:  expect "5 3 -",2
48BA   E1                     POP   HL   
48BB   E5                     PUSH   HL   
48BC   11 02 00               LD   DE,2   
48BF   B7                     OR   A   
48C0   ED 52                  SBC   HL,DE   
48C2   7D                     LD   A,L   
48C3   B4                     OR   H   
48C4   28 50                  JR   Z,expectM_0_2534S43   
48C6   CD B1 08               CALL   printStr   
48C9   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
48D5   CD B1 08               CALL   printStr   
48D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E7   21 02 00               LD   HL,2   
48EA   CD 05 08               CALL   prtdec   
48ED   CD B1 08               CALL   printStr   
48F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48FD   E1                     POP   hl   
48FE   E5                     PUSH   hl   
48FF   CD 05 08               CALL   prtdec   
4902   E1                     POP   hl   
4903   CD B1 08               CALL   printStr   
4906   20 28 23 00            .CSTR   " (#"   
490A   CD 4D 08               CALL   prthex   
490D   CD B1 08               CALL   printStr   
4910   29 0D 0A 00            .CSTR   ")\r\n"   
4914   76                     HALT      
4915   00                     .CSTR      
4916                EXPECTM_0_2534S43:      
4916   E1                     POP   HL   
4917                          ;*Macro unroll:  test "3 5 &", 1
4917   31 80 18               LD   SP,STACK   
491A   CD D4 08               CALL   init   
491D   CD B8 08               CALL   execStr   
4920   33 20 35 20 26 00      .CSTR   "3 5 &"   
4926                          ;*Macro unroll:  expect "3 5 &",1
4926   E1                     POP   HL   
4927   E5                     PUSH   HL   
4928   11 01 00               LD   DE,1   
492B   B7                     OR   A   
492C   ED 52                  SBC   HL,DE   
492E   7D                     LD   A,L   
492F   B4                     OR   H   
4930   28 50                  JR   Z,expectM_0_2535S43   
4932   CD B1 08               CALL   printStr   
4935   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4941   CD B1 08               CALL   printStr   
4944   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4953   21 01 00               LD   HL,1   
4956   CD 05 08               CALL   prtdec   
4959   CD B1 08               CALL   printStr   
495C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4969   E1                     POP   hl   
496A   E5                     PUSH   hl   
496B   CD 05 08               CALL   prtdec   
496E   E1                     POP   hl   
496F   CD B1 08               CALL   printStr   
4972   20 28 23 00            .CSTR   " (#"   
4976   CD 4D 08               CALL   prthex   
4979   CD B1 08               CALL   printStr   
497C   29 0D 0A 00            .CSTR   ")\r\n"   
4980   76                     HALT      
4981   00                     .CSTR      
4982                EXPECTM_0_2535S43:      
4982   E1                     POP   HL   
4983                          ;*Macro unroll:  test "3 5 |", 7
4983   31 80 18               LD   SP,STACK   
4986   CD D4 08               CALL   init   
4989   CD B8 08               CALL   execStr   
498C   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4992                          ;*Macro unroll:  expect "3 5 |",7
4992   E1                     POP   HL   
4993   E5                     PUSH   HL   
4994   11 07 00               LD   DE,7   
4997   B7                     OR   A   
4998   ED 52                  SBC   HL,DE   
499A   7D                     LD   A,L   
499B   B4                     OR   H   
499C   28 50                  JR   Z,expectM_0_2536S43   
499E   CD B1 08               CALL   printStr   
49A1   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
49AD   CD B1 08               CALL   printStr   
49B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49BF   21 07 00               LD   HL,7   
49C2   CD 05 08               CALL   prtdec   
49C5   CD B1 08               CALL   printStr   
49C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D5   E1                     POP   hl   
49D6   E5                     PUSH   hl   
49D7   CD 05 08               CALL   prtdec   
49DA   E1                     POP   hl   
49DB   CD B1 08               CALL   printStr   
49DE   20 28 23 00            .CSTR   " (#"   
49E2   CD 4D 08               CALL   prthex   
49E5   CD B1 08               CALL   printStr   
49E8   29 0D 0A 00            .CSTR   ")\r\n"   
49EC   76                     HALT      
49ED   00                     .CSTR      
49EE                EXPECTM_0_2536S43:      
49EE   E1                     POP   HL   
49EF                          ;*Macro unroll:  test "2 3 *", 6
49EF   31 80 18               LD   SP,STACK   
49F2   CD D4 08               CALL   init   
49F5   CD B8 08               CALL   execStr   
49F8   32 20 33 20 2A 00      .CSTR   "2 3 *"   
49FE                          ;*Macro unroll:  expect "2 3 *",6
49FE   E1                     POP   HL   
49FF   E5                     PUSH   HL   
4A00   11 06 00               LD   DE,6   
4A03   B7                     OR   A   
4A04   ED 52                  SBC   HL,DE   
4A06   7D                     LD   A,L   
4A07   B4                     OR   H   
4A08   28 50                  JR   Z,expectM_0_2537S43   
4A0A   CD B1 08               CALL   printStr   
4A0D   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4A19   CD B1 08               CALL   printStr   
4A1C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A2B   21 06 00               LD   HL,6   
4A2E   CD 05 08               CALL   prtdec   
4A31   CD B1 08               CALL   printStr   
4A34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A41   E1                     POP   hl   
4A42   E5                     PUSH   hl   
4A43   CD 05 08               CALL   prtdec   
4A46   E1                     POP   hl   
4A47   CD B1 08               CALL   printStr   
4A4A   20 28 23 00            .CSTR   " (#"   
4A4E   CD 4D 08               CALL   prthex   
4A51   CD B1 08               CALL   printStr   
4A54   29 0D 0A 00            .CSTR   ")\r\n"   
4A58   76                     HALT      
4A59   00                     .CSTR      
4A5A                EXPECTM_0_2537S43:      
4A5A   E1                     POP   HL   
4A5B                          ;*Macro unroll:  test "1 2 3 + *", 5
4A5B   31 80 18               LD   SP,STACK   
4A5E   CD D4 08               CALL   init   
4A61   CD B8 08               CALL   execStr   
4A64   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4A6E                          ;*Macro unroll:  expect "1 2 3 + *",5
4A6E   E1                     POP   HL   
4A6F   E5                     PUSH   HL   
4A70   11 05 00               LD   DE,5   
4A73   B7                     OR   A   
4A74   ED 52                  SBC   HL,DE   
4A76   7D                     LD   A,L   
4A77   B4                     OR   H   
4A78   28 54                  JR   Z,expectM_0_2538S43   
4A7A   CD B1 08               CALL   printStr   
4A7D   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4A8D   CD B1 08               CALL   printStr   
4A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A9F   21 05 00               LD   HL,5   
4AA2   CD 05 08               CALL   prtdec   
4AA5   CD B1 08               CALL   printStr   
4AA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AB5   E1                     POP   hl   
4AB6   E5                     PUSH   hl   
4AB7   CD 05 08               CALL   prtdec   
4ABA   E1                     POP   hl   
4ABB   CD B1 08               CALL   printStr   
4ABE   20 28 23 00            .CSTR   " (#"   
4AC2   CD 4D 08               CALL   prthex   
4AC5   CD B1 08               CALL   printStr   
4AC8   29 0D 0A 00            .CSTR   ")\r\n"   
4ACC   76                     HALT      
4ACD   00                     .CSTR      
4ACE                EXPECTM_0_2538S43:      
4ACE   E1                     POP   HL   
4ACF                          ;*Macro unroll:  test "7 3 /", 2
4ACF   31 80 18               LD   SP,STACK   
4AD2   CD D4 08               CALL   init   
4AD5   CD B8 08               CALL   execStr   
4AD8   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4ADE                          ;*Macro unroll:  expect "7 3 /",2
4ADE   E1                     POP   HL   
4ADF   E5                     PUSH   HL   
4AE0   11 02 00               LD   DE,2   
4AE3   B7                     OR   A   
4AE4   ED 52                  SBC   HL,DE   
4AE6   7D                     LD   A,L   
4AE7   B4                     OR   H   
4AE8   28 50                  JR   Z,expectM_0_2539S43   
4AEA   CD B1 08               CALL   printStr   
4AED   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4AF9   CD B1 08               CALL   printStr   
4AFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B0B   21 02 00               LD   HL,2   
4B0E   CD 05 08               CALL   prtdec   
4B11   CD B1 08               CALL   printStr   
4B14   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B21   E1                     POP   hl   
4B22   E5                     PUSH   hl   
4B23   CD 05 08               CALL   prtdec   
4B26   E1                     POP   hl   
4B27   CD B1 08               CALL   printStr   
4B2A   20 28 23 00            .CSTR   " (#"   
4B2E   CD 4D 08               CALL   prthex   
4B31   CD B1 08               CALL   printStr   
4B34   29 0D 0A 00            .CSTR   ")\r\n"   
4B38   76                     HALT      
4B39   00                     .CSTR      
4B3A                EXPECTM_0_2539S43:      
4B3A   E1                     POP   HL   
4B3B                          ;*Macro unroll:  test "7 3 / frac", 1
4B3B   31 80 18               LD   SP,STACK   
4B3E   CD D4 08               CALL   init   
4B41   CD B8 08               CALL   execStr   
4B44   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
4B4F                          ;*Macro unroll:  expect "7 3 / frac",1
4B4F   E1                     POP   HL   
4B50   E5                     PUSH   HL   
4B51   11 01 00               LD   DE,1   
4B54   B7                     OR   A   
4B55   ED 52                  SBC   HL,DE   
4B57   7D                     LD   A,L   
4B58   B4                     OR   H   
4B59   28 55                  JR   Z,expectM_0_2540S43   
4B5B   CD B1 08               CALL   printStr   
4B5E   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
4B6F   CD B1 08               CALL   printStr   
4B72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B81   21 01 00               LD   HL,1   
4B84   CD 05 08               CALL   prtdec   
4B87   CD B1 08               CALL   printStr   
4B8A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B97   E1                     POP   hl   
4B98   E5                     PUSH   hl   
4B99   CD 05 08               CALL   prtdec   
4B9C   E1                     POP   hl   
4B9D   CD B1 08               CALL   printStr   
4BA0   20 28 23 00            .CSTR   " (#"   
4BA4   CD 4D 08               CALL   prthex   
4BA7   CD B1 08               CALL   printStr   
4BAA   29 0D 0A 00            .CSTR   ")\r\n"   
4BAE   76                     HALT      
4BAF   00                     .CSTR      
4BB0                EXPECTM_0_2540S43:      
4BB0   E1                     POP   HL   
4BB1                          ;*Macro unroll:  test "10 sqrt", 3
4BB1   31 80 18               LD   SP,STACK   
4BB4   CD D4 08               CALL   init   
4BB7   CD B8 08               CALL   execStr   
4BBA   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
4BC2                          ;*Macro unroll:  expect "10 sqrt",3
4BC2   E1                     POP   HL   
4BC3   E5                     PUSH   HL   
4BC4   11 03 00               LD   DE,3   
4BC7   B7                     OR   A   
4BC8   ED 52                  SBC   HL,DE   
4BCA   7D                     LD   A,L   
4BCB   B4                     OR   H   
4BCC   28 52                  JR   Z,expectM_0_2541S43   
4BCE   CD B1 08               CALL   printStr   
4BD1   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
4BDF   CD B1 08               CALL   printStr   
4BE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BF1   21 03 00               LD   HL,3   
4BF4   CD 05 08               CALL   prtdec   
4BF7   CD B1 08               CALL   printStr   
4BFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C07   E1                     POP   hl   
4C08   E5                     PUSH   hl   
4C09   CD 05 08               CALL   prtdec   
4C0C   E1                     POP   hl   
4C0D   CD B1 08               CALL   printStr   
4C10   20 28 23 00            .CSTR   " (#"   
4C14   CD 4D 08               CALL   prthex   
4C17   CD B1 08               CALL   printStr   
4C1A   29 0D 0A 00            .CSTR   ")\r\n"   
4C1E   76                     HALT      
4C1F   00                     .CSTR      
4C20                EXPECTM_0_2541S43:      
4C20   E1                     POP   HL   
4C21                          ;*Macro unroll:  test "10 sqrt frac", 1
4C21   31 80 18               LD   SP,STACK   
4C24   CD D4 08               CALL   init   
4C27   CD B8 08               CALL   execStr   
4C2A   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4C37                          ;*Macro unroll:  expect "10 sqrt frac",1
4C37   E1                     POP   HL   
4C38   E5                     PUSH   HL   
4C39   11 01 00               LD   DE,1   
4C3C   B7                     OR   A   
4C3D   ED 52                  SBC   HL,DE   
4C3F   7D                     LD   A,L   
4C40   B4                     OR   H   
4C41   28 57                  JR   Z,expectM_0_2542S43   
4C43   CD B1 08               CALL   printStr   
4C46   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4C59   CD B1 08               CALL   printStr   
4C5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C6B   21 01 00               LD   HL,1   
4C6E   CD 05 08               CALL   prtdec   
4C71   CD B1 08               CALL   printStr   
4C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C81   E1                     POP   hl   
4C82   E5                     PUSH   hl   
4C83   CD 05 08               CALL   prtdec   
4C86   E1                     POP   hl   
4C87   CD B1 08               CALL   printStr   
4C8A   20 28 23 00            .CSTR   " (#"   
4C8E   CD 4D 08               CALL   prthex   
4C91   CD B1 08               CALL   printStr   
4C94   29 0D 0A 00            .CSTR   ")\r\n"   
4C98   76                     HALT      
4C99   00                     .CSTR      
4C9A                EXPECTM_0_2542S43:      
4C9A   E1                     POP   HL   
4C9B                          ;*Macro unroll:  test "2 3 =", FALSE
4C9B   31 80 18               LD   SP,STACK   
4C9E   CD D4 08               CALL   init   
4CA1   CD B8 08               CALL   execStr   
4CA4   32 20 33 20 3D 00      .CSTR   "2 3 ="   
4CAA                          ;*Macro unroll:  expect "2 3 =",FALSE
4CAA   E1                     POP   HL   
4CAB   E5                     PUSH   HL   
4CAC   11 00 00               LD   DE,FALSE   
4CAF   B7                     OR   A   
4CB0   ED 52                  SBC   HL,DE   
4CB2   7D                     LD   A,L   
4CB3   B4                     OR   H   
4CB4   28 50                  JR   Z,expectM_0_2543S43   
4CB6   CD B1 08               CALL   printStr   
4CB9   43 6F 64 65 3A 20 32 20 33 20 3D 00 .CSTR   "Code: ","2 3 ="   
4CC5   CD B1 08               CALL   printStr   
4CC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CD7   21 00 00               LD   HL,FALSE   
4CDA   CD 05 08               CALL   prtdec   
4CDD   CD B1 08               CALL   printStr   
4CE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CED   E1                     POP   hl   
4CEE   E5                     PUSH   hl   
4CEF   CD 05 08               CALL   prtdec   
4CF2   E1                     POP   hl   
4CF3   CD B1 08               CALL   printStr   
4CF6   20 28 23 00            .CSTR   " (#"   
4CFA   CD 4D 08               CALL   prthex   
4CFD   CD B1 08               CALL   printStr   
4D00   29 0D 0A 00            .CSTR   ")\r\n"   
4D04   76                     HALT      
4D05   00                     .CSTR      
4D06                EXPECTM_0_2543S43:      
4D06   E1                     POP   HL   
4D07                          ;*Macro unroll:  test "3 3 =", TRUE
4D07   31 80 18               LD   SP,STACK   
4D0A   CD D4 08               CALL   init   
4D0D   CD B8 08               CALL   execStr   
4D10   33 20 33 20 3D 00      .CSTR   "3 3 ="   
4D16                          ;*Macro unroll:  expect "3 3 =",TRUE
4D16   E1                     POP   HL   
4D17   E5                     PUSH   HL   
4D18   11 FF FF               LD   DE,TRUE   
4D1B   B7                     OR   A   
4D1C   ED 52                  SBC   HL,DE   
4D1E   7D                     LD   A,L   
4D1F   B4                     OR   H   
4D20   28 50                  JR   Z,expectM_0_2544S43   
4D22   CD B1 08               CALL   printStr   
4D25   43 6F 64 65 3A 20 33 20 33 20 3D 00 .CSTR   "Code: ","3 3 ="   
4D31   CD B1 08               CALL   printStr   
4D34   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D43   21 FF FF               LD   HL,TRUE   
4D46   CD 05 08               CALL   prtdec   
4D49   CD B1 08               CALL   printStr   
4D4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D59   E1                     POP   hl   
4D5A   E5                     PUSH   hl   
4D5B   CD 05 08               CALL   prtdec   
4D5E   E1                     POP   hl   
4D5F   CD B1 08               CALL   printStr   
4D62   20 28 23 00            .CSTR   " (#"   
4D66   CD 4D 08               CALL   prthex   
4D69   CD B1 08               CALL   printStr   
4D6C   29 0D 0A 00            .CSTR   ")\r\n"   
4D70   76                     HALT      
4D71   00                     .CSTR      
4D72                EXPECTM_0_2544S43:      
4D72   E1                     POP   HL   
4D73                          ;*Macro unroll:  test "1 2 <", TRUE
4D73   31 80 18               LD   SP,STACK   
4D76   CD D4 08               CALL   init   
4D79   CD B8 08               CALL   execStr   
4D7C   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D82                          ;*Macro unroll:  expect "1 2 <",TRUE
4D82   E1                     POP   HL   
4D83   E5                     PUSH   HL   
4D84   11 FF FF               LD   DE,TRUE   
4D87   B7                     OR   A   
4D88   ED 52                  SBC   HL,DE   
4D8A   7D                     LD   A,L   
4D8B   B4                     OR   H   
4D8C   28 50                  JR   Z,expectM_0_2545S43   
4D8E   CD B1 08               CALL   printStr   
4D91   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D9D   CD B1 08               CALL   printStr   
4DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DAF   21 FF FF               LD   HL,TRUE   
4DB2   CD 05 08               CALL   prtdec   
4DB5   CD B1 08               CALL   printStr   
4DB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DC5   E1                     POP   hl   
4DC6   E5                     PUSH   hl   
4DC7   CD 05 08               CALL   prtdec   
4DCA   E1                     POP   hl   
4DCB   CD B1 08               CALL   printStr   
4DCE   20 28 23 00            .CSTR   " (#"   
4DD2   CD 4D 08               CALL   prthex   
4DD5   CD B1 08               CALL   printStr   
4DD8   29 0D 0A 00            .CSTR   ")\r\n"   
4DDC   76                     HALT      
4DDD   00                     .CSTR      
4DDE                EXPECTM_0_2545S43:      
4DDE   E1                     POP   HL   
4DDF                          ;*Macro unroll:  test "2 1 <", FALSE
4DDF   31 80 18               LD   SP,STACK   
4DE2   CD D4 08               CALL   init   
4DE5   CD B8 08               CALL   execStr   
4DE8   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4DEE                          ;*Macro unroll:  expect "2 1 <",FALSE
4DEE   E1                     POP   HL   
4DEF   E5                     PUSH   HL   
4DF0   11 00 00               LD   DE,FALSE   
4DF3   B7                     OR   A   
4DF4   ED 52                  SBC   HL,DE   
4DF6   7D                     LD   A,L   
4DF7   B4                     OR   H   
4DF8   28 50                  JR   Z,expectM_0_2546S43   
4DFA   CD B1 08               CALL   printStr   
4DFD   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4E09   CD B1 08               CALL   printStr   
4E0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E1B   21 00 00               LD   HL,FALSE   
4E1E   CD 05 08               CALL   prtdec   
4E21   CD B1 08               CALL   printStr   
4E24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E31   E1                     POP   hl   
4E32   E5                     PUSH   hl   
4E33   CD 05 08               CALL   prtdec   
4E36   E1                     POP   hl   
4E37   CD B1 08               CALL   printStr   
4E3A   20 28 23 00            .CSTR   " (#"   
4E3E   CD 4D 08               CALL   prthex   
4E41   CD B1 08               CALL   printStr   
4E44   29 0D 0A 00            .CSTR   ")\r\n"   
4E48   76                     HALT      
4E49   00                     .CSTR      
4E4A                EXPECTM_0_2546S43:      
4E4A   E1                     POP   HL   
4E4B                          ;*Macro unroll:  test "2 3 <", TRUE
4E4B   31 80 18               LD   SP,STACK   
4E4E   CD D4 08               CALL   init   
4E51   CD B8 08               CALL   execStr   
4E54   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4E5A                          ;*Macro unroll:  expect "2 3 <",TRUE
4E5A   E1                     POP   HL   
4E5B   E5                     PUSH   HL   
4E5C   11 FF FF               LD   DE,TRUE   
4E5F   B7                     OR   A   
4E60   ED 52                  SBC   HL,DE   
4E62   7D                     LD   A,L   
4E63   B4                     OR   H   
4E64   28 50                  JR   Z,expectM_0_2547S43   
4E66   CD B1 08               CALL   printStr   
4E69   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E75   CD B1 08               CALL   printStr   
4E78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E87   21 FF FF               LD   HL,TRUE   
4E8A   CD 05 08               CALL   prtdec   
4E8D   CD B1 08               CALL   printStr   
4E90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E9D   E1                     POP   hl   
4E9E   E5                     PUSH   hl   
4E9F   CD 05 08               CALL   prtdec   
4EA2   E1                     POP   hl   
4EA3   CD B1 08               CALL   printStr   
4EA6   20 28 23 00            .CSTR   " (#"   
4EAA   CD 4D 08               CALL   prthex   
4EAD   CD B1 08               CALL   printStr   
4EB0   29 0D 0A 00            .CSTR   ")\r\n"   
4EB4   76                     HALT      
4EB5   00                     .CSTR      
4EB6                EXPECTM_0_2547S43:      
4EB6   E1                     POP   HL   
4EB7                          ;*Macro unroll:  test "3 3 <", FALSE
4EB7   31 80 18               LD   SP,STACK   
4EBA   CD D4 08               CALL   init   
4EBD   CD B8 08               CALL   execStr   
4EC0   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4EC6                          ;*Macro unroll:  expect "3 3 <",FALSE
4EC6   E1                     POP   HL   
4EC7   E5                     PUSH   HL   
4EC8   11 00 00               LD   DE,FALSE   
4ECB   B7                     OR   A   
4ECC   ED 52                  SBC   HL,DE   
4ECE   7D                     LD   A,L   
4ECF   B4                     OR   H   
4ED0   28 50                  JR   Z,expectM_0_2548S43   
4ED2   CD B1 08               CALL   printStr   
4ED5   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4EE1   CD B1 08               CALL   printStr   
4EE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EF3   21 00 00               LD   HL,FALSE   
4EF6   CD 05 08               CALL   prtdec   
4EF9   CD B1 08               CALL   printStr   
4EFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F09   E1                     POP   hl   
4F0A   E5                     PUSH   hl   
4F0B   CD 05 08               CALL   prtdec   
4F0E   E1                     POP   hl   
4F0F   CD B1 08               CALL   printStr   
4F12   20 28 23 00            .CSTR   " (#"   
4F16   CD 4D 08               CALL   prthex   
4F19   CD B1 08               CALL   printStr   
4F1C   29 0D 0A 00            .CSTR   ")\r\n"   
4F20   76                     HALT      
4F21   00                     .CSTR      
4F22                EXPECTM_0_2548S43:      
4F22   E1                     POP   HL   
4F23                          ;*Macro unroll:  test "1 2 >", FALSE
4F23   31 80 18               LD   SP,STACK   
4F26   CD D4 08               CALL   init   
4F29   CD B8 08               CALL   execStr   
4F2C   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4F32                          ;*Macro unroll:  expect "1 2 >",FALSE
4F32   E1                     POP   HL   
4F33   E5                     PUSH   HL   
4F34   11 00 00               LD   DE,FALSE   
4F37   B7                     OR   A   
4F38   ED 52                  SBC   HL,DE   
4F3A   7D                     LD   A,L   
4F3B   B4                     OR   H   
4F3C   28 50                  JR   Z,expectM_0_2549S43   
4F3E   CD B1 08               CALL   printStr   
4F41   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4F4D   CD B1 08               CALL   printStr   
4F50   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F5F   21 00 00               LD   HL,FALSE   
4F62   CD 05 08               CALL   prtdec   
4F65   CD B1 08               CALL   printStr   
4F68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F75   E1                     POP   hl   
4F76   E5                     PUSH   hl   
4F77   CD 05 08               CALL   prtdec   
4F7A   E1                     POP   hl   
4F7B   CD B1 08               CALL   printStr   
4F7E   20 28 23 00            .CSTR   " (#"   
4F82   CD 4D 08               CALL   prthex   
4F85   CD B1 08               CALL   printStr   
4F88   29 0D 0A 00            .CSTR   ")\r\n"   
4F8C   76                     HALT      
4F8D   00                     .CSTR      
4F8E                EXPECTM_0_2549S43:      
4F8E   E1                     POP   HL   
4F8F                          ;*Macro unroll:  test "2 1 >", TRUE
4F8F   31 80 18               LD   SP,STACK   
4F92   CD D4 08               CALL   init   
4F95   CD B8 08               CALL   execStr   
4F98   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F9E                          ;*Macro unroll:  expect "2 1 >",TRUE
4F9E   E1                     POP   HL   
4F9F   E5                     PUSH   HL   
4FA0   11 FF FF               LD   DE,TRUE   
4FA3   B7                     OR   A   
4FA4   ED 52                  SBC   HL,DE   
4FA6   7D                     LD   A,L   
4FA7   B4                     OR   H   
4FA8   28 50                  JR   Z,expectM_0_2550S43   
4FAA   CD B1 08               CALL   printStr   
4FAD   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4FB9   CD B1 08               CALL   printStr   
4FBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FCB   21 FF FF               LD   HL,TRUE   
4FCE   CD 05 08               CALL   prtdec   
4FD1   CD B1 08               CALL   printStr   
4FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FE1   E1                     POP   hl   
4FE2   E5                     PUSH   hl   
4FE3   CD 05 08               CALL   prtdec   
4FE6   E1                     POP   hl   
4FE7   CD B1 08               CALL   printStr   
4FEA   20 28 23 00            .CSTR   " (#"   
4FEE   CD 4D 08               CALL   prthex   
4FF1   CD B1 08               CALL   printStr   
4FF4   29 0D 0A 00            .CSTR   ")\r\n"   
4FF8   76                     HALT      
4FF9   00                     .CSTR      
4FFA                EXPECTM_0_2550S43:      
4FFA   E1                     POP   HL   
4FFB                          ;*Macro unroll:  test "3 3 >", FALSE
4FFB   31 80 18               LD   SP,STACK   
4FFE   CD D4 08               CALL   init   
5001   CD B8 08               CALL   execStr   
5004   33 20 33 20 3E 00      .CSTR   "3 3 >"   
500A                          ;*Macro unroll:  expect "3 3 >",FALSE
500A   E1                     POP   HL   
500B   E5                     PUSH   HL   
500C   11 00 00               LD   DE,FALSE   
500F   B7                     OR   A   
5010   ED 52                  SBC   HL,DE   
5012   7D                     LD   A,L   
5013   B4                     OR   H   
5014   28 50                  JR   Z,expectM_0_2551S43   
5016   CD B1 08               CALL   printStr   
5019   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
5025   CD B1 08               CALL   printStr   
5028   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5037   21 00 00               LD   HL,FALSE   
503A   CD 05 08               CALL   prtdec   
503D   CD B1 08               CALL   printStr   
5040   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
504D   E1                     POP   hl   
504E   E5                     PUSH   hl   
504F   CD 05 08               CALL   prtdec   
5052   E1                     POP   hl   
5053   CD B1 08               CALL   printStr   
5056   20 28 23 00            .CSTR   " (#"   
505A   CD 4D 08               CALL   prthex   
505D   CD B1 08               CALL   printStr   
5060   29 0D 0A 00            .CSTR   ")\r\n"   
5064   76                     HALT      
5065   00                     .CSTR      
5066                EXPECTM_0_2551S43:      
5066   E1                     POP   HL   
5067                          ;*Macro unroll:  test "4 3 >", TRUE
5067   31 80 18               LD   SP,STACK   
506A   CD D4 08               CALL   init   
506D   CD B8 08               CALL   execStr   
5070   34 20 33 20 3E 00      .CSTR   "4 3 >"   
5076                          ;*Macro unroll:  expect "4 3 >",TRUE
5076   E1                     POP   HL   
5077   E5                     PUSH   HL   
5078   11 FF FF               LD   DE,TRUE   
507B   B7                     OR   A   
507C   ED 52                  SBC   HL,DE   
507E   7D                     LD   A,L   
507F   B4                     OR   H   
5080   28 50                  JR   Z,expectM_0_2552S43   
5082   CD B1 08               CALL   printStr   
5085   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
5091   CD B1 08               CALL   printStr   
5094   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50A3   21 FF FF               LD   HL,TRUE   
50A6   CD 05 08               CALL   prtdec   
50A9   CD B1 08               CALL   printStr   
50AC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50B9   E1                     POP   hl   
50BA   E5                     PUSH   hl   
50BB   CD 05 08               CALL   prtdec   
50BE   E1                     POP   hl   
50BF   CD B1 08               CALL   printStr   
50C2   20 28 23 00            .CSTR   " (#"   
50C6   CD 4D 08               CALL   prthex   
50C9   CD B1 08               CALL   printStr   
50CC   29 0D 0A 00            .CSTR   ")\r\n"   
50D0   76                     HALT      
50D1   00                     .CSTR      
50D2                EXPECTM_0_2552S43:      
50D2   E1                     POP   HL   
50D3                          ;*Macro unroll:  test "2 2 <=", TRUE
50D3   31 80 18               LD   SP,STACK   
50D6   CD D4 08               CALL   init   
50D9   CD B8 08               CALL   execStr   
50DC   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
50E3                          ;*Macro unroll:  expect "2 2 <=",TRUE
50E3   E1                     POP   HL   
50E4   E5                     PUSH   HL   
50E5   11 FF FF               LD   DE,TRUE   
50E8   B7                     OR   A   
50E9   ED 52                  SBC   HL,DE   
50EB   7D                     LD   A,L   
50EC   B4                     OR   H   
50ED   28 51                  JR   Z,expectM_0_2553S43   
50EF   CD B1 08               CALL   printStr   
50F2   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
50FF   CD B1 08               CALL   printStr   
5102   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5111   21 FF FF               LD   HL,TRUE   
5114   CD 05 08               CALL   prtdec   
5117   CD B1 08               CALL   printStr   
511A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5127   E1                     POP   hl   
5128   E5                     PUSH   hl   
5129   CD 05 08               CALL   prtdec   
512C   E1                     POP   hl   
512D   CD B1 08               CALL   printStr   
5130   20 28 23 00            .CSTR   " (#"   
5134   CD 4D 08               CALL   prthex   
5137   CD B1 08               CALL   printStr   
513A   29 0D 0A 00            .CSTR   ")\r\n"   
513E   76                     HALT      
513F   00                     .CSTR      
5140                EXPECTM_0_2553S43:      
5140   E1                     POP   HL   
5141                          ;*Macro unroll:  test "2 2 >=", TRUE
5141   31 80 18               LD   SP,STACK   
5144   CD D4 08               CALL   init   
5147   CD B8 08               CALL   execStr   
514A   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
5151                          ;*Macro unroll:  expect "2 2 >=",TRUE
5151   E1                     POP   HL   
5152   E5                     PUSH   HL   
5153   11 FF FF               LD   DE,TRUE   
5156   B7                     OR   A   
5157   ED 52                  SBC   HL,DE   
5159   7D                     LD   A,L   
515A   B4                     OR   H   
515B   28 51                  JR   Z,expectM_0_2554S43   
515D   CD B1 08               CALL   printStr   
5160   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
516D   CD B1 08               CALL   printStr   
5170   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
517F   21 FF FF               LD   HL,TRUE   
5182   CD 05 08               CALL   prtdec   
5185   CD B1 08               CALL   printStr   
5188   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5195   E1                     POP   hl   
5196   E5                     PUSH   hl   
5197   CD 05 08               CALL   prtdec   
519A   E1                     POP   hl   
519B   CD B1 08               CALL   printStr   
519E   20 28 23 00            .CSTR   " (#"   
51A2   CD 4D 08               CALL   prthex   
51A5   CD B1 08               CALL   printStr   
51A8   29 0D 0A 00            .CSTR   ")\r\n"   
51AC   76                     HALT      
51AD   00                     .CSTR      
51AE                EXPECTM_0_2554S43:      
51AE   E1                     POP   HL   
51AF                          ;*Macro unroll:  test "() -2?", $0000
51AF   31 80 18               LD   SP,STACK   
51B2   CD D4 08               CALL   init   
51B5   CD B8 08               CALL   execStr   
51B8   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
51BF                          ;*Macro unroll:  expect "() -2?",$0000
51BF   E1                     POP   HL   
51C0   E5                     PUSH   HL   
51C1   11 00 00               LD   DE,$0000   
51C4   B7                     OR   A   
51C5   ED 52                  SBC   HL,DE   
51C7   7D                     LD   A,L   
51C8   B4                     OR   H   
51C9   28 51                  JR   Z,expectM_0_2555S43   
51CB   CD B1 08               CALL   printStr   
51CE   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
51DB   CD B1 08               CALL   printStr   
51DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51ED   21 00 00               LD   HL,$0000   
51F0   CD 05 08               CALL   prtdec   
51F3   CD B1 08               CALL   printStr   
51F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5203   E1                     POP   hl   
5204   E5                     PUSH   hl   
5205   CD 05 08               CALL   prtdec   
5208   E1                     POP   hl   
5209   CD B1 08               CALL   printStr   
520C   20 28 23 00            .CSTR   " (#"   
5210   CD 4D 08               CALL   prthex   
5213   CD B1 08               CALL   printStr   
5216   29 0D 0A 00            .CSTR   ")\r\n"   
521A   76                     HALT      
521B   00                     .CSTR      
521C                EXPECTM_0_2555S43:      
521C   E1                     POP   HL   
521D                          ;*Macro unroll:  test "(a) -1?", $0001
521D   31 80 18               LD   SP,STACK   
5220   CD D4 08               CALL   init   
5223   CD B8 08               CALL   execStr   
5226   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
522E                          ;*Macro unroll:  expect "(a) -1?",$0001
522E   E1                     POP   HL   
522F   E5                     PUSH   HL   
5230   11 01 00               LD   DE,$0001   
5233   B7                     OR   A   
5234   ED 52                  SBC   HL,DE   
5236   7D                     LD   A,L   
5237   B4                     OR   H   
5238   28 52                  JR   Z,expectM_0_2556S43   
523A   CD B1 08               CALL   printStr   
523D   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
524B   CD B1 08               CALL   printStr   
524E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
525D   21 01 00               LD   HL,$0001   
5260   CD 05 08               CALL   prtdec   
5263   CD B1 08               CALL   printStr   
5266   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5273   E1                     POP   hl   
5274   E5                     PUSH   hl   
5275   CD 05 08               CALL   prtdec   
5278   E1                     POP   hl   
5279   CD B1 08               CALL   printStr   
527C   20 28 23 00            .CSTR   " (#"   
5280   CD 4D 08               CALL   prthex   
5283   CD B1 08               CALL   printStr   
5286   29 0D 0A 00            .CSTR   ")\r\n"   
528A   76                     HALT      
528B   00                     .CSTR      
528C                EXPECTM_0_2556S43:      
528C   E1                     POP   HL   
528D                          ;*Macro unroll:  test "(a:) -1?", $0001
528D   31 80 18               LD   SP,STACK   
5290   CD D4 08               CALL   init   
5293   CD B8 08               CALL   execStr   
5296   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
529F                          ;*Macro unroll:  expect "(a:) -1?",$0001
529F   E1                     POP   HL   
52A0   E5                     PUSH   HL   
52A1   11 01 00               LD   DE,$0001   
52A4   B7                     OR   A   
52A5   ED 52                  SBC   HL,DE   
52A7   7D                     LD   A,L   
52A8   B4                     OR   H   
52A9   28 53                  JR   Z,expectM_0_2557S43   
52AB   CD B1 08               CALL   printStr   
52AE   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
52BD   CD B1 08               CALL   printStr   
52C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52CF   21 01 00               LD   HL,$0001   
52D2   CD 05 08               CALL   prtdec   
52D5   CD B1 08               CALL   printStr   
52D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52E5   E1                     POP   hl   
52E6   E5                     PUSH   hl   
52E7   CD 05 08               CALL   prtdec   
52EA   E1                     POP   hl   
52EB   CD B1 08               CALL   printStr   
52EE   20 28 23 00            .CSTR   " (#"   
52F2   CD 4D 08               CALL   prthex   
52F5   CD B1 08               CALL   printStr   
52F8   29 0D 0A 00            .CSTR   ")\r\n"   
52FC   76                     HALT      
52FD   00                     .CSTR      
52FE                EXPECTM_0_2557S43:      
52FE   E1                     POP   HL   
52FF                          ;*Macro unroll:  test "(a:b) -1?", $0102
52FF   31 80 18               LD   SP,STACK   
5302   CD D4 08               CALL   init   
5305   CD B8 08               CALL   execStr   
5308   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
5312                          ;*Macro unroll:  expect "(a:b) -1?",$0102
5312   E1                     POP   HL   
5313   E5                     PUSH   HL   
5314   11 02 01               LD   DE,$0102   
5317   B7                     OR   A   
5318   ED 52                  SBC   HL,DE   
531A   7D                     LD   A,L   
531B   B4                     OR   H   
531C   28 54                  JR   Z,expectM_0_2558S43   
531E   CD B1 08               CALL   printStr   
5321   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
5331   CD B1 08               CALL   printStr   
5334   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5343   21 02 01               LD   HL,$0102   
5346   CD 05 08               CALL   prtdec   
5349   CD B1 08               CALL   printStr   
534C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5359   E1                     POP   hl   
535A   E5                     PUSH   hl   
535B   CD 05 08               CALL   prtdec   
535E   E1                     POP   hl   
535F   CD B1 08               CALL   printStr   
5362   20 28 23 00            .CSTR   " (#"   
5366   CD 4D 08               CALL   prthex   
5369   CD B1 08               CALL   printStr   
536C   29 0D 0A 00            .CSTR   ")\r\n"   
5370   76                     HALT      
5371   00                     .CSTR      
5372                EXPECTM_0_2558S43:      
5372   E1                     POP   HL   
5373                          ;*Macro unroll:  test "(:b) -1?", $0101
5373   31 80 18               LD   SP,STACK   
5376   CD D4 08               CALL   init   
5379   CD B8 08               CALL   execStr   
537C   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
5385                          ;*Macro unroll:  expect "(:b) -1?",$0101
5385   E1                     POP   HL   
5386   E5                     PUSH   HL   
5387   11 01 01               LD   DE,$0101   
538A   B7                     OR   A   
538B   ED 52                  SBC   HL,DE   
538D   7D                     LD   A,L   
538E   B4                     OR   H   
538F   28 53                  JR   Z,expectM_0_2559S43   
5391   CD B1 08               CALL   printStr   
5394   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
53A3   CD B1 08               CALL   printStr   
53A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53B5   21 01 01               LD   HL,$0101   
53B8   CD 05 08               CALL   prtdec   
53BB   CD B1 08               CALL   printStr   
53BE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53CB   E1                     POP   hl   
53CC   E5                     PUSH   hl   
53CD   CD 05 08               CALL   prtdec   
53D0   E1                     POP   hl   
53D1   CD B1 08               CALL   printStr   
53D4   20 28 23 00            .CSTR   " (#"   
53D8   CD 4D 08               CALL   prthex   
53DB   CD B1 08               CALL   printStr   
53DE   29 0D 0A 00            .CSTR   ")\r\n"   
53E2   76                     HALT      
53E3   00                     .CSTR      
53E4                EXPECTM_0_2559S43:      
53E4   E1                     POP   HL   
53E5                          ;*Macro unroll:  test ":x 20 let 100 x set x", 100
53E5   31 80 18               LD   SP,STACK   
53E8   CD D4 08               CALL   init   
53EB   CD B8 08               CALL   execStr   
53EE   3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   ":x 20 let 100 x set x"   
5404                          ;*Macro unroll:  expect ":x 20 let 100 x set x",100
5404   E1                     POP   HL   
5405   E5                     PUSH   HL   
5406   11 64 00               LD   DE,100   
5409   B7                     OR   A   
540A   ED 52                  SBC   HL,DE   
540C   7D                     LD   A,L   
540D   B4                     OR   H   
540E   28 60                  JR   Z,expectM_0_2560S43   
5410   CD B1 08               CALL   printStr   
5413   43 6F 64 65 3A 20 3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 20 let 100 x set x"   
542F   CD B1 08               CALL   printStr   
5432   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5441   21 64 00               LD   HL,100   
5444   CD 05 08               CALL   prtdec   
5447   CD B1 08               CALL   printStr   
544A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5457   E1                     POP   hl   
5458   E5                     PUSH   hl   
5459   CD 05 08               CALL   prtdec   
545C   E1                     POP   hl   
545D   CD B1 08               CALL   printStr   
5460   20 28 23 00            .CSTR   " (#"   
5464   CD 4D 08               CALL   prthex   
5467   CD B1 08               CALL   printStr   
546A   29 0D 0A 00            .CSTR   ")\r\n"   
546E   76                     HALT      
546F   00                     .CSTR      
5470                EXPECTM_0_2560S43:      
5470   E1                     POP   HL   
5471                          ;*Macro unroll:  test "[10 20 30] 1?", 20
5471   31 80 18               LD   SP,STACK   
5474   CD D4 08               CALL   init   
5477   CD B8 08               CALL   execStr   
547A   5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "[10 20 30] 1?"   
5488                          ;*Macro unroll:  expect "[10 20 30] 1?",20
5488   E1                     POP   HL   
5489   E5                     PUSH   HL   
548A   11 14 00               LD   DE,20   
548D   B7                     OR   A   
548E   ED 52                  SBC   HL,DE   
5490   7D                     LD   A,L   
5491   B4                     OR   H   
5492   28 58                  JR   Z,expectM_0_2561S43   
5494   CD B1 08               CALL   printStr   
5497   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "Code: ","[10 20 30] 1?"   
54AB   CD B1 08               CALL   printStr   
54AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54BD   21 14 00               LD   HL,20   
54C0   CD 05 08               CALL   prtdec   
54C3   CD B1 08               CALL   printStr   
54C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
54D3   E1                     POP   hl   
54D4   E5                     PUSH   hl   
54D5   CD 05 08               CALL   prtdec   
54D8   E1                     POP   hl   
54D9   CD B1 08               CALL   printStr   
54DC   20 28 23 00            .CSTR   " (#"   
54E0   CD 4D 08               CALL   prthex   
54E3   CD B1 08               CALL   printStr   
54E6   29 0D 0A 00            .CSTR   ")\r\n"   
54EA   76                     HALT      
54EB   00                     .CSTR      
54EC                EXPECTM_0_2561S43:      
54EC   E1                     POP   HL   
54ED                          ;*Macro unroll:  test ":x [10 20 30] let 50 x 1? set x 1?", 50
54ED   31 80 18               LD   SP,STACK   
54F0   CD D4 08               CALL   init   
54F3   CD B8 08               CALL   execStr   
54F6   3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   ":x [10 20 30] let 50 x 1? set x 1?"   
5519                          ;*Macro unroll:  expect ":x [10 20 30] let 50 x 1? set x 1?",50
5519   E1                     POP   HL   
551A   E5                     PUSH   HL   
551B   11 32 00               LD   DE,50   
551E   B7                     OR   A   
551F   ED 52                  SBC   HL,DE   
5521   7D                     LD   A,L   
5522   B4                     OR   H   
5523   28 6D                  JR   Z,expectM_0_2562S43   
5525   CD B1 08               CALL   printStr   
5528   43 6F 64 65 3A 20 3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   "Code: ",":x [10 20 30] let 50 x 1? set x 1?"   
5551   CD B1 08               CALL   printStr   
5554   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5563   21 32 00               LD   HL,50   
5566   CD 05 08               CALL   prtdec   
5569   CD B1 08               CALL   printStr   
556C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5579   E1                     POP   hl   
557A   E5                     PUSH   hl   
557B   CD 05 08               CALL   prtdec   
557E   E1                     POP   hl   
557F   CD B1 08               CALL   printStr   
5582   20 28 23 00            .CSTR   " (#"   
5586   CD 4D 08               CALL   prthex   
5589   CD B1 08               CALL   printStr   
558C   29 0D 0A 00            .CSTR   ")\r\n"   
5590   76                     HALT      
5591   00                     .CSTR      
5592                EXPECTM_0_2562S43:      
5592   E1                     POP   HL   
5593                          ;*Macro unroll:  test "bytes [1 2 3] 1?", 2
5593   31 80 18               LD   SP,STACK   
5596   CD D4 08               CALL   init   
5599   CD B8 08               CALL   execStr   
559C   62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "bytes [1 2 3] 1?"   
55AD                          ;*Macro unroll:  expect "bytes [1 2 3] 1?",2
55AD   E1                     POP   HL   
55AE   E5                     PUSH   HL   
55AF   11 02 00               LD   DE,2   
55B2   B7                     OR   A   
55B3   ED 52                  SBC   HL,DE   
55B5   7D                     LD   A,L   
55B6   B4                     OR   H   
55B7   28 5B                  JR   Z,expectM_0_2563S43   
55B9   CD B1 08               CALL   printStr   
55BC   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "Code: ","bytes [1 2 3] 1?"   
55D3   CD B1 08               CALL   printStr   
55D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55E5   21 02 00               LD   HL,2   
55E8   CD 05 08               CALL   prtdec   
55EB   CD B1 08               CALL   printStr   
55EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55FB   E1                     POP   hl   
55FC   E5                     PUSH   hl   
55FD   CD 05 08               CALL   prtdec   
5600   E1                     POP   hl   
5601   CD B1 08               CALL   printStr   
5604   20 28 23 00            .CSTR   " (#"   
5608   CD 4D 08               CALL   prthex   
560B   CD B1 08               CALL   printStr   
560E   29 0D 0A 00            .CSTR   ")\r\n"   
5612   76                     HALT      
5613   00                     .CSTR      
5614                EXPECTM_0_2563S43:      
5614   E1                     POP   HL   
5615                          ;*Macro unroll:  test "bytes :x [1 2 3] let x 1?", 2
5615   31 80 18               LD   SP,STACK   
5618   CD D4 08               CALL   init   
561B   CD B8 08               CALL   execStr   
561E   62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "bytes :x [1 2 3] let x 1?"   
5638                          ;*Macro unroll:  expect "bytes :x [1 2 3] let x 1?",2
5638   E1                     POP   HL   
5639   E5                     PUSH   HL   
563A   11 02 00               LD   DE,2   
563D   B7                     OR   A   
563E   ED 52                  SBC   HL,DE   
5640   7D                     LD   A,L   
5641   B4                     OR   H   
5642   28 64                  JR   Z,expectM_0_2564S43   
5644   CD B1 08               CALL   printStr   
5647   43 6F 64 65 3A 20 62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "Code: ","bytes :x [1 2 3] let x 1?"   
5667   CD B1 08               CALL   printStr   
566A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5679   21 02 00               LD   HL,2   
567C   CD 05 08               CALL   prtdec   
567F   CD B1 08               CALL   printStr   
5682   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
568F   E1                     POP   hl   
5690   E5                     PUSH   hl   
5691   CD 05 08               CALL   prtdec   
5694   E1                     POP   hl   
5695   CD B1 08               CALL   printStr   
5698   20 28 23 00            .CSTR   " (#"   
569C   CD 4D 08               CALL   prthex   
569F   CD B1 08               CALL   printStr   
56A2   29 0D 0A 00            .CSTR   ")\r\n"   
56A6   76                     HALT      
56A7   00                     .CSTR      
56A8                EXPECTM_0_2564S43:      
56A8   E1                     POP   HL   
56A9                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1?", 66
56A9   31 80 18               LD   SP,STACK   
56AC   CD D4 08               CALL   init   
56AF   CD B8 08               CALL   execStr   
56B2   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1?"   
56C9                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1?",66
56C9   E1                     POP   HL   
56CA   E5                     PUSH   HL   
56CB   11 42 00               LD   DE,66   
56CE   B7                     OR   A   
56CF   ED 52                  SBC   HL,DE   
56D1   7D                     LD   A,L   
56D2   B4                     OR   H   
56D3   28 61                  JR   Z,expectM_0_2565S43   
56D5   CD B1 08               CALL   printStr   
56D8   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1?"   
56F5   CD B1 08               CALL   printStr   
56F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5707   21 42 00               LD   HL,66   
570A   CD 05 08               CALL   prtdec   
570D   CD B1 08               CALL   printStr   
5710   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
571D   E1                     POP   hl   
571E   E5                     PUSH   hl   
571F   CD 05 08               CALL   prtdec   
5722   E1                     POP   hl   
5723   CD B1 08               CALL   printStr   
5726   20 28 23 00            .CSTR   " (#"   
572A   CD 4D 08               CALL   prthex   
572D   CD B1 08               CALL   printStr   
5730   29 0D 0A 00            .CSTR   ")\r\n"   
5734   76                     HALT      
5735   00                     .CSTR      
5736                EXPECTM_0_2565S43:      
5736   E1                     POP   HL   
5737                          ;*Macro unroll:  test "{1} exec", 1
5737   31 80 18               LD   SP,STACK   
573A   CD D4 08               CALL   init   
573D   CD B8 08               CALL   execStr   
5740   7B 31 7D 20 65 78 65 63 00 .CSTR   "{1} exec"   
5749                          ;*Macro unroll:  expect "{1} exec",1
5749   E1                     POP   HL   
574A   E5                     PUSH   HL   
574B   11 01 00               LD   DE,1   
574E   B7                     OR   A   
574F   ED 52                  SBC   HL,DE   
5751   7D                     LD   A,L   
5752   B4                     OR   H   
5753   28 53                  JR   Z,expectM_0_2566S43   
5755   CD B1 08               CALL   printStr   
5758   43 6F 64 65 3A 20 7B 31 7D 20 65 78 65 63 00 .CSTR   "Code: ","{1} exec"   
5767   CD B1 08               CALL   printStr   
576A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5779   21 01 00               LD   HL,1   
577C   CD 05 08               CALL   prtdec   
577F   CD B1 08               CALL   printStr   
5782   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
578F   E1                     POP   hl   
5790   E5                     PUSH   hl   
5791   CD 05 08               CALL   prtdec   
5794   E1                     POP   hl   
5795   CD B1 08               CALL   printStr   
5798   20 28 23 00            .CSTR   " (#"   
579C   CD 4D 08               CALL   prthex   
579F   CD B1 08               CALL   printStr   
57A2   29 0D 0A 00            .CSTR   ")\r\n"   
57A6   76                     HALT      
57A7   00                     .CSTR      
57A8                EXPECTM_0_2566S43:      
57A8   E1                     POP   HL   
57A9                          ;*Macro unroll:  test "{{1} exec} exec", 1
57A9   31 80 18               LD   SP,STACK   
57AC   CD D4 08               CALL   init   
57AF   CD B8 08               CALL   execStr   
57B2   7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{1} exec} exec"   
57C2                          ;*Macro unroll:  expect "{{1} exec} exec",1
57C2   E1                     POP   HL   
57C3   E5                     PUSH   HL   
57C4   11 01 00               LD   DE,1   
57C7   B7                     OR   A   
57C8   ED 52                  SBC   HL,DE   
57CA   7D                     LD   A,L   
57CB   B4                     OR   H   
57CC   28 5A                  JR   Z,expectM_0_2567S43   
57CE   CD B1 08               CALL   printStr   
57D1   43 6F 64 65 3A 20 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{1} exec} exec"   
57E7   CD B1 08               CALL   printStr   
57EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57F9   21 01 00               LD   HL,1   
57FC   CD 05 08               CALL   prtdec   
57FF   CD B1 08               CALL   printStr   
5802   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
580F   E1                     POP   hl   
5810   E5                     PUSH   hl   
5811   CD 05 08               CALL   prtdec   
5814   E1                     POP   hl   
5815   CD B1 08               CALL   printStr   
5818   20 28 23 00            .CSTR   " (#"   
581C   CD 4D 08               CALL   prthex   
581F   CD B1 08               CALL   printStr   
5822   29 0D 0A 00            .CSTR   ")\r\n"   
5826   76                     HALT      
5827   00                     .CSTR      
5828                EXPECTM_0_2567S43:      
5828   E1                     POP   HL   
5829                          ;*Macro unroll:  test "{{{1} exec} exec} exec", 1
5829   31 80 18               LD   SP,STACK   
582C   CD D4 08               CALL   init   
582F   CD B8 08               CALL   execStr   
5832   7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{{1} exec} exec} exec"   
5849                          ;*Macro unroll:  expect "{{{1} exec} exec} exec",1
5849   E1                     POP   HL   
584A   E5                     PUSH   HL   
584B   11 01 00               LD   DE,1   
584E   B7                     OR   A   
584F   ED 52                  SBC   HL,DE   
5851   7D                     LD   A,L   
5852   B4                     OR   H   
5853   28 61                  JR   Z,expectM_0_2568S43   
5855   CD B1 08               CALL   printStr   
5858   43 6F 64 65 3A 20 7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{{1} exec} exec} exec"   
5875   CD B1 08               CALL   printStr   
5878   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5887   21 01 00               LD   HL,1   
588A   CD 05 08               CALL   prtdec   
588D   CD B1 08               CALL   printStr   
5890   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
589D   E1                     POP   hl   
589E   E5                     PUSH   hl   
589F   CD 05 08               CALL   prtdec   
58A2   E1                     POP   hl   
58A3   CD B1 08               CALL   printStr   
58A6   20 28 23 00            .CSTR   " (#"   
58AA   CD 4D 08               CALL   prthex   
58AD   CD B1 08               CALL   printStr   
58B0   29 0D 0A 00            .CSTR   ")\r\n"   
58B4   76                     HALT      
58B5   00                     .CSTR      
58B6                EXPECTM_0_2568S43:      
58B6   E1                     POP   HL   
58B7                          ;*Macro unroll:  test "1 5 (a) {2} func call", 2
58B7   31 80 18               LD   SP,STACK   
58BA   CD D4 08               CALL   init   
58BD   CD B8 08               CALL   execStr   
58C0   31 20 35 20 28 61 29 20 7B 32 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {2} func call"   
58D6                          ;*Macro unroll:  expect "1 5 (a) {2} func call",2
58D6   E1                     POP   HL   
58D7   E5                     PUSH   HL   
58D8   11 02 00               LD   DE,2   
58DB   B7                     OR   A   
58DC   ED 52                  SBC   HL,DE   
58DE   7D                     LD   A,L   
58DF   B4                     OR   H   
58E0   28 60                  JR   Z,expectM_0_2569S43   
58E2   CD B1 08               CALL   printStr   
58E5   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 32 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {2} func call"   
5901   CD B1 08               CALL   printStr   
5904   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5913   21 02 00               LD   HL,2   
5916   CD 05 08               CALL   prtdec   
5919   CD B1 08               CALL   printStr   
591C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5929   E1                     POP   hl   
592A   E5                     PUSH   hl   
592B   CD 05 08               CALL   prtdec   
592E   E1                     POP   hl   
592F   CD B1 08               CALL   printStr   
5932   20 28 23 00            .CSTR   " (#"   
5936   CD 4D 08               CALL   prthex   
5939   CD B1 08               CALL   printStr   
593C   29 0D 0A 00            .CSTR   ")\r\n"   
5940   76                     HALT      
5941   00                     .CSTR      
5942                EXPECTM_0_2569S43:      
5942   E1                     POP   HL   
5943                          ;*Macro unroll:  test "1 5 (a) {$a} func call", 5
5943   31 80 18               LD   SP,STACK   
5946   CD D4 08               CALL   init   
5949   CD B8 08               CALL   execStr   
594C   31 20 35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {$a} func call"   
5963                          ;*Macro unroll:  expect "1 5 (a) {$a} func call",5
5963   E1                     POP   HL   
5964   E5                     PUSH   HL   
5965   11 05 00               LD   DE,5   
5968   B7                     OR   A   
5969   ED 52                  SBC   HL,DE   
596B   7D                     LD   A,L   
596C   B4                     OR   H   
596D   28 61                  JR   Z,expectM_0_2570S43   
596F   CD B1 08               CALL   printStr   
5972   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {$a} func call"   
598F   CD B1 08               CALL   printStr   
5992   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59A1   21 05 00               LD   HL,5   
59A4   CD 05 08               CALL   prtdec   
59A7   CD B1 08               CALL   printStr   
59AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59B7   E1                     POP   hl   
59B8   E5                     PUSH   hl   
59B9   CD 05 08               CALL   prtdec   
59BC   E1                     POP   hl   
59BD   CD B1 08               CALL   printStr   
59C0   20 28 23 00            .CSTR   " (#"   
59C4   CD 4D 08               CALL   prthex   
59C7   CD B1 08               CALL   printStr   
59CA   29 0D 0A 00            .CSTR   ")\r\n"   
59CE   76                     HALT      
59CF   00                     .CSTR      
59D0                EXPECTM_0_2570S43:      
59D0   E1                     POP   HL   
59D1                          ;*Macro unroll:  test "1 5 (a:b) {$a} func call ", 5
59D1   31 80 18               LD   SP,STACK   
59D4   CD D4 08               CALL   init   
59D7   CD B8 08               CALL   execStr   
59DA   31 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 20 00 .CSTR   "1 5 (a:b) {$a} func call "   
59F4                          ;*Macro unroll:  expect "1 5 (a:b) {$a} func call ",5
59F4   E1                     POP   HL   
59F5   E5                     PUSH   HL   
59F6   11 05 00               LD   DE,5   
59F9   B7                     OR   A   
59FA   ED 52                  SBC   HL,DE   
59FC   7D                     LD   A,L   
59FD   B4                     OR   H   
59FE   28 64                  JR   Z,expectM_0_2571S43   
5A00   CD B1 08               CALL   printStr   
5A03   43 6F 64 65 3A 20 31 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 20 00 .CSTR   "Code: ","1 5 (a:b) {$a} func call "   
5A23   CD B1 08               CALL   printStr   
5A26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A35   21 05 00               LD   HL,5   
5A38   CD 05 08               CALL   prtdec   
5A3B   CD B1 08               CALL   printStr   
5A3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A4B   E1                     POP   hl   
5A4C   E5                     PUSH   hl   
5A4D   CD 05 08               CALL   prtdec   
5A50   E1                     POP   hl   
5A51   CD B1 08               CALL   printStr   
5A54   20 28 23 00            .CSTR   " (#"   
5A58   CD 4D 08               CALL   prthex   
5A5B   CD B1 08               CALL   printStr   
5A5E   29 0D 0A 00            .CSTR   ")\r\n"   
5A62   76                     HALT      
5A63   00                     .CSTR      
5A64                EXPECTM_0_2571S43:      
5A64   E1                     POP   HL   
5A65                          ;*Macro unroll:  test "1 5 (a) {{2} exec} func call", 2
5A65   31 80 18               LD   SP,STACK   
5A68   CD D4 08               CALL   init   
5A6B   CD B8 08               CALL   execStr   
5A6E   31 20 35 20 28 61 29 20 7B 7B 32 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{2} exec} func call"   
5A8B                          ;*Macro unroll:  expect "1 5 (a) {{2} exec} func call",2
5A8B   E1                     POP   HL   
5A8C   E5                     PUSH   HL   
5A8D   11 02 00               LD   DE,2   
5A90   B7                     OR   A   
5A91   ED 52                  SBC   HL,DE   
5A93   7D                     LD   A,L   
5A94   B4                     OR   H   
5A95   28 67                  JR   Z,expectM_0_2572S43   
5A97   CD B1 08               CALL   printStr   
5A9A   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 32 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{2} exec} func call"   
5ABD   CD B1 08               CALL   printStr   
5AC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5ACF   21 02 00               LD   HL,2   
5AD2   CD 05 08               CALL   prtdec   
5AD5   CD B1 08               CALL   printStr   
5AD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AE5   E1                     POP   hl   
5AE6   E5                     PUSH   hl   
5AE7   CD 05 08               CALL   prtdec   
5AEA   E1                     POP   hl   
5AEB   CD B1 08               CALL   printStr   
5AEE   20 28 23 00            .CSTR   " (#"   
5AF2   CD 4D 08               CALL   prthex   
5AF5   CD B1 08               CALL   printStr   
5AF8   29 0D 0A 00            .CSTR   ")\r\n"   
5AFC   76                     HALT      
5AFD   00                     .CSTR      
5AFE                EXPECTM_0_2572S43:      
5AFE   E1                     POP   HL   
5AFF                          ;*Macro unroll:  test "1 5 (a) {{$a} exec} func call", 5
5AFF   31 80 18               LD   SP,STACK   
5B02   CD D4 08               CALL   init   
5B05   CD B8 08               CALL   execStr   
5B08   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{$a} exec} func call"   
5B26                          ;*Macro unroll:  expect "1 5 (a) {{$a} exec} func call",5
5B26   E1                     POP   HL   
5B27   E5                     PUSH   HL   
5B28   11 05 00               LD   DE,5   
5B2B   B7                     OR   A   
5B2C   ED 52                  SBC   HL,DE   
5B2E   7D                     LD   A,L   
5B2F   B4                     OR   H   
5B30   28 68                  JR   Z,expectM_0_2573S43   
5B32   CD B1 08               CALL   printStr   
5B35   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{$a} exec} func call"   
5B59   CD B1 08               CALL   printStr   
5B5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B6B   21 05 00               LD   HL,5   
5B6E   CD 05 08               CALL   prtdec   
5B71   CD B1 08               CALL   printStr   
5B74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B81   E1                     POP   hl   
5B82   E5                     PUSH   hl   
5B83   CD 05 08               CALL   prtdec   
5B86   E1                     POP   hl   
5B87   CD B1 08               CALL   printStr   
5B8A   20 28 23 00            .CSTR   " (#"   
5B8E   CD 4D 08               CALL   prthex   
5B91   CD B1 08               CALL   printStr   
5B94   29 0D 0A 00            .CSTR   ")\r\n"   
5B98   76                     HALT      
5B99   00                     .CSTR      
5B9A                EXPECTM_0_2573S43:      
5B9A   E1                     POP   HL   
5B9B                          ;*Macro unroll:  test "1 5 (a) {{$a 1 +} exec} func call", 6
5B9B   31 80 18               LD   SP,STACK   
5B9E   CD D4 08               CALL   init   
5BA1   CD B8 08               CALL   execStr   
5BA4   31 20 35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{$a 1 +} exec} func call"   
5BC6                          ;*Macro unroll:  expect "1 5 (a) {{$a 1 +} exec} func call",6
5BC6   E1                     POP   HL   
5BC7   E5                     PUSH   HL   
5BC8   11 06 00               LD   DE,6   
5BCB   B7                     OR   A   
5BCC   ED 52                  SBC   HL,DE   
5BCE   7D                     LD   A,L   
5BCF   B4                     OR   H   
5BD0   28 6C                  JR   Z,expectM_0_2574S43   
5BD2   CD B1 08               CALL   printStr   
5BD5   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{$a 1 +} exec} func call"   
5BFD   CD B1 08               CALL   printStr   
5C00   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C0F   21 06 00               LD   HL,6   
5C12   CD 05 08               CALL   prtdec   
5C15   CD B1 08               CALL   printStr   
5C18   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C25   E1                     POP   hl   
5C26   E5                     PUSH   hl   
5C27   CD 05 08               CALL   prtdec   
5C2A   E1                     POP   hl   
5C2B   CD B1 08               CALL   printStr   
5C2E   20 28 23 00            .CSTR   " (#"   
5C32   CD 4D 08               CALL   prthex   
5C35   CD B1 08               CALL   printStr   
5C38   29 0D 0A 00            .CSTR   ")\r\n"   
5C3C   76                     HALT      
5C3D   00                     .CSTR      
5C3E                EXPECTM_0_2574S43:      
5C3E   E1                     POP   HL   
5C3F                          ;*Macro unroll:  test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
5C3F   31 80 18               LD   SP,STACK   
5C42   CD D4 08               CALL   init   
5C45   CD B8 08               CALL   execStr   
5C48   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5C73                          ;*Macro unroll:  expect "1 10 20 (ab) {-1 {$a} {$b} ifte} func call",10
5C73   E1                     POP   HL   
5C74   E5                     PUSH   HL   
5C75   11 0A 00               LD   DE,10   
5C78   B7                     OR   A   
5C79   ED 52                  SBC   HL,DE   
5C7B   7D                     LD   A,L   
5C7C   B4                     OR   H   
5C7D   28 75                  JR   Z,expectM_0_2575S43   
5C7F   CD B1 08               CALL   printStr   
5C82   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5CB3   CD B1 08               CALL   printStr   
5CB6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5CC5   21 0A 00               LD   HL,10   
5CC8   CD 05 08               CALL   prtdec   
5CCB   CD B1 08               CALL   printStr   
5CCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5CDB   E1                     POP   hl   
5CDC   E5                     PUSH   hl   
5CDD   CD 05 08               CALL   prtdec   
5CE0   E1                     POP   hl   
5CE1   CD B1 08               CALL   printStr   
5CE4   20 28 23 00            .CSTR   " (#"   
5CE8   CD 4D 08               CALL   prthex   
5CEB   CD B1 08               CALL   printStr   
5CEE   29 0D 0A 00            .CSTR   ")\r\n"   
5CF2   76                     HALT      
5CF3   00                     .CSTR      
5CF4                EXPECTM_0_2575S43:      
5CF4   E1                     POP   HL   
5CF5                          ;*Macro unroll:  test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
5CF5   31 80 18               LD   SP,STACK   
5CF8   CD D4 08               CALL   init   
5CFB   CD B8 08               CALL   execStr   
5CFE   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (ab) {0 {$a} {$b} ifte} func call"   
5D28                          ;*Macro unroll:  expect "1 10 20 (ab) {0 {$a} {$b} ifte} func call",20
5D28   E1                     POP   HL   
5D29   E5                     PUSH   HL   
5D2A   11 14 00               LD   DE,20   
5D2D   B7                     OR   A   
5D2E   ED 52                  SBC   HL,DE   
5D30   7D                     LD   A,L   
5D31   B4                     OR   H   
5D32   28 74                  JR   Z,expectM_0_2576S43   
5D34   CD B1 08               CALL   printStr   
5D37   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (ab) {0 {$a} {$b} ifte} func call"   
5D67   CD B1 08               CALL   printStr   
5D6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D79   21 14 00               LD   HL,20   
5D7C   CD 05 08               CALL   prtdec   
5D7F   CD B1 08               CALL   printStr   
5D82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D8F   E1                     POP   hl   
5D90   E5                     PUSH   hl   
5D91   CD 05 08               CALL   prtdec   
5D94   E1                     POP   hl   
5D95   CD B1 08               CALL   printStr   
5D98   20 28 23 00            .CSTR   " (#"   
5D9C   CD 4D 08               CALL   prthex   
5D9F   CD B1 08               CALL   printStr   
5DA2   29 0D 0A 00            .CSTR   ")\r\n"   
5DA6   76                     HALT      
5DA7   00                     .CSTR      
5DA8                EXPECTM_0_2576S43:      
5DA8   E1                     POP   HL   
5DA9                          ;*Macro unroll:  test ":x (a) {2} def 1 x", 2
5DA9   31 80 18               LD   SP,STACK   
5DAC   CD D4 08               CALL   init   
5DAF   CD B8 08               CALL   execStr   
5DB2   3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a) {2} def 1 x"   
5DC5                          ;*Macro unroll:  expect ":x (a) {2} def 1 x",2
5DC5   E1                     POP   HL   
5DC6   E5                     PUSH   HL   
5DC7   11 02 00               LD   DE,2   
5DCA   B7                     OR   A   
5DCB   ED 52                  SBC   HL,DE   
5DCD   7D                     LD   A,L   
5DCE   B4                     OR   H   
5DCF   28 5D                  JR   Z,expectM_0_2577S43   
5DD1   CD B1 08               CALL   printStr   
5DD4   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a) {2} def 1 x"   
5DED   CD B1 08               CALL   printStr   
5DF0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5DFF   21 02 00               LD   HL,2   
5E02   CD 05 08               CALL   prtdec   
5E05   CD B1 08               CALL   printStr   
5E08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E15   E1                     POP   hl   
5E16   E5                     PUSH   hl   
5E17   CD 05 08               CALL   prtdec   
5E1A   E1                     POP   hl   
5E1B   CD B1 08               CALL   printStr   
5E1E   20 28 23 00            .CSTR   " (#"   
5E22   CD 4D 08               CALL   prthex   
5E25   CD B1 08               CALL   printStr   
5E28   29 0D 0A 00            .CSTR   ")\r\n"   
5E2C   76                     HALT      
5E2D   00                     .CSTR      
5E2E                EXPECTM_0_2577S43:      
5E2E   E1                     POP   HL   
5E2F                          ;*Macro unroll:  test ":x (a) {$a} def 0 1 x", 1
5E2F   31 80 18               LD   SP,STACK   
5E32   CD D4 08               CALL   init   
5E35   CD B8 08               CALL   execStr   
5E38   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 30 20 31 20 78 00 .CSTR   ":x (a) {$a} def 0 1 x"   
5E4E                          ;*Macro unroll:  expect ":x (a) {$a} def 0 1 x",1
5E4E   E1                     POP   HL   
5E4F   E5                     PUSH   HL   
5E50   11 01 00               LD   DE,1   
5E53   B7                     OR   A   
5E54   ED 52                  SBC   HL,DE   
5E56   7D                     LD   A,L   
5E57   B4                     OR   H   
5E58   28 60                  JR   Z,expectM_0_2578S43   
5E5A   CD B1 08               CALL   printStr   
5E5D   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 30 20 31 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 0 1 x"   
5E79   CD B1 08               CALL   printStr   
5E7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E8B   21 01 00               LD   HL,1   
5E8E   CD 05 08               CALL   prtdec   
5E91   CD B1 08               CALL   printStr   
5E94   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5EA1   E1                     POP   hl   
5EA2   E5                     PUSH   hl   
5EA3   CD 05 08               CALL   prtdec   
5EA6   E1                     POP   hl   
5EA7   CD B1 08               CALL   printStr   
5EAA   20 28 23 00            .CSTR   " (#"   
5EAE   CD 4D 08               CALL   prthex   
5EB1   CD B1 08               CALL   printStr   
5EB4   29 0D 0A 00            .CSTR   ")\r\n"   
5EB8   76                     HALT      
5EB9   00                     .CSTR      
5EBA                EXPECTM_0_2578S43:      
5EBA   E1                     POP   HL   
5EBB                          ;*Macro unroll:  test ":x (a) {$a} def 1 2 x", 2
5EBB   31 80 18               LD   SP,STACK   
5EBE   CD D4 08               CALL   init   
5EC1   CD B8 08               CALL   execStr   
5EC4   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (a) {$a} def 1 2 x"   
5EDA                          ;*Macro unroll:  expect ":x (a) {$a} def 1 2 x",2
5EDA   E1                     POP   HL   
5EDB   E5                     PUSH   HL   
5EDC   11 02 00               LD   DE,2   
5EDF   B7                     OR   A   
5EE0   ED 52                  SBC   HL,DE   
5EE2   7D                     LD   A,L   
5EE3   B4                     OR   H   
5EE4   28 60                  JR   Z,expectM_0_2579S43   
5EE6   CD B1 08               CALL   printStr   
5EE9   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 1 2 x"   
5F05   CD B1 08               CALL   printStr   
5F08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F17   21 02 00               LD   HL,2   
5F1A   CD 05 08               CALL   prtdec   
5F1D   CD B1 08               CALL   printStr   
5F20   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F2D   E1                     POP   hl   
5F2E   E5                     PUSH   hl   
5F2F   CD 05 08               CALL   prtdec   
5F32   E1                     POP   hl   
5F33   CD B1 08               CALL   printStr   
5F36   20 28 23 00            .CSTR   " (#"   
5F3A   CD 4D 08               CALL   prthex   
5F3D   CD B1 08               CALL   printStr   
5F40   29 0D 0A 00            .CSTR   ")\r\n"   
5F44   76                     HALT      
5F45   00                     .CSTR      
5F46                EXPECTM_0_2579S43:      
5F46   E1                     POP   HL   
5F47                          ;*Macro unroll:  test ":x (a:b) {$a} def 1 2 x", 2
5F47   31 80 18               LD   SP,STACK   
5F4A   CD D4 08               CALL   init   
5F4D   CD B8 08               CALL   execStr   
5F50   3A 78 20 28 61 3A 62 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (a:b) {$a} def 1 2 x"   
5F68                          ;*Macro unroll:  expect ":x (a:b) {$a} def 1 2 x",2
5F68   E1                     POP   HL   
5F69   E5                     PUSH   HL   
5F6A   11 02 00               LD   DE,2   
5F6D   B7                     OR   A   
5F6E   ED 52                  SBC   HL,DE   
5F70   7D                     LD   A,L   
5F71   B4                     OR   H   
5F72   28 62                  JR   Z,expectM_0_2580S43   
5F74   CD B1 08               CALL   printStr   
5F77   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {$a} def 1 2 x"   
5F95   CD B1 08               CALL   printStr   
5F98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5FA7   21 02 00               LD   HL,2   
5FAA   CD 05 08               CALL   prtdec   
5FAD   CD B1 08               CALL   printStr   
5FB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5FBD   E1                     POP   hl   
5FBE   E5                     PUSH   hl   
5FBF   CD 05 08               CALL   prtdec   
5FC2   E1                     POP   hl   
5FC3   CD B1 08               CALL   printStr   
5FC6   20 28 23 00            .CSTR   " (#"   
5FCA   CD 4D 08               CALL   prthex   
5FCD   CD B1 08               CALL   printStr   
5FD0   29 0D 0A 00            .CSTR   ")\r\n"   
5FD4   76                     HALT      
5FD5   00                     .CSTR      
5FD6                EXPECTM_0_2580S43:      
5FD6   E1                     POP   HL   
5FD7                          ;*Macro unroll:  test ":x (ab) {$b} def 1 2 x", 2
5FD7   31 80 18               LD   SP,STACK   
5FDA   CD D4 08               CALL   init   
5FDD   CD B8 08               CALL   execStr   
5FE0   3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (ab) {$b} def 1 2 x"   
5FF7                          ;*Macro unroll:  expect ":x (ab) {$b} def 1 2 x",2
5FF7   E1                     POP   HL   
5FF8   E5                     PUSH   HL   
5FF9   11 02 00               LD   DE,2   
5FFC   B7                     OR   A   
5FFD   ED 52                  SBC   HL,DE   
5FFF   7D                     LD   A,L   
6000   B4                     OR   H   
6001   28 61                  JR   Z,expectM_0_2581S43   
6003   CD B1 08               CALL   printStr   
6006   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (ab) {$b} def 1 2 x"   
6023   CD B1 08               CALL   printStr   
6026   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6035   21 02 00               LD   HL,2   
6038   CD 05 08               CALL   prtdec   
603B   CD B1 08               CALL   printStr   
603E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
604B   E1                     POP   hl   
604C   E5                     PUSH   hl   
604D   CD 05 08               CALL   prtdec   
6050   E1                     POP   hl   
6051   CD B1 08               CALL   printStr   
6054   20 28 23 00            .CSTR   " (#"   
6058   CD 4D 08               CALL   prthex   
605B   CD B1 08               CALL   printStr   
605E   29 0D 0A 00            .CSTR   ")\r\n"   
6062   76                     HALT      
6063   00                     .CSTR      
6064                EXPECTM_0_2581S43:      
6064   E1                     POP   HL   
6065                          ;*Macro unroll:  test ":x (ab) {$b $a} def 10 15 x -", 5
6065   31 80 18               LD   SP,STACK   
6068   CD D4 08               CALL   init   
606B   CD B8 08               CALL   execStr   
606E   3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   ":x (ab) {$b $a} def 10 15 x -"   
608C                          ;*Macro unroll:  expect ":x (ab) {$b $a} def 10 15 x -",5
608C   E1                     POP   HL   
608D   E5                     PUSH   HL   
608E   11 05 00               LD   DE,5   
6091   B7                     OR   A   
6092   ED 52                  SBC   HL,DE   
6094   7D                     LD   A,L   
6095   B4                     OR   H   
6096   28 68                  JR   Z,expectM_0_2582S43   
6098   CD B1 08               CALL   printStr   
609B   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   "Code: ",":x (ab) {$b $a} def 10 15 x -"   
60BF   CD B1 08               CALL   printStr   
60C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
60D1   21 05 00               LD   HL,5   
60D4   CD 05 08               CALL   prtdec   
60D7   CD B1 08               CALL   printStr   
60DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
60E7   E1                     POP   hl   
60E8   E5                     PUSH   hl   
60E9   CD 05 08               CALL   prtdec   
60EC   E1                     POP   hl   
60ED   CD B1 08               CALL   printStr   
60F0   20 28 23 00            .CSTR   " (#"   
60F4   CD 4D 08               CALL   prthex   
60F7   CD B1 08               CALL   printStr   
60FA   29 0D 0A 00            .CSTR   ")\r\n"   
60FE   76                     HALT      
60FF   00                     .CSTR      
6100                EXPECTM_0_2582S43:      
6100   E1                     POP   HL   
6101                          ;*Macro unroll:  test ":x (a:b) {2} def 1 x", 2
6101   31 80 18               LD   SP,STACK   
6104   CD D4 08               CALL   init   
6107   CD B8 08               CALL   execStr   
610A   3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a:b) {2} def 1 x"   
611F                          ;*Macro unroll:  expect ":x (a:b) {2} def 1 x",2
611F   E1                     POP   HL   
6120   E5                     PUSH   HL   
6121   11 02 00               LD   DE,2   
6124   B7                     OR   A   
6125   ED 52                  SBC   HL,DE   
6127   7D                     LD   A,L   
6128   B4                     OR   H   
6129   28 5F                  JR   Z,expectM_0_2583S43   
612B   CD B1 08               CALL   printStr   
612E   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a:b) {2} def 1 x"   
6149   CD B1 08               CALL   printStr   
614C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
615B   21 02 00               LD   HL,2   
615E   CD 05 08               CALL   prtdec   
6161   CD B1 08               CALL   printStr   
6164   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6171   E1                     POP   hl   
6172   E5                     PUSH   hl   
6173   CD 05 08               CALL   prtdec   
6176   E1                     POP   hl   
6177   CD B1 08               CALL   printStr   
617A   20 28 23 00            .CSTR   " (#"   
617E   CD 4D 08               CALL   prthex   
6181   CD B1 08               CALL   printStr   
6184   29 0D 0A 00            .CSTR   ")\r\n"   
6188   76                     HALT      
6189   00                     .CSTR      
618A                EXPECTM_0_2583S43:      
618A   E1                     POP   HL   
618B                          ;*Macro unroll:  test ":x (:b) {100 $b set $b} def x", 100
618B   31 80 18               LD   SP,STACK   
618E   CD D4 08               CALL   init   
6191   CD B8 08               CALL   execStr   
6194   3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   ":x (:b) {100 $b set $b} def x"   
61B2                          ;*Macro unroll:  expect ":x (:b) {100 $b set $b} def x",100
61B2   E1                     POP   HL   
61B3   E5                     PUSH   HL   
61B4   11 64 00               LD   DE,100   
61B7   B7                     OR   A   
61B8   ED 52                  SBC   HL,DE   
61BA   7D                     LD   A,L   
61BB   B4                     OR   H   
61BC   28 68                  JR   Z,expectM_0_2584S43   
61BE   CD B1 08               CALL   printStr   
61C1   43 6F 64 65 3A 20 3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x (:b) {100 $b set $b} def x"   
61E5   CD B1 08               CALL   printStr   
61E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
61F7   21 64 00               LD   HL,100   
61FA   CD 05 08               CALL   prtdec   
61FD   CD B1 08               CALL   printStr   
6200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
620D   E1                     POP   hl   
620E   E5                     PUSH   hl   
620F   CD 05 08               CALL   prtdec   
6212   E1                     POP   hl   
6213   CD B1 08               CALL   printStr   
6216   20 28 23 00            .CSTR   " (#"   
621A   CD 4D 08               CALL   prthex   
621D   CD B1 08               CALL   printStr   
6220   29 0D 0A 00            .CSTR   ")\r\n"   
6224   76                     HALT      
6225   00                     .CSTR      
6226                EXPECTM_0_2584S43:      
6226   E1                     POP   HL   
6227                          ;*Macro unroll:  test ":x (a:b) {1 $b set $b} def 2 x", 1
6227   31 80 18               LD   SP,STACK   
622A   CD D4 08               CALL   init   
622D   CD B8 08               CALL   execStr   
6230   3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {1 $b set $b} def 2 x"   
624F                          ;*Macro unroll:  expect ":x (a:b) {1 $b set $b} def 2 x",1
624F   E1                     POP   HL   
6250   E5                     PUSH   HL   
6251   11 01 00               LD   DE,1   
6254   B7                     OR   A   
6255   ED 52                  SBC   HL,DE   
6257   7D                     LD   A,L   
6258   B4                     OR   H   
6259   28 69                  JR   Z,expectM_0_2585S43   
625B   CD B1 08               CALL   printStr   
625E   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {1 $b set $b} def 2 x"   
6283   CD B1 08               CALL   printStr   
6286   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6295   21 01 00               LD   HL,1   
6298   CD 05 08               CALL   prtdec   
629B   CD B1 08               CALL   printStr   
629E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
62AB   E1                     POP   hl   
62AC   E5                     PUSH   hl   
62AD   CD 05 08               CALL   prtdec   
62B0   E1                     POP   hl   
62B1   CD B1 08               CALL   printStr   
62B4   20 28 23 00            .CSTR   " (#"   
62B8   CD 4D 08               CALL   prthex   
62BB   CD B1 08               CALL   printStr   
62BE   29 0D 0A 00            .CSTR   ")\r\n"   
62C2   76                     HALT      
62C3   00                     .CSTR      
62C4                EXPECTM_0_2585S43:      
62C4   E1                     POP   HL   
62C5                          ;*Macro unroll:  test ":x (a:b) {$a $b set $b} def 2 x", 2
62C5   31 80 18               LD   SP,STACK   
62C8   CD D4 08               CALL   init   
62CB   CD B8 08               CALL   execStr   
62CE   3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {$a $b set $b} def 2 x"   
62EE                          ;*Macro unroll:  expect ":x (a:b) {$a $b set $b} def 2 x",2
62EE   E1                     POP   HL   
62EF   E5                     PUSH   HL   
62F0   11 02 00               LD   DE,2   
62F3   B7                     OR   A   
62F4   ED 52                  SBC   HL,DE   
62F6   7D                     LD   A,L   
62F7   B4                     OR   H   
62F8   28 6A                  JR   Z,expectM_0_2586S43   
62FA   CD B1 08               CALL   printStr   
62FD   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {$a $b set $b} def 2 x"   
6323   CD B1 08               CALL   printStr   
6326   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6335   21 02 00               LD   HL,2   
6338   CD 05 08               CALL   prtdec   
633B   CD B1 08               CALL   printStr   
633E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
634B   E1                     POP   hl   
634C   E5                     PUSH   hl   
634D   CD 05 08               CALL   prtdec   
6350   E1                     POP   hl   
6351   CD B1 08               CALL   printStr   
6354   20 28 23 00            .CSTR   " (#"   
6358   CD 4D 08               CALL   prthex   
635B   CD B1 08               CALL   printStr   
635E   29 0D 0A 00            .CSTR   ")\r\n"   
6362   76                     HALT      
6363   00                     .CSTR      
6364                EXPECTM_0_2586S43:      
6364   E1                     POP   HL   
6365                          ;*Macro unroll:  test "0 [{10} {20} {30}] switch", 10
6365   31 80 18               LD   SP,STACK   
6368   CD D4 08               CALL   init   
636B   CD B8 08               CALL   execStr   
636E   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 73 77 69 74 63 68 00 .CSTR   "0 [{10} {20} {30}] switch"   
6388                          ;*Macro unroll:  expect "0 [{10} {20} {30}] switch",10
6388   E1                     POP   HL   
6389   E5                     PUSH   HL   
638A   11 0A 00               LD   DE,10   
638D   B7                     OR   A   
638E   ED 52                  SBC   HL,DE   
6390   7D                     LD   A,L   
6391   B4                     OR   H   
6392   28 64                  JR   Z,expectM_0_2587S43   
6394   CD B1 08               CALL   printStr   
6397   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 73 77 69 74 63 68 00 .CSTR   "Code: ","0 [{10} {20} {30}] switch"   
63B7   CD B1 08               CALL   printStr   
63BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
63C9   21 0A 00               LD   HL,10   
63CC   CD 05 08               CALL   prtdec   
63CF   CD B1 08               CALL   printStr   
63D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
63DF   E1                     POP   hl   
63E0   E5                     PUSH   hl   
63E1   CD 05 08               CALL   prtdec   
63E4   E1                     POP   hl   
63E5   CD B1 08               CALL   printStr   
63E8   20 28 23 00            .CSTR   " (#"   
63EC   CD 4D 08               CALL   prthex   
63EF   CD B1 08               CALL   printStr   
63F2   29 0D 0A 00            .CSTR   ")\r\n"   
63F6   76                     HALT      
63F7   00                     .CSTR      
63F8                EXPECTM_0_2587S43:      
63F8   E1                     POP   HL   
63F9                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 10
63F9   31 80 18               LD   SP,STACK   
63FC   CD D4 08               CALL   init   
63FF   CD B8 08               CALL   execStr   
6402   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] switch} func call"   
6430                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] switch} func call",10
6430   E1                     POP   HL   
6431   E5                     PUSH   HL   
6432   11 0A 00               LD   DE,10   
6435   B7                     OR   A   
6436   ED 52                  SBC   HL,DE   
6438   7D                     LD   A,L   
6439   B4                     OR   H   
643A   28 78                  JR   Z,expectM_0_2588S43   
643C   CD B1 08               CALL   printStr   
643F   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] switch} func call"   
6473   CD B1 08               CALL   printStr   
6476   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6485   21 0A 00               LD   HL,10   
6488   CD 05 08               CALL   prtdec   
648B   CD B1 08               CALL   printStr   
648E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
649B   E1                     POP   hl   
649C   E5                     PUSH   hl   
649D   CD 05 08               CALL   prtdec   
64A0   E1                     POP   hl   
64A1   CD B1 08               CALL   printStr   
64A4   20 28 23 00            .CSTR   " (#"   
64A8   CD 4D 08               CALL   prthex   
64AB   CD B1 08               CALL   printStr   
64AE   29 0D 0A 00            .CSTR   ")\r\n"   
64B2   76                     HALT      
64B3   00                     .CSTR      
64B4                EXPECTM_0_2588S43:      
64B4   E1                     POP   HL   
64B5                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] switch} func call", 10
64B5   31 80 18               LD   SP,STACK   
64B8   CD D4 08               CALL   init   
64BB   CD B8 08               CALL   execStr   
64BE   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] switch} func call"   
64EE                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] switch} func call",10
64EE   E1                     POP   HL   
64EF   E5                     PUSH   HL   
64F0   11 0A 00               LD   DE,10   
64F3   B7                     OR   A   
64F4   ED 52                  SBC   HL,DE   
64F6   7D                     LD   A,L   
64F7   B4                     OR   H   
64F8   28 7A                  JR   Z,expectM_0_2589S43   
64FA   CD B1 08               CALL   printStr   
64FD   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] switch} func call"   
6533   CD B1 08               CALL   printStr   
6536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6545   21 0A 00               LD   HL,10   
6548   CD 05 08               CALL   prtdec   
654B   CD B1 08               CALL   printStr   
654E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
655B   E1                     POP   hl   
655C   E5                     PUSH   hl   
655D   CD 05 08               CALL   prtdec   
6560   E1                     POP   hl   
6561   CD B1 08               CALL   printStr   
6564   20 28 23 00            .CSTR   " (#"   
6568   CD 4D 08               CALL   prthex   
656B   CD B1 08               CALL   printStr   
656E   29 0D 0A 00            .CSTR   ")\r\n"   
6572   76                     HALT      
6573   00                     .CSTR      
6574                EXPECTM_0_2589S43:      
6574   E1                     POP   HL   
6575                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] switch} func call", 20
6575   31 80 18               LD   SP,STACK   
6578   CD D4 08               CALL   init   
657B   CD B8 08               CALL   execStr   
657E   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] switch} func call"   
65AE                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] switch} func call",20
65AE   E1                     POP   HL   
65AF   E5                     PUSH   HL   
65B0   11 14 00               LD   DE,20   
65B3   B7                     OR   A   
65B4   ED 52                  SBC   HL,DE   
65B6   7D                     LD   A,L   
65B7   B4                     OR   H   
65B8   28 7A                  JR   Z,expectM_0_2590S43   
65BA   CD B1 08               CALL   printStr   
65BD   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 73 77 69 74 63 68 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] switch} func call"   
65F3   CD B1 08               CALL   printStr   
65F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6605   21 14 00               LD   HL,20   
6608   CD 05 08               CALL   prtdec   
660B   CD B1 08               CALL   printStr   
660E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
661B   E1                     POP   hl   
661C   E5                     PUSH   hl   
661D   CD 05 08               CALL   prtdec   
6620   E1                     POP   hl   
6621   CD B1 08               CALL   printStr   
6624   20 28 23 00            .CSTR   " (#"   
6628   CD 4D 08               CALL   prthex   
662B   CD B1 08               CALL   printStr   
662E   29 0D 0A 00            .CSTR   ")\r\n"   
6632   76                     HALT      
6633   00                     .CSTR      
6634                EXPECTM_0_2590S43:      
6634   E1                     POP   HL   
6635                          ;*Macro unroll:  test "false", false
6635   31 80 18               LD   SP,STACK   
6638   CD D4 08               CALL   init   
663B   CD B8 08               CALL   execStr   
663E   66 61 6C 73 65 00      .CSTR   "false"   
6644                          ;*Macro unroll:  expect "false",false
6644   E1                     POP   HL   
6645   E5                     PUSH   HL   
6646   11 00 00               LD   DE,false   
6649   B7                     OR   A   
664A   ED 52                  SBC   HL,DE   
664C   7D                     LD   A,L   
664D   B4                     OR   H   
664E   28 50                  JR   Z,expectM_0_2591S43   
6650   CD B1 08               CALL   printStr   
6653   43 6F 64 65 3A 20 66 61 6C 73 65 00 .CSTR   "Code: ","false"   
665F   CD B1 08               CALL   printStr   
6662   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6671   21 00 00               LD   HL,false   
6674   CD 05 08               CALL   prtdec   
6677   CD B1 08               CALL   printStr   
667A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6687   E1                     POP   hl   
6688   E5                     PUSH   hl   
6689   CD 05 08               CALL   prtdec   
668C   E1                     POP   hl   
668D   CD B1 08               CALL   printStr   
6690   20 28 23 00            .CSTR   " (#"   
6694   CD 4D 08               CALL   prthex   
6697   CD B1 08               CALL   printStr   
669A   29 0D 0A 00            .CSTR   ")\r\n"   
669E   76                     HALT      
669F   00                     .CSTR      
66A0                EXPECTM_0_2591S43:      
66A0   E1                     POP   HL   
66A1                          ;*Macro unroll:  test "true", true
66A1   31 80 18               LD   SP,STACK   
66A4   CD D4 08               CALL   init   
66A7   CD B8 08               CALL   execStr   
66AA   74 72 75 65 00         .CSTR   "true"   
66AF                          ;*Macro unroll:  expect "true",true
66AF   E1                     POP   HL   
66B0   E5                     PUSH   HL   
66B1   11 FF FF               LD   DE,true   
66B4   B7                     OR   A   
66B5   ED 52                  SBC   HL,DE   
66B7   7D                     LD   A,L   
66B8   B4                     OR   H   
66B9   28 4F                  JR   Z,expectM_0_2592S43   
66BB   CD B1 08               CALL   printStr   
66BE   43 6F 64 65 3A 20 74 72 75 65 00 .CSTR   "Code: ","true"   
66C9   CD B1 08               CALL   printStr   
66CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
66DB   21 FF FF               LD   HL,true   
66DE   CD 05 08               CALL   prtdec   
66E1   CD B1 08               CALL   printStr   
66E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
66F1   E1                     POP   hl   
66F2   E5                     PUSH   hl   
66F3   CD 05 08               CALL   prtdec   
66F6   E1                     POP   hl   
66F7   CD B1 08               CALL   printStr   
66FA   20 28 23 00            .CSTR   " (#"   
66FE   CD 4D 08               CALL   prthex   
6701   CD B1 08               CALL   printStr   
6704   29 0D 0A 00            .CSTR   ")\r\n"   
6708   76                     HALT      
6709   00                     .CSTR      
670A                EXPECTM_0_2592S43:      
670A   E1                     POP   HL   
670B                          ;*Macro unroll:  test "1 5 false {10} if", 5
670B   31 80 18               LD   SP,STACK   
670E   CD D4 08               CALL   init   
6711   CD B8 08               CALL   execStr   
6714   31 20 35 20 66 61 6C 73 65 20 7B 31 30 7D 20 69 66 00 .CSTR   "1 5 false {10} if"   
6726                          ;*Macro unroll:  expect "1 5 false {10} if",5
6726   E1                     POP   HL   
6727   E5                     PUSH   HL   
6728   11 05 00               LD   DE,5   
672B   B7                     OR   A   
672C   ED 52                  SBC   HL,DE   
672E   7D                     LD   A,L   
672F   B4                     OR   H   
6730   28 5C                  JR   Z,expectM_0_2593S43   
6732   CD B1 08               CALL   printStr   
6735   43 6F 64 65 3A 20 31 20 35 20 66 61 6C 73 65 20 7B 31 30 7D 20 69 66 00 .CSTR   "Code: ","1 5 false {10} if"   
674D   CD B1 08               CALL   printStr   
6750   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
675F   21 05 00               LD   HL,5   
6762   CD 05 08               CALL   prtdec   
6765   CD B1 08               CALL   printStr   
6768   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6775   E1                     POP   hl   
6776   E5                     PUSH   hl   
6777   CD 05 08               CALL   prtdec   
677A   E1                     POP   hl   
677B   CD B1 08               CALL   printStr   
677E   20 28 23 00            .CSTR   " (#"   
6782   CD 4D 08               CALL   prthex   
6785   CD B1 08               CALL   printStr   
6788   29 0D 0A 00            .CSTR   ")\r\n"   
678C   76                     HALT      
678D   00                     .CSTR      
678E                EXPECTM_0_2593S43:      
678E   E1                     POP   HL   
678F                          ;*Macro unroll:  test "1 5 true {10} if", 10
678F   31 80 18               LD   SP,STACK   
6792   CD D4 08               CALL   init   
6795   CD B8 08               CALL   execStr   
6798   31 20 35 20 74 72 75 65 20 7B 31 30 7D 20 69 66 00 .CSTR   "1 5 true {10} if"   
67A9                          ;*Macro unroll:  expect "1 5 true {10} if",10
67A9   E1                     POP   HL   
67AA   E5                     PUSH   HL   
67AB   11 0A 00               LD   DE,10   
67AE   B7                     OR   A   
67AF   ED 52                  SBC   HL,DE   
67B1   7D                     LD   A,L   
67B2   B4                     OR   H   
67B3   28 5B                  JR   Z,expectM_0_2594S43   
67B5   CD B1 08               CALL   printStr   
67B8   43 6F 64 65 3A 20 31 20 35 20 74 72 75 65 20 7B 31 30 7D 20 69 66 00 .CSTR   "Code: ","1 5 true {10} if"   
67CF   CD B1 08               CALL   printStr   
67D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
67E1   21 0A 00               LD   HL,10   
67E4   CD 05 08               CALL   prtdec   
67E7   CD B1 08               CALL   printStr   
67EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
67F7   E1                     POP   hl   
67F8   E5                     PUSH   hl   
67F9   CD 05 08               CALL   prtdec   
67FC   E1                     POP   hl   
67FD   CD B1 08               CALL   printStr   
6800   20 28 23 00            .CSTR   " (#"   
6804   CD 4D 08               CALL   prthex   
6807   CD B1 08               CALL   printStr   
680A   29 0D 0A 00            .CSTR   ")\r\n"   
680E   76                     HALT      
680F   00                     .CSTR      
6810                EXPECTM_0_2594S43:      
6810   E1                     POP   HL   
6811                          ;*Macro unroll:  test "1 false {10} {20} ifte", 20
6811   31 80 18               LD   SP,STACK   
6814   CD D4 08               CALL   init   
6817   CD B8 08               CALL   execStr   
681A   31 20 66 61 6C 73 65 20 7B 31 30 7D 20 7B 32 30 7D 20 69 66 74 65 00 .CSTR   "1 false {10} {20} ifte"   
6831                          ;*Macro unroll:  expect "1 false {10} {20} ifte",20
6831   E1                     POP   HL   
6832   E5                     PUSH   HL   
6833   11 14 00               LD   DE,20   
6836   B7                     OR   A   
6837   ED 52                  SBC   HL,DE   
6839   7D                     LD   A,L   
683A   B4                     OR   H   
683B   28 61                  JR   Z,expectM_0_2595S43   
683D   CD B1 08               CALL   printStr   
6840   43 6F 64 65 3A 20 31 20 66 61 6C 73 65 20 7B 31 30 7D 20 7B 32 30 7D 20 69 66 74 65 00 .CSTR   "Code: ","1 false {10} {20} ifte"   
685D   CD B1 08               CALL   printStr   
6860   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
686F   21 14 00               LD   HL,20   
6872   CD 05 08               CALL   prtdec   
6875   CD B1 08               CALL   printStr   
6878   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6885   E1                     POP   hl   
6886   E5                     PUSH   hl   
6887   CD 05 08               CALL   prtdec   
688A   E1                     POP   hl   
688B   CD B1 08               CALL   printStr   
688E   20 28 23 00            .CSTR   " (#"   
6892   CD 4D 08               CALL   prthex   
6895   CD B1 08               CALL   printStr   
6898   29 0D 0A 00            .CSTR   ")\r\n"   
689C   76                     HALT      
689D   00                     .CSTR      
689E                EXPECTM_0_2595S43:      
689E   E1                     POP   HL   
689F                          ;*Macro unroll:  test "1 true {10} {20} ifte", 10
689F   31 80 18               LD   SP,STACK   
68A2   CD D4 08               CALL   init   
68A5   CD B8 08               CALL   execStr   
68A8   31 20 74 72 75 65 20 7B 31 30 7D 20 7B 32 30 7D 20 69 66 74 65 00 .CSTR   "1 true {10} {20} ifte"   
68BE                          ;*Macro unroll:  expect "1 true {10} {20} ifte",10
68BE   E1                     POP   HL   
68BF   E5                     PUSH   HL   
68C0   11 0A 00               LD   DE,10   
68C3   B7                     OR   A   
68C4   ED 52                  SBC   HL,DE   
68C6   7D                     LD   A,L   
68C7   B4                     OR   H   
68C8   28 60                  JR   Z,expectM_0_2596S43   
68CA   CD B1 08               CALL   printStr   
68CD   43 6F 64 65 3A 20 31 20 74 72 75 65 20 7B 31 30 7D 20 7B 32 30 7D 20 69 66 74 65 00 .CSTR   "Code: ","1 true {10} {20} ifte"   
68E9   CD B1 08               CALL   printStr   
68EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
68FB   21 0A 00               LD   HL,10   
68FE   CD 05 08               CALL   prtdec   
6901   CD B1 08               CALL   printStr   
6904   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6911   E1                     POP   hl   
6912   E5                     PUSH   hl   
6913   CD 05 08               CALL   prtdec   
6916   E1                     POP   hl   
6917   CD B1 08               CALL   printStr   
691A   20 28 23 00            .CSTR   " (#"   
691E   CD 4D 08               CALL   prthex   
6921   CD B1 08               CALL   printStr   
6924   29 0D 0A 00            .CSTR   ")\r\n"   
6928   76                     HALT      
6929   00                     .CSTR      
692A                EXPECTM_0_2596S43:      
692A   E1                     POP   HL   
692B                          ;*Macro unroll:  test "[ 1 ] closure call", 1
692B   31 80 18               LD   SP,STACK   
692E   CD D4 08               CALL   init   
6931   CD B8 08               CALL   execStr   
6934   5B 20 31 20 5D 20 63 6C 6F 73 75 72 65 20 63 61 6C 6C 00 .CSTR   "[ 1 ] closure call"   
6947                          ;*Macro unroll:  expect "[ 1 ] closure call",1
6947   E1                     POP   HL   
6948   E5                     PUSH   HL   
6949   11 01 00               LD   DE,1   
694C   B7                     OR   A   
694D   ED 52                  SBC   HL,DE   
694F   7D                     LD   A,L   
6950   B4                     OR   H   
6951   28 5D                  JR   Z,expectM_0_2597S43   
6953   CD B1 08               CALL   printStr   
6956   43 6F 64 65 3A 20 5B 20 31 20 5D 20 63 6C 6F 73 75 72 65 20 63 61 6C 6C 00 .CSTR   "Code: ","[ 1 ] closure call"   
696F   CD B1 08               CALL   printStr   
6972   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6981   21 01 00               LD   HL,1   
6984   CD 05 08               CALL   prtdec   
6987   CD B1 08               CALL   printStr   
698A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6997   E1                     POP   hl   
6998   E5                     PUSH   hl   
6999   CD 05 08               CALL   prtdec   
699C   E1                     POP   hl   
699D   CD B1 08               CALL   printStr   
69A0   20 28 23 00            .CSTR   " (#"   
69A4   CD 4D 08               CALL   prthex   
69A7   CD B1 08               CALL   printStr   
69AA   29 0D 0A 00            .CSTR   ")\r\n"   
69AE   76                     HALT      
69AF   00                     .CSTR      
69B0                EXPECTM_0_2597S43:      
69B0   E1                     POP   HL   
69B1                          ;*Macro unroll:  test "[ [ 2 ] ] closure call 0?", 2
69B1   31 80 18               LD   SP,STACK   
69B4   CD D4 08               CALL   init   
69B7   CD B8 08               CALL   execStr   
69BA   5B 20 5B 20 32 20 5D 20 5D 20 63 6C 6F 73 75 72 65 20 63 61 6C 6C 20 30 3F 00 .CSTR   "[ [ 2 ] ] closure call 0?"   
69D4                          ;*Macro unroll:  expect "[ [ 2 ] ] closure call 0?",2
69D4   E1                     POP   HL   
69D5   E5                     PUSH   HL   
69D6   11 02 00               LD   DE,2   
69D9   B7                     OR   A   
69DA   ED 52                  SBC   HL,DE   
69DC   7D                     LD   A,L   
69DD   B4                     OR   H   
69DE   28 64                  JR   Z,expectM_0_2598S43   
69E0   CD B1 08               CALL   printStr   
69E3   43 6F 64 65 3A 20 5B 20 5B 20 32 20 5D 20 5D 20 63 6C 6F 73 75 72 65 20 63 61 6C 6C 20 30 3F 00 .CSTR   "Code: ","[ [ 2 ] ] closure call 0?"   
6A03   CD B1 08               CALL   printStr   
6A06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6A15   21 02 00               LD   HL,2   
6A18   CD 05 08               CALL   prtdec   
6A1B   CD B1 08               CALL   printStr   
6A1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6A2B   E1                     POP   hl   
6A2C   E5                     PUSH   hl   
6A2D   CD 05 08               CALL   prtdec   
6A30   E1                     POP   hl   
6A31   CD B1 08               CALL   printStr   
6A34   20 28 23 00            .CSTR   " (#"   
6A38   CD 4D 08               CALL   prthex   
6A3B   CD B1 08               CALL   printStr   
6A3E   29 0D 0A 00            .CSTR   ")\r\n"   
6A42   76                     HALT      
6A43   00                     .CSTR      
6A44                EXPECTM_0_2598S43:      
6A44   E1                     POP   HL   
6A45                             ; 
6A45                             ; 
6A45                             ; 
6A45                             ; 
6A45                             ; 
6A45                             ; 
6A45                             ; 
6A45                             ; test ":x 1000 let x 10 set x", 10
6A45                             ; test ":x [100] { @1 } closure x", 100
6A45                             ; test ":x [100 200] { @2 } closure x", 200
6A45                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
6A45                             ; test ":x 'a' {$a} def 2 x", 2
6A45                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
6A45                             ; test ":x '' { 3 2 } def x + ", 5
6A45                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
6A45                             ; test "0 [{1}] switch", 1
6A45                             ; test "1 [{1} {2} {3}] switch", 2
6A45                             ; test "9 [{1} {5}] switch", 5
6A45                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
6A45                             ; test "bytes 'ABC' get", $41
6A45                             ; test "bytes [1 2 3] get", 1
6A45                             ; test ":xyz 123 const ; xyz", 123
6A45                             ; test ":x 1 const ; x", 1
6A45                             ; test ":x 'A' const x get", $41
6A45                             ; test ":x [1] const x get", 1
6A45                             ; test ":x [1 2 3] const x 2?", 3
6A45                             ; test "2 (1 2 +) *", 6
6A45                             ; test ":xyz 123 const ; xyz", 123
6A45                             ; test ":xyz 123 let ; xyz get", 123
6A45                             ; test "1 2 {$1 $2 +} call", 3
6A45                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
6A45                             ; test ":xyz {1} def :xyz addr call", 1
6A45                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
6A45                             ; test ":xyz {10} def :xyz addr call", 10
6A45                             ; test "'hello' hash", $7f54
6A45                             ; test ":hello", $7f54
6A45                             ; test "{{{1} exec} exec} exec", 1
6A45                             ; test "5 {{{$1} exec} exec} call", 5
6A45                             ; test "5 {$1} call", 5
6A45                             ; test "5 {{$1} exec} call", 5
6A45                             ; test "2 1 {{$1} call} call", 2
6A45                             ; test "2 1 {$2} call", 1
6A45                             ; test "2 1 {$1} call", 2
6A45                             ; test "2 1 {$2} call", 1
6A45                             ; test "2 4 {$2} call", 4
6A45                             ; test "{{1} call} call", 1
6A45                             ; test "0 {} loop", 0
6A45                             ; test "1 {1-} loop", $1a00
6A45                             ; test ":h {1} def :h addr call", 1
6A45                             ; ; call enter
6A45                             ; ;     .cstr "1 3",$22,"+"
6A45                             ; ; expect "1 3 DUP +", 6
6A45   CD B1 08               CALL   printStr   
6A48   44 6F 6E 65 21 00      .CSTR   "Done!"   
6A4E   76                     HALT      
6A4F                          ALIGN   2   
6A50                PRINTER:      
6A50   E1                     POP   hl   
6A51   CD 05 08               CALL   prtdec   
6A54   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 54 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0759 DEFINED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 34 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
DC1:                0011 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
DC2:                0012 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
DC3:                0013 DEFINED AT LINE 25 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 59 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 64 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 112 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 215 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 217 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 220 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 223 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 226 IN Siena.asm
ARG_LIST_:          030C DEFINED AT LINE 229 IN Siena.asm
DOT_:               030F DEFINED AT LINE 232 IN Siena.asm
DOT1:               031B DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
DOT2:               0324 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
DOT3:               032E DEFINED AT LINE 251 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
DOT4:               0332 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
INDEX_:             0339 DEFINED AT LINE 260 IN Siena.asm
BLOCK_:             033C DEFINED AT LINE 263 IN Siena.asm
BLOCKEND_:          033F DEFINED AT LINE 265 IN Siena.asm
CHAR_:              0342 DEFINED AT LINE 267 IN Siena.asm
ARRAY_:             0345 DEFINED AT LINE 269 IN Siena.asm
ARRAYEND_:          0348 DEFINED AT LINE 271 IN Siena.asm
IDENT_:             034B DEFINED AT LINE 273 IN Siena.asm
SYMBOL_:            034E DEFINED AT LINE 275 IN Siena.asm
AND_:               0351 DEFINED AT LINE 277 IN Siena.asm
AND1:               0358 DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
OR_:                035C DEFINED AT LINE 290 IN Siena.asm
XOR_:               0365 DEFINED AT LINE 300 IN Siena.asm
XOR1:               0366 DEFINED AT LINE 302 IN Siena.asm
                    > USED AT LINE 313 IN Siena.asm
INV_:               036E DEFINED AT LINE 311 IN Siena.asm
ADD_:               0373 DEFINED AT LINE 315 IN Siena.asm
HDOT_:              0379 DEFINED AT LINE 322 IN Siena.asm
MUL_:               0380 DEFINED AT LINE 327 IN Siena.asm
SUB_:               0383 DEFINED AT LINE 330 IN Siena.asm
SUB1:               038F DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
SUB2:               0391 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
NOT_:               0397 DEFINED AT LINE 347 IN Siena.asm
EQ_:                039C DEFINED AT LINE 351 IN Siena.asm
EQ1:                039D DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
GT_:                03A1 DEFINED AT LINE 357 IN Siena.asm
LT_:                03A5 DEFINED AT LINE 362 IN Siena.asm
LT1:                03A7 DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
DIV_:               03B2 DEFINED AT LINE 373 IN Siena.asm
COMMENT_:           03C1 DEFINED AT LINE 384 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
NOP_:               03CA DEFINED AT LINE 392 IN Siena.asm
SHL:                03CC DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
SHL1:               03D4 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
SHL2:               03D5 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHR:                03DC DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
SHR1:               03E4 DEFINED AT LINE 426 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
SHR2:               03E8 DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL:                03EF DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
MUL2:               03F9 DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
NUM:                040B DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
NUM0:               0414 DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM1:               0415 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
NUM2:               042D DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
NUM3:               0438 DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
HEXNUM:             043B DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
HEXNUM1:            043E DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
HEXNUM2:            0446 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
STRING:             0458 DEFINED AT LINE 520 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0461 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
STRING2:            0464 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
ARG_LIST:           047C DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
ARG_LIST1:          0486 DEFINED AT LINE 562 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
ARG_LIST2:          0492 DEFINED AT LINE 570 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
ARG_LIST3:          049A DEFINED AT LINE 578 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
ARG_LIST4:          049D DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
ARG_LIST5:          04A2 DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 584 IN Siena.asm
CHAR:               04AE DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
CHAR1:              04B1 DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
CHAR2:              04BD DEFINED AT LINE 608 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
CHAR3:              04C0 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
BLOCK:              04C3 DEFINED AT LINE 615 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
BLOCK1:             04C7 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 623 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
BLOCK2:             04EF DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 637 IN Siena.asm
BLOCK3:             04F2 DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
BLOCK4:             04FA DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
BLOCK5:             04FD DEFINED AT LINE 656 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
BLOCKEND:           0500 DEFINED AT LINE 660 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
BLOCKEND1:          052C DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
BLOCKEND2:          0538 DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 682 IN Siena.asm
IF:                 0551 DEFINED AT LINE 713 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
IFTE:               0556 DEFINED AT LINE 719 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
IFTE1:              0557 DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
SWITCH:             0563 DEFINED AT LINE 733 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
INDEX:              056D DEFINED AT LINE 745 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
INDEX0:             0575 DEFINED AT LINE 751 IN Siena.asm
INDEX1:             0576 DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 750 IN Siena.asm
INDEX2:             0582 DEFINED AT LINE 762 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
SET:                0585 DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
SET1:               0593 DEFINED AT LINE 777 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
LOOP:               0595 DEFINED AT LINE 782 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
WORDS:              0597 DEFINED AT LINE 832 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
BYTES:              059C DEFINED AT LINE 835 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
BYTES1:             059F DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
ARRAY:              05A4 DEFINED AT LINE 841 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
ARRAYEND:           05C0 DEFINED AT LINE 855 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND1:          05E1 DEFINED AT LINE 875 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
ARRAYEND2:          05F1 DEFINED AT LINE 887 IN Siena.asm
                    > USED AT LINE 873 IN Siena.asm
                    > USED AT LINE 899 IN Siena.asm
ARRAYEND3:          0604 DEFINED AT LINE 901 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
HASH:               061F DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
DEF:                062A DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
DEF1:               0631 DEFINED AT LINE 933 IN Siena.asm
                    > USED AT LINE 931 IN Siena.asm
LET:                063A DEFINED AT LINE 940 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
LET1:               065E DEFINED AT LINE 965 IN Siena.asm
                    > USED AT LINE 937 IN Siena.asm
LET2:               0666 DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
DOLET:              0669 DEFINED AT LINE 977 IN Siena.asm
DOLET2:             066D DEFINED AT LINE 980 IN Siena.asm
DOLET3:             0671 DEFINED AT LINE 985 IN Siena.asm
ADDR:               067B DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
ADDR1:              0687 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
SYMBOL:             0692 DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
SYMBOL0:            069A DEFINED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
SYMBOL1:            069C DEFINED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
SYMBOL2:            06AC DEFINED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
IDENT:              06BA DEFINED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
IDENT0:             06C1 DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
IDENT1:             06C3 DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
IDENT2:             06D3 DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
IDENT3:             06E7 DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
FRAC:               06E8 DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
SQRT1:              06EE DEFINED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
ABS1:               06FB DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
MOD:                0708 DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
EQUALS:             0714 DEFINED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
LESSTHANEQ:         071C DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
LESSTHAN:           0721 DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN1:          0726 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
TRUE1:              0729 DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
NULL1:              072F DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
FALSE1:             072F DEFINED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
INPUT:              0735 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
OUTPUT:             0740 DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
KEY:                0749 DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
NEG:                0752 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
FILTER:             0759 DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
MAP:                0759 DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
HASHSTR:            075B DEFINED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
HASHSTR1:           0762 DEFINED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
HASHSTR2:           0767 DEFINED AT LINE 1205 IN Siena.asm
DEFINEENTRY:        0778 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 968 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
DEFINEENTRY0:       077D DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
DEFINEENTRY1:       078C DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
DEFINEENTRY2:       0792 DEFINED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
DEFINEENTRY3:       0794 DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
LOOKUPENTRY:        079E DEFINED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
LOOKUPENTRY0:       07A3 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
LOOKUPENTRY1:       07B2 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
LOOKUPENTRY2:       07B8 DEFINED AT LINE 1285 IN Siena.asm
LOOKUPENTRY3:       07BA DEFINED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
DIVIDE:             07C2 DEFINED AT LINE 1300 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
DIVIDE1:            07C7 DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
DIVIDE2:            07D4 DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1308 IN Siena.asm
DIVIDE3:            07D5 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
SQUAREROOT:         07DB DEFINED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
SQUAREROOT1:        07E0 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
SQUAREROOT4:        07FB DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
SQUAREROOT5:        0802 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1350 IN Siena.asm
PRTDEC:             0805 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 200
PRTDEC0:            0814 DEFINED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
PRTDEC1:            0836 DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1382 IN Siena.asm
PRTDEC2:            0838 DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
PRTDEC3:            0848 DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
PRTDEC4:            0849 DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
PRTHEX:             084D DEFINED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0858 DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
PRTHEX3:            0861 DEFINED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
PRTSTR0:            086C DEFINED AT LINE 1429 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
PRTSTR:             0870 DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
NESTING:            0875 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
NESTING1A:          0880 DEFINED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
NESTING1:           0883 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
NESTING2:           0892 DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
NESTING3:           0894 DEFINED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
NESTING4:           089F DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
PROMPT:             08A1 DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
CRLF:               08AA DEFINED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
PRINTSTR:           08B1 DEFINED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 193
EXECSTR:            08B8 DEFINED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
BRANCH:             08B8 DEFINED AT LINE 1512 IN Siena.asm
DEFINE:             08BC DEFINED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
INIT:               08D4 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              08EE DEFINED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
START:              0A48 DEFINED AT LINE 1678 IN Siena.asm
INTERPRET:          0A5E DEFINED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
INTERPRET2:         0A68 DEFINED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
INTERPRET3:         0A70 DEFINED AT LINE 1697 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
INTERPRET4:         0A76 DEFINED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
WAITCHAR:           0A7B DEFINED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
MACRO:              0A8A DEFINED AT LINE 1719 IN Siena.asm
WAITCHAR1:          0A8C DEFINED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
WAITCHAR3:          0A9A DEFINED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
WAITCHAR4:          0AAD DEFINED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
NEXT:               0AB5 DEFINED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 71 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
NEXT1:              0AC8 DEFINED AT LINE 1778 IN Siena.asm
                    > USED AT LINE 1770 IN Siena.asm
NEXT2:              0ADB DEFINED AT LINE 1788 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
ESCAPE_:            0AE1 DEFINED AT LINE 1796 IN Siena.asm
                    > USED AT LINE 1780 IN Siena.asm
EXIT_:              0AE2 DEFINED AT LINE 1798 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
LITERAL_:           0AE5 DEFINED AT LINE 1802 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
ENTER_:             0AEE DEFINED AT LINE 1812 IN Siena.asm
                    > USED AT LINE 1786 IN Siena.asm
CALL:               0AF5 DEFINED AT LINE 1822 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
EXEC:               0AF7 DEFINED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
EXEC0:              0AF8 DEFINED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 727 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
                    > USED AT LINE 741 IN Siena.asm
EXEC1:              0AFE DEFINED AT LINE 1836 IN Siena.asm
                    > USED AT LINE 1834 IN Siena.asm
EXEC2:              0B1E DEFINED AT LINE 1853 IN Siena.asm
                    > USED AT LINE 1845 IN Siena.asm
DOCALL:             0B25 DEFINED AT LINE 1862 IN Siena.asm
DOCALL1:            0B3B DEFINED AT LINE 1880 IN Siena.asm
                    > USED AT LINE 1874 IN Siena.asm
DOCALL2:            0B41 DEFINED AT LINE 1886 IN Siena.asm
                    > USED AT LINE 1890 IN Siena.asm
DOCALL3:            0B46 DEFINED AT LINE 1891 IN Siena.asm
                    > USED AT LINE 1885 IN Siena.asm
DOCALL4:            0B52 DEFINED AT LINE 1902 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1857 IN Siena.asm
                    > USED AT LINE 1879 IN Siena.asm
DOCALL5:            0B5E DEFINED AT LINE 1909 IN Siena.asm
                    > USED AT LINE 1866 IN Siena.asm
FUNC:               0B60 DEFINED AT LINE 1913 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
FUNC1:              0B78 DEFINED AT LINE 1934 IN Siena.asm
                    > USED AT LINE 1958 IN Siena.asm
                    > USED AT LINE 1961 IN Siena.asm
                    > USED AT LINE 1966 IN Siena.asm
                    > USED AT LINE 1970 IN Siena.asm
FUNC2:              0B9E DEFINED AT LINE 1959 IN Siena.asm
                    > USED AT LINE 1948 IN Siena.asm
                    > USED AT LINE 1950 IN Siena.asm
                    > USED AT LINE 1952 IN Siena.asm
FUNC3:              0BA1 DEFINED AT LINE 1962 IN Siena.asm
                    > USED AT LINE 1955 IN Siena.asm
                    > USED AT LINE 1957 IN Siena.asm
FUNC4:              0BA9 DEFINED AT LINE 1968 IN Siena.asm
                    > USED AT LINE 1941 IN Siena.asm
                    > USED AT LINE 1943 IN Siena.asm
                    > USED AT LINE 1945 IN Siena.asm
FUNC4A:             0BAC DEFINED AT LINE 1971 IN Siena.asm
                    > USED AT LINE 1967 IN Siena.asm
ARG:                0BB8 DEFINED AT LINE 1982 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
ARG0:               0BD6 DEFINED AT LINE 2003 IN Siena.asm
                    > USED AT LINE 2009 IN Siena.asm
ARG0A:              0BDF DEFINED AT LINE 2011 IN Siena.asm
                    > USED AT LINE 1988 IN Siena.asm
                    > USED AT LINE 1995 IN Siena.asm
ARG1:               0BE4 DEFINED AT LINE 2014 IN Siena.asm
                    > USED AT LINE 2007 IN Siena.asm
ARG1A:              0BEC DEFINED AT LINE 2021 IN Siena.asm
                    > USED AT LINE 2013 IN Siena.asm
CLOSURE:            0BEF DEFINED AT LINE 2027 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
DOCLOSURE:          0C09 DEFINED AT LINE 2045 IN Siena.asm
DOCLOSURE1:         0C1F DEFINED AT LINE 2063 IN Siena.asm
                    > USED AT LINE 2073 IN Siena.asm
DOCLOSURE2:         0C25 DEFINED AT LINE 2070 IN Siena.asm
                    > USED AT LINE 2062 IN Siena.asm
DOCLOSURE3:         0C29 DEFINED AT LINE 2074 IN Siena.asm
                    > USED AT LINE 2053 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1540 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 748 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 979 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 2017 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 955 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 865 IN Siena.asm
                    > USED AT LINE 911 IN Siena.asm
                    > USED AT LINE 912 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
                    > USED AT LINE 1914 IN Siena.asm
                    > USED AT LINE 1974 IN Siena.asm
                    > USED AT LINE 1976 IN Siena.asm
                    > USED AT LINE 2028 IN Siena.asm
                    > USED AT LINE 2039 IN Siena.asm
                    > USED AT LINE 2041 IN Siena.asm
VTEMP1:             18A8 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 858 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
                    > USED AT LINE 2055 IN Siena.asm
                    > USED AT LINE 2075 IN Siena.asm
TIB:                1900 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1546 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 43 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 72 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_2513S22:    4064 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2514S43:  40C8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2515S43:  412C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2516S43:  4190 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2517S43:  41F4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2518S43:  425A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2519S43:  42C2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2520S43:  4328 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2521S43:  438E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2522S43:  43F6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2523S43:  4460 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2524S43:  44C8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2525S43:  4530 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2526S43:  459E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2527S43:  460C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2528S43:  4678 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2529S43:  46E8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2530S43:  4754 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2531S43:  47C8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2532S43:  483A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2533S43:  48AA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2534S43:  4916 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2535S43:  4982 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2536S43:  49EE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2537S43:  4A5A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2538S43:  4ACE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2539S43:  4B3A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2540S43:  4BB0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2541S43:  4C20 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2542S43:  4C9A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2543S43:  4D06 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2544S43:  4D72 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2545S43:  4DDE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2546S43:  4E4A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2547S43:  4EB6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2548S43:  4F22 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2549S43:  4F8E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2550S43:  4FFA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2551S43:  5066 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2552S43:  50D2 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2553S43:  5140 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2554S43:  51AE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2555S43:  521C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2556S43:  528C DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2557S43:  52FE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2558S43:  5372 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2559S43:  53E4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2560S43:  5470 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2561S43:  54EC DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2562S43:  5592 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2563S43:  5614 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2564S43:  56A8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2565S43:  5736 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2566S43:  57A8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2567S43:  5828 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2568S43:  58B6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2569S43:  5942 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2570S43:  59D0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2571S43:  5A64 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2572S43:  5AFE DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2573S43:  5B9A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2574S43:  5C3E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2575S43:  5CF4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2576S43:  5DA8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2577S43:  5E2E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2578S43:  5EBA DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2579S43:  5F46 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2580S43:  5FD6 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2581S43:  6064 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2582S43:  6100 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2583S43:  618A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2584S43:  6226 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2585S43:  62C4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2586S43:  6364 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2587S43:  63F8 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2588S43:  64B4 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2589S43:  6574 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2590S43:  6634 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2591S43:  66A0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2592S43:  670A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2593S43:  678E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2594S43:  6810 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2595S43:  689E DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2596S43:  692A DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2597S43:  69B0 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2598S43:  6A44 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            6A50 DEFINED AT LINE 198
