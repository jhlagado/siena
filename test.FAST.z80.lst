0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD B3 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   D1                     DB   lsb(nop_)   ; SP
0221   9E                     DB   lsb(not_)   ; !
0222   D1                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D1                     DB   lsb(nop_)   ; %
0226   64                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   12                     DB   lsb(paren_)   ; (
0229   15                     DB   lsb(parenEnd_)   ; )
022A   93                     DB   lsb(mul_)   ; *
022B   86                     DB   lsb(add_)   ; +
022C   D1                     DB   lsb(nop_)   ; ,
022D   96                     DB   lsb(sub_)   ; -
022E   18                     DB   lsb(dot_)   ; .
022F   B9                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   61                     DB   lsb(symbol_)   ; :
023B   0F                     DB   lsb(clear_)   ; ;
023C   AC                     DB   lsb(lt_)   ; <
023D   A3                     DB   lsb(eq_)   ; =
023E   A8                     DB   lsb(gt_)   ; >
023F   42                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5E                     DB   lsb(ident_)   ; A
0242   5E                     DB   lsb(ident_)   ; B
0243   5E                     DB   lsb(ident_)   ; C
0244   5E                     DB   lsb(ident_)   ; D
0245   5E                     DB   lsb(ident_)   ; E
0246   5E                     DB   lsb(ident_)   ; F
0247   5E                     DB   lsb(ident_)   ; G
0248   5E                     DB   lsb(ident_)   ; h
0249   5E                     DB   lsb(ident_)   ; I
024A   5E                     DB   lsb(ident_)   ; J
024B   5E                     DB   lsb(ident_)   ; K
024C   5E                     DB   lsb(ident_)   ; L
024D   5E                     DB   lsb(ident_)   ; M
024E   5E                     DB   lsb(ident_)   ; N
024F   5E                     DB   lsb(ident_)   ; O
0250   5E                     DB   lsb(ident_)   ; p
0251   5E                     DB   lsb(ident_)   ; Q
0252   5E                     DB   lsb(ident_)   ; R
0253   5E                     DB   lsb(ident_)   ; S
0254   5E                     DB   lsb(ident_)   ; T
0255   5E                     DB   lsb(ident_)   ; U
0256   5E                     DB   lsb(ident_)   ; V
0257   5E                     DB   lsb(ident_)   ; W
0258   5E                     DB   lsb(ident_)   ; X
0259   5E                     DB   lsb(ident_)   ; Y
025A   5E                     DB   lsb(ident_)   ; Z
025B   58                     DB   lsb(array_)   ; [
025C   C8                     DB   lsb(comment_)   ; \
025D   5B                     DB   lsb(arrayEnd_)   ; ]
025E   78                     DB   lsb(xor_)   ; ^
025F   5E                     DB   lsb(ident_)   ; _
0260   55                     DB   lsb(char_)   ; `    	
0261   5E                     DB   lsb(ident_)   ; a
0262   5E                     DB   lsb(ident_)   ; b
0263   5E                     DB   lsb(ident_)   ; c
0264   5E                     DB   lsb(ident_)   ; d
0265   5E                     DB   lsb(ident_)   ; e
0266   5E                     DB   lsb(ident_)   ; f
0267   5E                     DB   lsb(ident_)   ; g
0268   5E                     DB   lsb(ident_)   ; h
0269   5E                     DB   lsb(ident_)   ; i
026A   5E                     DB   lsb(ident_)   ; j
026B   5E                     DB   lsb(ident_)   ; k
026C   5E                     DB   lsb(ident_)   ; l
026D   5E                     DB   lsb(ident_)   ; m
026E   5E                     DB   lsb(ident_)   ; n
026F   5E                     DB   lsb(ident_)   ; o
0270   5E                     DB   lsb(ident_)   ; p
0271   5E                     DB   lsb(ident_)   ; q
0272   5E                     DB   lsb(ident_)   ; r
0273   5E                     DB   lsb(ident_)   ; s
0274   5E                     DB   lsb(ident_)   ; t
0275   5E                     DB   lsb(ident_)   ; u
0276   5E                     DB   lsb(ident_)   ; v
0277   5E                     DB   lsb(ident_)   ; w
0278   5E                     DB   lsb(ident_)   ; x
0279   5E                     DB   lsb(ident_)   ; y
027A   5E                     DB   lsb(ident_)   ; z
027B   4F                     DB   lsb(block_)   ; {
027C   6F                     DB   lsb(or_)   ; |
027D   52                     DB   lsb(blockEnd_)   ; }
027E   81                     DB   lsb(inv_)   ; ~
027F   D1                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 12 04               JP   num   
0303                HEXNUM_:      
0303   C3 42 04               JP   hexnum   
0306                ARG_:        
0306   C3 F6 04               JP   arg   
0309                PROP_:       
0309   C3 11 05               JP   prop   
030C                STRING_:      
030C   C3 5F 04               JP   string   
030F                CLEAR_:      
030F   C3 CE 0B               JP   clear   
0312                PAREN_:      
0312   C3 8D 04               JP   paren   
0315                PARENEND_:      
0315   C3 9A 04               JP   parenEnd   
0318                DOT_:        
0318   E1                     POP   hl   
0319   03                     INC   bc   
031A   0A                     LD   a,(bc)   
031B   FE 68                  CP   "h"   
031D   20 05                  JR   nz,dot1   
031F   CD 30 09               CALL   prthex   
0322   18 17                  JR   dot4   
0324                DOT1:        
0324   FE 73                  CP   "s"   
0326   20 05                  JR   nz,dot2   
0328   CD 53 09               CALL   prtstr   
032B   18 0E                  JR   dot4   
032D                DOT2:        
032D   FE 63                  CP   "c"   
032F   20 06                  JR   nz,dot3   
0331   7D                     LD   a,l   
0332   CD 85 00               CALL   putchar   
0335   18 04                  JR   dot4   
0337                DOT3:        
0337   0B                     DEC   bc   
0338   CD E8 08               CALL   prtdec   
033B                DOT4:        
033B   3E 20                  LD   a," "   
033D   CD 85 00               CALL   putchar   
0340   DD E9                  JP   (ix)   
0342                             ; addr index -- addr2
0342                INDEX_:      
0342   E1                     POP   hl   ; hl = index
0343   D1                     POP   de   ; de = addr
0344   3A 9A 18               LD   a,(vDataWidth)   
0347   3D                     DEC   a   
0348   28 01                  JR   z,index1   
034A   29                     ADD   hl,hl   ; if data width = 2 then double
034B                INDEX1:      
034B   19                     ADD   hl,de   ; add addr
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                BLOCK_:      
034F   C3 A9 04               JP   block   
0352                BLOCKEND_:      
0352   C3 E2 04               JP   blockend   
0355                CHAR_:       
0355   C3 78 04               JP   char   
0358                ARRAY_:      
0358   C3 1C 06               JP   array   
035B                ARRAYEND_:      
035B   C3 2E 06               JP   arrayEnd   
035E                IDENT_:      
035E   C3 A2 07               JP   ident   
0361                SYMBOL_:      
0361   C3 7B 07               JP   symbol   
0364                AND_:        
0364   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0365   E1                     POP   hl   
0366   7B                     LD   a,e   
0367   A5                     AND   l   
0368   6F                     LD   l,a   
0369   7A                     LD   a,d   
036A   A4                     AND   h   
036B                AND1:        
036B   67                     LD   h,a   
036C   E5                     PUSH   hl   
036D   DD E9                  JP   (ix)   
036F                OR_:         
036F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0370   E1                     POP   hl   
0371   7B                     LD   a,e   
0372   B5                     OR   l   
0373   6F                     LD   l,a   
0374   7A                     LD   a,d   
0375   B4                     OR   h   
0376   18 F3                  JR   and1   
0378                XOR_:        
0378   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0379                XOR1:        
0379   E1                     POP   hl   
037A   7B                     LD   a,e   
037B   AD                     XOR   l   
037C   6F                     LD   l,a   
037D   7A                     LD   a,d   
037E   AC                     XOR   h   
037F   18 EA                  JR   and1   
0381                INV_:        ; Bitwise INVert the top member of the stack
0381   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0384   18 F3                  JR   xor1   
0386                ADD_:        ; add the top 2 members of the stack
0386   D1                     POP   de   
0387   E1                     POP   hl   
0388   19                     ADD   hl,de   
0389   E5                     PUSH   hl   
038A   DD E9                  JP   (ix)   
038C                HDOT_:       ; print hexadecimal
038C   E1                     POP   hl   
038D   CD 30 09               CALL   prthex   
0390   C3 37 03               JP   dot3   
0393                MUL_:        
0393   C3 F6 03               JP   mul   
0396                SUB_:        ; Subtract the value 2nd on stack from top of stack
0396   D1                     POP   de   
0397   E1                     POP   hl   ; Entry point for INVert
0398                SUB2:        
0398   B7                     OR   a   ; Entry point for NEGate
0399   ED 52                  SBC   hl,de   
039B   E5                     PUSH   hl   
039C   DD E9                  JP   (ix)   
039E                NOT_:        ; logical invert, any non zero value
039E   21 00 00               LD   hl,0   ; is considered true
03A1   18 01                  JR   eq1   
03A3                EQ_:         
03A3   E1                     POP   hl   
03A4                EQ1:         
03A4   D1                     POP   de   
03A5   C3 FB 07               JP   equals   
03A8                GT_:         
03A8   D1                     POP   de   
03A9   E1                     POP   hl   
03AA   18 02                  JR   lt1   
03AC                LT_:         
03AC   E1                     POP   hl   
03AD   D1                     POP   de   
03AE                LT1:         
03AE   03                     INC   bc   
03AF   0A                     LD   a,(bc)   
03B0   FE 3D                  CP   "="   
03B2   CA 03 08               JP   z,lessthaneq   
03B5   0B                     DEC   bc   
03B6   C3 08 08               JP   lessthan   
03B9                DIV_:        
03B9   D1                     POP   de   ; get first value
03BA   E1                     POP   hl   ; get 2nd value
03BB   C5                     PUSH   bc   ; preserve the IP
03BC   44 4D                  LD   bc,hl   
03BE   CD A5 08               CALL   divide   
03C1   22 98 18               LD   (vFrac),hl   
03C4   C1                     POP   bc   
03C5   D5                     PUSH   de   ; push result
03C6   DD E9                  JP   (ix)   
03C8                COMMENT_:      
03C8   03                     INC   bc   ; point to next char
03C9   0A                     LD   a,(bc)   
03CA   FE 20                  CP   " "   ; terminate on any char less than SP
03CC   30 FA                  JR   nc,comment_   
03CE   0B                     DEC   bc   
03CF   DD E9                  JP   (ix)   
03D1                NOP_:        
03D1   DD E9                  JP   (ix)   
03D3                             ;*******************************************************************
03D3                             ; word operators
03D3                             ;*******************************************************************
03D3                             ; shl
03D3                             ; value count -- value2          shift left count places
03D3                SHL:         
03D3   50 59                  LD   de,bc   ; save IP
03D5   C1                     POP   bc   ; bc = count
03D6   41                     LD   b,c   ; b = loop counter
03D7   E1                     POP   hl   
03D8   04                     INC   b   ; test for counter=0 case
03D9   18 01                  JR   shl2   
03DB                SHL1:        
03DB   29                     ADD   hl,hl   ; left shift hl
03DC                SHL2:        
03DC   10 FD                  DJNZ   shl1   
03DE   E5                     PUSH   hl   
03DF   42 4B                  LD   bc,de   ; restore IP
03E1   DD E9                  JP   (ix)   
03E3                             ; shr
03E3                             ; value count -- value2          shift left count places
03E3                SHR:         
03E3   50 59                  LD   de,bc   ; save IP
03E5   C1                     POP   bc   ; bc = count
03E6   41                     LD   b,c   ; b = loop counter
03E7   E1                     POP   hl   
03E8   04                     INC   b   ; test for counter=0 case
03E9   18 04                  JR   shr2   
03EB                SHR1:        
03EB   CB 3C                  SRL   h   ; right shift hl
03ED   CB 1D                  RR   l   
03EF                SHR2:        
03EF   10 FA                  DJNZ   shr1   
03F1   E5                     PUSH   hl   
03F2   42 4B                  LD   bc,de   ; restore IP
03F4   DD E9                  JP   (ix)   
03F6                MUL:         ;=19
03F6   D1                     POP   de   ; get first value
03F7   E1                     POP   hl   
03F8   C5                     PUSH   bc   ; Preserve the IP
03F9   44                     LD   b,h   ; bc = 2nd value
03FA   4D                     LD   c,l   
03FB   21 00 00               LD   hl,0   
03FE   3E 10                  LD   a,16   
0400                MUL2:        
0400   29                     ADD   hl,hl   
0401   CB 13                  RL   e   
0403   CB 12                  RL   d   
0405   30 04                  JR   nc,$+6   
0407   09                     ADD   hl,bc   
0408   30 01                  JR   nc,$+3   
040A   13                     INC   de   
040B   3D                     DEC   a   
040C   20 F2                  JR   nz,mul2   
040E   C1                     POP   bc   ; Restore the IP
040F   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0410   DD E9                  JP   (ix)   
0412                NUM:         
0412   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0415   0A                     LD   a,(bc)   ; Get numeral or -
0416   FE 2D                  CP   "-"   
0418   20 01                  JR   nz,num0   
041A   03                     INC   bc   ; move to next char, no flags affected
041B                NUM0:        
041B   08                     EX   af,af'   ; save zero flag = 0 for later
041C                NUM1:        
041C   0A                     LD   a,(bc)   ; read digit
041D   D6 30                  SUB   "0"   ; less than 0?
041F   38 13                  JR   c,num2   ; not a digit, exit loop
0421   FE 0A                  CP   10   ; greater that 9?
0423   30 0F                  JR   nc,num2   ; not a digit, exit loop
0425   03                     INC   bc   ; inc IP
0426   54 5D                  LD   de,hl   ; multiply hl * 10
0428   29                     ADD   hl,hl   
0429   29                     ADD   hl,hl   
042A   19                     ADD   hl,de   
042B   29                     ADD   hl,hl   
042C   85                     ADD   a,l   ; add digit in a to hl
042D   6F                     LD   l,a   
042E   3E 00                  LD   a,0   
0430   8C                     ADC   a,h   
0431   67                     LD   h,a   
0432   18 E8                  JR   num1   
0434                NUM2:        
0434   0B                     DEC   bc   
0435   08                     EX   af,af'   ; restore zero flag
0436   20 07                  JR   nz,num3   
0438   EB                     EX   de,hl   ; negate the value of hl
0439   21 00 00               LD   hl,0   
043C   B7                     OR   a   ; jump to sub2
043D   ED 52                  SBC   hl,de   
043F                NUM3:        
043F   E5                     PUSH   hl   ; Put the number on the stack
0440   DD E9                  JP   (ix)   ; and process the next character
0442                HEXNUM:      ; 
0442   21 00 00               LD   hl,0   ; Clear hl to accept the number
0445                HEXNUM1:      
0445   03                     INC   bc   
0446   0A                     LD   a,(bc)   ; Get the character which is a numeral
0447   CB 77                  BIT   6,a   ; is it uppercase alpha?
0449   28 02                  JR   z,hexnum2   ; no a decimal
044B   D6 07                  SUB   7   ; sub 7  to make $a - $F
044D                HEXNUM2:      
044D   D6 30                  SUB   $30   ; Form decimal digit
044F   DA 34 04               JP   c,num2   
0452   FE 10                  CP   $0F+1   
0454   D2 34 04               JP   nc,num2   
0457   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0458   29                     ADD   hl,hl   ; 4X
0459   29                     ADD   hl,hl   ; 8X
045A   29                     ADD   hl,hl   ; 16X
045B   85                     ADD   a,l   ; add into bottom of hl
045C   6F                     LD   l,a   ; 
045D   18 E6                  JR   hexnum1   
045F                             ; 
045F                STRING:      
045F   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
0463   D5                     PUSH   de   ; save start of string
0464   03                     INC   bc   ; point to next char
0465   18 03                  JR   string2   
0467                STRING1:      
0467   12                     LD   (de),a   
0468   13                     INC   de   ; increase count
0469   03                     INC   bc   ; point to next char
046A                STRING2:      
046A   0A                     LD   a,(bc)   
046B   FE 27                  CP   "'"   ; ' is the string terminator
046D   20 F8                  JR   nz,string1   
046F   AF                     XOR   a   ; write NUL to terminate string
0470   12                     LD   (de),a   
0471   13                     INC   de   
0472   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0476   DD E9                  JP   (ix)   
0478                CHAR:        
0478   21 00 00               LD   hl,0   ; if `` is empty
047B                CHAR1:       
047B   03                     INC   bc   ; point to next char
047C   0A                     LD   a,(bc)   
047D   FE 60                  CP   "`"   ; ` is the string terminator
047F   28 09                  JR   z,char3   
0481   FE 5C                  CP   $5c   ; \ is the escape
0483   20 02                  JR   nz,char2   
0485   03                     INC   bc   
0486   0A                     LD   a,(bc)   
0487                CHAR2:       
0487   6F                     LD   l,a   
0488   18 F1                  JR   char1   
048A                CHAR3:       
048A   E5                     PUSH   hl   
048B   DD E9                  JP   (ix)   
048D                PAREN:       
048D   DD 21 93 04            LD   ix,paren2   
0491   18 16                  JR   block   
0493                PAREN2:      
0493   DD 21 B0 0B            LD   ix,next   
0497   C3 F1 0B               JP   exec   
049A                PARENEND:      
049A   E1                     POP   hl   ; hl = last result
049B   D1                     POP   de   
049C   C1                     POP   bc   
049D   C1                     POP   bc   
049E   E5                     PUSH   hl   
049F   FD 62                  LD   iyh,d   
04A1   FD 6B                  LD   iyl,e   
04A3   DD 21 B0 0B            LD   ix,next   
04A7   DD E9                  JP   (ix)   
04A9                BLOCK:       
04A9   03                     INC   bc   
04AA   C5                     PUSH   bc   ; return first opcode of block
04AB   16 01                  LD   d,1   ; nesting: count first parenthesis
04AD                BLOCK1:      ; Skip to end of definition
04AD   0A                     LD   a,(bc)   ; Get the next character
04AE   03                     INC   bc   ; Point to next character
04AF   FE 21                  CP   " " + 1   ; ignore whitespace
04B1   38 FA                  JR   c,block1   
04B3   FE 29                  CP   ")"   
04B5   28 25                  JR   z,block4   
04B7   FE 7D                  CP   "}"   
04B9   28 21                  JR   z,block4   
04BB   FE 5D                  CP   "]"   
04BD   28 1D                  JR   z,block4   
04BF   FE 28                  CP   "("   
04C1   28 13                  JR   z,block3   
04C3   FE 7B                  CP   "{"   
04C5   28 0F                  JR   z,block3   
04C7   FE 5B                  CP   "["   
04C9   28 0B                  JR   z,block3   
04CB   FE 27                  CP   "'"   
04CD   28 07                  JR   z,block3   
04CF   FE 60                  CP   "`"   
04D1   20 DA                  JR   nz,block1   
04D3                BLOCK2:      
04D3   14                     INC   d   
04D4   18 D7                  JR   block1   
04D6                BLOCK3:      
04D6   3E 80                  LD   a,$80   
04D8   AA                     XOR   d   
04D9   47                     LD   b,a   
04DA   18 D1                  JR   block1   
04DC                BLOCK4:      
04DC   15                     DEC   d   
04DD   20 CE                  JR   nz,block1   ; get the next element
04DF   0B                     DEC   bc   ; balanced, exit
04E0   DD E9                  JP   (ix)   
04E2                BLOCKEND:      
04E2   E1                     POP   hl   ; hl = last result
04E3   FD 54                  LD   d,iyh   ; de = BP
04E5   FD 5D                  LD   e,iyl   
04E7   EB                     EX   de,hl   ; hl = BP, de = result
04E8   F9                     LD   sp,hl   ; sp = BP
04E9   E1                     POP   hl   ; hl = old BP
04EA   C1                     POP   bc   ; pop SCP (discard)
04EB   C1                     POP   bc   ; bc = IP
04EC   F9                     LD   sp,hl   ; sp = old BP
04ED   FD 21 00 00            LD   iy,0   ; iy = sp
04F1   FD 39                  ADD   iy,sp   
04F3   D5                     PUSH   de   ; push result
04F4   DD E9                  JP   (ix)   
04F6                ARG:         
04F6   03                     INC   bc   ; get next char
04F7   0A                     LD   a,(bc)   
04F8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04FA   E6 07                  AND   $07   ; mask
04FC   87                     ADD   a,a   ; double
04FD   6F                     LD   l,a   ; hl = offset into args
04FE   26 00                  LD   h,0   
0500   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0503   FD 56 03               LD   d,(iy+3)   
0506   EB                     EX   de,hl   ; hl = SCP - offset
0507   B7                     OR   a   
0508   ED 52                  SBC   hl,de   
050A   2B                     DEC   hl   ; de = arg
050B   56                     LD   d,(hl)   
050C   2B                     DEC   hl   
050D   5E                     LD   e,(hl)   
050E   D5                     PUSH   de   ; push arg
050F   DD E9                  JP   (ix)   
0511                PROP:        
0511   03                     INC   bc   ; get next char
0512   0A                     LD   a,(bc)   
0513   D6 30                  SUB   "0"   ; treat as a digit, 1 based index
0515   E6 07                  AND   $07   ; mask
0517   87                     ADD   a,a   ; double
0518   6F                     LD   l,a   ; hl = offset into args
0519   26 00                  LD   h,0   
051B   FD 5E 06               LD   e,(iy+6)   ; de = closure array
051E   FD 56 07               LD   d,(iy+7)   
0521   19                     ADD   hl,de   ; find address of prop in array
0522   5E                     LD   e,(hl)   
0523   23                     INC   hl   
0524   56                     LD   d,(hl)   
0525   D5                     PUSH   de   ; push prop
0526   DD E9                  JP   (ix)   
0528                             ; addr -- value
0528                GET:         
0528   E1                     POP   hl   
0529   16 00                  LD   d,0   
052B   5E                     LD   e,(hl)   
052C   3A 9A 18               LD   a,(vDataWidth)   
052F   3D                     DEC   a   
0530   28 02                  JR   z,get1   
0532   23                     INC   hl   
0533   56                     LD   d,(hl)   
0534                GET1:        
0534   D5                     PUSH   de   
0535   DD E9                  JP   (ix)   
0537                             ; addr value -- value0
0537                SET:         
0537   E1                     POP   hl   
0538   D1                     POP   de   
0539   7E                     LD   a,(hl)   
053A   73                     LD   (hl),e   
053B   5F                     LD   e,a   
053C   3A 9A 18               LD   a,(vDataWidth)   
053F   3D                     DEC   a   
0540   28 04                  JR   z,set1   
0542   23                     INC   hl   
0543   7E                     LD   a,(hl)   
0544   72                     LD   (hl),d   
0545   57                     LD   d,a   
0546                SET1:        
0546   D5                     PUSH   de   ; return old value
0547   DD E9                  JP   (ix)   
0549                             ; 
0549                             ; in:
0549                             ;  pop hl                      ; hl = string
0549                             ;  pop de                      ; de = char
0549                             ; in1:
0549                             ;  ld a,(hl)
0549                             ;  inc hl
0549                             ;  cp 0                        ; is end of string
0549                             ;  jr z,in2
0549                             ;  cp e
0549                             ;  jr nz,in1
0549                             ;  or a                        ; a is never 0, or a resets zero flag
0549                             ; in2:
0549                             ;  ld hl,0                     ; hl = result
0549                             ;  jr z,in3
0549                             ;  dec hl                      ; if nz de = $ffff
0549                             ; in3:
0549                             ;  push hl                     ; push result
0549                             ;  jp (ix)
0549                             ; newAdd2:
0549                             ;  push bc                     ; push IP
0549                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
0549                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
0549                             ;  push de                     ; push SCP
0549                             ;  push iy                     ; push base pointer
0549                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0549                             ;  add iy,sp                   ;
0549                             ;  ld d,(iy-1)
0549                             ;  ld e,(iy-2)
0549                             ;  ld h,(iy-3)
0549                             ;  ld l,(iy-4)
0549                             ;  add hl,de                   ; hl = hl + de
0549                             ;  ex de,hl                    ; de = result
0549                             ;  pop hl                      ; hl = old BP
0549                             ;  pop bc                      ; pop SCP (discard)
0549                             ;  pop bc                      ; bc = IP
0549                             ;  ld sp,hl                    ; sp = old BP
0549                             ;  ld iy,0
0549                             ;  add iy,sp
0549                             ;  push de                     ; push result
0549                             ;  jp (ix)
0549                             ; ifte
0549                             ; condition then -- value
0549                IF:          
0549   11 00 00               LD   de,0   ; NUL pointer for else
054C   18 01                  JR   ifte1   
054E                             ; ifte
054E                             ; condition then else -- value
054E                IFTE:        
054E   D1                     POP   de   ; de = else
054F                IFTE1:       
054F   E1                     POP   hl   ; hl = then
0550   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0551   23                     INC   hl   ; check for true
0552   7C                     LD   a,h   
0553   B5                     OR   l   
0554   E1                     POP   hl   ; hl = then
0555   28 01                  JR   z,ifte2   
0557   EB                     EX   de,hl   ; condition = false, hl = else
0558                IFTE2:       
0558   7C                     LD   a,h   ; check if hl is NUL
0559   B5                     OR   l   
055A   28 13                  JR   z,ifte3   
055C   C5                     PUSH   bc   ; push IP
055D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0560   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0563   D5                     PUSH   de   ; push SCP
0564   FD E5                  PUSH   iy   ; push BP
0566   FD 21 00 00            LD   iy,0   ; iy = sp
056A   FD 39                  ADD   iy,sp   
056C   44 4D                  LD   bc,hl   ; IP = then
056E   0B                     DEC   bc   
056F                IFTE3:       
056F   DD E9                  JP   (ix)   
0571                             ; switch
0571                             ; index array -- value
0571                SWITCH:      
0571   D1                     POP   de   ; de = array
0572   E1                     POP   hl   ; hl = index
0573   29                     ADD   hl,hl   ; indec *= 2
0574   19                     ADD   hl,de   ; add array[0]
0575   4E                     LD   c,(hl)   ; bc = case
0576   23                     INC   hl   
0577   46                     LD   b,(hl)   
0578   0B                     DEC   bc   
0579   DD E9                  JP   (ix)   
057B                             ; c b --
057B                             ; loops until c = 0
057B                LOOP:        
057B   D1                     POP   de   ; de = block                    c
057C   E1                     POP   hl   ; hl = condition
057D   D5                     PUSH   de   
057E   C5                     PUSH   bc   ; push IP
057F   42 4B                  LD   bc,de   ; bc = block
0581   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0584   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0587   D5                     PUSH   de   ; push SCP
0588   FD E5                  PUSH   iy   ; push BP
058A   FD 21 00 00            LD   iy,0   ; iy = sp
058E   FD 39                  ADD   iy,sp   
0590                LOOP1:       
0590   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0591   B4                     OR   h   
0592   28 21                  JR   z,loop3   
0594   11 AA 05               LD   de,loop2-1   ; IP return address
0597   D5                     PUSH   de   
0598   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
059B   FD 56 03               LD   d,(iy+3)   
059E   D5                     PUSH   de   ; 
059F   FD E5                  PUSH   iy   ; push BP
05A1   FD 21 00 00            LD   iy,0   ; iy = sp
05A5   FD 39                  ADD   iy,sp   
05A7   E5                     PUSH   hl   ; push condition
05A8   0B                     DEC   bc   
05A9   DD E9                  JP   (ix)   
05AB                LOOP2:       
05AB   1B                     DB   ESC   ; escape from interpreter
05AC   FD 4E 06               LD   c,(iy+6)   ; bc = block
05AF   FD 46 07               LD   b,(iy+7)   
05B2   E1                     POP   hl   ; hl = condition
05B3   18 DB                  JR   loop1   
05B5                LOOP3:       
05B5   FD 54                  LD   d,iyh   ; de = BP
05B7   FD 5D                  LD   e,iyl   
05B9   EB                     EX   de,hl   ; hl = BP, de = result
05BA   F9                     LD   sp,hl   ; sp = BP
05BB   E1                     POP   hl   ; hl = old BP
05BC   C1                     POP   bc   ; pop SCP (discard)
05BD   C1                     POP   bc   ; bc = IP
05BE   F9                     LD   sp,hl   ; sp = old BP
05BF   FD 21 00 00            LD   iy,0   ; iy = sp
05C3   FD 39                  ADD   iy,sp   
05C5   DD 21 B0 0B            LD   ix,next   ; needed?
05C9   DD E9                  JP   (ix)   
05CB                CASE:        
05CB   E1                     POP   hl   ; get selector from stack
05CC   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05CD   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05D0   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05D3   D5                     PUSH   de   ; push SCP
05D4   FD E5                  PUSH   iy   ; push BP
05D6   FD 21 00 00            LD   iy,0   ; BP = SP
05DA   FD 39                  ADD   iy,sp   
05DC   E5                     PUSH   hl   ; push selector as first arg of new frame
05DD   DD E9                  JP   (ix)   
05DF                SELECT:      
05DF   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05E2   FD 6E FE               LD   l,(iy-2)   
05E5   23                     INC   hl   ; hl -= 1 index from second arg
05E6   29                     ADD   hl,hl   ; hl *= 2 word offset
05E7   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05E9   FD 5D                  LD   e,iyl   
05EB   EB                     EX   de,hl   
05EC   B7                     OR   a   ; hl = BP - offset
05ED   ED 52                  SBC   hl,de   
05EF   54 5D                  LD   de,hl   ; save arg ptr
05F1   2B                     DEC   hl   ; hl += 2
05F2   2B                     DEC   hl   
05F3   B7                     OR   a   ; arg ptr - stack pointer
05F4   ED 72                  SBC   hl,sp   
05F6   30 03                  JR   nc,case0   
05F8   D1                     POP   de   ; pop last arg
05F9   18 05                  JR   case1   
05FB                CASE0:       
05FB   EB                     EX   de,hl   
05FC   2B                     DEC   hl   ; de = arg
05FD   56                     LD   d,(hl)   
05FE   2B                     DEC   hl   
05FF   5E                     LD   e,(hl)   
0600                CASE1:       
0600   7A                     LD   a,d   ; is arg == NUL ? then skip
0601   B3                     OR   e   
0602   28 09                  JR   z,case2   
0604   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0607   FD 70 05               LD   (iy+5),b   
060A   42 4B                  LD   bc,de   ; IP = arg
060C   0B                     DEC   bc   
060D                CASE2:       
060D   DD E9                  JP   (ix)   
060F                WORDS:       
060F   21 02 00               LD   hl,2   
0612   18 03                  JR   bytes1   
0614                BYTES:       
0614   21 01 00               LD   hl,1   
0617                BYTES1:      
0617   22 9A 18               LD   (vDataWidth),hl   
061A   DD E9                  JP   (ix)   
061C                ARRAY:       
061C   C5                     PUSH   bc   ; create stack frame, push IP
061D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0620   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0623   D5                     PUSH   de   ; push SCP
0624   FD E5                  PUSH   iy   ; push BP
0626   FD 21 00 00            LD   iy,0   ; BP = SP
062A   FD 39                  ADD   iy,sp   
062C   DD E9                  JP   (ix)   
062E                ARRAYEND:      
062E   FD 54                  LD   d,iyh   ; de = BP
0630   FD 5D                  LD   e,iyl   
0632   DD 62                  LD   ixh,d   ; ix = BP
0634   DD 6B                  LD   ixl,e   
0636   62 6B                  LD   hl,de   ; hl = de
0638   B7                     OR   a   
0639   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
063B   CB 3C                  SRL   h   
063D   CB 1D                  RR   l   
063F   EB                     EX   de,hl   ; de = count
0640   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0643   73                     LD   (hl),e   
0644   23                     INC   hl   
0645   72                     LD   (hl),d   
0646   23                     INC   hl   ; hl = array[0], de = count
0647   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
064A   FE 01                  CP   1   
064C   20 10                  JR   nz,arrayEnd2   
064E                ARRAYEND1:      ; byte
064E   DD 7E FE               LD   a,(ix-2)   
0651   77                     LD   (hl),a   
0652   23                     INC   hl   
0653   DD 2B                  DEC   ix   
0655   DD 2B                  DEC   ix   
0657   1B                     DEC   de   
0658   7B                     LD   a,e   
0659   B2                     OR   d   
065A   20 F2                  JR   nz,arrayEnd1   
065C   18 13                  JR   arrayEnd3   
065E                ARRAYEND2:      ; word
065E   DD 7E FE               LD   a,(ix-2)   
0661   77                     LD   (hl),a   
0662   23                     INC   hl   
0663   DD 7E FF               LD   a,(ix-1)   
0666   77                     LD   (hl),a   
0667   23                     INC   hl   
0668   DD 2B                  DEC   ix   
066A   DD 2B                  DEC   ix   
066C   1B                     DEC   de   
066D   7B                     LD   a,e   
066E   B2                     OR   d   
066F   20 ED                  JR   nz,arrayEnd2   
0671                ARRAYEND3:      
0671   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0673   FD 5D                  LD   e,iyl   
0675   EB                     EX   de,hl   ; hl = BP, de = end of array
0676   F9                     LD   sp,hl   ; sp = BP
0677   E1                     POP   hl   ; hl = old BP, de = end of array
0678   DD E1                  POP   ix   ; pop SCP (discard)
067A   DD E1                  POP   ix   ; pop IP (discard)
067C   EB                     EX   de,hl   
067D   FD 62                  LD   iyh,d   
067F   FD 6B                  LD   iyl,e   
0681   EB                     EX   de,hl   
0682                             ; ld sp,hl                    ; sp = old BP
0682                             ; ld iy,0                     ; iy = sp
0682                             ; add iy,sp
0682   DD 21 B0 0B            LD   ix,next   
0686   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0689   23                     INC   hl   
068A   23                     INC   hl   
068B   E5                     PUSH   hl   ; return array[0]
068C   EB                     EX   de,hl   ; hl = end of array, de = array[0]
068D   B7                     OR   a   
068E   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0690   EB                     EX   de,hl   
0691   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0694   73                     LD   (hl),e   ; array[-2] = size
0695   23                     INC   hl   
0696   72                     LD   (hl),d   
0697   23                     INC   hl   
0698   19                     ADD   hl,de   
0699   22 A6 18               LD   (vHeapPtr),hl   
069C   DD E9                  JP   (ix)   
069E                             ; str -- num
069E                HASH:        
069E   E1                     POP   hl   
069F   C5                     PUSH   bc   
06A0   44 4D                  LD   bc,hl   
06A2   CD 42 08               CALL   hashStr   
06A5   C1                     POP   bc   
06A6   E5                     PUSH   hl   
06A7   DD E9                  JP   (ix)   
06A9                             ; symbol addr --
06A9                DEF:         
06A9   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06AB   E3                     EX   (sp),hl   
06AC   EB                     EX   de,hl   
06AD   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap de = addr
06B0   36 CD                  LD   (hl),$cd   ; compile "call exec"
06B2   23                     INC   hl   
06B3   36 0B                  LD   (hl),lsb(call)   
06B5   23                     INC   hl   
06B6   36 0C                  LD   (hl),msb(call)   
06B8   23                     INC   hl   
06B9   06 01                  LD   b,1   ; b = nesting
06BB                DEF1:        
06BB   1A                     LD   a,(de)   
06BC   13                     INC   de   
06BD   77                     LD   (hl),a   
06BE   23                     INC   hl   
06BF   FE 29                  CP   ")"   
06C1   28 25                  JR   z,def4   
06C3   FE 7D                  CP   "}"   
06C5   28 21                  JR   z,def4   
06C7   FE 5D                  CP   "]"   
06C9   28 1D                  JR   z,def4   
06CB   FE 28                  CP   "("   
06CD   28 13                  JR   z,def3   
06CF   FE 7B                  CP   "{"   
06D1   28 0F                  JR   z,def3   
06D3   FE 5B                  CP   "["   
06D5   28 0B                  JR   z,def3   
06D7   FE 27                  CP   "'"   
06D9   28 07                  JR   z,def3   
06DB   FE 60                  CP   "`"   
06DD   20 DC                  JR   nz,def1   
06DF                DEF2:        
06DF   04                     INC   b   
06E0   18 D9                  JR   def1   
06E2                DEF3:        
06E2   3E 80                  LD   a,$80   
06E4   A8                     XOR   b   
06E5   47                     LD   b,a   
06E6   18 D3                  JR   def1   
06E8                DEF4:        
06E8   05                     DEC   b   
06E9   20 D0                  JR   nz,def1   ; get the next element
06EB   AF                     XOR   a   ; end with NUL ??? needed?
06EC   77                     LD   (hl),a   
06ED   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06F1   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
06F4   E1                     POP   hl   ; de = addr, hl = IP
06F5   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06F6   44 4D                  LD   bc,hl   ; bc = symbol
06F8   CD 5B 08               CALL   defineEntry   
06FB   38 00                  JR   c,def5   
06FD                             ; call error
06FD                             ; .cstr "Def Collision"
06FD                DEF5:        
06FD   C1                     POP   bc   
06FE   DD E9                  JP   (ix)   
0700                             ; symbol array block --
0700                CLOSURE:      
0700   E1                     POP   hl   ; hl = block
0701   D1                     POP   de   ; de = array
0702   C5                     PUSH   bc   ; (sp) = block, (sp+2) = IP, (sp+2) = symbol
0703   E5                     PUSH   hl   
0704   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr de = array
0707   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0709   23                     INC   hl   
070A   36 20                  LD   (hl),lsb(doclosure)   
070C   23                     INC   hl   
070D   36 0C                  LD   (hl),msb(doclosure)   
070F   23                     INC   hl   
0710   73                     LD   (hl),e   ; compile array
0711   23                     INC   hl   
0712   72                     LD   (hl),d   
0713   23                     INC   hl   
0714   D1                     POP   de   ; de =  block, (sp) = IP, (sp+2) = symbol
0715   06 01                  LD   b,1   ; b = nesting
0717   18 A2                  JR   def1   
0719                             ; symbol value --
0719                LET:         
0719   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
071B   E3                     EX   (sp),hl   
071C   EB                     EX   de,hl   
071D   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0720   36 CD                  LD   (hl),$cd   ; compile "call dovar"
0722   23                     INC   hl   
0723   36 29                  LD   (hl),lsb(dovar)   
0725   23                     INC   hl   
0726   36 0C                  LD   (hl),msb(dovar)   
0728   23                     INC   hl   
0729   73                     LD   (hl),e   
072A   23                     INC   hl   
072B   72                     LD   (hl),d   
072C   2B                     DEC   hl   
072D   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0731   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0734   E1                     POP   hl   ; de = addr, hl = IP
0735   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0736   44 4D                  LD   bc,hl   ; bc = symbol
0738   CD 5B 08               CALL   defineEntry   
073B   38 00                  JR   c,let2   
073D                             ; call error
073D                             ; .cstr "Let Collision"
073D                LET2:        
073D   C1                     POP   bc   
073E   DD E9                  JP   (ix)   
0740                             ; symbol value --
0740                CONST:       
0740   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0742   E3                     EX   (sp),hl   
0743   EB                     EX   de,hl   
0744   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0747   36 CD                  LD   (hl),$cd   ; compile "call doconst"
0749   23                     INC   hl   
074A   36 2B                  LD   (hl),lsb(doconst)   
074C   23                     INC   hl   
074D   36 0C                  LD   (hl),msb(doconst)   
074F   23                     INC   hl   
0750   73                     LD   (hl),e   
0751   23                     INC   hl   
0752   72                     LD   (hl),d   
0753   23                     INC   hl   
0754   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definiition
0758   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
075B   E1                     POP   hl   ; de = addr, hl = IP
075C   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
075D   44 4D                  LD   bc,hl   ; bc = symbol
075F   CD 5B 08               CALL   defineEntry   
0762   38 00                  JR   c,const2   
0764                             ; call error
0764                             ; .cstr "Const Collision"
0764                CONST2:      
0764   C1                     POP   bc   
0765   DD E9                  JP   (ix)   
0767                             ; str -- addr
0767                ADDR:        
0767   E1                     POP   hl   ; hl = hash
0768   C5                     PUSH   bc   
0769   44 4D                  LD   bc,hl   
076B   CD 81 08               CALL   lookupEntry   
076E   38 03                  JR   c,addr1   
0770   21 00 00               LD   hl,0   
0773                             ; call printStr		
0773                             ; .cstr "Undefined"
0773                             ; jp interpret
0773                ADDR1:       
0773   C1                     POP   bc   
0774   11 03 00               LD   de,3   
0777   19                     ADD   hl,de   
0778   E5                     PUSH   hl   
0779   DD E9                  JP   (ix)   
077B                SYMBOL:      
077B   03                     INC   bc   
077C   11 00 1A               LD   de,PAD   
077F   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0781   18 02                  JR   symbol1   
0783                SYMBOL0:      ; copy to PAD area
0783   03                     INC   bc   ; characters that are part of the identifier
0784   13                     INC   de   
0785                SYMBOL1:      ; 0-9 A-Z a-z _
0785   0A                     LD   a,(bc)   
0786   12                     LD   (de),a   
0787   B7                     OR   a   
0788   28 0A                  JR   z,symbol2   
078A   6F                     LD   l,a   
078B   7E                     LD   a,(hl)   
078C   FE 5E                  CP   lsb(ident_)   
078E   28 F3                  JR   z,symbol0   
0790   FE 00                  CP   lsb(num_)   
0792   28 EF                  JR   z,symbol0   
0794                SYMBOL2:      
0794   0B                     DEC   bc   
0795   AF                     XOR   a   
0796   12                     LD   (de),a   ; terminate string with NUL
0797   C5                     PUSH   bc   
0798   01 00 1A               LD   bc,PAD   
079B   CD 42 08               CALL   hashStr   ; hl = hash
079E   C1                     POP   bc   
079F   E5                     PUSH   hl   
07A0   DD E9                  JP   (ix)   
07A2                IDENT:       
07A2   11 00 1A               LD   de,PAD   
07A5   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
07A7   18 02                  JR   ident1   
07A9                IDENT0:      ; copy to PAD area
07A9   03                     INC   bc   ; characters that are part of the identifier
07AA   13                     INC   de   
07AB                IDENT1:      ; 0-9 A-Z a-z _
07AB   0A                     LD   a,(bc)   
07AC   12                     LD   (de),a   
07AD   B7                     OR   a   
07AE   28 0A                  JR   z,ident2   
07B0   6F                     LD   l,a   
07B1   7E                     LD   a,(hl)   
07B2   FE 5E                  CP   lsb(ident_)   
07B4   28 F3                  JR   z,ident0   
07B6   FE 00                  CP   lsb(num_)   
07B8   28 EF                  JR   z,ident0   
07BA                IDENT2:      
07BA   0B                     DEC   bc   
07BB   AF                     XOR   a   
07BC   12                     LD   (de),a   ; terminate string with NUL
07BD   C5                     PUSH   bc   
07BE   01 00 1A               LD   bc,PAD   
07C1   CD 42 08               CALL   hashStr   ; hl = hash
07C4   44 4D                  LD   bc,hl   
07C6   CD 81 08               CALL   lookupEntry   
07C9   C1                     POP   bc   
07CA   38 02                  JR   c,ident3   ; todo: no entry? print an error message
07CC   DD E9                  JP   (ix)   
07CE                IDENT3:      
07CE   E9                     JP   (hl)   
07CF                FRAC:        
07CF   2A 98 18               LD   hl,(vFrac)   
07D2   E5                     PUSH   hl   
07D3   DD E9                  JP   (ix)   
07D5                SQRT1:       
07D5   E1                     POP   hl   
07D6   C5                     PUSH   bc   
07D7   CD BE 08               CALL   squareRoot   
07DA   ED 43 98 18            LD   (vFrac),bc   
07DE   C1                     POP   bc   
07DF   D5                     PUSH   de   
07E0   DD E9                  JP   (ix)   
07E2                ABS1:        
07E2   E1                     POP   hl   
07E3   CB 7C                  BIT   7,h   
07E5   C8                     RET   z   
07E6   AF                     XOR   a   
07E7   95                     SUB   l   
07E8   6F                     LD   l,a   
07E9   9F                     SBC   a,a   
07EA   94                     SUB   h   
07EB   67                     LD   h,a   
07EC   E5                     PUSH   hl   
07ED   DD E9                  JP   (ix)   
07EF                MOD:         
07EF   D1                     POP   de   ; get first value
07F0   E1                     POP   hl   ; get 2nd value
07F1   C5                     PUSH   bc   ; preserve the IP
07F2   44 4D                  LD   bc,hl   
07F4   CD A5 08               CALL   divide   
07F7   C1                     POP   bc   
07F8   E5                     PUSH   hl   ; push remainder
07F9   DD E9                  JP   (ix)   
07FB                             ; hl = value1, de = value2
07FB                             ; hl = result
07FB                EQUALS:      
07FB   B7                     OR   a   ; reset the carry flag
07FC   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07FE   28 10                  JR   z,true1   
0800   C3 16 08               JP   false1   
0803                             ; hl = value1 de = value2
0803                             ; hl = result
0803                LESSTHANEQ:      
0803   B7                     OR   a   
0804   ED 52                  SBC   hl,de   
0806   18 05                  JR   lessthan1   
0808                             ; hl = value1 de = value2
0808                             ; hl = result
0808                LESSTHAN:      
0808   B7                     OR   a   
0809   ED 52                  SBC   hl,de   
080B   28 09                  JR   z,false1   
080D                LESSTHAN1:      
080D   FA 16 08               JP   m,false1   
0810                TRUE1:       
0810   21 FF FF               LD   hl,TRUE   
0813   E5                     PUSH   hl   
0814   DD E9                  JP   (ix)   
0816                FALSE1:      
0816   21 00 00               LD   hl,FALSE   
0819   E5                     PUSH   hl   
081A   DD E9                  JP   (ix)   
081C                             ; Z80 port input
081C                             ; port -- value
081C                INPUT:       
081C   E1                     POP   hl   
081D   59                     LD   e,c   ; save IP
081E   4D                     LD   c,l   
081F   ED 68                  IN   l,(c)   
0821   26 00                  LD   h,0   
0823   4B                     LD   c,e   ; restore IP
0824   E5                     PUSH   hl   
0825   DD E9                  JP   (ix)   
0827                             ; Z80 port output
0827                             ; value port --
0827                OUTPUT:      
0827   E1                     POP   hl   
0828   59                     LD   e,c   ; save IP
0829   4D                     LD   c,l   
082A   E1                     POP   hl   
082B   ED 69                  OUT   (c),l   
082D   4B                     LD   c,e   ; restore IP
082E   DD E9                  JP   (ix)   
0830                KEY:         
0830   CD 81 00               CALL   getchar   
0833   26 00                  LD   h,0   
0835   6F                     LD   l,a   
0836   E5                     PUSH   hl   
0837   DD E9                  JP   (ix)   
0839                NEG:         
0839   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
083C   D1                     POP   de   
083D   C3 98 03               JP   sub2   ; use the SUBtract routine
0840                FILTER:      
0840                MAP:         
0840                SCAN:        
0840   DD E9                  JP   (ix)   
0842                             ; -------------------------------------------------------------------------------
0842                             ; hash C-string
0842                             ; BC = str
0842                             ; HL = hash
0842                HASHSTR:      
0842   21 00 00               LD   hl,0   
0845                HASHSTR1:      
0845   0A                     LD   a,(bc)   ; load next char
0846   03                     INC   bc   
0847   FE 00                  CP   0   ; NUL?
0849   C8                     RET   z   
084A                HASHSTR2:      
084A   16 00                  LD   d,0   
084C   5F                     LD   e,a   
084D   19                     ADD   hl,de   
084E   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0850   29                     ADD   hl,hl   ; shift left
0851   19                     ADD   hl,de   ; add
0852   29                     ADD   hl,hl   ; shift left
0853   29                     ADD   hl,hl   ; shift left
0854   29                     ADD   hl,hl   ; shift left
0855   29                     ADD   hl,hl   ; shift left
0856   29                     ADD   hl,hl   ; shift left
0857   29                     ADD   hl,hl   ; shift left
0858   19                     ADD   hl,de   ; add
0859   18 EA                  JR   hashStr1   
085B                             ; add entry to hash slots and hash pointers
085B                             ; bc = hash (b = hi, c = lo), de = addr
085B                             ; sets carry if successful
085B                DEFINEENTRY:      
085B   CB 21                  SLA   c   ; lo = lo * 2
085D   69                     LD   l,c   ; lo1 = lo
085E   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0860                DEFINEENTRY0:      
0860   7E                     LD   a,(hl)   ; a = (lo1)
0861   FE FF                  CP   UNUSED   ; is it unused?
0863   28 12                  JR   z,defineEntry3   ; yes, add entry
0865   79                     LD   a,c   ; a = lo
0866   BE                     CP   (hl)   ; compare (lo1) with lo
0867   20 06                  JR   nz,defineEntry1   ; no match loop around
0869   2C                     INC   l   
086A   78                     LD   a,b   ; a = hi
086B   BE                     CP   (hl)   ; compare (lo1+1) with hi
086C   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
086E   2D                     DEC   l   ; restore l
086F                DEFINEENTRY1:      
086F   2C                     INC   l   ; try next entry
0870   2C                     INC   l   
0871   79                     LD   a,c   ; compare lo and lo1
0872   BD                     CP   l   ; if equal then there's no space left, reject
0873   20 EB                  JR   nz,defineEntry0   
0875                DEFINEENTRY2:      
0875   B7                     OR   a   ; clear carry flag, failure
0876   C9                     RET      
0877                DEFINEENTRY3:      ; new entry
0877   71                     LD   (hl),c   ; (lo1) = hash lo
0878   23                     INC   hl   
0879   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
087A   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
087C   72                     LD   (hl),d   
087D   2B                     DEC   hl   
087E   73                     LD   (hl),e   ; (slot + 2) = address
087F   37                     SCF      ; set carry flag, success
0880   C9                     RET      
0881                             ; looks up hash and returns address
0881                             ; bc = hash
0881                             ; returns addr in hl, sets carry if successful
0881                LOOKUPENTRY:      
0881   CB 21                  SLA   c   ; lo = lo * 2
0883   69                     LD   l,c   ; lo1 = lo
0884   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0886                LOOKUPENTRY0:      
0886   7E                     LD   a,(hl)   ; a = (hl), slot
0887   FE FF                  CP   UNUSED   ; is it unused?
0889   28 EA                  JR   z,defineEntry2   ; yes, does not exist
088B   79                     LD   a,c   ; a = lo
088C   BE                     CP   (hl)   ; compare (lo1) with lo
088D   20 06                  JR   nz,lookupEntry1   ; no match loop around
088F   2C                     INC   l   
0890   78                     LD   a,b   ; a = hi
0891   BE                     CP   (hl)   ; compare (lo1+1) with hi
0892   28 09                  JR   z,lookupEntry3   
0894   2D                     DEC   l   
0895                LOOKUPENTRY1:      
0895   2C                     INC   l   
0896   2C                     INC   l   
0897   79                     LD   a,c   
0898   BD                     CP   l   ; no space left, reject
0899   20 EB                  JR   nz,lookupEntry0   
089B                LOOKUPENTRY2:      
089B   B7                     OR   a   ; clear carry flag, failure
089C   C9                     RET      
089D                LOOKUPENTRY3:      
089D   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
089F   56                     LD   d,(hl)   
08A0   2D                     DEC   l   ; restore l
08A1   5E                     LD   e,(hl)   ; (slot + 2) = address
08A2   EB                     EX   de,hl   
08A3   37                     SCF      
08A4   C9                     RET      
08A5                             ; division subroutine.
08A5                             ; bc: divisor, de: dividend, hl: remainder
08A5                DIVIDE:      
08A5   21 00 00               LD   hl,0   ; zero the remainder
08A8   3E 10                  LD   a,16   ; loop counter
08AA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08AA   CB 21                  SLA   c   
08AC   CB 10                  RL   b   
08AE   ED 6A                  ADC   hl,hl   
08B0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08B2   38 03                  JR   c,divide2   
08B4   0C                     INC   c   
08B5   18 01                  JR   divide3   
08B7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08B7   19                     ADD   hl,de   
08B8                DIVIDE3:      
08B8   3D                     DEC   a   
08B9   20 EF                  JR   nz,divide1   
08BB   50 59                  LD   de,bc   ; result from bc to de
08BD   C9                     RET      
08BE                             ; squareroot
08BE                             ; Input: HL = value
08BE                             ; Result: DE = square root BC = remainder
08BE                SQUAREROOT:      
08BE   01 00 08               LD   bc,0800h   
08C1   59                     LD   e,c   
08C2   AF                     XOR   a   
08C3                SQUAREROOT1:      
08C3   29                     ADD   hl,hl   
08C4   CB 11                  RL   c   
08C6   ED 6A                  ADC   hl,hl   
08C8   CB 11                  RL   c   
08CA   30 02                  JR   nc,$+4   
08CC   CB C5                  SET   0,l   
08CE   7B                     LD   a,e   
08CF   87                     ADD   a,a   
08D0   5F                     LD   e,a   
08D1   87                     ADD   a,a   
08D2   CB 45                  BIT   0,l   
08D4   20 03                  JR   nz,$+5   
08D6   91                     SUB   c   
08D7   30 05                  JR   nc,squareRoot4   
08D9   79                     LD   a,c   
08DA   93                     SUB   e   
08DB   1C                     INC   e   
08DC   93                     SUB   e   
08DD   4F                     LD   c,a   
08DE                SQUAREROOT4:      
08DE   10 E3                  DJNZ   squareRoot1   
08E0   CB 45                  BIT   0,l   
08E2   28 01                  JR   z,squareRoot5   
08E4   04                     INC   b   
08E5                SQUAREROOT5:      
08E5   16 00                  LD   d,0   
08E7   C9                     RET      
08E8                PRTDEC:      
08E8   CB 7C                  BIT   7,h   
08EA   28 0B                  JR   z,prtdec0   
08EC   3E 2D                  LD   a,"-"   
08EE   CD 85 00               CALL   putchar   
08F1   AF                     XOR   a   
08F2   95                     SUB   l   
08F3   6F                     LD   l,a   
08F4   9F                     SBC   a,a   
08F5   94                     SUB   h   
08F6   67                     LD   h,a   
08F7                PRTDEC0:      
08F7   C5                     PUSH   bc   
08F8   0E 00                  LD   c,0   ; leading zeros flag = false
08FA   11 F0 D8               LD   de,-10000   
08FD   CD 19 09               CALL   prtdec1   
0900   11 18 FC               LD   de,-1000   
0903   CD 19 09               CALL   prtdec1   
0906   11 9C FF               LD   de,-100   
0909   CD 19 09               CALL   prtdec1   
090C   1E F6                  LD   e,-10   
090E   CD 19 09               CALL   prtdec1   
0911   0C                     INC   c   ; flag = true for at least digit
0912   1E FF                  LD   e,-1   
0914   CD 19 09               CALL   prtdec1   
0917   C1                     POP   bc   
0918   C9                     RET      
0919                PRTDEC1:      
0919   06 2F                  LD   b,"0"-1   
091B                PRTDEC2:      
091B   04                     INC   b   
091C   19                     ADD   hl,de   
091D   38 FC                  JR   c,prtdec2   
091F   ED 52                  SBC   hl,de   
0921   3E 30                  LD   a,"0"   
0923   B8                     CP   b   
0924   20 05                  JR   nz,prtdec3   
0926   AF                     XOR   a   
0927   B1                     OR   c   
0928   C8                     RET   z   
0929   18 01                  JR   prtdec4   
092B                PRTDEC3:      
092B   0C                     INC   c   
092C                PRTDEC4:      
092C   78                     LD   a,b   
092D   C3 85 00               JP   putchar   
0930                PRTHEX:      ; display hl as a 16-bit number in hex.
0930   C5                     PUSH   bc   ; preserve the IP
0931   7C                     LD   a,h   
0932   CD 3B 09               CALL   prthex2   
0935   7D                     LD   a,l   
0936   CD 3B 09               CALL   prthex2   
0939   C1                     POP   bc   
093A   C9                     RET      
093B                PRTHEX2:      
093B   4F                     LD   c,a   
093C   1F                     RRA      
093D   1F                     RRA      
093E   1F                     RRA      
093F   1F                     RRA      
0940   CD 44 09               CALL   prthex3   
0943   79                     LD   a,c   
0944                PRTHEX3:      
0944   E6 0F                  AND   0x0F   
0946   C6 90                  ADD   a,0x90   
0948   27                     DAA      
0949   CE 40                  ADC   a,0x40   
094B   27                     DAA      
094C   C3 85 00               JP   putchar   
094F                PRTSTR0:      
094F   CD 85 00               CALL   putchar   
0952   23                     INC   hl   
0953                PRTSTR:      
0953   7E                     LD   a,(hl)   
0954   B7                     OR   a   
0955   20 F8                  JR   nz,prtstr0   
0957   C9                     RET      
0958                             ; **************************************************************************
0958                             ; calculate nesting value
0958                             ; a is char to be tested,
0958                             ; e is the nesting value (initially 0)
0958                             ; e is increased by ( and [
0958                             ; e is decreased by ) and ]
0958                             ; e has its bit 7 toggled by `
0958                             ; limited to 127 levels
0958                             ; **************************************************************************
0958                NESTING:      
0958   FE 22                  CP   $22   ; quote char
095A   20 0A                  JR   nz,nesting1   
095C   CB 7B                  BIT   7,e   
095E   28 03                  JR   z,nesting1a   
0960   CB BB                  RES   7,e   
0962   C9                     RET      
0963                NESTING1A:      
0963   CB FB                  SET   7,e   
0965   C9                     RET      
0966                NESTING1:      
0966   CB 7B                  BIT   7,e   
0968   C0                     RET   nz   
0969   FE 7B                  CP   "{"   
096B   28 08                  JR   z,nesting2   
096D   FE 5B                  CP   "["   
096F   28 04                  JR   z,nesting2   
0971   FE 28                  CP   "("   
0973   20 02                  JR   nz,nesting3   
0975                NESTING2:      
0975   1C                     INC   e   
0976   C9                     RET      
0977                NESTING3:      
0977   FE 7D                  CP   "}"   
0979   28 07                  JR   z,nesting4   
097B   FE 5D                  CP   "]"   
097D   28 03                  JR   z,nesting4   
097F   FE 29                  CP   ")"   
0981   C0                     RET   nz   
0982                NESTING4:      
0982   1D                     DEC   e   
0983   C9                     RET      
0984                PROMPT:      
0984   CD 94 09               CALL   printStr   
0987   0D 0A 3E 20 00         .CSTR   "\r\n> "   
098C   C9                     RET      
098D                CRLF:        
098D   CD 94 09               CALL   printStr   
0990   0D 0A 00               .CSTR   "\r\n"   
0993   C9                     RET      
0994                PRINTSTR:      
0994   E3                     EX   (sp),hl   ; swap			
0995   CD 53 09               CALL   prtstr   
0998   23                     INC   hl   ; inc past NUL
0999   E3                     EX   (sp),hl   ; put it back	
099A   C9                     RET      
099B                DEFINE:      
099B   E1                     POP   hl   
099C   7E                     LD   a,(hl)   
099D   23                     INC   hl   
099E   44 4D                  LD   bc,hl   
09A0   5F                     LD   e,a   
09A1   16 00                  LD   d,0   
09A3   19                     ADD   hl,de   
09A4   5E                     LD   e,(hl)   
09A5   23                     INC   hl   
09A6   56                     LD   d,(hl)   
09A7   23                     INC   hl   
09A8   E5                     PUSH   hl   ; bc = str
09A9   D5                     PUSH   de   
09AA   CD 42 08               CALL   hashStr   ; hl = hash
09AD   D1                     POP   de   
09AE   44 4D                  LD   bc,hl   
09B0   C3 5B 08               JP   defineEntry   
09B3                INIT:        
09B3   DD 21 B0 0B            LD   ix,next   
09B7   FD 21 80 18            LD   iy,STACK   
09BB   21 80 01               LD   hl,isysVars   
09BE   11 98 18               LD   de,sysVars   
09C1   01 10 00               LD   bc,8 * 2   
09C4   ED B0                  LDIR      
09C6   3E FF                  LD   a,UNUSED   
09C8   06 00                  LD   b,0   
09CA   21 00 1B               LD   hl,hashSlots   
09CD                INIT1:       
09CD   77                     LD   (hl),a   
09CE   23                     INC   hl   
09CF   10 FC                  DJNZ   init1   
09D1   CD 9B 09               CALL   define   
09D4   04 61 62 73 00         .PSTR   "abs",0   
09D9   E2 07                  DW   abs1   
09DB   CD 9B 09               CALL   define   
09DE   05 61 64 64 72 00      .PSTR   "addr",0   
09E4   67 07                  DW   addr   
09E6   CD 9B 09               CALL   define   
09E9   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09F0   14 06                  DW   bytes   
09F2   CD 9B 09               CALL   define   
09F5   05 63 61 6C 6C 00      .PSTR   "call",0   
09FB   0B 0C                  DW   call   
09FD   CD 9B 09               CALL   define   
0A00   05 63 61 73 65 00      .PSTR   "case",0   
0A06   CB 05                  DW   case   
0A08   CD 9B 09               CALL   define   
0A0B   06 63 6F 6E 73 74 00   .PSTR   "const",0   
0A12   40 07                  DW   const   
0A14   CD 9B 09               CALL   define   
0A17   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0A20   00 07                  DW   closure   
0A22   CD 9B 09               CALL   define   
0A25   04 64 65 66 00         .PSTR   "def",0   
0A2A   A9 06                  DW   def   
0A2C   CD 9B 09               CALL   define   
0A2F   05 65 78 65 63 00      .PSTR   "exec",0   
0A35   F1 0B                  DW   exec   
0A37   CD 9B 09               CALL   define   
0A3A   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A41   00 00                  DW   false   
0A43   CD 9B 09               CALL   define   
0A46   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A4E   40 08                  DW   filter   
0A50   CD 9B 09               CALL   define   
0A53   05 66 72 61 63 00      .PSTR   "frac",0   
0A59   CF 07                  DW   frac   
0A5B   CD 9B 09               CALL   define   
0A5E   04 67 65 74 00         .PSTR   "get",0   
0A63   28 05                  DW   get   
0A65   CD 9B 09               CALL   define   
0A68   05 68 61 73 68 00      .PSTR   "hash",0   
0A6E   9E 06                  DW   hash   
0A70   CD 9B 09               CALL   define   
0A73   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A7A   1C 08                  DW   input   
0A7C   CD 9B 09               CALL   define   
0A7F   03 69 66 00            .PSTR   "if",0   
0A83   49 05                  DW   if   
0A85   CD 9B 09               CALL   define   
0A88   05 69 66 74 65 00      .PSTR   "ifte",0   
0A8E   4E 05                  DW   ifte   
0A90   CD 9B 09               CALL   define   
0A93   04 6B 65 79 00         .PSTR   "key",0   
0A98   30 08                  DW   key   
0A9A   CD 9B 09               CALL   define   
0A9D   04 6C 65 74 00         .PSTR   "let",0   
0AA2   19 07                  DW   let   
0AA4   CD 9B 09               CALL   define   
0AA7   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0AAD   7B 05                  DW   loop   
0AAF   CD 9B 09               CALL   define   
0AB2   04 6D 61 70 00         .PSTR   "map",0   
0AB7   40 08                  DW   map   
0AB9   CD 9B 09               CALL   define   
0ABC   04 6D 6F 64 00         .PSTR   "mod",0   
0AC1   EF 07                  DW   mod   
0AC3   CD 9B 09               CALL   define   
0AC6   04 6E 65 67 00         .PSTR   "neg",0   
0ACB   39 08                  DW   neg   
0ACD   CD 9B 09               CALL   define   
0AD0   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0AD8   27 08                  DW   output   
0ADA   CD 9B 09               CALL   define   
0ADD   05 73 63 61 6E 00      .PSTR   "scan",0   
0AE3   01 00                  DW   scan   
0AE5   CD 9B 09               CALL   define   
0AE8   07 73 65 6C 65 63 74 00 .PSTR   "select",0   
0AF0   DF 05                  DW   select   
0AF2   CD 9B 09               CALL   define   
0AF5   04 73 65 74 00         .PSTR   "set",0   
0AFA   37 05                  DW   set   
0AFC   CD 9B 09               CALL   define   
0AFF   04 73 68 6C 00         .PSTR   "shl",0   
0B04   D3 03                  DW   shl   
0B06   CD 9B 09               CALL   define   
0B09   04 73 68 72 00         .PSTR   "shr",0   
0B0E   E3 03                  DW   shr   
0B10   CD 9B 09               CALL   define   
0B13   05 73 71 72 74 00      .PSTR   "sqrt",0   
0B19   D5 07                  DW   sqrt1   
0B1B   CD 9B 09               CALL   define   
0B1E   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0B26   71 05                  DW   switch   
0B28   CD 9B 09               CALL   define   
0B2B   05 74 72 75 65 00      .PSTR   "true",0   
0B31   FF FF                  DW   true   
0B33   CD 9B 09               CALL   define   
0B36   06 77 6F 72 64 73 00   .PSTR   "words",0   
0B3D   0F 06                  DW   words   
0B3F   C9                     RET      
0B40                START:       
0B40   31 80 18               LD   sp,STACK   ; start of Siena
0B43   CD B3 09               CALL   init   ; setups
0B46   CD 94 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B49   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0B56                INTERPRET:      
0B56   CD 84 09               CALL   prompt   
0B59   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B5C   ED 43 9C 18            LD   (vTIBPtr),bc   
0B60                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B60   1E 00                  LD   e,0   ; initilize nesting value
0B62   C5                     PUSH   bc   ; save offset into TIB,
0B63                             ; bc is also the count of chars in TIB
0B63   21 00 19               LD   hl,TIB   ; hl is start of TIB
0B66   18 06                  JR   interpret4   
0B68                INTERPRET3:      
0B68   7E                     LD   a,(hl)   ; a = char in TIB
0B69   23                     INC   hl   ; inc pointer into TIB
0B6A   0B                     DEC   bc   ; dec count of chars in TIB
0B6B   CD 58 09               CALL   nesting   ; update nesting value
0B6E                INTERPRET4:      
0B6E   79                     LD   a,c   ; is count zero?
0B6F   B0                     OR   b   
0B70   20 F6                  JR   nz,interpret3   ; if not loop
0B72   C1                     POP   bc   ; restore offset into TIB
0B73                WAITCHAR:      
0B73   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B76   FE 20                  CP   $20   ; compare to space
0B78   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B7A   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B7C                             ; ???? NEEDED?
0B7C   28 2A                  JR   z,waitchar4   
0B7E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B80   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B82                MACRO:       
0B82                             ;  ld (vTIBPtr),bc
0B82                             ;  ld hl,ctrlCodes
0B82                             ;  add a,l			            ; look up key of macros
0B82                             ;  ld l,a
0B82                             ;  ld e,(hl)
0B82                             ;  ld a,e
0B82                             ;  or a
0B82                             ;  jr z,macro1
0B82                             ;  ld d,msb(macros)
0B82                             ;  push de
0B82                             ;  call call		            ; Siena exec_ operation and jump to it
0B82                             ;  db DC1,0
0B82                             ; macro1:
0B82                             ;  ld bc,(vTIBPtr)
0B82   18 DC                  JR   interpret2   
0B84                WAITCHAR1:      
0B84   21 00 19               LD   hl,TIB   
0B87   09                     ADD   hl,bc   
0B88   77                     LD   (hl),a   ; store the character in textbuf
0B89   03                     INC   bc   
0B8A   CD 85 00               CALL   putchar   ; echo character to screen
0B8D   CD 58 09               CALL   nesting   
0B90   18 E1                  JR   waitchar   ; wait for next character
0B92                WAITCHAR3:      
0B92   21 00 19               LD   hl,TIB   
0B95   09                     ADD   hl,bc   
0B96   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B98   23                     INC   hl   
0B99   36 0A                  LD   (hl),"\n"   
0B9B   23                     INC   hl   
0B9C   03                     INC   bc   
0B9D   03                     INC   bc   
0B9E   CD 8D 09               CALL   crlf   ; echo character to screen
0BA1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0BA2   B7                     OR   a   
0BA3   20 CE                  JR   nz,waitchar   
0BA5   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0BA7   03                     INC   bc   
0BA8                WAITCHAR4:      
0BA8   ED 43 9C 18            LD   (vTIBPtr),bc   
0BAC   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0BAF                             ; we pressed enter
0BAF   0B                     DEC   bc   
0BB0                NEXT:        
0BB0   03                     INC   bc   ; Increment the IP
0BB1   0A                     LD   a,(bc)   ; Get the next character and dispatch
0BB2                             ; bit 7,a                   ; is 15-bit opcode ?
0BB2                             ; jr nz,next3
0BB2   FE 20                  CP   " "   ; whitespace?
0BB4   28 FA                  JR   z,next   ; space? ignore
0BB6   38 07                  JR   c,next1   
0BB8   6F                     LD   l,a   ; index into table
0BB9   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0BBB   6E                     LD   l,(hl)   ; get low jump address
0BBC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BBE   E9                     JP   (hl)   ; Jump to routine
0BBF                NEXT1:       
0BBF   FE 1B                  CP   ESC   ; escape from interpreter
0BC1   28 07                  JR   z,escape   
0BC3   FE 00                  CP   NUL   ; end of input string?
0BC5   28 15                  JR   z,exit   
0BC7                             ; cp ETX                      ; end of command line input text?
0BC7                             ; jr nz,next
0BC7                             ;     ld hl,-STACK               ; etx, is SP valid? (too many pops?)
0BC7                             ;     add hl,sp
0BC7                             ;     jr nc,next2
0BC7                             ;     ld sp,STACK                ; yes, reset stack
0BC7                             ; next2:
0BC7   C3 56 0B               JP   interpret   ; no, other whitespace, macros?
0BCA                             ; next3:
0BCA                             ;     ld h,a                    ; build address
0BCA                             ;     inc bc
0BCA                             ;     ld a,(bc)
0BCA                             ;     ld l,a
0BCA                             ;     add hl,hl
0BCA                             ;     jp (hl)
0BCA                ESCAPE:      
0BCA   60 69                  LD   hl,bc   ; address of code after escape opcode
0BCC   23                     INC   hl   
0BCD   E9                     JP   (hl)   
0BCE                             ; clear stack args
0BCE                CLEAR:       
0BCE   FD 54                  LD   d,iyh   ; de = BP
0BD0   FD 5D                  LD   e,iyl   
0BD2   EB                     EX   de,hl   ; hl = BP, de = result
0BD3   F9                     LD   sp,hl   ; sp = BP
0BD4   21 00 00               LD   hl,0   
0BD7   22 9A 18               LD   (vDataWidth),hl   
0BDA   DD E9                  JP   (ix)   
0BDC                EXIT:        
0BDC   50 59                  LD   de,bc   ; address of code after exit opcode
0BDE   13                     INC   de   
0BDF   D9                     EXX      
0BE0   C1                     POP   bc   ; bc = last result
0BE1   FD 54                  LD   d,iyh   ; de = BP
0BE3   FD 5D                  LD   e,iyl   
0BE5   EB                     EX   de,hl   ; hl = BP
0BE6   F9                     LD   sp,hl   ; sp = BP
0BE7   D9                     EXX      
0BE8   E1                     POP   hl   ; hl = old BP
0BE9   C1                     POP   bc   ; pop SCP (discard)
0BEA   C1                     POP   bc   ; bc = IP
0BEB   F9                     LD   sp,hl   ; sp = old BP
0BEC   D9                     EXX      
0BED   C5                     PUSH   bc   ; push result
0BEE   D9                     EXX      
0BEF   EB                     EX   de,hl   
0BF0   E9                     JP   (hl)   
0BF1                             ; execute a block of code
0BF1                             ; uses parent scope
0BF1                EXEC:        ; execute code at pointer
0BF1   E1                     POP   hl   ; hl = pointer to code
0BF2   7C                     LD   a,h   ; skip if destination address is NUL
0BF3   B5                     OR   l   
0BF4   28 13                  JR   z,exec2   
0BF6   C5                     PUSH   bc   ; push IP
0BF7   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BFA   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BFD   D5                     PUSH   de   ; push SCP
0BFE   FD E5                  PUSH   iy   ; push BP
0C00   FD 21 00 00            LD   iy,0   ; BP = SP
0C04   FD 39                  ADD   iy,sp   
0C06   44 4D                  LD   bc,hl   ; IP = pointer to code
0C08   0B                     DEC   bc   ; dec to prepare for next routine
0C09                EXEC2:       
0C09   DD E9                  JP   (ix)   
0C0B                             ; call with args
0C0B                             ; creates a scope
0C0B                CALL:        ; execute code at pointer
0C0B   E1                     POP   hl   ; hl = pointer to code
0C0C                CALL1:       
0C0C   7C                     LD   a,h   ; skip if destination address is NUL
0C0D   B5                     OR   l   
0C0E   28 0E                  JR   z,call2   
0C10   C5                     PUSH   bc   ; push IP
0C11   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0C13   FD E5                  PUSH   iy   ; push BP
0C15   FD 21 00 00            LD   iy,0   ; BP = SP
0C19   FD 39                  ADD   iy,sp   
0C1B   44 4D                  LD   bc,hl   ; IP = pointer to code
0C1D   0B                     DEC   bc   ; dec to prepare for next routine
0C1E                CALL2:       
0C1E   DD E9                  JP   (ix)   
0C20                             ; call with args
0C20                             ; pushes array, creates a scope
0C20                DOCLOSURE:      
0C20   E1                     POP   hl   
0C21   5E                     LD   e,(hl)   ; load array and push
0C22   23                     INC   hl   
0C23   56                     LD   d,(hl)   
0C24   23                     INC   hl   
0C25   D5                     PUSH   de   
0C26   C3 0C 0C               JP   call1   
0C29                             ; -- addr
0C29                             ; returns address of variable
0C29                DOVAR:       ; execute code at pointer
0C29   DD E9                  JP   (ix)   
0C2B                             ; -- value
0C2B                             ; returns address of variable
0C2B                DOCONST:      ; execute code at pointer
0C2B   E1                     POP   hl   
0C2C   5E                     LD   e,(hl)   
0C2D   23                     INC   hl   
0C2E   56                     LD   d,(hl)   
0C2F   D5                     PUSH   de   
0C30   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                          DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x [100] { @0 } closure x", 100
4000   31 80 18               LD   SP,STACK   
4003   CD B3 09               CALL   init   
4006   CD F1 0B               CALL   exec   
4009   3A 78 20 5B 31 30 30 5D 20 7B 20 40 30 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100] { @0 } closure x"   
4023                          ;*Macro unroll:  expect ":x [100] { @0 } closure x",100
4023   E1                     POP   HL   
4024   E5                     PUSH   HL   
4025   11 64 00               LD   DE,100   
4028   B7                     OR   A   
4029   ED 52                  SBC   HL,DE   
402B   7D                     LD   A,L   
402C   B4                     OR   H   
402D   28 64                  JR   Z,expectM_0_2433S43   
402F   CD 94 09               CALL   printStr   
4032   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 5D 20 7B 20 40 30 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100] { @0 } closure x"   
4052   CD 94 09               CALL   printStr   
4055   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4064   21 64 00               LD   HL,100   
4067   CD E8 08               CALL   prtdec   
406A   CD 94 09               CALL   printStr   
406D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407A   E1                     POP   hl   
407B   E5                     PUSH   hl   
407C   CD E8 08               CALL   prtdec   
407F   E1                     POP   hl   
4080   CD 94 09               CALL   printStr   
4083   20 28 23 00            .CSTR   " (#"   
4087   CD 30 09               CALL   prthex   
408A   CD 94 09               CALL   printStr   
408D   29 0D 0A 00            .CSTR   ")\r\n"   
4091   76                     HALT      
4092   00                     .CSTR      
4093                EXPECTM_0_2433S43:      
4093   E1                     POP   HL   
4094                          ;*Macro unroll:  test ":x [100 200] { @1 } closure x", 200
4094   31 80 18               LD   SP,STACK   
4097   CD B3 09               CALL   init   
409A   CD F1 0B               CALL   exec   
409D   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100 200] { @1 } closure x"   
40BB                          ;*Macro unroll:  expect ":x [100 200] { @1 } closure x",200
40BB   E1                     POP   HL   
40BC   E5                     PUSH   HL   
40BD   11 C8 00               LD   DE,200   
40C0   B7                     OR   A   
40C1   ED 52                  SBC   HL,DE   
40C3   7D                     LD   A,L   
40C4   B4                     OR   H   
40C5   28 68                  JR   Z,expectM_0_2434S43   
40C7   CD 94 09               CALL   printStr   
40CA   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100 200] { @1 } closure x"   
40EE   CD 94 09               CALL   printStr   
40F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4100   21 C8 00               LD   HL,200   
4103   CD E8 08               CALL   prtdec   
4106   CD 94 09               CALL   printStr   
4109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4116   E1                     POP   hl   
4117   E5                     PUSH   hl   
4118   CD E8 08               CALL   prtdec   
411B   E1                     POP   hl   
411C   CD 94 09               CALL   printStr   
411F   20 28 23 00            .CSTR   " (#"   
4123   CD 30 09               CALL   prthex   
4126   CD 94 09               CALL   printStr   
4129   29 0D 0A 00            .CSTR   ")\r\n"   
412D   76                     HALT      
412E   00                     .CSTR      
412F                EXPECTM_0_2434S43:      
412F   E1                     POP   HL   
4130                          ;*Macro unroll:  test ":x [100 200] { @1 $1 + } closure 1 x", 201
4130   31 80 18               LD   SP,STACK   
4133   CD B3 09               CALL   init   
4136   CD F1 0B               CALL   exec   
4139   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 31 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   ":x [100 200] { @1 $1 + } closure 1 x"   
415E                          ;*Macro unroll:  expect ":x [100 200] { @1 $1 + } closure 1 x",201
415E   E1                     POP   HL   
415F   E5                     PUSH   HL   
4160   11 C9 00               LD   DE,201   
4163   B7                     OR   A   
4164   ED 52                  SBC   HL,DE   
4166   7D                     LD   A,L   
4167   B4                     OR   H   
4168   28 6F                  JR   Z,expectM_0_2435S43   
416A   CD 94 09               CALL   printStr   
416D   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 31 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   "Code: ",":x [100 200] { @1 $1 + } closure 1 x"   
4198   CD 94 09               CALL   printStr   
419B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41AA   21 C9 00               LD   HL,201   
41AD   CD E8 08               CALL   prtdec   
41B0   CD 94 09               CALL   printStr   
41B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C0   E1                     POP   hl   
41C1   E5                     PUSH   hl   
41C2   CD E8 08               CALL   prtdec   
41C5   E1                     POP   hl   
41C6   CD 94 09               CALL   printStr   
41C9   20 28 23 00            .CSTR   " (#"   
41CD   CD 30 09               CALL   prthex   
41D0   CD 94 09               CALL   printStr   
41D3   29 0D 0A 00            .CSTR   ")\r\n"   
41D7   76                     HALT      
41D8   00                     .CSTR      
41D9                EXPECTM_0_2435S43:      
41D9   E1                     POP   HL   
41DA                             ; test "0 [{1}] switch", 1
41DA                             ; test "1 [{1} {2} {3}] switch", 2
41DA                             ; test "9 [{1} {5}] switch", 5
41DA                             ; test ":add1 { $1 0? get $2 +} [1] closure 3 add1", 4
41DA                             ; test "bytes 'ABC' get", $41
41DA                             ; test "bytes [1 2 3] get", 1
41DA                             ; test ":xyz 123 const ; xyz", 123
41DA                             ; test ":x 1 const ; x", 1
41DA                             ; test ":x 'A' const x get", $41
41DA                             ; test ":x [1] const x get", 1
41DA                             ; test ":x [1 2 3] const x 2? get", 3
41DA                             ; test "2 (1 2 +) *", 6
41DA                             ; test ":xyz 123 const ; xyz", 123
41DA                             ; test ":xyz 123 let ; xyz get", 123
41DA                             ; test "1 2 {$1 $2 +} call", 3
41DA                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
41DA                             ; test ":xyz {1} def :xyz addr call", 1
41DA                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
41DA                             ; test ":xyz {10} def :xyz addr exec", 10
41DA                             ; test ":xyz {10} def :xyz addr call", 10
41DA                             ; test "'hello' hash", $7f54
41DA                             ; test ":hello", $7f54
41DA                             ; test "bytes [1 2 3]", $1e02
41DA                             ; test "bytes [1 2 3] 1? get", 2
41DA                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
41DA                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
41DA                             ; test "words [1 2 3]", $1e02
41DA                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
41DA                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
41DA                             ; test "words [10 20 30] 1 ? get", 10
41DA                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
41DA                             ; test "{{{1} exec} exec} exec", 1
41DA                             ; test "5 {{{$1} exec} exec} call", 5
41DA                             ; test "5 {$1} call", 5
41DA                             ; test "5 {{$1} exec} call", 5
41DA                             ; test "2 1 {{$1} call} call", 2
41DA                             ; test "2 1 {$2} call", 1
41DA                             ; test "2 1 {$1} call", 2
41DA                             ; test "2 1 {$2} call", 1
41DA                             ; test "2 4 {$2} call", 4
41DA                             ; test "{{1} call} call", 1
41DA                             ; test "5 {-1 {$1} if} call", 5
41DA                             ; test "0 {} loop", 0
41DA                             ; test "1 {1-} loop", $1a00
41DA                             ; test "65 .c", 0
41DA                             ; test "1 2 <", TRUE
41DA                             ; test "2 2 <=", TRUE
41DA                             ; test "2 1 <", FALSE
41DA                             ; test "1 2 >", FALSE
41DA                             ; test "2 2 >=", TRUE
41DA                             ; test "2 1 >", TRUE
41DA                             ; test "10 sqrt", 3
41DA                             ; test "10 sqrt frac", 1
41DA                             ; test "7 3 /", 2
41DA                             ; test "7 3 / frac", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test ":h {1} def :h addr call", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test "4 1 2 +", 3
41DA                             ; test "1", 1
41DA                             ; test "2", 2
41DA                             ; test "``", 0
41DA                             ; test "`a`", $61
41DA                             ; test "`\\``", $60
41DA                             ; test "`b` 'cba' in", -1
41DA                             ; test "`x` 'cba' in", 0
41DA                             ; test "5 0 {1} if", 5
41DA                             ; test "0 {1} {2} ifte", 2
41DA                             ; test "5 -1 {1} if", 1
41DA                             ; test "-1 {1} {2} ifte", 1
41DA                             ; test "9 sw {1} {5} ca", 5
41DA                             ; test "0 sw {1} ca", 1
41DA                             ; test "1 sw {1} {2} {3} ca", 2
41DA                             ; test "5 -1 {2} if", 2
41DA                             ; test "5 0 {2} if", 5
41DA                             ; test "5 0 {0 {2} if} if", 5
41DA                             ; test "5 0 {-1 {2} if} if", 5
41DA                             ; test "5 -1 {2} if", 2
41DA                             ; test "5 -1 {-1 {2} if} if", 2
41DA                             ; test "{1} ex", 1
41DA                             ; test "'A' @", 65
41DA                             ; test "1", 1
41DA                             ; test "0", 0
41DA                             ; test "10", 10
41DA                             ; test "123", 123
41DA                             ; test "$10", $10
41DA                             ; test "$FF", $FF
41DA                             ; test "2 3 =", 0
41DA                             ; test "3 3 =", 1
41DA                             ; test "2 3 <", 1
41DA                             ; test "3 3 <", 0
41DA                             ; test "3 3 >", 0
41DA                             ; test "4 3 >", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test "123 456 +", 123+456
41DA                             ; test "64 128 +", 64+128
41DA                             ; test "5 3 -", 2
41DA                             ; test "3 5 &", 1
41DA                             ; test "3 5 |", 7
41DA                             ; test "2 3 *", 6
41DA                             ; test "1 2 3 + *", 5
41DA                             ; ; test "1 2 3 ' +", 3
41DA                             ; ; test "1_ 2 +",1
41DA                             ; ; test "1_ 1 +",0
41DA                             ; ; call enter
41DA                             ; ;     .cstr "1 3",$22,"+"
41DA                             ; ; expect "1 3 DUP +", 6
41DA                             ; ; test "5 2/'", 2
41DA                             ; ; test "3 5$ -", 2
41DA                             ; ; test "5 2/$ '", 1
41DA                             ; ; test "2 3%++", 7
41DA                             ; ; test "1 2 3~''", 2
41DA                             ; ; test "1 2 3~+*", 8
41DA                             ; ; test "2a!a@",2
41DA                             ; ; test "3x! 1 x@+x! x@", 4
41DA                             ; ; test "3x! 1_ x@+x! x@", 2
41DA                             ; ; test "1{", 2
41DA                             ; ; test "1}", 0
41DA                             ; ; test "2}", 1
41DA                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
41DA                             ; ; test "{2} \\^", 2
41DA                             ; ; test ":X1; X", 1
41DA                             ; ; test ":A100;A", 100
41DA                             ; ; test ":Aa!; 3A a@", 3
41DA                             ; ; test ":Aa!;:Ba@;4AB", 4
41DA                             ; ; test "[]$ '", 0
41DA                             ; ; test "[3]$ '", 1
41DA                             ; ; test "[3]'@", 3
41DA                             ; ; test "[1 2 3]'@", 1
41DA                             ; ; test "[1 2 3]'2+@", 2
41DA                             ; ; test "\\h@[1]''\\h@$-", 2
41DA                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
41DA                             ; ; test "\\[]$ '", 0
41DA                             ; ; test "\\[3]'\\@", 3
41DA                             ; ; test "\\[3]$ '", 1
41DA                             ; ; test "\\[1 2 3]'\\@", 1
41DA                             ; ; test "\\[1 2 3]'1+\\@", 2
41DA                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
41DA                             ; ; test "\\h@\\[1]''\\h@$-", 1
41DA                             ; ; test "\\`A`\\@",65
41DA                             ; ; test "0 0{1+}", 0
41DA                             ; ; test "0 1{1+}", 1
41DA                             ; ; test "0 2{1+}", 2
41DA                             ; ; test "0 1{0{1+}}", 0
41DA                             ; ; test "0 1{1{1+}}", 1
41DA                             ; ; test "0 2{1{1+}}", 2
41DA                             ; ; test "0 2{2{1+}}", 4
41DA                             ; ; test "0 1{\\i@+}", 0
41DA                             ; ; test "0 2{\\i@+}", 1
41DA                             ; ; test "0 3{\\i@+}", 3
41DA                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
41DA                             ; ; test "0t! 10{1 t@+t!} t@",10
41DA                             ; ; test "0{100}{200}",200
41DA                             ; ; test "1{100}{200}",100
41DA                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
41DA                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
41DA                             ; ; test ":X10;\\0X", 10
41DA                             ; ; test "2 \\1x! \\1x@", 2
41DA   CD 94 09               CALL   printStr   
41DD   44 6F 6E 65 21 00      .CSTR   "Done!"   
41E3   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0840 DEFINED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 1921 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 237 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1881 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1300 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1923 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1898 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
CLEAR_:             030F DEFINED AT LINE 211 IN Siena.asm
PAREN_:             0312 DEFINED AT LINE 214 IN Siena.asm
PARENEND_:          0315 DEFINED AT LINE 217 IN Siena.asm
DOT_:               0318 DEFINED AT LINE 220 IN Siena.asm
DOT1:               0324 DEFINED AT LINE 228 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
DOT2:               032D DEFINED AT LINE 233 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
DOT3:               0337 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
DOT4:               033B DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
INDEX_:             0342 DEFINED AT LINE 248 IN Siena.asm
INDEX1:             034B DEFINED AT LINE 255 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
BLOCK_:             034F DEFINED AT LINE 260 IN Siena.asm
BLOCKEND_:          0352 DEFINED AT LINE 262 IN Siena.asm
CHAR_:              0355 DEFINED AT LINE 264 IN Siena.asm
ARRAY_:             0358 DEFINED AT LINE 266 IN Siena.asm
ARRAYEND_:          035B DEFINED AT LINE 268 IN Siena.asm
IDENT_:             035E DEFINED AT LINE 270 IN Siena.asm
SYMBOL_:            0361 DEFINED AT LINE 272 IN Siena.asm
AND_:               0364 DEFINED AT LINE 274 IN Siena.asm
AND1:               036B DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
OR_:                036F DEFINED AT LINE 287 IN Siena.asm
XOR_:               0378 DEFINED AT LINE 297 IN Siena.asm
XOR1:               0379 DEFINED AT LINE 299 IN Siena.asm
                    > USED AT LINE 310 IN Siena.asm
INV_:               0381 DEFINED AT LINE 308 IN Siena.asm
ADD_:               0386 DEFINED AT LINE 312 IN Siena.asm
HDOT_:              038C DEFINED AT LINE 319 IN Siena.asm
MUL_:               0393 DEFINED AT LINE 324 IN Siena.asm
SUB_:               0396 DEFINED AT LINE 327 IN Siena.asm
SUB2:               0398 DEFINED AT LINE 330 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
NOT_:               039E DEFINED AT LINE 336 IN Siena.asm
EQ_:                03A3 DEFINED AT LINE 340 IN Siena.asm
EQ1:                03A4 DEFINED AT LINE 342 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
GT_:                03A8 DEFINED AT LINE 346 IN Siena.asm
LT_:                03AC DEFINED AT LINE 351 IN Siena.asm
LT1:                03AE DEFINED AT LINE 354 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
DIV_:               03B9 DEFINED AT LINE 362 IN Siena.asm
COMMENT_:           03C8 DEFINED AT LINE 373 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
NOP_:               03D1 DEFINED AT LINE 381 IN Siena.asm
SHL:                03D3 DEFINED AT LINE 391 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
SHL1:               03DB DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHL2:               03DC DEFINED AT LINE 400 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
SHR:                03E3 DEFINED AT LINE 408 IN Siena.asm
                    > USED AT LINE 1798 IN Siena.asm
SHR1:               03EB DEFINED AT LINE 415 IN Siena.asm
                    > USED AT LINE 419 IN Siena.asm
SHR2:               03EF DEFINED AT LINE 418 IN Siena.asm
                    > USED AT LINE 414 IN Siena.asm
MUL:                03F6 DEFINED AT LINE 424 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
MUL2:               0400 DEFINED AT LINE 433 IN Siena.asm
                    > USED AT LINE 442 IN Siena.asm
NUM:                0412 DEFINED AT LINE 447 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               041B DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
NUM1:               041C DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
NUM2:               0434 DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
                    > USED AT LINE 460 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
NUM3:               043F DEFINED AT LINE 481 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
HEXNUM:             0442 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            0445 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
HEXNUM2:            044D DEFINED AT LINE 493 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
STRING:             045F DEFINED AT LINE 506 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0467 DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
STRING2:            046A DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
CHAR:               0478 DEFINED AT LINE 525 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
CHAR1:              047B DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
CHAR2:              0487 DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
CHAR3:              048A DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
PAREN:              048D DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
PAREN2:             0493 DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
PARENEND:           049A DEFINED AT LINE 550 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
BLOCK:              04A9 DEFINED AT LINE 561 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
BLOCK1:             04AD DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
BLOCK2:             04D3 DEFINED AT LINE 589 IN Siena.asm
BLOCK3:             04D6 DEFINED AT LINE 592 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
BLOCK4:             04DC DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
BLOCKEND:           04E2 DEFINED AT LINE 604 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARG:                04F6 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0511 DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
GET:                0528 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
GET1:               0534 DEFINED AT LINE 666 IN Siena.asm
                    > USED AT LINE 663 IN Siena.asm
SET:                0537 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 1790 IN Siena.asm
SET1:               0546 DEFINED AT LINE 684 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
IF:                 0549 DEFINED AT LINE 737 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
IFTE:               054E DEFINED AT LINE 743 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
IFTE1:              054F DEFINED AT LINE 745 IN Siena.asm
                    > USED AT LINE 739 IN Siena.asm
IFTE2:              0558 DEFINED AT LINE 754 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
IFTE3:              056F DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
SWITCH:             0571 DEFINED AT LINE 772 IN Siena.asm
                    > USED AT LINE 1806 IN Siena.asm
LOOP:               057B DEFINED AT LINE 785 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
LOOP1:              0590 DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
LOOP2:              05AB DEFINED AT LINE 813 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
LOOP3:              05B5 DEFINED AT LINE 820 IN Siena.asm
                    > USED AT LINE 800 IN Siena.asm
CASE:               05CB DEFINED AT LINE 834 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
SELECT:             05DF DEFINED AT LINE 846 IN Siena.asm
                    > USED AT LINE 1786 IN Siena.asm
CASE0:              05FB DEFINED AT LINE 864 IN Siena.asm
                    > USED AT LINE 861 IN Siena.asm
CASE1:              0600 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 863 IN Siena.asm
CASE2:              060D DEFINED AT LINE 878 IN Siena.asm
                    > USED AT LINE 873 IN Siena.asm
WORDS:              060F DEFINED AT LINE 881 IN Siena.asm
                    > USED AT LINE 1814 IN Siena.asm
BYTES:              0614 DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
BYTES1:             0617 DEFINED AT LINE 886 IN Siena.asm
                    > USED AT LINE 883 IN Siena.asm
ARRAY:              061C DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
ARRAYEND:           062E DEFINED AT LINE 900 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
ARRAYEND1:          064E DEFINED AT LINE 923 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
ARRAYEND2:          065E DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 921 IN Siena.asm
                    > USED AT LINE 951 IN Siena.asm
ARRAYEND3:          0671 DEFINED AT LINE 953 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
HASH:               069E DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
DEF:                06A9 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
DEF1:               06BB DEFINED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
DEF2:               06DF DEFINED AT LINE 1040 IN Siena.asm
DEF3:               06E2 DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
DEF4:               06E8 DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
DEF5:               06FD DEFINED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
CLOSURE:            0700 DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
LET:                0719 DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
LET2:               073D DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
CONST:              0740 DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
CONST2:             0764 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
ADDR:               0767 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
ADDR1:              0773 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
SYMBOL:             077B DEFINED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
SYMBOL0:            0783 DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
SYMBOL1:            0785 DEFINED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1173 IN Siena.asm
SYMBOL2:            0794 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
IDENT:              07A2 DEFINED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
IDENT0:             07A9 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
IDENT1:             07AB DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
IDENT2:             07BA DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
IDENT3:             07CE DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
FRAC:               07CF DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
SQRT1:              07D5 DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
ABS1:               07E2 DEFINED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
MOD:                07EF DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1770 IN Siena.asm
EQUALS:             07FB DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
LESSTHANEQ:         0803 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LESSTHAN:           0808 DEFINED AT LINE 1286 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
LESSTHAN1:          080D DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
TRUE1:              0810 DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1274 IN Siena.asm
FALSE1:             0816 DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1292 IN Siena.asm
INPUT:              081C DEFINED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
OUTPUT:             0827 DEFINED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
KEY:                0830 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
NEG:                0839 DEFINED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
FILTER:             0840 DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
MAP:                0840 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
HASHSTR:            0842 DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
HASHSTR1:           0845 DEFINED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
HASHSTR2:           084A DEFINED AT LINE 1358 IN Siena.asm
DEFINEENTRY:        085B DEFINED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
DEFINEENTRY0:       0860 DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
DEFINEENTRY1:       086F DEFINED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
DEFINEENTRY2:       0875 DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
DEFINEENTRY3:       0877 DEFINED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
LOOKUPENTRY:        0881 DEFINED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
LOOKUPENTRY0:       0886 DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
LOOKUPENTRY1:       0895 DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
LOOKUPENTRY2:       089B DEFINED AT LINE 1438 IN Siena.asm
LOOKUPENTRY3:       089D DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
DIVIDE:             08A5 DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 1264 IN Siena.asm
DIVIDE1:            08AA DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
DIVIDE2:            08B7 DEFINED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1461 IN Siena.asm
DIVIDE3:            08B8 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
SQUAREROOT:         08BE DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
SQUAREROOT1:        08C3 DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
SQUAREROOT4:        08DE DEFINED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
SQUAREROOT5:        08E5 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
PRTDEC:             08E8 DEFINED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            08F7 DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
PRTDEC1:            0919 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
PRTDEC2:            091B DEFINED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
PRTDEC3:            092B DEFINED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
PRTDEC4:            092C DEFINED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
PRTHEX:             0930 DEFINED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            093B DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
PRTHEX3:            0944 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
PRTSTR0:            094F DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
PRTSTR:             0953 DEFINED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
NESTING:            0958 DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1841 IN Siena.asm
                    > USED AT LINE 1882 IN Siena.asm
NESTING1A:          0963 DEFINED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
NESTING1:           0966 DEFINED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
NESTING2:           0975 DEFINED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
NESTING3:           0977 DEFINED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
NESTING4:           0982 DEFINED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
PROMPT:             0984 DEFINED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
CRLF:               098D DEFINED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1894 IN Siena.asm
PRINTSTR:           0994 DEFINED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1821 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 211
DEFINE:             099B DEFINED AT LINE 1649 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
                    > USED AT LINE 1792 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
                    > USED AT LINE 1800 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1808 IN Siena.asm
                    > USED AT LINE 1812 IN Siena.asm
INIT:               09B3 DEFINED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1820 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              09CD DEFINED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
START:              0B40 DEFINED AT LINE 1818 IN Siena.asm
INTERPRET:          0B56 DEFINED AT LINE 1824 IN Siena.asm
                    > USED AT LINE 1932 IN Siena.asm
INTERPRET2:         0B60 DEFINED AT LINE 1830 IN Siena.asm
                    > USED AT LINE 1874 IN Siena.asm
INTERPRET3:         0B68 DEFINED AT LINE 1837 IN Siena.asm
                    > USED AT LINE 1846 IN Siena.asm
INTERPRET4:         0B6E DEFINED AT LINE 1843 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
WAITCHAR:           0B73 DEFINED AT LINE 1849 IN Siena.asm
                    > USED AT LINE 1883 IN Siena.asm
                    > USED AT LINE 1897 IN Siena.asm
MACRO:              0B82 DEFINED AT LINE 1859 IN Siena.asm
WAITCHAR1:          0B84 DEFINED AT LINE 1876 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
WAITCHAR3:          0B92 DEFINED AT LINE 1885 IN Siena.asm
                    > USED AT LINE 1857 IN Siena.asm
WAITCHAR4:          0BA8 DEFINED AT LINE 1901 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
NEXT:               0BB0 DEFINED AT LINE 1907 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 831 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1913 IN Siena.asm
NEXT1:              0BBF DEFINED AT LINE 1920 IN Siena.asm
                    > USED AT LINE 1914 IN Siena.asm
ESCAPE:             0BCA DEFINED AT LINE 1941 IN Siena.asm
                    > USED AT LINE 1922 IN Siena.asm
CLEAR:              0BCE DEFINED AT LINE 1947 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
EXIT:               0BDC DEFINED AT LINE 1956 IN Siena.asm
                    > USED AT LINE 1924 IN Siena.asm
EXEC:               0BF1 DEFINED AT LINE 1978 IN Siena.asm
                    > USED AT LINE 548 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0C09 DEFINED AT LINE 1992 IN Siena.asm
                    > USED AT LINE 1982 IN Siena.asm
CALL:               0C0B DEFINED AT LINE 1997 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
CALL1:              0C0C DEFINED AT LINE 1999 IN Siena.asm
                    > USED AT LINE 2022 IN Siena.asm
CALL2:              0C1E DEFINED AT LINE 2010 IN Siena.asm
                    > USED AT LINE 2002 IN Siena.asm
DOCLOSURE:          0C20 DEFINED AT LINE 2015 IN Siena.asm
DOVAR:              0C29 DEFINED AT LINE 2026 IN Siena.asm
DOCONST:            0C2B DEFINED AT LINE 2031 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1819 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1672 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 661 IN Siena.asm
                    > USED AT LINE 677 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
                    > USED AT LINE 1953 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1902 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1834 IN Siena.asm
                    > USED AT LINE 1877 IN Siena.asm
                    > USED AT LINE 1886 IN Siena.asm
                    > USED AT LINE 1903 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1678 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2433S43:  4093 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2434S43:  412F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2435S43:  41D9 DEFINED AT LINE 34
                    > USED AT LINE 10
