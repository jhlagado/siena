0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 61 05               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODES:      
0200   4F                     DB   lsb(inv_)   ;    !
0201   7A                     DB   lsb(nop_)   ;    "
0202   03                     DB   lsb(hexnum_)   ;    #
0203   06                     DB   lsb(arg_)   ;    $
0204   CE                     DB   lsb(mod_)   ;    %
0205   32                     DB   lsb(and_)   ;    &
0206   09                     DB   lsb(strDef_)   ;    '
0207   20                     DB   lsb(block_)   ;    (
0208   23                     DB   lsb(blockend_)   ;    )
0209   77                     DB   lsb(mul_)   ;    *
020A   54                     DB   lsb(add_)   ;    +
020B   7A                     DB   lsb(nop_)   ;    ,
020C   96                     DB   lsb(sub_)   ;    -
020D   15                     DB   lsb(dot_)   ;    .
020E   DA                     DB   lsb(div_)   ;    /	
020F   00                     DB   lsb(num_)   ;    0
0210   00                     DB   lsb(num_)   ;    1
0211   00                     DB   lsb(num_)   ;    2
0212   00                     DB   lsb(num_)   ;    3
0213   00                     DB   lsb(num_)   ;    4
0214   00                     DB   lsb(num_)   ;    5
0215   00                     DB   lsb(num_)   ;    6
0216   00                     DB   lsb(num_)   ;    7
0217   00                     DB   lsb(num_)   ;    8
0218   00                     DB   lsb(num_)   ;    9
0219   7A                     DB   lsb(nop_)   ;    :
021A   7A                     DB   lsb(nop_)   ;    ;
021B   AF                     DB   lsb(lt_)   ;    <
021C   9E                     DB   lsb(eq_)   ;    =
021D   AB                     DB   lsb(gt_)   ;    >
021E   7A                     DB   lsb(nop_)   ;    ?
021F   67                     DB   lsb(fetch_)   ;    @
0220   2F                     DB   lsb(ident_)   ;    A
0221   2F                     DB   lsb(ident_)   ;    B
0222   2F                     DB   lsb(ident_)   ;    C
0223   2F                     DB   lsb(ident_)   ;    D
0224   2F                     DB   lsb(ident_)   ;    E
0225   2F                     DB   lsb(ident_)   ;    F
0226   2F                     DB   lsb(ident_)   ;    G
0227   2F                     DB   lsb(ident_)   ;    h
0228   2F                     DB   lsb(ident_)   ;    I
0229   2F                     DB   lsb(ident_)   ;    J
022A   2F                     DB   lsb(ident_)   ;    K
022B   2F                     DB   lsb(ident_)   ;    L
022C   2F                     DB   lsb(ident_)   ;    M
022D   2F                     DB   lsb(ident_)   ;    N
022E   2F                     DB   lsb(ident_)   ;    O
022F   2F                     DB   lsb(ident_)   ;    p
0230   2F                     DB   lsb(ident_)   ;    Q
0231   2F                     DB   lsb(ident_)   ;    R
0232   2F                     DB   lsb(ident_)   ;    S
0233   2F                     DB   lsb(ident_)   ;    T
0234   2F                     DB   lsb(ident_)   ;    U
0235   2F                     DB   lsb(ident_)   ;    V
0236   2F                     DB   lsb(ident_)   ;    W
0237   2F                     DB   lsb(ident_)   ;    X
0238   2F                     DB   lsb(ident_)   ;    Y
0239   2F                     DB   lsb(ident_)   ;    Z
023A   29                     DB   lsb(array_)   ;    [
023B   7A                     DB   lsb(nop_)   ;    \
023C   2C                     DB   lsb(arrayEnd_)   ;    ]
023D   46                     DB   lsb(xor_)   ;    ^
023E   2F                     DB   lsb(ident_)   ;    _
023F   26                     DB   lsb(char_)   ;    `    	
0240   2F                     DB   lsb(ident_)   ;    a
0241   2F                     DB   lsb(ident_)   ;    b
0242   2F                     DB   lsb(ident_)   ;    c
0243   2F                     DB   lsb(ident_)   ;    d
0244   2F                     DB   lsb(ident_)   ;    e
0245   2F                     DB   lsb(ident_)   ;    f
0246   2F                     DB   lsb(ident_)   ;    g
0247   2F                     DB   lsb(ident_)   ;    h
0248   2F                     DB   lsb(ident_)   ;    i
0249   2F                     DB   lsb(ident_)   ;    j
024A   2F                     DB   lsb(ident_)   ;    k
024B   2F                     DB   lsb(ident_)   ;    l
024C   2F                     DB   lsb(ident_)   ;    m
024D   2F                     DB   lsb(ident_)   ;    n
024E   2F                     DB   lsb(ident_)   ;    o
024F   2F                     DB   lsb(ident_)   ;    p
0250   2F                     DB   lsb(ident_)   ;    q
0251   2F                     DB   lsb(ident_)   ;    r
0252   2F                     DB   lsb(ident_)   ;    s
0253   2F                     DB   lsb(ident_)   ;    t
0254   2F                     DB   lsb(ident_)   ;    u
0255   2F                     DB   lsb(ident_)   ;    v
0256   2F                     DB   lsb(ident_)   ;    w
0257   2F                     DB   lsb(ident_)   ;    x
0258   2F                     DB   lsb(ident_)   ;    y
0259   2F                     DB   lsb(ident_)   ;    z
025A   0F                     DB   lsb(lambda_)   ;    {
025B   3D                     DB   lsb(or_)   ;    |
025C   12                     DB   lsb(lambdaEnd_)   ;    }
025D   7A                     DB   lsb(nop_)   ;    ~
025E   7A                     DB   lsb(nop_)   ;    DEL	
025F                             ; ctrlCodes:
025F                             ;     DB lsb(EMPTY)               ; NUL ^@
025F                             ;     DB lsb(EMPTY)               ; SOH ^a  1
025F                             ;     DB lsb(EMPTY)               ; STX ^b  2
025F                             ;     DB lsb(EMPTY)               ; ETX ^c  3
025F                             ;     DB lsb(EMPTY)               ; EOT ^d  4
025F                             ;     DB lsb(EMPTY)               ; ENQ ^e  5
025F                             ;     DB lsb(EMPTY)               ; ACK ^F  6
025F                             ;     DB lsb(EMPTY)               ; BEL ^G  7
025F                             ;     DB lsb(EMPTY)               ; BS  ^h  8
025F                             ;     DB lsb(EMPTY)               ; TAB ^I  9
025F                             ;     DB lsb(EMPTY)               ; LF  ^J 10
025F                             ;     DB lsb(EMPTY)               ; VT  ^K 11
025F                             ;     DB lsb(EMPTY)               ; FF  ^l 12
025F                             ;     DB lsb(EMPTY)               ; CR  ^m 13
025F                             ;     DB lsb(EMPTY)               ; SO  ^N 14
025F                             ;     DB lsb(EMPTY)               ; SI  ^O 15
025F                             ;     DB lsb(EMPTY)               ; DLE ^p 16
025F                             ;     DB lsb(EMPTY)               ; ^Q
025F                             ;     DB lsb(EMPTY)               ; ^R
025F                             ;     DB lsb(EMPTY)               ; ^S
025F                             ;     DB lsb(EMPTY)               ; ^T
025F                             ;     DB lsb(EMPTY)               ; ^U
025F                             ;     DB lsb(EMPTY)               ; ^V
025F                             ;     DB lsb(EMPTY)               ; ^W
025F                             ;     DB lsb(EMPTY)               ; ^X
025F                             ;     DB lsb(EMPTY)               ; ^Y
025F                             ;     DB lsb(EMPTY)               ; ^Z
025F                             ;     DB lsb(EMPTY)               ; ^[
025F                             ;     DB lsb(EMPTY)               ; ^\
025F                             ;     DB lsb(EMPTY)               ; ^]
025F                             ;     DB lsb(EMPTY)               ; ^^
025F                             ;     DB lsb(EMPTY)               ; ^_
025F                NEXT:        
025F   03                     INC   bc   ; Increment the IP
0260   0A                     LD   a,(bc)   ; Get the next character and dispatch
0261   D6 21                  SUB   " " + 1   ; whitespace?
0263   38 07                  JR   c,next1   
0265   6F                     LD   l,a   ; index into table
0266   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0268   6E                     LD   l,(hl)   ; get low jump address
0269   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
026B   E9                     JP   (hl)   ; Jump to routine
026C                NEXT1:       
026C   FE DF                  CP   NULL - (" " + 1)   ; is it end of text?
026E   28 0F                  JR   z,exit   
0270   FE E2                  CP   ENDTEXT - (" " + 1)   ; is it end of text?
0272   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0274                ETX:         
0274   21 00 E6               LD   hl,-DSTACK   
0277   39                     ADD   hl,sp   
0278   30 03                  JR   nc,etx1   
027A   31 00 1A               LD   sp,DSTACK   
027D                ETX1:        
027D   18 2B                  JR   interpret   
027F                EXIT:        
027F   50 59                  LD   de,bc   ; address of code after exit opcode
0281   13                     INC   de   
0282   D9                     EXX      
0283   C1                     POP   bc   ; bc = last result
0284   FD 54                  LD   d,iyh   ; de = BP
0286   FD 5D                  LD   e,iyl   
0288   EB                     EX   de,hl   ; hl = BP, de = result
0289   F9                     LD   sp,hl   ; sp = BP
028A   D9                     EXX      
028B   E1                     POP   hl   ; hl = old BP
028C   C1                     POP   bc   ; pop SCP (discard)
028D   C1                     POP   bc   ; bc = IP
028E   F9                     LD   sp,hl   ; sp = old BP
028F   D9                     EXX      
0290   C5                     PUSH   bc   ; push result
0291   D9                     EXX      
0292   EB                     EX   de,hl   
0293   E9                     JP   (hl)   
0294                START:       
0294   31 00 1A               LD   sp,DSTACK   ; start of Siena
0297   CD 61 05               CALL   init   ; setups
029A   CD 51 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
029D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02AA                INTERPRET:      
02AA   CD 48 05               CALL   prompt   
02AD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02B0   ED 43 82 1B            LD   (vTIBPtr),bc   
02B4                INTERPRET2:      ; calc nesting (a macro might have changed it)
02B4   1E 00                  LD   e,0   ; initilize nesting value
02B6   C5                     PUSH   bc   ; save offset into TIB,
02B7                             ; bc is also the count of chars in TIB
02B7   21 00 18               LD   hl,TIB   ; hl is start of TIB
02BA   18 06                  JR   interpret4   
02BC                INTERPRET3:      
02BC   7E                     LD   a,(hl)   ; a = char in TIB
02BD   23                     INC   hl   ; inc pointer into TIB
02BE   0B                     DEC   bc   ; dec count of chars in TIB
02BF   CD 76 07               CALL   nesting   ; update nesting value
02C2                INTERPRET4:      
02C2   79                     LD   a,c   ; is count zero?
02C3   B0                     OR   b   
02C4   20 F6                  JR   nz,interpret3   ; if not loop
02C6   C1                     POP   bc   ; restore offset into TIB
02C7                WAITCHAR:      
02C7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02CA   FE 20                  CP   $20   ; compare to space
02CC   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02CE   FE 00                  CP   $0   ; is it end of string? null end of string
02D0   28 2A                  JR   z,waitchar4   
02D2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02D4   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02D6                MACRO:       
02D6                             ;     ld (vTIBPtr),bc
02D6                             ;     ld hl,ctrlCodes
02D6                             ;     add a,l			            ; look up key of macros
02D6                             ;     ld l,a
02D6                             ;     ld e,(hl)
02D6                             ;     ld a,e
02D6                             ;     or a
02D6                             ;     jr z,macro1
02D6                             ;     ld d,msb(macros)
02D6                             ;     push de
02D6                             ;     call exec		            ; Siena exec_ operation and jump to it
02D6                             ;     .cstr "ca"
02D6                             ; macro1:
02D6                             ;     ld bc,(vTIBPtr)
02D6   18 DC                  JR   interpret2   
02D8                WAITCHAR1:      
02D8   21 00 18               LD   hl,TIB   
02DB   09                     ADD   hl,bc   
02DC   77                     LD   (hl),a   ; store the character in textbuf
02DD   03                     INC   bc   
02DE   CD 85 00               CALL   putchar   ; echo character to screen
02E1   CD 76 07               CALL   nesting   
02E4   18 E1                  JR   waitchar   ; wait for next character
02E6                WAITCHAR3:      
02E6   21 00 18               LD   hl,TIB   
02E9   09                     ADD   hl,bc   
02EA   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02EC   23                     INC   hl   
02ED   36 0A                  LD   (hl),"\n"   
02EF   23                     INC   hl   
02F0   03                     INC   bc   
02F1   03                     INC   bc   
02F2   CD 5A 05               CALL   crlf   ; echo character to screen
02F5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02F6   B7                     OR   a   
02F7   20 CE                  JR   nz,waitchar   
02F9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02FB   03                     INC   bc   
02FC                WAITCHAR4:      
02FC   ED 43 82 1B            LD   (vTIBPtr),bc   
0300   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0303   0B                     DEC   bc   
0304                             ; **********************************************************************			
0304                             ; Page 4 primitive routines
0304                             ; **********************************************************************
0304                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 9D 06               JP   num   
0403                HEXNUM_:      
0403   C3 CD 06               JP   hexnum   
0406                ARG_:        
0406   C3 79 08               JP   arg   
0409                STRDEF_:      
0409   C3 A2 07               JP   strDef   
040C                NEWADD2_:      
040C   C3 A9 08               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 E5 07               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 1F 08               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD EA 06               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   DD E9                  JP   (ix)   
0420                BLOCK_:      
0420   C3 33 08               JP   block   
0423                BLOCKEND_:      
0423   C3 65 08               JP   blockend   
0426                CHAR_:       
0426   C3 BB 07               JP   char   
0429                ARRAY_:      
0429   C3 4E 09               JP   array   
042C                ARRAYEND_:      
042C   C3 60 09               JP   arrayEnd   
042F                IDENT_:      
042F   C3 6A 0A               JP   ident   
0432                AND_:        
0432   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0433   E1                     POP   hl   
0434   7B                     LD   a,e   
0435   A5                     AND   l   
0436   6F                     LD   l,a   
0437   7A                     LD   a,d   
0438   A4                     AND   h   
0439                AND1:        
0439   67                     LD   h,a   
043A   E5                     PUSH   hl   
043B   DD E9                  JP   (ix)   
043D                OR_:         
043D   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
043E   E1                     POP   hl   
043F   7B                     LD   a,e   
0440   B5                     OR   l   
0441   6F                     LD   l,a   
0442   7A                     LD   a,d   
0443   B4                     OR   h   
0444   18 F3                  JR   and1   
0446                XOR_:        
0446   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0447                XOR1:        
0447   E1                     POP   hl   
0448   7B                     LD   a,e   
0449   AD                     XOR   l   
044A   6F                     LD   l,a   
044B   7A                     LD   a,d   
044C   AC                     XOR   h   
044D   18 EA                  JR   and1   
044F                INV_:        ; Bitwise INVert the top member of the stack
044F   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0452   18 F3                  JR   xor1   
0454                ADD_:        ; add the top 2 members of the stack
0454   D1                     POP   de   
0455   E1                     POP   hl   
0456   19                     ADD   hl,de   
0457   E5                     PUSH   hl   
0458   DD E9                  JP   (ix)   
045A                HDOT_:       ; print hexadecimal
045A   E1                     POP   hl   
045B   CD 32 07               CALL   prthex   
045E   C3 19 04               JP   dot2   
0461                ETX_:        
0461   C3 74 02               JP   ETX   
0464                EXIT_:       
0464   C3 7F 02               JP   exit   
0467                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0467   E1                     POP   hl   
0468                FETCH1:      
0468   5E                     LD   e,(hl)   
0469   23                     INC   hl   
046A   56                     LD   d,(hl)   
046B   D5                     PUSH   de   
046C   DD E9                  JP   (ix)   
046E                KEY_:        
046E   CD 81 00               CALL   getchar   
0471   26 00                  LD   h,0   
0473   6F                     LD   l,a   
0474   E5                     PUSH   hl   
0475   DD E9                  JP   (ix)   
0477   C3 2C 05     MUL_:     JP   mul   
047A                NOP_:        
047A   DD E9                  JP   (ix)   ; hardwire white space to always exec_ to next (important for arrays)
047C                SHL_:        
047C   E1                     POP   hl   ; Duplicate the top member of the stack
047D   29                     ADD   hl,hl   
047E   E5                     PUSH   hl   ; shift left fallthrough into add_
047F   DD E9                  JP   (ix)   
0481                             ;  Right shift } is a divide by 2		
0481                SHR_:        
0481   E1                     POP   hl   ; Get the top member of the stack
0482                SHR1:        
0482   CB 3C                  SRL   h   
0484   CB 1D                  RR   l   
0486   E5                     PUSH   hl   
0487   DD E9                  JP   (ix)   
0489                STORE_:      ; Store the value at the address placed on the top of the stack
0489   E1                     POP   hl   
048A   D1                     POP   de   
048B   73                     LD   (hl),e   
048C   23                     INC   hl   
048D   72                     LD   (hl),d   
048E   DD E9                  JP   (ix)   
0490                NEG_:        
0490   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0493   D1                     POP   de   
0494   18 02                  JR   sub2   ; use the SUBtract routine
0496                SUB_:        ; Subtract the value 2nd on stack from top of stack
0496   D1                     POP   de   
0497   E1                     POP   hl   ; Entry point for INVert
0498                SUB2:        
0498   B7                     OR   a   ; Entry point for NEGate
0499   ED 52                  SBC   hl,de   
049B   E5                     PUSH   hl   
049C   DD E9                  JP   (ix)   
049E                EQ_:         
049E   E1                     POP   hl   
049F   D1                     POP   de   
04A0   B7                     OR   a   ; reset the carry flag
04A1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A3   28 14                  JR   z,true_   
04A5                FALSE_:      
04A5   21 00 00               LD   hl,0   
04A8   E5                     PUSH   hl   
04A9   DD E9                  JP   (ix)   
04AB                GT_:         
04AB   D1                     POP   de   
04AC   E1                     POP   hl   
04AD   18 02                  JR   lt1   
04AF                LT_:         
04AF   E1                     POP   hl   
04B0   D1                     POP   de   
04B1                LT1:         
04B1   B7                     OR   a   ; reset the carry flag
04B2   ED 52                  SBC   hl,de   
04B4   28 EF                  JR   z,false_   
04B6   FA A5 04               JP   m,false_   
04B9                TRUE_:       
04B9   21 01 00               LD   hl,1   
04BC   E5                     PUSH   hl   
04BD   DD E9                  JP   (ix)   
04BF                GTE_:        
04BF   D1                     POP   de   
04C0   E1                     POP   hl   
04C1   18 02                  JR   lte1   
04C3                LTE_:        
04C3   E1                     POP   hl   
04C4   D1                     POP   de   
04C5                LTE1:        
04C5   B7                     OR   a   ; reset the carry flag
04C6   ED 52                  SBC   hl,de   
04C8   FA A5 04               JP   m,false_   
04CB   C3 FF FF               JP   true   
04CE                MOD_:        
04CE   D1                     POP   de   ; get first value
04CF   E1                     POP   hl   ; get 2nd value
04D0   C5                     PUSH   bc   ; preserve the IP
04D1   44 4D                  LD   bc,hl   
04D3   CD 96 0A               CALL   divide   
04D6   C1                     POP   bc   
04D7   E5                     PUSH   hl   ; push remainder
04D8   DD E9                  JP   (ix)   
04DA                DIV_:        
04DA   D1                     POP   de   ; get first value
04DB   E1                     POP   hl   ; get 2nd value
04DC   C5                     PUSH   bc   ; preserve the IP
04DD   44 4D                  LD   bc,hl   
04DF   CD 96 0A               CALL   divide   
04E2   22 7E 1B               LD   (vFrac),hl   
04E5   C1                     POP   bc   
04E6   D5                     PUSH   de   ; push result
04E7   DD E9                  JP   (ix)   
04E9                CFETCH_:      
04E9   E1                     POP   hl   
04EA   16 00                  LD   d,0   
04EC   5E                     LD   e,(hl)   
04ED   D5                     PUSH   de   
04EE   DD E9                  JP   (ix)   
04F0                COMMENT_:      
04F0   03                     INC   bc   ; point to next char
04F1   0A                     LD   a,(bc)   
04F2   FE 0D                  CP   "\r"   ; terminate at cr
04F4   20 FA                  JR   nz,comment_   
04F6   0B                     DEC   bc   
04F7   C3 5F 02               JP   next   
04FA                CSTORE_:      
04FA   E1                     POP   hl   
04FB   D1                     POP   de   
04FC   73                     LD   (hl),e   
04FD   DD E9                  JP   (ix)   
04FF                EMIT_:       
04FF   E1                     POP   hl   
0500   7D                     LD   a,l   
0501   CD 85 00               CALL   putchar   
0504   DD E9                  JP   (ix)   
0506                PROMPT_:      
0506   CD 48 05               CALL   prompt   
0509   DD E9                  JP   (ix)   
050B                INPORT_:      ; \<
050B   E1                     POP   hl   
050C   79                     LD   a,c   
050D   4D                     LD   c,l   
050E   ED 68                  IN   l,(c)   
0510   26 00                  LD   h,0   
0512   4F                     LD   c,a   
0513   E5                     PUSH   hl   
0514   DD E9                  JP   (ix)   
0516                NEWLN_:      
0516   CD 5A 05               CALL   crlf   
0519   DD E9                  JP   (ix)   
051B                OUTPORT_:      
051B   E1                     POP   hl   
051C   59                     LD   e,c   
051D   4D                     LD   c,l   
051E   E1                     POP   hl   
051F   ED 69                  OUT   (c),l   
0521   4B                     LD   c,e   
0522   DD E9                  JP   (ix)   
0524                PRTSTR_:      
0524                PRTSTR:      
0524   E1                     POP   hl   
0525   CD 55 05               CALL   putStr   
0528   DD E9                  JP   (ix)   
052A                CLOSURE_:      
052A                FILTER_:      
052A                GET_:        
052A                LET_:        
052A                MAP_:        
052A                PRINT_:      
052A                SCAN_:       
052A                SET_:        
052A                SHIFT_:      
052A                WHILE_:      
052A                VAR_:        
052A   DD E9                  JP   (ix)   
052C                             ;*******************************************************************
052C                             ; Page 5 primitive routines continued
052C                             ;*******************************************************************
052C                             ; ********************************************************************
052C                             ; 16-bit multiply
052C                MUL:         ;=19
052C   D1                     POP   de   ; get first value
052D   E1                     POP   hl   
052E   C5                     PUSH   bc   ; Preserve the IP
052F   44                     LD   b,h   ; bc = 2nd value
0530   4D                     LD   c,l   
0531   21 00 00               LD   hl,0   
0534   3E 10                  LD   a,16   
0536                MUL2:        
0536   29                     ADD   hl,hl   
0537   CB 13                  RL   e   
0539   CB 12                  RL   d   
053B   30 04                  JR   nc,$+6   
053D   09                     ADD   hl,bc   
053E   30 01                  JR   nc,$+3   
0540   13                     INC   de   
0541   3D                     DEC   a   
0542   20 F2                  JR   nz,mul2   
0544   C1                     POP   bc   ; Restore the IP
0545   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0546   DD E9                  JP   (ix)   
0548                             ;*******************************************************************
0548                             ; Subroutines
0548                             ;*******************************************************************
0548                PROMPT:      
0548   CD 51 07               CALL   printStr   
054B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0550   C9                     RET      
0551                PUTSTR0:      
0551   CD 85 00               CALL   putchar   
0554   23                     INC   hl   
0555                PUTSTR:      
0555   7E                     LD   a,(hl)   
0556   B7                     OR   a   
0557   20 F8                  JR   nz,putStr0   
0559   C9                     RET      
055A                             ; rpush:
055A                             ;     dec ix
055A                             ;     ld (ix+0),h
055A                             ;     dec ix
055A                             ;     ld (ix+0),l
055A                             ;     ret
055A                             ; rpop:
055A                             ;     ld l,(ix+0)
055A                             ;     inc ix
055A                             ;     ld h,(ix+0)
055A                             ;     inc ix
055A                             ; rpop2:
055A                             ;     ret
055A                CRLF:        
055A   CD 51 07               CALL   printStr   
055D   0D 0A 00               .CSTR   "\r\n"   
0560   C9                     RET      
0561                INIT:        
0561   DD 21 5F 02            LD   ix,next   
0565   FD 21 00 1A            LD   iy,DSTACK   
0569   21 80 01               LD   hl,isysVars   
056C   11 7E 1B               LD   de,sysVars   
056F   01 10 00               LD   bc,8 * 2   
0572   ED B0                  LDIR      
0574                             ; ld hl,data                  ; init namespaces to 0 using ldir
0574                             ; ld de,hl
0574                             ; inc de
0574                             ; ld (hl),0
0574                             ; ld bc,DATASIZE
0574                             ; ldir
0574   3E FF                  LD   a,UNUSED   
0576   06 00                  LD   b,0   
0578   21 00 1D               LD   hl,hashSlots   
057B                INIT1:       
057B   77                     LD   (hl),a   
057C   23                     INC   hl   
057D   10 FC                  DJNZ   init1   
057F   CD 52 0A               CALL   define   
0582   05 61 64 64 72 00      .PSTR   "addr",0   
0588   3D 0A                  DW   addr_   
058A   CD 52 0A               CALL   define   
058D   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0594   46 09                  DW   bytes   
0596   CD 52 0A               CALL   define   
0599   05 63 61 73 65 00      .PSTR   "case",0   
059F   10 09                  DW   case   
05A1   CD 52 0A               CALL   define   
05A4   04 64 65 66 00         .PSTR   "def",0   
05A9   23 0A                  DW   def   
05AB   CD 52 0A               CALL   define   
05AE   05 65 78 65 63 00      .PSTR   "exec",0   
05B4   D0 07                  DW   exec   
05B6   CD 52 0A               CALL   define   
05B9   06 66 61 6C 73 65 00   .PSTR   "false",0   
05C0   A5 04                  DW   false_   
05C2   CD 52 0A               CALL   define   
05C5   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
05CD   2A 05                  DW   filter_   
05CF   CD 52 0A               CALL   define   
05D2   04 67 65 74 00         .PSTR   "get",0   
05D7   2A 05                  DW   get_   
05D9   CD 52 0A               CALL   define   
05DC   05 68 61 73 68 00      .PSTR   "hash",0   
05E2   18 0A                  DW   hash   
05E4   CD 52 0A               CALL   define   
05E7   03 69 6E 00            .PSTR   "in",0   
05EB   94 08                  DW   in   
05ED   CD 52 0A               CALL   define   
05F0   03 69 66 00            .PSTR   "if",0   
05F4   D4 08                  DW   if   
05F6   CD 52 0A               CALL   define   
05F9   05 69 66 74 65 00      .PSTR   "ifte",0   
05FF   D9 08                  DW   ifte   
0601   CD 52 0A               CALL   define   
0604   04 6B 65 79 00         .PSTR   "key",0   
0609   6E 04                  DW   key_   
060B   CD 52 0A               CALL   define   
060E   04 6C 65 74 00         .PSTR   "let",0   
0613   2A 05                  DW   let_   
0615   CD 52 0A               CALL   define   
0618   04 6D 61 70 00         .PSTR   "map",0   
061D   2A 05                  DW   map_   
061F   CD 52 0A               CALL   define   
0622   04 6E 65 67 00         .PSTR   "neg",0   
0627   90 04                  DW   neg_   
0629   CD 52 0A               CALL   define   
062C   06 70 72 69 6E 74 00   .PSTR   "print",0   
0633   2A 05                  DW   print_   
0635   CD 52 0A               CALL   define   
0638   05 66 72 61 63 00      .PSTR   "frac",0   
063E   B3 0A                  DW   frac   
0640   CD 52 0A               CALL   define   
0643   05 73 63 61 6E 00      .PSTR   "scan",0   
0649   2A 05                  DW   scan_   
064B   CD 52 0A               CALL   define   
064E   04 73 65 74 00         .PSTR   "set",0   
0653   2A 05                  DW   set_   
0655   CD 52 0A               CALL   define   
0658   06 73 68 69 66 74 00   .PSTR   "shift",0   
065F   2A 05                  DW   shift_   
0661   CD 52 0A               CALL   define   
0664   05 73 71 72 74 00      .PSTR   "sqrt",0   
066A   B9 0A                  DW   sqrt1   
066C   CD 52 0A               CALL   define   
066F   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0677   FC 08                  DW   switch   
0679   CD 52 0A               CALL   define   
067C   05 74 72 75 65 00      .PSTR   "true",0   
0682   B9 04                  DW   true_   
0684   CD 52 0A               CALL   define   
0687   06 77 68 69 6C 65 00   .PSTR   "while",0   
068E   2A 05                  DW   while_   
0690   CD 52 0A               CALL   define   
0693   06 77 6F 72 64 73 00   .PSTR   "words",0   
069A   40 09                  DW   words   
069C   C9                     RET      
069D                NUM:         
069D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06A0   0A                     LD   a,(bc)   ; Get numeral or -
06A1   FE 2D                  CP   "-"   
06A3   20 01                  JR   nz,num0   
06A5   03                     INC   bc   ; move to next char, no flags affected
06A6                NUM0:        
06A6   08                     EX   af,af'   ; save zero flag = 0 for later
06A7                NUM1:        
06A7   0A                     LD   a,(bc)   ; read digit
06A8   D6 30                  SUB   "0"   ; less than 0?
06AA   38 13                  JR   c,num2   ; not a digit, exit loop
06AC   FE 0A                  CP   10   ; greater that 9?
06AE   30 0F                  JR   nc,num2   ; not a digit, exit loop
06B0   03                     INC   bc   ; inc IP
06B1   54 5D                  LD   de,hl   ; multiply hl * 10
06B3   29                     ADD   hl,hl   
06B4   29                     ADD   hl,hl   
06B5   19                     ADD   hl,de   
06B6   29                     ADD   hl,hl   
06B7   85                     ADD   a,l   ; add digit in a to hl
06B8   6F                     LD   l,a   
06B9   3E 00                  LD   a,0   
06BB   8C                     ADC   a,h   
06BC   67                     LD   h,a   
06BD   18 E8                  JR   num1   
06BF                NUM2:        
06BF   0B                     DEC   bc   
06C0   08                     EX   af,af'   ; restore zero flag
06C1   20 07                  JR   nz,num3   
06C3   EB                     EX   de,hl   ; negate the value of hl
06C4   21 00 00               LD   hl,0   
06C7   B7                     OR   a   ; jump to sub2
06C8   ED 52                  SBC   hl,de   
06CA                NUM3:        
06CA   E5                     PUSH   hl   ; Put the number on the stack
06CB   DD E9                  JP   (ix)   ; and process the next character
06CD                HEXNUM:      ; 
06CD   21 00 00               LD   hl,0   ; Clear hl to accept the number
06D0                HEXNUM1:      
06D0   03                     INC   bc   
06D1   0A                     LD   a,(bc)   ; Get the character which is a numeral
06D2   CB 77                  BIT   6,a   ; is it uppercase alpha?
06D4   28 02                  JR   z,hexnum2   ; no a decimal
06D6   D6 07                  SUB   7   ; sub 7  to make $a - $F
06D8                HEXNUM2:      
06D8   D6 30                  SUB   $30   ; Form decimal digit
06DA   DA BF 06               JP   c,num2   
06DD   FE 10                  CP   $0F+1   
06DF   D2 BF 06               JP   nc,num2   
06E2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06E3   29                     ADD   hl,hl   ; 4X
06E4   29                     ADD   hl,hl   ; 8X
06E5   29                     ADD   hl,hl   ; 16X
06E6   85                     ADD   a,l   ; add into bottom of hl
06E7   6F                     LD   l,a   ; 
06E8   18 E6                  JR   hexnum1   
06EA                PRTDEC:      ;=34 ; removes leading zeros
06EA                             ; ld a,h
06EA                             ; or l
06EA                             ; ld a, "0"
06EA                             ; jp z, putchar
06EA   CB 7C                  BIT   7,h   
06EC   28 0B                  JR   z,prtdec0   
06EE   3E 2D                  LD   a,"-"   
06F0   CD 85 00               CALL   putchar   
06F3   AF                     XOR   a   
06F4   95                     SUB   l   
06F5   6F                     LD   l,a   
06F6   9F                     SBC   a,a   
06F7   94                     SUB   h   
06F8   67                     LD   h,a   
06F9                PRTDEC0:      
06F9   C5                     PUSH   bc   
06FA   0E 00                  LD   c,0   ; leading zeros flag = false
06FC   11 F0 D8               LD   de,-10000   
06FF   CD 1B 07               CALL   prtdec1   
0702   11 18 FC               LD   de,-1000   
0705   CD 1B 07               CALL   prtdec1   
0708   11 9C FF               LD   de,-100   
070B   CD 1B 07               CALL   prtdec1   
070E   1E F6                  LD   e,-10   
0710   CD 1B 07               CALL   prtdec1   
0713   0C                     INC   c   ; flag = true for at least digit
0714   1E FF                  LD   e,-1   
0716   CD 1B 07               CALL   prtdec1   
0719   C1                     POP   bc   
071A   C9                     RET      
071B                PRTDEC1:      
071B   06 2F                  LD   b,"0"-1   
071D                PRTDEC2:      
071D   04                     INC   b   
071E   19                     ADD   hl,de   
071F   38 FC                  JR   c,prtdec2   
0721   ED 52                  SBC   hl,de   
0723   3E 30                  LD   a,"0"   
0725   B8                     CP   b   
0726   20 05                  JR   nz,prtdec3   
0728   AF                     XOR   a   
0729   B1                     OR   c   
072A   C8                     RET   z   
072B   18 01                  JR   prtdec4   
072D                PRTDEC3:      
072D   0C                     INC   c   
072E                PRTDEC4:      
072E   78                     LD   a,b   
072F   C3 85 00               JP   putchar   
0732                             ; 
0732                PRTHEX:      
0732                             ; Display hl as a 16-bit number in hex.
0732   C5                     PUSH   bc   ; preserve the IP
0733   7C                     LD   a,h   
0734   CD 3D 07               CALL   prthex2   
0737   7D                     LD   a,l   
0738   CD 3D 07               CALL   prthex2   
073B   C1                     POP   bc   
073C   C9                     RET      
073D                PRTHEX2:      
073D   4F                     LD   c,a   
073E   1F                     RRA      
073F   1F                     RRA      
0740   1F                     RRA      
0741   1F                     RRA      
0742   CD 46 07               CALL   prthex3   
0745   79                     LD   a,c   
0746                PRTHEX3:      
0746   E6 0F                  AND   0x0F   
0748   C6 90                  ADD   a,0x90   
074A   27                     DAA      
074B   CE 40                  ADC   a,0x40   
074D   27                     DAA      
074E   C3 85 00               JP   putchar   
0751                PRINTSTR:      
0751   E3                     EX   (sp),hl   ; swap			
0752   CD 55 05               CALL   putStr   
0755   23                     INC   hl   ; inc past null
0756   E3                     EX   (sp),hl   ; put it back	
0757   C9                     RET      
0758                LOOKUPREF:      
0758   16 00                  LD   d,0   
075A                LOOKUPREF0:      
075A   FE 61                  CP   "a"   
075C   30 06                  JR   nc,lookupRef2   
075E                LOOKUPREF1:      
075E   D6 61                  SUB   "a"   
0760   1E 00                  LD   e,0   
0762   18 04                  JR   lookupRef3   
0764                LOOKUPREF2:      
0764   D6 61                  SUB   "a"   
0766   1E 34                  LD   e,26*2   
0768                LOOKUPREF3:      
0768   87                     ADD   a,a   
0769   83                     ADD   a,e   
076A   21 C0 1B               LD   hl,DATA   
076D   85                     ADD   a,l   
076E   6F                     LD   l,a   
076F   3E 00                  LD   a,0   
0771   8C                     ADC   a,h   
0772   67                     LD   h,a   
0773   AF                     XOR   a   
0774   B3                     OR   e   ; sets z flag if a-z
0775   C9                     RET      
0776                             ; **************************************************************************
0776                             ; calculate nesting value
0776                             ; a is char to be tested,
0776                             ; e is the nesting value (initially 0)
0776                             ; e is increased by ( and [
0776                             ; e is decreased by ) and ]
0776                             ; e has its bit 7 toggled by `
0776                             ; limited to 127 levels
0776                             ; **************************************************************************
0776                NESTING:      
0776   FE 22                  CP   $22   ; quote char
0778   20 0A                  JR   nz,nesting1   
077A   CB 7B                  BIT   7,e   
077C   28 03                  JR   z,nesting1a   
077E   CB BB                  RES   7,e   
0780   C9                     RET      
0781                NESTING1A:      
0781   CB FB                  SET   7,e   
0783   C9                     RET      
0784                NESTING1:      
0784   CB 7B                  BIT   7,e   
0786   C0                     RET   nz   
0787   FE 7B                  CP   "{"   
0789   28 08                  JR   z,nesting2   
078B   FE 5B                  CP   "["   
078D   28 04                  JR   z,nesting2   
078F   FE 28                  CP   "("   
0791   20 02                  JR   nz,nesting3   
0793                NESTING2:      
0793   1C                     INC   e   
0794   C9                     RET      
0795                NESTING3:      
0795   FE 7D                  CP   "}"   
0797   28 07                  JR   z,nesting4   
0799   FE 5D                  CP   "]"   
079B   28 03                  JR   z,nesting4   
079D   FE 29                  CP   ")"   
079F   C0                     RET   nz   
07A0                NESTING4:      
07A0   1D                     DEC   e   
07A1   C9                     RET      
07A2                             ; 
07A2                STRDEF:      
07A2   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
07A6   D5                     PUSH   de   ; save start of string
07A7   03                     INC   bc   ; point to next char
07A8   18 03                  JR   strDef2   
07AA                STRDEF1:      
07AA   12                     LD   (de),a   
07AB   13                     INC   de   ; increase count
07AC   03                     INC   bc   ; point to next char
07AD                STRDEF2:      
07AD   0A                     LD   a,(bc)   
07AE   FE 27                  CP   "'"   ; ' is the string terminator
07B0   20 F8                  JR   nz,strDef1   
07B2   AF                     XOR   a   ; write null to terminate string
07B3   12                     LD   (de),a   
07B4   13                     INC   de   
07B5   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
07B9   DD E9                  JP   (ix)   
07BB                CHAR:        
07BB   21 00 00               LD   hl,0   ; if `` is empty
07BE                CHAR1:       
07BE   03                     INC   bc   ; point to next char
07BF   0A                     LD   a,(bc)   
07C0   FE 60                  CP   "`"   ; ` is the string terminator
07C2   28 09                  JR   z,char3   
07C4   FE 5C                  CP   $5c   ; \ is the escape
07C6   20 02                  JR   nz,char2   
07C8   03                     INC   bc   
07C9   0A                     LD   a,(bc)   
07CA                CHAR2:       
07CA   6F                     LD   l,a   
07CB   18 F1                  JR   char1   
07CD                CHAR3:       
07CD   E5                     PUSH   hl   
07CE                             ; dec bc
07CE   DD E9                  JP   (ix)   
07D0                EXEC:        ; execute lambda at pointer
07D0   E1                     POP   hl   ; hl = pointer to lambda
07D1                EXEC1:       
07D1   7C                     LD   a,h   ; skip if destination address is null
07D2   B5                     OR   l   
07D3   28 0E                  JR   z,exec3   
07D5                EXEC2:       
07D5   C5                     PUSH   bc   ; push IP
07D6   FD E5                  PUSH   iy   ; push SCP (scope pointer)
07D8   FD E5                  PUSH   iy   ; push BP
07DA   FD 21 00 00            LD   iy,0   ; BP = SP
07DE   FD 39                  ADD   iy,sp   
07E0   44 4D                  LD   bc,hl   ; IP = pointer to lambda
07E2   0B                     DEC   bc   ; dec to prepare for next routine
07E3                EXEC3:       
07E3   DD E9                  JP   (ix)   
07E5                LAMBDA:      
07E5   03                     INC   bc   
07E6   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
07E9   E5                     PUSH   hl   
07EA   16 01                  LD   d,1   ; nesting: count first parenthesis
07EC                LAMBDA1:      ; Skip to end of definition
07EC   0A                     LD   a,(bc)   ; Get the next character
07ED   03                     INC   bc   ; Point to next character
07EE   77                     LD   (hl),a   
07EF   23                     INC   hl   
07F0   FE 27                  CP   "'"   
07F2   28 1C                  JR   z,lambda2   
07F4   FE 28                  CP   "("   
07F6   28 18                  JR   z,lambda2   
07F8   FE 29                  CP   ")"   
07FA   28 14                  JR   z,lambda2   
07FC   FE 7B                  CP   "{"   
07FE   28 10                  JR   z,lambda2   
0800   FE 7D                  CP   "}"   ; Is it the end of the definition?
0802   28 0C                  JR   z,lambda2   
0804   FE 5B                  CP   "["   
0806   28 08                  JR   z,lambda2   
0808   FE 5D                  CP   "]"   
080A   28 04                  JR   z,lambda2   
080C   FE 60                  CP   "`"   
080E   20 DC                  JR   nz,lambda1   
0810                LAMBDA2:      
0810   14                     INC   d   
0811   CB 42                  BIT   0,d   ; balanced?
0813   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0815   FE 7D                  CP   "}"   ; Is it the end of the definition?
0817   20 D3                  JR   nz,lambda1   ; get the next element
0819   0B                     DEC   bc   
081A   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
081D   DD E9                  JP   (ix)   
081F                LAMBDAEND:      
081F   E1                     POP   hl   ; hl = last result
0820   FD 54                  LD   d,iyh   ; de = BP
0822   FD 5D                  LD   e,iyl   
0824   EB                     EX   de,hl   ; hl = BP, de = result
0825   F9                     LD   sp,hl   ; sp = BP
0826   E1                     POP   hl   ; hl = old BP
0827   C1                     POP   bc   ; pop scope ptr (discard)
0828   C1                     POP   bc   ; bc = IP
0829   F9                     LD   sp,hl   ; sp = old BP
082A   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
082E   FD 39                  ADD   iy,sp   
0830   D5                     PUSH   de   ; push result
0831   DD E9                  JP   (ix)   
0833                BLOCK:       
0833   03                     INC   bc   
0834   C5                     PUSH   bc   ; return first opcode of block
0835   16 01                  LD   d,1   ; nesting: count first parenthesis
0837                BLOCK1:      ; Skip to end of definition
0837   0A                     LD   a,(bc)   ; Get the next character
0838   03                     INC   bc   ; Point to next character
0839   FE 27                  CP   "'"   
083B   28 1C                  JR   z,block2   
083D   FE 28                  CP   "("   
083F   28 18                  JR   z,block2   
0841   FE 29                  CP   ")"   
0843   28 14                  JR   z,block2   
0845   FE 7B                  CP   "{"   
0847   28 10                  JR   z,block2   
0849   FE 7D                  CP   "}"   
084B   28 0C                  JR   z,block2   
084D   FE 5B                  CP   "["   
084F   28 08                  JR   z,block2   
0851   FE 5D                  CP   "]"   
0853   28 04                  JR   z,block2   
0855   FE 60                  CP   "`"   
0857   20 DE                  JR   nz,block1   
0859                BLOCK2:      
0859   14                     INC   d   
085A   CB 42                  BIT   0,d   ; balanced?
085C   20 D9                  JR   nz,block1   ; not balanced, get the next element
085E   FE 29                  CP   ")"   ; Is it the end of the block?
0860   20 D5                  JR   nz,block1   ; get the next element
0862   0B                     DEC   bc   
0863   DD E9                  JP   (ix)   
0865                BLOCKEND:      
0865   E1                     POP   hl   ; hl = last result
0866   FD 54                  LD   d,iyh   ; de = BP
0868   FD 5D                  LD   e,iyl   
086A   EB                     EX   de,hl   ; hl = BP, de = result
086B   F9                     LD   sp,hl   ; sp = BP
086C   E1                     POP   hl   ; hl = old BP
086D   C1                     POP   bc   ; pop SCP (discard)
086E   C1                     POP   bc   ; bc = IP
086F   F9                     LD   sp,hl   ; sp = old BP
0870   FD 21 00 00            LD   iy,0   ; iy = sp
0874   FD 39                  ADD   iy,sp   
0876   D5                     PUSH   de   ; push result
0877   DD E9                  JP   (ix)   
0879                ARG:         
0879   03                     INC   bc   ; get next char
087A   0A                     LD   a,(bc)   
087B   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
087D   E6 07                  AND   $07   ; mask
087F   87                     ADD   a,a   ; double
0880   6F                     LD   l,a   ; hl = offset into args
0881   26 00                  LD   h,0   
0883   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0886   FD 56 03               LD   d,(iy+3)   
0889   EB                     EX   de,hl   ; hl = SCP - offset
088A   B7                     OR   a   
088B   ED 52                  SBC   hl,de   
088D   2B                     DEC   hl   ; de = arg
088E   56                     LD   d,(hl)   
088F   2B                     DEC   hl   
0890   5E                     LD   e,(hl)   
0891   D5                     PUSH   de   ; push arg
0892   DD E9                  JP   (ix)   
0894                             ; 
0894                IN:          
0894   E1                     POP   hl   ; hl = string
0895   D1                     POP   de   ; de = char
0896                IN1:         
0896   7E                     LD   a,(hl)   
0897   23                     INC   hl   
0898   FE 00                  CP   0   ; is end of string
089A   28 04                  JR   z,in2   
089C   BB                     CP   e   
089D   20 F7                  JR   nz,in1   
089F   B7                     OR   a   ; a is never 0, or a resets zero flag
08A0                IN2:         
08A0   21 00 00               LD   hl,0   ; hl = result
08A3   28 01                  JR   z,in3   
08A5   2B                     DEC   hl   ; if nz de = $ffff
08A6                IN3:         
08A6   E5                     PUSH   hl   ; push result
08A7   DD E9                  JP   (ix)   
08A9                NEWADD2:      
08A9   C5                     PUSH   bc   ; push IP
08AA   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08AD   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08B0   D5                     PUSH   de   ; push SCP
08B1   FD E5                  PUSH   iy   ; push base pointer
08B3   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
08B7   FD 39                  ADD   iy,sp   ; 
08B9   FD 56 FF               LD   d,(iy-1)   
08BC   FD 5E FE               LD   e,(iy-2)   
08BF   FD 66 FD               LD   h,(iy-3)   
08C2   FD 6E FC               LD   l,(iy-4)   
08C5   19                     ADD   hl,de   ; hl = hl + de
08C6   EB                     EX   de,hl   ; de = result
08C7   E1                     POP   hl   ; hl = old BP
08C8   C1                     POP   bc   ; pop SCP (discard)
08C9   C1                     POP   bc   ; bc = IP
08CA   F9                     LD   sp,hl   ; sp = old BP
08CB   FD 21 00 00            LD   iy,0   
08CF   FD 39                  ADD   iy,sp   
08D1   D5                     PUSH   de   ; push result
08D2   DD E9                  JP   (ix)   
08D4                IF:          
08D4   11 00 00               LD   de,0   ; null pointer for else
08D7   18 01                  JR   ifte1   
08D9                IFTE:        
08D9   D1                     POP   de   ; de = else
08DA                IFTE1:       
08DA   E1                     POP   hl   ; hl = then
08DB   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
08DC   23                     INC   hl   ; check for true
08DD   7C                     LD   a,h   
08DE   B5                     OR   l   
08DF   E1                     POP   hl   ; hl = then
08E0   28 01                  JR   z,ifte2   
08E2   EB                     EX   de,hl   ; condition = false, hl = else
08E3                IFTE2:       
08E3   7C                     LD   a,h   ; check if hl is null
08E4   B5                     OR   l   
08E5   28 13                  JR   z,ifte3   
08E7   C5                     PUSH   bc   ; push IP
08E8   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08EB   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08EE   D5                     PUSH   de   ; push SCP
08EF   FD E5                  PUSH   iy   ; push BP
08F1   FD 21 00 00            LD   iy,0   ; iy = sp
08F5   FD 39                  ADD   iy,sp   
08F7   44 4D                  LD   bc,hl   ; IP = then
08F9   0B                     DEC   bc   
08FA                IFTE3:       
08FA   DD E9                  JP   (ix)   
08FC                SWITCH:      
08FC   E1                     POP   hl   ; get condition from stack
08FD   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
08FE   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0901   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0904   D5                     PUSH   de   ; push SCP
0905   FD E5                  PUSH   iy   ; push BP
0907   FD 21 00 00            LD   iy,0   ; BP = SP
090B   FD 39                  ADD   iy,sp   
090D   E5                     PUSH   hl   ; push condition as first arg of new frame
090E   DD E9                  JP   (ix)   
0910                CASE:        
0910   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0913   FD 6E FE               LD   l,(iy-2)   
0916   23                     INC   hl   ; hl -= 1 index from second arg
0917   29                     ADD   hl,hl   ; hl *= 2 word offset
0918   FD 54                  LD   d,iyh   ; hl = BP, de = offset
091A   FD 5D                  LD   e,iyl   
091C   EB                     EX   de,hl   
091D   B7                     OR   a   ; hl = BP - offset
091E   ED 52                  SBC   hl,de   
0920   54 5D                  LD   de,hl   ; save arg ptr
0922   2B                     DEC   hl   ; hl += 2
0923   2B                     DEC   hl   
0924   B7                     OR   a   ; arg ptr - stack pointer
0925   ED 72                  SBC   hl,sp   
0927   30 03                  JR   nc,case0   
0929   D1                     POP   de   ; pop last arg
092A   18 05                  JR   case1   
092C                CASE0:       
092C   EB                     EX   de,hl   
092D   2B                     DEC   hl   ; de = arg
092E   56                     LD   d,(hl)   
092F   2B                     DEC   hl   
0930   5E                     LD   e,(hl)   
0931                CASE1:       
0931   7A                     LD   a,d   ; is arg == null ? then skip
0932   B3                     OR   e   
0933   28 09                  JR   z,case2   
0935   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0938   FD 70 05               LD   (iy+5),b   
093B   42 4B                  LD   bc,de   ; IP = arg
093D   0B                     DEC   bc   
093E                CASE2:       
093E   DD E9                  JP   (ix)   
0940                WORDS:       
0940   21 02 00               LD   hl,2   
0943   C3 46 09               JP   bytes   
0946                BYTES:       
0946   21 01 00               LD   hl,1   
0949                BYTES1:      
0949   22 80 1B               LD   (vDataWidth),hl   
094C   DD E9                  JP   (ix)   
094E                ARRAY:       
094E   C5                     PUSH   bc   ; create stack frame, push IP
094F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0952   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0955   D5                     PUSH   de   ; push SCP
0956   FD E5                  PUSH   iy   ; push BP
0958   FD 21 00 00            LD   iy,0   ; BP = SP
095C   FD 39                  ADD   iy,sp   
095E   DD E9                  JP   (ix)   
0960                ARRAYEND:      
0960   FD 54                  LD   d,iyh   ; de = BP
0962   FD 5D                  LD   e,iyl   
0964   62 6B                  LD   hl,de   ; hl = de
0966   B7                     OR   a   
0967   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0969   C5                     PUSH   bc   ; bc' = IP
096A   D9                     EXX      
096B   C1                     POP   bc   
096C   D9                     EXX      
096D   44 4D                  LD   bc,hl   ; bc = count
096F   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0972   71                     LD   (hl),c   ; write count before array data
0973   23                     INC   hl   
0974   70                     LD   (hl),b   
0975   23                     INC   hl   
0976   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0977   D9                     EXX      
0978   E1                     POP   hl   ; hl' = ptr to array (index 0)
0979   D9                     EXX      
097A   3A 80 1B               LD   a,(vDataWidth)   
097D   FE 01                  CP   1   ; byte?
097F   20 0D                  JR   nz,arrayEnd2   
0981   EB                     EX   de,hl   
0982                ARRAYEND1:      
0982   1B                     DEC   de   
0983   1B                     DEC   de   
0984   1A                     LD   a,(de)   
0985   77                     LD   (hl),a   
0986   23                     INC   hl   
0987   0B                     DEC   bc   
0988   79                     LD   a,c   
0989   B0                     OR   b   
098A   20 F6                  JR   nz,arrayEnd1   
098C   18 10                  JR   arrayEnd4   
098E                ARRAYEND2:      
098E   1B                     DEC   de   
098F   1A                     LD   a,(de)   
0990   08                     EX   af,af'   
0991   1B                     DEC   de   
0992   1A                     LD   a,(de)   
0993   77                     LD   (hl),a   
0994   23                     INC   hl   
0995   08                     EX   af,af'   
0996   1A                     LD   a,(de)   
0997   77                     LD   (hl),a   
0998   23                     INC   hl   
0999   0B                     DEC   bc   
099A   79                     LD   a,c   
099B   B0                     OR   b   
099C   20 F0                  JR   nz,arrayEnd2   
099E                ARRAYEND4:      
099E   FD 54                  LD   d,iyh   ; de = BP
09A0   FD 5D                  LD   e,iyl   
09A2   EB                     EX   de,hl   ; hl = BP, de = result
09A3   F9                     LD   sp,hl   ; sp = BP
09A4   E1                     POP   hl   ; hl = old BP
09A5   C1                     POP   bc   ; pop SCP (discard)
09A6   C1                     POP   bc   ; bc = IP
09A7   F9                     LD   sp,hl   ; sp = old BP
09A8   FD 21 00 00            LD   iy,0   ; iy = sp
09AC   FD 39                  ADD   iy,sp   
09AE   D9                     EXX      
09AF   E5                     PUSH   hl   
09B0   C5                     PUSH   bc   
09B1   D9                     EXX      
09B2   C1                     POP   bc   
09B3   DD E9                  JP   (ix)   
09B5                             ; updateEntry:
09B5                             ;     ld bc,
09B5                             ;     pop hl                          ; pointer to args
09B5                             ;     ld e,(hl)
09B5                             ;     ret
09B5                             ; hash C-string in BC, result in HL
09B5                HASHSTR:      
09B5   21 00 00               LD   hl,0   
09B8                HASHSTR1:      
09B8   0A                     LD   a,(bc)   ; load next char
09B9   03                     INC   bc   
09BA   FE 00                  CP   0   ; null?
09BC   C8                     RET   z   
09BD                HASHSTR2:      
09BD   16 00                  LD   d,0   
09BF   5F                     LD   e,a   
09C0   19                     ADD   hl,de   
09C1   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
09C3   29                     ADD   hl,hl   ; shift left
09C4   19                     ADD   hl,de   ; add
09C5   29                     ADD   hl,hl   ; shift left
09C6   29                     ADD   hl,hl   ; shift left
09C7   29                     ADD   hl,hl   ; shift left
09C8   29                     ADD   hl,hl   ; shift left
09C9   29                     ADD   hl,hl   ; shift left
09CA   29                     ADD   hl,hl   ; shift left
09CB   19                     ADD   hl,de   ; add
09CC   18 EA                  JR   hashStr1   
09CE                             ; add entry to hash slots and hash pointers
09CE                             ; bc = hash (b = hi, c = lo), de = addr
09CE                             ; sets carry if successful
09CE                DEFINEENTRY:      
09CE   CB 21                  SLA   c   ; lo = lo * 2
09D0   69                     LD   l,c   ; lo1 = lo
09D1   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09D3                DEFINEENTRY0:      
09D3   7E                     LD   a,(hl)   ; a = (lo1)
09D4   FE FF                  CP   UNUSED   ; is it unused?
09D6   28 12                  JR   z,defineEntry3   ; yes, add entry
09D8   79                     LD   a,c   ; a = lo
09D9   BE                     CP   (hl)   ; compare (lo1) with lo
09DA   20 06                  JR   nz,defineEntry1   ; no match loop around
09DC   2C                     INC   l   
09DD   78                     LD   a,b   ; a = hi
09DE   BE                     CP   (hl)   ; compare (lo1+1) with hi
09DF   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
09E1   2D                     DEC   l   ; restore l
09E2                DEFINEENTRY1:      
09E2   2C                     INC   l   ; try next entry
09E3   2C                     INC   l   
09E4   79                     LD   a,c   ; compare lo and lo1
09E5   BD                     CP   l   ; if equal then there's no space left, reject
09E6   20 EB                  JR   nz,defineEntry0   
09E8                DEFINEENTRY2:      
09E8   3F                     CCF      ; clear carry flag, failure
09E9   C9                     RET      
09EA                DEFINEENTRY3:      ; new entry
09EA   71                     LD   (hl),c   ; (lo1) = hash lo
09EB   23                     INC   hl   
09EC   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
09ED   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
09EF   72                     LD   (hl),d   
09F0   2B                     DEC   hl   
09F1   73                     LD   (hl),e   ; (slot + 2) = address
09F2   37                     SCF      ; set carry flag, success
09F3   C9                     RET      
09F4                             ; looks up hash and returns address
09F4                             ; bc = hash
09F4                             ; returns addr in hl, sets carry if successful
09F4                LOOKUPENTRY:      
09F4   CB 21                  SLA   c   ; lo = lo * 2
09F6   69                     LD   l,c   ; lo1 = lo
09F7   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09F9                LOOKUPENTRY0:      
09F9   7E                     LD   a,(hl)   ; a = (hl), slot
09FA   FE FF                  CP   UNUSED   ; is it unused?
09FC   28 EA                  JR   z,defineEntry2   ; yes, does not exist
09FE   79                     LD   a,c   ; a = lo
09FF   BE                     CP   (hl)   ; compare (lo1) with lo
0A00   20 06                  JR   nz,lookupEntry1   ; no match loop around
0A02   2C                     INC   l   
0A03   78                     LD   a,b   ; a = hi
0A04   BE                     CP   (hl)   ; compare (lo1+1) with hi
0A05   28 09                  JR   z,lookupEntry3   
0A07   2D                     DEC   l   
0A08                LOOKUPENTRY1:      
0A08   2C                     INC   l   
0A09   2C                     INC   l   
0A0A   79                     LD   a,c   
0A0B   BD                     CP   l   ; no space left, reject
0A0C   20 EB                  JR   nz,lookupEntry0   
0A0E                LOOKUPENTRY2:      
0A0E   3F                     CCF      ; clear carry flag, failure
0A0F   C9                     RET      
0A10                LOOKUPENTRY3:      
0A10   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0A12   56                     LD   d,(hl)   
0A13   2D                     DEC   l   ; restore l
0A14   5E                     LD   e,(hl)   ; (slot + 2) = address
0A15   EB                     EX   de,hl   
0A16   37                     SCF      
0A17   C9                     RET      
0A18                             ; str -- num
0A18                HASH:        
0A18   E1                     POP   hl   
0A19   C5                     PUSH   bc   
0A1A   44 4D                  LD   bc,hl   
0A1C   CD B5 09               CALL   hashStr   
0A1F   C1                     POP   bc   
0A20   E5                     PUSH   hl   
0A21   DD E9                  JP   (ix)   
0A23                             ; str addr -- bool
0A23                DEF:         
0A23   E1                     POP   hl   ; hl = addr
0A24   E3                     EX   (sp),hl   ; hl = str pointer (sp) = addr
0A25   C5                     PUSH   bc   
0A26   44 4D                  LD   bc,hl   
0A28   CD B5 09               CALL   hashStr   ; hl = hash
0A2B   44 4D                  LD   bc,hl   ; bc = hash
0A2D   E1                     POP   hl   ; hl = old BC
0A2E   E3                     EX   (sp),hl   ; hl = addr
0A2F   EB                     EX   de,hl   ; de = addr
0A30   CD CE 09               CALL   defineEntry   
0A33   21 00 00               LD   hl,0   ; if c return TRUE
0A36   30 01                  JR   nc,def1   
0A38   2B                     DEC   hl   
0A39                DEF1:        
0A39   C1                     POP   bc   
0A3A   E5                     PUSH   hl   
0A3B   DD E9                  JP   (ix)   
0A3D                             ; str -- addr
0A3D                ADDR_:       
0A3D   E1                     POP   hl   ; hl = str pointer
0A3E   C5                     PUSH   bc   
0A3F   44 4D                  LD   bc,hl   
0A41   CD B5 09               CALL   hashStr   ; hl = hash
0A44   44 4D                  LD   bc,hl   
0A46   CD F4 09               CALL   lookupEntry   
0A49   38 03                  JR   c,addr1   
0A4B   21 00 00               LD   hl,0   
0A4E                ADDR1:       
0A4E   C1                     POP   bc   
0A4F   E5                     PUSH   hl   
0A50   DD E9                  JP   (ix)   
0A52                DEFINE:      
0A52   E1                     POP   hl   
0A53   7E                     LD   a,(hl)   
0A54   23                     INC   hl   
0A55   44 4D                  LD   bc,hl   
0A57   5F                     LD   e,a   
0A58   16 00                  LD   d,0   
0A5A   19                     ADD   hl,de   
0A5B   5E                     LD   e,(hl)   
0A5C   23                     INC   hl   
0A5D   56                     LD   d,(hl)   
0A5E   23                     INC   hl   
0A5F   E5                     PUSH   hl   ; bc = str
0A60   D5                     PUSH   de   
0A61   CD B5 09               CALL   hashStr   ; hl = hash
0A64   D1                     POP   de   
0A65   44 4D                  LD   bc,hl   
0A67   C3 CE 09               JP   defineEntry   
0A6A                IDENT:       
0A6A   11 00 1A               LD   de,PAD   
0A6D   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
0A6F   18 02                  JR   ident1   
0A71                IDENT0:      ; copy to PAD area
0A71   03                     INC   bc   ; characters that are part of the identifier
0A72   13                     INC   de   
0A73                IDENT1:      ; 0-9 A-Z a-z _
0A73   0A                     LD   a,(bc)   
0A74   12                     LD   (de),a   
0A75   D6 21                  SUB   " " + 1   ; opcodes start above white space
0A77   6F                     LD   l,a   
0A78   7E                     LD   a,(hl)   
0A79   FE 2F                  CP   lsb(ident_)   
0A7B   28 F4                  JR   z,ident0   
0A7D   FE 00                  CP   lsb(num_)   
0A7F   28 F0                  JR   z,ident0   
0A81   0B                     DEC   bc   
0A82   AF                     XOR   a   
0A83   12                     LD   (de),a   ; terminate string with null
0A84   C5                     PUSH   bc   
0A85   01 00 1A               LD   bc,PAD   
0A88   CD B5 09               CALL   hashStr   ; hl = hash
0A8B   44 4D                  LD   bc,hl   
0A8D   CD F4 09               CALL   lookupEntry   
0A90   C1                     POP   bc   
0A91   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0A93   DD E9                  JP   (ix)   
0A95                IDENT3:      
0A95   E9                     JP   (hl)   
0A96                             ; division subroutine.
0A96                             ; bc: divisor, de: dividend, hl: remainder
0A96                DIVIDE:      
0A96   21 00 00               LD   hl,0   ; zero the remainder
0A99   3E 10                  LD   a,16   ; loop counter
0A9B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A9B   CB 21                  SLA   c   
0A9D   CB 10                  RL   b   
0A9F   ED 6A                  ADC   hl,hl   
0AA1   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0AA3   38 03                  JR   c,divide2   
0AA5   0C                     INC   c   
0AA6   18 01                  JR   divide3   
0AA8                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0AA8   19                     ADD   hl,de   
0AA9                DIVIDE3:      
0AA9   3D                     DEC   a   
0AAA   20 EF                  JR   nz,divide1   
0AAC   50                     LD   d,b   ; result from bc to de
0AAD   59                     LD   e,c   
0AAE                DIVIDE4:      
0AAE   C1                     POP   bc   ; Restore the IP
0AAF   D5                     PUSH   de   ; push Result
0AB0   E5                     PUSH   hl   ; push remainder
0AB1   DD E9                  JP   (ix)   
0AB3                FRAC:        
0AB3   2A 7E 1B               LD   hl,(vFrac)   
0AB6   E5                     PUSH   hl   
0AB7   DD E9                  JP   (ix)   
0AB9                SQRT1:       
0AB9   E1                     POP   hl   
0ABA   C5                     PUSH   bc   
0ABB   CD C6 0A               CALL   squareRoot   
0ABE   ED 43 7E 1B            LD   (vFrac),bc   
0AC2   C1                     POP   bc   
0AC3   D5                     PUSH   de   
0AC4   DD E9                  JP   (ix)   
0AC6                             ; squareroot
0AC6                             ; Input: HL = value
0AC6                             ; Result: DE = square root BC = remainder
0AC6                SQUAREROOT:      
0AC6   01 00 08               LD   bc,0800h   
0AC9   59                     LD   e,c   
0ACA   AF                     XOR   a   
0ACB                SQUAREROOT1:      
0ACB   29                     ADD   hl,hl   
0ACC   CB 11                  RL   c   
0ACE   ED 6A                  ADC   hl,hl   
0AD0   CB 11                  RL   c   
0AD2   30 02                  JR   nc,$+4   
0AD4   CB C5                  SET   0,l   
0AD6   7B                     LD   a,e   
0AD7   87                     ADD   a,a   
0AD8   5F                     LD   e,a   
0AD9   87                     ADD   a,a   
0ADA   CB 45                  BIT   0,l   
0ADC   20 03                  JR   nz,$+5   
0ADE   91                     SUB   c   
0ADF   30 05                  JR   nc,squareRoot4   
0AE1   79                     LD   a,c   
0AE2   93                     SUB   e   
0AE3   1C                     INC   e   
0AE4   93                     SUB   e   
0AE5   4F                     LD   c,a   
0AE6                SQUAREROOT4:      
0AE6   10 E3                  DJNZ   squareRoot1   
0AE8   CB 45                  BIT   0,l   
0AEA   28 01                  JR   z,squareRoot5   
0AEC   04                     INC   b   
0AED                SQUAREROOT5:      
0AED   16 00                  LD   d,0   
0AEF   C9                     RET      
0AF0                             ;     ; Calculate the square root of the number in HL and store the result in DE
0AF0                             ;     ; When the loop finishes, DE contains an approximation of the square root of the number in HL
0AF0                             ; calc_sqrt:
0AF0                             ;     ; Initialize result to the input number
0AF0                             ;     ld de,hl
0AF0                             ;     ; Iterate the Babylonian method 10 times
0AF0                             ;     ld bc,10
0AF0                             ; babylonian_loop:
0AF0                             ;     ; Calculate result as the average of result and input / result
0AF0                             ;     push de
0AF0                             ;     ld bc,hl
0AF0                             ;     ; Divide HL by BC and store the result in E
0AF0                             ;     ld de,0
0AF0                             ; div_loop:
0AF0                             ;     or a
0AF0                             ;     sbc hl,bc
0AF0                             ;     jr c,div_done
0AF0                             ;     inc de
0AF0                             ;     jp div_loop
0AF0                             ; div_done:
0AF0                             ;     ; HL now contains the remainder of the division
0AF0                             ;     add hl,de
0AF0                             ;     ; Shift HL right by 1 bit (divide by 2)
0AF0                             ;     srl h
0AF0                             ;     rr l
0AF0                             ;     pop de
0AF0                             ;     ; Repeat loop if counter is not 0
0AF0                             ;     dec bc
0AF0                             ;     jp nz,babylonian_loop
0AF0                             ;     ; Return from subroutine
0AF0                             ;     ret
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "10 sqrt", 3
4000                          ;*Macro unroll:  test "10 sqrt frac", 1
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 61 05               CALL   init   
4006   CD D0 07               CALL   exec   
4009   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4016                          ;*Macro unroll:  expect "10 sqrt frac",1
4016   E1                     POP   HL   
4017   E5                     PUSH   HL   
4018   11 01 00               LD   DE,1   
401B   B7                     OR   A   
401C   ED 52                  SBC   HL,DE   
401E   7D                     LD   A,L   
401F   B4                     OR   H   
4020   28 57                  JR   Z,expectM_0_2195S43   
4022   CD 51 07               CALL   printStr   
4025   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4038   CD 51 07               CALL   printStr   
403B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404A   21 01 00               LD   HL,1   
404D   CD EA 06               CALL   prtdec   
4050   CD 51 07               CALL   printStr   
4053   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4060   E1                     POP   hl   
4061   E5                     PUSH   hl   
4062   CD EA 06               CALL   prtdec   
4065   E1                     POP   hl   
4066   CD 51 07               CALL   printStr   
4069   20 28 23 00            .CSTR   " (#"   
406D   CD 32 07               CALL   prthex   
4070   CD 51 07               CALL   printStr   
4073   29 0D 0A 00            .CSTR   ")\r\n"   
4077   76                     HALT      
4078   00                     .CSTR      
4079                EXPECTM_0_2195S43:      
4079   E1                     POP   HL   
407A                             ; test "1 2 +", 3
407A                             ; test "'H' 2 def 'H' addr", 2
407A                             ; test "'H' 2 def 'J' 3 def 'H' addr 'J' addr +", 5
407A                             ; test "'H' 2 def", TRUE
407A                             ; test "'H' ha", $3648
407A                             ; test "'H' {1} de 'H' lo", 1
407A                             ; test "by [`A` `B` `C`]", 0
407A                             ; test "by [`A` `B` `C`] 1 ge", "B"
407A                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
407A                             ; test "wo [10 20 30] 1 ge", 10
407A                             ; test "wo [10 20 30] 1 50 set 1 get", 50
407A                             ; test "1 2 +", 3
407A                             ; test "4 1 2 +", 3
407A                             ; test "1", 1
407A                             ; test "2", 2
407A                             ; test "``", 0
407A                             ; test "`a`", $61
407A                             ; test "`\\``", $60
407A                             ; test "`b` 'cba' in", -1
407A                             ; test "`x` 'cba' in", 0
407A                             ; test "5 0 (1) if", 5
407A                             ; test "0 (1) (2) ife", 2
407A                             ; test "5 -1 (1) if", 1
407A                             ; test "-1 (1) (2) ife", 1
407A                             ; test "9 sw (1) (5) ca", 5
407A                             ; test "0 sw (1) ca", 1
407A                             ; test "1 sw (1) (2) (3) ca", 2
407A                             ; test "5 -1 (2) if", 2
407A                             ; test "5 0 (2) if", 5
407A                             ; test "5 0 (0 (2) if) if", 5
407A                             ; test "5 0 (-1 (2) if) if", 5
407A                             ; test "5 -1 (2) if", 2
407A                             ; test "5 -1 (-1 (2) if) if", 2
407A                             ; test "(1) ex", 1
407A                             ; test "2 ($1) ex", 2
407A                             ; test "2 4 ($2) ex", 4
407A                             ; test "((1) ex) ex", 1
407A                             ; test "5 (-1 ($1) if) ex", 5
407A                             ; test "'A' @", 65
407A                             ; test "1", 1
407A                             ; test "0", 0
407A                             ; test "10", 10
407A                             ; test "123", 123
407A                             ; test "$10", $10
407A                             ; test "$FF", $FF
407A                             ; test "2 3 =", 0
407A                             ; test "3 3 =", 1
407A                             ; test "2 3 <", 1
407A                             ; test "3 3 <", 0
407A                             ; test "3 3 >", 0
407A                             ; test "4 3 >", 1
407A                             ; test "1 2 +", 3
407A                             ; test "123 456 +", 123+456
407A                             ; test "64 128 +", 64+128
407A                             ; test "5 3 -", 2
407A                             ; test "3 5 &", 1
407A                             ; test "3 5 |", 7
407A                             ; test "2 3 *", 6
407A                             ; test "1 2 3 + *", 5
407A                             ; ; test "1 2 3 ' +", 3
407A                             ; ; test "1_ 2 +",1
407A                             ; ; test "1_ 1 +",0
407A                             ; ; call enter
407A                             ; ;     .cstr "1 3",$22,"+"
407A                             ; ; expect "1 3 DUP +", 6
407A                             ; ; test "5 2/'", 2
407A                             ; ; test "3 5$ -", 2
407A                             ; ; test "5 2/$ '", 1
407A                             ; ; test "2 3%++", 7
407A                             ; ; test "1 2 3~''", 2
407A                             ; ; test "1 2 3~+*", 8
407A                             ; ; test "2a!a@",2
407A                             ; ; test "3x! 1 x@+x! x@", 4
407A                             ; ; test "3x! 1_ x@+x! x@", 2
407A                             ; ; test "1{", 2
407A                             ; ; test "1}", 0
407A                             ; ; test "2}", 1
407A                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
407A                             ; ; test "(2) \\^", 2
407A                             ; ; test ":X1; X", 1
407A                             ; ; test ":A100;A", 100
407A                             ; ; test ":Aa!; 3A a@", 3
407A                             ; ; test ":Aa!;:Ba@;4AB", 4
407A                             ; ; test "[]$ '", 0
407A                             ; ; test "[3]$ '", 1
407A                             ; ; test "[3]'@", 3
407A                             ; ; test "[1 2 3]'@", 1
407A                             ; ; test "[1 2 3]'2+@", 2
407A                             ; ; test "\\h@[1]''\\h@$-", 2
407A                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
407A                             ; ; test "\\[]$ '", 0
407A                             ; ; test "\\[3]'\\@", 3
407A                             ; ; test "\\[3]$ '", 1
407A                             ; ; test "\\[1 2 3]'\\@", 1
407A                             ; ; test "\\[1 2 3]'1+\\@", 2
407A                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
407A                             ; ; test "\\h@\\[1]''\\h@$-", 1
407A                             ; ; test "\\`A`\\@",65
407A                             ; ; test "0 0(1+)", 0
407A                             ; ; test "0 1(1+)", 1
407A                             ; ; test "0 2(1+)", 2
407A                             ; ; test "0 1(0(1+))", 0
407A                             ; ; test "0 1(1(1+))", 1
407A                             ; ; test "0 2(1(1+))", 2
407A                             ; ; test "0 2(2(1+))", 4
407A                             ; ; test "0 1(\\i@+)", 0
407A                             ; ; test "0 2(\\i@+)", 1
407A                             ; ; test "0 3(\\i@+)", 3
407A                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
407A                             ; ; test "0t! 10(1 t@+t!) t@",10
407A                             ; ; test "0(100)(200)",200
407A                             ; ; test "1(100)(200)",100
407A                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
407A                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
407A                             ; ; test ":X10;\\0X", 10
407A                             ; ; test "2 \\1x! \\1x@", 2
407A   CD 51 07               CALL   printStr   
407D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4083   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 257 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 287 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 554 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 869 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 194 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 196 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 52 IN Siena.asm
NEXT:               025F DEFINED AT LINE 183 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
NEXT1:              026C DEFINED AT LINE 193 IN Siena.asm
                    > USED AT LINE 187 IN Siena.asm
ETX:                0274 DEFINED AT LINE 198 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
ETX1:               027D DEFINED AT LINE 203 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
EXIT:               027F DEFINED AT LINE 205 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
START:              0294 DEFINED AT LINE 225 IN Siena.asm
INTERPRET:          02AA DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
INTERPRET2:         02B4 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 280 IN Siena.asm
INTERPRET3:         02BC DEFINED AT LINE 244 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INTERPRET4:         02C2 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
WAITCHAR:           02C7 DEFINED AT LINE 256 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 303 IN Siena.asm
MACRO:              02D6 DEFINED AT LINE 265 IN Siena.asm
WAITCHAR1:          02D8 DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
WAITCHAR3:          02E6 DEFINED AT LINE 291 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
WAITCHAR4:          02FC DEFINED AT LINE 307 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 316 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 318 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 320 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 322 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 324 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 326 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 328 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 330 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 332 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
BLOCK_:             0420 DEFINED AT LINE 339 IN Siena.asm
BLOCKEND_:          0423 DEFINED AT LINE 341 IN Siena.asm
CHAR_:              0426 DEFINED AT LINE 343 IN Siena.asm
ARRAY_:             0429 DEFINED AT LINE 345 IN Siena.asm
ARRAYEND_:          042C DEFINED AT LINE 347 IN Siena.asm
IDENT_:             042F DEFINED AT LINE 349 IN Siena.asm
AND_:               0432 DEFINED AT LINE 352 IN Siena.asm
AND1:               0439 DEFINED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 384 IN Siena.asm
OR_:                043D DEFINED AT LINE 365 IN Siena.asm
XOR_:               0446 DEFINED AT LINE 375 IN Siena.asm
XOR1:               0447 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
INV_:               044F DEFINED AT LINE 386 IN Siena.asm
ADD_:               0454 DEFINED AT LINE 390 IN Siena.asm
HDOT_:              045A DEFINED AT LINE 397 IN Siena.asm
ETX_:               0461 DEFINED AT LINE 402 IN Siena.asm
EXIT_:              0464 DEFINED AT LINE 405 IN Siena.asm
FETCH_:             0467 DEFINED AT LINE 408 IN Siena.asm
FETCH1:             0468 DEFINED AT LINE 410 IN Siena.asm
KEY_:               046E DEFINED AT LINE 417 IN Siena.asm
                    > USED AT LINE 746 IN Siena.asm
MUL_:               0477 DEFINED AT LINE 424 IN Siena.asm
NOP_:               047A DEFINED AT LINE 426 IN Siena.asm
SHL_:               047C DEFINED AT LINE 430 IN Siena.asm
SHR_:               0481 DEFINED AT LINE 437 IN Siena.asm
SHR1:               0482 DEFINED AT LINE 439 IN Siena.asm
STORE_:             0489 DEFINED AT LINE 445 IN Siena.asm
NEG_:               0490 DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
SUB_:               0496 DEFINED AT LINE 458 IN Siena.asm
SUB2:               0498 DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
EQ_:                049E DEFINED AT LINE 467 IN Siena.asm
FALSE_:             04A5 DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
GT_:                04AB DEFINED AT LINE 478 IN Siena.asm
LT_:                04AF DEFINED AT LINE 483 IN Siena.asm
LT1:                04B1 DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
TRUE_:              04B9 DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
                    > USED AT LINE 790 IN Siena.asm
GTE_:               04BF DEFINED AT LINE 496 IN Siena.asm
LTE_:               04C3 DEFINED AT LINE 500 IN Siena.asm
LTE1:               04C5 DEFINED AT LINE 503 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
MOD_:               04CE DEFINED AT LINE 509 IN Siena.asm
DIV_:               04DA DEFINED AT LINE 519 IN Siena.asm
CFETCH_:            04E9 DEFINED AT LINE 530 IN Siena.asm
COMMENT_:           04F0 DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
CSTORE_:            04FA DEFINED AT LINE 545 IN Siena.asm
EMIT_:              04FF DEFINED AT LINE 551 IN Siena.asm
PROMPT_:            0506 DEFINED AT LINE 557 IN Siena.asm
INPORT_:            050B DEFINED AT LINE 562 IN Siena.asm
NEWLN_:             0516 DEFINED AT LINE 572 IN Siena.asm
OUTPORT_:           051B DEFINED AT LINE 576 IN Siena.asm
PRTSTR_:            0524 DEFINED AT LINE 585 IN Siena.asm
PRTSTR:             0524 DEFINED AT LINE 586 IN Siena.asm
CLOSURE_:           052A DEFINED AT LINE 591 IN Siena.asm
FILTER_:            052A DEFINED AT LINE 592 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
GET_:               052A DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
LET_:               052A DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 750 IN Siena.asm
MAP_:               052A DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
PRINT_:             052A DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
SCAN_:              052A DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
SET_:               052A DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
SHIFT_:             052A DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
WHILE_:             052A DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 794 IN Siena.asm
VAR_:               052A DEFINED AT LINE 601 IN Siena.asm
MUL:                052C DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 424 IN Siena.asm
MUL2:               0536 DEFINED AT LINE 620 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
PROMPT:             0548 DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
PUTSTR0:            0551 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
PUTSTR:             0555 DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 939 IN Siena.asm
CRLF:               055A DEFINED AT LINE 668 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 573 IN Siena.asm
INIT:               0561 DEFINED AT LINE 673 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 40
INIT1:              057B DEFINED AT LINE 691 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
NUM:                069D DEFINED AT LINE 802 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
NUM0:               06A6 DEFINED AT LINE 808 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
NUM1:               06A7 DEFINED AT LINE 810 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
NUM2:               06BF DEFINED AT LINE 828 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
NUM3:               06CA DEFINED AT LINE 836 IN Siena.asm
                    > USED AT LINE 831 IN Siena.asm
HEXNUM:             06CD DEFINED AT LINE 840 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
HEXNUM1:            06D0 DEFINED AT LINE 842 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
HEXNUM2:            06D8 DEFINED AT LINE 848 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
PRTDEC:             06EA DEFINED AT LINE 861 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            06F9 DEFINED AT LINE 876 IN Siena.asm
                    > USED AT LINE 867 IN Siena.asm
PRTDEC1:            071B DEFINED AT LINE 892 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 889 IN Siena.asm
PRTDEC2:            071D DEFINED AT LINE 894 IN Siena.asm
                    > USED AT LINE 897 IN Siena.asm
PRTDEC3:            072D DEFINED AT LINE 906 IN Siena.asm
                    > USED AT LINE 901 IN Siena.asm
PRTDEC4:            072E DEFINED AT LINE 908 IN Siena.asm
                    > USED AT LINE 905 IN Siena.asm
PRTHEX:             0732 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            073D DEFINED AT LINE 921 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
PRTHEX3:            0746 DEFINED AT LINE 929 IN Siena.asm
                    > USED AT LINE 927 IN Siena.asm
PRINTSTR:           0751 DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 153
LOOKUPREF:          0758 DEFINED AT LINE 944 IN Siena.asm
LOOKUPREF0:         075A DEFINED AT LINE 946 IN Siena.asm
LOOKUPREF1:         075E DEFINED AT LINE 949 IN Siena.asm
LOOKUPREF2:         0764 DEFINED AT LINE 953 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
LOOKUPREF3:         0768 DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
NESTING:            0776 DEFINED AT LINE 979 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
NESTING1A:          0781 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
NESTING1:           0784 DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
NESTING2:           0793 DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
NESTING3:           0795 DEFINED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
NESTING4:           07A0 DEFINED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
STRDEF:             07A2 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
STRDEF1:            07AA DEFINED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
STRDEF2:            07AD DEFINED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
CHAR:               07BB DEFINED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
CHAR1:              07BE DEFINED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
CHAR2:              07CA DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
CHAR3:              07CD DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
EXEC:               07D0 DEFINED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              07D1 DEFINED AT LINE 1053 IN Siena.asm
EXEC2:              07D5 DEFINED AT LINE 1057 IN Siena.asm
EXEC3:              07E3 DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
LAMBDA:             07E5 DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
LAMBDA1:            07EC DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
LAMBDA2:            0810 DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
LAMBDAEND:          081F DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
BLOCK:              0833 DEFINED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
BLOCK1:             0837 DEFINED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
BLOCK2:             0859 DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
BLOCKEND:           0865 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
ARG:                0879 DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
IN:                 0894 DEFINED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 734 IN Siena.asm
IN1:                0896 DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
IN2:                08A0 DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
IN3:                08A6 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
NEWADD2:            08A9 DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
IF:                 08D4 DEFINED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
IFTE:               08D9 DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 742 IN Siena.asm
IFTE1:              08DA DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
IFTE2:              08E3 DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
IFTE3:              08FA DEFINED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
SWITCH:             08FC DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
CASE:               0910 DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
CASE0:              092C DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
CASE1:              0931 DEFINED AT LINE 1300 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
CASE2:              093E DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
WORDS:              0940 DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 798 IN Siena.asm
BYTES:              0946 DEFINED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
BYTES1:             0949 DEFINED AT LINE 1317 IN Siena.asm
ARRAY:              094E DEFINED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
ARRAYEND:           0960 DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
ARRAYEND1:          0982 DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
ARRAYEND2:          098E DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1383 IN Siena.asm
ARRAYEND4:          099E DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
HASHSTR:            09B5 DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
HASHSTR1:           09B8 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
HASHSTR2:           09BD DEFINED AT LINE 1417 IN Siena.asm
DEFINEENTRY:        09CE DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
DEFINEENTRY0:       09D3 DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
DEFINEENTRY1:       09E2 DEFINED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
DEFINEENTRY2:       09E8 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
DEFINEENTRY3:       09EA DEFINED AT LINE 1461 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
LOOKUPENTRY:        09F4 DEFINED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
LOOKUPENTRY0:       09F9 DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
LOOKUPENTRY1:       0A08 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
LOOKUPENTRY2:       0A0E DEFINED AT LINE 1497 IN Siena.asm
LOOKUPENTRY3:       0A10 DEFINED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
HASH:               0A18 DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 730 IN Siena.asm
DEF:                0A23 DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
DEF1:               0A39 DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
ADDR_:              0A3D DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
ADDR1:              0A4E DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
DEFINE:             0A52 DEFINED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
                    > USED AT LINE 700 IN Siena.asm
                    > USED AT LINE 704 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
                    > USED AT LINE 724 IN Siena.asm
                    > USED AT LINE 728 IN Siena.asm
                    > USED AT LINE 732 IN Siena.asm
                    > USED AT LINE 736 IN Siena.asm
                    > USED AT LINE 740 IN Siena.asm
                    > USED AT LINE 744 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
                    > USED AT LINE 760 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 776 IN Siena.asm
                    > USED AT LINE 780 IN Siena.asm
                    > USED AT LINE 784 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 796 IN Siena.asm
IDENT:              0A6A DEFINED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
IDENT0:             0A71 DEFINED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
IDENT1:             0A73 DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
IDENT3:             0A95 DEFINED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
DIVIDE:             0A96 DEFINED AT LINE 1607 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
DIVIDE1:            0A9B DEFINED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
DIVIDE2:            0AA8 DEFINED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
DIVIDE3:            0AA9 DEFINED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
DIVIDE4:            0AAE DEFINED AT LINE 1627 IN Siena.asm
FRAC:               0AB3 DEFINED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
SQRT1:              0AB9 DEFINED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
SQUAREROOT:         0AC6 DEFINED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
SQUAREROOT1:        0ACB DEFINED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
SQUAREROOT4:        0AE6 DEFINED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
SQUAREROOT5:        0AED DEFINED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
                    > USED AT LINE 292 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 199 IN Siena.asm
                    > USED AT LINE 202 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 677 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 525 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 959 IN Siena.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 690 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2195S43:  4079 DEFINED AT LINE 34
                    > USED AT LINE 10
