0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 64 05               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODES:      
0200   52                     DB   lsb(inv_)   ;    !
0201   7D                     DB   lsb(nop_)   ;    "
0202   03                     DB   lsb(hexnum_)   ;    #
0203   06                     DB   lsb(arg_)   ;    $
0204   D1                     DB   lsb(mod_)   ;    %
0205   35                     DB   lsb(and_)   ;    &
0206   09                     DB   lsb(strDef_)   ;    '
0207   20                     DB   lsb(block_)   ;    (
0208   23                     DB   lsb(blockend_)   ;    )
0209   7A                     DB   lsb(mul_)   ;    *
020A   57                     DB   lsb(add_)   ;    +
020B   7D                     DB   lsb(nop_)   ;    ,
020C   99                     DB   lsb(sub_)   ;    -
020D   15                     DB   lsb(dot_)   ;    .
020E   DD                     DB   lsb(div_)   ;    /	
020F   00                     DB   lsb(num_)   ;    0
0210   00                     DB   lsb(num_)   ;    1
0211   00                     DB   lsb(num_)   ;    2
0212   00                     DB   lsb(num_)   ;    3
0213   00                     DB   lsb(num_)   ;    4
0214   00                     DB   lsb(num_)   ;    5
0215   00                     DB   lsb(num_)   ;    6
0216   00                     DB   lsb(num_)   ;    7
0217   00                     DB   lsb(num_)   ;    8
0218   00                     DB   lsb(num_)   ;    9
0219   32                     DB   lsb(symbol_)   ;    :
021A   7D                     DB   lsb(nop_)   ;    ;
021B   B2                     DB   lsb(lt_)   ;    <
021C   A1                     DB   lsb(eq_)   ;    =
021D   AE                     DB   lsb(gt_)   ;    >
021E   7D                     DB   lsb(nop_)   ;    ?
021F   6A                     DB   lsb(fetch_)   ;    @
0220   2F                     DB   lsb(ident_)   ;    A
0221   2F                     DB   lsb(ident_)   ;    B
0222   2F                     DB   lsb(ident_)   ;    C
0223   2F                     DB   lsb(ident_)   ;    D
0224   2F                     DB   lsb(ident_)   ;    E
0225   2F                     DB   lsb(ident_)   ;    F
0226   2F                     DB   lsb(ident_)   ;    G
0227   2F                     DB   lsb(ident_)   ;    h
0228   2F                     DB   lsb(ident_)   ;    I
0229   2F                     DB   lsb(ident_)   ;    J
022A   2F                     DB   lsb(ident_)   ;    K
022B   2F                     DB   lsb(ident_)   ;    L
022C   2F                     DB   lsb(ident_)   ;    M
022D   2F                     DB   lsb(ident_)   ;    N
022E   2F                     DB   lsb(ident_)   ;    O
022F   2F                     DB   lsb(ident_)   ;    p
0230   2F                     DB   lsb(ident_)   ;    Q
0231   2F                     DB   lsb(ident_)   ;    R
0232   2F                     DB   lsb(ident_)   ;    S
0233   2F                     DB   lsb(ident_)   ;    T
0234   2F                     DB   lsb(ident_)   ;    U
0235   2F                     DB   lsb(ident_)   ;    V
0236   2F                     DB   lsb(ident_)   ;    W
0237   2F                     DB   lsb(ident_)   ;    X
0238   2F                     DB   lsb(ident_)   ;    Y
0239   2F                     DB   lsb(ident_)   ;    Z
023A   29                     DB   lsb(array_)   ;    [
023B   7D                     DB   lsb(nop_)   ;    \
023C   2C                     DB   lsb(arrayEnd_)   ;    ]
023D   49                     DB   lsb(xor_)   ;    ^
023E   2F                     DB   lsb(ident_)   ;    _
023F   26                     DB   lsb(char_)   ;    `    	
0240   2F                     DB   lsb(ident_)   ;    a
0241   2F                     DB   lsb(ident_)   ;    b
0242   2F                     DB   lsb(ident_)   ;    c
0243   2F                     DB   lsb(ident_)   ;    d
0244   2F                     DB   lsb(ident_)   ;    e
0245   2F                     DB   lsb(ident_)   ;    f
0246   2F                     DB   lsb(ident_)   ;    g
0247   2F                     DB   lsb(ident_)   ;    h
0248   2F                     DB   lsb(ident_)   ;    i
0249   2F                     DB   lsb(ident_)   ;    j
024A   2F                     DB   lsb(ident_)   ;    k
024B   2F                     DB   lsb(ident_)   ;    l
024C   2F                     DB   lsb(ident_)   ;    m
024D   2F                     DB   lsb(ident_)   ;    n
024E   2F                     DB   lsb(ident_)   ;    o
024F   2F                     DB   lsb(ident_)   ;    p
0250   2F                     DB   lsb(ident_)   ;    q
0251   2F                     DB   lsb(ident_)   ;    r
0252   2F                     DB   lsb(ident_)   ;    s
0253   2F                     DB   lsb(ident_)   ;    t
0254   2F                     DB   lsb(ident_)   ;    u
0255   2F                     DB   lsb(ident_)   ;    v
0256   2F                     DB   lsb(ident_)   ;    w
0257   2F                     DB   lsb(ident_)   ;    x
0258   2F                     DB   lsb(ident_)   ;    y
0259   2F                     DB   lsb(ident_)   ;    z
025A   0F                     DB   lsb(lambda_)   ;    {
025B   40                     DB   lsb(or_)   ;    |
025C   12                     DB   lsb(lambdaEnd_)   ;    }
025D   7D                     DB   lsb(nop_)   ;    ~
025E   7D                     DB   lsb(nop_)   ;    DEL	
025F                             ; ctrlCodes:
025F                             ;     DB lsb(EMPTY)               ; NUL ^@
025F                             ;     DB lsb(EMPTY)               ; SOH ^a  1
025F                             ;     DB lsb(EMPTY)               ; STX ^b  2
025F                             ;     DB lsb(EMPTY)               ; ETX ^c  3
025F                             ;     DB lsb(EMPTY)               ; EOT ^d  4
025F                             ;     DB lsb(EMPTY)               ; ENQ ^e  5
025F                             ;     DB lsb(EMPTY)               ; ACK ^F  6
025F                             ;     DB lsb(EMPTY)               ; BEL ^G  7
025F                             ;     DB lsb(EMPTY)               ; BS  ^h  8
025F                             ;     DB lsb(EMPTY)               ; TAB ^I  9
025F                             ;     DB lsb(EMPTY)               ; LF  ^J 10
025F                             ;     DB lsb(EMPTY)               ; VT  ^K 11
025F                             ;     DB lsb(EMPTY)               ; FF  ^l 12
025F                             ;     DB lsb(EMPTY)               ; CR  ^m 13
025F                             ;     DB lsb(EMPTY)               ; SO  ^N 14
025F                             ;     DB lsb(EMPTY)               ; SI  ^O 15
025F                             ;     DB lsb(EMPTY)               ; DLE ^p 16
025F                             ;     DB lsb(EMPTY)               ; ^Q
025F                             ;     DB lsb(EMPTY)               ; ^R
025F                             ;     DB lsb(EMPTY)               ; ^S
025F                             ;     DB lsb(EMPTY)               ; ^T
025F                             ;     DB lsb(EMPTY)               ; ^U
025F                             ;     DB lsb(EMPTY)               ; ^V
025F                             ;     DB lsb(EMPTY)               ; ^W
025F                             ;     DB lsb(EMPTY)               ; ^X
025F                             ;     DB lsb(EMPTY)               ; ^Y
025F                             ;     DB lsb(EMPTY)               ; ^Z
025F                             ;     DB lsb(EMPTY)               ; ^[
025F                             ;     DB lsb(EMPTY)               ; ^\
025F                             ;     DB lsb(EMPTY)               ; ^]
025F                             ;     DB lsb(EMPTY)               ; ^^
025F                             ;     DB lsb(EMPTY)               ; ^_
025F                NEXT:        
025F   03                     INC   bc   ; Increment the IP
0260   0A                     LD   a,(bc)   ; Get the next character and dispatch
0261   D6 21                  SUB   " " + 1   ; whitespace?
0263   38 07                  JR   c,next1   
0265   6F                     LD   l,a   ; index into table
0266   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0268   6E                     LD   l,(hl)   ; get low jump address
0269   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
026B   E9                     JP   (hl)   ; Jump to routine
026C                NEXT1:       
026C   FE DF                  CP   NULL - (" " + 1)   ; is it end of text?
026E   28 0F                  JR   z,exit   
0270   FE E2                  CP   ENDTEXT - (" " + 1)   ; is it end of text?
0272   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0274                ETX:         
0274   21 00 E6               LD   hl,-DSTACK   
0277   39                     ADD   hl,sp   
0278   30 03                  JR   nc,etx1   
027A   31 00 1A               LD   sp,DSTACK   
027D                ETX1:        
027D   18 2B                  JR   interpret   
027F                EXIT:        
027F   50 59                  LD   de,bc   ; address of code after exit opcode
0281   13                     INC   de   
0282   D9                     EXX      
0283   C1                     POP   bc   ; bc = last result
0284   FD 54                  LD   d,iyh   ; de = BP
0286   FD 5D                  LD   e,iyl   
0288   EB                     EX   de,hl   ; hl = BP, de = result
0289   F9                     LD   sp,hl   ; sp = BP
028A   D9                     EXX      
028B   E1                     POP   hl   ; hl = old BP
028C   C1                     POP   bc   ; pop SCP (discard)
028D   C1                     POP   bc   ; bc = IP
028E   F9                     LD   sp,hl   ; sp = old BP
028F   D9                     EXX      
0290   C5                     PUSH   bc   ; push result
0291   D9                     EXX      
0292   EB                     EX   de,hl   
0293   E9                     JP   (hl)   
0294                START:       
0294   31 00 1A               LD   sp,DSTACK   ; start of Siena
0297   CD 64 05               CALL   init   ; setups
029A   CD 54 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
029D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02AA                INTERPRET:      
02AA   CD 4B 05               CALL   prompt   
02AD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02B0   ED 43 82 1B            LD   (vTIBPtr),bc   
02B4                INTERPRET2:      ; calc nesting (a macro might have changed it)
02B4   1E 00                  LD   e,0   ; initilize nesting value
02B6   C5                     PUSH   bc   ; save offset into TIB,
02B7                             ; bc is also the count of chars in TIB
02B7   21 00 18               LD   hl,TIB   ; hl is start of TIB
02BA   18 06                  JR   interpret4   
02BC                INTERPRET3:      
02BC   7E                     LD   a,(hl)   ; a = char in TIB
02BD   23                     INC   hl   ; inc pointer into TIB
02BE   0B                     DEC   bc   ; dec count of chars in TIB
02BF   CD 79 07               CALL   nesting   ; update nesting value
02C2                INTERPRET4:      
02C2   79                     LD   a,c   ; is count zero?
02C3   B0                     OR   b   
02C4   20 F6                  JR   nz,interpret3   ; if not loop
02C6   C1                     POP   bc   ; restore offset into TIB
02C7                WAITCHAR:      
02C7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02CA   FE 20                  CP   $20   ; compare to space
02CC   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02CE   FE 00                  CP   $0   ; is it end of string? null end of string
02D0   28 2A                  JR   z,waitchar4   
02D2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02D4   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02D6                MACRO:       
02D6                             ;     ld (vTIBPtr),bc
02D6                             ;     ld hl,ctrlCodes
02D6                             ;     add a,l			            ; look up key of macros
02D6                             ;     ld l,a
02D6                             ;     ld e,(hl)
02D6                             ;     ld a,e
02D6                             ;     or a
02D6                             ;     jr z,macro1
02D6                             ;     ld d,msb(macros)
02D6                             ;     push de
02D6                             ;     call exec		            ; Siena exec_ operation and jump to it
02D6                             ;     .cstr "ca"
02D6                             ; macro1:
02D6                             ;     ld bc,(vTIBPtr)
02D6   18 DC                  JR   interpret2   
02D8                WAITCHAR1:      
02D8   21 00 18               LD   hl,TIB   
02DB   09                     ADD   hl,bc   
02DC   77                     LD   (hl),a   ; store the character in textbuf
02DD   03                     INC   bc   
02DE   CD 85 00               CALL   putchar   ; echo character to screen
02E1   CD 79 07               CALL   nesting   
02E4   18 E1                  JR   waitchar   ; wait for next character
02E6                WAITCHAR3:      
02E6   21 00 18               LD   hl,TIB   
02E9   09                     ADD   hl,bc   
02EA   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02EC   23                     INC   hl   
02ED   36 0A                  LD   (hl),"\n"   
02EF   23                     INC   hl   
02F0   03                     INC   bc   
02F1   03                     INC   bc   
02F2   CD 5D 05               CALL   crlf   ; echo character to screen
02F5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02F6   B7                     OR   a   
02F7   20 CE                  JR   nz,waitchar   
02F9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02FB   03                     INC   bc   
02FC                WAITCHAR4:      
02FC   ED 43 82 1B            LD   (vTIBPtr),bc   
0300   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0303   0B                     DEC   bc   
0304                             ; **********************************************************************			
0304                             ; Page 4 primitive routines
0304                             ; **********************************************************************
0304                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 A0 06               JP   num   
0403                HEXNUM_:      
0403   C3 D0 06               JP   hexnum   
0406                ARG_:        
0406   C3 7C 08               JP   arg   
0409                STRDEF_:      
0409   C3 A5 07               JP   strDef   
040C                NEWADD2_:      
040C   C3 AC 08               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 E8 07               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 22 08               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD ED 06               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   DD E9                  JP   (ix)   
0420                BLOCK_:      
0420   C3 36 08               JP   block   
0423                BLOCKEND_:      
0423   C3 68 08               JP   blockend   
0426                CHAR_:       
0426   C3 BE 07               JP   char   
0429                ARRAY_:      
0429   C3 51 09               JP   array   
042C                ARRAYEND_:      
042C   C3 63 09               JP   arrayEnd   
042F                IDENT_:      
042F   C3 86 0A               JP   ident   
0432                SYMBOL_:      
0432   C3 60 0A               JP   symbol   
0435                AND_:        
0435   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0436   E1                     POP   hl   
0437   7B                     LD   a,e   
0438   A5                     AND   l   
0439   6F                     LD   l,a   
043A   7A                     LD   a,d   
043B   A4                     AND   h   
043C                AND1:        
043C   67                     LD   h,a   
043D   E5                     PUSH   hl   
043E   DD E9                  JP   (ix)   
0440                OR_:         
0440   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0441   E1                     POP   hl   
0442   7B                     LD   a,e   
0443   B5                     OR   l   
0444   6F                     LD   l,a   
0445   7A                     LD   a,d   
0446   B4                     OR   h   
0447   18 F3                  JR   and1   
0449                XOR_:        
0449   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
044A                XOR1:        
044A   E1                     POP   hl   
044B   7B                     LD   a,e   
044C   AD                     XOR   l   
044D   6F                     LD   l,a   
044E   7A                     LD   a,d   
044F   AC                     XOR   h   
0450   18 EA                  JR   and1   
0452                INV_:        ; Bitwise INVert the top member of the stack
0452   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0455   18 F3                  JR   xor1   
0457                ADD_:        ; add the top 2 members of the stack
0457   D1                     POP   de   
0458   E1                     POP   hl   
0459   19                     ADD   hl,de   
045A   E5                     PUSH   hl   
045B   DD E9                  JP   (ix)   
045D                HDOT_:       ; print hexadecimal
045D   E1                     POP   hl   
045E   CD 35 07               CALL   prthex   
0461   C3 19 04               JP   dot2   
0464                ETX_:        
0464   C3 74 02               JP   ETX   
0467                EXIT_:       
0467   C3 7F 02               JP   exit   
046A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046A   E1                     POP   hl   
046B                FETCH1:      
046B   5E                     LD   e,(hl)   
046C   23                     INC   hl   
046D   56                     LD   d,(hl)   
046E   D5                     PUSH   de   
046F   DD E9                  JP   (ix)   
0471                KEY_:        
0471   CD 81 00               CALL   getchar   
0474   26 00                  LD   h,0   
0476   6F                     LD   l,a   
0477   E5                     PUSH   hl   
0478   DD E9                  JP   (ix)   
047A   C3 2F 05     MUL_:     JP   mul   
047D                NOP_:        
047D   DD E9                  JP   (ix)   ; hardwire white space to always exec_ to next (important for arrays)
047F                SHL_:        
047F   E1                     POP   hl   ; Duplicate the top member of the stack
0480   29                     ADD   hl,hl   
0481   E5                     PUSH   hl   ; shift left fallthrough into add_
0482   DD E9                  JP   (ix)   
0484                             ;  Right shift } is a divide by 2		
0484                SHR_:        
0484   E1                     POP   hl   ; Get the top member of the stack
0485                SHR1:        
0485   CB 3C                  SRL   h   
0487   CB 1D                  RR   l   
0489   E5                     PUSH   hl   
048A   DD E9                  JP   (ix)   
048C                STORE_:      ; Store the value at the address placed on the top of the stack
048C   E1                     POP   hl   
048D   D1                     POP   de   
048E   73                     LD   (hl),e   
048F   23                     INC   hl   
0490   72                     LD   (hl),d   
0491   DD E9                  JP   (ix)   
0493                NEG_:        
0493   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0496   D1                     POP   de   
0497   18 02                  JR   sub2   ; use the SUBtract routine
0499                SUB_:        ; Subtract the value 2nd on stack from top of stack
0499   D1                     POP   de   
049A   E1                     POP   hl   ; Entry point for INVert
049B                SUB2:        
049B   B7                     OR   a   ; Entry point for NEGate
049C   ED 52                  SBC   hl,de   
049E   E5                     PUSH   hl   
049F   DD E9                  JP   (ix)   
04A1                EQ_:         
04A1   E1                     POP   hl   
04A2   D1                     POP   de   
04A3   B7                     OR   a   ; reset the carry flag
04A4   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A6   28 14                  JR   z,true_   
04A8                FALSE_:      
04A8   21 00 00               LD   hl,0   
04AB   E5                     PUSH   hl   
04AC   DD E9                  JP   (ix)   
04AE                GT_:         
04AE   D1                     POP   de   
04AF   E1                     POP   hl   
04B0   18 02                  JR   lt1   
04B2                LT_:         
04B2   E1                     POP   hl   
04B3   D1                     POP   de   
04B4                LT1:         
04B4   B7                     OR   a   ; reset the carry flag
04B5   ED 52                  SBC   hl,de   
04B7   28 EF                  JR   z,false_   
04B9   FA A8 04               JP   m,false_   
04BC                TRUE_:       
04BC   21 01 00               LD   hl,1   
04BF   E5                     PUSH   hl   
04C0   DD E9                  JP   (ix)   
04C2                GTE_:        
04C2   D1                     POP   de   
04C3   E1                     POP   hl   
04C4   18 02                  JR   lte1   
04C6                LTE_:        
04C6   E1                     POP   hl   
04C7   D1                     POP   de   
04C8                LTE1:        
04C8   B7                     OR   a   ; reset the carry flag
04C9   ED 52                  SBC   hl,de   
04CB   FA A8 04               JP   m,false_   
04CE   C3 FF FF               JP   true   
04D1                MOD_:        
04D1   D1                     POP   de   ; get first value
04D2   E1                     POP   hl   ; get 2nd value
04D3   C5                     PUSH   bc   ; preserve the IP
04D4   44 4D                  LD   bc,hl   
04D6   CD B2 0A               CALL   divide   
04D9   C1                     POP   bc   
04DA   E5                     PUSH   hl   ; push remainder
04DB   DD E9                  JP   (ix)   
04DD                DIV_:        
04DD   D1                     POP   de   ; get first value
04DE   E1                     POP   hl   ; get 2nd value
04DF   C5                     PUSH   bc   ; preserve the IP
04E0   44 4D                  LD   bc,hl   
04E2   CD B2 0A               CALL   divide   
04E5   22 7E 1B               LD   (vFrac),hl   
04E8   C1                     POP   bc   
04E9   D5                     PUSH   de   ; push result
04EA   DD E9                  JP   (ix)   
04EC                CFETCH_:      
04EC   E1                     POP   hl   
04ED   16 00                  LD   d,0   
04EF   5E                     LD   e,(hl)   
04F0   D5                     PUSH   de   
04F1   DD E9                  JP   (ix)   
04F3                COMMENT_:      
04F3   03                     INC   bc   ; point to next char
04F4   0A                     LD   a,(bc)   
04F5   FE 0D                  CP   "\r"   ; terminate at cr
04F7   20 FA                  JR   nz,comment_   
04F9   0B                     DEC   bc   
04FA   C3 5F 02               JP   next   
04FD                CSTORE_:      
04FD   E1                     POP   hl   
04FE   D1                     POP   de   
04FF   73                     LD   (hl),e   
0500   DD E9                  JP   (ix)   
0502                EMIT_:       
0502   E1                     POP   hl   
0503   7D                     LD   a,l   
0504   CD 85 00               CALL   putchar   
0507   DD E9                  JP   (ix)   
0509                PROMPT_:      
0509   CD 4B 05               CALL   prompt   
050C   DD E9                  JP   (ix)   
050E                INPORT_:      ; \<
050E   E1                     POP   hl   
050F   79                     LD   a,c   
0510   4D                     LD   c,l   
0511   ED 68                  IN   l,(c)   
0513   26 00                  LD   h,0   
0515   4F                     LD   c,a   
0516   E5                     PUSH   hl   
0517   DD E9                  JP   (ix)   
0519                NEWLN_:      
0519   CD 5D 05               CALL   crlf   
051C   DD E9                  JP   (ix)   
051E                OUTPORT_:      
051E   E1                     POP   hl   
051F   59                     LD   e,c   
0520   4D                     LD   c,l   
0521   E1                     POP   hl   
0522   ED 69                  OUT   (c),l   
0524   4B                     LD   c,e   
0525   DD E9                  JP   (ix)   
0527                PRTSTR_:      
0527                PRTSTR:      
0527   E1                     POP   hl   
0528   CD 58 05               CALL   putStr   
052B   DD E9                  JP   (ix)   
052D                CLOSURE_:      
052D                FILTER_:      
052D                GET_:        
052D                LET_:        
052D                MAP_:        
052D                PRINT_:      
052D                SCAN_:       
052D                SET_:        
052D                SHIFT_:      
052D                WHILE_:      
052D                VAR_:        
052D   DD E9                  JP   (ix)   
052F                             ;*******************************************************************
052F                             ; Page 5 primitive routines continued
052F                             ;*******************************************************************
052F                             ; ********************************************************************
052F                             ; 16-bit multiply
052F                MUL:         ;=19
052F   D1                     POP   de   ; get first value
0530   E1                     POP   hl   
0531   C5                     PUSH   bc   ; Preserve the IP
0532   44                     LD   b,h   ; bc = 2nd value
0533   4D                     LD   c,l   
0534   21 00 00               LD   hl,0   
0537   3E 10                  LD   a,16   
0539                MUL2:        
0539   29                     ADD   hl,hl   
053A   CB 13                  RL   e   
053C   CB 12                  RL   d   
053E   30 04                  JR   nc,$+6   
0540   09                     ADD   hl,bc   
0541   30 01                  JR   nc,$+3   
0543   13                     INC   de   
0544   3D                     DEC   a   
0545   20 F2                  JR   nz,mul2   
0547   C1                     POP   bc   ; Restore the IP
0548   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0549   DD E9                  JP   (ix)   
054B                             ;*******************************************************************
054B                             ; Subroutines
054B                             ;*******************************************************************
054B                PROMPT:      
054B   CD 54 07               CALL   printStr   
054E   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0553   C9                     RET      
0554                PUTSTR0:      
0554   CD 85 00               CALL   putchar   
0557   23                     INC   hl   
0558                PUTSTR:      
0558   7E                     LD   a,(hl)   
0559   B7                     OR   a   
055A   20 F8                  JR   nz,putStr0   
055C   C9                     RET      
055D                             ; rpush:
055D                             ;     dec ix
055D                             ;     ld (ix+0),h
055D                             ;     dec ix
055D                             ;     ld (ix+0),l
055D                             ;     ret
055D                             ; rpop:
055D                             ;     ld l,(ix+0)
055D                             ;     inc ix
055D                             ;     ld h,(ix+0)
055D                             ;     inc ix
055D                             ; rpop2:
055D                             ;     ret
055D                CRLF:        
055D   CD 54 07               CALL   printStr   
0560   0D 0A 00               .CSTR   "\r\n"   
0563   C9                     RET      
0564                INIT:        
0564   DD 21 5F 02            LD   ix,next   
0568   FD 21 00 1A            LD   iy,DSTACK   
056C   21 80 01               LD   hl,isysVars   
056F   11 7E 1B               LD   de,sysVars   
0572   01 10 00               LD   bc,8 * 2   
0575   ED B0                  LDIR      
0577                             ; ld hl,data                  ; init namespaces to 0 using ldir
0577                             ; ld de,hl
0577                             ; inc de
0577                             ; ld (hl),0
0577                             ; ld bc,DATASIZE
0577                             ; ldir
0577   3E FF                  LD   a,UNUSED   
0579   06 00                  LD   b,0   
057B   21 00 1D               LD   hl,hashSlots   
057E                INIT1:       
057E   77                     LD   (hl),a   
057F   23                     INC   hl   
0580   10 FC                  DJNZ   init1   
0582   CD 48 0A               CALL   define   
0585   05 61 64 64 72 00      .PSTR   "addr",0   
058B   38 0A                  DW   addr_   
058D   CD 48 0A               CALL   define   
0590   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0597   49 09                  DW   bytes   
0599   CD 48 0A               CALL   define   
059C   05 63 61 73 65 00      .PSTR   "case",0   
05A2   13 09                  DW   case   
05A4   CD 48 0A               CALL   define   
05A7   04 64 65 66 00         .PSTR   "def",0   
05AC   26 0A                  DW   def   
05AE   CD 48 0A               CALL   define   
05B1   05 65 78 65 63 00      .PSTR   "exec",0   
05B7   D3 07                  DW   exec   
05B9   CD 48 0A               CALL   define   
05BC   06 66 61 6C 73 65 00   .PSTR   "false",0   
05C3   A8 04                  DW   false_   
05C5   CD 48 0A               CALL   define   
05C8   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
05D0   2D 05                  DW   filter_   
05D2   CD 48 0A               CALL   define   
05D5   04 67 65 74 00         .PSTR   "get",0   
05DA   2D 05                  DW   get_   
05DC   CD 48 0A               CALL   define   
05DF   05 68 61 73 68 00      .PSTR   "hash",0   
05E5   1B 0A                  DW   hash   
05E7   CD 48 0A               CALL   define   
05EA   03 69 6E 00            .PSTR   "in",0   
05EE   97 08                  DW   in   
05F0   CD 48 0A               CALL   define   
05F3   03 69 66 00            .PSTR   "if",0   
05F7   D7 08                  DW   if   
05F9   CD 48 0A               CALL   define   
05FC   05 69 66 74 65 00      .PSTR   "ifte",0   
0602   DC 08                  DW   ifte   
0604   CD 48 0A               CALL   define   
0607   04 6B 65 79 00         .PSTR   "key",0   
060C   71 04                  DW   key_   
060E   CD 48 0A               CALL   define   
0611   04 6C 65 74 00         .PSTR   "let",0   
0616   2D 05                  DW   let_   
0618   CD 48 0A               CALL   define   
061B   04 6D 61 70 00         .PSTR   "map",0   
0620   2D 05                  DW   map_   
0622   CD 48 0A               CALL   define   
0625   04 6E 65 67 00         .PSTR   "neg",0   
062A   93 04                  DW   neg_   
062C   CD 48 0A               CALL   define   
062F   06 70 72 69 6E 74 00   .PSTR   "print",0   
0636   2D 05                  DW   print_   
0638   CD 48 0A               CALL   define   
063B   05 66 72 61 63 00      .PSTR   "frac",0   
0641   CB 0A                  DW   frac   
0643   CD 48 0A               CALL   define   
0646   05 73 63 61 6E 00      .PSTR   "scan",0   
064C   2D 05                  DW   scan_   
064E   CD 48 0A               CALL   define   
0651   04 73 65 74 00         .PSTR   "set",0   
0656   2D 05                  DW   set_   
0658   CD 48 0A               CALL   define   
065B   06 73 68 69 66 74 00   .PSTR   "shift",0   
0662   2D 05                  DW   shift_   
0664   CD 48 0A               CALL   define   
0667   05 73 71 72 74 00      .PSTR   "sqrt",0   
066D   D1 0A                  DW   sqrt1   
066F   CD 48 0A               CALL   define   
0672   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
067A   FF 08                  DW   switch   
067C   CD 48 0A               CALL   define   
067F   05 74 72 75 65 00      .PSTR   "true",0   
0685   BC 04                  DW   true_   
0687   CD 48 0A               CALL   define   
068A   06 77 68 69 6C 65 00   .PSTR   "while",0   
0691   2D 05                  DW   while_   
0693   CD 48 0A               CALL   define   
0696   06 77 6F 72 64 73 00   .PSTR   "words",0   
069D   43 09                  DW   words   
069F   C9                     RET      
06A0                NUM:         
06A0   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06A3   0A                     LD   a,(bc)   ; Get numeral or -
06A4   FE 2D                  CP   "-"   
06A6   20 01                  JR   nz,num0   
06A8   03                     INC   bc   ; move to next char, no flags affected
06A9                NUM0:        
06A9   08                     EX   af,af'   ; save zero flag = 0 for later
06AA                NUM1:        
06AA   0A                     LD   a,(bc)   ; read digit
06AB   D6 30                  SUB   "0"   ; less than 0?
06AD   38 13                  JR   c,num2   ; not a digit, exit loop
06AF   FE 0A                  CP   10   ; greater that 9?
06B1   30 0F                  JR   nc,num2   ; not a digit, exit loop
06B3   03                     INC   bc   ; inc IP
06B4   54 5D                  LD   de,hl   ; multiply hl * 10
06B6   29                     ADD   hl,hl   
06B7   29                     ADD   hl,hl   
06B8   19                     ADD   hl,de   
06B9   29                     ADD   hl,hl   
06BA   85                     ADD   a,l   ; add digit in a to hl
06BB   6F                     LD   l,a   
06BC   3E 00                  LD   a,0   
06BE   8C                     ADC   a,h   
06BF   67                     LD   h,a   
06C0   18 E8                  JR   num1   
06C2                NUM2:        
06C2   0B                     DEC   bc   
06C3   08                     EX   af,af'   ; restore zero flag
06C4   20 07                  JR   nz,num3   
06C6   EB                     EX   de,hl   ; negate the value of hl
06C7   21 00 00               LD   hl,0   
06CA   B7                     OR   a   ; jump to sub2
06CB   ED 52                  SBC   hl,de   
06CD                NUM3:        
06CD   E5                     PUSH   hl   ; Put the number on the stack
06CE   DD E9                  JP   (ix)   ; and process the next character
06D0                HEXNUM:      ; 
06D0   21 00 00               LD   hl,0   ; Clear hl to accept the number
06D3                HEXNUM1:      
06D3   03                     INC   bc   
06D4   0A                     LD   a,(bc)   ; Get the character which is a numeral
06D5   CB 77                  BIT   6,a   ; is it uppercase alpha?
06D7   28 02                  JR   z,hexnum2   ; no a decimal
06D9   D6 07                  SUB   7   ; sub 7  to make $a - $F
06DB                HEXNUM2:      
06DB   D6 30                  SUB   $30   ; Form decimal digit
06DD   DA C2 06               JP   c,num2   
06E0   FE 10                  CP   $0F+1   
06E2   D2 C2 06               JP   nc,num2   
06E5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06E6   29                     ADD   hl,hl   ; 4X
06E7   29                     ADD   hl,hl   ; 8X
06E8   29                     ADD   hl,hl   ; 16X
06E9   85                     ADD   a,l   ; add into bottom of hl
06EA   6F                     LD   l,a   ; 
06EB   18 E6                  JR   hexnum1   
06ED                PRTDEC:      ;=34 ; removes leading zeros
06ED                             ; ld a,h
06ED                             ; or l
06ED                             ; ld a, "0"
06ED                             ; jp z, putchar
06ED   CB 7C                  BIT   7,h   
06EF   28 0B                  JR   z,prtdec0   
06F1   3E 2D                  LD   a,"-"   
06F3   CD 85 00               CALL   putchar   
06F6   AF                     XOR   a   
06F7   95                     SUB   l   
06F8   6F                     LD   l,a   
06F9   9F                     SBC   a,a   
06FA   94                     SUB   h   
06FB   67                     LD   h,a   
06FC                PRTDEC0:      
06FC   C5                     PUSH   bc   
06FD   0E 00                  LD   c,0   ; leading zeros flag = false
06FF   11 F0 D8               LD   de,-10000   
0702   CD 1E 07               CALL   prtdec1   
0705   11 18 FC               LD   de,-1000   
0708   CD 1E 07               CALL   prtdec1   
070B   11 9C FF               LD   de,-100   
070E   CD 1E 07               CALL   prtdec1   
0711   1E F6                  LD   e,-10   
0713   CD 1E 07               CALL   prtdec1   
0716   0C                     INC   c   ; flag = true for at least digit
0717   1E FF                  LD   e,-1   
0719   CD 1E 07               CALL   prtdec1   
071C   C1                     POP   bc   
071D   C9                     RET      
071E                PRTDEC1:      
071E   06 2F                  LD   b,"0"-1   
0720                PRTDEC2:      
0720   04                     INC   b   
0721   19                     ADD   hl,de   
0722   38 FC                  JR   c,prtdec2   
0724   ED 52                  SBC   hl,de   
0726   3E 30                  LD   a,"0"   
0728   B8                     CP   b   
0729   20 05                  JR   nz,prtdec3   
072B   AF                     XOR   a   
072C   B1                     OR   c   
072D   C8                     RET   z   
072E   18 01                  JR   prtdec4   
0730                PRTDEC3:      
0730   0C                     INC   c   
0731                PRTDEC4:      
0731   78                     LD   a,b   
0732   C3 85 00               JP   putchar   
0735                             ; 
0735                PRTHEX:      
0735                             ; Display hl as a 16-bit number in hex.
0735   C5                     PUSH   bc   ; preserve the IP
0736   7C                     LD   a,h   
0737   CD 40 07               CALL   prthex2   
073A   7D                     LD   a,l   
073B   CD 40 07               CALL   prthex2   
073E   C1                     POP   bc   
073F   C9                     RET      
0740                PRTHEX2:      
0740   4F                     LD   c,a   
0741   1F                     RRA      
0742   1F                     RRA      
0743   1F                     RRA      
0744   1F                     RRA      
0745   CD 49 07               CALL   prthex3   
0748   79                     LD   a,c   
0749                PRTHEX3:      
0749   E6 0F                  AND   0x0F   
074B   C6 90                  ADD   a,0x90   
074D   27                     DAA      
074E   CE 40                  ADC   a,0x40   
0750   27                     DAA      
0751   C3 85 00               JP   putchar   
0754                PRINTSTR:      
0754   E3                     EX   (sp),hl   ; swap			
0755   CD 58 05               CALL   putStr   
0758   23                     INC   hl   ; inc past null
0759   E3                     EX   (sp),hl   ; put it back	
075A   C9                     RET      
075B                LOOKUPREF:      
075B   16 00                  LD   d,0   
075D                LOOKUPREF0:      
075D   FE 61                  CP   "a"   
075F   30 06                  JR   nc,lookupRef2   
0761                LOOKUPREF1:      
0761   D6 61                  SUB   "a"   
0763   1E 00                  LD   e,0   
0765   18 04                  JR   lookupRef3   
0767                LOOKUPREF2:      
0767   D6 61                  SUB   "a"   
0769   1E 34                  LD   e,26*2   
076B                LOOKUPREF3:      
076B   87                     ADD   a,a   
076C   83                     ADD   a,e   
076D   21 C0 1B               LD   hl,DATA   
0770   85                     ADD   a,l   
0771   6F                     LD   l,a   
0772   3E 00                  LD   a,0   
0774   8C                     ADC   a,h   
0775   67                     LD   h,a   
0776   AF                     XOR   a   
0777   B3                     OR   e   ; sets z flag if a-z
0778   C9                     RET      
0779                             ; **************************************************************************
0779                             ; calculate nesting value
0779                             ; a is char to be tested,
0779                             ; e is the nesting value (initially 0)
0779                             ; e is increased by ( and [
0779                             ; e is decreased by ) and ]
0779                             ; e has its bit 7 toggled by `
0779                             ; limited to 127 levels
0779                             ; **************************************************************************
0779                NESTING:      
0779   FE 22                  CP   $22   ; quote char
077B   20 0A                  JR   nz,nesting1   
077D   CB 7B                  BIT   7,e   
077F   28 03                  JR   z,nesting1a   
0781   CB BB                  RES   7,e   
0783   C9                     RET      
0784                NESTING1A:      
0784   CB FB                  SET   7,e   
0786   C9                     RET      
0787                NESTING1:      
0787   CB 7B                  BIT   7,e   
0789   C0                     RET   nz   
078A   FE 7B                  CP   "{"   
078C   28 08                  JR   z,nesting2   
078E   FE 5B                  CP   "["   
0790   28 04                  JR   z,nesting2   
0792   FE 28                  CP   "("   
0794   20 02                  JR   nz,nesting3   
0796                NESTING2:      
0796   1C                     INC   e   
0797   C9                     RET      
0798                NESTING3:      
0798   FE 7D                  CP   "}"   
079A   28 07                  JR   z,nesting4   
079C   FE 5D                  CP   "]"   
079E   28 03                  JR   z,nesting4   
07A0   FE 29                  CP   ")"   
07A2   C0                     RET   nz   
07A3                NESTING4:      
07A3   1D                     DEC   e   
07A4   C9                     RET      
07A5                             ; 
07A5                STRDEF:      
07A5   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
07A9   D5                     PUSH   de   ; save start of string
07AA   03                     INC   bc   ; point to next char
07AB   18 03                  JR   strDef2   
07AD                STRDEF1:      
07AD   12                     LD   (de),a   
07AE   13                     INC   de   ; increase count
07AF   03                     INC   bc   ; point to next char
07B0                STRDEF2:      
07B0   0A                     LD   a,(bc)   
07B1   FE 27                  CP   "'"   ; ' is the string terminator
07B3   20 F8                  JR   nz,strDef1   
07B5   AF                     XOR   a   ; write null to terminate string
07B6   12                     LD   (de),a   
07B7   13                     INC   de   
07B8   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
07BC   DD E9                  JP   (ix)   
07BE                CHAR:        
07BE   21 00 00               LD   hl,0   ; if `` is empty
07C1                CHAR1:       
07C1   03                     INC   bc   ; point to next char
07C2   0A                     LD   a,(bc)   
07C3   FE 60                  CP   "`"   ; ` is the string terminator
07C5   28 09                  JR   z,char3   
07C7   FE 5C                  CP   $5c   ; \ is the escape
07C9   20 02                  JR   nz,char2   
07CB   03                     INC   bc   
07CC   0A                     LD   a,(bc)   
07CD                CHAR2:       
07CD   6F                     LD   l,a   
07CE   18 F1                  JR   char1   
07D0                CHAR3:       
07D0   E5                     PUSH   hl   
07D1                             ; dec bc
07D1   DD E9                  JP   (ix)   
07D3                EXEC:        ; execute lambda at pointer
07D3   E1                     POP   hl   ; hl = pointer to lambda
07D4                EXEC1:       
07D4   7C                     LD   a,h   ; skip if destination address is null
07D5   B5                     OR   l   
07D6   28 0E                  JR   z,exec3   
07D8                EXEC2:       
07D8   C5                     PUSH   bc   ; push IP
07D9   FD E5                  PUSH   iy   ; push SCP (scope pointer)
07DB   FD E5                  PUSH   iy   ; push BP
07DD   FD 21 00 00            LD   iy,0   ; BP = SP
07E1   FD 39                  ADD   iy,sp   
07E3   44 4D                  LD   bc,hl   ; IP = pointer to lambda
07E5   0B                     DEC   bc   ; dec to prepare for next routine
07E6                EXEC3:       
07E6   DD E9                  JP   (ix)   
07E8                LAMBDA:      
07E8   03                     INC   bc   
07E9   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
07EC   E5                     PUSH   hl   
07ED   16 01                  LD   d,1   ; nesting: count first parenthesis
07EF                LAMBDA1:      ; Skip to end of definition
07EF   0A                     LD   a,(bc)   ; Get the next character
07F0   03                     INC   bc   ; Point to next character
07F1   77                     LD   (hl),a   
07F2   23                     INC   hl   
07F3   FE 27                  CP   "'"   
07F5   28 1C                  JR   z,lambda2   
07F7   FE 28                  CP   "("   
07F9   28 18                  JR   z,lambda2   
07FB   FE 29                  CP   ")"   
07FD   28 14                  JR   z,lambda2   
07FF   FE 7B                  CP   "{"   
0801   28 10                  JR   z,lambda2   
0803   FE 7D                  CP   "}"   ; Is it the end of the definition?
0805   28 0C                  JR   z,lambda2   
0807   FE 5B                  CP   "["   
0809   28 08                  JR   z,lambda2   
080B   FE 5D                  CP   "]"   
080D   28 04                  JR   z,lambda2   
080F   FE 60                  CP   "`"   
0811   20 DC                  JR   nz,lambda1   
0813                LAMBDA2:      
0813   14                     INC   d   
0814   CB 42                  BIT   0,d   ; balanced?
0816   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0818   FE 7D                  CP   "}"   ; Is it the end of the definition?
081A   20 D3                  JR   nz,lambda1   ; get the next element
081C   0B                     DEC   bc   
081D   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0820   DD E9                  JP   (ix)   
0822                LAMBDAEND:      
0822   E1                     POP   hl   ; hl = last result
0823   FD 54                  LD   d,iyh   ; de = BP
0825   FD 5D                  LD   e,iyl   
0827   EB                     EX   de,hl   ; hl = BP, de = result
0828   F9                     LD   sp,hl   ; sp = BP
0829   E1                     POP   hl   ; hl = old BP
082A   C1                     POP   bc   ; pop scope ptr (discard)
082B   C1                     POP   bc   ; bc = IP
082C   F9                     LD   sp,hl   ; sp = old BP
082D   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0831   FD 39                  ADD   iy,sp   
0833   D5                     PUSH   de   ; push result
0834   DD E9                  JP   (ix)   
0836                BLOCK:       
0836   03                     INC   bc   
0837   C5                     PUSH   bc   ; return first opcode of block
0838   16 01                  LD   d,1   ; nesting: count first parenthesis
083A                BLOCK1:      ; Skip to end of definition
083A   0A                     LD   a,(bc)   ; Get the next character
083B   03                     INC   bc   ; Point to next character
083C   FE 27                  CP   "'"   
083E   28 1C                  JR   z,block2   
0840   FE 28                  CP   "("   
0842   28 18                  JR   z,block2   
0844   FE 29                  CP   ")"   
0846   28 14                  JR   z,block2   
0848   FE 7B                  CP   "{"   
084A   28 10                  JR   z,block2   
084C   FE 7D                  CP   "}"   
084E   28 0C                  JR   z,block2   
0850   FE 5B                  CP   "["   
0852   28 08                  JR   z,block2   
0854   FE 5D                  CP   "]"   
0856   28 04                  JR   z,block2   
0858   FE 60                  CP   "`"   
085A   20 DE                  JR   nz,block1   
085C                BLOCK2:      
085C   14                     INC   d   
085D   CB 42                  BIT   0,d   ; balanced?
085F   20 D9                  JR   nz,block1   ; not balanced, get the next element
0861   FE 29                  CP   ")"   ; Is it the end of the block?
0863   20 D5                  JR   nz,block1   ; get the next element
0865   0B                     DEC   bc   
0866   DD E9                  JP   (ix)   
0868                BLOCKEND:      
0868   E1                     POP   hl   ; hl = last result
0869   FD 54                  LD   d,iyh   ; de = BP
086B   FD 5D                  LD   e,iyl   
086D   EB                     EX   de,hl   ; hl = BP, de = result
086E   F9                     LD   sp,hl   ; sp = BP
086F   E1                     POP   hl   ; hl = old BP
0870   C1                     POP   bc   ; pop SCP (discard)
0871   C1                     POP   bc   ; bc = IP
0872   F9                     LD   sp,hl   ; sp = old BP
0873   FD 21 00 00            LD   iy,0   ; iy = sp
0877   FD 39                  ADD   iy,sp   
0879   D5                     PUSH   de   ; push result
087A   DD E9                  JP   (ix)   
087C                ARG:         
087C   03                     INC   bc   ; get next char
087D   0A                     LD   a,(bc)   
087E   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0880   E6 07                  AND   $07   ; mask
0882   87                     ADD   a,a   ; double
0883   6F                     LD   l,a   ; hl = offset into args
0884   26 00                  LD   h,0   
0886   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0889   FD 56 03               LD   d,(iy+3)   
088C   EB                     EX   de,hl   ; hl = SCP - offset
088D   B7                     OR   a   
088E   ED 52                  SBC   hl,de   
0890   2B                     DEC   hl   ; de = arg
0891   56                     LD   d,(hl)   
0892   2B                     DEC   hl   
0893   5E                     LD   e,(hl)   
0894   D5                     PUSH   de   ; push arg
0895   DD E9                  JP   (ix)   
0897                             ; 
0897                IN:          
0897   E1                     POP   hl   ; hl = string
0898   D1                     POP   de   ; de = char
0899                IN1:         
0899   7E                     LD   a,(hl)   
089A   23                     INC   hl   
089B   FE 00                  CP   0   ; is end of string
089D   28 04                  JR   z,in2   
089F   BB                     CP   e   
08A0   20 F7                  JR   nz,in1   
08A2   B7                     OR   a   ; a is never 0, or a resets zero flag
08A3                IN2:         
08A3   21 00 00               LD   hl,0   ; hl = result
08A6   28 01                  JR   z,in3   
08A8   2B                     DEC   hl   ; if nz de = $ffff
08A9                IN3:         
08A9   E5                     PUSH   hl   ; push result
08AA   DD E9                  JP   (ix)   
08AC                NEWADD2:      
08AC   C5                     PUSH   bc   ; push IP
08AD   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08B0   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08B3   D5                     PUSH   de   ; push SCP
08B4   FD E5                  PUSH   iy   ; push base pointer
08B6   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
08BA   FD 39                  ADD   iy,sp   ; 
08BC   FD 56 FF               LD   d,(iy-1)   
08BF   FD 5E FE               LD   e,(iy-2)   
08C2   FD 66 FD               LD   h,(iy-3)   
08C5   FD 6E FC               LD   l,(iy-4)   
08C8   19                     ADD   hl,de   ; hl = hl + de
08C9   EB                     EX   de,hl   ; de = result
08CA   E1                     POP   hl   ; hl = old BP
08CB   C1                     POP   bc   ; pop SCP (discard)
08CC   C1                     POP   bc   ; bc = IP
08CD   F9                     LD   sp,hl   ; sp = old BP
08CE   FD 21 00 00            LD   iy,0   
08D2   FD 39                  ADD   iy,sp   
08D4   D5                     PUSH   de   ; push result
08D5   DD E9                  JP   (ix)   
08D7                IF:          
08D7   11 00 00               LD   de,0   ; null pointer for else
08DA   18 01                  JR   ifte1   
08DC                IFTE:        
08DC   D1                     POP   de   ; de = else
08DD                IFTE1:       
08DD   E1                     POP   hl   ; hl = then
08DE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
08DF   23                     INC   hl   ; check for true
08E0   7C                     LD   a,h   
08E1   B5                     OR   l   
08E2   E1                     POP   hl   ; hl = then
08E3   28 01                  JR   z,ifte2   
08E5   EB                     EX   de,hl   ; condition = false, hl = else
08E6                IFTE2:       
08E6   7C                     LD   a,h   ; check if hl is null
08E7   B5                     OR   l   
08E8   28 13                  JR   z,ifte3   
08EA   C5                     PUSH   bc   ; push IP
08EB   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08EE   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08F1   D5                     PUSH   de   ; push SCP
08F2   FD E5                  PUSH   iy   ; push BP
08F4   FD 21 00 00            LD   iy,0   ; iy = sp
08F8   FD 39                  ADD   iy,sp   
08FA   44 4D                  LD   bc,hl   ; IP = then
08FC   0B                     DEC   bc   
08FD                IFTE3:       
08FD   DD E9                  JP   (ix)   
08FF                SWITCH:      
08FF   E1                     POP   hl   ; get condition from stack
0900   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0901   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0904   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0907   D5                     PUSH   de   ; push SCP
0908   FD E5                  PUSH   iy   ; push BP
090A   FD 21 00 00            LD   iy,0   ; BP = SP
090E   FD 39                  ADD   iy,sp   
0910   E5                     PUSH   hl   ; push condition as first arg of new frame
0911   DD E9                  JP   (ix)   
0913                CASE:        
0913   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0916   FD 6E FE               LD   l,(iy-2)   
0919   23                     INC   hl   ; hl -= 1 index from second arg
091A   29                     ADD   hl,hl   ; hl *= 2 word offset
091B   FD 54                  LD   d,iyh   ; hl = BP, de = offset
091D   FD 5D                  LD   e,iyl   
091F   EB                     EX   de,hl   
0920   B7                     OR   a   ; hl = BP - offset
0921   ED 52                  SBC   hl,de   
0923   54 5D                  LD   de,hl   ; save arg ptr
0925   2B                     DEC   hl   ; hl += 2
0926   2B                     DEC   hl   
0927   B7                     OR   a   ; arg ptr - stack pointer
0928   ED 72                  SBC   hl,sp   
092A   30 03                  JR   nc,case0   
092C   D1                     POP   de   ; pop last arg
092D   18 05                  JR   case1   
092F                CASE0:       
092F   EB                     EX   de,hl   
0930   2B                     DEC   hl   ; de = arg
0931   56                     LD   d,(hl)   
0932   2B                     DEC   hl   
0933   5E                     LD   e,(hl)   
0934                CASE1:       
0934   7A                     LD   a,d   ; is arg == null ? then skip
0935   B3                     OR   e   
0936   28 09                  JR   z,case2   
0938   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
093B   FD 70 05               LD   (iy+5),b   
093E   42 4B                  LD   bc,de   ; IP = arg
0940   0B                     DEC   bc   
0941                CASE2:       
0941   DD E9                  JP   (ix)   
0943                WORDS:       
0943   21 02 00               LD   hl,2   
0946   C3 49 09               JP   bytes   
0949                BYTES:       
0949   21 01 00               LD   hl,1   
094C                BYTES1:      
094C   22 80 1B               LD   (vDataWidth),hl   
094F   DD E9                  JP   (ix)   
0951                ARRAY:       
0951   C5                     PUSH   bc   ; create stack frame, push IP
0952   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0955   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0958   D5                     PUSH   de   ; push SCP
0959   FD E5                  PUSH   iy   ; push BP
095B   FD 21 00 00            LD   iy,0   ; BP = SP
095F   FD 39                  ADD   iy,sp   
0961   DD E9                  JP   (ix)   
0963                ARRAYEND:      
0963   FD 54                  LD   d,iyh   ; de = BP
0965   FD 5D                  LD   e,iyl   
0967   62 6B                  LD   hl,de   ; hl = de
0969   B7                     OR   a   
096A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
096C   C5                     PUSH   bc   ; bc' = IP
096D   D9                     EXX      
096E   C1                     POP   bc   
096F   D9                     EXX      
0970   44 4D                  LD   bc,hl   ; bc = count
0972   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0975   71                     LD   (hl),c   ; write count before array data
0976   23                     INC   hl   
0977   70                     LD   (hl),b   
0978   23                     INC   hl   
0979   E5                     PUSH   hl   ; hl = ptr to array (index 0)
097A   D9                     EXX      
097B   E1                     POP   hl   ; hl' = ptr to array (index 0)
097C   D9                     EXX      
097D   3A 80 1B               LD   a,(vDataWidth)   
0980   FE 01                  CP   1   ; byte?
0982   20 0D                  JR   nz,arrayEnd2   
0984   EB                     EX   de,hl   
0985                ARRAYEND1:      
0985   1B                     DEC   de   
0986   1B                     DEC   de   
0987   1A                     LD   a,(de)   
0988   77                     LD   (hl),a   
0989   23                     INC   hl   
098A   0B                     DEC   bc   
098B   79                     LD   a,c   
098C   B0                     OR   b   
098D   20 F6                  JR   nz,arrayEnd1   
098F   18 10                  JR   arrayEnd4   
0991                ARRAYEND2:      
0991   1B                     DEC   de   
0992   1A                     LD   a,(de)   
0993   08                     EX   af,af'   
0994   1B                     DEC   de   
0995   1A                     LD   a,(de)   
0996   77                     LD   (hl),a   
0997   23                     INC   hl   
0998   08                     EX   af,af'   
0999   1A                     LD   a,(de)   
099A   77                     LD   (hl),a   
099B   23                     INC   hl   
099C   0B                     DEC   bc   
099D   79                     LD   a,c   
099E   B0                     OR   b   
099F   20 F0                  JR   nz,arrayEnd2   
09A1                ARRAYEND4:      
09A1   FD 54                  LD   d,iyh   ; de = BP
09A3   FD 5D                  LD   e,iyl   
09A5   EB                     EX   de,hl   ; hl = BP, de = result
09A6   F9                     LD   sp,hl   ; sp = BP
09A7   E1                     POP   hl   ; hl = old BP
09A8   C1                     POP   bc   ; pop SCP (discard)
09A9   C1                     POP   bc   ; bc = IP
09AA   F9                     LD   sp,hl   ; sp = old BP
09AB   FD 21 00 00            LD   iy,0   ; iy = sp
09AF   FD 39                  ADD   iy,sp   
09B1   D9                     EXX      
09B2   E5                     PUSH   hl   
09B3   C5                     PUSH   bc   
09B4   D9                     EXX      
09B5   C1                     POP   bc   
09B6   DD E9                  JP   (ix)   
09B8                             ; updateEntry:
09B8                             ;     ld bc,
09B8                             ;     pop hl                          ; pointer to args
09B8                             ;     ld e,(hl)
09B8                             ;     ret
09B8                             ; hash C-string in BC, result in HL
09B8                HASHSTR:      
09B8   21 00 00               LD   hl,0   
09BB                HASHSTR1:      
09BB   0A                     LD   a,(bc)   ; load next char
09BC   03                     INC   bc   
09BD   FE 00                  CP   0   ; null?
09BF   C8                     RET   z   
09C0                HASHSTR2:      
09C0   16 00                  LD   d,0   
09C2   5F                     LD   e,a   
09C3   19                     ADD   hl,de   
09C4   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
09C6   29                     ADD   hl,hl   ; shift left
09C7   19                     ADD   hl,de   ; add
09C8   29                     ADD   hl,hl   ; shift left
09C9   29                     ADD   hl,hl   ; shift left
09CA   29                     ADD   hl,hl   ; shift left
09CB   29                     ADD   hl,hl   ; shift left
09CC   29                     ADD   hl,hl   ; shift left
09CD   29                     ADD   hl,hl   ; shift left
09CE   19                     ADD   hl,de   ; add
09CF   18 EA                  JR   hashStr1   
09D1                             ; add entry to hash slots and hash pointers
09D1                             ; bc = hash (b = hi, c = lo), de = addr
09D1                             ; sets carry if successful
09D1                DEFINEENTRY:      
09D1   CB 21                  SLA   c   ; lo = lo * 2
09D3   69                     LD   l,c   ; lo1 = lo
09D4   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09D6                DEFINEENTRY0:      
09D6   7E                     LD   a,(hl)   ; a = (lo1)
09D7   FE FF                  CP   UNUSED   ; is it unused?
09D9   28 12                  JR   z,defineEntry3   ; yes, add entry
09DB   79                     LD   a,c   ; a = lo
09DC   BE                     CP   (hl)   ; compare (lo1) with lo
09DD   20 06                  JR   nz,defineEntry1   ; no match loop around
09DF   2C                     INC   l   
09E0   78                     LD   a,b   ; a = hi
09E1   BE                     CP   (hl)   ; compare (lo1+1) with hi
09E2   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
09E4   2D                     DEC   l   ; restore l
09E5                DEFINEENTRY1:      
09E5   2C                     INC   l   ; try next entry
09E6   2C                     INC   l   
09E7   79                     LD   a,c   ; compare lo and lo1
09E8   BD                     CP   l   ; if equal then there's no space left, reject
09E9   20 EB                  JR   nz,defineEntry0   
09EB                DEFINEENTRY2:      
09EB   3F                     CCF      ; clear carry flag, failure
09EC   C9                     RET      
09ED                DEFINEENTRY3:      ; new entry
09ED   71                     LD   (hl),c   ; (lo1) = hash lo
09EE   23                     INC   hl   
09EF   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
09F0   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
09F2   72                     LD   (hl),d   
09F3   2B                     DEC   hl   
09F4   73                     LD   (hl),e   ; (slot + 2) = address
09F5   37                     SCF      ; set carry flag, success
09F6   C9                     RET      
09F7                             ; looks up hash and returns address
09F7                             ; bc = hash
09F7                             ; returns addr in hl, sets carry if successful
09F7                LOOKUPENTRY:      
09F7   CB 21                  SLA   c   ; lo = lo * 2
09F9   69                     LD   l,c   ; lo1 = lo
09FA   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09FC                LOOKUPENTRY0:      
09FC   7E                     LD   a,(hl)   ; a = (hl), slot
09FD   FE FF                  CP   UNUSED   ; is it unused?
09FF   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0A01   79                     LD   a,c   ; a = lo
0A02   BE                     CP   (hl)   ; compare (lo1) with lo
0A03   20 06                  JR   nz,lookupEntry1   ; no match loop around
0A05   2C                     INC   l   
0A06   78                     LD   a,b   ; a = hi
0A07   BE                     CP   (hl)   ; compare (lo1+1) with hi
0A08   28 09                  JR   z,lookupEntry3   
0A0A   2D                     DEC   l   
0A0B                LOOKUPENTRY1:      
0A0B   2C                     INC   l   
0A0C   2C                     INC   l   
0A0D   79                     LD   a,c   
0A0E   BD                     CP   l   ; no space left, reject
0A0F   20 EB                  JR   nz,lookupEntry0   
0A11                LOOKUPENTRY2:      
0A11   3F                     CCF      ; clear carry flag, failure
0A12   C9                     RET      
0A13                LOOKUPENTRY3:      
0A13   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0A15   56                     LD   d,(hl)   
0A16   2D                     DEC   l   ; restore l
0A17   5E                     LD   e,(hl)   ; (slot + 2) = address
0A18   EB                     EX   de,hl   
0A19   37                     SCF      
0A1A   C9                     RET      
0A1B                             ; str -- num
0A1B                HASH:        
0A1B   E1                     POP   hl   
0A1C   C5                     PUSH   bc   
0A1D   44 4D                  LD   bc,hl   
0A1F   CD B8 09               CALL   hashStr   
0A22   C1                     POP   bc   
0A23   E5                     PUSH   hl   
0A24   DD E9                  JP   (ix)   
0A26                             ; str addr -- bool
0A26                DEF:         
0A26   60 69                  LD   hl,bc   ; hl = IP
0A28   D1                     POP   de   ; de = addr
0A29   C1                     POP   bc   ; bc = hash
0A2A   E5                     PUSH   hl   
0A2B   CD D1 09               CALL   defineEntry   
0A2E   21 00 00               LD   hl,0   ; if c return TRUE
0A31   30 01                  JR   nc,def1   
0A33   2B                     DEC   hl   
0A34                DEF1:        
0A34   C1                     POP   bc   
0A35   E5                     PUSH   hl   
0A36   DD E9                  JP   (ix)   
0A38                             ; str -- addr
0A38                ADDR_:       
0A38   E1                     POP   hl   ; hl = hash
0A39   C5                     PUSH   bc   
0A3A   44 4D                  LD   bc,hl   
0A3C   CD F7 09               CALL   lookupEntry   
0A3F   38 03                  JR   c,addr1   
0A41   21 00 00               LD   hl,0   
0A44                ADDR1:       
0A44   C1                     POP   bc   
0A45   E5                     PUSH   hl   
0A46   DD E9                  JP   (ix)   
0A48                DEFINE:      
0A48   E1                     POP   hl   
0A49   7E                     LD   a,(hl)   
0A4A   23                     INC   hl   
0A4B   44 4D                  LD   bc,hl   
0A4D   5F                     LD   e,a   
0A4E   16 00                  LD   d,0   
0A50   19                     ADD   hl,de   
0A51   5E                     LD   e,(hl)   
0A52   23                     INC   hl   
0A53   56                     LD   d,(hl)   
0A54   23                     INC   hl   
0A55   E5                     PUSH   hl   ; bc = str
0A56   D5                     PUSH   de   
0A57   CD B8 09               CALL   hashStr   ; hl = hash
0A5A   D1                     POP   de   
0A5B   44 4D                  LD   bc,hl   
0A5D   C3 D1 09               JP   defineEntry   
0A60                SYMBOL:      
0A60   03                     INC   bc   
0A61   11 00 1A               LD   de,PAD   
0A64   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
0A66   18 02                  JR   symbol1   
0A68                SYMBOL0:      ; copy to PAD area
0A68   03                     INC   bc   ; characters that are part of the identifier
0A69   13                     INC   de   
0A6A                SYMBOL1:      ; 0-9 A-Z a-z _
0A6A   0A                     LD   a,(bc)   
0A6B   12                     LD   (de),a   
0A6C   D6 21                  SUB   " " + 1   ; opcodes start above white space
0A6E   6F                     LD   l,a   
0A6F   7E                     LD   a,(hl)   
0A70   FE 2F                  CP   lsb(ident_)   
0A72   28 F4                  JR   z,symbol0   
0A74   FE 00                  CP   lsb(num_)   
0A76   28 F0                  JR   z,symbol0   
0A78   0B                     DEC   bc   
0A79   AF                     XOR   a   
0A7A   12                     LD   (de),a   ; terminate string with null
0A7B   C5                     PUSH   bc   
0A7C   01 00 1A               LD   bc,PAD   
0A7F   CD B8 09               CALL   hashStr   ; hl = hash
0A82   C1                     POP   bc   
0A83   E5                     PUSH   hl   
0A84   DD E9                  JP   (ix)   
0A86                IDENT:       
0A86   11 00 1A               LD   de,PAD   
0A89   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
0A8B   18 02                  JR   ident1   
0A8D                IDENT0:      ; copy to PAD area
0A8D   03                     INC   bc   ; characters that are part of the identifier
0A8E   13                     INC   de   
0A8F                IDENT1:      ; 0-9 A-Z a-z _
0A8F   0A                     LD   a,(bc)   
0A90   12                     LD   (de),a   
0A91   D6 21                  SUB   " " + 1   ; opcodes start above white space
0A93   6F                     LD   l,a   
0A94   7E                     LD   a,(hl)   
0A95   FE 2F                  CP   lsb(ident_)   
0A97   28 F4                  JR   z,ident0   
0A99   FE 00                  CP   lsb(num_)   
0A9B   28 F0                  JR   z,ident0   
0A9D   0B                     DEC   bc   
0A9E   AF                     XOR   a   
0A9F   12                     LD   (de),a   ; terminate string with null
0AA0   C5                     PUSH   bc   
0AA1   01 00 1A               LD   bc,PAD   
0AA4   CD B8 09               CALL   hashStr   ; hl = hash
0AA7   44 4D                  LD   bc,hl   
0AA9   CD F7 09               CALL   lookupEntry   
0AAC   C1                     POP   bc   
0AAD   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0AAF   DD E9                  JP   (ix)   
0AB1                IDENT3:      
0AB1   E9                     JP   (hl)   
0AB2                             ; division subroutine.
0AB2                             ; bc: divisor, de: dividend, hl: remainder
0AB2                DIVIDE:      
0AB2   21 00 00               LD   hl,0   ; zero the remainder
0AB5   3E 10                  LD   a,16   ; loop counter
0AB7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0AB7   CB 21                  SLA   c   
0AB9   CB 10                  RL   b   
0ABB   ED 6A                  ADC   hl,hl   
0ABD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0ABF   38 03                  JR   c,divide2   
0AC1   0C                     INC   c   
0AC2   18 01                  JR   divide3   
0AC4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0AC4   19                     ADD   hl,de   
0AC5                DIVIDE3:      
0AC5   3D                     DEC   a   
0AC6   20 EF                  JR   nz,divide1   
0AC8   50 59                  LD   de,bc   ; result from bc to de
0ACA   C9                     RET      
0ACB                FRAC:        
0ACB   2A 7E 1B               LD   hl,(vFrac)   
0ACE   E5                     PUSH   hl   
0ACF   DD E9                  JP   (ix)   
0AD1                SQRT1:       
0AD1   E1                     POP   hl   
0AD2   C5                     PUSH   bc   
0AD3   CD DE 0A               CALL   squareRoot   
0AD6   ED 43 7E 1B            LD   (vFrac),bc   
0ADA   C1                     POP   bc   
0ADB   D5                     PUSH   de   
0ADC   DD E9                  JP   (ix)   
0ADE                             ; squareroot
0ADE                             ; Input: HL = value
0ADE                             ; Result: DE = square root BC = remainder
0ADE                SQUAREROOT:      
0ADE   01 00 08               LD   bc,0800h   
0AE1   59                     LD   e,c   
0AE2   AF                     XOR   a   
0AE3                SQUAREROOT1:      
0AE3   29                     ADD   hl,hl   
0AE4   CB 11                  RL   c   
0AE6   ED 6A                  ADC   hl,hl   
0AE8   CB 11                  RL   c   
0AEA   30 02                  JR   nc,$+4   
0AEC   CB C5                  SET   0,l   
0AEE   7B                     LD   a,e   
0AEF   87                     ADD   a,a   
0AF0   5F                     LD   e,a   
0AF1   87                     ADD   a,a   
0AF2   CB 45                  BIT   0,l   
0AF4   20 03                  JR   nz,$+5   
0AF6   91                     SUB   c   
0AF7   30 05                  JR   nc,squareRoot4   
0AF9   79                     LD   a,c   
0AFA   93                     SUB   e   
0AFB   1C                     INC   e   
0AFC   93                     SUB   e   
0AFD   4F                     LD   c,a   
0AFE                SQUAREROOT4:      
0AFE   10 E3                  DJNZ   squareRoot1   
0B00   CB 45                  BIT   0,l   
0B02   28 01                  JR   z,squareRoot5   
0B04   04                     INC   b   
0B05                SQUAREROOT5:      
0B05   16 00                  LD   d,0   
0B07   C9                     RET      
0B08                             ;     ; Calculate the square root of the number in HL and store the result in DE
0B08                             ;     ; When the loop finishes, DE contains an approximation of the square root of the number in HL
0B08                             ; calc_sqrt:
0B08                             ;     ; Initialize result to the input number
0B08                             ;     ld de,hl
0B08                             ;     ; Iterate the Babylonian method 10 times
0B08                             ;     ld bc,10
0B08                             ; babylonian_loop:
0B08                             ;     ; Calculate result as the average of result and input / result
0B08                             ;     push de
0B08                             ;     ld bc,hl
0B08                             ;     ; Divide HL by BC and store the result in E
0B08                             ;     ld de,0
0B08                             ; div_loop:
0B08                             ;     or a
0B08                             ;     sbc hl,bc
0B08                             ;     jr c,div_done
0B08                             ;     inc de
0B08                             ;     jp div_loop
0B08                             ; div_done:
0B08                             ;     ; HL now contains the remainder of the division
0B08                             ;     add hl,de
0B08                             ;     ; Shift HL right by 1 bit (divide by 2)
0B08                             ;     srl h
0B08                             ;     rr l
0B08                             ;     pop de
0B08                             ;     ; Repeat loop if counter is not 0
0B08                             ;     dec bc
0B08                             ;     jp nz,babylonian_loop
0B08                             ;     ; Return from subroutine
0B08                             ;     ret
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":hello", $7f54
4000                             ; test ":hello 2 def", TRUE
4000                             ; test ":hello 2 def :hello addr", 2
4000                          ;*Macro unroll:  test ":hello 2 def :there 3 def :hello addr :there addr +", 5
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 64 05               CALL   init   
4006   CD D3 07               CALL   exec   
4009   3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 74 68 65 72 65 20 33 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 20 3A 74 68 65 72 65 20 61 64 64 72 20 2B 00 .CSTR   ":hello 2 def :there 3 def :hello addr :there addr +"   
403D                          ;*Macro unroll:  expect ":hello 2 def :there 3 def :hello addr :there addr +",5
403D   E1                     POP   HL   
403E   E5                     PUSH   HL   
403F   11 05 00               LD   DE,5   
4042   B7                     OR   A   
4043   ED 52                  SBC   HL,DE   
4045   7D                     LD   A,L   
4046   B4                     OR   H   
4047   28 7E                  JR   Z,expectM_0_2214S43   
4049   CD 54 07               CALL   printStr   
404C   43 6F 64 65 3A 20 3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 74 68 65 72 65 20 33 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 20 3A 74 68 65 72 65 20 61 64 64 72 20 2B 00 .CSTR   "Code: ",":hello 2 def :there 3 def :hello addr :there addr +"   
4086   CD 54 07               CALL   printStr   
4089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4098   21 05 00               LD   HL,5   
409B   CD ED 06               CALL   prtdec   
409E   CD 54 07               CALL   printStr   
40A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AE   E1                     POP   hl   
40AF   E5                     PUSH   hl   
40B0   CD ED 06               CALL   prtdec   
40B3   E1                     POP   hl   
40B4   CD 54 07               CALL   printStr   
40B7   20 28 23 00            .CSTR   " (#"   
40BB   CD 35 07               CALL   prthex   
40BE   CD 54 07               CALL   printStr   
40C1   29 0D 0A 00            .CSTR   ")\r\n"   
40C5   76                     HALT      
40C6   00                     .CSTR      
40C7                EXPECTM_0_2214S43:      
40C7   E1                     POP   HL   
40C8                             ; test "10 sqrt", 3
40C8                             ; test "10 sqrt frac", 1
40C8                             ; test "7 3 /", 2
40C8                             ; test "7 3 / frac", 1
40C8                             ; test "1 2 +", 3
40C8                             ; test "'Hello' hash", 1844
40C8                             ; test "'H' {1} def 'H' addr exec", 1
40C8                             ; test "by [`A` `B` `C`]", 0
40C8                             ; test "by [`A` `B` `C`] 1 ge", "B"
40C8                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
40C8                             ; test "wo [10 20 30] 1 ge", 10
40C8                             ; test "wo [10 20 30] 1 50 set 1 get", 50
40C8                             ; test "1 2 +", 3
40C8                             ; test "4 1 2 +", 3
40C8                             ; test "1", 1
40C8                             ; test "2", 2
40C8                             ; test "``", 0
40C8                             ; test "`a`", $61
40C8                             ; test "`\\``", $60
40C8                             ; test "`b` 'cba' in", -1
40C8                             ; test "`x` 'cba' in", 0
40C8                             ; test "5 0 (1) if", 5
40C8                             ; test "0 (1) (2) ife", 2
40C8                             ; test "5 -1 (1) if", 1
40C8                             ; test "-1 (1) (2) ife", 1
40C8                             ; test "9 sw (1) (5) ca", 5
40C8                             ; test "0 sw (1) ca", 1
40C8                             ; test "1 sw (1) (2) (3) ca", 2
40C8                             ; test "5 -1 (2) if", 2
40C8                             ; test "5 0 (2) if", 5
40C8                             ; test "5 0 (0 (2) if) if", 5
40C8                             ; test "5 0 (-1 (2) if) if", 5
40C8                             ; test "5 -1 (2) if", 2
40C8                             ; test "5 -1 (-1 (2) if) if", 2
40C8                             ; test "(1) ex", 1
40C8                             ; test "2 ($1) ex", 2
40C8                             ; test "2 4 ($2) ex", 4
40C8                             ; test "((1) ex) ex", 1
40C8                             ; test "5 (-1 ($1) if) ex", 5
40C8                             ; test "'A' @", 65
40C8                             ; test "1", 1
40C8                             ; test "0", 0
40C8                             ; test "10", 10
40C8                             ; test "123", 123
40C8                             ; test "$10", $10
40C8                             ; test "$FF", $FF
40C8                             ; test "2 3 =", 0
40C8                             ; test "3 3 =", 1
40C8                             ; test "2 3 <", 1
40C8                             ; test "3 3 <", 0
40C8                             ; test "3 3 >", 0
40C8                             ; test "4 3 >", 1
40C8                             ; test "1 2 +", 3
40C8                             ; test "123 456 +", 123+456
40C8                             ; test "64 128 +", 64+128
40C8                             ; test "5 3 -", 2
40C8                             ; test "3 5 &", 1
40C8                             ; test "3 5 |", 7
40C8                             ; test "2 3 *", 6
40C8                             ; test "1 2 3 + *", 5
40C8                             ; ; test "1 2 3 ' +", 3
40C8                             ; ; test "1_ 2 +",1
40C8                             ; ; test "1_ 1 +",0
40C8                             ; ; call enter
40C8                             ; ;     .cstr "1 3",$22,"+"
40C8                             ; ; expect "1 3 DUP +", 6
40C8                             ; ; test "5 2/'", 2
40C8                             ; ; test "3 5$ -", 2
40C8                             ; ; test "5 2/$ '", 1
40C8                             ; ; test "2 3%++", 7
40C8                             ; ; test "1 2 3~''", 2
40C8                             ; ; test "1 2 3~+*", 8
40C8                             ; ; test "2a!a@",2
40C8                             ; ; test "3x! 1 x@+x! x@", 4
40C8                             ; ; test "3x! 1_ x@+x! x@", 2
40C8                             ; ; test "1{", 2
40C8                             ; ; test "1}", 0
40C8                             ; ; test "2}", 1
40C8                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
40C8                             ; ; test "(2) \\^", 2
40C8                             ; ; test ":X1; X", 1
40C8                             ; ; test ":A100;A", 100
40C8                             ; ; test ":Aa!; 3A a@", 3
40C8                             ; ; test ":Aa!;:Ba@;4AB", 4
40C8                             ; ; test "[]$ '", 0
40C8                             ; ; test "[3]$ '", 1
40C8                             ; ; test "[3]'@", 3
40C8                             ; ; test "[1 2 3]'@", 1
40C8                             ; ; test "[1 2 3]'2+@", 2
40C8                             ; ; test "\\h@[1]''\\h@$-", 2
40C8                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
40C8                             ; ; test "\\[]$ '", 0
40C8                             ; ; test "\\[3]'\\@", 3
40C8                             ; ; test "\\[3]$ '", 1
40C8                             ; ; test "\\[1 2 3]'\\@", 1
40C8                             ; ; test "\\[1 2 3]'1+\\@", 2
40C8                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
40C8                             ; ; test "\\h@\\[1]''\\h@$-", 1
40C8                             ; ; test "\\`A`\\@",65
40C8                             ; ; test "0 0(1+)", 0
40C8                             ; ; test "0 1(1+)", 1
40C8                             ; ; test "0 2(1+)", 2
40C8                             ; ; test "0 1(0(1+))", 0
40C8                             ; ; test "0 1(1(1+))", 1
40C8                             ; ; test "0 2(1(1+))", 2
40C8                             ; ; test "0 2(2(1+))", 4
40C8                             ; ; test "0 1(\\i@+)", 0
40C8                             ; ; test "0 2(\\i@+)", 1
40C8                             ; ; test "0 3(\\i@+)", 3
40C8                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
40C8                             ; ; test "0t! 10(1 t@+t!) t@",10
40C8                             ; ; test "0(100)(200)",200
40C8                             ; ; test "1(100)(200)",100
40C8                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
40C8                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
40C8                             ; ; test ":X10;\\0X", 10
40C8                             ; ; test "2 \\1x! \\1x@", 2
40C8   CD 54 07               CALL   printStr   
40CB   44 6F 6E 65 21 00      .CSTR   "Done!"   
40D1   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 257 IN Siena.asm
                    > USED AT LINE 419 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 287 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 870 IN Siena.asm
                    > USED AT LINE 911 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 194 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 196 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 677 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 52 IN Siena.asm
NEXT:               025F DEFINED AT LINE 183 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
NEXT1:              026C DEFINED AT LINE 193 IN Siena.asm
                    > USED AT LINE 187 IN Siena.asm
ETX:                0274 DEFINED AT LINE 198 IN Siena.asm
                    > USED AT LINE 404 IN Siena.asm
ETX1:               027D DEFINED AT LINE 203 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
EXIT:               027F DEFINED AT LINE 205 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
                    > USED AT LINE 407 IN Siena.asm
START:              0294 DEFINED AT LINE 225 IN Siena.asm
INTERPRET:          02AA DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
INTERPRET2:         02B4 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 280 IN Siena.asm
INTERPRET3:         02BC DEFINED AT LINE 244 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INTERPRET4:         02C2 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
WAITCHAR:           02C7 DEFINED AT LINE 256 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 303 IN Siena.asm
MACRO:              02D6 DEFINED AT LINE 265 IN Siena.asm
WAITCHAR1:          02D8 DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
WAITCHAR3:          02E6 DEFINED AT LINE 291 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
WAITCHAR4:          02FC DEFINED AT LINE 307 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 316 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 318 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 320 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 322 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 324 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 326 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 328 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 330 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 332 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
BLOCK_:             0420 DEFINED AT LINE 339 IN Siena.asm
BLOCKEND_:          0423 DEFINED AT LINE 341 IN Siena.asm
CHAR_:              0426 DEFINED AT LINE 343 IN Siena.asm
ARRAY_:             0429 DEFINED AT LINE 345 IN Siena.asm
ARRAYEND_:          042C DEFINED AT LINE 347 IN Siena.asm
IDENT_:             042F DEFINED AT LINE 349 IN Siena.asm
SYMBOL_:            0432 DEFINED AT LINE 351 IN Siena.asm
AND_:               0435 DEFINED AT LINE 353 IN Siena.asm
AND1:               043C DEFINED AT LINE 361 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
                    > USED AT LINE 385 IN Siena.asm
OR_:                0440 DEFINED AT LINE 366 IN Siena.asm
XOR_:               0449 DEFINED AT LINE 376 IN Siena.asm
XOR1:               044A DEFINED AT LINE 378 IN Siena.asm
                    > USED AT LINE 389 IN Siena.asm
INV_:               0452 DEFINED AT LINE 387 IN Siena.asm
ADD_:               0457 DEFINED AT LINE 391 IN Siena.asm
HDOT_:              045D DEFINED AT LINE 398 IN Siena.asm
ETX_:               0464 DEFINED AT LINE 403 IN Siena.asm
EXIT_:              0467 DEFINED AT LINE 406 IN Siena.asm
FETCH_:             046A DEFINED AT LINE 409 IN Siena.asm
FETCH1:             046B DEFINED AT LINE 411 IN Siena.asm
KEY_:               0471 DEFINED AT LINE 418 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
MUL_:               047A DEFINED AT LINE 425 IN Siena.asm
NOP_:               047D DEFINED AT LINE 427 IN Siena.asm
SHL_:               047F DEFINED AT LINE 431 IN Siena.asm
SHR_:               0484 DEFINED AT LINE 438 IN Siena.asm
SHR1:               0485 DEFINED AT LINE 440 IN Siena.asm
STORE_:             048C DEFINED AT LINE 446 IN Siena.asm
NEG_:               0493 DEFINED AT LINE 454 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
SUB_:               0499 DEFINED AT LINE 459 IN Siena.asm
SUB2:               049B DEFINED AT LINE 462 IN Siena.asm
                    > USED AT LINE 457 IN Siena.asm
EQ_:                04A1 DEFINED AT LINE 468 IN Siena.asm
FALSE_:             04A8 DEFINED AT LINE 474 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
GT_:                04AE DEFINED AT LINE 479 IN Siena.asm
LT_:                04B2 DEFINED AT LINE 484 IN Siena.asm
LT1:                04B4 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
TRUE_:              04BC DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 791 IN Siena.asm
GTE_:               04C2 DEFINED AT LINE 497 IN Siena.asm
LTE_:               04C6 DEFINED AT LINE 501 IN Siena.asm
LTE1:               04C8 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
MOD_:               04D1 DEFINED AT LINE 510 IN Siena.asm
DIV_:               04DD DEFINED AT LINE 520 IN Siena.asm
CFETCH_:            04EC DEFINED AT LINE 531 IN Siena.asm
COMMENT_:           04F3 DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
CSTORE_:            04FD DEFINED AT LINE 546 IN Siena.asm
EMIT_:              0502 DEFINED AT LINE 552 IN Siena.asm
PROMPT_:            0509 DEFINED AT LINE 558 IN Siena.asm
INPORT_:            050E DEFINED AT LINE 563 IN Siena.asm
NEWLN_:             0519 DEFINED AT LINE 573 IN Siena.asm
OUTPORT_:           051E DEFINED AT LINE 577 IN Siena.asm
PRTSTR_:            0527 DEFINED AT LINE 586 IN Siena.asm
PRTSTR:             0527 DEFINED AT LINE 587 IN Siena.asm
CLOSURE_:           052D DEFINED AT LINE 592 IN Siena.asm
FILTER_:            052D DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
GET_:               052D DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 727 IN Siena.asm
LET_:               052D DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
MAP_:               052D DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
PRINT_:             052D DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
SCAN_:              052D DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
SET_:               052D DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 775 IN Siena.asm
SHIFT_:             052D DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 779 IN Siena.asm
WHILE_:             052D DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
VAR_:               052D DEFINED AT LINE 602 IN Siena.asm
MUL:                052F DEFINED AT LINE 612 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL2:               0539 DEFINED AT LINE 621 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
PROMPT:             054B DEFINED AT LINE 640 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
PUTSTR0:            0554 DEFINED AT LINE 645 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
PUTSTR:             0558 DEFINED AT LINE 648 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
CRLF:               055D DEFINED AT LINE 669 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
INIT:               0564 DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 40
INIT1:              057E DEFINED AT LINE 692 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
NUM:                06A0 DEFINED AT LINE 803 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
NUM0:               06A9 DEFINED AT LINE 809 IN Siena.asm
                    > USED AT LINE 807 IN Siena.asm
NUM1:               06AA DEFINED AT LINE 811 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
NUM2:               06C2 DEFINED AT LINE 829 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
NUM3:               06CD DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
HEXNUM:             06D0 DEFINED AT LINE 841 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
HEXNUM1:            06D3 DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
HEXNUM2:            06DB DEFINED AT LINE 849 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
PRTDEC:             06ED DEFINED AT LINE 862 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            06FC DEFINED AT LINE 877 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
PRTDEC1:            071E DEFINED AT LINE 893 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
                    > USED AT LINE 883 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
PRTDEC2:            0720 DEFINED AT LINE 895 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
PRTDEC3:            0730 DEFINED AT LINE 907 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
PRTDEC4:            0731 DEFINED AT LINE 909 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
PRTHEX:             0735 DEFINED AT LINE 913 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0740 DEFINED AT LINE 922 IN Siena.asm
                    > USED AT LINE 917 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
PRTHEX3:            0749 DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
PRINTSTR:           0754 DEFINED AT LINE 938 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 156
LOOKUPREF:          075B DEFINED AT LINE 945 IN Siena.asm
LOOKUPREF0:         075D DEFINED AT LINE 947 IN Siena.asm
LOOKUPREF1:         0761 DEFINED AT LINE 950 IN Siena.asm
LOOKUPREF2:         0767 DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
LOOKUPREF3:         076B DEFINED AT LINE 957 IN Siena.asm
                    > USED AT LINE 953 IN Siena.asm
NESTING:            0779 DEFINED AT LINE 980 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
NESTING1A:          0784 DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
NESTING1:           0787 DEFINED AT LINE 990 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
NESTING2:           0796 DEFINED AT LINE 999 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
NESTING3:           0798 DEFINED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
NESTING4:           07A3 DEFINED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1006 IN Siena.asm
STRDEF:             07A5 DEFINED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
STRDEF1:            07AD DEFINED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
STRDEF2:            07B0 DEFINED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
CHAR:               07BE DEFINED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
CHAR1:              07C1 DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
CHAR2:              07CD DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
CHAR3:              07D0 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
EXEC:               07D3 DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              07D4 DEFINED AT LINE 1054 IN Siena.asm
EXEC2:              07D8 DEFINED AT LINE 1058 IN Siena.asm
EXEC3:              07E6 DEFINED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
LAMBDA:             07E8 DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
LAMBDA1:            07EF DEFINED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1101 IN Siena.asm
LAMBDA2:            0813 DEFINED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
LAMBDAEND:          0822 DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
BLOCK:              0836 DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
BLOCK1:             083A DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
BLOCK2:             085C DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
BLOCKEND:           0868 DEFINED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
ARG:                087C DEFINED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
IN:                 0897 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 735 IN Siena.asm
IN1:                0899 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
IN2:                08A3 DEFINED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
IN3:                08A9 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
NEWADD2:            08AC DEFINED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
IF:                 08D7 DEFINED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 739 IN Siena.asm
IFTE:               08DC DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 743 IN Siena.asm
IFTE1:              08DD DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
IFTE2:              08E6 DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
IFTE3:              08FD DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
SWITCH:             08FF DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
CASE:               0913 DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
CASE0:              092F DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1292 IN Siena.asm
CASE1:              0934 DEFINED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
CASE2:              0941 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
WORDS:              0943 DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
BYTES:              0949 DEFINED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
BYTES1:             094C DEFINED AT LINE 1318 IN Siena.asm
ARRAY:              0951 DEFINED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
ARRAYEND:           0963 DEFINED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
ARRAYEND1:          0985 DEFINED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
ARRAYEND2:          0991 DEFINED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
ARRAYEND4:          09A1 DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
HASHSTR:            09B8 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
HASHSTR1:           09BB DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
HASHSTR2:           09C0 DEFINED AT LINE 1418 IN Siena.asm
DEFINEENTRY:        09D1 DEFINED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
DEFINEENTRY0:       09D6 DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
DEFINEENTRY1:       09E5 DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
DEFINEENTRY2:       09EB DEFINED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
DEFINEENTRY3:       09ED DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
LOOKUPENTRY:        09F7 DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
LOOKUPENTRY0:       09FC DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
LOOKUPENTRY1:       0A0B DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
LOOKUPENTRY2:       0A11 DEFINED AT LINE 1498 IN Siena.asm
LOOKUPENTRY3:       0A13 DEFINED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
HASH:               0A1B DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
DEF:                0A26 DEFINED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
DEF1:               0A34 DEFINED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
ADDR_:              0A38 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 699 IN Siena.asm
ADDR1:              0A44 DEFINED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
DEFINE:             0A48 DEFINED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 697 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
                    > USED AT LINE 705 IN Siena.asm
                    > USED AT LINE 709 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
                    > USED AT LINE 737 IN Siena.asm
                    > USED AT LINE 741 IN Siena.asm
                    > USED AT LINE 745 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
                    > USED AT LINE 785 IN Siena.asm
                    > USED AT LINE 789 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
SYMBOL:             0A60 DEFINED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
SYMBOL0:            0A68 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
SYMBOL1:            0A6A DEFINED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
IDENT:              0A86 DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
IDENT0:             0A8D DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
IDENT1:             0A8F DEFINED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
IDENT3:             0AB1 DEFINED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
DIVIDE:             0AB2 DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 525 IN Siena.asm
DIVIDE1:            0AB7 DEFINED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
DIVIDE2:            0AC4 DEFINED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
DIVIDE3:            0AC5 DEFINED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
FRAC:               0ACB DEFINED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
SQRT1:              0AD1 DEFINED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
SQUAREROOT:         0ADE DEFINED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
SQUAREROOT1:        0AE3 DEFINED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
SQUAREROOT4:        0AFE DEFINED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
SQUAREROOT5:        0B05 DEFINED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
                    > USED AT LINE 292 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 199 IN Siena.asm
                    > USED AT LINE 202 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 678 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1352 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 960 IN Siena.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 691 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2214S43:  40C7 DEFINED AT LINE 34
                    > USED AT LINE 10
