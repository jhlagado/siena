0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 5E 05               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODES:      
0200   4F                     DB   lsb(inv_)   ;    !
0201   7A                     DB   lsb(nop_)   ;    "
0202   03                     DB   lsb(hexnum_)   ;    #
0203   06                     DB   lsb(arg_)   ;    $
0204   CE                     DB   lsb(mod_)   ;    %
0205   32                     DB   lsb(and_)   ;    &
0206   09                     DB   lsb(strDef_)   ;    '
0207   20                     DB   lsb(block_)   ;    (
0208   23                     DB   lsb(blockend_)   ;    )
0209   77                     DB   lsb(mul_)   ;    *
020A   54                     DB   lsb(add_)   ;    +
020B   7A                     DB   lsb(nop_)   ;    ,
020C   96                     DB   lsb(sub_)   ;    -
020D   15                     DB   lsb(dot_)   ;    .
020E   DA                     DB   lsb(div_)   ;    /	
020F   00                     DB   lsb(num_)   ;    0
0210   00                     DB   lsb(num_)   ;    1
0211   00                     DB   lsb(num_)   ;    2
0212   00                     DB   lsb(num_)   ;    3
0213   00                     DB   lsb(num_)   ;    4
0214   00                     DB   lsb(num_)   ;    5
0215   00                     DB   lsb(num_)   ;    6
0216   00                     DB   lsb(num_)   ;    7
0217   00                     DB   lsb(num_)   ;    8
0218   00                     DB   lsb(num_)   ;    9
0219   7A                     DB   lsb(nop_)   ;    :
021A   7A                     DB   lsb(nop_)   ;    ;
021B   AF                     DB   lsb(lt_)   ;    <
021C   9E                     DB   lsb(eq_)   ;    =
021D   AB                     DB   lsb(gt_)   ;    >
021E   7A                     DB   lsb(nop_)   ;    ?
021F   67                     DB   lsb(fetch_)   ;    @
0220   2F                     DB   lsb(ident_)   ;    A
0221   2F                     DB   lsb(ident_)   ;    B
0222   2F                     DB   lsb(ident_)   ;    C
0223   2F                     DB   lsb(ident_)   ;    D
0224   2F                     DB   lsb(ident_)   ;    E
0225   2F                     DB   lsb(ident_)   ;    F
0226   2F                     DB   lsb(ident_)   ;    G
0227   2F                     DB   lsb(ident_)   ;    h
0228   2F                     DB   lsb(ident_)   ;    I
0229   2F                     DB   lsb(ident_)   ;    J
022A   2F                     DB   lsb(ident_)   ;    K
022B   2F                     DB   lsb(ident_)   ;    L
022C   2F                     DB   lsb(ident_)   ;    M
022D   2F                     DB   lsb(ident_)   ;    N
022E   2F                     DB   lsb(ident_)   ;    O
022F   2F                     DB   lsb(ident_)   ;    p
0230   2F                     DB   lsb(ident_)   ;    Q
0231   2F                     DB   lsb(ident_)   ;    R
0232   2F                     DB   lsb(ident_)   ;    S
0233   2F                     DB   lsb(ident_)   ;    T
0234   2F                     DB   lsb(ident_)   ;    U
0235   2F                     DB   lsb(ident_)   ;    V
0236   2F                     DB   lsb(ident_)   ;    W
0237   2F                     DB   lsb(ident_)   ;    X
0238   2F                     DB   lsb(ident_)   ;    Y
0239   2F                     DB   lsb(ident_)   ;    Z
023A   29                     DB   lsb(array_)   ;    [
023B   7A                     DB   lsb(nop_)   ;    \
023C   2C                     DB   lsb(arrayEnd_)   ;    ]
023D   46                     DB   lsb(xor_)   ;    ^
023E   2F                     DB   lsb(ident_)   ;    _
023F   26                     DB   lsb(char_)   ;    `    	
0240   2F                     DB   lsb(ident_)   ;    a
0241   2F                     DB   lsb(ident_)   ;    b
0242   2F                     DB   lsb(ident_)   ;    c
0243   2F                     DB   lsb(ident_)   ;    d
0244   2F                     DB   lsb(ident_)   ;    e
0245   2F                     DB   lsb(ident_)   ;    f
0246   2F                     DB   lsb(ident_)   ;    g
0247   2F                     DB   lsb(ident_)   ;    h
0248   2F                     DB   lsb(ident_)   ;    i
0249   2F                     DB   lsb(ident_)   ;    j
024A   2F                     DB   lsb(ident_)   ;    k
024B   2F                     DB   lsb(ident_)   ;    l
024C   2F                     DB   lsb(ident_)   ;    m
024D   2F                     DB   lsb(ident_)   ;    n
024E   2F                     DB   lsb(ident_)   ;    o
024F   2F                     DB   lsb(ident_)   ;    p
0250   2F                     DB   lsb(ident_)   ;    q
0251   2F                     DB   lsb(ident_)   ;    r
0252   2F                     DB   lsb(ident_)   ;    s
0253   2F                     DB   lsb(ident_)   ;    t
0254   2F                     DB   lsb(ident_)   ;    u
0255   2F                     DB   lsb(ident_)   ;    v
0256   2F                     DB   lsb(ident_)   ;    w
0257   2F                     DB   lsb(ident_)   ;    x
0258   2F                     DB   lsb(ident_)   ;    y
0259   2F                     DB   lsb(ident_)   ;    z
025A   0F                     DB   lsb(lambda_)   ;    {
025B   3D                     DB   lsb(or_)   ;    |
025C   12                     DB   lsb(lambdaEnd_)   ;    }
025D   7A                     DB   lsb(nop_)   ;    ~
025E   7A                     DB   lsb(nop_)   ;    DEL	
025F                             ; ctrlCodes:
025F                             ;     DB lsb(EMPTY)               ; NUL ^@
025F                             ;     DB lsb(EMPTY)               ; SOH ^a  1
025F                             ;     DB lsb(EMPTY)               ; STX ^b  2
025F                             ;     DB lsb(EMPTY)               ; ETX ^c  3
025F                             ;     DB lsb(EMPTY)               ; EOT ^d  4
025F                             ;     DB lsb(EMPTY)               ; ENQ ^e  5
025F                             ;     DB lsb(EMPTY)               ; ACK ^F  6
025F                             ;     DB lsb(EMPTY)               ; BEL ^G  7
025F                             ;     DB lsb(EMPTY)               ; BS  ^h  8
025F                             ;     DB lsb(EMPTY)               ; TAB ^I  9
025F                             ;     DB lsb(EMPTY)               ; LF  ^J 10
025F                             ;     DB lsb(EMPTY)               ; VT  ^K 11
025F                             ;     DB lsb(EMPTY)               ; FF  ^l 12
025F                             ;     DB lsb(EMPTY)               ; CR  ^m 13
025F                             ;     DB lsb(EMPTY)               ; SO  ^N 14
025F                             ;     DB lsb(EMPTY)               ; SI  ^O 15
025F                             ;     DB lsb(EMPTY)               ; DLE ^p 16
025F                             ;     DB lsb(EMPTY)               ; ^Q
025F                             ;     DB lsb(EMPTY)               ; ^R
025F                             ;     DB lsb(EMPTY)               ; ^S
025F                             ;     DB lsb(EMPTY)               ; ^T
025F                             ;     DB lsb(EMPTY)               ; ^U
025F                             ;     DB lsb(EMPTY)               ; ^V
025F                             ;     DB lsb(EMPTY)               ; ^W
025F                             ;     DB lsb(EMPTY)               ; ^X
025F                             ;     DB lsb(EMPTY)               ; ^Y
025F                             ;     DB lsb(EMPTY)               ; ^Z
025F                             ;     DB lsb(EMPTY)               ; ^[
025F                             ;     DB lsb(EMPTY)               ; ^\
025F                             ;     DB lsb(EMPTY)               ; ^]
025F                             ;     DB lsb(EMPTY)               ; ^^
025F                             ;     DB lsb(EMPTY)               ; ^_
025F                NEXT:        
025F   03                     INC   bc   ; Increment the IP
0260   0A                     LD   a,(bc)   ; Get the next character and dispatch
0261   D6 21                  SUB   " " + 1   ; whitespace?
0263   38 07                  JR   c,next1   
0265   6F                     LD   l,a   ; index into table
0266   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0268   6E                     LD   l,(hl)   ; get low jump address
0269   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
026B   E9                     JP   (hl)   ; Jump to routine
026C                NEXT1:       
026C   FE DF                  CP   NULL - (" " + 1)   ; is it end of text?
026E   28 0F                  JR   z,exit   
0270   FE E2                  CP   ENDTEXT - (" " + 1)   ; is it end of text?
0272   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0274                ETX:         
0274   21 00 E6               LD   hl,-DSTACK   
0277   39                     ADD   hl,sp   
0278   30 03                  JR   nc,etx1   
027A   31 00 1A               LD   sp,DSTACK   
027D                ETX1:        
027D   18 2B                  JR   interpret   
027F                EXIT:        
027F   50 59                  LD   de,bc   ; address of code after exit opcode
0281   13                     INC   de   
0282   D9                     EXX      
0283   C1                     POP   bc   ; bc = last result
0284   FD 54                  LD   d,iyh   ; de = BP
0286   FD 5D                  LD   e,iyl   
0288   EB                     EX   de,hl   ; hl = BP, de = result
0289   F9                     LD   sp,hl   ; sp = BP
028A   D9                     EXX      
028B   E1                     POP   hl   ; hl = old BP
028C   C1                     POP   bc   ; pop SCP (discard)
028D   C1                     POP   bc   ; bc = IP
028E   F9                     LD   sp,hl   ; sp = old BP
028F   D9                     EXX      
0290   C5                     PUSH   bc   ; push result
0291   D9                     EXX      
0292   EB                     EX   de,hl   
0293   E9                     JP   (hl)   
0294                START:       
0294   31 00 1A               LD   sp,DSTACK   ; start of Siena
0297   CD 5E 05               CALL   init   ; setups
029A   CD 45 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
029D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02AA                INTERPRET:      
02AA   CD 45 05               CALL   prompt   
02AD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02B0   ED 43 82 1B            LD   (vTIBPtr),bc   
02B4                INTERPRET2:      ; calc nesting (a macro might have changed it)
02B4   1E 00                  LD   e,0   ; initilize nesting value
02B6   C5                     PUSH   bc   ; save offset into TIB,
02B7                             ; bc is also the count of chars in TIB
02B7   21 00 18               LD   hl,TIB   ; hl is start of TIB
02BA   18 06                  JR   interpret4   
02BC                INTERPRET3:      
02BC   7E                     LD   a,(hl)   ; a = char in TIB
02BD   23                     INC   hl   ; inc pointer into TIB
02BE   0B                     DEC   bc   ; dec count of chars in TIB
02BF   CD 6A 07               CALL   nesting   ; update nesting value
02C2                INTERPRET4:      
02C2   79                     LD   a,c   ; is count zero?
02C3   B0                     OR   b   
02C4   20 F6                  JR   nz,interpret3   ; if not loop
02C6   C1                     POP   bc   ; restore offset into TIB
02C7                WAITCHAR:      
02C7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02CA   FE 20                  CP   $20   ; compare to space
02CC   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02CE   FE 00                  CP   $0   ; is it end of string? null end of string
02D0   28 2A                  JR   z,waitchar4   
02D2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02D4   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02D6                MACRO:       
02D6                             ;     ld (vTIBPtr),bc
02D6                             ;     ld hl,ctrlCodes
02D6                             ;     add a,l			            ; look up key of macros
02D6                             ;     ld l,a
02D6                             ;     ld e,(hl)
02D6                             ;     ld a,e
02D6                             ;     or a
02D6                             ;     jr z,macro1
02D6                             ;     ld d,msb(macros)
02D6                             ;     push de
02D6                             ;     call exec		            ; Siena exec_ operation and jump to it
02D6                             ;     .cstr "ca"
02D6                             ; macro1:
02D6                             ;     ld bc,(vTIBPtr)
02D6   18 DC                  JR   interpret2   
02D8                WAITCHAR1:      
02D8   21 00 18               LD   hl,TIB   
02DB   09                     ADD   hl,bc   
02DC   77                     LD   (hl),a   ; store the character in textbuf
02DD   03                     INC   bc   
02DE   CD 85 00               CALL   putchar   ; echo character to screen
02E1   CD 6A 07               CALL   nesting   
02E4   18 E1                  JR   waitchar   ; wait for next character
02E6                WAITCHAR3:      
02E6   21 00 18               LD   hl,TIB   
02E9   09                     ADD   hl,bc   
02EA   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02EC   23                     INC   hl   
02ED   36 0A                  LD   (hl),"\n"   
02EF   23                     INC   hl   
02F0   03                     INC   bc   
02F1   03                     INC   bc   
02F2   CD 57 05               CALL   crlf   ; echo character to screen
02F5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02F6   B7                     OR   a   
02F7   20 CE                  JR   nz,waitchar   
02F9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02FB   03                     INC   bc   
02FC                WAITCHAR4:      
02FC   ED 43 82 1B            LD   (vTIBPtr),bc   
0300   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0303   0B                     DEC   bc   
0304                             ; **********************************************************************			
0304                             ; Page 4 primitive routines
0304                             ; **********************************************************************
0304                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 91 06               JP   num   
0403                HEXNUM_:      
0403   C3 C1 06               JP   hexnum   
0406                ARG_:        
0406   C3 6D 08               JP   arg   
0409                STRDEF_:      
0409   C3 96 07               JP   strDef   
040C                NEWADD2_:      
040C   C3 9D 08               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 D9 07               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 13 08               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD DE 06               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   DD E9                  JP   (ix)   
0420                BLOCK_:      
0420   C3 27 08               JP   block   
0423                BLOCKEND_:      
0423   C3 59 08               JP   blockend   
0426                CHAR_:       
0426   C3 AF 07               JP   char   
0429                ARRAY_:      
0429   C3 42 09               JP   array   
042C                ARRAYEND_:      
042C   C3 54 09               JP   arrayEnd   
042F                IDENT_:      
042F   C3 5E 0A               JP   ident   
0432                AND_:        
0432   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0433   E1                     POP   hl   
0434   7B                     LD   a,e   
0435   A5                     AND   l   
0436   6F                     LD   l,a   
0437   7A                     LD   a,d   
0438   A4                     AND   h   
0439                AND1:        
0439   67                     LD   h,a   
043A   E5                     PUSH   hl   
043B   DD E9                  JP   (ix)   
043D                OR_:         
043D   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
043E   E1                     POP   hl   
043F   7B                     LD   a,e   
0440   B5                     OR   l   
0441   6F                     LD   l,a   
0442   7A                     LD   a,d   
0443   B4                     OR   h   
0444   18 F3                  JR   and1   
0446                XOR_:        
0446   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0447                XOR1:        
0447   E1                     POP   hl   
0448   7B                     LD   a,e   
0449   AD                     XOR   l   
044A   6F                     LD   l,a   
044B   7A                     LD   a,d   
044C   AC                     XOR   h   
044D   18 EA                  JR   and1   
044F                INV_:        ; Bitwise INVert the top member of the stack
044F   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0452   18 F3                  JR   xor1   
0454                ADD_:        ; add the top 2 members of the stack
0454   D1                     POP   de   
0455   E1                     POP   hl   
0456   19                     ADD   hl,de   
0457   E5                     PUSH   hl   
0458   DD E9                  JP   (ix)   
045A                HDOT_:       ; print hexadecimal
045A   E1                     POP   hl   
045B   CD 26 07               CALL   prthex   
045E   C3 19 04               JP   dot2   
0461                ETX_:        
0461   C3 74 02               JP   ETX   
0464                EXIT_:       
0464   C3 7F 02               JP   exit   
0467                FETCH_:      ; Fetch the value from the address placed on the top of the stack
0467   E1                     POP   hl   
0468                FETCH1:      
0468   5E                     LD   e,(hl)   
0469   23                     INC   hl   
046A   56                     LD   d,(hl)   
046B   D5                     PUSH   de   
046C   DD E9                  JP   (ix)   
046E                KEY_:        
046E   CD 81 00               CALL   getchar   
0471   26 00                  LD   h,0   
0473   6F                     LD   l,a   
0474   E5                     PUSH   hl   
0475   DD E9                  JP   (ix)   
0477   C3 29 05     MUL_:     JP   mul   
047A                NOP_:        
047A   DD E9                  JP   (ix)   ; hardwire white space to always exec_ to next (important for arrays)
047C                SHL_:        
047C   E1                     POP   hl   ; Duplicate the top member of the stack
047D   29                     ADD   hl,hl   
047E   E5                     PUSH   hl   ; shift left fallthrough into add_
047F   DD E9                  JP   (ix)   
0481                             ;  Right shift } is a divide by 2		
0481                SHR_:        
0481   E1                     POP   hl   ; Get the top member of the stack
0482                SHR1:        
0482   CB 3C                  SRL   h   
0484   CB 1D                  RR   l   
0486   E5                     PUSH   hl   
0487   DD E9                  JP   (ix)   
0489                STORE_:      ; Store the value at the address placed on the top of the stack
0489   E1                     POP   hl   
048A   D1                     POP   de   
048B   73                     LD   (hl),e   
048C   23                     INC   hl   
048D   72                     LD   (hl),d   
048E   DD E9                  JP   (ix)   
0490                NEG_:        
0490   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0493   D1                     POP   de   
0494   18 02                  JR   sub2   ; use the SUBtract routine
0496                SUB_:        ; Subtract the value 2nd on stack from top of stack
0496   D1                     POP   de   
0497   E1                     POP   hl   ; Entry point for INVert
0498                SUB2:        
0498   B7                     OR   a   ; Entry point for NEGate
0499   ED 52                  SBC   hl,de   
049B   E5                     PUSH   hl   
049C   DD E9                  JP   (ix)   
049E                EQ_:         
049E   E1                     POP   hl   
049F   D1                     POP   de   
04A0   B7                     OR   a   ; reset the carry flag
04A1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A3   28 14                  JR   z,true_   
04A5                FALSE_:      
04A5   21 00 00               LD   hl,0   
04A8   E5                     PUSH   hl   
04A9   DD E9                  JP   (ix)   
04AB                GT_:         
04AB   D1                     POP   de   
04AC   E1                     POP   hl   
04AD   18 02                  JR   lt1   
04AF                LT_:         
04AF   E1                     POP   hl   
04B0   D1                     POP   de   
04B1                LT1:         
04B1   B7                     OR   a   ; reset the carry flag
04B2   ED 52                  SBC   hl,de   
04B4   28 EF                  JR   z,false_   
04B6   FA A5 04               JP   m,false_   
04B9                TRUE_:       
04B9   21 01 00               LD   hl,1   
04BC   E5                     PUSH   hl   
04BD   DD E9                  JP   (ix)   
04BF                GTE_:        
04BF   D1                     POP   de   
04C0   E1                     POP   hl   
04C1   18 02                  JR   lte1   
04C3                LTE_:        
04C3   E1                     POP   hl   
04C4   D1                     POP   de   
04C5                LTE1:        
04C5   B7                     OR   a   ; reset the carry flag
04C6   ED 52                  SBC   hl,de   
04C8   FA A5 04               JP   m,false_   
04CB   C3 FF FF               JP   true   
04CE                MOD_:        
04CE   D1                     POP   de   ; get first value
04CF   E1                     POP   hl   ; get 2nd value
04D0   C5                     PUSH   bc   ; preserve the IP
04D1   44 4D                  LD   bc,hl   
04D3   CD 8D 0A               CALL   divide   
04D6   C1                     POP   bc   
04D7   E5                     PUSH   hl   ; push remainder
04D8   DD E9                  JP   (ix)   
04DA                DIV_:        
04DA   D1                     POP   de   ; get first value
04DB   E1                     POP   hl   ; get 2nd value
04DC   C5                     PUSH   bc   ; preserve the IP
04DD   44 4D                  LD   bc,hl   
04DF   CD 8D 0A               CALL   divide   
04E2   C1                     POP   bc   
04E3   D5                     PUSH   de   ; push result
04E4   DD E9                  JP   (ix)   
04E6                CFETCH_:      
04E6   E1                     POP   hl   
04E7   16 00                  LD   d,0   
04E9   5E                     LD   e,(hl)   
04EA   D5                     PUSH   de   
04EB   DD E9                  JP   (ix)   
04ED                COMMENT_:      
04ED   03                     INC   bc   ; point to next char
04EE   0A                     LD   a,(bc)   
04EF   FE 0D                  CP   "\r"   ; terminate at cr
04F1   20 FA                  JR   nz,comment_   
04F3   0B                     DEC   bc   
04F4   C3 5F 02               JP   next   
04F7                CSTORE_:      
04F7   E1                     POP   hl   
04F8   D1                     POP   de   
04F9   73                     LD   (hl),e   
04FA   DD E9                  JP   (ix)   
04FC                EMIT_:       
04FC   E1                     POP   hl   
04FD   7D                     LD   a,l   
04FE   CD 85 00               CALL   putchar   
0501   DD E9                  JP   (ix)   
0503                PROMPT_:      
0503   CD 45 05               CALL   prompt   
0506   DD E9                  JP   (ix)   
0508                INPORT_:      ; \<
0508   E1                     POP   hl   
0509   79                     LD   a,c   
050A   4D                     LD   c,l   
050B   ED 68                  IN   l,(c)   
050D   26 00                  LD   h,0   
050F   4F                     LD   c,a   
0510   E5                     PUSH   hl   
0511   DD E9                  JP   (ix)   
0513                NEWLN_:      
0513   CD 57 05               CALL   crlf   
0516   DD E9                  JP   (ix)   
0518                OUTPORT_:      
0518   E1                     POP   hl   
0519   59                     LD   e,c   
051A   4D                     LD   c,l   
051B   E1                     POP   hl   
051C   ED 69                  OUT   (c),l   
051E   4B                     LD   c,e   
051F   DD E9                  JP   (ix)   
0521                PRTSTR_:      
0521                PRTSTR:      
0521   E1                     POP   hl   
0522   CD 52 05               CALL   putStr   
0525   DD E9                  JP   (ix)   
0527                CLOSURE_:      
0527                FILTER_:      
0527                GET_:        
0527                LET_:        
0527                MAP_:        
0527                PRINT_:      
0527                SCAN_:       
0527                SET_:        
0527                SHIFT_:      
0527                WHILE_:      
0527                VAR_:        
0527   DD E9                  JP   (ix)   
0529                             ;*******************************************************************
0529                             ; Page 5 primitive routines continued
0529                             ;*******************************************************************
0529                             ; ********************************************************************
0529                             ; 16-bit multiply
0529                MUL:         ;=19
0529   D1                     POP   de   ; get first value
052A   E1                     POP   hl   
052B   C5                     PUSH   bc   ; Preserve the IP
052C   44                     LD   b,h   ; bc = 2nd value
052D   4D                     LD   c,l   
052E   21 00 00               LD   hl,0   
0531   3E 10                  LD   a,16   
0533                MUL2:        
0533   29                     ADD   hl,hl   
0534   CB 13                  RL   e   
0536   CB 12                  RL   d   
0538   30 04                  JR   nc,$+6   
053A   09                     ADD   hl,bc   
053B   30 01                  JR   nc,$+3   
053D   13                     INC   de   
053E   3D                     DEC   a   
053F   20 F2                  JR   nz,mul2   
0541   C1                     POP   bc   ; Restore the IP
0542   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0543   DD E9                  JP   (ix)   
0545                             ;*******************************************************************
0545                             ; Subroutines
0545                             ;*******************************************************************
0545                PROMPT:      
0545   CD 45 07               CALL   printStr   
0548   0D 0A 3E 20 00         .CSTR   "\r\n> "   
054D   C9                     RET      
054E                PUTSTR0:      
054E   CD 85 00               CALL   putchar   
0551   23                     INC   hl   
0552                PUTSTR:      
0552   7E                     LD   a,(hl)   
0553   B7                     OR   a   
0554   20 F8                  JR   nz,putStr0   
0556   C9                     RET      
0557                             ; rpush:
0557                             ;     dec ix
0557                             ;     ld (ix+0),h
0557                             ;     dec ix
0557                             ;     ld (ix+0),l
0557                             ;     ret
0557                             ; rpop:
0557                             ;     ld l,(ix+0)
0557                             ;     inc ix
0557                             ;     ld h,(ix+0)
0557                             ;     inc ix
0557                             ; rpop2:
0557                             ;     ret
0557                CRLF:        
0557   CD 45 07               CALL   printStr   
055A   0D 0A 00               .CSTR   "\r\n"   
055D   C9                     RET      
055E                INIT:        
055E   DD 21 5F 02            LD   ix,next   
0562   FD 21 00 1A            LD   iy,DSTACK   
0566   21 80 01               LD   hl,isysVars   
0569   11 7E 1B               LD   de,sysVars   
056C   01 10 00               LD   bc,8 * 2   
056F   ED B0                  LDIR      
0571   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
0574   54 5D                  LD   de,hl   
0576   13                     INC   de   
0577   36 00                  LD   (hl),0   
0579   01 68 00               LD   bc,DATASIZE   
057C   ED B0                  LDIR      
057E   3E FF                  LD   a,UNUSED   
0580   06 00                  LD   b,0   
0582   21 00 1D               LD   hl,hashSlots   
0585                INIT1:       
0585   77                     LD   (hl),a   
0586   23                     INC   hl   
0587   10 FC                  DJNZ   init1   
0589   CD 46 0A               CALL   define   
058C   05 61 64 64 72 00      .PSTR   "addr",0   
0592   31 0A                  DW   addr   
0594   CD 46 0A               CALL   define   
0597   06 62 79 74 65 73 00   .PSTR   "bytes",0   
059E   3A 09                  DW   bytes   
05A0   CD 46 0A               CALL   define   
05A3   05 63 61 73 65 00      .PSTR   "case",0   
05A9   04 09                  DW   case   
05AB   CD 46 0A               CALL   define   
05AE   04 64 65 66 00         .PSTR   "def",0   
05B3   17 0A                  DW   def   
05B5   CD 46 0A               CALL   define   
05B8   05 65 78 65 63 00      .PSTR   "exec",0   
05BE   C4 07                  DW   exec   
05C0   CD 46 0A               CALL   define   
05C3   06 66 61 6C 73 65 00   .PSTR   "false",0   
05CA   A5 04                  DW   false_   
05CC   CD 46 0A               CALL   define   
05CF   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
05D7   27 05                  DW   filter_   
05D9   CD 46 0A               CALL   define   
05DC   04 67 65 74 00         .PSTR   "get",0   
05E1   27 05                  DW   get_   
05E3   CD 46 0A               CALL   define   
05E6   05 68 61 73 68 00      .PSTR   "hash",0   
05EC   0C 0A                  DW   hash   
05EE   CD 46 0A               CALL   define   
05F1   03 69 6E 00            .PSTR   "in",0   
05F5   88 08                  DW   in   
05F7   CD 46 0A               CALL   define   
05FA   03 69 66 00            .PSTR   "if",0   
05FE   C8 08                  DW   if   
0600   CD 46 0A               CALL   define   
0603   05 69 66 74 65 00      .PSTR   "ifte",0   
0609   CD 08                  DW   ifte   
060B   CD 46 0A               CALL   define   
060E   04 6B 65 79 00         .PSTR   "key",0   
0613   6E 04                  DW   key_   
0615   CD 46 0A               CALL   define   
0618   04 6C 65 74 00         .PSTR   "let",0   
061D   27 05                  DW   let_   
061F   CD 46 0A               CALL   define   
0622   04 6D 61 70 00         .PSTR   "map",0   
0627   27 05                  DW   map_   
0629   CD 46 0A               CALL   define   
062C   04 6E 65 67 00         .PSTR   "neg",0   
0631   90 04                  DW   neg_   
0633   CD 46 0A               CALL   define   
0636   06 70 72 69 6E 74 00   .PSTR   "print",0   
063D   27 05                  DW   print_   
063F   CD 46 0A               CALL   define   
0642   05 73 63 61 6E 00      .PSTR   "scan",0   
0648   27 05                  DW   scan_   
064A   CD 46 0A               CALL   define   
064D   04 73 65 74 00         .PSTR   "set",0   
0652   27 05                  DW   set_   
0654   CD 46 0A               CALL   define   
0657   06 73 68 69 66 74 00   .PSTR   "shift",0   
065E   27 05                  DW   shift_   
0660   CD 46 0A               CALL   define   
0663   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
066B   F0 08                  DW   switch   
066D   CD 46 0A               CALL   define   
0670   05 74 72 75 65 00      .PSTR   "true",0   
0676   B9 04                  DW   true_   
0678   CD 46 0A               CALL   define   
067B   06 77 68 69 6C 65 00   .PSTR   "while",0   
0682   27 05                  DW   while_   
0684   CD 46 0A               CALL   define   
0687   06 77 6F 72 64 73 00   .PSTR   "words",0   
068E   34 09                  DW   words   
0690   C9                     RET      
0691                NUM:         
0691   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0694   0A                     LD   a,(bc)   ; Get numeral or -
0695   FE 2D                  CP   "-"   
0697   20 01                  JR   nz,num0   
0699   03                     INC   bc   ; move to next char, no flags affected
069A                NUM0:        
069A   08                     EX   af,af'   ; save zero flag = 0 for later
069B                NUM1:        
069B   0A                     LD   a,(bc)   ; read digit
069C   D6 30                  SUB   "0"   ; less than 0?
069E   38 13                  JR   c,num2   ; not a digit, exit loop
06A0   FE 0A                  CP   10   ; greater that 9?
06A2   30 0F                  JR   nc,num2   ; not a digit, exit loop
06A4   03                     INC   bc   ; inc IP
06A5   54 5D                  LD   de,hl   ; multiply hl * 10
06A7   29                     ADD   hl,hl   
06A8   29                     ADD   hl,hl   
06A9   19                     ADD   hl,de   
06AA   29                     ADD   hl,hl   
06AB   85                     ADD   a,l   ; add digit in a to hl
06AC   6F                     LD   l,a   
06AD   3E 00                  LD   a,0   
06AF   8C                     ADC   a,h   
06B0   67                     LD   h,a   
06B1   18 E8                  JR   num1   
06B3                NUM2:        
06B3   0B                     DEC   bc   
06B4   08                     EX   af,af'   ; restore zero flag
06B5   20 07                  JR   nz,num3   
06B7   EB                     EX   de,hl   ; negate the value of hl
06B8   21 00 00               LD   hl,0   
06BB   B7                     OR   a   ; jump to sub2
06BC   ED 52                  SBC   hl,de   
06BE                NUM3:        
06BE   E5                     PUSH   hl   ; Put the number on the stack
06BF   DD E9                  JP   (ix)   ; and process the next character
06C1                HEXNUM:      ; 
06C1   21 00 00               LD   hl,0   ; Clear hl to accept the number
06C4                HEXNUM1:      
06C4   03                     INC   bc   
06C5   0A                     LD   a,(bc)   ; Get the character which is a numeral
06C6   CB 77                  BIT   6,a   ; is it uppercase alpha?
06C8   28 02                  JR   z,hexnum2   ; no a decimal
06CA   D6 07                  SUB   7   ; sub 7  to make $a - $F
06CC                HEXNUM2:      
06CC   D6 30                  SUB   $30   ; Form decimal digit
06CE   DA B3 06               JP   c,num2   
06D1   FE 10                  CP   $0F+1   
06D3   D2 B3 06               JP   nc,num2   
06D6   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06D7   29                     ADD   hl,hl   ; 4X
06D8   29                     ADD   hl,hl   ; 8X
06D9   29                     ADD   hl,hl   ; 16X
06DA   85                     ADD   a,l   ; add into bottom of hl
06DB   6F                     LD   l,a   ; 
06DC   18 E6                  JR   hexnum1   
06DE                PRTDEC:      ;=34 ; removes leading zeros
06DE                             ; ld a,h
06DE                             ; or l
06DE                             ; ld a, "0"
06DE                             ; jp z, putchar
06DE   CB 7C                  BIT   7,h   
06E0   28 0B                  JR   z,prtdec0   
06E2   3E 2D                  LD   a,"-"   
06E4   CD 85 00               CALL   putchar   
06E7   AF                     XOR   a   
06E8   95                     SUB   l   
06E9   6F                     LD   l,a   
06EA   9F                     SBC   a,a   
06EB   94                     SUB   h   
06EC   67                     LD   h,a   
06ED                PRTDEC0:      
06ED   C5                     PUSH   bc   
06EE   0E 00                  LD   c,0   ; leading zeros flag = false
06F0   11 F0 D8               LD   de,-10000   
06F3   CD 0F 07               CALL   prtdec1   
06F6   11 18 FC               LD   de,-1000   
06F9   CD 0F 07               CALL   prtdec1   
06FC   11 9C FF               LD   de,-100   
06FF   CD 0F 07               CALL   prtdec1   
0702   1E F6                  LD   e,-10   
0704   CD 0F 07               CALL   prtdec1   
0707   0C                     INC   c   ; flag = true for at least digit
0708   1E FF                  LD   e,-1   
070A   CD 0F 07               CALL   prtdec1   
070D   C1                     POP   bc   
070E   C9                     RET      
070F                PRTDEC1:      
070F   06 2F                  LD   b,"0"-1   
0711                PRTDEC2:      
0711   04                     INC   b   
0712   19                     ADD   hl,de   
0713   38 FC                  JR   c,prtdec2   
0715   ED 52                  SBC   hl,de   
0717   3E 30                  LD   a,"0"   
0719   B8                     CP   b   
071A   20 05                  JR   nz,prtdec3   
071C   AF                     XOR   a   
071D   B1                     OR   c   
071E   C8                     RET   z   
071F   18 01                  JR   prtdec4   
0721                PRTDEC3:      
0721   0C                     INC   c   
0722                PRTDEC4:      
0722   78                     LD   a,b   
0723   C3 85 00               JP   putchar   
0726                             ; 
0726                PRTHEX:      
0726                             ; Display hl as a 16-bit number in hex.
0726   C5                     PUSH   bc   ; preserve the IP
0727   7C                     LD   a,h   
0728   CD 31 07               CALL   prthex2   
072B   7D                     LD   a,l   
072C   CD 31 07               CALL   prthex2   
072F   C1                     POP   bc   
0730   C9                     RET      
0731                PRTHEX2:      
0731   4F                     LD   c,a   
0732   1F                     RRA      
0733   1F                     RRA      
0734   1F                     RRA      
0735   1F                     RRA      
0736   CD 3A 07               CALL   prthex3   
0739   79                     LD   a,c   
073A                PRTHEX3:      
073A   E6 0F                  AND   0x0F   
073C   C6 90                  ADD   a,0x90   
073E   27                     DAA      
073F   CE 40                  ADC   a,0x40   
0741   27                     DAA      
0742   C3 85 00               JP   putchar   
0745                PRINTSTR:      
0745   E3                     EX   (sp),hl   ; swap			
0746   CD 52 05               CALL   putStr   
0749   23                     INC   hl   ; inc past null
074A   E3                     EX   (sp),hl   ; put it back	
074B   C9                     RET      
074C                LOOKUPREF:      
074C   16 00                  LD   d,0   
074E                LOOKUPREF0:      
074E   FE 61                  CP   "a"   
0750   30 06                  JR   nc,lookupRef2   
0752                LOOKUPREF1:      
0752   D6 61                  SUB   "a"   
0754   1E 00                  LD   e,0   
0756   18 04                  JR   lookupRef3   
0758                LOOKUPREF2:      
0758   D6 61                  SUB   "a"   
075A   1E 34                  LD   e,26*2   
075C                LOOKUPREF3:      
075C   87                     ADD   a,a   
075D   83                     ADD   a,e   
075E   21 C0 1B               LD   hl,DATA   
0761   85                     ADD   a,l   
0762   6F                     LD   l,a   
0763   3E 00                  LD   a,0   
0765   8C                     ADC   a,h   
0766   67                     LD   h,a   
0767   AF                     XOR   a   
0768   B3                     OR   e   ; sets z flag if a-z
0769   C9                     RET      
076A                             ; **************************************************************************
076A                             ; calculate nesting value
076A                             ; a is char to be tested,
076A                             ; e is the nesting value (initially 0)
076A                             ; e is increased by ( and [
076A                             ; e is decreased by ) and ]
076A                             ; e has its bit 7 toggled by `
076A                             ; limited to 127 levels
076A                             ; **************************************************************************
076A                NESTING:      
076A   FE 22                  CP   $22   ; quote char
076C   20 0A                  JR   nz,nesting1   
076E   CB 7B                  BIT   7,e   
0770   28 03                  JR   z,nesting1a   
0772   CB BB                  RES   7,e   
0774   C9                     RET      
0775                NESTING1A:      
0775   CB FB                  SET   7,e   
0777   C9                     RET      
0778                NESTING1:      
0778   CB 7B                  BIT   7,e   
077A   C0                     RET   nz   
077B   FE 7B                  CP   "{"   
077D   28 08                  JR   z,nesting2   
077F   FE 5B                  CP   "["   
0781   28 04                  JR   z,nesting2   
0783   FE 28                  CP   "("   
0785   20 02                  JR   nz,nesting3   
0787                NESTING2:      
0787   1C                     INC   e   
0788   C9                     RET      
0789                NESTING3:      
0789   FE 7D                  CP   "}"   
078B   28 07                  JR   z,nesting4   
078D   FE 5D                  CP   "]"   
078F   28 03                  JR   z,nesting4   
0791   FE 29                  CP   ")"   
0793   C0                     RET   nz   
0794                NESTING4:      
0794   1D                     DEC   e   
0795   C9                     RET      
0796                             ; 
0796                STRDEF:      
0796   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
079A   D5                     PUSH   de   ; save start of string
079B   03                     INC   bc   ; point to next char
079C   18 03                  JR   strDef2   
079E                STRDEF1:      
079E   12                     LD   (de),a   
079F   13                     INC   de   ; increase count
07A0   03                     INC   bc   ; point to next char
07A1                STRDEF2:      
07A1   0A                     LD   a,(bc)   
07A2   FE 27                  CP   "'"   ; ' is the string terminator
07A4   20 F8                  JR   nz,strDef1   
07A6   AF                     XOR   a   ; write null to terminate string
07A7   12                     LD   (de),a   
07A8   13                     INC   de   
07A9   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
07AD   DD E9                  JP   (ix)   
07AF                CHAR:        
07AF   21 00 00               LD   hl,0   ; if `` is empty
07B2                CHAR1:       
07B2   03                     INC   bc   ; point to next char
07B3   0A                     LD   a,(bc)   
07B4   FE 60                  CP   "`"   ; ` is the string terminator
07B6   28 09                  JR   z,char3   
07B8   FE 5C                  CP   $5c   ; \ is the escape
07BA   20 02                  JR   nz,char2   
07BC   03                     INC   bc   
07BD   0A                     LD   a,(bc)   
07BE                CHAR2:       
07BE   6F                     LD   l,a   
07BF   18 F1                  JR   char1   
07C1                CHAR3:       
07C1   E5                     PUSH   hl   
07C2                             ; dec bc
07C2   DD E9                  JP   (ix)   
07C4                EXEC:        ; execute lambda at pointer
07C4   E1                     POP   hl   ; hl = pointer to lambda
07C5                EXEC1:       
07C5   7C                     LD   a,h   ; skip if destination address is null
07C6   B5                     OR   l   
07C7   28 0E                  JR   z,exec3   
07C9                EXEC2:       
07C9   C5                     PUSH   bc   ; push IP
07CA   FD E5                  PUSH   iy   ; push SCP (scope pointer)
07CC   FD E5                  PUSH   iy   ; push BP
07CE   FD 21 00 00            LD   iy,0   ; BP = SP
07D2   FD 39                  ADD   iy,sp   
07D4   44 4D                  LD   bc,hl   ; IP = pointer to lambda
07D6   0B                     DEC   bc   ; dec to prepare for next routine
07D7                EXEC3:       
07D7   DD E9                  JP   (ix)   
07D9                LAMBDA:      
07D9   03                     INC   bc   
07DA   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
07DD   E5                     PUSH   hl   
07DE   16 01                  LD   d,1   ; nesting: count first parenthesis
07E0                LAMBDA1:      ; Skip to end of definition
07E0   0A                     LD   a,(bc)   ; Get the next character
07E1   03                     INC   bc   ; Point to next character
07E2   77                     LD   (hl),a   
07E3   23                     INC   hl   
07E4   FE 27                  CP   "'"   
07E6   28 1C                  JR   z,lambda2   
07E8   FE 28                  CP   "("   
07EA   28 18                  JR   z,lambda2   
07EC   FE 29                  CP   ")"   
07EE   28 14                  JR   z,lambda2   
07F0   FE 7B                  CP   "{"   
07F2   28 10                  JR   z,lambda2   
07F4   FE 7D                  CP   "}"   ; Is it the end of the definition?
07F6   28 0C                  JR   z,lambda2   
07F8   FE 5B                  CP   "["   
07FA   28 08                  JR   z,lambda2   
07FC   FE 5D                  CP   "]"   
07FE   28 04                  JR   z,lambda2   
0800   FE 60                  CP   "`"   
0802   20 DC                  JR   nz,lambda1   
0804                LAMBDA2:      
0804   14                     INC   d   
0805   CB 42                  BIT   0,d   ; balanced?
0807   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0809   FE 7D                  CP   "}"   ; Is it the end of the definition?
080B   20 D3                  JR   nz,lambda1   ; get the next element
080D   0B                     DEC   bc   
080E   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0811   DD E9                  JP   (ix)   
0813                LAMBDAEND:      
0813   E1                     POP   hl   ; hl = last result
0814   FD 54                  LD   d,iyh   ; de = BP
0816   FD 5D                  LD   e,iyl   
0818   EB                     EX   de,hl   ; hl = BP, de = result
0819   F9                     LD   sp,hl   ; sp = BP
081A   E1                     POP   hl   ; hl = old BP
081B   C1                     POP   bc   ; pop scope ptr (discard)
081C   C1                     POP   bc   ; bc = IP
081D   F9                     LD   sp,hl   ; sp = old BP
081E   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0822   FD 39                  ADD   iy,sp   
0824   D5                     PUSH   de   ; push result
0825   DD E9                  JP   (ix)   
0827                BLOCK:       
0827   03                     INC   bc   
0828   C5                     PUSH   bc   ; return first opcode of block
0829   16 01                  LD   d,1   ; nesting: count first parenthesis
082B                BLOCK1:      ; Skip to end of definition
082B   0A                     LD   a,(bc)   ; Get the next character
082C   03                     INC   bc   ; Point to next character
082D   FE 27                  CP   "'"   
082F   28 1C                  JR   z,block2   
0831   FE 28                  CP   "("   
0833   28 18                  JR   z,block2   
0835   FE 29                  CP   ")"   
0837   28 14                  JR   z,block2   
0839   FE 7B                  CP   "{"   
083B   28 10                  JR   z,block2   
083D   FE 7D                  CP   "}"   
083F   28 0C                  JR   z,block2   
0841   FE 5B                  CP   "["   
0843   28 08                  JR   z,block2   
0845   FE 5D                  CP   "]"   
0847   28 04                  JR   z,block2   
0849   FE 60                  CP   "`"   
084B   20 DE                  JR   nz,block1   
084D                BLOCK2:      
084D   14                     INC   d   
084E   CB 42                  BIT   0,d   ; balanced?
0850   20 D9                  JR   nz,block1   ; not balanced, get the next element
0852   FE 29                  CP   ")"   ; Is it the end of the block?
0854   20 D5                  JR   nz,block1   ; get the next element
0856   0B                     DEC   bc   
0857   DD E9                  JP   (ix)   
0859                BLOCKEND:      
0859   E1                     POP   hl   ; hl = last result
085A   FD 54                  LD   d,iyh   ; de = BP
085C   FD 5D                  LD   e,iyl   
085E   EB                     EX   de,hl   ; hl = BP, de = result
085F   F9                     LD   sp,hl   ; sp = BP
0860   E1                     POP   hl   ; hl = old BP
0861   C1                     POP   bc   ; pop SCP (discard)
0862   C1                     POP   bc   ; bc = IP
0863   F9                     LD   sp,hl   ; sp = old BP
0864   FD 21 00 00            LD   iy,0   ; iy = sp
0868   FD 39                  ADD   iy,sp   
086A   D5                     PUSH   de   ; push result
086B   DD E9                  JP   (ix)   
086D                ARG:         
086D   03                     INC   bc   ; get next char
086E   0A                     LD   a,(bc)   
086F   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0871   E6 07                  AND   $07   ; mask
0873   87                     ADD   a,a   ; double
0874   6F                     LD   l,a   ; hl = offset into args
0875   26 00                  LD   h,0   
0877   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
087A   FD 56 03               LD   d,(iy+3)   
087D   EB                     EX   de,hl   ; hl = SCP - offset
087E   B7                     OR   a   
087F   ED 52                  SBC   hl,de   
0881   2B                     DEC   hl   ; de = arg
0882   56                     LD   d,(hl)   
0883   2B                     DEC   hl   
0884   5E                     LD   e,(hl)   
0885   D5                     PUSH   de   ; push arg
0886   DD E9                  JP   (ix)   
0888                             ; 
0888                IN:          
0888   E1                     POP   hl   ; hl = string
0889   D1                     POP   de   ; de = char
088A                IN1:         
088A   7E                     LD   a,(hl)   
088B   23                     INC   hl   
088C   FE 00                  CP   0   ; is end of string
088E   28 04                  JR   z,in2   
0890   BB                     CP   e   
0891   20 F7                  JR   nz,in1   
0893   B7                     OR   a   ; a is never 0, or a resets zero flag
0894                IN2:         
0894   21 00 00               LD   hl,0   ; hl = result
0897   28 01                  JR   z,in3   
0899   2B                     DEC   hl   ; if nz de = $ffff
089A                IN3:         
089A   E5                     PUSH   hl   ; push result
089B   DD E9                  JP   (ix)   
089D                NEWADD2:      
089D   C5                     PUSH   bc   ; push IP
089E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08A1   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08A4   D5                     PUSH   de   ; push SCP
08A5   FD E5                  PUSH   iy   ; push base pointer
08A7   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
08AB   FD 39                  ADD   iy,sp   ; 
08AD   FD 56 FF               LD   d,(iy-1)   
08B0   FD 5E FE               LD   e,(iy-2)   
08B3   FD 66 FD               LD   h,(iy-3)   
08B6   FD 6E FC               LD   l,(iy-4)   
08B9   19                     ADD   hl,de   ; hl = hl + de
08BA   EB                     EX   de,hl   ; de = result
08BB   E1                     POP   hl   ; hl = old BP
08BC   C1                     POP   bc   ; pop SCP (discard)
08BD   C1                     POP   bc   ; bc = IP
08BE   F9                     LD   sp,hl   ; sp = old BP
08BF   FD 21 00 00            LD   iy,0   
08C3   FD 39                  ADD   iy,sp   
08C5   D5                     PUSH   de   ; push result
08C6   DD E9                  JP   (ix)   
08C8                IF:          
08C8   11 00 00               LD   de,0   ; null pointer for else
08CB   18 01                  JR   ifte1   
08CD                IFTE:        
08CD   D1                     POP   de   ; de = else
08CE                IFTE1:       
08CE   E1                     POP   hl   ; hl = then
08CF   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
08D0   23                     INC   hl   ; check for true
08D1   7C                     LD   a,h   
08D2   B5                     OR   l   
08D3   E1                     POP   hl   ; hl = then
08D4   28 01                  JR   z,ifte2   
08D6   EB                     EX   de,hl   ; condition = false, hl = else
08D7                IFTE2:       
08D7   7C                     LD   a,h   ; check if hl is null
08D8   B5                     OR   l   
08D9   28 13                  JR   z,ifte3   
08DB   C5                     PUSH   bc   ; push IP
08DC   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08DF   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08E2   D5                     PUSH   de   ; push SCP
08E3   FD E5                  PUSH   iy   ; push BP
08E5   FD 21 00 00            LD   iy,0   ; iy = sp
08E9   FD 39                  ADD   iy,sp   
08EB   44 4D                  LD   bc,hl   ; IP = then
08ED   0B                     DEC   bc   
08EE                IFTE3:       
08EE   DD E9                  JP   (ix)   
08F0                SWITCH:      
08F0   E1                     POP   hl   ; get condition from stack
08F1   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
08F2   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
08F5   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
08F8   D5                     PUSH   de   ; push SCP
08F9   FD E5                  PUSH   iy   ; push BP
08FB   FD 21 00 00            LD   iy,0   ; BP = SP
08FF   FD 39                  ADD   iy,sp   
0901   E5                     PUSH   hl   ; push condition as first arg of new frame
0902   DD E9                  JP   (ix)   
0904                CASE:        
0904   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0907   FD 6E FE               LD   l,(iy-2)   
090A   23                     INC   hl   ; hl -= 1 index from second arg
090B   29                     ADD   hl,hl   ; hl *= 2 word offset
090C   FD 54                  LD   d,iyh   ; hl = BP, de = offset
090E   FD 5D                  LD   e,iyl   
0910   EB                     EX   de,hl   
0911   B7                     OR   a   ; hl = BP - offset
0912   ED 52                  SBC   hl,de   
0914   54 5D                  LD   de,hl   ; save arg ptr
0916   2B                     DEC   hl   ; hl += 2
0917   2B                     DEC   hl   
0918   B7                     OR   a   ; arg ptr - stack pointer
0919   ED 72                  SBC   hl,sp   
091B   30 03                  JR   nc,case0   
091D   D1                     POP   de   ; pop last arg
091E   18 05                  JR   case1   
0920                CASE0:       
0920   EB                     EX   de,hl   
0921   2B                     DEC   hl   ; de = arg
0922   56                     LD   d,(hl)   
0923   2B                     DEC   hl   
0924   5E                     LD   e,(hl)   
0925                CASE1:       
0925   7A                     LD   a,d   ; is arg == null ? then skip
0926   B3                     OR   e   
0927   28 09                  JR   z,case2   
0929   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
092C   FD 70 05               LD   (iy+5),b   
092F   42 4B                  LD   bc,de   ; IP = arg
0931   0B                     DEC   bc   
0932                CASE2:       
0932   DD E9                  JP   (ix)   
0934                WORDS:       
0934   21 02 00               LD   hl,2   
0937   C3 3A 09               JP   bytes   
093A                BYTES:       
093A   21 01 00               LD   hl,1   
093D                BYTES1:      
093D   22 80 1B               LD   (vDataWidth),hl   
0940   DD E9                  JP   (ix)   
0942                ARRAY:       
0942   C5                     PUSH   bc   ; create stack frame, push IP
0943   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0946   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0949   D5                     PUSH   de   ; push SCP
094A   FD E5                  PUSH   iy   ; push BP
094C   FD 21 00 00            LD   iy,0   ; BP = SP
0950   FD 39                  ADD   iy,sp   
0952   DD E9                  JP   (ix)   
0954                ARRAYEND:      
0954   FD 54                  LD   d,iyh   ; de = BP
0956   FD 5D                  LD   e,iyl   
0958   62 6B                  LD   hl,de   ; hl = de
095A   B7                     OR   a   
095B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
095D   C5                     PUSH   bc   ; bc' = IP
095E   D9                     EXX      
095F   C1                     POP   bc   
0960   D9                     EXX      
0961   44 4D                  LD   bc,hl   ; bc = count
0963   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0966   71                     LD   (hl),c   ; write count before array data
0967   23                     INC   hl   
0968   70                     LD   (hl),b   
0969   23                     INC   hl   
096A   E5                     PUSH   hl   ; hl = ptr to array (index 0)
096B   D9                     EXX      
096C   E1                     POP   hl   ; hl' = ptr to array (index 0)
096D   D9                     EXX      
096E   3A 80 1B               LD   a,(vDataWidth)   
0971   FE 01                  CP   1   ; byte?
0973   20 0D                  JR   nz,arrayEnd2   
0975   EB                     EX   de,hl   
0976                ARRAYEND1:      
0976   1B                     DEC   de   
0977   1B                     DEC   de   
0978   1A                     LD   a,(de)   
0979   77                     LD   (hl),a   
097A   23                     INC   hl   
097B   0B                     DEC   bc   
097C   79                     LD   a,c   
097D   B0                     OR   b   
097E   20 F6                  JR   nz,arrayEnd1   
0980   18 10                  JR   arrayEnd4   
0982                ARRAYEND2:      
0982   1B                     DEC   de   
0983   1A                     LD   a,(de)   
0984   08                     EX   af,af'   
0985   1B                     DEC   de   
0986   1A                     LD   a,(de)   
0987   77                     LD   (hl),a   
0988   23                     INC   hl   
0989   08                     EX   af,af'   
098A   1A                     LD   a,(de)   
098B   77                     LD   (hl),a   
098C   23                     INC   hl   
098D   0B                     DEC   bc   
098E   79                     LD   a,c   
098F   B0                     OR   b   
0990   20 F0                  JR   nz,arrayEnd2   
0992                ARRAYEND4:      
0992   FD 54                  LD   d,iyh   ; de = BP
0994   FD 5D                  LD   e,iyl   
0996   EB                     EX   de,hl   ; hl = BP, de = result
0997   F9                     LD   sp,hl   ; sp = BP
0998   E1                     POP   hl   ; hl = old BP
0999   C1                     POP   bc   ; pop SCP (discard)
099A   C1                     POP   bc   ; bc = IP
099B   F9                     LD   sp,hl   ; sp = old BP
099C   FD 21 00 00            LD   iy,0   ; iy = sp
09A0   FD 39                  ADD   iy,sp   
09A2   D9                     EXX      
09A3   E5                     PUSH   hl   
09A4   C5                     PUSH   bc   
09A5   D9                     EXX      
09A6   C1                     POP   bc   
09A7   DD E9                  JP   (ix)   
09A9                             ; updateEntry:
09A9                             ;     ld bc,
09A9                             ;     pop hl                          ; pointer to args
09A9                             ;     ld e,(hl)
09A9                             ;     ret
09A9                             ; hash C-string in BC, result in HL
09A9                HASHSTR:      
09A9   21 00 00               LD   hl,0   
09AC                HASHSTR1:      
09AC   0A                     LD   a,(bc)   ; load next char
09AD   03                     INC   bc   
09AE   FE 00                  CP   0   ; null?
09B0   C8                     RET   z   
09B1                HASHSTR2:      
09B1   16 00                  LD   d,0   
09B3   5F                     LD   e,a   
09B4   19                     ADD   hl,de   
09B5   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
09B7   29                     ADD   hl,hl   ; shift left
09B8   19                     ADD   hl,de   ; add
09B9   29                     ADD   hl,hl   ; shift left
09BA   29                     ADD   hl,hl   ; shift left
09BB   29                     ADD   hl,hl   ; shift left
09BC   29                     ADD   hl,hl   ; shift left
09BD   29                     ADD   hl,hl   ; shift left
09BE   29                     ADD   hl,hl   ; shift left
09BF   19                     ADD   hl,de   ; add
09C0   18 EA                  JR   hashStr1   
09C2                             ; add entry to hash slots and hash pointers
09C2                             ; bc = hash (b = hi, c = lo), de = addr
09C2                             ; sets carry if successful
09C2                DEFINEENTRY:      
09C2   CB 21                  SLA   c   ; lo = lo * 2
09C4   69                     LD   l,c   ; lo1 = lo
09C5   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09C7                DEFINEENTRY0:      
09C7   7E                     LD   a,(hl)   ; a = (lo1)
09C8   FE FF                  CP   UNUSED   ; is it unused?
09CA   28 12                  JR   z,defineEntry3   ; yes, add entry
09CC   79                     LD   a,c   ; a = lo
09CD   BE                     CP   (hl)   ; compare (lo1) with lo
09CE   20 06                  JR   nz,defineEntry1   ; no match loop around
09D0   2C                     INC   l   
09D1   78                     LD   a,b   ; a = hi
09D2   BE                     CP   (hl)   ; compare (lo1+1) with hi
09D3   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
09D5   2D                     DEC   l   ; restore l
09D6                DEFINEENTRY1:      
09D6   2C                     INC   l   ; try next entry
09D7   2C                     INC   l   
09D8   79                     LD   a,c   ; compare lo and lo1
09D9   BD                     CP   l   ; if equal then there's no space left, reject
09DA   20 EB                  JR   nz,defineEntry0   
09DC                DEFINEENTRY2:      
09DC   3F                     CCF      ; clear carry flag, failure
09DD   C9                     RET      
09DE                DEFINEENTRY3:      ; new entry
09DE   71                     LD   (hl),c   ; (lo1) = hash lo
09DF   23                     INC   hl   
09E0   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
09E1   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
09E3   72                     LD   (hl),d   
09E4   2B                     DEC   hl   
09E5   73                     LD   (hl),e   ; (slot + 2) = address
09E6   37                     SCF      ; set carry flag, success
09E7   C9                     RET      
09E8                             ; looks up hash and returns address
09E8                             ; bc = hash
09E8                             ; returns addr in hl, sets carry if successful
09E8                LOOKUPENTRY:      
09E8   CB 21                  SLA   c   ; lo = lo * 2
09EA   69                     LD   l,c   ; lo1 = lo
09EB   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
09ED                LOOKUPENTRY0:      
09ED   7E                     LD   a,(hl)   ; a = (hl), slot
09EE   FE FF                  CP   UNUSED   ; is it unused?
09F0   28 EA                  JR   z,defineEntry2   ; yes, does not exist
09F2   79                     LD   a,c   ; a = lo
09F3   BE                     CP   (hl)   ; compare (lo1) with lo
09F4   20 06                  JR   nz,lookupEntry1   ; no match loop around
09F6   2C                     INC   l   
09F7   78                     LD   a,b   ; a = hi
09F8   BE                     CP   (hl)   ; compare (lo1+1) with hi
09F9   28 09                  JR   z,lookupEntry3   
09FB   2D                     DEC   l   
09FC                LOOKUPENTRY1:      
09FC   2C                     INC   l   
09FD   2C                     INC   l   
09FE   79                     LD   a,c   
09FF   BD                     CP   l   ; no space left, reject
0A00   20 EB                  JR   nz,lookupEntry0   
0A02                LOOKUPENTRY2:      
0A02   3F                     CCF      ; clear carry flag, failure
0A03   C9                     RET      
0A04                LOOKUPENTRY3:      
0A04   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0A06   56                     LD   d,(hl)   
0A07   2D                     DEC   l   ; restore l
0A08   5E                     LD   e,(hl)   ; (slot + 2) = address
0A09   EB                     EX   de,hl   
0A0A   37                     SCF      
0A0B   C9                     RET      
0A0C                             ; str -- num
0A0C                HASH:        
0A0C   E1                     POP   hl   
0A0D   C5                     PUSH   bc   
0A0E   44 4D                  LD   bc,hl   
0A10   CD A9 09               CALL   hashStr   
0A13   C1                     POP   bc   
0A14   E5                     PUSH   hl   
0A15   DD E9                  JP   (ix)   
0A17                             ; str addr -- bool
0A17                DEF:         
0A17   E1                     POP   hl   ; hl = addr
0A18   E3                     EX   (sp),hl   ; hl = str pointer (sp) = addr
0A19   C5                     PUSH   bc   
0A1A   44 4D                  LD   bc,hl   
0A1C   CD A9 09               CALL   hashStr   ; hl = hash
0A1F   44 4D                  LD   bc,hl   ; bc = hash
0A21   E1                     POP   hl   ; hl = old BC
0A22   E3                     EX   (sp),hl   ; hl = addr
0A23   EB                     EX   de,hl   ; de = addr
0A24   CD C2 09               CALL   defineEntry   
0A27   21 00 00               LD   hl,0   ; if c return TRUE
0A2A   30 01                  JR   nc,def1   
0A2C   2B                     DEC   hl   
0A2D                DEF1:        
0A2D   C1                     POP   bc   
0A2E   E5                     PUSH   hl   
0A2F   DD E9                  JP   (ix)   
0A31                             ; str -- addr
0A31                ADDR:        
0A31   E1                     POP   hl   ; hl = str pointer
0A32   C5                     PUSH   bc   
0A33   44 4D                  LD   bc,hl   
0A35   CD A9 09               CALL   hashStr   ; hl = hash
0A38   44 4D                  LD   bc,hl   
0A3A   CD E8 09               CALL   lookupEntry   
0A3D   38 03                  JR   c,addr1   
0A3F   21 00 00               LD   hl,0   
0A42                ADDR1:       
0A42   C1                     POP   bc   
0A43   E5                     PUSH   hl   
0A44   DD E9                  JP   (ix)   
0A46                DEFINE:      
0A46   E1                     POP   hl   
0A47   7E                     LD   a,(hl)   
0A48   23                     INC   hl   
0A49   44 4D                  LD   bc,hl   
0A4B   5F                     LD   e,a   
0A4C   16 00                  LD   d,0   
0A4E   19                     ADD   hl,de   
0A4F   5E                     LD   e,(hl)   
0A50   23                     INC   hl   
0A51   56                     LD   d,(hl)   
0A52   23                     INC   hl   
0A53   E5                     PUSH   hl   ; bc = str
0A54   D5                     PUSH   de   
0A55   CD A9 09               CALL   hashStr   ; hl = hash
0A58   D1                     POP   de   
0A59   44 4D                  LD   bc,hl   
0A5B   C3 C2 09               JP   defineEntry   
0A5E                IDENT:       
0A5E   11 00 1A               LD   de,PAD   
0A61   18 03                  JR   ident1   
0A63   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
0A65                IDENT0:      ; copy to PAD area
0A65   03                     INC   bc   ; characters that are part of the identifier
0A66                IDENT1:      ; 0-9 A-Z a-z _
0A66   0A                     LD   a,(bc)   
0A67   6F                     LD   l,a   
0A68   7E                     LD   a,(hl)   
0A69   D6 21                  SUB   " "+1   ; opcodes start above white space
0A6B   FE 2F                  CP   lsb(ident_)   
0A6D   20 09                  JR   nz,ident2   
0A6F   FE 00                  CP   lsb(num_)   
0A71   20 05                  JR   nz,ident2   
0A73   7D                     LD   a,l   
0A74   12                     LD   (de),a   
0A75   13                     INC   de   
0A76   18 ED                  JR   ident0   
0A78                IDENT2:      ; non identifier char detected
0A78   0B                     DEC   bc   
0A79   AF                     XOR   a   
0A7A   77                     LD   (hl),a   ; terminate string with null
0A7B   C5                     PUSH   bc   
0A7C   01 00 1A               LD   bc,PAD   
0A7F   CD A9 09               CALL   hashStr   ; hl = hash
0A82   44 4D                  LD   bc,hl   
0A84   CD E8 09               CALL   lookupEntry   
0A87   C1                     POP   bc   
0A88   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0A8A   DD E9                  JP   (ix)   
0A8C                IDENT3:      
0A8C   E9                     JP   (hl)   
0A8D                             ; division subroutine.
0A8D                             ; bc: divisor, de: dividend, hl: remainder
0A8D                DIVIDE:      
0A8D   21 00 00               LD   hl,0   ; zero the remainder
0A90   3E 10                  LD   a,16   ; loop counter
0A92                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A92   CB 21                  SLA   c   
0A94   CB 10                  RL   b   
0A96   ED 6A                  ADC   hl,hl   
0A98   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A9A   38 03                  JR   c,divide2   
0A9C   0C                     INC   c   
0A9D   18 01                  JR   divide3   
0A9F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A9F   19                     ADD   hl,de   
0AA0                DIVIDE3:      
0AA0   3D                     DEC   a   
0AA1   20 EF                  JR   nz,divide1   
0AA3   50                     LD   d,b   ; result from bc to de
0AA4   59                     LD   e,c   
0AA5                DIVIDE4:      
0AA5   C1                     POP   bc   ; Restore the IP
0AA6   D5                     PUSH   de   ; push Result
0AA7   E5                     PUSH   hl   ; push remainder
0AA8   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                          DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1 2 +", 3
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 5E 05               CALL   init   
4006   CD C4 07               CALL   exec   
4009   31 20 32 20 2B 00      .CSTR   "1 2 +"   
400F                          ;*Macro unroll:  expect "1 2 +",3
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 03 00               LD   DE,3   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 50                  JR   Z,expectM_0_2112S43   
401B   CD 45 07               CALL   printStr   
401E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
402A   CD 45 07               CALL   printStr   
402D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403C   21 03 00               LD   HL,3   
403F   CD DE 06               CALL   prtdec   
4042   CD 45 07               CALL   printStr   
4045   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4052   E1                     POP   hl   
4053   E5                     PUSH   hl   
4054   CD DE 06               CALL   prtdec   
4057   E1                     POP   hl   
4058   CD 45 07               CALL   printStr   
405B   20 28 23 00            .CSTR   " (#"   
405F   CD 26 07               CALL   prthex   
4062   CD 45 07               CALL   printStr   
4065   29 0D 0A 00            .CSTR   ")\r\n"   
4069   76                     HALT      
406A   00                     .CSTR      
406B                EXPECTM_0_2112S43:      
406B   E1                     POP   HL   
406C                             ; test "1 2 add", 3
406C                             ; test "'H' 2 def 'H' addr", 2
406C                             ; test "'H' 2 de 'J' 3 de 'H' lo 'J' lo +", 5
406C                             ; test "'H' 2 de", TRUE
406C                             ; test "'H' ha", $3648
406C                             ; test "'H' {1} de 'H' lo", 1
406C                             ; test "by [`A` `B` `C`]", 0
406C                             ; test "by [`A` `B` `C`] 1 ge", "B"
406C                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
406C                             ; test "wo [10 20 30] 1 ge", 10
406C                             ; test "wo [10 20 30] 1 50 set 1 get", 50
406C                             ; test "1 2 +", 3
406C                             ; test "4 1 2 +", 3
406C                             ; test "1", 1
406C                             ; test "2", 2
406C                             ; test "``", 0
406C                             ; test "`a`", $61
406C                             ; test "`\\``", $60
406C                             ; test "`b` 'cba' in", -1
406C                             ; test "`x` 'cba' in", 0
406C                             ; test "5 0 (1) if", 5
406C                             ; test "0 (1) (2) ife", 2
406C                             ; test "5 -1 (1) if", 1
406C                             ; test "-1 (1) (2) ife", 1
406C                             ; test "9 sw (1) (5) ca", 5
406C                             ; test "0 sw (1) ca", 1
406C                             ; test "1 sw (1) (2) (3) ca", 2
406C                             ; test "5 -1 (2) if", 2
406C                             ; test "5 0 (2) if", 5
406C                             ; test "5 0 (0 (2) if) if", 5
406C                             ; test "5 0 (-1 (2) if) if", 5
406C                             ; test "5 -1 (2) if", 2
406C                             ; test "5 -1 (-1 (2) if) if", 2
406C                             ; test "(1) ex", 1
406C                             ; test "2 ($1) ex", 2
406C                             ; test "2 4 ($2) ex", 4
406C                             ; test "((1) ex) ex", 1
406C                             ; test "5 (-1 ($1) if) ex", 5
406C                             ; test "'A' @", 65
406C                             ; test "1", 1
406C                             ; test "0", 0
406C                             ; test "10", 10
406C                             ; test "123", 123
406C                             ; test "$10", $10
406C                             ; test "$FF", $FF
406C                             ; test "2 3 =", 0
406C                             ; test "3 3 =", 1
406C                             ; test "2 3 <", 1
406C                             ; test "3 3 <", 0
406C                             ; test "3 3 >", 0
406C                             ; test "4 3 >", 1
406C                             ; test "1 2 +", 3
406C                             ; test "123 456 +", 123+456
406C                             ; test "64 128 +", 64+128
406C                             ; test "5 3 -", 2
406C                             ; test "3 5 &", 1
406C                             ; test "3 5 |", 7
406C                             ; test "2 3 *", 6
406C                             ; test "1 2 3 + *", 5
406C                             ; ; test "1 2 3 ' +", 3
406C                             ; ; test "1_ 2 +",1
406C                             ; ; test "1_ 1 +",0
406C                             ; ; call enter
406C                             ; ;     .cstr "1 3",$22,"+"
406C                             ; ; expect "1 3 DUP +", 6
406C                             ; ; test "5 2/'", 2
406C                             ; ; test "3 5$ -", 2
406C                             ; ; test "5 2/$ '", 1
406C                             ; ; test "2 3%++", 7
406C                             ; ; test "1 2 3~''", 2
406C                             ; ; test "1 2 3~+*", 8
406C                             ; ; test "2a!a@",2
406C                             ; ; test "3x! 1 x@+x! x@", 4
406C                             ; ; test "3x! 1_ x@+x! x@", 2
406C                             ; ; test "1{", 2
406C                             ; ; test "1}", 0
406C                             ; ; test "2}", 1
406C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
406C                             ; ; test "(2) \\^", 2
406C                             ; ; test ":X1; X", 1
406C                             ; ; test ":A100;A", 100
406C                             ; ; test ":Aa!; 3A a@", 3
406C                             ; ; test ":Aa!;:Ba@;4AB", 4
406C                             ; ; test "[]$ '", 0
406C                             ; ; test "[3]$ '", 1
406C                             ; ; test "[3]'@", 3
406C                             ; ; test "[1 2 3]'@", 1
406C                             ; ; test "[1 2 3]'2+@", 2
406C                             ; ; test "\\h@[1]''\\h@$-", 2
406C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
406C                             ; ; test "\\[]$ '", 0
406C                             ; ; test "\\[3]'\\@", 3
406C                             ; ; test "\\[3]$ '", 1
406C                             ; ; test "\\[1 2 3]'\\@", 1
406C                             ; ; test "\\[1 2 3]'1+\\@", 2
406C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
406C                             ; ; test "\\h@\\[1]''\\h@$-", 1
406C                             ; ; test "\\`A`\\@",65
406C                             ; ; test "0 0(1+)", 0
406C                             ; ; test "0 1(1+)", 1
406C                             ; ; test "0 2(1+)", 2
406C                             ; ; test "0 1(0(1+))", 0
406C                             ; ; test "0 1(1(1+))", 1
406C                             ; ; test "0 2(1(1+))", 2
406C                             ; ; test "0 2(2(1+))", 4
406C                             ; ; test "0 1(\\i@+)", 0
406C                             ; ; test "0 2(\\i@+)", 1
406C                             ; ; test "0 3(\\i@+)", 3
406C                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
406C                             ; ; test "0t! 10(1 t@+t!) t@",10
406C                             ; ; test "0(100)(200)",200
406C                             ; ; test "1(100)(200)",100
406C                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
406C                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
406C                             ; ; test ":X10;\\0X", 10
406C                             ; ; test "2 \\1x! \\1x@", 2
406C   CD 45 07               CALL   printStr   
406F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4075   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 257 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 287 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
                    > USED AT LINE 901 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 194 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 196 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 684 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 52 IN Siena.asm
NEXT:               025F DEFINED AT LINE 183 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 673 IN Siena.asm
NEXT1:              026C DEFINED AT LINE 193 IN Siena.asm
                    > USED AT LINE 187 IN Siena.asm
ETX:                0274 DEFINED AT LINE 198 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
ETX1:               027D DEFINED AT LINE 203 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
EXIT:               027F DEFINED AT LINE 205 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
START:              0294 DEFINED AT LINE 225 IN Siena.asm
INTERPRET:          02AA DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
INTERPRET2:         02B4 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 280 IN Siena.asm
INTERPRET3:         02BC DEFINED AT LINE 244 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INTERPRET4:         02C2 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
WAITCHAR:           02C7 DEFINED AT LINE 256 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 303 IN Siena.asm
MACRO:              02D6 DEFINED AT LINE 265 IN Siena.asm
WAITCHAR1:          02D8 DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
WAITCHAR3:          02E6 DEFINED AT LINE 291 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
WAITCHAR4:          02FC DEFINED AT LINE 307 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 316 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 318 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 320 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 322 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 324 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 326 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 328 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 330 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 332 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
BLOCK_:             0420 DEFINED AT LINE 339 IN Siena.asm
BLOCKEND_:          0423 DEFINED AT LINE 341 IN Siena.asm
CHAR_:              0426 DEFINED AT LINE 343 IN Siena.asm
ARRAY_:             0429 DEFINED AT LINE 345 IN Siena.asm
ARRAYEND_:          042C DEFINED AT LINE 347 IN Siena.asm
IDENT_:             042F DEFINED AT LINE 349 IN Siena.asm
AND_:               0432 DEFINED AT LINE 352 IN Siena.asm
AND1:               0439 DEFINED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 384 IN Siena.asm
OR_:                043D DEFINED AT LINE 365 IN Siena.asm
XOR_:               0446 DEFINED AT LINE 375 IN Siena.asm
XOR1:               0447 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
INV_:               044F DEFINED AT LINE 386 IN Siena.asm
ADD_:               0454 DEFINED AT LINE 390 IN Siena.asm
HDOT_:              045A DEFINED AT LINE 397 IN Siena.asm
ETX_:               0461 DEFINED AT LINE 402 IN Siena.asm
EXIT_:              0464 DEFINED AT LINE 405 IN Siena.asm
FETCH_:             0467 DEFINED AT LINE 408 IN Siena.asm
FETCH1:             0468 DEFINED AT LINE 410 IN Siena.asm
KEY_:               046E DEFINED AT LINE 417 IN Siena.asm
                    > USED AT LINE 745 IN Siena.asm
MUL_:               0477 DEFINED AT LINE 424 IN Siena.asm
NOP_:               047A DEFINED AT LINE 426 IN Siena.asm
SHL_:               047C DEFINED AT LINE 430 IN Siena.asm
SHR_:               0481 DEFINED AT LINE 437 IN Siena.asm
SHR1:               0482 DEFINED AT LINE 439 IN Siena.asm
STORE_:             0489 DEFINED AT LINE 445 IN Siena.asm
NEG_:               0490 DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
SUB_:               0496 DEFINED AT LINE 458 IN Siena.asm
SUB2:               0498 DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
EQ_:                049E DEFINED AT LINE 467 IN Siena.asm
FALSE_:             04A5 DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
GT_:                04AB DEFINED AT LINE 478 IN Siena.asm
LT_:                04AF DEFINED AT LINE 483 IN Siena.asm
LT1:                04B1 DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
TRUE_:              04B9 DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
GTE_:               04BF DEFINED AT LINE 496 IN Siena.asm
LTE_:               04C3 DEFINED AT LINE 500 IN Siena.asm
LTE1:               04C5 DEFINED AT LINE 503 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
MOD_:               04CE DEFINED AT LINE 509 IN Siena.asm
DIV_:               04DA DEFINED AT LINE 519 IN Siena.asm
CFETCH_:            04E6 DEFINED AT LINE 529 IN Siena.asm
COMMENT_:           04ED DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
CSTORE_:            04F7 DEFINED AT LINE 544 IN Siena.asm
EMIT_:              04FC DEFINED AT LINE 550 IN Siena.asm
PROMPT_:            0503 DEFINED AT LINE 556 IN Siena.asm
INPORT_:            0508 DEFINED AT LINE 561 IN Siena.asm
NEWLN_:             0513 DEFINED AT LINE 571 IN Siena.asm
OUTPORT_:           0518 DEFINED AT LINE 575 IN Siena.asm
PRTSTR_:            0521 DEFINED AT LINE 584 IN Siena.asm
PRTSTR:             0521 DEFINED AT LINE 585 IN Siena.asm
CLOSURE_:           0527 DEFINED AT LINE 590 IN Siena.asm
FILTER_:            0527 DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
GET_:               0527 DEFINED AT LINE 592 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
LET_:               0527 DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
MAP_:               0527 DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
PRINT_:             0527 DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
SCAN_:              0527 DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
SET_:               0527 DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
SHIFT_:             0527 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
WHILE_:             0527 DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 785 IN Siena.asm
VAR_:               0527 DEFINED AT LINE 600 IN Siena.asm
MUL:                0529 DEFINED AT LINE 610 IN Siena.asm
                    > USED AT LINE 424 IN Siena.asm
MUL2:               0533 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
PROMPT:             0545 DEFINED AT LINE 638 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
PUTSTR0:            054E DEFINED AT LINE 643 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
PUTSTR:             0552 DEFINED AT LINE 646 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 930 IN Siena.asm
CRLF:               0557 DEFINED AT LINE 667 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
INIT:               055E DEFINED AT LINE 672 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 40
INIT1:              0585 DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
NUM:                0691 DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
NUM0:               069A DEFINED AT LINE 799 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
NUM1:               069B DEFINED AT LINE 801 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
NUM2:               06B3 DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
                    > USED AT LINE 843 IN Siena.asm
NUM3:               06BE DEFINED AT LINE 827 IN Siena.asm
                    > USED AT LINE 822 IN Siena.asm
HEXNUM:             06C1 DEFINED AT LINE 831 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
HEXNUM1:            06C4 DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
HEXNUM2:            06CC DEFINED AT LINE 839 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
PRTDEC:             06DE DEFINED AT LINE 852 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            06ED DEFINED AT LINE 867 IN Siena.asm
                    > USED AT LINE 858 IN Siena.asm
PRTDEC1:            070F DEFINED AT LINE 883 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
                    > USED AT LINE 873 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
PRTDEC2:            0711 DEFINED AT LINE 885 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
PRTDEC3:            0721 DEFINED AT LINE 897 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
PRTDEC4:            0722 DEFINED AT LINE 899 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
PRTHEX:             0726 DEFINED AT LINE 903 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0731 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 907 IN Siena.asm
                    > USED AT LINE 909 IN Siena.asm
PRTHEX3:            073A DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
PRINTSTR:           0745 DEFINED AT LINE 928 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 151
LOOKUPREF:          074C DEFINED AT LINE 935 IN Siena.asm
LOOKUPREF0:         074E DEFINED AT LINE 937 IN Siena.asm
LOOKUPREF1:         0752 DEFINED AT LINE 940 IN Siena.asm
LOOKUPREF2:         0758 DEFINED AT LINE 944 IN Siena.asm
                    > USED AT LINE 939 IN Siena.asm
LOOKUPREF3:         075C DEFINED AT LINE 947 IN Siena.asm
                    > USED AT LINE 943 IN Siena.asm
NESTING:            076A DEFINED AT LINE 970 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
NESTING1A:          0775 DEFINED AT LINE 977 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
NESTING1:           0778 DEFINED AT LINE 980 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
NESTING2:           0787 DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
NESTING3:           0789 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
NESTING4:           0794 DEFINED AT LINE 999 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
STRDEF:             0796 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
STRDEF1:            079E DEFINED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
STRDEF2:            07A1 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
CHAR:               07AF DEFINED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
CHAR1:              07B2 DEFINED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
CHAR2:              07BE DEFINED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
CHAR3:              07C1 DEFINED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
EXEC:               07C4 DEFINED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              07C5 DEFINED AT LINE 1044 IN Siena.asm
EXEC2:              07C9 DEFINED AT LINE 1048 IN Siena.asm
EXEC3:              07D7 DEFINED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
LAMBDA:             07D9 DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
LAMBDA1:            07E0 DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1091 IN Siena.asm
LAMBDA2:            0804 DEFINED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
LAMBDAEND:          0813 DEFINED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
BLOCK:              0827 DEFINED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
BLOCK1:             082B DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
BLOCK2:             084D DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
BLOCKEND:           0859 DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
ARG:                086D DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
IN:                 0888 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
IN1:                088A DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
IN2:                0894 DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
IN3:                089A DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
NEWADD2:            089D DEFINED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
IF:                 08C8 DEFINED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 737 IN Siena.asm
IFTE:               08CD DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 741 IN Siena.asm
IFTE1:              08CE DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
IFTE2:              08D7 DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
IFTE3:              08EE DEFINED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
SWITCH:             08F0 DEFINED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
CASE:               0904 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 705 IN Siena.asm
CASE0:              0920 DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
CASE1:              0925 DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
CASE2:              0932 DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
WORDS:              0934 DEFINED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 789 IN Siena.asm
BYTES:              093A DEFINED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
BYTES1:             093D DEFINED AT LINE 1308 IN Siena.asm
ARRAY:              0942 DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
ARRAYEND:           0954 DEFINED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
ARRAYEND1:          0976 DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
ARRAYEND2:          0982 DEFINED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
ARRAYEND4:          0992 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
HASHSTR:            09A9 DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
HASHSTR1:           09AC DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
HASHSTR2:           09B1 DEFINED AT LINE 1408 IN Siena.asm
DEFINEENTRY:        09C2 DEFINED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
DEFINEENTRY0:       09C7 DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
DEFINEENTRY1:       09D6 DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
DEFINEENTRY2:       09DC DEFINED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
DEFINEENTRY3:       09DE DEFINED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
LOOKUPENTRY:        09E8 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
LOOKUPENTRY0:       09ED DEFINED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
LOOKUPENTRY1:       09FC DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
LOOKUPENTRY2:       0A02 DEFINED AT LINE 1488 IN Siena.asm
LOOKUPENTRY3:       0A04 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
HASH:               0A0C DEFINED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
DEF:                0A17 DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 709 IN Siena.asm
DEF1:               0A2D DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
ADDR:               0A31 DEFINED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 697 IN Siena.asm
ADDR1:              0A42 DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
DEFINE:             0A46 DEFINED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
                    > USED AT LINE 699 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
                    > USED AT LINE 727 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
                    > USED AT LINE 735 IN Siena.asm
                    > USED AT LINE 739 IN Siena.asm
                    > USED AT LINE 743 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 775 IN Siena.asm
                    > USED AT LINE 779 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
IDENT:              0A5E DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
IDENT0:             0A65 DEFINED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
IDENT1:             0A66 DEFINED AT LINE 1570 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
IDENT2:             0A78 DEFINED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
IDENT3:             0A8C DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
DIVIDE:             0A8D DEFINED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
DIVIDE1:            0A92 DEFINED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
DIVIDE2:            0A9F DEFINED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
DIVIDE3:            0AA0 DEFINED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
DIVIDE4:            0AA5 DEFINED AT LINE 1621 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
                    > USED AT LINE 292 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 199 IN Siena.asm
                    > USED AT LINE 202 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 676 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 680 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 689 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2112S43:  406B DEFINED AT LINE 34
                    > USED AT LINE 10
