0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD AC 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C0                     DB   lsb(nop_)   ; SP
0221   C0                     DB   lsb(nop_)   ; !
0222   C0                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C0                     DB   lsb(nop_)   ; %
0226   58                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   43                     DB   lsb(block_)   ; (
0229   46                     DB   lsb(blockend_)   ; )
022A   87                     DB   lsb(mul_)   ; *
022B   7A                     DB   lsb(add_)   ; +
022C   C0                     DB   lsb(nop_)   ; ,
022D   8A                     DB   lsb(sub_)   ; -
022E   0C                     DB   lsb(dot_)   ; .
022F   A8                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   55                     DB   lsb(symbol_)   ; :
023B   B7                     DB   lsb(comment_)   ; ;
023C   9B                     DB   lsb(lt_)   ; <
023D   92                     DB   lsb(eq_)   ; =
023E   97                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(index_)   ; ?
0240   C0                     DB   lsb(nop_)   ; @
0241   52                     DB   lsb(ident_)   ; A
0242   52                     DB   lsb(ident_)   ; B
0243   52                     DB   lsb(ident_)   ; C
0244   52                     DB   lsb(ident_)   ; D
0245   52                     DB   lsb(ident_)   ; E
0246   52                     DB   lsb(ident_)   ; F
0247   52                     DB   lsb(ident_)   ; G
0248   52                     DB   lsb(ident_)   ; h
0249   52                     DB   lsb(ident_)   ; I
024A   52                     DB   lsb(ident_)   ; J
024B   52                     DB   lsb(ident_)   ; K
024C   52                     DB   lsb(ident_)   ; L
024D   52                     DB   lsb(ident_)   ; M
024E   52                     DB   lsb(ident_)   ; N
024F   52                     DB   lsb(ident_)   ; O
0250   52                     DB   lsb(ident_)   ; p
0251   52                     DB   lsb(ident_)   ; Q
0252   52                     DB   lsb(ident_)   ; R
0253   52                     DB   lsb(ident_)   ; S
0254   52                     DB   lsb(ident_)   ; T
0255   52                     DB   lsb(ident_)   ; U
0256   52                     DB   lsb(ident_)   ; V
0257   52                     DB   lsb(ident_)   ; W
0258   52                     DB   lsb(ident_)   ; X
0259   52                     DB   lsb(ident_)   ; Y
025A   52                     DB   lsb(ident_)   ; Z
025B   4C                     DB   lsb(array_)   ; [
025C   C0                     DB   lsb(nop_)   ; \
025D   4F                     DB   lsb(arrayEnd_)   ; ]
025E   6C                     DB   lsb(xor_)   ; ^
025F   52                     DB   lsb(ident_)   ; _
0260   49                     DB   lsb(char_)   ; `    	
0261   52                     DB   lsb(ident_)   ; a
0262   52                     DB   lsb(ident_)   ; b
0263   52                     DB   lsb(ident_)   ; c
0264   52                     DB   lsb(ident_)   ; d
0265   52                     DB   lsb(ident_)   ; e
0266   52                     DB   lsb(ident_)   ; f
0267   52                     DB   lsb(ident_)   ; g
0268   52                     DB   lsb(ident_)   ; h
0269   52                     DB   lsb(ident_)   ; i
026A   52                     DB   lsb(ident_)   ; j
026B   52                     DB   lsb(ident_)   ; k
026C   52                     DB   lsb(ident_)   ; l
026D   52                     DB   lsb(ident_)   ; m
026E   52                     DB   lsb(ident_)   ; n
026F   52                     DB   lsb(ident_)   ; o
0270   52                     DB   lsb(ident_)   ; p
0271   52                     DB   lsb(ident_)   ; q
0272   52                     DB   lsb(ident_)   ; r
0273   52                     DB   lsb(ident_)   ; s
0274   52                     DB   lsb(ident_)   ; t
0275   52                     DB   lsb(ident_)   ; u
0276   52                     DB   lsb(ident_)   ; v
0277   52                     DB   lsb(ident_)   ; w
0278   52                     DB   lsb(ident_)   ; x
0279   52                     DB   lsb(ident_)   ; y
027A   52                     DB   lsb(ident_)   ; z
027B   C0                     DB   lsb(nop_)   ; {
027C   63                     DB   lsb(or_)   ; |
027D   C0                     DB   lsb(nop_)   ; }
027E   75                     DB   lsb(inv_)   ; ~
027F   C0                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 01 04               JP   num   
0303                HEXNUM_:      
0303   C3 31 04               JP   hexnum   
0306                ARG_:        
0306   C3 C4 04               JP   arg   
0309                STRING_:      
0309   C3 4E 04               JP   string   
030C                             ; lambda_:
030C                             ;     jp lambda
030C                             ; lambdaEnd_:
030C                             ;     jp lambdaEnd
030C                DOT_:        
030C   E1                     POP   hl   
030D   03                     INC   bc   
030E   0A                     LD   a,(bc)   
030F   FE 68                  CP   "h"   
0311   20 05                  JR   nz,dot1   
0313   CD 29 08               CALL   prthex   
0316   18 17                  JR   dot4   
0318                DOT1:        
0318   FE 73                  CP   "s"   
031A   20 05                  JR   nz,dot2   
031C   CD 4C 08               CALL   prtstr   
031F   18 0E                  JR   dot4   
0321                DOT2:        
0321   FE 63                  CP   "c"   
0323   20 06                  JR   nz,dot3   
0325   7D                     LD   a,l   
0326   CD 85 00               CALL   putchar   
0329   18 04                  JR   dot4   
032B                DOT3:        
032B   0B                     DEC   bc   
032C   CD E1 07               CALL   prtdec   
032F                DOT4:        
032F   3E 20                  LD   a," "   
0331   CD 85 00               CALL   putchar   
0334   DD E9                  JP   (ix)   
0336                             ; addr index -- addr2
0336                INDEX_:      
0336   E1                     POP   hl   ; hl = index
0337   D1                     POP   de   ; de = addr
0338   3A 80 1B               LD   a,(vDataWidth)   
033B   3D                     DEC   a   
033C   28 01                  JR   z,index1   
033E   29                     ADD   hl,hl   ; if data width = 2 then double
033F                INDEX1:      
033F   19                     ADD   hl,de   ; add addr
0340   E5                     PUSH   hl   
0341   DD E9                  JP   (ix)   
0343                BLOCK_:      
0343   C3 7C 04               JP   block   
0346                BLOCKEND_:      
0346   C3 B0 04               JP   blockend   
0349                CHAR_:       
0349   C3 67 04               JP   char   
034C                ARRAY_:      
034C   C3 C9 05               JP   array   
034F                ARRAYEND_:      
034F   C3 DB 05               JP   arrayEnd   
0352                IDENT_:      
0352   C3 9B 06               JP   ident   
0355                SYMBOL_:      
0355   C3 74 06               JP   symbol   
0358                AND_:        
0358   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0359   E1                     POP   hl   
035A   7B                     LD   a,e   
035B   A5                     AND   l   
035C   6F                     LD   l,a   
035D   7A                     LD   a,d   
035E   A4                     AND   h   
035F                AND1:        
035F   67                     LD   h,a   
0360   E5                     PUSH   hl   
0361   DD E9                  JP   (ix)   
0363                OR_:         
0363   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0364   E1                     POP   hl   
0365   7B                     LD   a,e   
0366   B5                     OR   l   
0367   6F                     LD   l,a   
0368   7A                     LD   a,d   
0369   B4                     OR   h   
036A   18 F3                  JR   and1   
036C                XOR_:        
036C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
036D                XOR1:        
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   AD                     XOR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   AC                     XOR   h   
0373   18 EA                  JR   and1   
0375                INV_:        ; Bitwise INVert the top member of the stack
0375   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0378   18 F3                  JR   xor1   
037A                ADD_:        ; add the top 2 members of the stack
037A   D1                     POP   de   
037B   E1                     POP   hl   
037C   19                     ADD   hl,de   
037D   E5                     PUSH   hl   
037E   DD E9                  JP   (ix)   
0380                HDOT_:       ; print hexadecimal
0380   E1                     POP   hl   
0381   CD 29 08               CALL   prthex   
0384   C3 2B 03               JP   dot3   
0387                MUL_:        
0387   C3 E5 03               JP   mul   
038A                SUB_:        ; Subtract the value 2nd on stack from top of stack
038A   D1                     POP   de   
038B   E1                     POP   hl   ; Entry point for INVert
038C                SUB2:        
038C   B7                     OR   a   ; Entry point for NEGate
038D   ED 52                  SBC   hl,de   
038F   E5                     PUSH   hl   
0390   DD E9                  JP   (ix)   
0392                EQ_:         
0392   E1                     POP   hl   
0393   D1                     POP   de   
0394   C3 F4 06               JP   equals   
0397                GT_:         
0397   D1                     POP   de   
0398   E1                     POP   hl   
0399   18 02                  JR   lt1   
039B                LT_:         
039B   E1                     POP   hl   
039C   D1                     POP   de   
039D                LT1:         
039D   03                     INC   bc   
039E   0A                     LD   a,(bc)   
039F   FE 3D                  CP   "="   
03A1   CA FC 06               JP   z,lessthaneq   
03A4   0B                     DEC   bc   
03A5   C3 01 07               JP   lessthan   
03A8                DIV_:        
03A8   D1                     POP   de   ; get first value
03A9   E1                     POP   hl   ; get 2nd value
03AA   C5                     PUSH   bc   ; preserve the IP
03AB   44 4D                  LD   bc,hl   
03AD   CD 9E 07               CALL   divide   
03B0   22 7E 1B               LD   (vFrac),hl   
03B3   C1                     POP   bc   
03B4   D5                     PUSH   de   ; push result
03B5   DD E9                  JP   (ix)   
03B7                COMMENT_:      
03B7   03                     INC   bc   ; point to next char
03B8   0A                     LD   a,(bc)   
03B9   FE 20                  CP   " "   ; terminate on any char less than SP
03BB   30 FA                  JR   nc,comment_   
03BD   0B                     DEC   bc   
03BE   DD E9                  JP   (ix)   
03C0                NOP_:        
03C0   DD E9                  JP   (ix)   
03C2                             ;*******************************************************************
03C2                             ; word operators
03C2                             ;*******************************************************************
03C2                             ; shl
03C2                             ; value count -- value2          shift left count places
03C2                SHL:         
03C2   50 59                  LD   de,bc   ; save IP
03C4   C1                     POP   bc   ; bc = count
03C5   41                     LD   b,c   ; b = loop counter
03C6   E1                     POP   hl   
03C7   04                     INC   b   ; test for counter=0 case
03C8   18 01                  JR   shl2   
03CA                SHL1:        
03CA   29                     ADD   hl,hl   ; left shift hl
03CB                SHL2:        
03CB   10 FD                  DJNZ   shl1   
03CD   E5                     PUSH   hl   
03CE   42 4B                  LD   bc,de   ; restore IP
03D0   DD E9                  JP   (ix)   
03D2                             ; shr
03D2                             ; value count -- value2          shift left count places
03D2                SHR:         
03D2   50 59                  LD   de,bc   ; save IP
03D4   C1                     POP   bc   ; bc = count
03D5   41                     LD   b,c   ; b = loop counter
03D6   E1                     POP   hl   
03D7   04                     INC   b   ; test for counter=0 case
03D8   18 04                  JR   shr2   
03DA                SHR1:        
03DA   CB 3C                  SRL   h   ; right shift hl
03DC   CB 1D                  RR   l   
03DE                SHR2:        
03DE   10 FA                  DJNZ   shr1   
03E0   E5                     PUSH   hl   
03E1   42 4B                  LD   bc,de   ; restore IP
03E3   DD E9                  JP   (ix)   
03E5                MUL:         ;=19
03E5   D1                     POP   de   ; get first value
03E6   E1                     POP   hl   
03E7   C5                     PUSH   bc   ; Preserve the IP
03E8   44                     LD   b,h   ; bc = 2nd value
03E9   4D                     LD   c,l   
03EA   21 00 00               LD   hl,0   
03ED   3E 10                  LD   a,16   
03EF                MUL2:        
03EF   29                     ADD   hl,hl   
03F0   CB 13                  RL   e   
03F2   CB 12                  RL   d   
03F4   30 04                  JR   nc,$+6   
03F6   09                     ADD   hl,bc   
03F7   30 01                  JR   nc,$+3   
03F9   13                     INC   de   
03FA   3D                     DEC   a   
03FB   20 F2                  JR   nz,mul2   
03FD   C1                     POP   bc   ; Restore the IP
03FE   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
03FF   DD E9                  JP   (ix)   
0401                NUM:         
0401   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0404   0A                     LD   a,(bc)   ; Get numeral or -
0405   FE 2D                  CP   "-"   
0407   20 01                  JR   nz,num0   
0409   03                     INC   bc   ; move to next char, no flags affected
040A                NUM0:        
040A   08                     EX   af,af'   ; save zero flag = 0 for later
040B                NUM1:        
040B   0A                     LD   a,(bc)   ; read digit
040C   D6 30                  SUB   "0"   ; less than 0?
040E   38 13                  JR   c,num2   ; not a digit, exit loop
0410   FE 0A                  CP   10   ; greater that 9?
0412   30 0F                  JR   nc,num2   ; not a digit, exit loop
0414   03                     INC   bc   ; inc IP
0415   54 5D                  LD   de,hl   ; multiply hl * 10
0417   29                     ADD   hl,hl   
0418   29                     ADD   hl,hl   
0419   19                     ADD   hl,de   
041A   29                     ADD   hl,hl   
041B   85                     ADD   a,l   ; add digit in a to hl
041C   6F                     LD   l,a   
041D   3E 00                  LD   a,0   
041F   8C                     ADC   a,h   
0420   67                     LD   h,a   
0421   18 E8                  JR   num1   
0423                NUM2:        
0423   0B                     DEC   bc   
0424   08                     EX   af,af'   ; restore zero flag
0425   20 07                  JR   nz,num3   
0427   EB                     EX   de,hl   ; negate the value of hl
0428   21 00 00               LD   hl,0   
042B   B7                     OR   a   ; jump to sub2
042C   ED 52                  SBC   hl,de   
042E                NUM3:        
042E   E5                     PUSH   hl   ; Put the number on the stack
042F   DD E9                  JP   (ix)   ; and process the next character
0431                HEXNUM:      ; 
0431   21 00 00               LD   hl,0   ; Clear hl to accept the number
0434                HEXNUM1:      
0434   03                     INC   bc   
0435   0A                     LD   a,(bc)   ; Get the character which is a numeral
0436   CB 77                  BIT   6,a   ; is it uppercase alpha?
0438   28 02                  JR   z,hexnum2   ; no a decimal
043A   D6 07                  SUB   7   ; sub 7  to make $a - $F
043C                HEXNUM2:      
043C   D6 30                  SUB   $30   ; Form decimal digit
043E   DA 23 04               JP   c,num2   
0441   FE 10                  CP   $0F+1   
0443   D2 23 04               JP   nc,num2   
0446   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0447   29                     ADD   hl,hl   ; 4X
0448   29                     ADD   hl,hl   ; 8X
0449   29                     ADD   hl,hl   ; 16X
044A   85                     ADD   a,l   ; add into bottom of hl
044B   6F                     LD   l,a   ; 
044C   18 E6                  JR   hexnum1   
044E                             ; 
044E                STRING:      
044E   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0452   D5                     PUSH   de   ; save start of string
0453   03                     INC   bc   ; point to next char
0454   18 03                  JR   string2   
0456                STRING1:      
0456   12                     LD   (de),a   
0457   13                     INC   de   ; increase count
0458   03                     INC   bc   ; point to next char
0459                STRING2:      
0459   0A                     LD   a,(bc)   
045A   FE 27                  CP   "'"   ; ' is the string terminator
045C   20 F8                  JR   nz,string1   
045E   AF                     XOR   a   ; write NUL to terminate string
045F   12                     LD   (de),a   
0460   13                     INC   de   
0461   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0465   DD E9                  JP   (ix)   
0467                CHAR:        
0467   21 00 00               LD   hl,0   ; if `` is empty
046A                CHAR1:       
046A   03                     INC   bc   ; point to next char
046B   0A                     LD   a,(bc)   
046C   FE 60                  CP   "`"   ; ` is the string terminator
046E   28 09                  JR   z,char3   
0470   FE 5C                  CP   $5c   ; \ is the escape
0472   20 02                  JR   nz,char2   
0474   03                     INC   bc   
0475   0A                     LD   a,(bc)   
0476                CHAR2:       
0476   6F                     LD   l,a   
0477   18 F1                  JR   char1   
0479                CHAR3:       
0479   E5                     PUSH   hl   
047A                             ; dec bc
047A   DD E9                  JP   (ix)   
047C                             ; lambda:
047C                             ;     inc bc
047C                             ;     ld hl,(vHeapPtr)            ; start of lambda defintion
047C                             ;     push hl
047C                             ;     ld d,1                      ; nesting: count first parenthesis
047C                             ; lambda1:                        ; Skip to end of definition
047C                             ;     ld a,(bc)                   ; Get the next character
047C                             ;     inc bc                      ; Point to next character
047C                             ;     ld (hl),a
047C                             ;     inc hl
047C                             ;     cp "'"
047C                             ;     jr z,lambda2
047C                             ;     cp "("
047C                             ;     jr z,lambda2
047C                             ;     cp ")"
047C                             ;     jr z,lambda2
047C                             ;     cp "{"
047C                             ;     jr z,lambda2
047C                             ;     cp "}"                      ; Is it the end of the definition?
047C                             ;     jr z,lambda2
047C                             ;     cp "["
047C                             ;     jr z,lambda2
047C                             ;     cp "]"
047C                             ;     jr z,lambda2
047C                             ;     cp "`"
047C                             ;     jr nz,lambda1
047C                             ; lambda2:
047C                             ;     inc d
047C                             ;     bit 0,d                     ; balanced?
047C                             ;     jr nz, lambda1              ; not balanced, get the next element
047C                             ;     cp "}"                      ; Is it the end of the definition?
047C                             ;     jr nz, lambda1              ; get the next element
047C                             ;     dec bc
047C                             ;     ld (vHeapPtr),hl            ; bump heap ptr to after definiton
047C                             ;     jp (ix)
047C                             ; lambdaEnd:
047C                             ;     pop hl                      ; hl = last result
047C                             ;     ld d,iyh                    ; de = BP
047C                             ;     ld e,iyl
047C                             ;     ex de,hl                    ; hl = BP, de = result
047C                             ;     ld sp,hl                    ; sp = BP
047C                             ;     pop hl                      ; hl = old BP
047C                             ;     pop bc                      ; pop scope ptr (discard)
047C                             ;     pop bc                      ; bc = IP
047C                             ;     ld sp,hl                    ; sp = old BP
047C                             ;     ld iy,0                     ; iy = sp = old BP
047C                             ;     add iy,sp
047C                             ;     push de                     ; push result
047C                             ;     jp (ix)
047C                BLOCK:       
047C   03                     INC   bc   
047D   C5                     PUSH   bc   ; return first opcode of block
047E   16 01                  LD   d,1   ; nesting: count first parenthesis
0480                BLOCK1:      ; Skip to end of definition
0480   0A                     LD   a,(bc)   ; Get the next character
0481   03                     INC   bc   ; Point to next character
0482   FE 27                  CP   "'"   
0484   28 22                  JR   z,block4   
0486   FE 60                  CP   "`"   
0488   28 1E                  JR   z,block4   
048A   FE 28                  CP   "("   
048C   28 17                  JR   z,block3   
048E   FE 7B                  CP   "{"   
0490   28 13                  JR   z,block3   
0492   FE 5B                  CP   "["   
0494   28 0F                  JR   z,block3   
0496   FE 29                  CP   ")"   
0498   28 08                  JR   z,block2   
049A   FE 7D                  CP   "}"   
049C   28 04                  JR   z,block2   
049E   FE 5D                  CP   "]"   
04A0   20 DE                  JR   nz,block1   
04A2                BLOCK2:      
04A2   15                     DEC   d   
04A3   18 06                  JR   block5   
04A5                BLOCK3:      
04A5   14                     INC   d   
04A6   18 D8                  JR   block1   
04A8                BLOCK4:      
04A8   3E 80                  LD   a,$80   
04AA   82                     ADD   a,d   
04AB                BLOCK5:      
04AB   20 D3                  JR   nz,block1   ; get the next element
04AD   0B                     DEC   bc   ; balanced, exit
04AE   DD E9                  JP   (ix)   
04B0                BLOCKEND:      
04B0   E1                     POP   hl   ; hl = last result
04B1   FD 54                  LD   d,iyh   ; de = BP
04B3   FD 5D                  LD   e,iyl   
04B5   EB                     EX   de,hl   ; hl = BP, de = result
04B6   F9                     LD   sp,hl   ; sp = BP
04B7   E1                     POP   hl   ; hl = old BP
04B8   C1                     POP   bc   ; pop SCP (discard)
04B9   C1                     POP   bc   ; bc = IP
04BA   F9                     LD   sp,hl   ; sp = old BP
04BB   FD 21 00 00            LD   iy,0   ; iy = sp
04BF   FD 39                  ADD   iy,sp   
04C1   D5                     PUSH   de   ; push result
04C2   DD E9                  JP   (ix)   
04C4                ARG:         
04C4   03                     INC   bc   ; get next char
04C5   0A                     LD   a,(bc)   
04C6   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04C8   E6 07                  AND   $07   ; mask
04CA   87                     ADD   a,a   ; double
04CB   6F                     LD   l,a   ; hl = offset into args
04CC   26 00                  LD   h,0   
04CE   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04D1   FD 56 03               LD   d,(iy+3)   
04D4   EB                     EX   de,hl   ; hl = SCP - offset
04D5   B7                     OR   a   
04D6   ED 52                  SBC   hl,de   
04D8   2B                     DEC   hl   ; de = arg
04D9   56                     LD   d,(hl)   
04DA   2B                     DEC   hl   
04DB   5E                     LD   e,(hl)   
04DC   D5                     PUSH   de   ; push arg
04DD   DD E9                  JP   (ix)   
04DF                             ; addr -- value
04DF                GET:         
04DF   E1                     POP   hl   
04E0   16 00                  LD   d,0   
04E2   5E                     LD   e,(hl)   
04E3   3A 80 1B               LD   a,(vDataWidth)   
04E6   3D                     DEC   a   
04E7   28 02                  JR   z,get1   
04E9   23                     INC   hl   
04EA   56                     LD   d,(hl)   
04EB                GET1:        
04EB   D5                     PUSH   de   
04EC   DD E9                  JP   (ix)   
04EE                             ; addr value -- value0
04EE                SET:         
04EE   E1                     POP   hl   
04EF   D1                     POP   de   
04F0   7E                     LD   a,(hl)   
04F1   73                     LD   (hl),e   
04F2   5F                     LD   e,a   
04F3   3A 80 1B               LD   a,(vDataWidth)   
04F6   3D                     DEC   a   
04F7   28 04                  JR   z,set1   
04F9   23                     INC   hl   
04FA   7E                     LD   a,(hl)   
04FB   72                     LD   (hl),d   
04FC   57                     LD   d,a   
04FD                SET1:        
04FD   D5                     PUSH   de   ; return old value
04FE   DD E9                  JP   (ix)   
0500                             ; 
0500                             ; in:
0500                             ;  pop hl                      ; hl = string
0500                             ;  pop de                      ; de = char
0500                             ; in1:
0500                             ;  ld a,(hl)
0500                             ;  inc hl
0500                             ;  cp 0                        ; is end of string
0500                             ;  jr z,in2
0500                             ;  cp e
0500                             ;  jr nz,in1
0500                             ;  or a                        ; a is never 0, or a resets zero flag
0500                             ; in2:
0500                             ;  ld hl,0                     ; hl = result
0500                             ;  jr z,in3
0500                             ;  dec hl                      ; if nz de = $ffff
0500                             ; in3:
0500                             ;  push hl                     ; push result
0500                             ;  jp (ix)
0500                             ; newAdd2:
0500                             ;  push bc                     ; push IP
0500                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
0500                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
0500                             ;  push de                     ; push SCP
0500                             ;  push iy                     ; push base pointer
0500                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0500                             ;  add iy,sp                   ;
0500                             ;  ld d,(iy-1)
0500                             ;  ld e,(iy-2)
0500                             ;  ld h,(iy-3)
0500                             ;  ld l,(iy-4)
0500                             ;  add hl,de                   ; hl = hl + de
0500                             ;  ex de,hl                    ; de = result
0500                             ;  pop hl                      ; hl = old BP
0500                             ;  pop bc                      ; pop SCP (discard)
0500                             ;  pop bc                      ; bc = IP
0500                             ;  ld sp,hl                    ; sp = old BP
0500                             ;  ld iy,0
0500                             ;  add iy,sp
0500                             ;  push de                     ; push result
0500                             ;  jp (ix)
0500                IF:          
0500   11 00 00               LD   de,0   ; NUL pointer for else
0503   18 01                  JR   ifte1   
0505                IFTE:        
0505   D1                     POP   de   ; de = else
0506                IFTE1:       
0506   E1                     POP   hl   ; hl = then
0507   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0508   23                     INC   hl   ; check for true
0509   7C                     LD   a,h   
050A   B5                     OR   l   
050B   E1                     POP   hl   ; hl = then
050C   28 01                  JR   z,ifte2   
050E   EB                     EX   de,hl   ; condition = false, hl = else
050F                IFTE2:       
050F   7C                     LD   a,h   ; check if hl is NUL
0510   B5                     OR   l   
0511   28 13                  JR   z,ifte3   
0513   C5                     PUSH   bc   ; push IP
0514   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0517   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
051A   D5                     PUSH   de   ; push SCP
051B   FD E5                  PUSH   iy   ; push BP
051D   FD 21 00 00            LD   iy,0   ; iy = sp
0521   FD 39                  ADD   iy,sp   
0523   44 4D                  LD   bc,hl   ; IP = then
0525   0B                     DEC   bc   
0526                IFTE3:       
0526   DD E9                  JP   (ix)   
0528                             ; c b --
0528                             ; loops until c = 0
0528                LOOP:        
0528   D1                     POP   de   ; de = block                    c
0529   E1                     POP   hl   ; hl = condition
052A   D5                     PUSH   de   
052B   C5                     PUSH   bc   ; push IP
052C   42 4B                  LD   bc,de   ; bc = block
052E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0531   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0534   D5                     PUSH   de   ; push SCP
0535   FD E5                  PUSH   iy   ; push BP
0537   FD 21 00 00            LD   iy,0   ; iy = sp
053B   FD 39                  ADD   iy,sp   
053D                LOOP1:       
053D   7D                     LD   a,l   ; bc = block, hl = condition = zero?
053E   B4                     OR   h   
053F   28 21                  JR   z,loop3   
0541   11 57 05               LD   de,loop2-1   ; IP return address
0544   D5                     PUSH   de   
0545   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
0548   FD 56 03               LD   d,(iy+3)   
054B   D5                     PUSH   de   ; 
054C   FD E5                  PUSH   iy   ; push BP
054E   FD 21 00 00            LD   iy,0   ; iy = sp
0552   FD 39                  ADD   iy,sp   
0554   E5                     PUSH   hl   ; push condition
0555   0B                     DEC   bc   
0556   DD E9                  JP   (ix)   
0558                LOOP2:       
0558   1B                     DB   ESC   ; escape from interpreter
0559   FD 4E 06               LD   c,(iy+6)   ; bc = block
055C   FD 46 07               LD   b,(iy+7)   
055F   E1                     POP   hl   ; hl = condition
0560   18 DB                  JR   loop1   
0562                LOOP3:       
0562   FD 54                  LD   d,iyh   ; de = BP
0564   FD 5D                  LD   e,iyl   
0566   EB                     EX   de,hl   ; hl = BP, de = result
0567   F9                     LD   sp,hl   ; sp = BP
0568   E1                     POP   hl   ; hl = old BP
0569   C1                     POP   bc   ; pop SCP (discard)
056A   C1                     POP   bc   ; bc = IP
056B   F9                     LD   sp,hl   ; sp = old BP
056C   FD 21 00 00            LD   iy,0   ; iy = sp
0570   FD 39                  ADD   iy,sp   
0572   DD 21 82 0A            LD   ix,next   
0576   DD E9                  JP   (ix)   
0578                             ; xxxblockend:
0578                             ;     pop hl                      ; hl = last result
0578                             ;     ld d,iyh                    ; de = BP
0578                             ;     ld e,iyl
0578                             ;     ex de,hl                    ; hl = BP, de = result
0578                             ;     ld sp,hl                    ; sp = BP
0578                             ;     pop hl                      ; hl = old BP
0578                             ;     pop bc                      ; pop SCP (discard)
0578                             ;     pop bc                      ; bc = IP
0578                             ;     ld sp,hl                    ; sp = old BP
0578                             ;     ld iy,0                     ; iy = sp
0578                             ;     add iy,sp
0578                             ;     push de                     ; push result
0578                             ;     jp (ix)
0578                SWITCH:      
0578   E1                     POP   hl   ; get selector from stack
0579   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
057A   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
057D   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0580   D5                     PUSH   de   ; push SCP
0581   FD E5                  PUSH   iy   ; push BP
0583   FD 21 00 00            LD   iy,0   ; BP = SP
0587   FD 39                  ADD   iy,sp   
0589   E5                     PUSH   hl   ; push selector as first arg of new frame
058A   DD E9                  JP   (ix)   
058C                CASE:        
058C   FD 66 FF               LD   h,(iy-1)   ; hl = selector
058F   FD 6E FE               LD   l,(iy-2)   
0592   23                     INC   hl   ; hl -= 1 index from second arg
0593   29                     ADD   hl,hl   ; hl *= 2 word offset
0594   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0596   FD 5D                  LD   e,iyl   
0598   EB                     EX   de,hl   
0599   B7                     OR   a   ; hl = BP - offset
059A   ED 52                  SBC   hl,de   
059C   54 5D                  LD   de,hl   ; save arg ptr
059E   2B                     DEC   hl   ; hl += 2
059F   2B                     DEC   hl   
05A0   B7                     OR   a   ; arg ptr - stack pointer
05A1   ED 72                  SBC   hl,sp   
05A3   30 03                  JR   nc,case0   
05A5   D1                     POP   de   ; pop last arg
05A6   18 05                  JR   case1   
05A8                CASE0:       
05A8   EB                     EX   de,hl   
05A9   2B                     DEC   hl   ; de = arg
05AA   56                     LD   d,(hl)   
05AB   2B                     DEC   hl   
05AC   5E                     LD   e,(hl)   
05AD                CASE1:       
05AD   7A                     LD   a,d   ; is arg == NUL ? then skip
05AE   B3                     OR   e   
05AF   28 09                  JR   z,case2   
05B1   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05B4   FD 70 05               LD   (iy+5),b   
05B7   42 4B                  LD   bc,de   ; IP = arg
05B9   0B                     DEC   bc   
05BA                CASE2:       
05BA   DD E9                  JP   (ix)   
05BC                WORDS:       
05BC   21 02 00               LD   hl,2   
05BF   18 03                  JR   bytes1   
05C1                BYTES:       
05C1   21 01 00               LD   hl,1   
05C4                BYTES1:      
05C4   22 80 1B               LD   (vDataWidth),hl   
05C7   DD E9                  JP   (ix)   
05C9                ARRAY:       
05C9   C5                     PUSH   bc   ; create stack frame, push IP
05CA   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05CD   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05D0   D5                     PUSH   de   ; push SCP
05D1   FD E5                  PUSH   iy   ; push BP
05D3   FD 21 00 00            LD   iy,0   ; BP = SP
05D7   FD 39                  ADD   iy,sp   
05D9   DD E9                  JP   (ix)   
05DB                ARRAYEND:      
05DB   FD 54                  LD   d,iyh   ; de = BP
05DD   FD 5D                  LD   e,iyl   
05DF   DD 62                  LD   ixh,d   ; ix = BP
05E1   DD 6B                  LD   ixl,e   
05E3   62 6B                  LD   hl,de   ; hl = de
05E5   B7                     OR   a   
05E6   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05E8   CB 3C                  SRL   h   
05EA   CB 1D                  RR   l   
05EC   EB                     EX   de,hl   ; de = count
05ED   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
05F0   73                     LD   (hl),e   
05F1   23                     INC   hl   
05F2   72                     LD   (hl),d   
05F3   23                     INC   hl   ; hl = array[0], de = count
05F4   3A 80 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
05F7   FE 01                  CP   1   
05F9   20 10                  JR   nz,arrayEnd2   
05FB                ARRAYEND1:      ; byte
05FB   DD 7E FE               LD   a,(ix-2)   
05FE   77                     LD   (hl),a   
05FF   23                     INC   hl   
0600   DD 2B                  DEC   ix   
0602   DD 2B                  DEC   ix   
0604   1B                     DEC   de   
0605   7B                     LD   a,e   
0606   B2                     OR   d   
0607   20 F2                  JR   nz,arrayEnd1   
0609   18 13                  JR   arrayEnd3   
060B                ARRAYEND2:      ; word
060B   DD 7E FE               LD   a,(ix-2)   
060E   77                     LD   (hl),a   
060F   23                     INC   hl   
0610   DD 7E FF               LD   a,(ix-1)   
0613   77                     LD   (hl),a   
0614   23                     INC   hl   
0615   DD 2B                  DEC   ix   
0617   DD 2B                  DEC   ix   
0619   1B                     DEC   de   
061A   7B                     LD   a,e   
061B   B2                     OR   d   
061C   20 ED                  JR   nz,arrayEnd2   
061E                ARRAYEND3:      
061E   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0620   FD 5D                  LD   e,iyl   
0622   EB                     EX   de,hl   ; hl = BP, de = end of array
0623   F9                     LD   sp,hl   ; sp = BP
0624   E1                     POP   hl   ; hl = old BP, de = end of array
0625   DD E1                  POP   ix   ; pop SCP (discard)
0627   DD E1                  POP   ix   ; pop IP (discard)
0629   F9                     LD   sp,hl   ; sp = old BP
062A   FD 21 00 00            LD   iy,0   ; iy = sp
062E   FD 39                  ADD   iy,sp   
0630   DD 21 82 0A            LD   ix,next   
0634   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0637   23                     INC   hl   
0638   23                     INC   hl   
0639   E5                     PUSH   hl   ; return array[0]
063A   EB                     EX   de,hl   ; hl = end of array, de = array[0]
063B   B7                     OR   a   
063C   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
063E   EB                     EX   de,hl   
063F   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
0642   73                     LD   (hl),e   ; array[-2] = size
0643   23                     INC   hl   
0644   72                     LD   (hl),d   
0645   DD E9                  JP   (ix)   
0647                             ; str -- num
0647                HASH:        
0647   E1                     POP   hl   
0648   C5                     PUSH   bc   
0649   44 4D                  LD   bc,hl   
064B   CD 3B 07               CALL   hashStr   
064E   C1                     POP   bc   
064F   E5                     PUSH   hl   
0650   DD E9                  JP   (ix)   
0652                             ; str addr -- bool
0652                DEF:         
0652   60 69                  LD   hl,bc   ; hl = IP
0654   D1                     POP   de   ; de = addr
0655   C1                     POP   bc   ; bc = hash
0656   E5                     PUSH   hl   
0657   CD 54 07               CALL   defineEntry   
065A   21 00 00               LD   hl,0   ; if c return TRUE
065D   30 01                  JR   nc,def1   
065F   2B                     DEC   hl   
0660                DEF1:        
0660   C1                     POP   bc   
0661   E5                     PUSH   hl   
0662   DD E9                  JP   (ix)   
0664                             ; str -- addr
0664                ADDR:        
0664   E1                     POP   hl   ; hl = hash
0665   C5                     PUSH   bc   
0666   44 4D                  LD   bc,hl   
0668   CD 7A 07               CALL   lookupEntry   
066B   38 03                  JR   c,addr1   
066D   21 00 00               LD   hl,0   
0670                             ; call printStr		
0670                             ; .cstr "Undefined"
0670                             ; jp interpret
0670                ADDR1:       
0670   C1                     POP   bc   
0671   E5                     PUSH   hl   
0672   DD E9                  JP   (ix)   
0674                SYMBOL:      
0674   03                     INC   bc   
0675   11 00 1A               LD   de,PAD   
0678   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
067A   18 02                  JR   symbol1   
067C                SYMBOL0:      ; copy to PAD area
067C   03                     INC   bc   ; characters that are part of the identifier
067D   13                     INC   de   
067E                SYMBOL1:      ; 0-9 A-Z a-z _
067E   0A                     LD   a,(bc)   
067F   12                     LD   (de),a   
0680   B7                     OR   a   
0681   28 0A                  JR   z,symbol2   
0683   6F                     LD   l,a   
0684   7E                     LD   a,(hl)   
0685   FE 52                  CP   lsb(ident_)   
0687   28 F3                  JR   z,symbol0   
0689   FE 00                  CP   lsb(num_)   
068B   28 EF                  JR   z,symbol0   
068D                SYMBOL2:      
068D   0B                     DEC   bc   
068E   AF                     XOR   a   
068F   12                     LD   (de),a   ; terminate string with NUL
0690   C5                     PUSH   bc   
0691   01 00 1A               LD   bc,PAD   
0694   CD 3B 07               CALL   hashStr   ; hl = hash
0697   C1                     POP   bc   
0698   E5                     PUSH   hl   
0699   DD E9                  JP   (ix)   
069B                IDENT:       
069B   11 00 1A               LD   de,PAD   
069E   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06A0   18 02                  JR   ident1   
06A2                IDENT0:      ; copy to PAD area
06A2   03                     INC   bc   ; characters that are part of the identifier
06A3   13                     INC   de   
06A4                IDENT1:      ; 0-9 A-Z a-z _
06A4   0A                     LD   a,(bc)   
06A5   12                     LD   (de),a   
06A6   B7                     OR   a   
06A7   28 0A                  JR   z,ident2   
06A9   6F                     LD   l,a   
06AA   7E                     LD   a,(hl)   
06AB   FE 52                  CP   lsb(ident_)   
06AD   28 F3                  JR   z,ident0   
06AF   FE 00                  CP   lsb(num_)   
06B1   28 EF                  JR   z,ident0   
06B3                IDENT2:      
06B3   0B                     DEC   bc   
06B4   AF                     XOR   a   
06B5   12                     LD   (de),a   ; terminate string with NUL
06B6   C5                     PUSH   bc   
06B7   01 00 1A               LD   bc,PAD   
06BA   CD 3B 07               CALL   hashStr   ; hl = hash
06BD   44 4D                  LD   bc,hl   
06BF   CD 7A 07               CALL   lookupEntry   
06C2   C1                     POP   bc   
06C3   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06C5   DD E9                  JP   (ix)   
06C7                IDENT3:      
06C7   E9                     JP   (hl)   
06C8                FRAC:        
06C8   2A 7E 1B               LD   hl,(vFrac)   
06CB   E5                     PUSH   hl   
06CC   DD E9                  JP   (ix)   
06CE                SQRT1:       
06CE   E1                     POP   hl   
06CF   C5                     PUSH   bc   
06D0   CD B7 07               CALL   squareRoot   
06D3   ED 43 7E 1B            LD   (vFrac),bc   
06D7   C1                     POP   bc   
06D8   D5                     PUSH   de   
06D9   DD E9                  JP   (ix)   
06DB                ABS1:        
06DB   E1                     POP   hl   
06DC   CB 7C                  BIT   7,h   
06DE   C8                     RET   z   
06DF   AF                     XOR   a   
06E0   95                     SUB   l   
06E1   6F                     LD   l,a   
06E2   9F                     SBC   a,a   
06E3   94                     SUB   h   
06E4   67                     LD   h,a   
06E5   E5                     PUSH   hl   
06E6   DD E9                  JP   (ix)   
06E8                MOD:         
06E8   D1                     POP   de   ; get first value
06E9   E1                     POP   hl   ; get 2nd value
06EA   C5                     PUSH   bc   ; preserve the IP
06EB   44 4D                  LD   bc,hl   
06ED   CD 9E 07               CALL   divide   
06F0   C1                     POP   bc   
06F1   E5                     PUSH   hl   ; push remainder
06F2   DD E9                  JP   (ix)   
06F4                             ; hl = value1, de = value2
06F4                             ; hl = result
06F4                EQUALS:      
06F4   B7                     OR   a   ; reset the carry flag
06F5   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06F7   28 10                  JR   z,true1   
06F9   C3 0F 07               JP   false1   
06FC                             ; hl = value1 de = value2
06FC                             ; hl = result
06FC                LESSTHANEQ:      
06FC   B7                     OR   a   
06FD   ED 52                  SBC   hl,de   
06FF   18 05                  JR   lessthan1   
0701                             ; hl = value1 de = value2
0701                             ; hl = result
0701                LESSTHAN:      
0701   B7                     OR   a   
0702   ED 52                  SBC   hl,de   
0704   28 09                  JR   z,false1   
0706                LESSTHAN1:      
0706   FA 0F 07               JP   m,false1   
0709                TRUE1:       
0709   21 FF FF               LD   hl,TRUE   
070C   E5                     PUSH   hl   
070D   DD E9                  JP   (ix)   
070F                FALSE1:      
070F   21 00 00               LD   hl,FALSE   
0712   E5                     PUSH   hl   
0713   DD E9                  JP   (ix)   
0715                             ; Z80 port input
0715                             ; port -- value
0715                INPUT:       
0715   E1                     POP   hl   
0716   59                     LD   e,c   ; save IP
0717   4D                     LD   c,l   
0718   ED 68                  IN   l,(c)   
071A   26 00                  LD   h,0   
071C   4B                     LD   c,e   ; restore IP
071D   E5                     PUSH   hl   
071E   DD E9                  JP   (ix)   
0720                             ; Z80 port output
0720                             ; value port --
0720                OUTPUT:      
0720   E1                     POP   hl   
0721   59                     LD   e,c   ; save IP
0722   4D                     LD   c,l   
0723   E1                     POP   hl   
0724   ED 69                  OUT   (c),l   
0726   4B                     LD   c,e   ; restore IP
0727   DD E9                  JP   (ix)   
0729                KEY:         
0729   CD 81 00               CALL   getchar   
072C   26 00                  LD   h,0   
072E   6F                     LD   l,a   
072F   E5                     PUSH   hl   
0730   DD E9                  JP   (ix)   
0732                NEG:         
0732   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0735   D1                     POP   de   
0736   C3 8C 03               JP   sub2   ; use the SUBtract routine
0739                LET:         
0739                FILTER:      
0739                MAP:         
0739                SCAN:        
0739   DD E9                  JP   (ix)   
073B                             ; -------------------------------------------------------------------------------
073B                             ; hash C-string
073B                             ; BC = str
073B                             ; HL = hash
073B                HASHSTR:      
073B   21 00 00               LD   hl,0   
073E                HASHSTR1:      
073E   0A                     LD   a,(bc)   ; load next char
073F   03                     INC   bc   
0740   FE 00                  CP   0   ; NUL?
0742   C8                     RET   z   
0743                HASHSTR2:      
0743   16 00                  LD   d,0   
0745   5F                     LD   e,a   
0746   19                     ADD   hl,de   
0747   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0749   29                     ADD   hl,hl   ; shift left
074A   19                     ADD   hl,de   ; add
074B   29                     ADD   hl,hl   ; shift left
074C   29                     ADD   hl,hl   ; shift left
074D   29                     ADD   hl,hl   ; shift left
074E   29                     ADD   hl,hl   ; shift left
074F   29                     ADD   hl,hl   ; shift left
0750   29                     ADD   hl,hl   ; shift left
0751   19                     ADD   hl,de   ; add
0752   18 EA                  JR   hashStr1   
0754                             ; add entry to hash slots and hash pointers
0754                             ; bc = hash (b = hi, c = lo), de = addr
0754                             ; sets carry if successful
0754                DEFINEENTRY:      
0754   CB 21                  SLA   c   ; lo = lo * 2
0756   69                     LD   l,c   ; lo1 = lo
0757   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0759                DEFINEENTRY0:      
0759   7E                     LD   a,(hl)   ; a = (lo1)
075A   FE FF                  CP   UNUSED   ; is it unused?
075C   28 12                  JR   z,defineEntry3   ; yes, add entry
075E   79                     LD   a,c   ; a = lo
075F   BE                     CP   (hl)   ; compare (lo1) with lo
0760   20 06                  JR   nz,defineEntry1   ; no match loop around
0762   2C                     INC   l   
0763   78                     LD   a,b   ; a = hi
0764   BE                     CP   (hl)   ; compare (lo1+1) with hi
0765   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0767   2D                     DEC   l   ; restore l
0768                DEFINEENTRY1:      
0768   2C                     INC   l   ; try next entry
0769   2C                     INC   l   
076A   79                     LD   a,c   ; compare lo and lo1
076B   BD                     CP   l   ; if equal then there's no space left, reject
076C   20 EB                  JR   nz,defineEntry0   
076E                DEFINEENTRY2:      
076E   B7                     OR   a   ; clear carry flag, failure
076F   C9                     RET      
0770                DEFINEENTRY3:      ; new entry
0770   71                     LD   (hl),c   ; (lo1) = hash lo
0771   23                     INC   hl   
0772   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0773   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0775   72                     LD   (hl),d   
0776   2B                     DEC   hl   
0777   73                     LD   (hl),e   ; (slot + 2) = address
0778   37                     SCF      ; set carry flag, success
0779   C9                     RET      
077A                             ; looks up hash and returns address
077A                             ; bc = hash
077A                             ; returns addr in hl, sets carry if successful
077A                LOOKUPENTRY:      
077A   CB 21                  SLA   c   ; lo = lo * 2
077C   69                     LD   l,c   ; lo1 = lo
077D   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077F                LOOKUPENTRY0:      
077F   7E                     LD   a,(hl)   ; a = (hl), slot
0780   FE FF                  CP   UNUSED   ; is it unused?
0782   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0784   79                     LD   a,c   ; a = lo
0785   BE                     CP   (hl)   ; compare (lo1) with lo
0786   20 06                  JR   nz,lookupEntry1   ; no match loop around
0788   2C                     INC   l   
0789   78                     LD   a,b   ; a = hi
078A   BE                     CP   (hl)   ; compare (lo1+1) with hi
078B   28 09                  JR   z,lookupEntry3   
078D   2D                     DEC   l   
078E                LOOKUPENTRY1:      
078E   2C                     INC   l   
078F   2C                     INC   l   
0790   79                     LD   a,c   
0791   BD                     CP   l   ; no space left, reject
0792   20 EB                  JR   nz,lookupEntry0   
0794                LOOKUPENTRY2:      
0794   B7                     OR   a   ; clear carry flag, failure
0795   C9                     RET      
0796                LOOKUPENTRY3:      
0796   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0798   56                     LD   d,(hl)   
0799   2D                     DEC   l   ; restore l
079A   5E                     LD   e,(hl)   ; (slot + 2) = address
079B   EB                     EX   de,hl   
079C   37                     SCF      
079D   C9                     RET      
079E                             ; division subroutine.
079E                             ; bc: divisor, de: dividend, hl: remainder
079E                DIVIDE:      
079E   21 00 00               LD   hl,0   ; zero the remainder
07A1   3E 10                  LD   a,16   ; loop counter
07A3                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07A3   CB 21                  SLA   c   
07A5   CB 10                  RL   b   
07A7   ED 6A                  ADC   hl,hl   
07A9   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07AB   38 03                  JR   c,divide2   
07AD   0C                     INC   c   
07AE   18 01                  JR   divide3   
07B0                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07B0   19                     ADD   hl,de   
07B1                DIVIDE3:      
07B1   3D                     DEC   a   
07B2   20 EF                  JR   nz,divide1   
07B4   50 59                  LD   de,bc   ; result from bc to de
07B6   C9                     RET      
07B7                             ; squareroot
07B7                             ; Input: HL = value
07B7                             ; Result: DE = square root BC = remainder
07B7                SQUAREROOT:      
07B7   01 00 08               LD   bc,0800h   
07BA   59                     LD   e,c   
07BB   AF                     XOR   a   
07BC                SQUAREROOT1:      
07BC   29                     ADD   hl,hl   
07BD   CB 11                  RL   c   
07BF   ED 6A                  ADC   hl,hl   
07C1   CB 11                  RL   c   
07C3   30 02                  JR   nc,$+4   
07C5   CB C5                  SET   0,l   
07C7   7B                     LD   a,e   
07C8   87                     ADD   a,a   
07C9   5F                     LD   e,a   
07CA   87                     ADD   a,a   
07CB   CB 45                  BIT   0,l   
07CD   20 03                  JR   nz,$+5   
07CF   91                     SUB   c   
07D0   30 05                  JR   nc,squareRoot4   
07D2   79                     LD   a,c   
07D3   93                     SUB   e   
07D4   1C                     INC   e   
07D5   93                     SUB   e   
07D6   4F                     LD   c,a   
07D7                SQUAREROOT4:      
07D7   10 E3                  DJNZ   squareRoot1   
07D9   CB 45                  BIT   0,l   
07DB   28 01                  JR   z,squareRoot5   
07DD   04                     INC   b   
07DE                SQUAREROOT5:      
07DE   16 00                  LD   d,0   
07E0   C9                     RET      
07E1                PRTDEC:      
07E1   CB 7C                  BIT   7,h   
07E3   28 0B                  JR   z,prtdec0   
07E5   3E 2D                  LD   a,"-"   
07E7   CD 85 00               CALL   putchar   
07EA   AF                     XOR   a   
07EB   95                     SUB   l   
07EC   6F                     LD   l,a   
07ED   9F                     SBC   a,a   
07EE   94                     SUB   h   
07EF   67                     LD   h,a   
07F0                PRTDEC0:      
07F0   C5                     PUSH   bc   
07F1   0E 00                  LD   c,0   ; leading zeros flag = false
07F3   11 F0 D8               LD   de,-10000   
07F6   CD 12 08               CALL   prtdec1   
07F9   11 18 FC               LD   de,-1000   
07FC   CD 12 08               CALL   prtdec1   
07FF   11 9C FF               LD   de,-100   
0802   CD 12 08               CALL   prtdec1   
0805   1E F6                  LD   e,-10   
0807   CD 12 08               CALL   prtdec1   
080A   0C                     INC   c   ; flag = true for at least digit
080B   1E FF                  LD   e,-1   
080D   CD 12 08               CALL   prtdec1   
0810   C1                     POP   bc   
0811   C9                     RET      
0812                PRTDEC1:      
0812   06 2F                  LD   b,"0"-1   
0814                PRTDEC2:      
0814   04                     INC   b   
0815   19                     ADD   hl,de   
0816   38 FC                  JR   c,prtdec2   
0818   ED 52                  SBC   hl,de   
081A   3E 30                  LD   a,"0"   
081C   B8                     CP   b   
081D   20 05                  JR   nz,prtdec3   
081F   AF                     XOR   a   
0820   B1                     OR   c   
0821   C8                     RET   z   
0822   18 01                  JR   prtdec4   
0824                PRTDEC3:      
0824   0C                     INC   c   
0825                PRTDEC4:      
0825   78                     LD   a,b   
0826   C3 85 00               JP   putchar   
0829                PRTHEX:      ; display hl as a 16-bit number in hex.
0829   C5                     PUSH   bc   ; preserve the IP
082A   7C                     LD   a,h   
082B   CD 34 08               CALL   prthex2   
082E   7D                     LD   a,l   
082F   CD 34 08               CALL   prthex2   
0832   C1                     POP   bc   
0833   C9                     RET      
0834                PRTHEX2:      
0834   4F                     LD   c,a   
0835   1F                     RRA      
0836   1F                     RRA      
0837   1F                     RRA      
0838   1F                     RRA      
0839   CD 3D 08               CALL   prthex3   
083C   79                     LD   a,c   
083D                PRTHEX3:      
083D   E6 0F                  AND   0x0F   
083F   C6 90                  ADD   a,0x90   
0841   27                     DAA      
0842   CE 40                  ADC   a,0x40   
0844   27                     DAA      
0845   C3 85 00               JP   putchar   
0848                PRTSTR0:      
0848   CD 85 00               CALL   putchar   
084B   23                     INC   hl   
084C                PRTSTR:      
084C   7E                     LD   a,(hl)   
084D   B7                     OR   a   
084E   20 F8                  JR   nz,prtstr0   
0850   C9                     RET      
0851                             ; **************************************************************************
0851                             ; calculate nesting value
0851                             ; a is char to be tested,
0851                             ; e is the nesting value (initially 0)
0851                             ; e is increased by ( and [
0851                             ; e is decreased by ) and ]
0851                             ; e has its bit 7 toggled by `
0851                             ; limited to 127 levels
0851                             ; **************************************************************************
0851                NESTING:      
0851   FE 22                  CP   $22   ; quote char
0853   20 0A                  JR   nz,nesting1   
0855   CB 7B                  BIT   7,e   
0857   28 03                  JR   z,nesting1a   
0859   CB BB                  RES   7,e   
085B   C9                     RET      
085C                NESTING1A:      
085C   CB FB                  SET   7,e   
085E   C9                     RET      
085F                NESTING1:      
085F   CB 7B                  BIT   7,e   
0861   C0                     RET   nz   
0862   FE 7B                  CP   "{"   
0864   28 08                  JR   z,nesting2   
0866   FE 5B                  CP   "["   
0868   28 04                  JR   z,nesting2   
086A   FE 28                  CP   "("   
086C   20 02                  JR   nz,nesting3   
086E                NESTING2:      
086E   1C                     INC   e   
086F   C9                     RET      
0870                NESTING3:      
0870   FE 7D                  CP   "}"   
0872   28 07                  JR   z,nesting4   
0874   FE 5D                  CP   "]"   
0876   28 03                  JR   z,nesting4   
0878   FE 29                  CP   ")"   
087A   C0                     RET   nz   
087B                NESTING4:      
087B   1D                     DEC   e   
087C   C9                     RET      
087D                PROMPT:      
087D   CD 8D 08               CALL   printStr   
0880   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0885   C9                     RET      
0886                CRLF:        
0886   CD 8D 08               CALL   printStr   
0889   0D 0A 00               .CSTR   "\r\n"   
088C   C9                     RET      
088D                PRINTSTR:      
088D   E3                     EX   (sp),hl   ; swap			
088E   CD 4C 08               CALL   prtstr   
0891   23                     INC   hl   ; inc past NUL
0892   E3                     EX   (sp),hl   ; put it back	
0893   C9                     RET      
0894                DEFINE:      
0894   E1                     POP   hl   
0895   7E                     LD   a,(hl)   
0896   23                     INC   hl   
0897   44 4D                  LD   bc,hl   
0899   5F                     LD   e,a   
089A   16 00                  LD   d,0   
089C   19                     ADD   hl,de   
089D   5E                     LD   e,(hl)   
089E   23                     INC   hl   
089F   56                     LD   d,(hl)   
08A0   23                     INC   hl   
08A1   E5                     PUSH   hl   ; bc = str
08A2   D5                     PUSH   de   
08A3   CD 3B 07               CALL   hashStr   ; hl = hash
08A6   D1                     POP   de   
08A7   44 4D                  LD   bc,hl   
08A9   C3 54 07               JP   defineEntry   
08AC                INIT:        
08AC   DD 21 82 0A            LD   ix,next   
08B0   FD 21 00 1A            LD   iy,DSTACK   
08B4   21 80 01               LD   hl,isysVars   
08B7   11 7E 1B               LD   de,sysVars   
08BA   01 10 00               LD   bc,8 * 2   
08BD   ED B0                  LDIR      
08BF   3E FF                  LD   a,UNUSED   
08C1   06 00                  LD   b,0   
08C3   21 00 1C               LD   hl,hashSlots   
08C6                INIT1:       
08C6   77                     LD   (hl),a   
08C7   23                     INC   hl   
08C8   10 FC                  DJNZ   init1   
08CA   CD 94 08               CALL   define   
08CD   04 61 62 73 00         .PSTR   "abs",0   
08D2   DB 06                  DW   abs1   
08D4   CD 94 08               CALL   define   
08D7   05 61 64 64 72 00      .PSTR   "addr",0   
08DD   64 06                  DW   addr   
08DF   CD 94 08               CALL   define   
08E2   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08E9   C1 05                  DW   bytes   
08EB   CD 94 08               CALL   define   
08EE   05 63 61 6C 6C 00      .PSTR   "call",0   
08F4   B5 0A                  DW   call   
08F6   CD 94 08               CALL   define   
08F9   05 63 61 73 65 00      .PSTR   "case",0   
08FF   8C 05                  DW   case   
0901   CD 94 08               CALL   define   
0904   04 64 65 66 00         .PSTR   "def",0   
0909   52 06                  DW   def   
090B   CD 94 08               CALL   define   
090E   05 65 78 65 63 00      .PSTR   "exec",0   
0914   CA 0A                  DW   exec   
0916   CD 94 08               CALL   define   
0919   06 66 61 6C 73 65 00   .PSTR   "false",0   
0920   00 00                  DW   false   
0922   CD 94 08               CALL   define   
0925   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
092D   39 07                  DW   filter   
092F   CD 94 08               CALL   define   
0932   05 66 72 61 63 00      .PSTR   "frac",0   
0938   C8 06                  DW   frac   
093A   CD 94 08               CALL   define   
093D   04 67 65 74 00         .PSTR   "get",0   
0942   DF 04                  DW   get   
0944   CD 94 08               CALL   define   
0947   05 68 61 73 68 00      .PSTR   "hash",0   
094D   47 06                  DW   hash   
094F   CD 94 08               CALL   define   
0952   06 69 6E 70 75 74 00   .PSTR   "input",0   
0959   15 07                  DW   input   
095B   CD 94 08               CALL   define   
095E   03 69 66 00            .PSTR   "if",0   
0962   00 05                  DW   if   
0964   CD 94 08               CALL   define   
0967   05 69 66 74 65 00      .PSTR   "ifte",0   
096D   05 05                  DW   ifte   
096F   CD 94 08               CALL   define   
0972   04 6B 65 79 00         .PSTR   "key",0   
0977   29 07                  DW   key   
0979   CD 94 08               CALL   define   
097C   04 6C 65 74 00         .PSTR   "let",0   
0981   39 07                  DW   let   
0983   CD 94 08               CALL   define   
0986   05 6C 6F 6F 70 00      .PSTR   "loop",0   
098C   28 05                  DW   loop   
098E   CD 94 08               CALL   define   
0991   04 6D 61 70 00         .PSTR   "map",0   
0996   39 07                  DW   map   
0998   CD 94 08               CALL   define   
099B   04 6D 6F 64 00         .PSTR   "mod",0   
09A0   E8 06                  DW   mod   
09A2   CD 94 08               CALL   define   
09A5   04 6E 65 67 00         .PSTR   "neg",0   
09AA   32 07                  DW   neg   
09AC   CD 94 08               CALL   define   
09AF   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09B7   20 07                  DW   output   
09B9   CD 94 08               CALL   define   
09BC   05 73 63 61 6E 00      .PSTR   "scan",0   
09C2   01 00                  DW   scan   
09C4   CD 94 08               CALL   define   
09C7   04 73 65 74 00         .PSTR   "set",0   
09CC   EE 04                  DW   set   
09CE   CD 94 08               CALL   define   
09D1   04 73 68 6C 00         .PSTR   "shl",0   
09D6   C2 03                  DW   shl   
09D8   CD 94 08               CALL   define   
09DB   04 73 68 72 00         .PSTR   "shr",0   
09E0   D2 03                  DW   shr   
09E2   CD 94 08               CALL   define   
09E5   05 73 71 72 74 00      .PSTR   "sqrt",0   
09EB   CE 06                  DW   sqrt1   
09ED   CD 94 08               CALL   define   
09F0   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09F8   78 05                  DW   switch   
09FA   CD 94 08               CALL   define   
09FD   05 74 72 75 65 00      .PSTR   "true",0   
0A03   FF FF                  DW   true   
0A05   CD 94 08               CALL   define   
0A08   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A0F   BC 05                  DW   words   
0A11   C9                     RET      
0A12                START:       
0A12   31 00 1A               LD   sp,DSTACK   ; start of Siena
0A15   CD AC 08               CALL   init   ; setups
0A18   CD 8D 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A1B   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A28                INTERPRET:      
0A28   CD 7D 08               CALL   prompt   
0A2B   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A2E   ED 43 82 1B            LD   (vTIBPtr),bc   
0A32                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A32   1E 00                  LD   e,0   ; initilize nesting value
0A34   C5                     PUSH   bc   ; save offset into TIB,
0A35                             ; bc is also the count of chars in TIB
0A35   21 00 18               LD   hl,TIB   ; hl is start of TIB
0A38   18 06                  JR   interpret4   
0A3A                INTERPRET3:      
0A3A   7E                     LD   a,(hl)   ; a = char in TIB
0A3B   23                     INC   hl   ; inc pointer into TIB
0A3C   0B                     DEC   bc   ; dec count of chars in TIB
0A3D   CD 51 08               CALL   nesting   ; update nesting value
0A40                INTERPRET4:      
0A40   79                     LD   a,c   ; is count zero?
0A41   B0                     OR   b   
0A42   20 F6                  JR   nz,interpret3   ; if not loop
0A44   C1                     POP   bc   ; restore offset into TIB
0A45                WAITCHAR:      
0A45   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A48   FE 20                  CP   $20   ; compare to space
0A4A   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A4C   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A4E                             ; ???? NEEDED?
0A4E   28 2A                  JR   z,waitchar4   
0A50   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A52   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A54                MACRO:       
0A54                             ;  ld (vTIBPtr),bc
0A54                             ;  ld hl,ctrlCodes
0A54                             ;  add a,l			            ; look up key of macros
0A54                             ;  ld l,a
0A54                             ;  ld e,(hl)
0A54                             ;  ld a,e
0A54                             ;  or a
0A54                             ;  jr z,macro1
0A54                             ;  ld d,msb(macros)
0A54                             ;  push de
0A54                             ;  call call		            ; Siena exec_ operation and jump to it
0A54                             ;  db DC1,0
0A54                             ; macro1:
0A54                             ;  ld bc,(vTIBPtr)
0A54   18 DC                  JR   interpret2   
0A56                WAITCHAR1:      
0A56   21 00 18               LD   hl,TIB   
0A59   09                     ADD   hl,bc   
0A5A   77                     LD   (hl),a   ; store the character in textbuf
0A5B   03                     INC   bc   
0A5C   CD 85 00               CALL   putchar   ; echo character to screen
0A5F   CD 51 08               CALL   nesting   
0A62   18 E1                  JR   waitchar   ; wait for next character
0A64                WAITCHAR3:      
0A64   21 00 18               LD   hl,TIB   
0A67   09                     ADD   hl,bc   
0A68   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A6A   23                     INC   hl   
0A6B   36 0A                  LD   (hl),"\n"   
0A6D   23                     INC   hl   
0A6E   03                     INC   bc   
0A6F   03                     INC   bc   
0A70   CD 86 08               CALL   crlf   ; echo character to screen
0A73   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A74   B7                     OR   a   
0A75   20 CE                  JR   nz,waitchar   
0A77   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A79   03                     INC   bc   
0A7A                WAITCHAR4:      
0A7A   ED 43 82 1B            LD   (vTIBPtr),bc   
0A7E   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A81                             ; we pressed enter
0A81   0B                     DEC   bc   
0A82                NEXT:        
0A82   03                     INC   bc   ; Increment the IP
0A83   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A84                             ; bit 7,a                   ; is 15-bit opcode ?
0A84                             ; jr nz,next3
0A84   FE 20                  CP   " "   ; whitespace?
0A86   28 FA                  JR   z,next   ; space? ignore
0A88   38 07                  JR   c,next1   
0A8A   6F                     LD   l,a   ; index into table
0A8B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A8D   6E                     LD   l,(hl)   ; get low jump address
0A8E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A90   E9                     JP   (hl)   ; Jump to routine
0A91                NEXT1:       
0A91   FE 1B                  CP   ESC   ; escape from interpreter
0A93   28 07                  JR   z,escape   
0A95   FE 00                  CP   NUL   ; end of input string?
0A97   28 07                  JR   z,exit   
0A99                             ; cp ETX                      ; end of command line input text?
0A99                             ; jr nz,next
0A99                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0A99                             ;     add hl,sp
0A99                             ;     jr nc,next2
0A99                             ;     ld sp,DSTACK                ; yes, reset stack
0A99                             ; next2:
0A99   C3 28 0A               JP   interpret   ; no, other whitespace, macros?
0A9C                             ; next3:
0A9C                             ;     ld h,a                    ; build address
0A9C                             ;     inc bc
0A9C                             ;     ld a,(bc)
0A9C                             ;     ld l,a
0A9C                             ;     add hl,hl
0A9C                             ;     jp (hl)
0A9C                ESCAPE:      
0A9C   60 69                  LD   hl,bc   ; address of code after escape opcode
0A9E   23                     INC   hl   
0A9F   E9                     JP   (hl)   
0AA0                EXIT:        
0AA0   50 59                  LD   de,bc   ; address of code after exit opcode
0AA2   13                     INC   de   
0AA3   D9                     EXX      
0AA4   C1                     POP   bc   ; bc = last result
0AA5   FD 54                  LD   d,iyh   ; de = BP
0AA7   FD 5D                  LD   e,iyl   
0AA9   EB                     EX   de,hl   ; hl = BP
0AAA   F9                     LD   sp,hl   ; sp = BP
0AAB   D9                     EXX      
0AAC   E1                     POP   hl   ; hl = old BP
0AAD   C1                     POP   bc   ; pop SCP (discard)
0AAE   C1                     POP   bc   ; bc = IP
0AAF   F9                     LD   sp,hl   ; sp = old BP
0AB0   D9                     EXX      
0AB1   C5                     PUSH   bc   ; push result
0AB2   D9                     EXX      
0AB3   EB                     EX   de,hl   
0AB4   E9                     JP   (hl)   
0AB5                             ; call with args
0AB5                             ; creates a scope
0AB5                CALL:        ; execute code at pointer
0AB5   E1                     POP   hl   ; hl = pointer to code
0AB6   7C                     LD   a,h   ; skip if destination address is NUL
0AB7   B5                     OR   l   
0AB8   28 0E                  JR   z,call2   
0ABA   C5                     PUSH   bc   ; push IP
0ABB   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0ABD   FD E5                  PUSH   iy   ; push BP
0ABF   FD 21 00 00            LD   iy,0   ; BP = SP
0AC3   FD 39                  ADD   iy,sp   
0AC5   44 4D                  LD   bc,hl   ; IP = pointer to code
0AC7   0B                     DEC   bc   ; dec to prepare for next routine
0AC8                CALL2:       
0AC8   DD E9                  JP   (ix)   
0ACA                             ; execute a block of code
0ACA                             ; uses parent scope
0ACA                EXEC:        ; execute code at pointer
0ACA   E1                     POP   hl   ; hl = pointer to code
0ACB   7C                     LD   a,h   ; skip if destination address is NUL
0ACC   B5                     OR   l   
0ACD   28 13                  JR   z,exec2   
0ACF   C5                     PUSH   bc   ; push IP
0AD0   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AD3   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AD6   D5                     PUSH   de   ; push SCP
0AD7   FD E5                  PUSH   iy   ; push BP
0AD9   FD 21 00 00            LD   iy,0   ; BP = SP
0ADD   FD 39                  ADD   iy,sp   
0ADF   44 4D                  LD   bc,hl   ; IP = pointer to code
0AE1   0B                     DEC   bc   ; dec to prepare for next routine
0AE2                EXEC2:       
0AE2   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        
1E00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":xyz (10) def :xyz addr exec", 10
4000   31 00 1A               LD   SP,DSTACK   
4003   CD AC 08               CALL   init   
4006   CD CA 0A               CALL   exec   
4009   3A 78 79 7A 20 28 31 30 29 20 64 65 66 20 3A 78 79 7A 20 61 64 64 72 20 65 78 65 63 00 .CSTR   ":xyz (10) def :xyz addr exec"   
4026                          ;*Macro unroll:  expect ":xyz (10) def :xyz addr exec",10
4026   E1                     POP   HL   
4027   E5                     PUSH   HL   
4028   11 0A 00               LD   DE,10   
402B   B7                     OR   A   
402C   ED 52                  SBC   HL,DE   
402E   7D                     LD   A,L   
402F   B4                     OR   H   
4030   28 67                  JR   Z,expectM_0_2294S43   
4032   CD 8D 08               CALL   printStr   
4035   43 6F 64 65 3A 20 3A 78 79 7A 20 28 31 30 29 20 64 65 66 20 3A 78 79 7A 20 61 64 64 72 20 65 78 65 63 00 .CSTR   "Code: ",":xyz (10) def :xyz addr exec"   
4058   CD 8D 08               CALL   printStr   
405B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
406A   21 0A 00               LD   HL,10   
406D   CD E1 07               CALL   prtdec   
4070   CD 8D 08               CALL   printStr   
4073   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4080   E1                     POP   hl   
4081   E5                     PUSH   hl   
4082   CD E1 07               CALL   prtdec   
4085   E1                     POP   hl   
4086   CD 8D 08               CALL   printStr   
4089   20 28 23 00            .CSTR   " (#"   
408D   CD 29 08               CALL   prthex   
4090   CD 8D 08               CALL   printStr   
4093   29 0D 0A 00            .CSTR   ")\r\n"   
4097   76                     HALT      
4098   00                     .CSTR      
4099                EXPECTM_0_2294S43:      
4099   E1                     POP   HL   
409A                             ; test ":xyz ($1 $2 +) def 1 2 :xyz addr call", 3
409A                             ; test "1 2 ($1 $2 +) call", 3
409A                             ; test "'hello' hash", $7f54
409A                             ; test ":hello", $7f54
409A                             ; test ":hello 2 def", TRUE
409A                             ; test ":hello 2 def :hello addr", 2
409A                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
409A                             ; test "bytes [1 2 3]", $1e02
409A                             ; test "bytes [1 2 3] 1? get", 2
409A                             ; test "bytes :xx [1 2 3] def :xx addr", 2
409A                             ; test "words [1 2 3]", $1e02
409A                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
409A                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
409A                             ; test "words [10 20 30] 1 ? get", 10
409A                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
409A                             ; test "(((1) exec) exec) exec", 1
409A                             ; test "5 ((($1) exec) exec) call", 5
409A                             ; test "5 ($1) call", 5
409A                             ; test "5 (($1) exec) call", 5
409A                             ; test "2 1 {{$1} call} call", 2
409A                             ; test "2 1 {$2} call", 1
409A                             ; test "2 1 {$1} call", 2
409A                             ; test "2 1 {$2} call", 1
409A                             ; test "2 4 {$2} call", 4
409A                             ; test "{{1} call} call", 1
409A                             ; test "5 {-1 ($1) if} call", 5
409A                             ; test "0 () loop", 0
409A                             ; test "1 (1-) loop", $1a00
409A                             ; test "65 .c", 0
409A                             ; test "1 2 <", TRUE
409A                             ; test "2 2 <=", TRUE
409A                             ; test "2 1 <", FALSE
409A                             ; test "1 2 >", FALSE
409A                             ; test "2 2 >=", TRUE
409A                             ; test "2 1 >", TRUE
409A                             ; test "10 sqrt", 3
409A                             ; test "10 sqrt frac", 1
409A                             ; test "7 3 /", 2
409A                             ; test "7 3 / frac", 1
409A                             ; test "1 2 +", 3
409A                             ; test ":h {1} def :h addr call", 1
409A                             ; test "1 2 +", 3
409A                             ; test "4 1 2 +", 3
409A                             ; test "1", 1
409A                             ; test "2", 2
409A                             ; test "``", 0
409A                             ; test "`a`", $61
409A                             ; test "`\\``", $60
409A                             ; test "`b` 'cba' in", -1
409A                             ; test "`x` 'cba' in", 0
409A                             ; test "5 0 (1) if", 5
409A                             ; test "0 (1) (2) ife", 2
409A                             ; test "5 -1 (1) if", 1
409A                             ; test "-1 (1) (2) ife", 1
409A                             ; test "9 sw (1) (5) ca", 5
409A                             ; test "0 sw (1) ca", 1
409A                             ; test "1 sw (1) (2) (3) ca", 2
409A                             ; test "5 -1 (2) if", 2
409A                             ; test "5 0 (2) if", 5
409A                             ; test "5 0 (0 (2) if) if", 5
409A                             ; test "5 0 (-1 (2) if) if", 5
409A                             ; test "5 -1 (2) if", 2
409A                             ; test "5 -1 (-1 (2) if) if", 2
409A                             ; test "(1) ex", 1
409A                             ; test "'A' @", 65
409A                             ; test "1", 1
409A                             ; test "0", 0
409A                             ; test "10", 10
409A                             ; test "123", 123
409A                             ; test "$10", $10
409A                             ; test "$FF", $FF
409A                             ; test "2 3 =", 0
409A                             ; test "3 3 =", 1
409A                             ; test "2 3 <", 1
409A                             ; test "3 3 <", 0
409A                             ; test "3 3 >", 0
409A                             ; test "4 3 >", 1
409A                             ; test "1 2 +", 3
409A                             ; test "123 456 +", 123+456
409A                             ; test "64 128 +", 64+128
409A                             ; test "5 3 -", 2
409A                             ; test "3 5 &", 1
409A                             ; test "3 5 |", 7
409A                             ; test "2 3 *", 6
409A                             ; test "1 2 3 + *", 5
409A                             ; ; test "1 2 3 ' +", 3
409A                             ; ; test "1_ 2 +",1
409A                             ; ; test "1_ 1 +",0
409A                             ; ; call enter
409A                             ; ;     .cstr "1 3",$22,"+"
409A                             ; ; expect "1 3 DUP +", 6
409A                             ; ; test "5 2/'", 2
409A                             ; ; test "3 5$ -", 2
409A                             ; ; test "5 2/$ '", 1
409A                             ; ; test "2 3%++", 7
409A                             ; ; test "1 2 3~''", 2
409A                             ; ; test "1 2 3~+*", 8
409A                             ; ; test "2a!a@",2
409A                             ; ; test "3x! 1 x@+x! x@", 4
409A                             ; ; test "3x! 1_ x@+x! x@", 2
409A                             ; ; test "1{", 2
409A                             ; ; test "1}", 0
409A                             ; ; test "2}", 1
409A                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
409A                             ; ; test "(2) \\^", 2
409A                             ; ; test ":X1; X", 1
409A                             ; ; test ":A100;A", 100
409A                             ; ; test ":Aa!; 3A a@", 3
409A                             ; ; test ":Aa!;:Ba@;4AB", 4
409A                             ; ; test "[]$ '", 0
409A                             ; ; test "[3]$ '", 1
409A                             ; ; test "[3]'@", 3
409A                             ; ; test "[1 2 3]'@", 1
409A                             ; ; test "[1 2 3]'2+@", 2
409A                             ; ; test "\\h@[1]''\\h@$-", 2
409A                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
409A                             ; ; test "\\[]$ '", 0
409A                             ; ; test "\\[3]'\\@", 3
409A                             ; ; test "\\[3]$ '", 1
409A                             ; ; test "\\[1 2 3]'\\@", 1
409A                             ; ; test "\\[1 2 3]'1+\\@", 2
409A                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
409A                             ; ; test "\\h@\\[1]''\\h@$-", 1
409A                             ; ; test "\\`A`\\@",65
409A                             ; ; test "0 0(1+)", 0
409A                             ; ; test "0 1(1+)", 1
409A                             ; ; test "0 2(1+)", 2
409A                             ; ; test "0 1(0(1+))", 0
409A                             ; ; test "0 1(1(1+))", 1
409A                             ; ; test "0 2(1(1+))", 2
409A                             ; ; test "0 2(2(1+))", 4
409A                             ; ; test "0 1(\\i@+)", 0
409A                             ; ; test "0 2(\\i@+)", 1
409A                             ; ; test "0 3(\\i@+)", 3
409A                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
409A                             ; ; test "0t! 10(1 t@+t!) t@",10
409A                             ; ; test "0(100)(200)",200
409A                             ; ; test "1(100)(200)",100
409A                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
409A                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
409A                             ; ; test ":X10;\\0X", 10
409A                             ; ; test "2 \\1x! \\1x@", 2
409A   CD 8D 08               CALL   printStr   
409D   44 6F 6E 65 21 00      .CSTR   "Done!"   
40A3   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0739 DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 192 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 194 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 196 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 198 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 200 IN Siena.asm
DOT_:               030C DEFINED AT LINE 207 IN Siena.asm
DOT1:               0318 DEFINED AT LINE 215 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
DOT2:               0321 DEFINED AT LINE 220 IN Siena.asm
                    > USED AT LINE 217 IN Siena.asm
DOT3:               032B DEFINED AT LINE 226 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
DOT4:               032F DEFINED AT LINE 229 IN Siena.asm
                    > USED AT LINE 214 IN Siena.asm
                    > USED AT LINE 219 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
INDEX_:             0336 DEFINED AT LINE 235 IN Siena.asm
INDEX1:             033F DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
BLOCK_:             0343 DEFINED AT LINE 247 IN Siena.asm
BLOCKEND_:          0346 DEFINED AT LINE 249 IN Siena.asm
CHAR_:              0349 DEFINED AT LINE 251 IN Siena.asm
ARRAY_:             034C DEFINED AT LINE 253 IN Siena.asm
ARRAYEND_:          034F DEFINED AT LINE 255 IN Siena.asm
IDENT_:             0352 DEFINED AT LINE 257 IN Siena.asm
SYMBOL_:            0355 DEFINED AT LINE 259 IN Siena.asm
AND_:               0358 DEFINED AT LINE 261 IN Siena.asm
AND1:               035F DEFINED AT LINE 269 IN Siena.asm
                    > USED AT LINE 282 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
OR_:                0363 DEFINED AT LINE 274 IN Siena.asm
XOR_:               036C DEFINED AT LINE 284 IN Siena.asm
XOR1:               036D DEFINED AT LINE 286 IN Siena.asm
                    > USED AT LINE 297 IN Siena.asm
INV_:               0375 DEFINED AT LINE 295 IN Siena.asm
ADD_:               037A DEFINED AT LINE 299 IN Siena.asm
HDOT_:              0380 DEFINED AT LINE 306 IN Siena.asm
MUL_:               0387 DEFINED AT LINE 311 IN Siena.asm
SUB_:               038A DEFINED AT LINE 314 IN Siena.asm
SUB2:               038C DEFINED AT LINE 317 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
EQ_:                0392 DEFINED AT LINE 323 IN Siena.asm
GT_:                0397 DEFINED AT LINE 327 IN Siena.asm
LT_:                039B DEFINED AT LINE 331 IN Siena.asm
LT1:                039D DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
DIV_:               03A8 DEFINED AT LINE 342 IN Siena.asm
COMMENT_:           03B7 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
NOP_:               03C0 DEFINED AT LINE 361 IN Siena.asm
SHL:                03C2 DEFINED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
SHL1:               03CA DEFINED AT LINE 378 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
SHL2:               03CB DEFINED AT LINE 380 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
SHR:                03D2 DEFINED AT LINE 388 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
SHR1:               03DA DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
SHR2:               03DE DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
MUL:                03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
MUL2:               03EF DEFINED AT LINE 413 IN Siena.asm
                    > USED AT LINE 422 IN Siena.asm
NUM:                0401 DEFINED AT LINE 427 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
NUM0:               040A DEFINED AT LINE 433 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
NUM1:               040B DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
NUM2:               0423 DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 438 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
NUM3:               042E DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
HEXNUM:             0431 DEFINED AT LINE 465 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
HEXNUM1:            0434 DEFINED AT LINE 467 IN Siena.asm
                    > USED AT LINE 484 IN Siena.asm
HEXNUM2:            043C DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
STRING:             044E DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
STRING1:            0456 DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
STRING2:            0459 DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
CHAR:               0467 DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
CHAR1:              046A DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
CHAR2:              0476 DEFINED AT LINE 516 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
CHAR3:              0479 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
BLOCK:              047C DEFINED AT LINE 575 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
BLOCK1:             0480 DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
BLOCK2:             04A2 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
BLOCK3:             04A5 DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
BLOCK4:             04A8 DEFINED AT LINE 604 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
BLOCK5:             04AB DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 600 IN Siena.asm
BLOCKEND:           04B0 DEFINED AT LINE 612 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
ARG:                04C4 DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 199 IN Siena.asm
GET:                04DF DEFINED AT LINE 648 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
GET1:               04EB DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
SET:                04EE DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
SET1:               04FD DEFINED AT LINE 675 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
IF:                 0500 DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
IFTE:               0505 DEFINED AT LINE 729 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
IFTE1:              0506 DEFINED AT LINE 731 IN Siena.asm
                    > USED AT LINE 728 IN Siena.asm
IFTE2:              050F DEFINED AT LINE 740 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
IFTE3:              0526 DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 743 IN Siena.asm
LOOP:               0528 DEFINED AT LINE 758 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
LOOP1:              053D DEFINED AT LINE 770 IN Siena.asm
                    > USED AT LINE 791 IN Siena.asm
LOOP2:              0558 DEFINED AT LINE 786 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
LOOP3:              0562 DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
SWITCH:             0578 DEFINED AT LINE 822 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
CASE:               058C DEFINED AT LINE 834 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
CASE0:              05A8 DEFINED AT LINE 852 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
CASE1:              05AD DEFINED AT LINE 858 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
CASE2:              05BA DEFINED AT LINE 866 IN Siena.asm
                    > USED AT LINE 861 IN Siena.asm
WORDS:              05BC DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
BYTES:              05C1 DEFINED AT LINE 872 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
BYTES1:             05C4 DEFINED AT LINE 874 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
ARRAY:              05C9 DEFINED AT LINE 878 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
ARRAYEND:           05DB DEFINED AT LINE 888 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
ARRAYEND1:          05FB DEFINED AT LINE 911 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
ARRAYEND2:          060B DEFINED AT LINE 925 IN Siena.asm
                    > USED AT LINE 909 IN Siena.asm
                    > USED AT LINE 939 IN Siena.asm
ARRAYEND3:          061E DEFINED AT LINE 941 IN Siena.asm
                    > USED AT LINE 923 IN Siena.asm
HASH:               0647 DEFINED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
DEF:                0652 DEFINED AT LINE 983 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
DEF1:               0660 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
ADDR:               0664 DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
ADDR1:              0670 DEFINED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
SYMBOL:             0674 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
SYMBOL0:            067C DEFINED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
SYMBOL1:            067E DEFINED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
SYMBOL2:            068D DEFINED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
IDENT:              069B DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 258 IN Siena.asm
IDENT0:             06A2 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
IDENT1:             06A4 DEFINED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
IDENT2:             06B3 DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
IDENT3:             06C7 DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
FRAC:               06C8 DEFINED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
SQRT1:              06CE DEFINED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
ABS1:               06DB DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
MOD:                06E8 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
EQUALS:             06F4 DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
LESSTHANEQ:         06FC DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
LESSTHAN:           0701 DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
LESSTHAN1:          0706 DEFINED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
TRUE1:              0709 DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
FALSE1:             070F DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
INPUT:              0715 DEFINED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
OUTPUT:             0720 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
KEY:                0729 DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
NEG:                0732 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
LET:                0739 DEFINED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
FILTER:             0739 DEFINED AT LINE 1184 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
MAP:                0739 DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
HASHSTR:            073B DEFINED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
HASHSTR1:           073E DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
HASHSTR2:           0743 DEFINED AT LINE 1203 IN Siena.asm
DEFINEENTRY:        0754 DEFINED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
DEFINEENTRY0:       0759 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
DEFINEENTRY1:       0768 DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
DEFINEENTRY2:       076E DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1268 IN Siena.asm
DEFINEENTRY3:       0770 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
LOOKUPENTRY:        077A DEFINED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
LOOKUPENTRY0:       077F DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
LOOKUPENTRY1:       078E DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
LOOKUPENTRY2:       0794 DEFINED AT LINE 1283 IN Siena.asm
LOOKUPENTRY3:       0796 DEFINED AT LINE 1286 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
DIVIDE:             079E DEFINED AT LINE 1298 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
DIVIDE1:            07A3 DEFINED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
DIVIDE2:            07B0 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
DIVIDE3:            07B1 DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1308 IN Siena.asm
SQUAREROOT:         07B7 DEFINED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
SQUAREROOT1:        07BC DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1346 IN Siena.asm
SQUAREROOT4:        07D7 DEFINED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
SQUAREROOT5:        07DE DEFINED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
PRTDEC:             07E1 DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07F0 DEFINED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
PRTDEC1:            0812 DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
PRTDEC2:            0814 DEFINED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
PRTDEC3:            0824 DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
PRTDEC4:            0825 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
PRTHEX:             0829 DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0834 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
PRTHEX3:            083D DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
PRTSTR0:            0848 DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
PRTSTR:             084C DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
NESTING:            0851 DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
NESTING1A:          085C DEFINED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
NESTING1:           085F DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
NESTING2:           086E DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
NESTING3:           0870 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
NESTING4:           087B DEFINED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
PROMPT:             087D DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
CRLF:               0886 DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
PRINTSTR:           088D DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 188
DEFINE:             0894 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
INIT:               08AC DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08C6 DEFINED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
START:              0A12 DEFINED AT LINE 1651 IN Siena.asm
INTERPRET:          0A28 DEFINED AT LINE 1657 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
INTERPRET2:         0A32 DEFINED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
INTERPRET3:         0A3A DEFINED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
INTERPRET4:         0A40 DEFINED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
WAITCHAR:           0A45 DEFINED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
MACRO:              0A54 DEFINED AT LINE 1692 IN Siena.asm
WAITCHAR1:          0A56 DEFINED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
WAITCHAR3:          0A64 DEFINED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
WAITCHAR4:          0A7A DEFINED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
NEXT:               0A82 DEFINED AT LINE 1740 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
                    > USED AT LINE 954 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
NEXT1:              0A91 DEFINED AT LINE 1753 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
ESCAPE:             0A9C DEFINED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
EXIT:               0AA0 DEFINED AT LINE 1779 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
CALL:               0AB5 DEFINED AT LINE 1801 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
CALL2:              0AC8 DEFINED AT LINE 1813 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
EXEC:               0ACA DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0AE2 DEFINED AT LINE 1832 IN Siena.asm
                    > USED AT LINE 1822 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1667 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1517 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 348 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 907 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 487 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
                    > USED AT LINE 901 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1523 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2294S43:  4099 DEFINED AT LINE 34
                    > USED AT LINE 10
