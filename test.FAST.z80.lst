0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 8E 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   B6                     DB   lsb(exit_)   ; NUL
0201   CE                     DB   lsb(nop_)   ; SOH
0202   CE                     DB   lsb(nop_)   ; STX
0203   B3                     DB   lsb(etx_)   ; ETX
0204   CE                     DB   lsb(nop_)   ; 
0205   CE                     DB   lsb(nop_)   ; 
0206   CE                     DB   lsb(nop_)   ; 
0207   CE                     DB   lsb(nop_)   ; 
0208   CE                     DB   lsb(nop_)   ; 
0209   CE                     DB   lsb(nop_)   ; 
020A   CE                     DB   lsb(nop_)   ; 
020B   CE                     DB   lsb(nop_)   ; 
020C   CE                     DB   lsb(nop_)   ; 
020D   CE                     DB   lsb(nop_)   ; 
020E   CE                     DB   lsb(nop_)   ; 
020F   CE                     DB   lsb(nop_)   ; 
0210   CE                     DB   lsb(nop_)   ; 
0211   CE                     DB   lsb(nop_)   ; 
0212   CE                     DB   lsb(nop_)   ; 
0213   CE                     DB   lsb(nop_)   ; 
0214   CE                     DB   lsb(nop_)   ; 
0215   CE                     DB   lsb(nop_)   ; 
0216   CE                     DB   lsb(nop_)   ; 
0217   CE                     DB   lsb(nop_)   ; 
0218   CE                     DB   lsb(nop_)   ; 
0219   CE                     DB   lsb(nop_)   ; 
021A   CE                     DB   lsb(nop_)   ; 
021B   CE                     DB   lsb(nop_)   ; 
021C   CE                     DB   lsb(nop_)   ; 
021D   CE                     DB   lsb(nop_)   ; 
021E   CE                     DB   lsb(nop_)   ; 
021F   CE                     DB   lsb(nop_)   ; 
0220   CE                     DB   lsb(nop_)   ; 
0221   CE                     DB   lsb(nop_)   ;    !
0222   CE                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   CE                     DB   lsb(nop_)   ;    %
0226   CE                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   21                     DB   lsb(block_)   ;    (
0229   24                     DB   lsb(blockend_)   ;    )
022A   CE                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   CE                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   15                     DB   lsb(dot_)   ;    .
022F   CE                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   CE                     DB   lsb(nop_)   ;    :
023B   CE                     DB   lsb(nop_)   ;    ;
023C   CE                     DB   lsb(nop_)   ;    <
023D   CE                     DB   lsb(nop_)   ;    =
023E   CE                     DB   lsb(nop_)   ;    >
023F   CE                     DB   lsb(nop_)   ;    ?
0240   B9                     DB   lsb(fetch_)   ;    @
0241   93                     DB   lsb(kall_)   ;    A
0242   93                     DB   lsb(kall_)   ;    B
0243   93                     DB   lsb(kall_)   ;    C
0244   93                     DB   lsb(kall_)   ;    D
0245   93                     DB   lsb(kall_)   ;    E
0246   93                     DB   lsb(kall_)   ;    F
0247   93                     DB   lsb(kall_)   ;    G
0248   93                     DB   lsb(kall_)   ;    h
0249   93                     DB   lsb(kall_)   ;    I
024A   93                     DB   lsb(kall_)   ;    J
024B   93                     DB   lsb(kall_)   ;    K
024C   93                     DB   lsb(kall_)   ;    L
024D   93                     DB   lsb(kall_)   ;    M
024E   93                     DB   lsb(kall_)   ;    N
024F   93                     DB   lsb(kall_)   ;    O
0250   93                     DB   lsb(kall_)   ;    p
0251   93                     DB   lsb(kall_)   ;    Q
0252   93                     DB   lsb(kall_)   ;    R
0253   93                     DB   lsb(kall_)   ;    S
0254   93                     DB   lsb(kall_)   ;    T
0255   93                     DB   lsb(kall_)   ;    U
0256   93                     DB   lsb(kall_)   ;    V
0257   93                     DB   lsb(kall_)   ;    W
0258   93                     DB   lsb(kall_)   ;    X
0259   93                     DB   lsb(kall_)   ;    Y
025A   93                     DB   lsb(kall_)   ;    Z
025B   2A                     DB   lsb(array_)   ;    [
025C   CE                     DB   lsb(nop_)   ;    \
025D   2D                     DB   lsb(arrayEnd_)   ;    ]
025E   CE                     DB   lsb(nop_)   ;    ^
025F   CE                     DB   lsb(nop_)   ;    _
0260   27                     DB   lsb(char_)   ;    `    	
0261   30                     DB   lsb(a_)   ;    a
0262   3F                     DB   lsb(var_)   ;    b
0263   33                     DB   lsb(c_)   ;    c
0264   36                     DB   lsb(d_)   ;    d
0265   39                     DB   lsb(e_)   ;    e
0266   3C                     DB   lsb(f_)   ;    f
0267   3F                     DB   lsb(g_)   ;    g
0268   42                     DB   lsb(h_)   ;    h
0269   45                     DB   lsb(i_)   ;    i
026A   3F                     DB   lsb(var_)   ;    j
026B   48                     DB   lsb(k_)   ;    k
026C   4B                     DB   lsb(l_)   ;    l
026D   4E                     DB   lsb(m_)   ;    m
026E   4E                     DB   lsb(m_)   ;    n
026F   54                     DB   lsb(o_)   ;    o
0270   57                     DB   lsb(p_)   ;    p
0271   3F                     DB   lsb(var_)   ;    q
0272   5A                     DB   lsb(r_)   ;    r
0273   5D                     DB   lsb(s_)   ;    s
0274   3F                     DB   lsb(var_)   ;    t
0275   60                     DB   lsb(u_)   ;    u
0276   3F                     DB   lsb(var_)   ;    v
0277   63                     DB   lsb(w_)   ;    w
0278   66                     DB   lsb(x_)   ;    x
0279   3F                     DB   lsb(var_)   ;    y
027A   3F                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   75                     DB   lsb(or_)   ;    |
027D   12                     DB   lsb(lambdaEnd_)   ;    }
027E   CE                     DB   lsb(nop_)   ;    ~
027F   CE                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                NESTINGSTR:      
0300   22 27 28 29 5B 5D 7B 7D 60 00 .CSTR   $22,"'()[]{}`"   
030A                ETX:         
030A   21 00 E6               LD   hl,-DSTACK   
030D   39                     ADD   hl,sp   
030E   30 03                  JR   nc,etx1   
0310   31 00 1A               LD   sp,DSTACK   
0313                ETX1:        
0313   18 16                  JR   interpret   
0315                START:       
0315   31 00 1A               LD   sp,DSTACK   ; start of Siena
0318   CD 8E 08               CALL   init   ; setups
031B   CD AF 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
031E   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
032B                INTERPRET:      
032B   CD AA 07               CALL   prompt   
032E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0331   ED 43 84 1B            LD   (vTIBPtr),bc   
0335                INTERPRET2:      ; calc nesting (a macro might have changed it)
0335   1E 00                  LD   e,0   ; initilize nesting value
0337   C5                     PUSH   bc   ; save offset into TIB,
0338                             ; bc is also the count of chars in TIB
0338   21 00 18               LD   hl,TIB   ; hl is start of TIB
033B   18 06                  JR   interpret4   
033D                INTERPRET3:      
033D   7E                     LD   a,(hl)   ; a = char in TIB
033E   23                     INC   hl   ; inc pointer into TIB
033F   0B                     DEC   bc   ; dec count of chars in TIB
0340   CD D4 08               CALL   nesting   ; update nesting value
0343                INTERPRET4:      
0343   79                     LD   a,c   ; is count zero?
0344   B0                     OR   b   
0345   20 F6                  JR   nz,interpret3   ; if not loop
0347   C1                     POP   bc   ; restore offset into TIB
0348                WAITCHAR:      
0348   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
034B   FE 20                  CP   $20   ; compare to space
034D   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
034F   FE 00                  CP   $0   ; is it end of string? null end of string
0351   28 45                  JR   z,waitchar4   
0353   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0355   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
0357                MACRO:       
0357   ED 43 84 1B            LD   (vTIBPtr),bc   
035B   21 80 1A               LD   hl,ctrlCodes   
035E   85                     ADD   a,l   ; look up key of macros
035F   6F                     LD   l,a   
0360   5E                     LD   e,(hl)   
0361   7B                     LD   a,e   
0362   B7                     OR   a   
0363   28 09                  JR   z,macro1   
0365   16 01                  LD   d,msb(macros)   
0367   D5                     PUSH   de   
0368   CD 30 09               CALL   exec   ; Siena exec_ operation and jump to it
036B   63 61 00               .CSTR   "ca"   
036E                MACRO1:      
036E   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0372   18 C1                  JR   interpret2   
0374                WAITCHAR1:      
0374   21 00 18               LD   hl,TIB   
0377   09                     ADD   hl,bc   
0378   77                     LD   (hl),a   ; store the character in textbuf
0379   03                     INC   bc   
037A   CD 85 00               CALL   putchar   ; echo character to screen
037D   CD D4 08               CALL   nesting   
0380   18 C6                  JR   waitchar   ; wait for next character
0382                WAITCHAR3:      
0382   21 00 18               LD   hl,TIB   
0385   09                     ADD   hl,bc   
0386   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0388   23                     INC   hl   
0389   36 0A                  LD   (hl),"\n"   
038B   23                     INC   hl   
038C   03                     INC   bc   
038D   03                     INC   bc   
038E   CD D2 07               CALL   crlf   ; echo character to screen
0391   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0392   B7                     OR   a   
0393   20 B3                  JR   nz,waitchar   
0395   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0397   03                     INC   bc   
0398                WAITCHAR4:      
0398   ED 43 84 1B            LD   (vTIBPtr),bc   
039C   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
039F   0B                     DEC   bc   
03A0                             ; ********************************************************************************
03A0                             ; 
03A0                             ; Dispatch Routine.
03A0                             ; 
03A0                             ; Get the next character and form a 1 byte jump address
03A0                             ; 
03A0                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
03A0                             ; jump to the selected function.
03A0                             ; 
03A0                             ; Individual handler routines will deal with each category:
03A0                             ; 
03A0                             ; 1. Detect characters a-z and jump to the User Command handler routine
03A0                             ; 
03A0                             ; 2. Detect characters a-z and jump to the variable handler routine
03A0                             ; 
03A0                             ; 3. All other characters are punctuation and cause a jump to the associated
03A0                             ; primitive code.
03A0                             ; 
03A0                             ; Instruction Pointer IP bc is incremented
03A0                             ; 
03A0                             ; *********************************************************************************
03A0                NEXT:        
03A0   03                     INC   bc   ;  Increment the IP
03A1   0A                     LD   a,(bc)   ;  Get the next character and dispatch
03A2   6F                     LD   l,a   ;  Index into table
03A3   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
03A5   6E                     LD   l,(hl)   ;  get low jump address
03A6   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
03A8   E9                     JP   (hl)   ;  Jump to routine
03A9                             ; **********************************************************************			
03A9                             ; Page 4 primitive routines
03A9                             ; **********************************************************************
03A9                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 D9 07               JP   num   
0403                HEXNUM_:      
0403   C3 0A 08               JP   hexnum   
0406                ARG_:        
0406   C3 DE 09               JP   arg   
0409                STRDEF_:      
0409   C3 00 09               JP   strDef   
040C                NEWADD2_:      
040C   C3 25 0A               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 46 09               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 81 09               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD 27 08               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   C3 A0 03               JP   next   
0421                BLOCK_:      
0421   C3 96 09               JP   block   
0424                BLOCKEND_:      
0424   C3 C9 09               JP   blockend   
0427                CHAR_:       
0427   C3 1A 09               JP   char   
042A                ARRAY_:      
042A   C3 D0 0A               JP   array   
042D                ARRAYEND_:      
042D   C3 E3 0A               JP   arrayEnd   
0430                A_:          
0430   C3 5A 06               JP   a   
0433                C_:          
0433   C3 75 06               JP   c   
0436                D_:          
0436   C3 80 06               JP   d   
0439                E_:          
0439   C3 90 06               JP   e   
043C                F_:          
043C   C3 A0 06               JP   f   
043F                G_:          
043F   C3 AB 06               JP   g   
0442                H_:          
0442   C3 BB 06               JP   h   
0445                I_:          
0445   C3 C6 06               JP   i   
0448                K_:          
0448   C3 E6 06               JP   k   
044B                L_:          
044B   C3 F4 06               JP   l   
044E                M_:          
044E   C3 04 07               JP   m   
0451                N_:          
0451   C3 14 07               JP   n   
0454                O_:          
0454   C3 1F 07               JP   o   
0457                P_:          
0457   C3 2F 07               JP   p   
045A                R_:          
045A   C3 3A 07               JP   r   
045D                S_:          
045D   C3 45 07               JP   s   
0460                U_:          
0460   C3 64 07               JP   u   
0463                W_:          
0463   C3 6F 07               JP   w   
0466                X_:          
0466   C3 7F 07               JP   x   
0469                AND_:        
0469   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
046A   E1                     POP   hl   
046B   7B                     LD   a,e   
046C   A5                     AND   l   
046D   6F                     LD   l,a   
046E   7A                     LD   a,d   
046F   A4                     AND   h   
0470                AND1:        
0470   67                     LD   h,a   
0471   E5                     PUSH   hl   
0472   C3 A0 03               JP   next   
0475                OR_:         
0475   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0476   E1                     POP   hl   
0477   7B                     LD   a,e   
0478   B5                     OR   l   
0479   6F                     LD   l,a   
047A   7A                     LD   a,d   
047B   B4                     OR   h   
047C   18 F2                  JR   and1   
047E                XOR_:        
047E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
047F                XOR1:        
047F   E1                     POP   hl   
0480   7B                     LD   a,e   
0481   AD                     XOR   l   
0482   6F                     LD   l,a   
0483   7A                     LD   a,d   
0484   AC                     XOR   h   
0485   18 E9                  JR   and1   
0487                INV_:        ; Bitwise INVert the top member of the stack
0487   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
048A   18 F3                  JR   xor1   
048C                ADD_:        ; add the top 2 members of the stack
048C   D1                     POP   de   
048D   E1                     POP   hl   
048E   19                     ADD   hl,de   
048F   E5                     PUSH   hl   
0490   C3 A0 03               JP   next   
0493                KALL_:       
0493   0A                     LD   a,(bc)   
0494   CD BC 08               CALL   lookupRef1   
0497   5E                     LD   e,(hl)   
0498   23                     INC   hl   
0499   56                     LD   d,(hl)   
049A   C3 31 09               JP   exec1   
049D                HDOT_:       ; print hexadecimal
049D   E1                     POP   hl   
049E   CD 6F 08               CALL   prthex   
04A1   C3 19 04               JP   dot2   
04A4                DROP_:       ; Discard the top member of the stack
04A4   E1                     POP   hl   
04A5   C3 A0 03               JP   next   
04A8                UNDROP_:      
04A8   3B                     DEC   sp   
04A9   3B                     DEC   sp   
04AA   C3 A0 03               JP   next   
04AD                DUP_:        
04AD   E1                     POP   hl   ; Duplicate the top member of the stack
04AE   E5                     PUSH   hl   
04AF   E5                     PUSH   hl   
04B0   C3 A0 03               JP   next   
04B3                ETX_:        
04B3   C3 0A 03               JP   ETX   
04B6                EXIT_:       
04B6   C3 FA 09               JP   exit   
04B9                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B9   E1                     POP   hl   
04BA                FETCH1:      
04BA   5E                     LD   e,(hl)   
04BB   23                     INC   hl   
04BC   56                     LD   d,(hl)   
04BD   D5                     PUSH   de   
04BE   C3 A0 03               JP   next   
04C1                KEY_:        
04C1   CD 81 00               CALL   getchar   
04C4   26 00                  LD   h,0   
04C6   6F                     LD   l,a   
04C7   E5                     PUSH   hl   
04C8   C3 A0 03               JP   next   
04CB   C3 8D 07     MUL_:     JP   mul   
04CE                NOP_:        
04CE   C3 A0 03               JP   next   ; hardwire white space to always exec_ to next (important for arrays)
04D1                OVER_:       
04D1   E1                     POP   hl   ; Duplicate 2nd element of the stack
04D2   D1                     POP   de   
04D3   D5                     PUSH   de   
04D4   E5                     PUSH   hl   
04D5   D5                     PUSH   de   ; and push it to top of stack
04D6   C3 A0 03               JP   next   
04D9                ROT_:        ; a b c -- b c a
04D9   D1                     POP   de   ; a b    de = c
04DA   E1                     POP   hl   ; a       hl = b
04DB   E3                     EX   (sp),hl   ; b       hl = a
04DC   D5                     PUSH   de   ; b c
04DD   E5                     PUSH   hl   ; b c a
04DE   C3 A0 03               JP   next   
04E1                             ;  Left shift { is multiply by 2		
04E1                SHL_:        
04E1   E1                     POP   hl   ; Duplicate the top member of the stack
04E2   29                     ADD   hl,hl   
04E3   E5                     PUSH   hl   ; shift left fallthrough into add_
04E4   C3 A0 03               JP   next   
04E7                             ;  Right shift } is a divide by 2		
04E7                SHR_:        
04E7   E1                     POP   hl   ; Get the top member of the stack
04E8                SHR1:        
04E8   CB 3C                  SRL   h   
04EA   CB 1D                  RR   l   
04EC   E5                     PUSH   hl   
04ED   C3 A0 03               JP   next   
04F0                STORE_:      ; Store the value at the address placed on the top of the stack
04F0   E1                     POP   hl   
04F1   D1                     POP   de   
04F2   73                     LD   (hl),e   
04F3   23                     INC   hl   
04F4   72                     LD   (hl),d   
04F5   C3 A0 03               JP   next   
04F8                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04F8   E1                     POP   hl   
04F9   E3                     EX   (sp),hl   
04FA   E5                     PUSH   hl   
04FB   C3 A0 03               JP   next   
04FE                NEG_:        
04FE   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0501   D1                     POP   de   
0502   18 02                  JR   sub2   ; use the SUBtract routine
0504                SUB_:        ; Subtract the value 2nd on stack from top of stack
0504   D1                     POP   de   
0505   E1                     POP   hl   ; Entry point for INVert
0506                SUB2:        
0506   B7                     OR   a   ; Entry point for NEGate
0507   ED 52                  SBC   hl,de   
0509   E5                     PUSH   hl   
050A   C3 A0 03               JP   next   
050D                EQ_:         
050D   E1                     POP   hl   
050E   D1                     POP   de   
050F   B7                     OR   a   ; reset the carry flag
0510   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0512   28 15                  JR   z,true_   
0514                FALSE_:      
0514   21 00 00               LD   hl,0   
0517   E5                     PUSH   hl   
0518   C3 A0 03               JP   next   
051B                GT_:         
051B   D1                     POP   de   
051C   E1                     POP   hl   
051D   18 02                  JR   lt1   
051F                LT_:         
051F   E1                     POP   hl   
0520   D1                     POP   de   
0521                LT1:         
0521   B7                     OR   a   ; reset the carry flag
0522   ED 52                  SBC   hl,de   
0524   28 EE                  JR   z,false_   
0526   FA 14 05               JP   m,false_   
0529                TRUE_:       
0529   21 01 00               LD   hl,1   
052C   E5                     PUSH   hl   
052D   C3 A0 03               JP   next   
0530                GTE_:        
0530   D1                     POP   de   
0531   E1                     POP   hl   
0532   18 02                  JR   lte1   
0534                LTE_:        
0534   E1                     POP   hl   
0535   D1                     POP   de   
0536                LTE1:        
0536   B7                     OR   a   ; reset the carry flag
0537   ED 52                  SBC   hl,de   
0539   FA 14 05               JP   m,false_   
053C   C3 FF FF               JP   true   
053F                VAR_:        
053F   0A                     LD   a,(bc)   
0540   CD C2 08               CALL   lookupRef2   
0543   E5                     PUSH   hl   
0544   C3 A0 03               JP   next   
0547                DIV_:        
0547   18 04                  JR   div   
0549                             ;*******************************************************************
0549                             ; Page 5 primitive routines
0549                             ;*******************************************************************
0549                             ;falls through
0549   E5                     PUSH   hl   
054A   C3 A0 03               JP   next   
054D                             ; ********************************************************************
054D                             ; 16-bit division subroutine.
054D                             ; 
054D                             ; bc: divisor, de: dividend, hl: remainder
054D                             ; *********************************************************************
054D                             ; This divides de by bc, storing the result in de, remainder in hl
054D                             ; *********************************************************************
054D                             ; 1382 cycles
054D                             ; 35 bytes (reduced from 48)
054D                             ; 
054D                DIV:         ;=34
054D   D1                     POP   de   ; get first value
054E   E1                     POP   hl   ; get 2nd value
054F   C5                     PUSH   bc   ; Preserve the IP
0550   44                     LD   b,h   ; bc = 2nd value
0551   4D                     LD   c,l   
0552                             ; 
0552   21 00 00               LD   hl,0   ; Zero the remainder
0555   3E 10                  LD   a,16   ; Loop counter
0557                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0557   CB 21                  SLA   c   
0559   CB 10                  RL   b   
055B   ED 6A                  ADC   hl,hl   
055D   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
055F   38 03                  JR   c,div2   
0561   0C                     INC   c   
0562   18 01                  JR   div3   
0564                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
0564   19                     ADD   hl,de   
0565                DIV3:        
0565   3D                     DEC   a   
0566   20 EF                  JR   nz,div1   
0568   50                     LD   d,b   ; Result from bc to de
0569   59                     LD   e,c   
056A                DIV4:        
056A   C1                     POP   bc   ; Restore the IP
056B   D5                     PUSH   de   ; push Result
056C   E5                     PUSH   hl   ; push remainder
056D   C3 A0 03               JP   next   
0570                             ;=57
0570                             ; **************************************************************************
0570                             ; Page 6 Alt primitives
0570                             ; **************************************************************************
0570                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 A0 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 A0 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 A0 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 A0 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 A0 03               JP   next   
0623                             ; exec_:
0623                             ;     call exec1
0623                             ;     jp next
0623                             ; exec1:
0623                             ;     pop hl
0623                             ;     ex (sp),hl
0623                             ;     jp (hl)
0623                PROMPT_:      
0623   CD AA 07               CALL   prompt   
0626   C3 A0 03               JP   next   
0629                INPORT_:      ; \<
0629   E1                     POP   hl   
062A   79                     LD   a,c   
062B   4D                     LD   c,l   
062C   ED 68                  IN   l,(c)   
062E   26 00                  LD   h,0   
0630   4F                     LD   c,a   
0631   E5                     PUSH   hl   
0632   C3 A0 03               JP   next   
0635                NEWLN_:      
0635   CD D2 07               CALL   crlf   
0638   C3 A0 03               JP   next   
063B                OUTPORT_:      
063B   E1                     POP   hl   
063C   59                     LD   e,c   
063D   4D                     LD   c,l   
063E   E1                     POP   hl   
063F   ED 69                  OUT   (c),l   
0641   4B                     LD   c,e   
0642   C3 A0 03               JP   next   
0645                PRTSTR_:      
0645                PRTSTR:      
0645   E1                     POP   hl   
0646   CD B7 07               CALL   putStr   
0649   C3 A0 03               JP   next   
064C                RPUSH_:      
064C   E1                     POP   hl   
064D   CD BC 07               CALL   rpush   
0650   C3 A0 03               JP   next   
0653                RPOP_:       
0653   CD C7 07               CALL   rpop   
0656   E5                     PUSH   hl   
0657   C3 A0 03               JP   next   
065A                             ; **************************************************************************
065A                             ; Page 6 primitive routines continued  (page 7)
065A                             ; **************************************************************************
065A                             ; falls through to following page
065A                A:           
065A   03                     INC   bc   
065B   0A                     LD   a,(bc)   
065C   FE 64                  CP   "d"   
065E   CA 8C 04               JP   z,add_   
0661   FE 6E                  CP   "n"   
0663   CA 69 04               JP   z,and_   
0666   0B                     DEC   bc   
0667   C3 3F 05               JP   var_   
066A                B:           
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 79                  CP   "y"   
066E   CA C7 0A               JP   z,bytes   
0671   0B                     DEC   bc   
0672   C3 3F 05               JP   var_   
0675                C:           
0675   03                     INC   bc   
0676   0A                     LD   a,(bc)   
0677   FE 61                  CP   "a"   
0679   CA 90 0A               JP   z,case   
067C   0B                     DEC   bc   
067D   C3 3F 05               JP   var_   
0680                D:           
0680   03                     INC   bc   
0681   0A                     LD   a,(bc)   
0682   FE 65                  CP   "e"   
0684   CA 8A 07               JP   z,def_   
0687   FE 69                  CP   "i"   
0689   CA 47 05               JP   z,div_   
068C   0B                     DEC   bc   
068D   C3 3F 05               JP   var_   
0690                E:           
0690   03                     INC   bc   
0691   0A                     LD   a,(bc)   
0692   FE 78                  CP   "x"   
0694   CA 30 09               JP   z,exec   
0697   FE 71                  CP   "q"   
0699   CA 0D 05               JP   z,eq_   
069C   0B                     DEC   bc   
069D   C3 3F 05               JP   var_   
06A0                F:           
06A0   03                     INC   bc   
06A1   0A                     LD   a,(bc)   
06A2   FE 69                  CP   "i"   
06A4   CA 8A 07               JP   z,filter_   
06A7   0B                     DEC   bc   
06A8   C3 3F 05               JP   var_   
06AB                G:           
06AB   03                     INC   bc   
06AC   0A                     LD   a,(bc)   
06AD   FE 65                  CP   "e"   
06AF   CA 8A 07               JP   z,get_   
06B2   FE 74                  CP   "t"   
06B4   CA 1B 05               JP   z,gt_   
06B7   0B                     DEC   bc   
06B8   C3 3F 05               JP   var_   
06BB                H:           
06BB   03                     INC   bc   
06BC   0A                     LD   a,(bc)   
06BD   FE 61                  CP   "a"   
06BF   CA 7E 0C               JP   z,hash   
06C2   0B                     DEC   bc   
06C3   C3 3F 05               JP   var_   
06C6                I:           
06C6   03                     INC   bc   
06C7   0A                     LD   a,(bc)   
06C8   FE 6E                  CP   "n"   
06CA   CA 0F 0A               JP   z,in   
06CD   FE 76                  CP   "v"   
06CF   CA 87 04               JP   z,inv_   
06D2   FE 66                  CP   "f"   
06D4   C2 E2 06               JP   nz,i1   
06D7   03                     INC   bc   
06D8   0A                     LD   a,(bc)   
06D9   FE 65                  CP   "e"   
06DB   CA 56 0A               JP   z,ife   
06DE   0B                     DEC   bc   
06DF   C3 51 0A               JP   if   
06E2                I1:          
06E2   0B                     DEC   bc   
06E3   C3 3F 05               JP   var_   
06E6                K:           
06E6   C3 7F 07               JP   x   
06E9   03                     INC   bc   
06EA   0A                     LD   a,(bc)   
06EB   FE 65                  CP   "e"   
06ED   CA C1 04               JP   z,key_   
06F0   0B                     DEC   bc   
06F1   C3 3F 05               JP   var_   
06F4                L:           
06F4   03                     INC   bc   
06F5   0A                     LD   a,(bc)   
06F6   FE 65                  CP   "e"   
06F8   CA 8A 07               JP   z,let_   
06FB   FE 74                  CP   "t"   
06FD   CA 1F 05               JP   z,lt_   
0700   0B                     DEC   bc   
0701   C3 3F 05               JP   var_   
0704                M:           
0704   03                     INC   bc   
0705   0A                     LD   a,(bc)   
0706   FE 61                  CP   "a"   
0708   CA 8A 07               JP   z,map_   
070B   FE 75                  CP   "u"   
070D   CA CB 04               JP   z,mul_   
0710   0B                     DEC   bc   
0711   C3 3F 05               JP   var_   
0714                N:           
0714   03                     INC   bc   
0715   0A                     LD   a,(bc)   
0716   FE 65                  CP   "e"   
0718   CA FE 04               JP   z,neg_   
071B   0B                     DEC   bc   
071C   C3 3F 05               JP   var_   
071F                O:           
071F   03                     INC   bc   
0720   0A                     LD   a,(bc)   
0721   FE 76                  CP   "v"   
0723   CA D1 04               JP   z,over_   
0726   FE 72                  CP   "r"   
0728   CA 75 04               JP   z,or_   
072B   0B                     DEC   bc   
072C   C3 3F 05               JP   var_   
072F                P:           
072F   03                     INC   bc   
0730   0A                     LD   a,(bc)   
0731   FE 72                  CP   "r"   
0733   CA 8A 07               JP   z,print_   
0736   0B                     DEC   bc   
0737   C3 3F 05               JP   var_   
073A                R:           
073A   03                     INC   bc   
073B   0A                     LD   a,(bc)   
073C   FE 6F                  CP   "o"   
073E   CA D9 04               JP   z,rot_   
0741   0B                     DEC   bc   
0742   C3 3F 05               JP   var_   
0745                S:           
0745   03                     INC   bc   
0746   0A                     LD   a,(bc)   
0747   FE 63                  CP   "c"   
0749   CA 8A 07               JP   z,scan_   
074C   FE 65                  CP   "e"   
074E                             ; jp nz,s1
074E                             ; inc bc
074E                             ; ld a,(bc)
074E                             ; cp "l"
074E                             ; jp z,select
074E                             ; cp "t"
074E   CA 8A 07               JP   z,set_   
0751                             ; dec bc
0751                             ; s1:
0751   FE 68                  CP   "h"   
0753   CA 8A 07               JP   z,shift_   
0756   FE 75                  CP   "u"   
0758   CA 04 05               JP   z,sub_   
075B   FE 77                  CP   "w"   
075D   CA 7B 0A               JP   z,switch   
0760   0B                     DEC   bc   
0761   C3 3F 05               JP   var_   
0764                U:           
0764   03                     INC   bc   
0765   0A                     LD   a,(bc)   
0766   FE 6E                  CP   "n"   
0768   CA A8 04               JP   z,undrop_   
076B   0B                     DEC   bc   
076C   C3 3F 05               JP   var_   
076F                W:           
076F   03                     INC   bc   
0770   0A                     LD   a,(bc)   
0771   FE 68                  CP   "h"   
0773   CA 8A 07               JP   z,while_   
0776   FE 6F                  CP   "o"   
0778   CA C1 0A               JP   z,words   
077B   0B                     DEC   bc   
077C   C3 3F 05               JP   var_   
077F                X:           
077F   03                     INC   bc   
0780   0A                     LD   a,(bc)   
0781   FE 78                  CP   "x"   
0783   CA 7E 04               JP   z,xor_   
0786   0B                     DEC   bc   
0787   C3 3F 05               JP   var_   
078A                CLOSURE_:      
078A                DEF_:        
078A                FILTER_:      
078A                GET_:        
078A                IF_:         
078A                LET_:        
078A                MAP_:        
078A                PRINT_:      
078A                SCAN_:       
078A                SET_:        
078A                SHIFT_:      
078A                WHILE_:      
078A   C3 A0 03               JP   next   
078D                             ;*******************************************************************
078D                             ; Page 5 primitive routines continued
078D                             ;*******************************************************************
078D                             ; ********************************************************************
078D                             ; 16-bit multiply
078D                MUL:         ;=19
078D   D1                     POP   de   ; get first value
078E   E1                     POP   hl   
078F   C5                     PUSH   bc   ; Preserve the IP
0790   44                     LD   b,h   ; bc = 2nd value
0791   4D                     LD   c,l   
0792   21 00 00               LD   hl,0   
0795   3E 10                  LD   a,16   
0797                MUL2:        
0797   29                     ADD   hl,hl   
0798   CB 13                  RL   e   
079A   CB 12                  RL   d   
079C   30 04                  JR   nc,$+6   
079E   09                     ADD   hl,bc   
079F   30 01                  JR   nc,$+3   
07A1   13                     INC   de   
07A2   3D                     DEC   a   
07A3   20 F2                  JR   nz,mul2   
07A5   C1                     POP   bc   ; Restore the IP
07A6   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
07A7   C3 A0 03               JP   next   
07AA                             ;*******************************************************************
07AA                             ; Subroutines
07AA                             ;*******************************************************************
07AA                PROMPT:      
07AA   CD AF 08               CALL   printStr   
07AD   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B2   C9                     RET      
07B3                PUTSTR0:      
07B3   CD 85 00               CALL   putchar   
07B6   23                     INC   hl   
07B7                PUTSTR:      
07B7   7E                     LD   a,(hl)   
07B8   B7                     OR   a   
07B9   20 F8                  JR   nz,putStr0   
07BB   C9                     RET      
07BC                RPUSH:       
07BC   DD 2B                  DEC   ix   
07BE   DD 74 00               LD   (ix+0),h   
07C1   DD 2B                  DEC   ix   
07C3   DD 75 00               LD   (ix+0),l   
07C6   C9                     RET      
07C7                RPOP:        
07C7   DD 6E 00               LD   l,(ix+0)   
07CA   DD 23                  INC   ix   
07CC   DD 66 00               LD   h,(ix+0)   
07CF   DD 23                  INC   ix   
07D1                RPOP2:       
07D1   C9                     RET      
07D2                CRLF:        
07D2   CD AF 08               CALL   printStr   
07D5   0D 0A 00               .CSTR   "\r\n"   
07D8   C9                     RET      
07D9                             ;*******************************************************************
07D9                             ;*******************************************************************
07D9                NUM:         
07D9   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07DC   0A                     LD   a,(bc)   ; Get numeral or -
07DD   FE 2D                  CP   "-"   
07DF   20 01                  JR   nz,num0   
07E1   03                     INC   bc   ; move to next char, no flags affected
07E2                NUM0:        
07E2   08                     EX   af,af'   ; save zero flag = 0 for later
07E3                NUM1:        
07E3   0A                     LD   a,(bc)   ; read digit
07E4   D6 30                  SUB   "0"   ; less than 0?
07E6   38 13                  JR   c,num2   ; not a digit, exit loop
07E8   FE 0A                  CP   10   ; greater that 9?
07EA   30 0F                  JR   nc,num2   ; not a digit, exit loop
07EC   03                     INC   bc   ; inc IP
07ED   54 5D                  LD   de,hl   ; multiply hl * 10
07EF   29                     ADD   hl,hl   
07F0   29                     ADD   hl,hl   
07F1   19                     ADD   hl,de   
07F2   29                     ADD   hl,hl   
07F3   85                     ADD   a,l   ; add digit in a to hl
07F4   6F                     LD   l,a   
07F5   3E 00                  LD   a,0   
07F7   8C                     ADC   a,h   
07F8   67                     LD   h,a   
07F9   18 E8                  JR   num1   
07FB                NUM2:        
07FB   0B                     DEC   bc   
07FC   08                     EX   af,af'   ; restore zero flag
07FD   20 07                  JR   nz,num3   
07FF   EB                     EX   de,hl   ; negate the value of hl
0800   21 00 00               LD   hl,0   
0803   B7                     OR   a   ; jump to sub2
0804   ED 52                  SBC   hl,de   
0806                NUM3:        
0806   E5                     PUSH   hl   ; Put the number on the stack
0807   C3 A0 03               JP   next   ; and process the next character
080A                HEXNUM:      ; 
080A   21 00 00               LD   hl,0   ; Clear hl to accept the number
080D                HEXNUM1:      
080D   03                     INC   bc   
080E   0A                     LD   a,(bc)   ; Get the character which is a numeral
080F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0811   28 02                  JR   z,hexnum2   ; no a decimal
0813   D6 07                  SUB   7   ; sub 7  to make $a - $F
0815                HEXNUM2:      
0815   D6 30                  SUB   $30   ; Form decimal digit
0817   DA FB 07               JP   c,num2   
081A   FE 10                  CP   $0F+1   
081C   D2 FB 07               JP   nc,num2   
081F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0820   29                     ADD   hl,hl   ; 4X
0821   29                     ADD   hl,hl   ; 8X
0822   29                     ADD   hl,hl   ; 16X
0823   85                     ADD   a,l   ; add into bottom of hl
0824   6F                     LD   l,a   ; 
0825   18 E6                  JR   hexnum1   
0827                PRTDEC:      ;=34 ; removes leading zeros
0827                             ; ld a,h
0827                             ; or l
0827                             ; ld a, "0"
0827                             ; jp z, putchar
0827   CB 7C                  BIT   7,h   
0829   28 0B                  JR   z,prtdec0   
082B   3E 2D                  LD   a,"-"   
082D   CD 85 00               CALL   putchar   
0830   AF                     XOR   a   
0831   95                     SUB   l   
0832   6F                     LD   l,a   
0833   9F                     SBC   a,a   
0834   94                     SUB   h   
0835   67                     LD   h,a   
0836                PRTDEC0:      
0836   C5                     PUSH   bc   
0837   0E 00                  LD   c,0   ; leading zeros flag = false
0839   11 F0 D8               LD   de,-10000   
083C   CD 58 08               CALL   prtdec1   
083F   11 18 FC               LD   de,-1000   
0842   CD 58 08               CALL   prtdec1   
0845   11 9C FF               LD   de,-100   
0848   CD 58 08               CALL   prtdec1   
084B   1E F6                  LD   e,-10   
084D   CD 58 08               CALL   prtdec1   
0850   0C                     INC   c   ; flag = true for at least digit
0851   1E FF                  LD   e,-1   
0853   CD 58 08               CALL   prtdec1   
0856   C1                     POP   bc   
0857   C9                     RET      
0858                PRTDEC1:      
0858   06 2F                  LD   b,"0"-1   
085A                PRTDEC2:      
085A   04                     INC   b   
085B   19                     ADD   hl,de   
085C   38 FC                  JR   c,prtdec2   
085E   ED 52                  SBC   hl,de   
0860   3E 30                  LD   a,"0"   
0862   B8                     CP   b   
0863   20 05                  JR   nz,prtdec3   
0865   AF                     XOR   a   
0866   B1                     OR   c   
0867   C8                     RET   z   
0868   18 01                  JR   prtdec4   
086A                PRTDEC3:      
086A   0C                     INC   c   
086B                PRTDEC4:      
086B   78                     LD   a,b   
086C   C3 85 00               JP   putchar   
086F                             ; 
086F                PRTHEX:      
086F                             ; Display hl as a 16-bit number in hex.
086F   C5                     PUSH   bc   ; preserve the IP
0870   7C                     LD   a,h   
0871   CD 7A 08               CALL   prthex2   
0874   7D                     LD   a,l   
0875   CD 7A 08               CALL   prthex2   
0878   C1                     POP   bc   
0879   C9                     RET      
087A                PRTHEX2:      
087A   4F                     LD   c,a   
087B   1F                     RRA      
087C   1F                     RRA      
087D   1F                     RRA      
087E   1F                     RRA      
087F   CD 83 08               CALL   prthex3   
0882   79                     LD   a,c   
0883                PRTHEX3:      
0883   E6 0F                  AND   0x0F   
0885   C6 90                  ADD   a,0x90   
0887   27                     DAA      
0888   CE 40                  ADC   a,0x40   
088A   27                     DAA      
088B   C3 85 00               JP   putchar   
088E                INIT:        
088E   FD 21 00 1A            LD   iy,DSTACK   
0892   DD 21 80 19            LD   ix,RSTACK   
0896   21 80 01               LD   hl,ialtVars   
0899   11 80 1B               LD   de,altVars   
089C   01 10 00               LD   bc,8 * 2   
089F   ED B0                  LDIR      
08A1   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
08A4   54 5D                  LD   de,hl   
08A6   13                     INC   de   
08A7   36 00                  LD   (hl),0   
08A9   01 68 00               LD   bc,DATASIZE   
08AC   ED B0                  LDIR      
08AE   C9                     RET      
08AF                PRINTSTR:      
08AF   E3                     EX   (sp),hl   ; swap			
08B0   CD B7 07               CALL   putStr   
08B3   23                     INC   hl   ; inc past null
08B4   E3                     EX   (sp),hl   ; put it back	
08B5   C9                     RET      
08B6                LOOKUPREF:      
08B6   16 00                  LD   d,0   
08B8                LOOKUPREF0:      
08B8   FE 61                  CP   "a"   
08BA   30 06                  JR   nc,lookupRef2   
08BC                LOOKUPREF1:      
08BC   D6 61                  SUB   "a"   
08BE   1E 00                  LD   e,0   
08C0   18 04                  JR   lookupRef3   
08C2                LOOKUPREF2:      
08C2   D6 61                  SUB   "a"   
08C4   1E 34                  LD   e,26*2   
08C6                LOOKUPREF3:      
08C6   87                     ADD   a,a   
08C7   83                     ADD   a,e   
08C8   21 C0 1B               LD   hl,DATA   
08CB   85                     ADD   a,l   
08CC   6F                     LD   l,a   
08CD   3E 00                  LD   a,0   
08CF   8C                     ADC   a,h   
08D0   67                     LD   h,a   
08D1   AF                     XOR   a   
08D2   B3                     OR   e   ; sets z flag if a-z
08D3   C9                     RET      
08D4                             ; **************************************************************************
08D4                             ; calculate nesting value
08D4                             ; a is char to be tested,
08D4                             ; e is the nesting value (initially 0)
08D4                             ; e is increased by ( and [
08D4                             ; e is decreased by ) and ]
08D4                             ; e has its bit 7 toggled by `
08D4                             ; limited to 127 levels
08D4                             ; **************************************************************************
08D4                NESTING:      
08D4   FE 22                  CP   $22   ; quote char
08D6   20 0A                  JR   nz,nesting1   
08D8   CB 7B                  BIT   7,e   
08DA   28 03                  JR   z,nesting1a   
08DC   CB BB                  RES   7,e   
08DE   C9                     RET      
08DF                NESTING1A:      
08DF   CB FB                  SET   7,e   
08E1   C9                     RET      
08E2                NESTING1:      
08E2   CB 7B                  BIT   7,e   
08E4   C0                     RET   nz   
08E5   FE 7B                  CP   "{"   
08E7   28 08                  JR   z,nesting2   
08E9   FE 5B                  CP   "["   
08EB   28 04                  JR   z,nesting2   
08ED   FE 28                  CP   "("   
08EF   20 02                  JR   nz,nesting3   
08F1                NESTING2:      
08F1   1C                     INC   e   
08F2   C9                     RET      
08F3                NESTING3:      
08F3   FE 7D                  CP   "}"   
08F5   28 07                  JR   z,nesting4   
08F7   FE 5D                  CP   "]"   
08F9   28 03                  JR   z,nesting4   
08FB   FE 29                  CP   ")"   
08FD   C0                     RET   nz   
08FE                NESTING4:      
08FE   1D                     DEC   e   
08FF   C9                     RET      
0900                             ; 
0900                STRDEF:      
0900   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0904   D5                     PUSH   de   ; save start of string
0905   03                     INC   bc   ; point to next char
0906   18 03                  JR   strDef2   
0908                STRDEF1:      
0908   12                     LD   (de),a   
0909   13                     INC   de   ; increase count
090A   03                     INC   bc   ; point to next char
090B                STRDEF2:      
090B   0A                     LD   a,(bc)   
090C   FE 27                  CP   "'"   ; ' is the string terminator
090E   20 F8                  JR   nz,strDef1   
0910   AF                     XOR   a   ; write null to terminate string
0911   12                     LD   (de),a   
0912   13                     INC   de   
0913   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0917   C3 A0 03               JP   next   
091A                CHAR:        
091A   21 00 00               LD   hl,0   ; if `` is empty
091D                CHAR1:       
091D   03                     INC   bc   ; point to next char
091E   0A                     LD   a,(bc)   
091F   FE 60                  CP   "`"   ; ` is the string terminator
0921   28 09                  JR   z,char3   
0923   FE 5C                  CP   $5c   ; \ is the escape
0925   20 02                  JR   nz,char2   
0927   03                     INC   bc   
0928   0A                     LD   a,(bc)   
0929                CHAR2:       
0929   6F                     LD   l,a   
092A   18 F1                  JR   char1   
092C                CHAR3:       
092C   E5                     PUSH   hl   
092D                             ; dec bc
092D   C3 A0 03               JP   next   
0930                EXEC:        ; execute lambda at pointer
0930   E1                     POP   hl   ; hl = pointer to lambda
0931                EXEC1:       
0931   7C                     LD   a,h   ; skip if destination address is null
0932   B5                     OR   l   
0933   28 0E                  JR   z,exec3   
0935                EXEC2:       
0935   C5                     PUSH   bc   ; push IP
0936   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0938   FD E5                  PUSH   iy   ; push BP
093A   FD 21 00 00            LD   iy,0   ; BP = SP
093E   FD 39                  ADD   iy,sp   
0940   44 4D                  LD   bc,hl   ; IP = pointer to lambda
0942   0B                     DEC   bc   ; dec to prepare for next routine
0943                EXEC3:       
0943   C3 A0 03               JP   next   
0946                LAMBDA:      
0946   03                     INC   bc   
0947   2A 8E 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
094A   E5                     PUSH   hl   
094B   16 01                  LD   d,1   ; nesting: count first parenthesis
094D                LAMBDA1:      ; Skip to end of definition
094D   0A                     LD   a,(bc)   ; Get the next character
094E   03                     INC   bc   ; Point to next character
094F   77                     LD   (hl),a   
0950   23                     INC   hl   
0951   FE 27                  CP   "'"   
0953   28 1C                  JR   z,lambda2   
0955   FE 28                  CP   "("   
0957   28 18                  JR   z,lambda2   
0959   FE 29                  CP   ")"   
095B   28 14                  JR   z,lambda2   
095D   FE 7B                  CP   "{"   
095F   28 10                  JR   z,lambda2   
0961   FE 7D                  CP   "}"   ; Is it the end of the definition?
0963   28 0C                  JR   z,lambda2   
0965   FE 5B                  CP   "["   
0967   28 08                  JR   z,lambda2   
0969   FE 5D                  CP   "]"   
096B   28 04                  JR   z,lambda2   
096D   FE 60                  CP   "`"   
096F   20 DC                  JR   nz,lambda1   
0971                LAMBDA2:      
0971   14                     INC   d   
0972   CB 42                  BIT   0,d   ; balanced?
0974   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0976   FE 7D                  CP   "}"   ; Is it the end of the definition?
0978   20 D3                  JR   nz,lambda1   ; get the next element
097A   0B                     DEC   bc   
097B   22 8E 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
097E   C3 A0 03               JP   next   
0981                LAMBDAEND:      
0981   E1                     POP   hl   ; hl = last result
0982   FD 54                  LD   d,iyh   ; de = BP
0984   FD 5D                  LD   e,iyl   
0986   EB                     EX   de,hl   ; hl = BP, de = result
0987   F9                     LD   sp,hl   ; sp = BP
0988   E1                     POP   hl   ; hl = old BP
0989   C1                     POP   bc   ; pop scope ptr (discard)
098A   C1                     POP   bc   ; bc = IP
098B   F9                     LD   sp,hl   ; sp = old BP
098C   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0990   FD 39                  ADD   iy,sp   
0992   D5                     PUSH   de   ; push result
0993   C3 A0 03               JP   next   
0996                BLOCK:       
0996   03                     INC   bc   
0997   C5                     PUSH   bc   ; return first opcode of block
0998   16 01                  LD   d,1   ; nesting: count first parenthesis
099A                BLOCK1:      ; Skip to end of definition
099A   0A                     LD   a,(bc)   ; Get the next character
099B   03                     INC   bc   ; Point to next character
099C   FE 27                  CP   "'"   
099E   28 1C                  JR   z,block2   
09A0   FE 28                  CP   "("   
09A2   28 18                  JR   z,block2   
09A4   FE 29                  CP   ")"   
09A6   28 14                  JR   z,block2   
09A8   FE 7B                  CP   "{"   
09AA   28 10                  JR   z,block2   
09AC   FE 7D                  CP   "}"   
09AE   28 0C                  JR   z,block2   
09B0   FE 5B                  CP   "["   
09B2   28 08                  JR   z,block2   
09B4   FE 5D                  CP   "]"   
09B6   28 04                  JR   z,block2   
09B8   FE 60                  CP   "`"   
09BA   20 DE                  JR   nz,block1   
09BC                BLOCK2:      
09BC   14                     INC   d   
09BD   CB 42                  BIT   0,d   ; balanced?
09BF   20 D9                  JR   nz,block1   ; not balanced, get the next element
09C1   FE 29                  CP   ")"   ; Is it the end of the block?
09C3   20 D5                  JR   nz,block1   ; get the next element
09C5   0B                     DEC   bc   
09C6   C3 A0 03               JP   next   
09C9                BLOCKEND:      
09C9   E1                     POP   hl   ; hl = last result
09CA   FD 54                  LD   d,iyh   ; de = BP
09CC   FD 5D                  LD   e,iyl   
09CE   EB                     EX   de,hl   ; hl = BP, de = result
09CF   F9                     LD   sp,hl   ; sp = BP
09D0   E1                     POP   hl   ; hl = old BP
09D1   C1                     POP   bc   ; pop SCP (discard)
09D2   C1                     POP   bc   ; bc = IP
09D3   F9                     LD   sp,hl   ; sp = old BP
09D4   FD 21 00 00            LD   iy,0   ; iy = sp
09D8   FD 39                  ADD   iy,sp   
09DA   D5                     PUSH   de   ; push result
09DB   C3 A0 03               JP   next   
09DE                ARG:         
09DE   03                     INC   bc   ; get next char
09DF   0A                     LD   a,(bc)   
09E0   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09E2   E6 07                  AND   $07   ; mask
09E4   87                     ADD   a,a   ; double
09E5   6F                     LD   l,a   ; hl = offset into args
09E6   26 00                  LD   h,0   
09E8   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
09EB   FD 56 03               LD   d,(iy+3)   
09EE   EB                     EX   de,hl   ; hl = SCP - offset
09EF   B7                     OR   a   
09F0   ED 52                  SBC   hl,de   
09F2   2B                     DEC   hl   ; de = arg
09F3   56                     LD   d,(hl)   
09F4   2B                     DEC   hl   
09F5   5E                     LD   e,(hl)   
09F6   D5                     PUSH   de   ; push arg
09F7   C3 A0 03               JP   next   
09FA                             ; 
09FA                EXIT:        
09FA   50 59                  LD   de,bc   ; address of code after exit opcode
09FC   13                     INC   de   
09FD   D9                     EXX      
09FE   C1                     POP   bc   ; bc = last result
09FF   FD 54                  LD   d,iyh   ; de = BP
0A01   FD 5D                  LD   e,iyl   
0A03   EB                     EX   de,hl   ; hl = BP, de = result
0A04   F9                     LD   sp,hl   ; sp = BP
0A05   D9                     EXX      
0A06   E1                     POP   hl   ; hl = old BP
0A07   C1                     POP   bc   ; pop SCP (discard)
0A08   C1                     POP   bc   ; bc = IP
0A09   F9                     LD   sp,hl   ; sp = old BP
0A0A   D9                     EXX      
0A0B   C5                     PUSH   bc   ; push result
0A0C   D9                     EXX      
0A0D   EB                     EX   de,hl   
0A0E   E9                     JP   (hl)   
0A0F                IN:          
0A0F   E1                     POP   hl   ; hl = string
0A10   D1                     POP   de   ; de = char
0A11                IN1:         
0A11   7E                     LD   a,(hl)   
0A12   23                     INC   hl   
0A13   FE 00                  CP   0   ; is end of string
0A15   28 04                  JR   z,in2   
0A17   BB                     CP   e   
0A18   20 F7                  JR   nz,in1   
0A1A   B7                     OR   a   ; a is never 0, or a resets zero flag
0A1B                IN2:         
0A1B   21 00 00               LD   hl,0   ; hl = result
0A1E   28 01                  JR   z,in3   
0A20   2B                     DEC   hl   ; if nz de = $ffff
0A21                IN3:         
0A21   E5                     PUSH   hl   ; push result
0A22   C3 A0 03               JP   next   
0A25                NEWADD2:      
0A25   C5                     PUSH   bc   ; push IP
0A26   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A29   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A2C   D5                     PUSH   de   ; push SCP
0A2D   FD E5                  PUSH   iy   ; push base pointer
0A2F   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
0A33   FD 39                  ADD   iy,sp   ; 
0A35   FD 56 FF               LD   d,(iy-1)   
0A38   FD 5E FE               LD   e,(iy-2)   
0A3B   FD 66 FD               LD   h,(iy-3)   
0A3E   FD 6E FC               LD   l,(iy-4)   
0A41   19                     ADD   hl,de   ; hl = hl + de
0A42   EB                     EX   de,hl   ; de = result
0A43   E1                     POP   hl   ; hl = old BP
0A44   C1                     POP   bc   ; pop SCP (discard)
0A45   C1                     POP   bc   ; bc = IP
0A46   F9                     LD   sp,hl   ; sp = old BP
0A47   FD 21 00 00            LD   iy,0   
0A4B   FD 39                  ADD   iy,sp   
0A4D   D5                     PUSH   de   ; push result
0A4E   C3 A0 03               JP   next   
0A51                IF:          
0A51   11 00 00               LD   de,0   ; null pointer for else
0A54   18 01                  JR   ife1   
0A56                IFE:         
0A56   D1                     POP   de   ; de = else
0A57                IFE1:        
0A57   E1                     POP   hl   ; hl = then
0A58   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A59   23                     INC   hl   ; check for true
0A5A   7C                     LD   a,h   
0A5B   B5                     OR   l   
0A5C   E1                     POP   hl   ; hl = then
0A5D   28 01                  JR   z,ife2   
0A5F   EB                     EX   de,hl   ; condition = false, hl = else
0A60                IFE2:        
0A60   7C                     LD   a,h   ; check if hl is null
0A61   B5                     OR   l   
0A62   CA A0 03               JP   z,next   
0A65   C5                     PUSH   bc   ; push IP
0A66   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A69   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A6C   D5                     PUSH   de   ; push SCP
0A6D   FD E5                  PUSH   iy   ; push BP
0A6F   FD 21 00 00            LD   iy,0   ; iy = sp
0A73   FD 39                  ADD   iy,sp   
0A75   44 4D                  LD   bc,hl   ; IP = then
0A77   0B                     DEC   bc   
0A78   C3 A0 03               JP   next   
0A7B                SWITCH:      
0A7B   E1                     POP   hl   ; get condition from stack
0A7C   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0A7D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A80   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A83   D5                     PUSH   de   ; push SCP
0A84   FD E5                  PUSH   iy   ; push BP
0A86   FD 21 00 00            LD   iy,0   ; BP = SP
0A8A   FD 39                  ADD   iy,sp   
0A8C   E5                     PUSH   hl   ; push condition as first arg of new frame
0A8D   C3 A0 03               JP   next   
0A90                CASE:        
0A90   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0A93   FD 6E FE               LD   l,(iy-2)   
0A96   23                     INC   hl   ; hl -= 1 index from second arg
0A97   29                     ADD   hl,hl   ; hl *= 2 word offset
0A98   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0A9A   FD 5D                  LD   e,iyl   
0A9C   EB                     EX   de,hl   
0A9D   B7                     OR   a   ; hl = BP - offset
0A9E   ED 52                  SBC   hl,de   
0AA0   54 5D                  LD   de,hl   ; save arg ptr
0AA2   2B                     DEC   hl   ; hl += 2
0AA3   2B                     DEC   hl   
0AA4   B7                     OR   a   ; arg ptr - stack pointer
0AA5   ED 72                  SBC   hl,sp   
0AA7   30 03                  JR   nc,case0   
0AA9   D1                     POP   de   ; pop last arg
0AAA   18 05                  JR   case1   
0AAC                CASE0:       
0AAC   EB                     EX   de,hl   
0AAD   2B                     DEC   hl   ; de = arg
0AAE   56                     LD   d,(hl)   
0AAF   2B                     DEC   hl   
0AB0   5E                     LD   e,(hl)   
0AB1                CASE1:       
0AB1   7A                     LD   a,d   ; is arg == null ? then skip
0AB2   B3                     OR   e   
0AB3   28 09                  JR   z,case2   
0AB5   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0AB8   FD 70 05               LD   (iy+5),b   
0ABB   42 4B                  LD   bc,de   ; IP = arg
0ABD   0B                     DEC   bc   
0ABE                CASE2:       
0ABE   C3 A0 03               JP   next   
0AC1                WORDS:       
0AC1   21 02 00               LD   hl,2   
0AC4   C3 C7 0A               JP   bytes   
0AC7                BYTES:       
0AC7   21 01 00               LD   hl,1   
0ACA                BYTES1:      
0ACA   22 82 1B               LD   (vDataWidth),hl   
0ACD   C3 A0 03               JP   next   
0AD0                ARRAY:       
0AD0   C5                     PUSH   bc   ; create stack frame, push IP
0AD1   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AD4   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AD7   D5                     PUSH   de   ; push SCP
0AD8   FD E5                  PUSH   iy   ; push BP
0ADA   FD 21 00 00            LD   iy,0   ; BP = SP
0ADE   FD 39                  ADD   iy,sp   
0AE0   C3 A0 03               JP   next   
0AE3                ARRAYEND:      
0AE3   FD 54                  LD   d,iyh   ; de = BP
0AE5   FD 5D                  LD   e,iyl   
0AE7   62 6B                  LD   hl,de   ; hl = de
0AE9   B7                     OR   a   
0AEA   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0AEC   C5                     PUSH   bc   ; bc' = IP
0AED   D9                     EXX      
0AEE   C1                     POP   bc   
0AEF   D9                     EXX      
0AF0   44 4D                  LD   bc,hl   ; bc = count
0AF2   2A 8E 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0AF5   71                     LD   (hl),c   ; write count before array data
0AF6   23                     INC   hl   
0AF7   70                     LD   (hl),b   
0AF8   23                     INC   hl   
0AF9   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0AFA   D9                     EXX      
0AFB   E1                     POP   hl   ; hl' = ptr to array (index 0)
0AFC   D9                     EXX      
0AFD   3A 82 1B               LD   a,(vDataWidth)   
0B00   FE 01                  CP   1   ; byte?
0B02   20 0D                  JR   nz,arrayEnd2   
0B04   EB                     EX   de,hl   
0B05                ARRAYEND1:      
0B05   1B                     DEC   de   
0B06   1B                     DEC   de   
0B07   1A                     LD   a,(de)   
0B08   77                     LD   (hl),a   
0B09   23                     INC   hl   
0B0A   0B                     DEC   bc   
0B0B   79                     LD   a,c   
0B0C   B0                     OR   b   
0B0D   20 F6                  JR   nz,arrayEnd1   
0B0F   18 10                  JR   arrayEnd4   
0B11                ARRAYEND2:      
0B11   1B                     DEC   de   
0B12   1A                     LD   a,(de)   
0B13   08                     EX   af,af'   
0B14   1B                     DEC   de   
0B15   1A                     LD   a,(de)   
0B16   77                     LD   (hl),a   
0B17   23                     INC   hl   
0B18   08                     EX   af,af'   
0B19   1A                     LD   a,(de)   
0B1A   77                     LD   (hl),a   
0B1B   23                     INC   hl   
0B1C   0B                     DEC   bc   
0B1D   79                     LD   a,c   
0B1E   B0                     OR   b   
0B1F   20 F0                  JR   nz,arrayEnd2   
0B21                ARRAYEND4:      
0B21   FD 54                  LD   d,iyh   ; de = BP
0B23   FD 5D                  LD   e,iyl   
0B25   EB                     EX   de,hl   ; hl = BP, de = result
0B26   F9                     LD   sp,hl   ; sp = BP
0B27   E1                     POP   hl   ; hl = old BP
0B28   C1                     POP   bc   ; pop SCP (discard)
0B29   C1                     POP   bc   ; bc = IP
0B2A   F9                     LD   sp,hl   ; sp = old BP
0B2B   FD 21 00 00            LD   iy,0   ; iy = sp
0B2F   FD 39                  ADD   iy,sp   
0B31   D9                     EXX      
0B32   E5                     PUSH   hl   
0B33   C5                     PUSH   bc   
0B34   D9                     EXX      
0B35   C1                     POP   bc   
0B36   C3 A0 03               JP   next   
0B39                             ; updateEntry:
0B39                             ;     ld bc,
0B39                             ;     pop hl                          ; pointer to args
0B39                             ;     ld e,(hl)
0B39                             ;     ret
0B39                          ALIGN   $100   
0C00                PEARSONTABLE:      
0C00   2E 07 1A 10 14 20 26 2A 28 37 38 04 00 01 05 29 1B 33 02 30 3B DB   46,7,26,16,20,32,38,42,40,55,56,4,0,1,5,41,27,51,2,48,59   
0C15   03 09 31 13 27 1D 2D 0D 0A 21 08 22 3F 0C 34 12 17 18 0E 3D DB   3,9,49,19,39,29,45,13,10,33,8,34,63,12,52,18,23,24,14,61   
0C29   1F 32 1E 24 0F 2C 3C 2F 19 1C 2B 15 35 06 25 36 11 3E 23 39 DB   31,50,30,36,15,44,60,47,25,28,43,21,53,6,37,54,17,62,35,57   
0C3D   16 0B 3A               DB   22,11,58   
0C40                             ; hash C-string in HL, result in HL
0C40                HASHSTR:      
0C40   01 00 00               LD   bc,0   
0C43                HASHSTR1:      
0C43   7E                     LD   a,(hl)   ; load next char
0C44   23                     INC   hl   
0C45   B7                     OR   a   
0C46   28 33                  JR   z,hashStr5   ; if null exit
0C48   FE 7B                  CP   ("z" + 1)   
0C4A   30 2F                  JR   nc,hashStr5   ; is it > "z"? exit (invalid)
0C4C   FE 61                  CP   "a"   
0C4E   38 04                  JR   c,hashStr2   
0C50   D6 3D                  SUB   ("a" - 36)   
0C52   18 14                  JR   hashStr4   
0C54                HASHSTR2:      
0C54   FE 5B                  CP   ("Z" + 1)   
0C56   30 23                  JR   nc,hashStr5   
0C58   FE 41                  CP   "A"   
0C5A   38 04                  JR   c,hashStr3   
0C5C   D6 37                  SUB   ("A" - 10)   
0C5E   18 08                  JR   hashStr4   
0C60                HASHSTR3:      
0C60   FE 3A                  CP   ("9" + 1)   
0C62   30 17                  JR   nc,hashStr5   
0C64   D6 30                  SUB   "0"   
0C66   38 13                  JR   c,hashStr5   
0C68                HASHSTR4:      
0C68   57                     LD   d,a   ; d = a
0C69   3C                     INC   a   
0C6A   E6 3F                  AND   $3f   
0C6C   08                     EX   af,af'   
0C6D   7A                     LD   a,d   ; a = code a = code + 1
0C6E   A8                     XOR   b   
0C6F   EB                     EX   de,hl   
0C70   26 0C                  LD   h,msb(pearsonTable)   
0C72   6F                     LD   l,a   ; look up A in pearson table
0C73   46                     LD   b,(hl)   ; b = result
0C74   08                     EX   af,af'   ; a = code
0C75   A9                     XOR   c   
0C76   6F                     LD   l,a   ; look up A in pearson table
0C77   4E                     LD   c,(hl)   ; c = result
0C78   EB                     EX   de,hl   
0C79   18 C8                  JR   hashStr1   
0C7B                HASHSTR5:      
0C7B   60 69                  LD   hl,bc   ; hl = hash
0C7D   C9                     RET      
0C7E                             ; offset str -- number
0C7E                HASH:        
0C7E   E1                     POP   hl   ; hl = str pointer
0C7F   C5                     PUSH   bc   
0C80   CD 40 0C               CALL   hashStr   
0C83   C1                     POP   bc   ; hl = old bc, (sp) = result
0C84   E5                     PUSH   hl   
0C85   C3 A0 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                          DS   2   ; a
1B82                VDATAWIDTH:   DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "'Hello1' ha", $1e37
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 8E 08               CALL   init   
4006   CD 30 09               CALL   exec   
4009   27 48 65 6C 6C 6F 31 27 20 68 61 00 .CSTR   "'Hello1' ha"   
4015                          ;*Macro unroll:  expect "'Hello1' ha",$1e37
4015   E1                     POP   HL   
4016   E5                     PUSH   HL   
4017   11 37 1E               LD   DE,$1e37   
401A   B7                     OR   A   
401B   ED 52                  SBC   HL,DE   
401D   7D                     LD   A,L   
401E   B4                     OR   H   
401F   28 56                  JR   Z,expectM_0_2343S43   
4021   CD AF 08               CALL   printStr   
4024   43 6F 64 65 3A 20 27 48 65 6C 6C 6F 31 27 20 68 61 00 .CSTR   "Code: ","'Hello1' ha"   
4036   CD AF 08               CALL   printStr   
4039   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4048   21 37 1E               LD   HL,$1e37   
404B   CD 27 08               CALL   prtdec   
404E   CD AF 08               CALL   printStr   
4051   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
405E   E1                     POP   hl   
405F   E5                     PUSH   hl   
4060   CD 27 08               CALL   prtdec   
4063   E1                     POP   hl   
4064   CD AF 08               CALL   printStr   
4067   20 28 23 00            .CSTR   " (#"   
406B   CD 6F 08               CALL   prthex   
406E   CD AF 08               CALL   printStr   
4071   29 0D 0A 00            .CSTR   ")\r\n"   
4075   76                     HALT      
4076   00                     .CSTR      
4077                EXPECTM_0_2343S43:      
4077   E1                     POP   HL   
4078                          ;*Macro unroll:  test "'hello2' ha", $280e
4078   31 00 1A               LD   SP,DSTACK   
407B   CD 8E 08               CALL   init   
407E   CD 30 09               CALL   exec   
4081   27 68 65 6C 6C 6F 32 27 20 68 61 00 .CSTR   "'hello2' ha"   
408D                          ;*Macro unroll:  expect "'hello2' ha",$280e
408D   E1                     POP   HL   
408E   E5                     PUSH   HL   
408F   11 0E 28               LD   DE,$280e   
4092   B7                     OR   A   
4093   ED 52                  SBC   HL,DE   
4095   7D                     LD   A,L   
4096   B4                     OR   H   
4097   28 56                  JR   Z,expectM_0_2344S43   
4099   CD AF 08               CALL   printStr   
409C   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 32 27 20 68 61 00 .CSTR   "Code: ","'hello2' ha"   
40AE   CD AF 08               CALL   printStr   
40B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C0   21 0E 28               LD   HL,$280e   
40C3   CD 27 08               CALL   prtdec   
40C6   CD AF 08               CALL   printStr   
40C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40D6   E1                     POP   hl   
40D7   E5                     PUSH   hl   
40D8   CD 27 08               CALL   prtdec   
40DB   E1                     POP   hl   
40DC   CD AF 08               CALL   printStr   
40DF   20 28 23 00            .CSTR   " (#"   
40E3   CD 6F 08               CALL   prthex   
40E6   CD AF 08               CALL   printStr   
40E9   29 0D 0A 00            .CSTR   ")\r\n"   
40ED   76                     HALT      
40EE   00                     .CSTR      
40EF                EXPECTM_0_2344S43:      
40EF   E1                     POP   HL   
40F0                             ; test "by [`A` `B` `C`]", 0
40F0                             ; test "by [`A` `B` `C`] 1 ge", "B"
40F0                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
40F0                             ; test "wo [10 20 30] 1 ge", 10
40F0                             ; test "wo [10 20 30] 1 50 set 1 get", 50
40F0                             ; test "1 2 +", 3
40F0                             ; test "4 1 2 +", 3
40F0                             ; test "1", 1
40F0                             ; test "2", 2
40F0                             ; test "``", 0
40F0                             ; test "`a`", $61
40F0                             ; test "`\\``", $60
40F0                             ; test "`b` 'cba' in", -1
40F0                             ; test "`x` 'cba' in", 0
40F0                             ; test "5 0 (1) if", 5
40F0                             ; test "0 (1) (2) ife", 2
40F0                             ; test "5 -1 (1) if", 1
40F0                             ; test "-1 (1) (2) ife", 1
40F0                             ; test "9 sw (1) (5) ca", 5
40F0                             ; test "0 sw (1) ca", 1
40F0                             ; test "1 sw (1) (2) (3) ca", 2
40F0                             ; test "5 -1 (2) if", 2
40F0                             ; test "5 0 (2) if", 5
40F0                             ; test "5 0 (0 (2) if) if", 5
40F0                             ; test "5 0 (-1 (2) if) if", 5
40F0                             ; test "5 -1 (2) if", 2
40F0                             ; test "5 -1 (-1 (2) if) if", 2
40F0                             ; test "(1) ex", 1
40F0                             ; test "2 ($1) ex", 2
40F0                             ; test "2 4 ($2) ex", 4
40F0                             ; test "((1) ex) ex", 1
40F0                             ; test "5 (-1 ($1) if) ex", 5
40F0                             ; test "'A' @", 65
40F0                             ; test "1", 1
40F0                             ; test "0", 0
40F0                             ; test "10", 10
40F0                             ; test "123", 123
40F0                             ; test "$10", $10
40F0                             ; test "$FF", $FF
40F0                             ; test "2 3 =", 0
40F0                             ; test "3 3 =", 1
40F0                             ; test "2 3 <", 1
40F0                             ; test "3 3 <", 0
40F0                             ; test "3 3 >", 0
40F0                             ; test "4 3 >", 1
40F0                             ; test "1 2 +", 3
40F0                             ; test "123 456 +", 123+456
40F0                             ; test "64 128 +", 64+128
40F0                             ; test "5 3 -", 2
40F0                             ; test "3 5 &", 1
40F0                             ; test "3 5 |", 7
40F0                             ; test "2 3 *", 6
40F0                             ; test "1 2 3 + *", 5
40F0                             ; ; test "1 2 3 ' +", 3
40F0                             ; ; test "1_ 2 +",1
40F0                             ; ; test "1_ 1 +",0
40F0                             ; ; call enter
40F0                             ; ;     .cstr "1 3",$22,"+"
40F0                             ; ; expect "1 3 DUP +", 6
40F0                             ; ; test "5 2/'", 2
40F0                             ; ; test "3 5$ -", 2
40F0                             ; ; test "5 2/$ '", 1
40F0                             ; ; test "2 3%++", 7
40F0                             ; ; test "1 2 3~''", 2
40F0                             ; ; test "1 2 3~+*", 8
40F0                             ; ; test "2a!a@",2
40F0                             ; ; test "3x! 1 x@+x! x@", 4
40F0                             ; ; test "3x! 1_ x@+x! x@", 2
40F0                             ; ; test "1{", 2
40F0                             ; ; test "1}", 0
40F0                             ; ; test "2}", 1
40F0                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
40F0                             ; ; test "(2) \\^", 2
40F0                             ; ; test ":X1; X", 1
40F0                             ; ; test ":A100;A", 100
40F0                             ; ; test ":Aa!; 3A a@", 3
40F0                             ; ; test ":Aa!;:Ba@;4AB", 4
40F0                             ; ; test "[]$ '", 0
40F0                             ; ; test "[3]$ '", 1
40F0                             ; ; test "[3]'@", 3
40F0                             ; ; test "[1 2 3]'@", 1
40F0                             ; ; test "[1 2 3]'2+@", 2
40F0                             ; ; test "\\h@[1]''\\h@$-", 2
40F0                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
40F0                             ; ; test "\\[]$ '", 0
40F0                             ; ; test "\\[3]'\\@", 3
40F0                             ; ; test "\\[3]$ '", 1
40F0                             ; ; test "\\[1 2 3]'\\@", 1
40F0                             ; ; test "\\[1 2 3]'1+\\@", 2
40F0                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
40F0                             ; ; test "\\h@\\[1]''\\h@$-", 1
40F0                             ; ; test "\\`A`\\@",65
40F0                             ; ; test "0 0(1+)", 0
40F0                             ; ; test "0 1(1+)", 1
40F0                             ; ; test "0 2(1+)", 2
40F0                             ; ; test "0 1(0(1+))", 0
40F0                             ; ; test "0 1(1(1+))", 1
40F0                             ; ; test "0 2(1(1+))", 2
40F0                             ; ; test "0 2(2(1+))", 4
40F0                             ; ; test "0 1(\\i@+)", 0
40F0                             ; ; test "0 2(\\i@+)", 1
40F0                             ; ; test "0 3(\\i@+)", 3
40F0                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
40F0                             ; ; test "0t! 10(1 t@+t!) t@",10
40F0                             ; ; test "0(100)(200)",200
40F0                             ; ; test "1(100)(200)",100
40F0                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
40F0                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
40F0                             ; ; test ":X10;\\0X", 10
40F0                             ; ; test "2 \\1x! \\1x@", 2
40F0   CD AF 08               CALL   printStr   
40F3   44 6F 6E 65 21 00      .CSTR   "Done!"   
40F9   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 351 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1301 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
NESTINGSTR:         0300 DEFINED AT LINE 308 IN Siena.asm
ETX:                030A DEFINED AT LINE 311 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
ETX1:               0313 DEFINED AT LINE 316 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
START:              0315 DEFINED AT LINE 319 IN Siena.asm
INTERPRET:          032B DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
INTERPRET2:         0335 DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
INTERPRET3:         033D DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
INTERPRET4:         0343 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
WAITCHAR:           0348 DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
MACRO:              0357 DEFINED AT LINE 359 IN Siena.asm
MACRO1:             036E DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
WAITCHAR1:          0374 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
WAITCHAR3:          0382 DEFINED AT LINE 385 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
WAITCHAR4:          0398 DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
NEXT:               03A0 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
                    > USED AT LINE 659 IN Siena.asm
                    > USED AT LINE 673 IN Siena.asm
                    > USED AT LINE 684 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
                    > USED AT LINE 735 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 807 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
                    > USED AT LINE 831 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 855 IN Siena.asm
                    > USED AT LINE 861 IN Siena.asm
                    > USED AT LINE 867 IN Siena.asm
                    > USED AT LINE 872 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
                    > USED AT LINE 1871 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 441 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 443 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 445 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 447 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 449 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 451 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 453 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 455 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 457 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
BLOCK_:             0421 DEFINED AT LINE 464 IN Siena.asm
BLOCKEND_:          0424 DEFINED AT LINE 466 IN Siena.asm
CHAR_:              0427 DEFINED AT LINE 468 IN Siena.asm
ARRAY_:             042A DEFINED AT LINE 470 IN Siena.asm
ARRAYEND_:          042D DEFINED AT LINE 472 IN Siena.asm
A_:                 0430 DEFINED AT LINE 474 IN Siena.asm
C_:                 0433 DEFINED AT LINE 476 IN Siena.asm
D_:                 0436 DEFINED AT LINE 478 IN Siena.asm
E_:                 0439 DEFINED AT LINE 480 IN Siena.asm
F_:                 043C DEFINED AT LINE 482 IN Siena.asm
G_:                 043F DEFINED AT LINE 484 IN Siena.asm
H_:                 0442 DEFINED AT LINE 486 IN Siena.asm
I_:                 0445 DEFINED AT LINE 488 IN Siena.asm
K_:                 0448 DEFINED AT LINE 490 IN Siena.asm
L_:                 044B DEFINED AT LINE 492 IN Siena.asm
M_:                 044E DEFINED AT LINE 494 IN Siena.asm
N_:                 0451 DEFINED AT LINE 496 IN Siena.asm
O_:                 0454 DEFINED AT LINE 498 IN Siena.asm
P_:                 0457 DEFINED AT LINE 500 IN Siena.asm
R_:                 045A DEFINED AT LINE 502 IN Siena.asm
S_:                 045D DEFINED AT LINE 504 IN Siena.asm
U_:                 0460 DEFINED AT LINE 506 IN Siena.asm
W_:                 0463 DEFINED AT LINE 508 IN Siena.asm
X_:                 0466 DEFINED AT LINE 510 IN Siena.asm
AND_:               0469 DEFINED AT LINE 513 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
AND1:               0470 DEFINED AT LINE 521 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
OR_:                0475 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
XOR_:               047E DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
XOR1:               047F DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 550 IN Siena.asm
INV_:               0487 DEFINED AT LINE 548 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
ADD_:               048C DEFINED AT LINE 552 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
KALL_:              0493 DEFINED AT LINE 559 IN Siena.asm
HDOT_:              049D DEFINED AT LINE 567 IN Siena.asm
DROP_:              04A4 DEFINED AT LINE 572 IN Siena.asm
UNDROP_:            04A8 DEFINED AT LINE 576 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
DUP_:               04AD DEFINED AT LINE 581 IN Siena.asm
ETX_:               04B3 DEFINED AT LINE 586 IN Siena.asm
EXIT_:              04B6 DEFINED AT LINE 589 IN Siena.asm
FETCH_:             04B9 DEFINED AT LINE 592 IN Siena.asm
FETCH1:             04BA DEFINED AT LINE 594 IN Siena.asm
KEY_:               04C1 DEFINED AT LINE 602 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
MUL_:               04CB DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
NOP_:               04CE DEFINED AT LINE 611 IN Siena.asm
OVER_:              04D1 DEFINED AT LINE 615 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
ROT_:               04D9 DEFINED AT LINE 623 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
SHL_:               04E1 DEFINED AT LINE 632 IN Siena.asm
SHR_:               04E7 DEFINED AT LINE 639 IN Siena.asm
SHR1:               04E8 DEFINED AT LINE 641 IN Siena.asm
STORE_:             04F0 DEFINED AT LINE 647 IN Siena.asm
SWAP_:              04F8 DEFINED AT LINE 655 IN Siena.asm
NEG_:               04FE DEFINED AT LINE 661 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
SUB_:               0504 DEFINED AT LINE 666 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
SUB2:               0506 DEFINED AT LINE 669 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
EQ_:                050D DEFINED AT LINE 675 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
FALSE_:             0514 DEFINED AT LINE 681 IN Siena.asm
                    > USED AT LINE 697 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
GT_:                051B DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
LT_:                051F DEFINED AT LINE 691 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
LT1:                0521 DEFINED AT LINE 694 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
TRUE_:              0529 DEFINED AT LINE 699 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
GTE_:               0530 DEFINED AT LINE 704 IN Siena.asm
LTE_:               0534 DEFINED AT LINE 708 IN Siena.asm
LTE1:               0536 DEFINED AT LINE 711 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
VAR_:               053F DEFINED AT LINE 718 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
                    > USED AT LINE 912 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 930 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
DIV_:               0547 DEFINED AT LINE 725 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
DIV:                054D DEFINED AT LINE 750 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
DIV1:               0557 DEFINED AT LINE 760 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
DIV2:               0564 DEFINED AT LINE 769 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
DIV3:               0565 DEFINED AT LINE 771 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
DIV4:               056A DEFINED AT LINE 776 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 789 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 791 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 794 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 801 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 809 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 815 IN Siena.asm
PROMPT_:            0623 DEFINED AT LINE 829 IN Siena.asm
INPORT_:            0629 DEFINED AT LINE 834 IN Siena.asm
NEWLN_:             0635 DEFINED AT LINE 844 IN Siena.asm
OUTPORT_:           063B DEFINED AT LINE 848 IN Siena.asm
PRTSTR_:            0645 DEFINED AT LINE 857 IN Siena.asm
PRTSTR:             0645 DEFINED AT LINE 858 IN Siena.asm
RPUSH_:             064C DEFINED AT LINE 864 IN Siena.asm
RPOP_:              0653 DEFINED AT LINE 869 IN Siena.asm
A:                  065A DEFINED AT LINE 878 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 516 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 519 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 840 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
                    > USED AT LINE 1821 IN Siena.asm
                    > USED AT LINE 1823 IN Siena.asm
                    > USED AT LINE 1844 IN Siena.asm
                    > USED AT LINE 1845 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1856 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
                    > USED AT LINE 6
                    > USED AT LINE 8
B:                  066A DEFINED AT LINE 888 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 346 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
                    > USED AT LINE 1853 IN Siena.asm
C:                  0675 DEFINED AT LINE 896 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 775 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 840 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
                    > USED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
                    > USED AT LINE 1857 IN Siena.asm
D:                  0680 DEFINED AT LINE 904 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
                    > USED AT LINE 519 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
                    > USED AT LINE 564 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
                    > USED AT LINE 796 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
                    > USED AT LINE 1844 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
E:                  0690 DEFINED AT LINE 914 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
                    > USED AT LINE 516 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
                    > USED AT LINE 775 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
                    > USED AT LINE 812 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
F:                  06A0 DEFINED AT LINE 924 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
G:                  06AB DEFINED AT LINE 932 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
H:                  06BB DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 432 IN Siena.asm
                    > USED AT LINE 434 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
                    > USED AT LINE 604 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
                    > USED AT LINE 839 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 9
I:                  06C6 DEFINED AT LINE 950 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
I1:                 06E2 DEFINED AT LINE 965 IN Siena.asm
                    > USED AT LINE 958 IN Siena.asm
K:                  06E6 DEFINED AT LINE 969 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
L:                  06F4 DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1856 IN Siena.asm
                    > USED AT LINE 8
                    > USED AT LINE 8
M:                  0704 DEFINED AT LINE 988 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
N:                  0714 DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
O:                  071F DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
P:                  072F DEFINED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
R:                  073A DEFINED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
S:                  0745 DEFINED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
U:                  0764 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
W:                  076F DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
X:                  077F DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
CLOSURE_:           078A DEFINED AT LINE 1081 IN Siena.asm
DEF_:               078A DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
FILTER_:            078A DEFINED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
GET_:               078A DEFINED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
IF_:                078A DEFINED AT LINE 1085 IN Siena.asm
LET_:               078A DEFINED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
MAP_:               078A DEFINED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
PRINT_:             078A DEFINED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
SCAN_:              078A DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
SET_:               078A DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
SHIFT_:             078A DEFINED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
WHILE_:             078A DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
MUL:                078D DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 609 IN Siena.asm
MUL2:               0797 DEFINED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
PROMPT:             07AA DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
PUTSTR0:            07B3 DEFINED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
PUTSTR:             07B7 DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
RPUSH:              07BC DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
RPOP:               07C7 DEFINED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 870 IN Siena.asm
RPOP2:              07D1 DEFINED AT LINE 1156 IN Siena.asm
CRLF:               07D2 DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
NUM:                07D9 DEFINED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
NUM0:               07E2 DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
NUM1:               07E3 DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1193 IN Siena.asm
NUM2:               07FB DEFINED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
NUM3:               0806 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
HEXNUM:             080A DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
HEXNUM1:            080D DEFINED AT LINE 1208 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
HEXNUM2:            0815 DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
PRTDEC:             0827 DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0836 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
PRTDEC1:            0858 DEFINED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
PRTDEC2:            085A DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
PRTDEC3:            086A DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
PRTDEC4:            086B DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
PRTHEX:             086F DEFINED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            087A DEFINED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
PRTHEX3:            0883 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
INIT:               088E DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
PRINTSTR:           08AF DEFINED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 147
LOOKUPREF:          08B6 DEFINED AT LINE 1326 IN Siena.asm
LOOKUPREF0:         08B8 DEFINED AT LINE 1328 IN Siena.asm
LOOKUPREF1:         08BC DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
LOOKUPREF2:         08C2 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
LOOKUPREF3:         08C6 DEFINED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
NESTING:            08D4 DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
NESTING1A:          08DF DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
NESTING1:           08E2 DEFINED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
NESTING2:           08F1 DEFINED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
NESTING3:           08F3 DEFINED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
NESTING4:           08FE DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
STRDEF:             0900 DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
STRDEF1:            0908 DEFINED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
STRDEF2:            090B DEFINED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
CHAR:               091A DEFINED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
CHAR1:              091D DEFINED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
CHAR2:              0929 DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
CHAR3:              092C DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
EXEC:               0930 DEFINED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC1:              0931 DEFINED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
EXEC2:              0935 DEFINED AT LINE 1439 IN Siena.asm
EXEC3:              0943 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
LAMBDA:             0946 DEFINED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
LAMBDA1:            094D DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
LAMBDA2:            0971 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
LAMBDAEND:          0981 DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
BLOCK:              0996 DEFINED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
BLOCK1:             099A DEFINED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
BLOCK2:             09BC DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
BLOCKEND:           09C9 DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
ARG:                09DE DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
EXIT:               09FA DEFINED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 590 IN Siena.asm
IN:                 0A0F DEFINED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 954 IN Siena.asm
IN1:                0A11 DEFINED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
IN2:                0A1B DEFINED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
IN3:                0A21 DEFINED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
NEWADD2:            0A25 DEFINED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
IF:                 0A51 DEFINED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 964 IN Siena.asm
IFE:                0A56 DEFINED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
IFE1:               0A57 DEFINED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
IFE2:               0A60 DEFINED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
SWITCH:             0A7B DEFINED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
CASE:               0A90 DEFINED AT LINE 1677 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
CASE0:              0AAC DEFINED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
CASE1:              0AB1 DEFINED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
CASE2:              0ABE DEFINED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
WORDS:              0AC1 DEFINED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
BYTES:              0AC7 DEFINED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
BYTES1:             0ACA DEFINED AT LINE 1718 IN Siena.asm
ARRAY:              0AD0 DEFINED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
ARRAYEND:           0AE3 DEFINED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
ARRAYEND1:          0B05 DEFINED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
ARRAYEND2:          0B11 DEFINED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
ARRAYEND4:          0B21 DEFINED AT LINE 1786 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
PEARSONTABLE:       0C00 DEFINED AT LINE 1811 IN Siena.asm
HASHSTR:            0C40 DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 1868 IN Siena.asm
HASHSTR1:           0C43 DEFINED AT LINE 1820 IN Siena.asm
                    > USED AT LINE 1859 IN Siena.asm
HASHSTR2:           0C54 DEFINED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 1828 IN Siena.asm
HASHSTR3:           0C60 DEFINED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
HASHSTR4:           0C68 DEFINED AT LINE 1843 IN Siena.asm
                    > USED AT LINE 1830 IN Siena.asm
                    > USED AT LINE 1837 IN Siena.asm
HASHSTR5:           0C7B DEFINED AT LINE 1860 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
                    > USED AT LINE 1833 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
HASH:               0C7E DEFINED AT LINE 1865 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1305 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 361 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1307 IN Siena.asm
VDATAWIDTH:         1B82 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2343S43:  4077 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2344S43:  40EF DEFINED AT LINE 34
                    > USED AT LINE 10
