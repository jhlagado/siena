0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 24 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      
0220   B7                     DB   lsb(nop_)   ;    SP
0221   4F                     DB   lsb(inv_)   ;    !
0222   B7                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   9C                     DB   lsb(mod_)   ;    %
0226   32                     DB   lsb(and_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   1D                     DB   lsb(block_)   ;    (
0229   20                     DB   lsb(blockend_)   ;    )
022A   61                     DB   lsb(mul_)   ;    *
022B   54                     DB   lsb(add_)   ;    +
022C   B7                     DB   lsb(nop_)   ;    ,
022D   64                     DB   lsb(sub_)   ;    -
022E   12                     DB   lsb(dot_)   ;    .
022F   A8                     DB   lsb(div_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   2F                     DB   lsb(symbol_)   ;    :
023B   B7                     DB   lsb(nop_)   ;    ;
023C   7D                     DB   lsb(lt_)   ;    <
023D   6C                     DB   lsb(eq_)   ;    =
023E   79                     DB   lsb(gt_)   ;    >
023F   B7                     DB   lsb(nop_)   ;    ?
0240   B7                     DB   lsb(nop_)   ;    @
0241   2C                     DB   lsb(ident_)   ;    A
0242   2C                     DB   lsb(ident_)   ;    B
0243   2C                     DB   lsb(ident_)   ;    C
0244   2C                     DB   lsb(ident_)   ;    D
0245   2C                     DB   lsb(ident_)   ;    E
0246   2C                     DB   lsb(ident_)   ;    F
0247   2C                     DB   lsb(ident_)   ;    G
0248   2C                     DB   lsb(ident_)   ;    h
0249   2C                     DB   lsb(ident_)   ;    I
024A   2C                     DB   lsb(ident_)   ;    J
024B   2C                     DB   lsb(ident_)   ;    K
024C   2C                     DB   lsb(ident_)   ;    L
024D   2C                     DB   lsb(ident_)   ;    M
024E   2C                     DB   lsb(ident_)   ;    N
024F   2C                     DB   lsb(ident_)   ;    O
0250   2C                     DB   lsb(ident_)   ;    p
0251   2C                     DB   lsb(ident_)   ;    Q
0252   2C                     DB   lsb(ident_)   ;    R
0253   2C                     DB   lsb(ident_)   ;    S
0254   2C                     DB   lsb(ident_)   ;    T
0255   2C                     DB   lsb(ident_)   ;    U
0256   2C                     DB   lsb(ident_)   ;    V
0257   2C                     DB   lsb(ident_)   ;    W
0258   2C                     DB   lsb(ident_)   ;    X
0259   2C                     DB   lsb(ident_)   ;    Y
025A   2C                     DB   lsb(ident_)   ;    Z
025B   26                     DB   lsb(array_)   ;    [
025C   B7                     DB   lsb(nop_)   ;    \
025D   29                     DB   lsb(arrayEnd_)   ;    ]
025E   46                     DB   lsb(xor_)   ;    ^
025F   2C                     DB   lsb(ident_)   ;    _
0260   23                     DB   lsb(char_)   ;    `    	
0261   2C                     DB   lsb(ident_)   ;    a
0262   2C                     DB   lsb(ident_)   ;    b
0263   2C                     DB   lsb(ident_)   ;    c
0264   2C                     DB   lsb(ident_)   ;    d
0265   2C                     DB   lsb(ident_)   ;    e
0266   2C                     DB   lsb(ident_)   ;    f
0267   2C                     DB   lsb(ident_)   ;    g
0268   2C                     DB   lsb(ident_)   ;    h
0269   2C                     DB   lsb(ident_)   ;    i
026A   2C                     DB   lsb(ident_)   ;    j
026B   2C                     DB   lsb(ident_)   ;    k
026C   2C                     DB   lsb(ident_)   ;    l
026D   2C                     DB   lsb(ident_)   ;    m
026E   2C                     DB   lsb(ident_)   ;    n
026F   2C                     DB   lsb(ident_)   ;    o
0270   2C                     DB   lsb(ident_)   ;    p
0271   2C                     DB   lsb(ident_)   ;    q
0272   2C                     DB   lsb(ident_)   ;    r
0273   2C                     DB   lsb(ident_)   ;    s
0274   2C                     DB   lsb(ident_)   ;    t
0275   2C                     DB   lsb(ident_)   ;    u
0276   2C                     DB   lsb(ident_)   ;    v
0277   2C                     DB   lsb(ident_)   ;    w
0278   2C                     DB   lsb(ident_)   ;    x
0279   2C                     DB   lsb(ident_)   ;    y
027A   2C                     DB   lsb(ident_)   ;    z
027B   0C                     DB   lsb(lambda_)   ;    {
027C   3D                     DB   lsb(or_)   ;    |
027D   0F                     DB   lsb(lambdaEnd_)   ;    }
027E   B7                     DB   lsb(nop_)   ;    ~
027F   B7                     DB   lsb(nop_)   ;    DEL	
0280                START:       
0280   31 00 1A               LD   sp,DSTACK   ; start of Siena
0283   CD 24 09               CALL   init   ; setups
0286   CD C0 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0289   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0296                INTERPRET:      
0296   CD F3 08               CALL   prompt   
0299   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
029C   ED 43 82 1B            LD   (vTIBPtr),bc   
02A0                INTERPRET2:      ; calc nesting (a macro might have changed it)
02A0   1E 00                  LD   e,0   ; initilize nesting value
02A2   C5                     PUSH   bc   ; save offset into TIB,
02A3                             ; bc is also the count of chars in TIB
02A3   21 00 18               LD   hl,TIB   ; hl is start of TIB
02A6   18 06                  JR   interpret4   
02A8                INTERPRET3:      
02A8   7E                     LD   a,(hl)   ; a = char in TIB
02A9   23                     INC   hl   ; inc pointer into TIB
02AA   0B                     DEC   bc   ; dec count of chars in TIB
02AB   CD C7 08               CALL   nesting   ; update nesting value
02AE                INTERPRET4:      
02AE   79                     LD   a,c   ; is count zero?
02AF   B0                     OR   b   
02B0   20 F6                  JR   nz,interpret3   ; if not loop
02B2   C1                     POP   bc   ; restore offset into TIB
02B3                WAITCHAR:      
02B3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02B6   FE 20                  CP   $20   ; compare to space
02B8   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02BA   FE 00                  CP   $0   ; is it end of string? null end of string
02BC   28 2A                  JR   z,waitchar4   
02BE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02C0   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02C2                MACRO:       
02C2                             ;     ld (vTIBPtr),bc
02C2                             ;     ld hl,ctrlCodes
02C2                             ;     add a,l			            ; look up key of macros
02C2                             ;     ld l,a
02C2                             ;     ld e,(hl)
02C2                             ;     ld a,e
02C2                             ;     or a
02C2                             ;     jr z,macro1
02C2                             ;     ld d,msb(macros)
02C2                             ;     push de
02C2                             ;     call exec		            ; Siena exec_ operation and jump to it
02C2                             ;     .cstr "ca"
02C2                             ; macro1:
02C2                             ;     ld bc,(vTIBPtr)
02C2   18 DC                  JR   interpret2   
02C4                WAITCHAR1:      
02C4   21 00 18               LD   hl,TIB   
02C7   09                     ADD   hl,bc   
02C8   77                     LD   (hl),a   ; store the character in textbuf
02C9   03                     INC   bc   
02CA   CD 85 00               CALL   putchar   ; echo character to screen
02CD   CD C7 08               CALL   nesting   
02D0   18 E1                  JR   waitchar   ; wait for next character
02D2                WAITCHAR3:      
02D2   21 00 18               LD   hl,TIB   
02D5   09                     ADD   hl,bc   
02D6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02D8   23                     INC   hl   
02D9   36 0A                  LD   (hl),"\n"   
02DB   23                     INC   hl   
02DC   03                     INC   bc   
02DD   03                     INC   bc   
02DE   CD 05 09               CALL   crlf   ; echo character to screen
02E1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02E2   B7                     OR   a   
02E3   20 CE                  JR   nz,waitchar   
02E5   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02E7   03                     INC   bc   
02E8                WAITCHAR4:      
02E8   ED 43 82 1B            LD   (vTIBPtr),bc   
02EC   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02EF   0B                     DEC   bc   
02F0                NEXT:        
02F0   03                     INC   bc   ; Increment the IP
02F1   0A                     LD   a,(bc)   ; Get the next character and dispatch
02F2   FE 21                  CP   " " + 1   ; whitespace?
02F4   38 07                  JR   c,next1   
02F6   6F                     LD   l,a   ; index into table
02F7   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
02F9   6E                     LD   l,(hl)   ; get low jump address
02FA   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
02FC   E9                     JP   (hl)   ; Jump to routine
02FD                NEXT1:       
02FD   FE 00                  CP   NULL   ; is it end of text?
02FF   28 0F                  JR   z,exit   
0301   FE 03                  CP   ENDTEXT   ; is it end of text?
0303   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0305                ETX:         
0305   21 00 E6               LD   hl,-DSTACK   
0308   39                     ADD   hl,sp   
0309   30 03                  JR   nc,etx1   
030B   31 00 1A               LD   sp,DSTACK   
030E                ETX1:        
030E   18 86                  JR   interpret   
0310                EXIT:        
0310   50 59                  LD   de,bc   ; address of code after exit opcode
0312   13                     INC   de   
0313   D9                     EXX      
0314   C1                     POP   bc   ; bc = last result
0315   FD 54                  LD   d,iyh   ; de = BP
0317   FD 5D                  LD   e,iyl   
0319   EB                     EX   de,hl   ; hl = BP
031A   F9                     LD   sp,hl   ; sp = BP
031B   D9                     EXX      
031C   E1                     POP   hl   ; hl = old BP
031D   C1                     POP   bc   ; pop SCP (discard)
031E   C1                     POP   bc   ; bc = IP
031F   F9                     LD   sp,hl   ; sp = old BP
0320   D9                     EXX      
0321   C5                     PUSH   bc   ; push result
0322   D9                     EXX      
0323   EB                     EX   de,hl   
0324   E9                     JP   (hl)   
0325                             ; **********************************************************************			
0325                             ; Page 4 primitive routines
0325                             ; **********************************************************************
0325                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 F3 04               JP   num   
0403                HEXNUM_:      
0403   C3 23 05               JP   hexnum   
0406                ARG_:        
0406   C3 17 06               JP   arg   
0409                STRDEF_:      
0409   C3 40 05               JP   strDef   
040C                LAMBDA_:      
040C   C3 83 05               JP   lambda   
040F                LAMBDAEND_:      
040F   C3 BD 05               JP   lambdaEnd   
0412                DOT_:        
0412   E1                     POP   hl   
0413   CD 59 08               CALL   prtdec   
0416                DOT2:        
0416   3E 20                  LD   a," "   
0418   CD 85 00               CALL   putchar   
041B   DD E9                  JP   (ix)   
041D                BLOCK_:      
041D   C3 D1 05               JP   block   
0420                BLOCKEND_:      
0420   C3 03 06               JP   blockend   
0423                CHAR_:       
0423   C3 59 05               JP   char   
0426                ARRAY_:      
0426   C3 AB 06               JP   array   
0429                ARRAYEND_:      
0429   C3 BD 06               JP   arrayEnd   
042C                IDENT_:      
042C   C3 66 07               JP   ident   
042F                SYMBOL_:      
042F   C3 3F 07               JP   symbol   
0432                AND_:        
0432   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0433   E1                     POP   hl   
0434   7B                     LD   a,e   
0435   A5                     AND   l   
0436   6F                     LD   l,a   
0437   7A                     LD   a,d   
0438   A4                     AND   h   
0439                AND1:        
0439   67                     LD   h,a   
043A   E5                     PUSH   hl   
043B   DD E9                  JP   (ix)   
043D                OR_:         
043D   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
043E   E1                     POP   hl   
043F   7B                     LD   a,e   
0440   B5                     OR   l   
0441   6F                     LD   l,a   
0442   7A                     LD   a,d   
0443   B4                     OR   h   
0444   18 F3                  JR   and1   
0446                XOR_:        
0446   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0447                XOR1:        
0447   E1                     POP   hl   
0448   7B                     LD   a,e   
0449   AD                     XOR   l   
044A   6F                     LD   l,a   
044B   7A                     LD   a,d   
044C   AC                     XOR   h   
044D   18 EA                  JR   and1   
044F                INV_:        ; Bitwise INVert the top member of the stack
044F   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0452   18 F3                  JR   xor1   
0454                ADD_:        ; add the top 2 members of the stack
0454   D1                     POP   de   
0455   E1                     POP   hl   
0456   19                     ADD   hl,de   
0457   E5                     PUSH   hl   
0458   DD E9                  JP   (ix)   
045A                HDOT_:       ; print hexadecimal
045A   E1                     POP   hl   
045B   CD A1 08               CALL   prthex   
045E   C3 16 04               JP   dot2   
0461                MUL_:        
0461   C3 D7 04               JP   mul   
0464                SUB_:        ; Subtract the value 2nd on stack from top of stack
0464   D1                     POP   de   
0465   E1                     POP   hl   ; Entry point for INVert
0466                SUB2:        
0466   B7                     OR   a   ; Entry point for NEGate
0467   ED 52                  SBC   hl,de   
0469   E5                     PUSH   hl   
046A   DD E9                  JP   (ix)   
046C                EQ_:         
046C   E1                     POP   hl   
046D   D1                     POP   de   
046E   B7                     OR   a   ; reset the carry flag
046F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0471   28 14                  JR   z,true_   
0473                FALSE_:      
0473   21 00 00               LD   hl,0   
0476   E5                     PUSH   hl   
0477   DD E9                  JP   (ix)   
0479                GT_:         
0479   D1                     POP   de   
047A   E1                     POP   hl   
047B   18 02                  JR   lt1   
047D                LT_:         
047D   E1                     POP   hl   
047E   D1                     POP   de   
047F                LT1:         
047F   B7                     OR   a   ; reset the carry flag
0480   ED 52                  SBC   hl,de   
0482   28 EF                  JR   z,false_   
0484   FA 73 04               JP   m,false_   
0487                TRUE_:       
0487   21 01 00               LD   hl,1   
048A   E5                     PUSH   hl   
048B   DD E9                  JP   (ix)   
048D                GTE_:        
048D   D1                     POP   de   
048E   E1                     POP   hl   
048F   18 02                  JR   lte1   
0491                LTE_:        
0491   E1                     POP   hl   
0492   D1                     POP   de   
0493                LTE1:        
0493   B7                     OR   a   ; reset the carry flag
0494   ED 52                  SBC   hl,de   
0496   FA 73 04               JP   m,false_   
0499   C3 FF FF               JP   true   
049C                MOD_:        
049C   D1                     POP   de   ; get first value
049D   E1                     POP   hl   ; get 2nd value
049E   C5                     PUSH   bc   ; preserve the IP
049F   44 4D                  LD   bc,hl   
04A1   CD 16 08               CALL   divide   
04A4   C1                     POP   bc   
04A5   E5                     PUSH   hl   ; push remainder
04A6   DD E9                  JP   (ix)   
04A8                DIV_:        
04A8   D1                     POP   de   ; get first value
04A9   E1                     POP   hl   ; get 2nd value
04AA   C5                     PUSH   bc   ; preserve the IP
04AB   44 4D                  LD   bc,hl   
04AD   CD 16 08               CALL   divide   
04B0   22 7E 1B               LD   (vFrac),hl   
04B3   C1                     POP   bc   
04B4   D5                     PUSH   de   ; push result
04B5   DD E9                  JP   (ix)   
04B7                NOP_:        
04B7   DD E9                  JP   (ix)   
04B9                             ; -------------------------------------------------------------------------------
04B9                KEY:         
04B9   CD 81 00               CALL   getchar   
04BC   26 00                  LD   h,0   
04BE   6F                     LD   l,a   
04BF   E5                     PUSH   hl   
04C0   DD E9                  JP   (ix)   
04C2                             ; fetch:                         ; Fetch the value from the address placed on the top of the stack
04C2                             ;     pop hl
04C2                             ; fetch1:
04C2                             ;     ld e,(hl)
04C2                             ;     inc hl
04C2                             ;     ld d,(hl)
04C2                             ;     push de
04C2                             ;     jp (ix)
04C2                             ; store:                         ; Store the value at the address placed on the top of the stack
04C2                             ;     pop hl
04C2                             ;     pop de
04C2                             ;     ld (hl),e
04C2                             ;     inc hl
04C2                             ;     ld (hl),d
04C2                             ;     jp (ix)
04C2                             ; cFetch:
04C2                             ;     pop hl
04C2                             ;     ld d,0
04C2                             ;     ld e,(hl)
04C2                             ;     push    de
04C2                             ;     jp (ix)
04C2                             ; cStore:	
04C2                             ;     pop    hl
04C2                             ;     pop    de
04C2                             ;     ld     (hl),e
04C2                             ;     jp (ix)
04C2                NEG:         
04C2   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04C5   D1                     POP   de   
04C6   18 9E                  JR   sub2   ; use the SUBtract routine
04C8                             ; comment:
04C8                             ;     inc bc        ; point to next char
04C8                             ;     ld a,(bc)
04C8                             ;     cp "\r"       ; terminate at cr
04C8                             ;     jr nz,comment
04C8                             ;     dec bc
04C8                             ;     jp  next
04C8                             ; emit:
04C8                             ;     pop hl
04C8                             ;     ld a,l
04C8                             ;     call putchar
04C8                             ;     jp (ix)
04C8                             ; prompt:
04C8                             ;     call prompt
04C8                             ;     jp (ix)
04C8                             ; inPort:			    ; \<
04C8                             ;     pop hl
04C8                             ;     ld a,c
04C8                             ;     ld c,l
04C8                             ;     in l,(c)
04C8                             ;     ld h,0
04C8                             ;     ld c,a
04C8                             ;     push hl
04C8                             ;     jp (ix)
04C8                             ; newln:
04C8                             ;     call crlf
04C8                             ;     jp (ix)
04C8                             ; outPort:
04C8                             ;     pop hl
04C8                             ;     ld e,c
04C8                             ;     ld c,l
04C8                             ;     pop hl
04C8                             ;     out (c),l
04C8                             ;     ld c,e
04C8                             ;     jp (ix)
04C8                             ; prtstr:
04C8                             ;     pop hl
04C8                             ;     call putStr
04C8                             ;     jp (ix)
04C8                GET:         
04C8                SET1:        
04C8                LET:         
04C8                WHILE:       
04C8                FILTER:      
04C8                MAP:         
04C8                SCAN:        
04C8   DD E9                  JP   (ix)   
04CA                             ;*******************************************************************
04CA                             ; Subroutines
04CA                             ;*******************************************************************
04CA                SHL:         
04CA   E1                     POP   hl   ; Duplicate the top member of the stack
04CB   29                     ADD   hl,hl   
04CC   E5                     PUSH   hl   ; shift left fallthrough into add_
04CD   DD E9                  JP   (ix)   
04CF                SHR:         
04CF   E1                     POP   hl   ; Get the top member of the stack
04D0                SHR1:        
04D0   CB 3C                  SRL   h   
04D2   CB 1D                  RR   l   
04D4   E5                     PUSH   hl   
04D5   DD E9                  JP   (ix)   
04D7                MUL:         ;=19
04D7   D1                     POP   de   ; get first value
04D8   E1                     POP   hl   
04D9   C5                     PUSH   bc   ; Preserve the IP
04DA   44                     LD   b,h   ; bc = 2nd value
04DB   4D                     LD   c,l   
04DC   21 00 00               LD   hl,0   
04DF   3E 10                  LD   a,16   
04E1                MUL2:        
04E1   29                     ADD   hl,hl   
04E2   CB 13                  RL   e   
04E4   CB 12                  RL   d   
04E6   30 04                  JR   nc,$+6   
04E8   09                     ADD   hl,bc   
04E9   30 01                  JR   nc,$+3   
04EB   13                     INC   de   
04EC   3D                     DEC   a   
04ED   20 F2                  JR   nz,mul2   
04EF   C1                     POP   bc   ; Restore the IP
04F0   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
04F1   DD E9                  JP   (ix)   
04F3                NUM:         
04F3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
04F6   0A                     LD   a,(bc)   ; Get numeral or -
04F7   FE 2D                  CP   "-"   
04F9   20 01                  JR   nz,num0   
04FB   03                     INC   bc   ; move to next char, no flags affected
04FC                NUM0:        
04FC   08                     EX   af,af'   ; save zero flag = 0 for later
04FD                NUM1:        
04FD   0A                     LD   a,(bc)   ; read digit
04FE   D6 30                  SUB   "0"   ; less than 0?
0500   38 13                  JR   c,num2   ; not a digit, exit loop
0502   FE 0A                  CP   10   ; greater that 9?
0504   30 0F                  JR   nc,num2   ; not a digit, exit loop
0506   03                     INC   bc   ; inc IP
0507   54 5D                  LD   de,hl   ; multiply hl * 10
0509   29                     ADD   hl,hl   
050A   29                     ADD   hl,hl   
050B   19                     ADD   hl,de   
050C   29                     ADD   hl,hl   
050D   85                     ADD   a,l   ; add digit in a to hl
050E   6F                     LD   l,a   
050F   3E 00                  LD   a,0   
0511   8C                     ADC   a,h   
0512   67                     LD   h,a   
0513   18 E8                  JR   num1   
0515                NUM2:        
0515   0B                     DEC   bc   
0516   08                     EX   af,af'   ; restore zero flag
0517   20 07                  JR   nz,num3   
0519   EB                     EX   de,hl   ; negate the value of hl
051A   21 00 00               LD   hl,0   
051D   B7                     OR   a   ; jump to sub2
051E   ED 52                  SBC   hl,de   
0520                NUM3:        
0520   E5                     PUSH   hl   ; Put the number on the stack
0521   DD E9                  JP   (ix)   ; and process the next character
0523                HEXNUM:      ; 
0523   21 00 00               LD   hl,0   ; Clear hl to accept the number
0526                HEXNUM1:      
0526   03                     INC   bc   
0527   0A                     LD   a,(bc)   ; Get the character which is a numeral
0528   CB 77                  BIT   6,a   ; is it uppercase alpha?
052A   28 02                  JR   z,hexnum2   ; no a decimal
052C   D6 07                  SUB   7   ; sub 7  to make $a - $F
052E                HEXNUM2:      
052E   D6 30                  SUB   $30   ; Form decimal digit
0530   DA 15 05               JP   c,num2   
0533   FE 10                  CP   $0F+1   
0535   D2 15 05               JP   nc,num2   
0538   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0539   29                     ADD   hl,hl   ; 4X
053A   29                     ADD   hl,hl   ; 8X
053B   29                     ADD   hl,hl   ; 16X
053C   85                     ADD   a,l   ; add into bottom of hl
053D   6F                     LD   l,a   ; 
053E   18 E6                  JR   hexnum1   
0540                             ; 
0540                STRDEF:      
0540   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0544   D5                     PUSH   de   ; save start of string
0545   03                     INC   bc   ; point to next char
0546   18 03                  JR   strDef2   
0548                STRDEF1:      
0548   12                     LD   (de),a   
0549   13                     INC   de   ; increase count
054A   03                     INC   bc   ; point to next char
054B                STRDEF2:      
054B   0A                     LD   a,(bc)   
054C   FE 27                  CP   "'"   ; ' is the string terminator
054E   20 F8                  JR   nz,strDef1   
0550   AF                     XOR   a   ; write null to terminate string
0551   12                     LD   (de),a   
0552   13                     INC   de   
0553   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0557   DD E9                  JP   (ix)   
0559                CHAR:        
0559   21 00 00               LD   hl,0   ; if `` is empty
055C                CHAR1:       
055C   03                     INC   bc   ; point to next char
055D   0A                     LD   a,(bc)   
055E   FE 60                  CP   "`"   ; ` is the string terminator
0560   28 09                  JR   z,char3   
0562   FE 5C                  CP   $5c   ; \ is the escape
0564   20 02                  JR   nz,char2   
0566   03                     INC   bc   
0567   0A                     LD   a,(bc)   
0568                CHAR2:       
0568   6F                     LD   l,a   
0569   18 F1                  JR   char1   
056B                CHAR3:       
056B   E5                     PUSH   hl   
056C                             ; dec bc
056C   DD E9                  JP   (ix)   
056E                EXEC:        ; execute lambda at pointer
056E   E1                     POP   hl   ; hl = pointer to lambda
056F                EXEC1:       
056F   7C                     LD   a,h   ; skip if destination address is null
0570   B5                     OR   l   
0571   28 0E                  JR   z,exec3   
0573                EXEC2:       
0573   C5                     PUSH   bc   ; push IP
0574   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0576   FD E5                  PUSH   iy   ; push BP
0578   FD 21 00 00            LD   iy,0   ; BP = SP
057C   FD 39                  ADD   iy,sp   
057E   44 4D                  LD   bc,hl   ; IP = pointer to lambda
0580   0B                     DEC   bc   ; dec to prepare for next routine
0581                EXEC3:       
0581   DD E9                  JP   (ix)   
0583                LAMBDA:      
0583   03                     INC   bc   
0584   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
0587   E5                     PUSH   hl   
0588   16 01                  LD   d,1   ; nesting: count first parenthesis
058A                LAMBDA1:      ; Skip to end of definition
058A   0A                     LD   a,(bc)   ; Get the next character
058B   03                     INC   bc   ; Point to next character
058C   77                     LD   (hl),a   
058D   23                     INC   hl   
058E   FE 27                  CP   "'"   
0590   28 1C                  JR   z,lambda2   
0592   FE 28                  CP   "("   
0594   28 18                  JR   z,lambda2   
0596   FE 29                  CP   ")"   
0598   28 14                  JR   z,lambda2   
059A   FE 7B                  CP   "{"   
059C   28 10                  JR   z,lambda2   
059E   FE 7D                  CP   "}"   ; Is it the end of the definition?
05A0   28 0C                  JR   z,lambda2   
05A2   FE 5B                  CP   "["   
05A4   28 08                  JR   z,lambda2   
05A6   FE 5D                  CP   "]"   
05A8   28 04                  JR   z,lambda2   
05AA   FE 60                  CP   "`"   
05AC   20 DC                  JR   nz,lambda1   
05AE                LAMBDA2:      
05AE   14                     INC   d   
05AF   CB 42                  BIT   0,d   ; balanced?
05B1   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
05B3   FE 7D                  CP   "}"   ; Is it the end of the definition?
05B5   20 D3                  JR   nz,lambda1   ; get the next element
05B7   0B                     DEC   bc   
05B8   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
05BB   DD E9                  JP   (ix)   
05BD                LAMBDAEND:      
05BD   E1                     POP   hl   ; hl = last result
05BE   FD 54                  LD   d,iyh   ; de = BP
05C0   FD 5D                  LD   e,iyl   
05C2   EB                     EX   de,hl   ; hl = BP, de = result
05C3   F9                     LD   sp,hl   ; sp = BP
05C4   E1                     POP   hl   ; hl = old BP
05C5   C1                     POP   bc   ; pop scope ptr (discard)
05C6   C1                     POP   bc   ; bc = IP
05C7   F9                     LD   sp,hl   ; sp = old BP
05C8   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
05CC   FD 39                  ADD   iy,sp   
05CE   D5                     PUSH   de   ; push result
05CF   DD E9                  JP   (ix)   
05D1                BLOCK:       
05D1   03                     INC   bc   
05D2   C5                     PUSH   bc   ; return first opcode of block
05D3   16 01                  LD   d,1   ; nesting: count first parenthesis
05D5                BLOCK1:      ; Skip to end of definition
05D5   0A                     LD   a,(bc)   ; Get the next character
05D6   03                     INC   bc   ; Point to next character
05D7   FE 27                  CP   "'"   
05D9   28 1C                  JR   z,block2   
05DB   FE 28                  CP   "("   
05DD   28 18                  JR   z,block2   
05DF   FE 29                  CP   ")"   
05E1   28 14                  JR   z,block2   
05E3   FE 7B                  CP   "{"   
05E5   28 10                  JR   z,block2   
05E7   FE 7D                  CP   "}"   
05E9   28 0C                  JR   z,block2   
05EB   FE 5B                  CP   "["   
05ED   28 08                  JR   z,block2   
05EF   FE 5D                  CP   "]"   
05F1   28 04                  JR   z,block2   
05F3   FE 60                  CP   "`"   
05F5   20 DE                  JR   nz,block1   
05F7                BLOCK2:      
05F7   14                     INC   d   
05F8   CB 42                  BIT   0,d   ; balanced?
05FA   20 D9                  JR   nz,block1   ; not balanced, get the next element
05FC   FE 29                  CP   ")"   ; Is it the end of the block?
05FE   20 D5                  JR   nz,block1   ; get the next element
0600   0B                     DEC   bc   
0601   DD E9                  JP   (ix)   
0603                BLOCKEND:      
0603   E1                     POP   hl   ; hl = last result
0604   FD 54                  LD   d,iyh   ; de = BP
0606   FD 5D                  LD   e,iyl   
0608   EB                     EX   de,hl   ; hl = BP, de = result
0609   F9                     LD   sp,hl   ; sp = BP
060A   E1                     POP   hl   ; hl = old BP
060B   C1                     POP   bc   ; pop SCP (discard)
060C   C1                     POP   bc   ; bc = IP
060D   F9                     LD   sp,hl   ; sp = old BP
060E   FD 21 00 00            LD   iy,0   ; iy = sp
0612   FD 39                  ADD   iy,sp   
0614   D5                     PUSH   de   ; push result
0615   DD E9                  JP   (ix)   
0617                ARG:         
0617   03                     INC   bc   ; get next char
0618   0A                     LD   a,(bc)   
0619   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
061B   E6 07                  AND   $07   ; mask
061D   87                     ADD   a,a   ; double
061E   6F                     LD   l,a   ; hl = offset into args
061F   26 00                  LD   h,0   
0621   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0624   FD 56 03               LD   d,(iy+3)   
0627   EB                     EX   de,hl   ; hl = SCP - offset
0628   B7                     OR   a   
0629   ED 52                  SBC   hl,de   
062B   2B                     DEC   hl   ; de = arg
062C   56                     LD   d,(hl)   
062D   2B                     DEC   hl   
062E   5E                     LD   e,(hl)   
062F   D5                     PUSH   de   ; push arg
0630   DD E9                  JP   (ix)   
0632                             ; 
0632                             ; in:
0632                             ;     pop hl                      ; hl = string
0632                             ;     pop de                      ; de = char
0632                             ; in1:
0632                             ;     ld a,(hl)
0632                             ;     inc hl
0632                             ;     cp 0                        ; is end of string
0632                             ;     jr z,in2
0632                             ;     cp e
0632                             ;     jr nz,in1
0632                             ;     or a                        ; a is never 0, or a resets zero flag
0632                             ; in2:
0632                             ;     ld hl,0                     ; hl = result
0632                             ;     jr z,in3
0632                             ;     dec hl                      ; if nz de = $ffff
0632                             ; in3:
0632                             ;     push hl                     ; push result
0632                             ;     jp (ix)
0632                             ; newAdd2:
0632                             ;     push bc                     ; push IP
0632                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0632                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0632                             ;     push de                     ; push SCP
0632                             ;     push iy                     ; push base pointer
0632                             ;     ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0632                             ;     add iy,sp                   ;
0632                             ;     ld d,(iy-1)
0632                             ;     ld e,(iy-2)
0632                             ;     ld h,(iy-3)
0632                             ;     ld l,(iy-4)
0632                             ;     add hl,de                   ; hl = hl + de
0632                             ;     ex de,hl                    ; de = result
0632                             ;     pop hl                      ; hl = old BP
0632                             ;     pop bc                      ; pop SCP (discard)
0632                             ;     pop bc                      ; bc = IP
0632                             ;     ld sp,hl                    ; sp = old BP
0632                             ;     ld iy,0
0632                             ;     add iy,sp
0632                             ;     push de                     ; push result
0632                             ;     jp (ix)
0632                IF:          
0632   11 00 00               LD   de,0   ; null pointer for else
0635   18 01                  JR   ifte1   
0637                IFTE:        
0637   D1                     POP   de   ; de = else
0638                IFTE1:       
0638   E1                     POP   hl   ; hl = then
0639   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
063A   23                     INC   hl   ; check for true
063B   7C                     LD   a,h   
063C   B5                     OR   l   
063D   E1                     POP   hl   ; hl = then
063E   28 01                  JR   z,ifte2   
0640   EB                     EX   de,hl   ; condition = false, hl = else
0641                IFTE2:       
0641   7C                     LD   a,h   ; check if hl is null
0642   B5                     OR   l   
0643   28 13                  JR   z,ifte3   
0645   C5                     PUSH   bc   ; push IP
0646   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0649   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
064C   D5                     PUSH   de   ; push SCP
064D   FD E5                  PUSH   iy   ; push BP
064F   FD 21 00 00            LD   iy,0   ; iy = sp
0653   FD 39                  ADD   iy,sp   
0655   44 4D                  LD   bc,hl   ; IP = then
0657   0B                     DEC   bc   
0658                IFTE3:       
0658   DD E9                  JP   (ix)   
065A                SWITCH:      
065A   E1                     POP   hl   ; get condition from stack
065B   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
065C   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
065F   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0662   D5                     PUSH   de   ; push SCP
0663   FD E5                  PUSH   iy   ; push BP
0665   FD 21 00 00            LD   iy,0   ; BP = SP
0669   FD 39                  ADD   iy,sp   
066B   E5                     PUSH   hl   ; push condition as first arg of new frame
066C   DD E9                  JP   (ix)   
066E                CASE:        
066E   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0671   FD 6E FE               LD   l,(iy-2)   
0674   23                     INC   hl   ; hl -= 1 index from second arg
0675   29                     ADD   hl,hl   ; hl *= 2 word offset
0676   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0678   FD 5D                  LD   e,iyl   
067A   EB                     EX   de,hl   
067B   B7                     OR   a   ; hl = BP - offset
067C   ED 52                  SBC   hl,de   
067E   54 5D                  LD   de,hl   ; save arg ptr
0680   2B                     DEC   hl   ; hl += 2
0681   2B                     DEC   hl   
0682   B7                     OR   a   ; arg ptr - stack pointer
0683   ED 72                  SBC   hl,sp   
0685   30 03                  JR   nc,case0   
0687   D1                     POP   de   ; pop last arg
0688   18 05                  JR   case1   
068A                CASE0:       
068A   EB                     EX   de,hl   
068B   2B                     DEC   hl   ; de = arg
068C   56                     LD   d,(hl)   
068D   2B                     DEC   hl   
068E   5E                     LD   e,(hl)   
068F                CASE1:       
068F   7A                     LD   a,d   ; is arg == null ? then skip
0690   B3                     OR   e   
0691   28 09                  JR   z,case2   
0693   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0696   FD 70 05               LD   (iy+5),b   
0699   42 4B                  LD   bc,de   ; IP = arg
069B   0B                     DEC   bc   
069C                CASE2:       
069C   DD E9                  JP   (ix)   
069E                WORDS:       
069E   21 02 00               LD   hl,2   
06A1   18 03                  JR   bytes1   
06A3                BYTES:       
06A3   21 01 00               LD   hl,1   
06A6                BYTES1:      
06A6   22 80 1B               LD   (vDataWidth),hl   
06A9   DD E9                  JP   (ix)   
06AB                ARRAY:       
06AB   C5                     PUSH   bc   ; create stack frame, push IP
06AC   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
06AF   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
06B2   D5                     PUSH   de   ; push SCP
06B3   FD E5                  PUSH   iy   ; push BP
06B5   FD 21 00 00            LD   iy,0   ; BP = SP
06B9   FD 39                  ADD   iy,sp   
06BB   DD E9                  JP   (ix)   
06BD                ARRAYEND:      
06BD   FD 54                  LD   d,iyh   ; de = BP
06BF   FD 5D                  LD   e,iyl   
06C1   62 6B                  LD   hl,de   ; hl = de
06C3   B7                     OR   a   
06C4   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06C6   C5                     PUSH   bc   ; bc' = IP
06C7   D9                     EXX      
06C8   C1                     POP   bc   
06C9   D9                     EXX      
06CA   44 4D                  LD   bc,hl   ; bc = count
06CC   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
06CF   71                     LD   (hl),c   ; write count before array data
06D0   23                     INC   hl   
06D1   70                     LD   (hl),b   
06D2   23                     INC   hl   
06D3   E5                     PUSH   hl   ; hl = ptr to array (index 0)
06D4   D9                     EXX      
06D5   E1                     POP   hl   ; hl' = ptr to array (index 0)
06D6   D9                     EXX      
06D7   3A 80 1B               LD   a,(vDataWidth)   
06DA   FE 01                  CP   1   ; byte?
06DC   20 0D                  JR   nz,arrayEnd2   
06DE   EB                     EX   de,hl   
06DF                ARRAYEND1:      
06DF   1B                     DEC   de   
06E0   1B                     DEC   de   
06E1   1A                     LD   a,(de)   
06E2   77                     LD   (hl),a   
06E3   23                     INC   hl   
06E4   0B                     DEC   bc   
06E5   79                     LD   a,c   
06E6   B0                     OR   b   
06E7   28 12                  JR   z,arrayEnd3   
06E9   18 F4                  JR   arrayEnd1   
06EB                ARRAYEND2:      
06EB   1B                     DEC   de   
06EC   1A                     LD   a,(de)   
06ED   08                     EX   af,af'   
06EE   1B                     DEC   de   
06EF   1A                     LD   a,(de)   
06F0   77                     LD   (hl),a   
06F1   23                     INC   hl   
06F2   08                     EX   af,af'   
06F3   1A                     LD   a,(de)   
06F4   77                     LD   (hl),a   
06F5   23                     INC   hl   
06F6   0B                     DEC   bc   
06F7   79                     LD   a,c   
06F8   B0                     OR   b   
06F9   20 F0                  JR   nz,arrayEnd2   
06FB                ARRAYEND3:      
06FB   FD 54                  LD   d,iyh   ; de = BP
06FD   FD 5D                  LD   e,iyl   
06FF   EB                     EX   de,hl   ; hl = BP, de = result
0700   F9                     LD   sp,hl   ; sp = BP
0701   E1                     POP   hl   ; hl = old BP
0702   C1                     POP   bc   ; pop SCP (discard)
0703   C1                     POP   bc   ; bc = IP
0704   F9                     LD   sp,hl   ; sp = old BP
0705   FD 21 00 00            LD   iy,0   ; iy = sp
0709   FD 39                  ADD   iy,sp   
070B   D9                     EXX      
070C   E5                     PUSH   hl   
070D   C5                     PUSH   bc   
070E   D9                     EXX      
070F   C1                     POP   bc   
0710   DD E9                  JP   (ix)   
0712                             ; str -- num
0712                HASH:        
0712   E1                     POP   hl   
0713   C5                     PUSH   bc   
0714   44 4D                  LD   bc,hl   
0716   CD B3 07               CALL   hashStr   
0719   C1                     POP   bc   
071A   E5                     PUSH   hl   
071B   DD E9                  JP   (ix)   
071D                             ; str addr -- bool
071D                DEF:         
071D   60 69                  LD   hl,bc   ; hl = IP
071F   D1                     POP   de   ; de = addr
0720   C1                     POP   bc   ; bc = hash
0721   E5                     PUSH   hl   
0722   CD CC 07               CALL   defineEntry   
0725   21 00 00               LD   hl,0   ; if c return TRUE
0728   30 01                  JR   nc,def1   
072A   2B                     DEC   hl   
072B                DEF1:        
072B   C1                     POP   bc   
072C   E5                     PUSH   hl   
072D   DD E9                  JP   (ix)   
072F                             ; str -- addr
072F                ADDR:        
072F   E1                     POP   hl   ; hl = hash
0730   C5                     PUSH   bc   
0731   44 4D                  LD   bc,hl   
0733   CD F2 07               CALL   lookupEntry   
0736   38 03                  JR   c,addr1   
0738   21 00 00               LD   hl,0   
073B                ADDR1:       
073B   C1                     POP   bc   
073C   E5                     PUSH   hl   
073D   DD E9                  JP   (ix)   
073F                SYMBOL:      
073F   03                     INC   bc   
0740   11 00 1A               LD   de,PAD   
0743   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0745   18 02                  JR   symbol1   
0747                SYMBOL0:      ; copy to PAD area
0747   03                     INC   bc   ; characters that are part of the identifier
0748   13                     INC   de   
0749                SYMBOL1:      ; 0-9 A-Z a-z _
0749   0A                     LD   a,(bc)   
074A   12                     LD   (de),a   
074B   B7                     OR   a   
074C   28 0A                  JR   z,symbol2   
074E   6F                     LD   l,a   
074F   7E                     LD   a,(hl)   
0750   FE 2C                  CP   lsb(ident_)   
0752   28 F3                  JR   z,symbol0   
0754   FE 00                  CP   lsb(num_)   
0756   28 EF                  JR   z,symbol0   
0758                SYMBOL2:      
0758   0B                     DEC   bc   
0759   AF                     XOR   a   
075A   12                     LD   (de),a   ; terminate string with null
075B   C5                     PUSH   bc   
075C   01 00 1A               LD   bc,PAD   
075F   CD B3 07               CALL   hashStr   ; hl = hash
0762   C1                     POP   bc   
0763   E5                     PUSH   hl   
0764   DD E9                  JP   (ix)   
0766                IDENT:       
0766   11 00 1A               LD   de,PAD   
0769   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
076B   18 02                  JR   ident1   
076D                IDENT0:      ; copy to PAD area
076D   03                     INC   bc   ; characters that are part of the identifier
076E   13                     INC   de   
076F                IDENT1:      ; 0-9 A-Z a-z _
076F   0A                     LD   a,(bc)   
0770   12                     LD   (de),a   
0771   B7                     OR   a   
0772   28 0A                  JR   z,ident2   
0774   6F                     LD   l,a   
0775   7E                     LD   a,(hl)   
0776   FE 2C                  CP   lsb(ident_)   
0778   28 F3                  JR   z,ident0   
077A   FE 00                  CP   lsb(num_)   
077C   28 EF                  JR   z,ident0   
077E                IDENT2:      
077E   0B                     DEC   bc   
077F   AF                     XOR   a   
0780   12                     LD   (de),a   ; terminate string with null
0781   C5                     PUSH   bc   
0782   01 00 1A               LD   bc,PAD   
0785   CD B3 07               CALL   hashStr   ; hl = hash
0788   44 4D                  LD   bc,hl   
078A   CD F2 07               CALL   lookupEntry   
078D   C1                     POP   bc   
078E   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0790   DD E9                  JP   (ix)   
0792                IDENT3:      
0792   E9                     JP   (hl)   
0793                FRAC:        
0793   2A 7E 1B               LD   hl,(vFrac)   
0796   E5                     PUSH   hl   
0797   DD E9                  JP   (ix)   
0799                SQRT1:       
0799   E1                     POP   hl   
079A   C5                     PUSH   bc   
079B   CD 2F 08               CALL   squareRoot   
079E   ED 43 7E 1B            LD   (vFrac),bc   
07A2   C1                     POP   bc   
07A3   D5                     PUSH   de   
07A4   DD E9                  JP   (ix)   
07A6                ABS1:        
07A6   E1                     POP   hl   
07A7   CB 7C                  BIT   7,h   
07A9   C8                     RET   z   
07AA   AF                     XOR   a   
07AB   95                     SUB   l   
07AC   6F                     LD   l,a   
07AD   9F                     SBC   a,a   
07AE   94                     SUB   h   
07AF   67                     LD   h,a   
07B0   E5                     PUSH   hl   
07B1   DD E9                  JP   (ix)   
07B3                             ; ===============================================================================
07B3                             ; 
07B3                             ; hash C-string in BC, result in HL
07B3                HASHSTR:      
07B3   21 00 00               LD   hl,0   
07B6                HASHSTR1:      
07B6   0A                     LD   a,(bc)   ; load next char
07B7   03                     INC   bc   
07B8   FE 00                  CP   0   ; null?
07BA   C8                     RET   z   
07BB                HASHSTR2:      
07BB   16 00                  LD   d,0   
07BD   5F                     LD   e,a   
07BE   19                     ADD   hl,de   
07BF   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
07C1   29                     ADD   hl,hl   ; shift left
07C2   19                     ADD   hl,de   ; add
07C3   29                     ADD   hl,hl   ; shift left
07C4   29                     ADD   hl,hl   ; shift left
07C5   29                     ADD   hl,hl   ; shift left
07C6   29                     ADD   hl,hl   ; shift left
07C7   29                     ADD   hl,hl   ; shift left
07C8   29                     ADD   hl,hl   ; shift left
07C9   19                     ADD   hl,de   ; add
07CA   18 EA                  JR   hashStr1   
07CC                             ; add entry to hash slots and hash pointers
07CC                             ; bc = hash (b = hi, c = lo), de = addr
07CC                             ; sets carry if successful
07CC                DEFINEENTRY:      
07CC   CB 21                  SLA   c   ; lo = lo * 2
07CE   69                     LD   l,c   ; lo1 = lo
07CF   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07D1                DEFINEENTRY0:      
07D1   7E                     LD   a,(hl)   ; a = (lo1)
07D2   FE FF                  CP   UNUSED   ; is it unused?
07D4   28 12                  JR   z,defineEntry3   ; yes, add entry
07D6   79                     LD   a,c   ; a = lo
07D7   BE                     CP   (hl)   ; compare (lo1) with lo
07D8   20 06                  JR   nz,defineEntry1   ; no match loop around
07DA   2C                     INC   l   
07DB   78                     LD   a,b   ; a = hi
07DC   BE                     CP   (hl)   ; compare (lo1+1) with hi
07DD   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
07DF   2D                     DEC   l   ; restore l
07E0                DEFINEENTRY1:      
07E0   2C                     INC   l   ; try next entry
07E1   2C                     INC   l   
07E2   79                     LD   a,c   ; compare lo and lo1
07E3   BD                     CP   l   ; if equal then there's no space left, reject
07E4   20 EB                  JR   nz,defineEntry0   
07E6                DEFINEENTRY2:      
07E6   3F                     CCF      ; clear carry flag, failure
07E7   C9                     RET      
07E8                DEFINEENTRY3:      ; new entry
07E8   71                     LD   (hl),c   ; (lo1) = hash lo
07E9   23                     INC   hl   
07EA   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
07EB   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07ED   72                     LD   (hl),d   
07EE   2B                     DEC   hl   
07EF   73                     LD   (hl),e   ; (slot + 2) = address
07F0   37                     SCF      ; set carry flag, success
07F1   C9                     RET      
07F2                             ; looks up hash and returns address
07F2                             ; bc = hash
07F2                             ; returns addr in hl, sets carry if successful
07F2                LOOKUPENTRY:      
07F2   CB 21                  SLA   c   ; lo = lo * 2
07F4   69                     LD   l,c   ; lo1 = lo
07F5   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07F7                LOOKUPENTRY0:      
07F7   7E                     LD   a,(hl)   ; a = (hl), slot
07F8   FE FF                  CP   UNUSED   ; is it unused?
07FA   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07FC   79                     LD   a,c   ; a = lo
07FD   BE                     CP   (hl)   ; compare (lo1) with lo
07FE   20 06                  JR   nz,lookupEntry1   ; no match loop around
0800   2C                     INC   l   
0801   78                     LD   a,b   ; a = hi
0802   BE                     CP   (hl)   ; compare (lo1+1) with hi
0803   28 09                  JR   z,lookupEntry3   
0805   2D                     DEC   l   
0806                LOOKUPENTRY1:      
0806   2C                     INC   l   
0807   2C                     INC   l   
0808   79                     LD   a,c   
0809   BD                     CP   l   ; no space left, reject
080A   20 EB                  JR   nz,lookupEntry0   
080C                LOOKUPENTRY2:      
080C   3F                     CCF      ; clear carry flag, failure
080D   C9                     RET      
080E                LOOKUPENTRY3:      
080E   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0810   56                     LD   d,(hl)   
0811   2D                     DEC   l   ; restore l
0812   5E                     LD   e,(hl)   ; (slot + 2) = address
0813   EB                     EX   de,hl   
0814   37                     SCF      
0815   C9                     RET      
0816                             ; division subroutine.
0816                             ; bc: divisor, de: dividend, hl: remainder
0816                DIVIDE:      
0816   21 00 00               LD   hl,0   ; zero the remainder
0819   3E 10                  LD   a,16   ; loop counter
081B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
081B   CB 21                  SLA   c   
081D   CB 10                  RL   b   
081F   ED 6A                  ADC   hl,hl   
0821   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0823   38 03                  JR   c,divide2   
0825   0C                     INC   c   
0826   18 01                  JR   divide3   
0828                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0828   19                     ADD   hl,de   
0829                DIVIDE3:      
0829   3D                     DEC   a   
082A   20 EF                  JR   nz,divide1   
082C   50 59                  LD   de,bc   ; result from bc to de
082E   C9                     RET      
082F                             ; squareroot
082F                             ; Input: HL = value
082F                             ; Result: DE = square root BC = remainder
082F                SQUAREROOT:      
082F   01 00 08               LD   bc,0800h   
0832   59                     LD   e,c   
0833   AF                     XOR   a   
0834                SQUAREROOT1:      
0834   29                     ADD   hl,hl   
0835   CB 11                  RL   c   
0837   ED 6A                  ADC   hl,hl   
0839   CB 11                  RL   c   
083B   30 02                  JR   nc,$+4   
083D   CB C5                  SET   0,l   
083F   7B                     LD   a,e   
0840   87                     ADD   a,a   
0841   5F                     LD   e,a   
0842   87                     ADD   a,a   
0843   CB 45                  BIT   0,l   
0845   20 03                  JR   nz,$+5   
0847   91                     SUB   c   
0848   30 05                  JR   nc,squareRoot4   
084A   79                     LD   a,c   
084B   93                     SUB   e   
084C   1C                     INC   e   
084D   93                     SUB   e   
084E   4F                     LD   c,a   
084F                SQUAREROOT4:      
084F   10 E3                  DJNZ   squareRoot1   
0851   CB 45                  BIT   0,l   
0853   28 01                  JR   z,squareRoot5   
0855   04                     INC   b   
0856                SQUAREROOT5:      
0856   16 00                  LD   d,0   
0858   C9                     RET      
0859                PRTDEC:      
0859   CB 7C                  BIT   7,h   
085B   28 0B                  JR   z,prtdec0   
085D   3E 2D                  LD   a,"-"   
085F   CD 85 00               CALL   putchar   
0862   AF                     XOR   a   
0863   95                     SUB   l   
0864   6F                     LD   l,a   
0865   9F                     SBC   a,a   
0866   94                     SUB   h   
0867   67                     LD   h,a   
0868                PRTDEC0:      
0868   C5                     PUSH   bc   
0869   0E 00                  LD   c,0   ; leading zeros flag = false
086B   11 F0 D8               LD   de,-10000   
086E   CD 8A 08               CALL   prtdec1   
0871   11 18 FC               LD   de,-1000   
0874   CD 8A 08               CALL   prtdec1   
0877   11 9C FF               LD   de,-100   
087A   CD 8A 08               CALL   prtdec1   
087D   1E F6                  LD   e,-10   
087F   CD 8A 08               CALL   prtdec1   
0882   0C                     INC   c   ; flag = true for at least digit
0883   1E FF                  LD   e,-1   
0885   CD 8A 08               CALL   prtdec1   
0888   C1                     POP   bc   
0889   C9                     RET      
088A                PRTDEC1:      
088A   06 2F                  LD   b,"0"-1   
088C                PRTDEC2:      
088C   04                     INC   b   
088D   19                     ADD   hl,de   
088E   38 FC                  JR   c,prtdec2   
0890   ED 52                  SBC   hl,de   
0892   3E 30                  LD   a,"0"   
0894   B8                     CP   b   
0895   20 05                  JR   nz,prtdec3   
0897   AF                     XOR   a   
0898   B1                     OR   c   
0899   C8                     RET   z   
089A   18 01                  JR   prtdec4   
089C                PRTDEC3:      
089C   0C                     INC   c   
089D                PRTDEC4:      
089D   78                     LD   a,b   
089E   C3 85 00               JP   putchar   
08A1                PRTHEX:      ; display hl as a 16-bit number in hex.
08A1   C5                     PUSH   bc   ; preserve the IP
08A2   7C                     LD   a,h   
08A3   CD AC 08               CALL   prthex2   
08A6   7D                     LD   a,l   
08A7   CD AC 08               CALL   prthex2   
08AA   C1                     POP   bc   
08AB   C9                     RET      
08AC                PRTHEX2:      
08AC   4F                     LD   c,a   
08AD   1F                     RRA      
08AE   1F                     RRA      
08AF   1F                     RRA      
08B0   1F                     RRA      
08B1   CD B5 08               CALL   prthex3   
08B4   79                     LD   a,c   
08B5                PRTHEX3:      
08B5   E6 0F                  AND   0x0F   
08B7   C6 90                  ADD   a,0x90   
08B9   27                     DAA      
08BA   CE 40                  ADC   a,0x40   
08BC   27                     DAA      
08BD   C3 85 00               JP   putchar   
08C0                PRINTSTR:      
08C0   E3                     EX   (sp),hl   ; swap			
08C1   CD 00 09               CALL   putStr   
08C4   23                     INC   hl   ; inc past null
08C5   E3                     EX   (sp),hl   ; put it back	
08C6   C9                     RET      
08C7                             ; **************************************************************************
08C7                             ; calculate nesting value
08C7                             ; a is char to be tested,
08C7                             ; e is the nesting value (initially 0)
08C7                             ; e is increased by ( and [
08C7                             ; e is decreased by ) and ]
08C7                             ; e has its bit 7 toggled by `
08C7                             ; limited to 127 levels
08C7                             ; **************************************************************************
08C7                NESTING:      
08C7   FE 22                  CP   $22   ; quote char
08C9   20 0A                  JR   nz,nesting1   
08CB   CB 7B                  BIT   7,e   
08CD   28 03                  JR   z,nesting1a   
08CF   CB BB                  RES   7,e   
08D1   C9                     RET      
08D2                NESTING1A:      
08D2   CB FB                  SET   7,e   
08D4   C9                     RET      
08D5                NESTING1:      
08D5   CB 7B                  BIT   7,e   
08D7   C0                     RET   nz   
08D8   FE 7B                  CP   "{"   
08DA   28 08                  JR   z,nesting2   
08DC   FE 5B                  CP   "["   
08DE   28 04                  JR   z,nesting2   
08E0   FE 28                  CP   "("   
08E2   20 02                  JR   nz,nesting3   
08E4                NESTING2:      
08E4   1C                     INC   e   
08E5   C9                     RET      
08E6                NESTING3:      
08E6   FE 7D                  CP   "}"   
08E8   28 07                  JR   z,nesting4   
08EA   FE 5D                  CP   "]"   
08EC   28 03                  JR   z,nesting4   
08EE   FE 29                  CP   ")"   
08F0   C0                     RET   nz   
08F1                NESTING4:      
08F1   1D                     DEC   e   
08F2   C9                     RET      
08F3                PROMPT:      
08F3   CD C0 08               CALL   printStr   
08F6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08FB   C9                     RET      
08FC                PUTSTR0:      
08FC   CD 85 00               CALL   putchar   
08FF   23                     INC   hl   
0900                PUTSTR:      
0900   7E                     LD   a,(hl)   
0901   B7                     OR   a   
0902   20 F8                  JR   nz,putStr0   
0904   C9                     RET      
0905                CRLF:        
0905   CD C0 08               CALL   printStr   
0908   0D 0A 00               .CSTR   "\r\n"   
090B   C9                     RET      
090C                DEFINE:      
090C   E1                     POP   hl   
090D   7E                     LD   a,(hl)   
090E   23                     INC   hl   
090F   44 4D                  LD   bc,hl   
0911   5F                     LD   e,a   
0912   16 00                  LD   d,0   
0914   19                     ADD   hl,de   
0915   5E                     LD   e,(hl)   
0916   23                     INC   hl   
0917   56                     LD   d,(hl)   
0918   23                     INC   hl   
0919   E5                     PUSH   hl   ; bc = str
091A   D5                     PUSH   de   
091B   CD B3 07               CALL   hashStr   ; hl = hash
091E   D1                     POP   de   
091F   44 4D                  LD   bc,hl   
0921   C3 CC 07               JP   defineEntry   
0924                INIT:        
0924   DD 21 F0 02            LD   ix,next   
0928   FD 21 00 1A            LD   iy,DSTACK   
092C   21 80 01               LD   hl,isysVars   
092F   11 7E 1B               LD   de,sysVars   
0932   01 10 00               LD   bc,8 * 2   
0935   ED B0                  LDIR      
0937   3E FF                  LD   a,UNUSED   
0939   06 00                  LD   b,0   
093B   21 00 1D               LD   hl,hashSlots   
093E                INIT1:       
093E   77                     LD   (hl),a   
093F   23                     INC   hl   
0940   10 FC                  DJNZ   init1   
0942   CD 0C 09               CALL   define   
0945   04 61 62 73 00         .PSTR   "abs",0   
094A   A6 07                  DW   abs1   
094C   CD 0C 09               CALL   define   
094F   05 61 64 64 72 00      .PSTR   "addr",0   
0955   2F 07                  DW   addr   
0957   CD 0C 09               CALL   define   
095A   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0961   A3 06                  DW   bytes   
0963   CD 0C 09               CALL   define   
0966   05 63 61 73 65 00      .PSTR   "case",0   
096C   6E 06                  DW   case   
096E   CD 0C 09               CALL   define   
0971   04 64 65 66 00         .PSTR   "def",0   
0976   1D 07                  DW   def   
0978   CD 0C 09               CALL   define   
097B   05 65 78 65 63 00      .PSTR   "exec",0   
0981   6E 05                  DW   exec   
0983   CD 0C 09               CALL   define   
0986   06 66 61 6C 73 65 00   .PSTR   "false",0   
098D   73 04                  DW   false_   
098F   CD 0C 09               CALL   define   
0992   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
099A   C8 04                  DW   filter   
099C   CD 0C 09               CALL   define   
099F   04 67 65 74 00         .PSTR   "get",0   
09A4   C8 04                  DW   get   
09A6   CD 0C 09               CALL   define   
09A9   05 68 61 73 68 00      .PSTR   "hash",0   
09AF   12 07                  DW   hash   
09B1   CD 0C 09               CALL   define   
09B4   03 69 66 00            .PSTR   "if",0   
09B8   32 06                  DW   if   
09BA   CD 0C 09               CALL   define   
09BD   05 69 66 74 65 00      .PSTR   "ifte",0   
09C3   37 06                  DW   ifte   
09C5   CD 0C 09               CALL   define   
09C8   04 6B 65 79 00         .PSTR   "key",0   
09CD   B9 04                  DW   key   
09CF   CD 0C 09               CALL   define   
09D2   04 6C 65 74 00         .PSTR   "let",0   
09D7   C8 04                  DW   let   
09D9   CD 0C 09               CALL   define   
09DC   04 6D 61 70 00         .PSTR   "map",0   
09E1   C8 04                  DW   map   
09E3   CD 0C 09               CALL   define   
09E6   04 6E 65 67 00         .PSTR   "neg",0   
09EB   C2 04                  DW   neg   
09ED   CD 0C 09               CALL   define   
09F0   05 66 72 61 63 00      .PSTR   "frac",0   
09F6   93 07                  DW   frac   
09F8   CD 0C 09               CALL   define   
09FB   05 73 63 61 6E 00      .PSTR   "scan",0   
0A01   01 00                  DW   scan   
0A03   CD 0C 09               CALL   define   
0A06   04 73 65 74 00         .PSTR   "set",0   
0A0B   C8 04                  DW   set1   
0A0D   CD 0C 09               CALL   define   
0A10   04 73 68 6C 00         .PSTR   "shl",0   
0A15   CA 04                  DW   shl   
0A17   CD 0C 09               CALL   define   
0A1A   04 73 68 72 00         .PSTR   "shr",0   
0A1F   CF 04                  DW   shr   
0A21   CD 0C 09               CALL   define   
0A24   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A2A   99 07                  DW   sqrt1   
0A2C   CD 0C 09               CALL   define   
0A2F   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A37   5A 06                  DW   switch   
0A39   CD 0C 09               CALL   define   
0A3C   05 74 72 75 65 00      .PSTR   "true",0   
0A42   87 04                  DW   true_   
0A44   CD 0C 09               CALL   define   
0A47   06 77 68 69 6C 65 00   .PSTR   "while",0   
0A4E   C8 04                  DW   while   
0A50   CD 0C 09               CALL   define   
0A53   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A5A   9E 06                  DW   words   
0A5C   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   21 00 00               LD   hl,0   
4003   11 01 00               LD   de,1   
4006   19                     ADD   hl,de   
4007   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
4009   29                     ADD   hl,hl   ; shift left
400A   19                     ADD   hl,de   ; add
400B   29                     ADD   hl,hl   ; shift left
400C   29                     ADD   hl,hl   ; shift left
400D   29                     ADD   hl,hl   ; shift left
400E   29                     ADD   hl,hl   ; shift left
400F   29                     ADD   hl,hl   ; shift left
4010   29                     ADD   hl,hl   ; shift left
4011   19                     ADD   hl,de   ; add
4012                          ;*Macro unroll:  test "'hello' hash", $7f54
4012   31 00 1A               LD   SP,DSTACK   
4015   CD 24 09               CALL   init   
4018   CD 6E 05               CALL   exec   
401B   27 68 65 6C 6C 6F 27 20 68 61 73 68 00 .CSTR   "'hello' hash"   
4028                          ;*Macro unroll:  expect "'hello' hash",$7f54
4028   E1                     POP   HL   
4029   E5                     PUSH   HL   
402A   11 54 7F               LD   DE,$7f54   
402D   B7                     OR   A   
402E   ED 52                  SBC   HL,DE   
4030   7D                     LD   A,L   
4031   B4                     OR   H   
4032   28 57                  JR   Z,expectM_0_2144S43   
4034   CD C0 08               CALL   printStr   
4037   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 68 61 73 68 00 .CSTR   "Code: ","'hello' hash"   
404A   CD C0 08               CALL   printStr   
404D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405C   21 54 7F               LD   HL,$7f54   
405F   CD 59 08               CALL   prtdec   
4062   CD C0 08               CALL   printStr   
4065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4072   E1                     POP   hl   
4073   E5                     PUSH   hl   
4074   CD 59 08               CALL   prtdec   
4077   E1                     POP   hl   
4078   CD C0 08               CALL   printStr   
407B   20 28 23 00            .CSTR   " (#"   
407F   CD A1 08               CALL   prthex   
4082   CD C0 08               CALL   printStr   
4085   29 0D 0A 00            .CSTR   ")\r\n"   
4089   76                     HALT      
408A   00                     .CSTR      
408B                EXPECTM_0_2144S43:      
408B   E1                     POP   HL   
408C                          ;*Macro unroll:  test ":hello", $7f54
408C   31 00 1A               LD   SP,DSTACK   
408F   CD 24 09               CALL   init   
4092   CD 6E 05               CALL   exec   
4095   3A 68 65 6C 6C 6F 00   .CSTR   ":hello"   
409C                          ;*Macro unroll:  expect ":hello",$7f54
409C   E1                     POP   HL   
409D   E5                     PUSH   HL   
409E   11 54 7F               LD   DE,$7f54   
40A1   B7                     OR   A   
40A2   ED 52                  SBC   HL,DE   
40A4   7D                     LD   A,L   
40A5   B4                     OR   H   
40A6   28 51                  JR   Z,expectM_0_2145S43   
40A8   CD C0 08               CALL   printStr   
40AB   43 6F 64 65 3A 20 3A 68 65 6C 6C 6F 00 .CSTR   "Code: ",":hello"   
40B8   CD C0 08               CALL   printStr   
40BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40CA   21 54 7F               LD   HL,$7f54   
40CD   CD 59 08               CALL   prtdec   
40D0   CD C0 08               CALL   printStr   
40D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E0   E1                     POP   hl   
40E1   E5                     PUSH   hl   
40E2   CD 59 08               CALL   prtdec   
40E5   E1                     POP   hl   
40E6   CD C0 08               CALL   printStr   
40E9   20 28 23 00            .CSTR   " (#"   
40ED   CD A1 08               CALL   prthex   
40F0   CD C0 08               CALL   printStr   
40F3   29 0D 0A 00            .CSTR   ")\r\n"   
40F7   76                     HALT      
40F8   00                     .CSTR      
40F9                EXPECTM_0_2145S43:      
40F9   E1                     POP   HL   
40FA                          ;*Macro unroll:  test ":hello 2 def", TRUE
40FA   31 00 1A               LD   SP,DSTACK   
40FD   CD 24 09               CALL   init   
4100   CD 6E 05               CALL   exec   
4103   3A 68 65 6C 6C 6F 20 32 20 64 65 66 00 .CSTR   ":hello 2 def"   
4110                          ;*Macro unroll:  expect ":hello 2 def",TRUE
4110   E1                     POP   HL   
4111   E5                     PUSH   HL   
4112   11 FF FF               LD   DE,TRUE   
4115   B7                     OR   A   
4116   ED 52                  SBC   HL,DE   
4118   7D                     LD   A,L   
4119   B4                     OR   H   
411A   28 57                  JR   Z,expectM_0_2146S43   
411C   CD C0 08               CALL   printStr   
411F   43 6F 64 65 3A 20 3A 68 65 6C 6C 6F 20 32 20 64 65 66 00 .CSTR   "Code: ",":hello 2 def"   
4132   CD C0 08               CALL   printStr   
4135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4144   21 FF FF               LD   HL,TRUE   
4147   CD 59 08               CALL   prtdec   
414A   CD C0 08               CALL   printStr   
414D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
415A   E1                     POP   hl   
415B   E5                     PUSH   hl   
415C   CD 59 08               CALL   prtdec   
415F   E1                     POP   hl   
4160   CD C0 08               CALL   printStr   
4163   20 28 23 00            .CSTR   " (#"   
4167   CD A1 08               CALL   prthex   
416A   CD C0 08               CALL   printStr   
416D   29 0D 0A 00            .CSTR   ")\r\n"   
4171   76                     HALT      
4172   00                     .CSTR      
4173                EXPECTM_0_2146S43:      
4173   E1                     POP   HL   
4174                          ;*Macro unroll:  test ":hello 2 def :hello addr", 2
4174   31 00 1A               LD   SP,DSTACK   
4177   CD 24 09               CALL   init   
417A   CD 6E 05               CALL   exec   
417D   3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 00 .CSTR   ":hello 2 def :hello addr"   
4196                          ;*Macro unroll:  expect ":hello 2 def :hello addr",2
4196   E1                     POP   HL   
4197   E5                     PUSH   HL   
4198   11 02 00               LD   DE,2   
419B   B7                     OR   A   
419C   ED 52                  SBC   HL,DE   
419E   7D                     LD   A,L   
419F   B4                     OR   H   
41A0   28 63                  JR   Z,expectM_0_2147S43   
41A2   CD C0 08               CALL   printStr   
41A5   43 6F 64 65 3A 20 3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 00 .CSTR   "Code: ",":hello 2 def :hello addr"   
41C4   CD C0 08               CALL   printStr   
41C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D6   21 02 00               LD   HL,2   
41D9   CD 59 08               CALL   prtdec   
41DC   CD C0 08               CALL   printStr   
41DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41EC   E1                     POP   hl   
41ED   E5                     PUSH   hl   
41EE   CD 59 08               CALL   prtdec   
41F1   E1                     POP   hl   
41F2   CD C0 08               CALL   printStr   
41F5   20 28 23 00            .CSTR   " (#"   
41F9   CD A1 08               CALL   prthex   
41FC   CD C0 08               CALL   printStr   
41FF   29 0D 0A 00            .CSTR   ")\r\n"   
4203   76                     HALT      
4204   00                     .CSTR      
4205                EXPECTM_0_2147S43:      
4205   E1                     POP   HL   
4206                          ;*Macro unroll:  test ":hello 2 def :there 3 def :hello addr :there addr +", 5
4206   31 00 1A               LD   SP,DSTACK   
4209   CD 24 09               CALL   init   
420C   CD 6E 05               CALL   exec   
420F   3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 74 68 65 72 65 20 33 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 20 3A 74 68 65 72 65 20 61 64 64 72 20 2B 00 .CSTR   ":hello 2 def :there 3 def :hello addr :there addr +"   
4243                          ;*Macro unroll:  expect ":hello 2 def :there 3 def :hello addr :there addr +",5
4243   E1                     POP   HL   
4244   E5                     PUSH   HL   
4245   11 05 00               LD   DE,5   
4248   B7                     OR   A   
4249   ED 52                  SBC   HL,DE   
424B   7D                     LD   A,L   
424C   B4                     OR   H   
424D   28 7E                  JR   Z,expectM_0_2148S43   
424F   CD C0 08               CALL   printStr   
4252   43 6F 64 65 3A 20 3A 68 65 6C 6C 6F 20 32 20 64 65 66 20 3A 74 68 65 72 65 20 33 20 64 65 66 20 3A 68 65 6C 6C 6F 20 61 64 64 72 20 3A 74 68 65 72 65 20 61 64 64 72 20 2B 00 .CSTR   "Code: ",":hello 2 def :there 3 def :hello addr :there addr +"   
428C   CD C0 08               CALL   printStr   
428F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
429E   21 05 00               LD   HL,5   
42A1   CD 59 08               CALL   prtdec   
42A4   CD C0 08               CALL   printStr   
42A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42B4   E1                     POP   hl   
42B5   E5                     PUSH   hl   
42B6   CD 59 08               CALL   prtdec   
42B9   E1                     POP   hl   
42BA   CD C0 08               CALL   printStr   
42BD   20 28 23 00            .CSTR   " (#"   
42C1   CD A1 08               CALL   prthex   
42C4   CD C0 08               CALL   printStr   
42C7   29 0D 0A 00            .CSTR   ")\r\n"   
42CB   76                     HALT      
42CC   00                     .CSTR      
42CD                EXPECTM_0_2148S43:      
42CD   E1                     POP   HL   
42CE                             ; test "10 sqrt", 3
42CE                             ; test "10 sqrt frac", 1
42CE                             ; test "7 3 /", 2
42CE                             ; test "7 3 / frac", 1
42CE                             ; test "1 2 +", 3
42CE                             ; test ":h {1} def :h addr exec", 1
42CE                             ; test "by [`A` `B` `C`]", 0
42CE                             ; test "by [`A` `B` `C`] 1 ge", "B"
42CE                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
42CE                             ; test "wo [10 20 30] 1 ge", 10
42CE                             ; test "wo [10 20 30] 1 50 set 1 get", 50
42CE                             ; test "1 2 +", 3
42CE                             ; test "4 1 2 +", 3
42CE                             ; test "1", 1
42CE                             ; test "2", 2
42CE                             ; test "``", 0
42CE                             ; test "`a`", $61
42CE                             ; test "`\\``", $60
42CE                             ; test "`b` 'cba' in", -1
42CE                             ; test "`x` 'cba' in", 0
42CE                             ; test "5 0 (1) if", 5
42CE                             ; test "0 (1) (2) ife", 2
42CE                             ; test "5 -1 (1) if", 1
42CE                             ; test "-1 (1) (2) ife", 1
42CE                             ; test "9 sw (1) (5) ca", 5
42CE                             ; test "0 sw (1) ca", 1
42CE                             ; test "1 sw (1) (2) (3) ca", 2
42CE                             ; test "5 -1 (2) if", 2
42CE                             ; test "5 0 (2) if", 5
42CE                             ; test "5 0 (0 (2) if) if", 5
42CE                             ; test "5 0 (-1 (2) if) if", 5
42CE                             ; test "5 -1 (2) if", 2
42CE                             ; test "5 -1 (-1 (2) if) if", 2
42CE                             ; test "(1) ex", 1
42CE                             ; test "2 ($1) ex", 2
42CE                             ; test "2 4 ($2) ex", 4
42CE                             ; test "((1) ex) ex", 1
42CE                             ; test "5 (-1 ($1) if) ex", 5
42CE                             ; test "'A' @", 65
42CE                             ; test "1", 1
42CE                             ; test "0", 0
42CE                             ; test "10", 10
42CE                             ; test "123", 123
42CE                             ; test "$10", $10
42CE                             ; test "$FF", $FF
42CE                             ; test "2 3 =", 0
42CE                             ; test "3 3 =", 1
42CE                             ; test "2 3 <", 1
42CE                             ; test "3 3 <", 0
42CE                             ; test "3 3 >", 0
42CE                             ; test "4 3 >", 1
42CE                             ; test "1 2 +", 3
42CE                             ; test "123 456 +", 123+456
42CE                             ; test "64 128 +", 64+128
42CE                             ; test "5 3 -", 2
42CE                             ; test "3 5 &", 1
42CE                             ; test "3 5 |", 7
42CE                             ; test "2 3 *", 6
42CE                             ; test "1 2 3 + *", 5
42CE                             ; ; test "1 2 3 ' +", 3
42CE                             ; ; test "1_ 2 +",1
42CE                             ; ; test "1_ 1 +",0
42CE                             ; ; call enter
42CE                             ; ;     .cstr "1 3",$22,"+"
42CE                             ; ; expect "1 3 DUP +", 6
42CE                             ; ; test "5 2/'", 2
42CE                             ; ; test "3 5$ -", 2
42CE                             ; ; test "5 2/$ '", 1
42CE                             ; ; test "2 3%++", 7
42CE                             ; ; test "1 2 3~''", 2
42CE                             ; ; test "1 2 3~+*", 8
42CE                             ; ; test "2a!a@",2
42CE                             ; ; test "3x! 1 x@+x! x@", 4
42CE                             ; ; test "3x! 1_ x@+x! x@", 2
42CE                             ; ; test "1{", 2
42CE                             ; ; test "1}", 0
42CE                             ; ; test "2}", 1
42CE                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
42CE                             ; ; test "(2) \\^", 2
42CE                             ; ; test ":X1; X", 1
42CE                             ; ; test ":A100;A", 100
42CE                             ; ; test ":Aa!; 3A a@", 3
42CE                             ; ; test ":Aa!;:Ba@;4AB", 4
42CE                             ; ; test "[]$ '", 0
42CE                             ; ; test "[3]$ '", 1
42CE                             ; ; test "[3]'@", 3
42CE                             ; ; test "[1 2 3]'@", 1
42CE                             ; ; test "[1 2 3]'2+@", 2
42CE                             ; ; test "\\h@[1]''\\h@$-", 2
42CE                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
42CE                             ; ; test "\\[]$ '", 0
42CE                             ; ; test "\\[3]'\\@", 3
42CE                             ; ; test "\\[3]$ '", 1
42CE                             ; ; test "\\[1 2 3]'\\@", 1
42CE                             ; ; test "\\[1 2 3]'1+\\@", 2
42CE                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
42CE                             ; ; test "\\h@\\[1]''\\h@$-", 1
42CE                             ; ; test "\\`A`\\@",65
42CE                             ; ; test "0 0(1+)", 0
42CE                             ; ; test "0 1(1+)", 1
42CE                             ; ; test "0 2(1+)", 2
42CE                             ; ; test "0 1(0(1+))", 0
42CE                             ; ; test "0 1(1(1+))", 1
42CE                             ; ; test "0 2(1(1+))", 2
42CE                             ; ; test "0 2(2(1+))", 4
42CE                             ; ; test "0 1(\\i@+)", 0
42CE                             ; ; test "0 2(\\i@+)", 1
42CE                             ; ; test "0 3(\\i@+)", 3
42CE                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
42CE                             ; ; test "0t! 10(1 t@+t!) t@",10
42CE                             ; ; test "0(100)(200)",200
42CE                             ; ; test "1(100)(200)",100
42CE                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
42CE                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
42CE                             ; ; test ":X10;\\0X", 10
42CE                             ; ; test "2 \\1x! \\1x@", 2
42CE   CD C0 08               CALL   printStr   
42D1   44 6F 6E 65 21 00      .CSTR   "Done!"   
42D7   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               04C8 DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 220 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 286 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
START:              0280 DEFINED AT LINE 188 IN Siena.asm
INTERPRET:          0296 DEFINED AT LINE 194 IN Siena.asm
                    > USED AT LINE 296 IN Siena.asm
INTERPRET2:         02A0 DEFINED AT LINE 200 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
INTERPRET3:         02A8 DEFINED AT LINE 207 IN Siena.asm
                    > USED AT LINE 216 IN Siena.asm
INTERPRET4:         02AE DEFINED AT LINE 213 IN Siena.asm
                    > USED AT LINE 205 IN Siena.asm
WAITCHAR:           02B3 DEFINED AT LINE 219 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
MACRO:              02C2 DEFINED AT LINE 228 IN Siena.asm
WAITCHAR1:          02C4 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
WAITCHAR3:          02D2 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
WAITCHAR4:          02E8 DEFINED AT LINE 270 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
NEXT:               02F0 DEFINED AT LINE 275 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
NEXT1:              02FD DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
ETX:                0305 DEFINED AT LINE 290 IN Siena.asm
ETX1:               030E DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
EXIT:               0310 DEFINED AT LINE 298 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 323 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 325 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 327 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 329 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 331 IN Siena.asm
LAMBDA_:            040C DEFINED AT LINE 333 IN Siena.asm
LAMBDAEND_:         040F DEFINED AT LINE 335 IN Siena.asm
DOT_:               0412 DEFINED AT LINE 337 IN Siena.asm
DOT2:               0416 DEFINED AT LINE 340 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
BLOCK_:             041D DEFINED AT LINE 344 IN Siena.asm
BLOCKEND_:          0420 DEFINED AT LINE 346 IN Siena.asm
CHAR_:              0423 DEFINED AT LINE 348 IN Siena.asm
ARRAY_:             0426 DEFINED AT LINE 350 IN Siena.asm
ARRAYEND_:          0429 DEFINED AT LINE 352 IN Siena.asm
IDENT_:             042C DEFINED AT LINE 354 IN Siena.asm
SYMBOL_:            042F DEFINED AT LINE 356 IN Siena.asm
AND_:               0432 DEFINED AT LINE 358 IN Siena.asm
AND1:               0439 DEFINED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 390 IN Siena.asm
OR_:                043D DEFINED AT LINE 371 IN Siena.asm
XOR_:               0446 DEFINED AT LINE 381 IN Siena.asm
XOR1:               0447 DEFINED AT LINE 383 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
INV_:               044F DEFINED AT LINE 392 IN Siena.asm
ADD_:               0454 DEFINED AT LINE 396 IN Siena.asm
HDOT_:              045A DEFINED AT LINE 403 IN Siena.asm
MUL_:               0461 DEFINED AT LINE 408 IN Siena.asm
SUB_:               0464 DEFINED AT LINE 411 IN Siena.asm
SUB2:               0466 DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
EQ_:                046C DEFINED AT LINE 420 IN Siena.asm
FALSE_:             0473 DEFINED AT LINE 427 IN Siena.asm
                    > USED AT LINE 443 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
GT_:                0479 DEFINED AT LINE 432 IN Siena.asm
LT_:                047D DEFINED AT LINE 437 IN Siena.asm
LT1:                047F DEFINED AT LINE 440 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
TRUE_:              0487 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
GTE_:               048D DEFINED AT LINE 451 IN Siena.asm
LTE_:               0491 DEFINED AT LINE 455 IN Siena.asm
LTE1:               0493 DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
MOD_:               049C DEFINED AT LINE 464 IN Siena.asm
DIV_:               04A8 DEFINED AT LINE 474 IN Siena.asm
NOP_:               04B7 DEFINED AT LINE 485 IN Siena.asm
KEY:                04B9 DEFINED AT LINE 490 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
NEG:                04C2 DEFINED AT LINE 528 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
GET:                04C8 DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
SET1:               04C8 DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
LET:                04C8 DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
WHILE:              04C8 DEFINED AT LINE 582 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
FILTER:             04C8 DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
MAP:                04C8 DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
SHL:                04CA DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
SHR:                04CF DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
SHR1:               04D0 DEFINED AT LINE 602 IN Siena.asm
MUL:                04D7 DEFINED AT LINE 608 IN Siena.asm
                    > USED AT LINE 409 IN Siena.asm
MUL2:               04E1 DEFINED AT LINE 617 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
NUM:                04F3 DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
NUM0:               04FC DEFINED AT LINE 637 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
NUM1:               04FD DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
NUM2:               0515 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
                    > USED AT LINE 681 IN Siena.asm
NUM3:               0520 DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
HEXNUM:             0523 DEFINED AT LINE 669 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
HEXNUM1:            0526 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
HEXNUM2:            052E DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 675 IN Siena.asm
STRDEF:             0540 DEFINED AT LINE 691 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
STRDEF1:            0548 DEFINED AT LINE 696 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
STRDEF2:            054B DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
CHAR:               0559 DEFINED AT LINE 710 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
CHAR1:              055C DEFINED AT LINE 712 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
CHAR2:              0568 DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
CHAR3:              056B DEFINED AT LINE 724 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
EXEC:               056E DEFINED AT LINE 729 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC1:              056F DEFINED AT LINE 731 IN Siena.asm
EXEC2:              0573 DEFINED AT LINE 735 IN Siena.asm
EXEC3:              0581 DEFINED AT LINE 744 IN Siena.asm
                    > USED AT LINE 734 IN Siena.asm
LAMBDA:             0583 DEFINED AT LINE 747 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
LAMBDA1:            058A DEFINED AT LINE 752 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 776 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
LAMBDA2:            05AE DEFINED AT LINE 773 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
                    > USED AT LINE 760 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
LAMBDAEND:          05BD DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
BLOCK:              05D1 DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
BLOCK1:             05D5 DEFINED AT LINE 802 IN Siena.asm
                    > USED AT LINE 820 IN Siena.asm
                    > USED AT LINE 824 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
BLOCK2:             05F7 DEFINED AT LINE 821 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
                    > USED AT LINE 812 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
BLOCKEND:           0603 DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
ARG:                0617 DEFINED AT LINE 845 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
IF:                 0632 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
IFTE:               0637 DEFINED AT LINE 915 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
IFTE1:              0638 DEFINED AT LINE 917 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
IFTE2:              0641 DEFINED AT LINE 926 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
IFTE3:              0658 DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 929 IN Siena.asm
SWITCH:             065A DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
CASE:               066E DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
CASE0:              068A DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
CASE1:              068F DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
CASE2:              069C DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
WORDS:              069E DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
BYTES:              06A3 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
BYTES1:             06A6 DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
ARRAY:              06AB DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 351 IN Siena.asm
ARRAYEND:           06BD DEFINED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
ARRAYEND1:          06DF DEFINED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
ARRAYEND2:          06EB DEFINED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
ARRAYEND3:          06FB DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
HASH:               0712 DEFINED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
DEF:                071D DEFINED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
DEF1:               072B DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
ADDR:               072F DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
ADDR1:              073B DEFINED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
SYMBOL:             073F DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
SYMBOL0:            0747 DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
SYMBOL1:            0749 DEFINED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
SYMBOL2:            0758 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
IDENT:              0766 DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
IDENT0:             076D DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
IDENT1:             076F DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
IDENT2:             077E DEFINED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
IDENT3:             0792 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
FRAC:               0793 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
SQRT1:              0799 DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
ABS1:               07A6 DEFINED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
HASHSTR:            07B3 DEFINED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
HASHSTR1:           07B6 DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
HASHSTR2:           07BB DEFINED AT LINE 1219 IN Siena.asm
DEFINEENTRY:        07CC DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
DEFINEENTRY0:       07D1 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
DEFINEENTRY1:       07E0 DEFINED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
DEFINEENTRY2:       07E6 DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
DEFINEENTRY3:       07E8 DEFINED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
LOOKUPENTRY:        07F2 DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
LOOKUPENTRY0:       07F7 DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
LOOKUPENTRY1:       0806 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1287 IN Siena.asm
LOOKUPENTRY2:       080C DEFINED AT LINE 1299 IN Siena.asm
LOOKUPENTRY3:       080E DEFINED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
DIVIDE:             0816 DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
DIVIDE1:            081B DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
DIVIDE2:            0828 DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
DIVIDE3:            0829 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
SQUAREROOT:         082F DEFINED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
SQUAREROOT1:        0834 DEFINED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
SQUAREROOT4:        084F DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
SQUAREROOT5:        0856 DEFINED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
PRTDEC:             0859 DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0868 DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
PRTDEC1:            088A DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
PRTDEC2:            088C DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
PRTDEC3:            089C DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
PRTDEC4:            089D DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
PRTHEX:             08A1 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08AC DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
PRTHEX3:            08B5 DEFINED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
PRINTSTR:           08C0 DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 191 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 170
NESTING:            08C7 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 211 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
NESTING1A:          08D2 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
NESTING1:           08D5 DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
NESTING2:           08E4 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
NESTING3:           08E6 DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
NESTING4:           08F1 DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
PROMPT:             08F3 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
PUTSTR0:            08FC DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
PUTSTR:             0900 DEFINED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
CRLF:               0905 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
DEFINE:             090C DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
INIT:               0924 DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 190 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              093E DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 204 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 189 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 294 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1533 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 480 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 198 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 692 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
                    > USED AT LINE 780 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 1539 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2144S43:  408B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  40F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  4173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  4205 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  42CD DEFINED AT LINE 34
                    > USED AT LINE 10
