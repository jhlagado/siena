0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 90 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; oldIP                             -- saved interpreter ptr
00CC                             ; static                            -- static array
00CC                             ; SCP                               -- scope base ptr           --> arg0
00CC                             ; oldBP                             -- saved base ptr           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   DA                     DB   lsb(nop_)   ; SP
0221   A7                     DB   lsb(not_)   ; !
0222   DA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   DA                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   DA                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   C2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   DA                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   AC                     DB   lsb(eq_)   ; =
023E   B1                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   D1                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   DA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1B 04               JP   num   
0303                HEXNUM_:      
0303   C3 4B 04               JP   hexnum   
0306                ARG_:        
0306   C3 13 05               JP   arg   
0309                PROP_:       
0309   C3 48 05               JP   prop   
030C                STRING_:      
030C   C3 68 04               JP   string   
030F                PAREN_:      
030F   C3 96 04               JP   paren   
0312                PARENEND_:      
0312   C3 98 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD 0D 08               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 30 08               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD C5 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 63 05               JP   get1   
034C                BLOCK_:      
034C   C3 9A 04               JP   block   
034F                BLOCKEND_:      
034F   C3 D5 04               JP   blockend   
0352                CHAR_:       
0352   C3 81 04               JP   char   
0355                ARRAY_:      
0355   C3 A1 05               JP   array   
0358                ARRAYEND_:      
0358   C3 A3 05               JP   arrayEnd   
035B                IDENT_:      
035B   C3 7E 06               JP   ident   
035E                SYMBOL_:      
035E   C3 56 06               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD 0D 08               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 FF 03               JP   mul   
0393                SUB_:        ; negative sign or subtract
0393   03                     INC   bc   ; check if sign of a number
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 30                  CP   "0"   
0398   38 05                  JR   c,sub1   
039A   FE 3A                  CP   "9"+1   
039C   DA 00 03               JP   c,num_   
039F                SUB1:        ; Subtract the value 2nd on stack from top of stack
039F   D1                     POP   de   
03A0   E1                     POP   hl   ; Entry point for INVert
03A1                SUB2:        
03A1   B7                     OR   a   ; Entry point for NEGate
03A2   ED 52                  SBC   hl,de   
03A4   E5                     PUSH   hl   
03A5   DD E9                  JP   (ix)   
03A7                NOT_:        ; logical invert, any non zero value
03A7   21 00 00               LD   hl,0   ; is considered true
03AA   18 01                  JR   eq1   
03AC                EQ_:         
03AC   E1                     POP   hl   
03AD                EQ1:         
03AD   D1                     POP   de   
03AE   C3 D8 06               JP   equals   
03B1                GT_:         
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 02                  JR   lt1   
03B5                LT_:         
03B5   E1                     POP   hl   
03B6   D1                     POP   de   
03B7                LT1:         
03B7   03                     INC   bc   
03B8   0A                     LD   a,(bc)   
03B9   FE 3D                  CP   "="   
03BB   CA E0 06               JP   z,lessthaneq   
03BE   0B                     DEC   bc   
03BF   C3 E5 06               JP   lessthan   
03C2                DIV_:        
03C2   D1                     POP   de   ; get first value
03C3   E1                     POP   hl   ; get 2nd value
03C4   C5                     PUSH   bc   ; preserve the IP
03C5   44 4D                  LD   bc,hl   
03C7   CD 82 07               CALL   divide   
03CA   22 98 18               LD   (vFrac),hl   
03CD   C1                     POP   bc   
03CE   D5                     PUSH   de   ; push result
03CF   DD E9                  JP   (ix)   
03D1                COMMENT_:      
03D1   03                     INC   bc   ; point to next char
03D2   0A                     LD   a,(bc)   
03D3   FE 20                  CP   " "   ; terminate on any char less than SP
03D5   30 FA                  JR   nc,comment_   
03D7   0B                     DEC   bc   
03D8   DD E9                  JP   (ix)   
03DA                NOP_:        
03DA   DD E9                  JP   (ix)   
03DC                             ;*******************************************************************
03DC                             ; word operators
03DC                             ;*******************************************************************
03DC                             ; shl
03DC                             ; value count -- value2          shift left count places
03DC                SHL:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 01                  JR   shl2   
03E4                SHL1:        
03E4   29                     ADD   hl,hl   ; left shift hl
03E5                SHL2:        
03E5   10 FD                  DJNZ   shl1   
03E7   E5                     PUSH   hl   
03E8   42 4B                  LD   bc,de   ; restore IP
03EA   DD E9                  JP   (ix)   
03EC                             ; shr
03EC                             ; value count -- value2          shift left count places
03EC                SHR:         
03EC   50 59                  LD   de,bc   ; save IP
03EE   C1                     POP   bc   ; bc = count
03EF   41                     LD   b,c   ; b = loop counter
03F0   E1                     POP   hl   
03F1   04                     INC   b   ; test for counter=0 case
03F2   18 04                  JR   shr2   
03F4                SHR1:        
03F4   CB 3C                  SRL   h   ; right shift hl
03F6   CB 1D                  RR   l   
03F8                SHR2:        
03F8   10 FA                  DJNZ   shr1   
03FA   E5                     PUSH   hl   
03FB   42 4B                  LD   bc,de   ; restore IP
03FD   DD E9                  JP   (ix)   
03FF                MUL:         ;=19
03FF   D1                     POP   de   ; get first value
0400   E1                     POP   hl   
0401   C5                     PUSH   bc   ; Preserve the IP
0402   44                     LD   b,h   ; bc = 2nd value
0403   4D                     LD   c,l   
0404   21 00 00               LD   hl,0   
0407   3E 10                  LD   a,16   
0409                MUL2:        
0409   29                     ADD   hl,hl   
040A   CB 13                  RL   e   
040C   CB 12                  RL   d   
040E   30 04                  JR   nc,$+6   
0410   09                     ADD   hl,bc   
0411   30 01                  JR   nc,$+3   
0413   13                     INC   de   
0414   3D                     DEC   a   
0415   20 F2                  JR   nz,mul2   
0417   C1                     POP   bc   ; Restore the IP
0418   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0419   DD E9                  JP   (ix)   
041B                NUM:         
041B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041E   0A                     LD   a,(bc)   ; Get numeral or -
041F   FE 2D                  CP   "-"   
0421   20 01                  JR   nz,num0   
0423   03                     INC   bc   ; move to next char, no flags affected
0424                NUM0:        
0424   08                     EX   af,af'   ; save zero flag = 0 for later
0425                NUM1:        
0425   0A                     LD   a,(bc)   ; read digit
0426   D6 30                  SUB   "0"   ; less than 0?
0428   38 13                  JR   c,num2   ; not a digit, exit loop
042A   FE 0A                  CP   10   ; greater that 9?
042C   30 0F                  JR   nc,num2   ; not a digit, exit loop
042E   03                     INC   bc   ; inc IP
042F   54 5D                  LD   de,hl   ; multiply hl * 10
0431   29                     ADD   hl,hl   
0432   29                     ADD   hl,hl   
0433   19                     ADD   hl,de   
0434   29                     ADD   hl,hl   
0435   85                     ADD   a,l   ; add digit in a to hl
0436   6F                     LD   l,a   
0437   3E 00                  LD   a,0   
0439   8C                     ADC   a,h   
043A   67                     LD   h,a   
043B   18 E8                  JR   num1   
043D                NUM2:        
043D   0B                     DEC   bc   
043E   08                     EX   af,af'   ; restore zero flag
043F   20 07                  JR   nz,num3   
0441   EB                     EX   de,hl   ; negate the value of hl
0442   21 00 00               LD   hl,0   
0445   B7                     OR   a   ; jump to sub2
0446   ED 52                  SBC   hl,de   
0448                NUM3:        
0448   E5                     PUSH   hl   ; Put the number on the stack
0449   DD E9                  JP   (ix)   ; and process the next character
044B                HEXNUM:      ; 
044B   21 00 00               LD   hl,0   ; Clear hl to accept the number
044E                HEXNUM1:      
044E   03                     INC   bc   
044F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0450   CB 77                  BIT   6,a   ; is it uppercase alpha?
0452   28 02                  JR   z,hexnum2   ; no a decimal
0454   D6 07                  SUB   7   ; sub 7  to make $a - $F
0456                HEXNUM2:      
0456   D6 30                  SUB   $30   ; Form decimal digit
0458   DA 3D 04               JP   c,num2   
045B   FE 10                  CP   $0F+1   
045D   D2 3D 04               JP   nc,num2   
0460   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0461   29                     ADD   hl,hl   ; 4X
0462   29                     ADD   hl,hl   ; 8X
0463   29                     ADD   hl,hl   ; 16X
0464   85                     ADD   a,l   ; add into bottom of hl
0465   6F                     LD   l,a   ; 
0466   18 E6                  JR   hexnum1   
0468                             ; 
0468                STRING:      
0468   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
046C   D5                     PUSH   de   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   12                     LD   (de),a   
0471   13                     INC   de   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   12                     LD   (de),a   
047A   13                     INC   de   
047B   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
047F   DD E9                  JP   (ix)   
0481                CHAR:        
0481   21 00 00               LD   hl,0   ; if `` is empty
0484                CHAR1:       
0484   03                     INC   bc   ; point to next char
0485   0A                     LD   a,(bc)   
0486   FE 60                  CP   "`"   ; ` is the string terminator
0488   28 09                  JR   z,char3   
048A   FE 5C                  CP   $5c   ; \ is the escape
048C   20 02                  JR   nz,char2   
048E   03                     INC   bc   
048F   0A                     LD   a,(bc)   
0490                CHAR2:       
0490   6F                     LD   l,a   
0491   18 F1                  JR   char1   
0493                CHAR3:       
0493   E5                     PUSH   hl   
0494   DD E9                  JP   (ix)   
0496                PAREN:       
0496   DD E9                  JP   (ix)   
0498                             ;     ld ix,paren2
0498                             ;     jr block
0498                             ; paren2:
0498                             ;     ld ix,next
0498                             ;     jp exec
0498                PARENEND:      
0498   DD E9                  JP   (ix)   
049A                             ;     pop hl                      ; hl = last result
049A                             ;     pop de
049A                             ;     pop bc
049A                             ;     pop bc
049A                             ;     push hl
049A                             ;     ld iyh,d
049A                             ;     ld iyl,e
049A                             ;     ld ix,next
049A                             ;     jp (ix)
049A                BLOCK:       
049A   03                     INC   bc   
049B   C5                     PUSH   bc   ; return first opcode of block
049C   16 01                  LD   d,1   ; nesting: count first parenthesis
049E                BLOCK1:      ; Skip to end of definition
049E   0A                     LD   a,(bc)   ; Get the next character
049F   03                     INC   bc   ; Point to next character
04A0   FE 21                  CP   " " + 1   ; ignore whitespace
04A2   38 FA                  JR   c,block1   
04A4   FE 29                  CP   ")"   
04A6   28 27                  JR   z,block4   
04A8   FE 7D                  CP   "}"   
04AA   28 23                  JR   z,block4   
04AC   FE 5D                  CP   "]"   
04AE   28 1F                  JR   z,block4   
04B0   FE 28                  CP   "("   
04B2   28 10                  JR   z,block2   
04B4   FE 7B                  CP   "{"   
04B6   28 0C                  JR   z,block2   
04B8   FE 5B                  CP   "["   
04BA   28 08                  JR   z,block2   
04BC   FE 27                  CP   "'"   
04BE   28 07                  JR   z,block3   
04C0   FE 60                  CP   "`"   
04C2   20 DA                  JR   nz,block1   
04C4                BLOCK2:      
04C4   14                     INC   d   
04C5   18 D7                  JR   block1   
04C7                BLOCK3:      
04C7   3E 80                  LD   a,$80   
04C9   AA                     XOR   d   
04CA   47                     LD   b,a   
04CB   20 D1                  JR   nz,block1   
04CD   18 03                  JR   block5   
04CF                BLOCK4:      
04CF   15                     DEC   d   
04D0   20 CC                  JR   nz,block1   ; get the next element
04D2                BLOCK5:      
04D2   0B                     DEC   bc   ; balanced, exit
04D3   DD E9                  JP   (ix)   
04D5                BLOCKEND:      
04D5   D9                     EXX      
04D6   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04D9   FD 56 01               LD   d,(iy+1)   
04DC   FD 4E 06               LD   c,(iy+6)   ; bc = IP
04DF   FD 46 07               LD   b,(iy+7)   
04E2   D9                     EXX      
04E3   FD 54                  LD   d,iyh   ; hl = BP
04E5   FD 5D                  LD   e,iyl   
04E7   EB                     EX   de,hl   
04E8   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist
04EB   FD 56 03               LD   d,(iy+3)   
04EE   EB                     EX   de,hl   
04EF   3E 04                  LD   a,4   ; a = (length + 4) * 2 = offset
04F1   86                     ADD   a,(hl)   
04F2   87                     ADD   a,a   
04F3   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
04F5   B7                     OR   a   ; bc = BP - sp = count
04F6   ED 72                  SBC   hl,sp   
04F8   44 4D                  LD   bc,hl   
04FA   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
04FC   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
04FD   6F                     LD   l,a   
04FE   3E 00                  LD   a,0   
0500   8C                     ADC   a,h   
0501   67                     LD   h,a   
0502   EB                     EX   de,hl   
0503   1B                     DEC   de   ; de = firstArg-1
0504   2B                     DEC   hl   ; hl = BP-1
0505   ED B8                  LDDR      
0507   13                     INC   de   ; sp = new sp
0508   EB                     EX   de,hl   
0509   F9                     LD   sp,hl   
050A   D9                     EXX      
050B   D5                     PUSH   de   ; oldBP
050C   C5                     PUSH   bc   ; IP
050D   D9                     EXX      
050E   C1                     POP   bc   
050F   FD E1                  POP   iy   
0511   DD E9                  JP   (ix)   
0513                             ; index -- value
0513                             ; returns value of arg
0513                ARG:         
0513   03                     INC   bc   ; get next char
0514   0A                     LD   a,(bc)   
0515   C5                     PUSH   bc   ; save IP
0516   FD 5E 02               LD   e,(iy+2)   ; hl = arglist
0519   FD 56 03               LD   d,(iy+3)   
051C   EB                     EX   de,hl   
051D   46                     LD   b,(hl)   ; b = length of arglist
051E   23                     INC   hl   
051F   48                     LD   c,b   ; offset = length * 2
0520   CB 21                  SLA   c   
0522                ARG0:        
0522   BE                     CP   (hl)   
0523   28 0B                  JR   z,arg1   
0525   23                     INC   hl   
0526   0D                     DEC   c   ; offset ++
0527   10 F9                  DJNZ   arg0   
0529   C1                     POP   bc   ; no match, restore IP
052A   21 00 00               LD   hl,0   ; return 0
052D   E5                     PUSH   hl   
052E   DD E9                  JP   (ix)   
0530                ARG1:        
0530   79                     LD   a,c   ; hl = (offset + 4) * 2
0531   C6 04                  ADD   a,4   
0533   6F                     LD   l,a   
0534   26 00                  LD   h,0   
0536   29                     ADD   hl,hl   
0537   C1                     POP   bc   ; restore IP
0538   FD 54                  LD   d,iyh   ; de = BP
053A   FD 5D                  LD   e,iyl   
053C   EB                     EX   de,hl   
053D   19                     ADD   hl,de   ; hl = BP + (offset + 4) * 2
053E   2B                     DEC   hl   ; de = arg
053F   22 9E 18               LD   (vSetter),hl   ; store address of arg in setter
0542   56                     LD   d,(hl)   
0543   2B                     DEC   hl   
0544   5E                     LD   e,(hl)   
0545   D5                     PUSH   de   ; push arg
0546   DD E9                  JP   (ix)   
0548                             ; @1..9
0548                             ; returns address of prop
0548                PROP:        
0548   03                     INC   bc   ; get next char
0549   0A                     LD   a,(bc)   
054A   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
054C   E6 0F                  AND   $0F   ; mask
054E   87                     ADD   a,a   ; double
054F   6F                     LD   l,a   ; hl = offset into args
0550   26 00                  LD   h,0   
0552   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0555   FD 56 07               LD   d,(iy+7)   
0558   19                     ADD   hl,de   ; find address of prop in array
0559   22 9E 18               LD   (vSetter),hl   ; store address in setter
055C   5E                     LD   e,(hl)   
055D   23                     INC   hl   
055E   56                     LD   d,(hl)   
055F   D5                     PUSH   de   ; push prop value
0560   DD E9                  JP   (ix)   
0562                             ; addr -- value
0562                DOLET:       
0562                GET:         
0562   E1                     POP   hl   
0563                GET1:        
0563   22 9E 18               LD   (vSetter),hl   ; store address in setter
0566   16 00                  LD   d,0   
0568   5E                     LD   e,(hl)   
0569   3A 9A 18               LD   a,(vDataWidth)   
056C   3D                     DEC   a   
056D   28 02                  JR   z,get2   
056F   23                     INC   hl   
0570   56                     LD   d,(hl)   
0571                GET2:        
0571   D5                     PUSH   de   
0572   DD E9                  JP   (ix)   
0574                             ; newvalue --
0574                SET:         
0574   D1                     POP   de   ; new value
0575   E1                     POP   hl   ; discard last accessed value
0576   2A 9E 18               LD   hl,(vSetter)   
0579   73                     LD   (hl),e   
057A   3A 9A 18               LD   a,(vDataWidth)   
057D   3D                     DEC   a   
057E   28 02                  JR   z,set1   
0580   23                     INC   hl   
0581   72                     LD   (hl),d   
0582                SET1:        
0582   DD E9                  JP   (ix)   
0584                             ; ifte
0584                             ; condition then -- value
0584                IF:          
0584   DD E9                  JP   (ix)   
0586                             ; ld de,0                      ; NUL pointer for else
0586                             ; jr ifte1
0586                             ; ifte
0586                             ; condition then else -- value
0586                IFTE:        
0586   DD E9                  JP   (ix)   
0588                             ;     pop de                      ; de = else
0588                             ; ifte1:
0588                             ;     pop hl                      ; hl = then
0588                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
0588                             ;     inc hl                      ; check for true
0588                             ;     ld a,h
0588                             ;     or l
0588                             ;     pop hl                      ; hl = then
0588                             ;     jr z,ifte2
0588                             ;     ex de,hl                    ; condition = false, hl = else
0588                             ; ifte2:
0588                             ;     ld a,h                      ; check if hl is NUL
0588                             ;     or l
0588                             ;     jr z,ifte3
0588                             ;     push bc                     ; push IP
0588                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0588                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0588                             ;     push de                     ; push SCP
0588                             ;     push iy                     ; push BP
0588                             ;     ld iy,0                     ; iy = sp
0588                             ;     add iy,sp
0588                             ;     ld bc,hl                    ; IP = then
0588                             ;     dec bc
0588                             ; ifte3:
0588                             ;     jp (ix)
0588                             ; switch
0588                             ; index array -- value
0588                SWITCH:      
0588   D1                     POP   de   ; de = array
0589   E1                     POP   hl   ; hl = index
058A   29                     ADD   hl,hl   ; indec *= 2
058B   19                     ADD   hl,de   ; add array[0]
058C   4E                     LD   c,(hl)   ; bc = case
058D   23                     INC   hl   
058E   46                     LD   b,(hl)   
058F   0B                     DEC   bc   
0590   DD E9                  JP   (ix)   
0592                             ; c b --
0592                             ; loops until c = 0
0592                LOOP:        
0592   DD E9                  JP   (ix)   
0594                             ;     pop de                      ; de = block                    c
0594                             ;     pop hl                      ; hl = condition
0594                             ;     push de
0594                             ;     push bc                     ; push IP
0594                             ;     ld bc,de                    ; bc = block
0594                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0594                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0594                             ;     push de                     ; push SCP
0594                             ;     push iy                     ; push BP
0594                             ;     ld iy,0                     ; iy = sp
0594                             ;     add iy,sp
0594                             ; loop1:
0594                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0594                             ;     or h
0594                             ;     jr z,loop3
0594                             ;     ld de,loop2-1               ; IP return address
0594                             ;     push de
0594                             ;     ld e,(iy+2)                 ; push parent SCP
0594                             ;     ld d,(iy+3)
0594                             ;     push de                     ;
0594                             ;     push iy                     ; push BP
0594                             ;     ld iy,0                     ; iy = sp
0594                             ;     add iy,sp
0594                             ;     push hl                     ; push condition
0594                             ;     dec bc
0594                             ;     jp (ix)
0594                             ; loop2:
0594                             ;     db ESC                      ; escape from interpreter
0594                             ;     ld c,(iy+6)                 ; bc = block
0594                             ;     ld b,(iy+7)
0594                             ;     pop hl                      ; hl = condition
0594                             ;     jr loop1
0594                             ; loop3:
0594                             ;     ld d,iyh                    ; de = BP
0594                             ;     ld e,iyl
0594                             ;     ex de,hl                    ; hl = BP, de = result
0594                             ;     ld sp,hl                    ; sp = BP
0594                             ;     pop hl                      ; hl = old BP
0594                             ;     pop bc                      ; pop SCP (discard)
0594                             ;     pop bc                      ; bc = IP
0594                             ;     ld sp,hl                    ; sp = old BP
0594                             ;     ld iy,0                     ; iy = sp
0594                             ;     add iy,sp
0594                             ;     ld ix,next                  ; needed?
0594                             ;     jp (ix)
0594                WORDS:       
0594   21 02 00               LD   hl,2   
0597   18 03                  JR   bytes1   
0599                BYTES:       
0599   21 01 00               LD   hl,1   
059C                BYTES1:      
059C   22 9A 18               LD   (vDataWidth),hl   
059F   DD E9                  JP   (ix)   
05A1                ARRAY:       
05A1   DD E9                  JP   (ix)   
05A3                             ;     push bc                     ; create stack frame, push IP
05A3                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05A3                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05A3                             ;     push de                     ; push SCP
05A3                             ;     push iy                     ; push BP
05A3                             ;     ld iy,0                     ; BP = SP
05A3                             ;     add iy,sp
05A3                             ;     jp (ix)
05A3                ARRAYEND:      
05A3   DD E9                  JP   (ix)   
05A5                             ;     ld d,iyh                    ; de = BP
05A5                             ;     ld e,iyl
05A5                             ;     ld ixh,d                    ; ix = BP
05A5                             ;     ld ixl,e
05A5                             ;     ld hl,de                    ; hl = de
05A5                             ;     or a
05A5                             ;     sbc hl,sp                   ; hl = array count (items on stack)
05A5                             ;     srl h
05A5                             ;     rr l
05A5                             ;     ex de,hl                    ; de = count
05A5                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
05A5                             ;     ld (hl),e
05A5                             ;     inc hl
05A5                             ;     ld (hl),d
05A5                             ;     inc hl                      ; hl = array[0], de = count
05A5                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
05A5                             ;     cp 1
05A5                             ;     jr nz, arrayEnd2
05A5                             ; arrayEnd1:                      ; byte
05A5                             ;     ld a,(ix-2)
05A5                             ;     ld (hl),a
05A5                             ;     inc hl
05A5                             ;     dec ix
05A5                             ;     dec ix
05A5                             ;     dec de
05A5                             ;     ld a,e
05A5                             ;     or d
05A5                             ;     jr nz,arrayEnd1
05A5                             ;     jr arrayEnd3
05A5                             ; arrayEnd2:                      ; word
05A5                             ;     ld a,(ix-2)
05A5                             ;     ld (hl),a
05A5                             ;     inc hl
05A5                             ;     ld a,(ix-1)
05A5                             ;     ld (hl),a
05A5                             ;     inc hl
05A5                             ;     dec ix
05A5                             ;     dec ix
05A5                             ;     dec de
05A5                             ;     ld a,e
05A5                             ;     or d
05A5                             ;     jr nz,arrayEnd2
05A5                             ; arrayEnd3:
05A5                             ;     ld d,iyh                    ; de = BP, hl = end of array
05A5                             ;     ld e,iyl
05A5                             ;     ex de,hl                    ; hl = BP, de = end of array
05A5                             ;     ld sp,hl                    ; sp = BP
05A5                             ;     pop hl                      ; hl = old BP, de = end of array
05A5                             ;     pop ix                      ; pop SCP (discard)
05A5                             ;     pop ix                      ; pop IP (discard)
05A5                             ;     ex de,hl
05A5                             ;     ld iyh,d
05A5                             ;     ld iyl,e
05A5                             ;     ex de,hl
05A5                             ;     ; ld sp,hl                    ; sp = old BP
05A5                             ;     ; ld iy,0                     ; iy = sp
05A5                             ;     ; add iy,sp
05A5                             ;     ld ix,next
05A5                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
05A5                             ;     inc hl
05A5                             ;     inc hl
05A5                             ;     push hl                     ; return array[0]
05A5                             ;     ex de,hl                    ; hl = end of array, de = array[0]
05A5                             ;     or a
05A5                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
05A5                             ;     ex de,hl
05A5                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
05A5                             ;     ld (hl),e                   ; array[-2] = size
05A5                             ;     inc hl
05A5                             ;     ld (hl),d
05A5                             ;     inc hl
05A5                             ;     add hl,de
05A5                             ;     ld (vHeapPtr),hl
05A5                             ;     jp (ix)
05A5                             ; str -- num
05A5                HASH:        
05A5   E1                     POP   hl   
05A6   C5                     PUSH   bc   
05A7   44 4D                  LD   bc,hl   
05A9   CD 1F 07               CALL   hashStr   
05AC   C1                     POP   bc   
05AD   E5                     PUSH   hl   
05AE   DD E9                  JP   (ix)   
05B0                             ; arglist block -- ptr
05B0                FUNC:        
05B0   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
05B3   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
05B5   23                     INC   hl   
05B6   36 B1                  LD   (hl),lsb(doCall)   
05B8   23                     INC   hl   
05B9   36 0A                  LD   (hl),msb(doCall)   
05BB   23                     INC   hl   
05BC   11 00 00               LD   de,0   ; todo: move this to after arglist?
05BF   73                     LD   (hl),e   ; compile array = 0
05C0   23                     INC   hl   
05C1   72                     LD   (hl),d   
05C2   23                     INC   hl   
05C3   D1                     POP   de   ; hl = heapPtr, de = block
05C4   EB                     EX   de,hl   ; hl = heapPtr, de = arglist, (sp) = block
05C5   E3                     EX   (sp),hl   
05C6   EB                     EX   de,hl   
05C7   73                     LD   (hl),e   ; compile arglist
05C8   23                     INC   hl   
05C9   72                     LD   (hl),d   
05CA   23                     INC   hl   
05CB   D1                     POP   de   ; de = block
05CC   C5                     PUSH   bc   ; (sp) = IP
05CD   06 01                  LD   b,1   ; b = nesting
05CF                FUNC1:       
05CF   1A                     LD   a,(de)   
05D0   13                     INC   de   
05D1   77                     LD   (hl),a   
05D2   23                     INC   hl   
05D3   FE 29                  CP   ")"   
05D5   28 27                  JR   z,func4   
05D7   FE 7D                  CP   "}"   
05D9   28 23                  JR   z,func4   
05DB   FE 5D                  CP   "]"   
05DD   28 1F                  JR   z,func4   
05DF   FE 28                  CP   "("   
05E1   28 10                  JR   z,func2   
05E3   FE 7B                  CP   "{"   
05E5   28 0C                  JR   z,func2   
05E7   FE 5B                  CP   "["   
05E9   28 08                  JR   z,func2   
05EB   FE 27                  CP   "'"   
05ED   28 07                  JR   z,func3   
05EF   FE 60                  CP   "`"   
05F1   20 DC                  JR   nz,func1   
05F3                FUNC2:       
05F3   04                     INC   b   
05F4   18 D9                  JR   func1   
05F6                FUNC3:       
05F6   3E 80                  LD   a,$80   
05F8   A8                     XOR   b   
05F9   47                     LD   b,a   
05FA   20 D3                  JR   nz,func1   
05FC   18 03                  JR   func4a   
05FE                FUNC4:       
05FE   05                     DEC   b   
05FF   20 CE                  JR   nz,func1   ; get the next element
0601                FUNC4A:      
0601   C1                     POP   bc   ; de = defstart, hl = IP
0602   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0606   D5                     PUSH   de   
0607   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
060A   DD E9                  JP   (ix)   
060C                             ; symbol func --
060C                DEF:         
060C   DD 21 12 06            LD   ix,def1   
0610   18 9E                  JR   func   
0612                DEF1:        
0612   DD 21 63 0A            LD   ix,next   
0616   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0617   60 69                  LD   hl,bc   
0619   18 1C                  JR   let1   
061B                             ; symbol value --
061B                LET:         
061B   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
061D   E3                     EX   (sp),hl   
061E   EB                     EX   de,hl   
061F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0622   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0624   23                     INC   hl   
0625   36 62                  LD   (hl),lsb(dolet)   
0627   23                     INC   hl   
0628   36 05                  LD   (hl),msb(dolet)   
062A   23                     INC   hl   
062B   73                     LD   (hl),e   
062C   23                     INC   hl   
062D   72                     LD   (hl),d   
062E   2B                     DEC   hl   
062F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0633   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0636   E1                     POP   hl   ; de = addr, hl = IP
0637                LET1:        
0637   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0638   44 4D                  LD   bc,hl   ; bc = symbol
063A   CD 38 07               CALL   defineEntry   
063D   38 00                  JR   c,let2   
063F                             ; call error
063F                             ; .cstr "Let Collision"
063F                LET2:        
063F   C1                     POP   bc   
0640   DD E9                  JP   (ix)   
0642                             ; str -- addr
0642                ADDR:        
0642   E1                     POP   hl   ; hl = hash
0643   C5                     PUSH   bc   
0644   44 4D                  LD   bc,hl   
0646   CD 5E 07               CALL   lookupEntry   
0649   38 03                  JR   c,addr1   
064B   21 00 00               LD   hl,0   
064E                             ; call printStr		
064E                             ; .cstr "Undefined"
064E                             ; jp interpret
064E                ADDR1:       
064E   C1                     POP   bc   
064F   11 03 00               LD   de,3   
0652   19                     ADD   hl,de   
0653   E5                     PUSH   hl   
0654   DD E9                  JP   (ix)   
0656                SYMBOL:      
0656   03                     INC   bc   
0657   11 00 1A               LD   de,PAD   
065A   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
065C   18 02                  JR   symbol1   
065E                SYMBOL0:      ; copy to PAD area
065E   03                     INC   bc   ; characters that are part of the identifier
065F   13                     INC   de   
0660                SYMBOL1:      ; 0-9 A-Z a-z _
0660   0A                     LD   a,(bc)   
0661   12                     LD   (de),a   
0662   FE 21                  CP   " "+1   
0664   38 0A                  JR   c,symbol2   
0666   6F                     LD   l,a   
0667   7E                     LD   a,(hl)   
0668   FE 5B                  CP   lsb(ident_)   
066A   28 F2                  JR   z,symbol0   
066C   FE 00                  CP   lsb(num_)   
066E   28 EE                  JR   z,symbol0   
0670                SYMBOL2:      
0670   0B                     DEC   bc   
0671   AF                     XOR   a   
0672   12                     LD   (de),a   ; terminate string with NUL
0673   C5                     PUSH   bc   
0674   01 00 1A               LD   bc,PAD   
0677   CD 1F 07               CALL   hashStr   ; hl = hash
067A   C1                     POP   bc   
067B   E5                     PUSH   hl   
067C   DD E9                  JP   (ix)   
067E                IDENT:       
067E   11 00 1A               LD   de,PAD   
0681   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0683   18 02                  JR   ident1   
0685                IDENT0:      ; copy to PAD area
0685   03                     INC   bc   ; characters that are part of the identifier
0686   13                     INC   de   
0687                IDENT1:      ; 0-9 A-Z a-z _
0687   0A                     LD   a,(bc)   
0688   12                     LD   (de),a   
0689                             ; or a
0689                             ; jr z,ident2
0689   FE 21                  CP   " "+1   
068B   38 0A                  JR   c,ident2   
068D   6F                     LD   l,a   
068E   7E                     LD   a,(hl)   
068F   FE 5B                  CP   lsb(ident_)   
0691   28 F2                  JR   z,ident0   
0693   FE 00                  CP   lsb(num_)   
0695   28 EE                  JR   z,ident0   
0697                IDENT2:      
0697   0B                     DEC   bc   
0698   AF                     XOR   a   
0699   12                     LD   (de),a   ; terminate string with NUL
069A   C5                     PUSH   bc   
069B   01 00 1A               LD   bc,PAD   
069E   CD 1F 07               CALL   hashStr   ; hl = hash
06A1   44 4D                  LD   bc,hl   
06A3   CD 5E 07               CALL   lookupEntry   
06A6   C1                     POP   bc   
06A7   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06A9   DD E9                  JP   (ix)   
06AB                IDENT3:      
06AB   E9                     JP   (hl)   
06AC                FRAC:        
06AC   2A 98 18               LD   hl,(vFrac)   
06AF   E5                     PUSH   hl   
06B0   DD E9                  JP   (ix)   
06B2                SQRT1:       
06B2   E1                     POP   hl   
06B3   C5                     PUSH   bc   
06B4   CD 9B 07               CALL   squareRoot   
06B7   ED 43 98 18            LD   (vFrac),bc   
06BB   C1                     POP   bc   
06BC   D5                     PUSH   de   
06BD   DD E9                  JP   (ix)   
06BF                ABS1:        
06BF   E1                     POP   hl   
06C0   CB 7C                  BIT   7,h   
06C2   C8                     RET   z   
06C3   AF                     XOR   a   
06C4   95                     SUB   l   
06C5   6F                     LD   l,a   
06C6   9F                     SBC   a,a   
06C7   94                     SUB   h   
06C8   67                     LD   h,a   
06C9   E5                     PUSH   hl   
06CA   DD E9                  JP   (ix)   
06CC                MOD:         
06CC   D1                     POP   de   ; get first value
06CD   E1                     POP   hl   ; get 2nd value
06CE   C5                     PUSH   bc   ; preserve the IP
06CF   44 4D                  LD   bc,hl   
06D1   CD 82 07               CALL   divide   
06D4   C1                     POP   bc   
06D5   E5                     PUSH   hl   ; push remainder
06D6   DD E9                  JP   (ix)   
06D8                             ; hl = value1, de = value2
06D8                             ; hl = result
06D8                EQUALS:      
06D8   B7                     OR   a   ; reset the carry flag
06D9   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06DB   28 10                  JR   z,true1   
06DD   C3 F3 06               JP   false1   
06E0                             ; hl = value1 de = value2
06E0                             ; hl = result
06E0                LESSTHANEQ:      
06E0   B7                     OR   a   
06E1   ED 52                  SBC   hl,de   
06E3   18 05                  JR   lessthan1   
06E5                             ; hl = value1 de = value2
06E5                             ; hl = result
06E5                LESSTHAN:      
06E5   B7                     OR   a   
06E6   ED 52                  SBC   hl,de   
06E8   28 09                  JR   z,false1   
06EA                LESSTHAN1:      
06EA   FA F3 06               JP   m,false1   
06ED                TRUE1:       
06ED   21 FF FF               LD   hl,TRUE   
06F0   E5                     PUSH   hl   
06F1   DD E9                  JP   (ix)   
06F3                FALSE1:      
06F3   21 00 00               LD   hl,FALSE   
06F6   E5                     PUSH   hl   
06F7   DD E9                  JP   (ix)   
06F9                             ; Z80 port input
06F9                             ; port -- value
06F9                INPUT:       
06F9   E1                     POP   hl   
06FA   59                     LD   e,c   ; save IP
06FB   4D                     LD   c,l   
06FC   ED 68                  IN   l,(c)   
06FE   26 00                  LD   h,0   
0700   4B                     LD   c,e   ; restore IP
0701   E5                     PUSH   hl   
0702   DD E9                  JP   (ix)   
0704                             ; Z80 port output
0704                             ; value port --
0704                OUTPUT:      
0704   E1                     POP   hl   
0705   59                     LD   e,c   ; save IP
0706   4D                     LD   c,l   
0707   E1                     POP   hl   
0708   ED 69                  OUT   (c),l   
070A   4B                     LD   c,e   ; restore IP
070B   DD E9                  JP   (ix)   
070D                KEY:         
070D   CD 81 00               CALL   getchar   
0710   26 00                  LD   h,0   
0712   6F                     LD   l,a   
0713   E5                     PUSH   hl   
0714   DD E9                  JP   (ix)   
0716                NEG:         
0716   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0719   D1                     POP   de   
071A   C3 A1 03               JP   sub2   ; use the SUBtract routine
071D                FILTER:      
071D                MAP:         
071D                SCAN:        
071D   DD E9                  JP   (ix)   
071F                             ; -------------------------------------------------------------------------------
071F                             ; hash C-string
071F                             ; BC = str
071F                             ; HL = hash
071F                HASHSTR:      
071F   21 00 00               LD   hl,0   
0722                HASHSTR1:      
0722   0A                     LD   a,(bc)   ; load next char
0723   03                     INC   bc   
0724   FE 00                  CP   0   ; NUL?
0726   C8                     RET   z   
0727                HASHSTR2:      
0727   16 00                  LD   d,0   
0729   5F                     LD   e,a   
072A   19                     ADD   hl,de   
072B   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
072D   29                     ADD   hl,hl   ; shift left
072E   19                     ADD   hl,de   ; add
072F   29                     ADD   hl,hl   ; shift left
0730   29                     ADD   hl,hl   ; shift left
0731   29                     ADD   hl,hl   ; shift left
0732   29                     ADD   hl,hl   ; shift left
0733   29                     ADD   hl,hl   ; shift left
0734   29                     ADD   hl,hl   ; shift left
0735   19                     ADD   hl,de   ; add
0736   18 EA                  JR   hashStr1   
0738                             ; add entry to hash slots and hash pointers
0738                             ; bc = hash (b = hi, c = lo), de = addr
0738                             ; sets carry if successful
0738                DEFINEENTRY:      
0738   CB 21                  SLA   c   ; lo = lo * 2
073A   69                     LD   l,c   ; lo1 = lo
073B   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
073D                DEFINEENTRY0:      
073D   7E                     LD   a,(hl)   ; a = (lo1)
073E   FE FF                  CP   UNUSED   ; is it unused?
0740   28 12                  JR   z,defineEntry3   ; yes, add entry
0742   79                     LD   a,c   ; a = lo
0743   BE                     CP   (hl)   ; compare (lo1) with lo
0744   20 06                  JR   nz,defineEntry1   ; no match loop around
0746   2C                     INC   l   
0747   78                     LD   a,b   ; a = hi
0748   BE                     CP   (hl)   ; compare (lo1+1) with hi
0749   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
074B   2D                     DEC   l   ; restore l
074C                DEFINEENTRY1:      
074C   2C                     INC   l   ; try next entry
074D   2C                     INC   l   
074E   79                     LD   a,c   ; compare lo and lo1
074F   BD                     CP   l   ; if equal then there's no space left, reject
0750   20 EB                  JR   nz,defineEntry0   
0752                DEFINEENTRY2:      
0752   B7                     OR   a   ; clear carry flag, failure
0753   C9                     RET      
0754                DEFINEENTRY3:      ; new entry
0754   71                     LD   (hl),c   ; (lo1) = hash lo
0755   23                     INC   hl   
0756   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0757   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0759   72                     LD   (hl),d   
075A   2B                     DEC   hl   
075B   73                     LD   (hl),e   ; (slot + 2) = address
075C   37                     SCF      ; set carry flag, success
075D   C9                     RET      
075E                             ; looks up hash and returns address
075E                             ; bc = hash
075E                             ; returns addr in hl, sets carry if successful
075E                LOOKUPENTRY:      
075E   CB 21                  SLA   c   ; lo = lo * 2
0760   69                     LD   l,c   ; lo1 = lo
0761   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0763                LOOKUPENTRY0:      
0763   7E                     LD   a,(hl)   ; a = (hl), slot
0764   FE FF                  CP   UNUSED   ; is it unused?
0766   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0768   79                     LD   a,c   ; a = lo
0769   BE                     CP   (hl)   ; compare (lo1) with lo
076A   20 06                  JR   nz,lookupEntry1   ; no match loop around
076C   2C                     INC   l   
076D   78                     LD   a,b   ; a = hi
076E   BE                     CP   (hl)   ; compare (lo1+1) with hi
076F   28 09                  JR   z,lookupEntry3   
0771   2D                     DEC   l   
0772                LOOKUPENTRY1:      
0772   2C                     INC   l   
0773   2C                     INC   l   
0774   79                     LD   a,c   
0775   BD                     CP   l   ; no space left, reject
0776   20 EB                  JR   nz,lookupEntry0   
0778                LOOKUPENTRY2:      
0778   B7                     OR   a   ; clear carry flag, failure
0779   C9                     RET      
077A                LOOKUPENTRY3:      
077A   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
077C   56                     LD   d,(hl)   
077D   2D                     DEC   l   ; restore l
077E   5E                     LD   e,(hl)   ; (slot + 2) = address
077F   EB                     EX   de,hl   
0780   37                     SCF      
0781   C9                     RET      
0782                             ; division subroutine.
0782                             ; bc: divisor, de: dividend, hl: remainder
0782                DIVIDE:      
0782   21 00 00               LD   hl,0   ; zero the remainder
0785   3E 10                  LD   a,16   ; loop counter
0787                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0787   CB 21                  SLA   c   
0789   CB 10                  RL   b   
078B   ED 6A                  ADC   hl,hl   
078D   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
078F   38 03                  JR   c,divide2   
0791   0C                     INC   c   
0792   18 01                  JR   divide3   
0794                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0794   19                     ADD   hl,de   
0795                DIVIDE3:      
0795   3D                     DEC   a   
0796   20 EF                  JR   nz,divide1   
0798   50 59                  LD   de,bc   ; result from bc to de
079A   C9                     RET      
079B                             ; squareroot
079B                             ; Input: HL = value
079B                             ; Result: DE = square root BC = remainder
079B                SQUAREROOT:      
079B   01 00 08               LD   bc,0800h   
079E   59                     LD   e,c   
079F   AF                     XOR   a   
07A0                SQUAREROOT1:      
07A0   29                     ADD   hl,hl   
07A1   CB 11                  RL   c   
07A3   ED 6A                  ADC   hl,hl   
07A5   CB 11                  RL   c   
07A7   30 02                  JR   nc,$+4   
07A9   CB C5                  SET   0,l   
07AB   7B                     LD   a,e   
07AC   87                     ADD   a,a   
07AD   5F                     LD   e,a   
07AE   87                     ADD   a,a   
07AF   CB 45                  BIT   0,l   
07B1   20 03                  JR   nz,$+5   
07B3   91                     SUB   c   
07B4   30 05                  JR   nc,squareRoot4   
07B6   79                     LD   a,c   
07B7   93                     SUB   e   
07B8   1C                     INC   e   
07B9   93                     SUB   e   
07BA   4F                     LD   c,a   
07BB                SQUAREROOT4:      
07BB   10 E3                  DJNZ   squareRoot1   
07BD   CB 45                  BIT   0,l   
07BF   28 01                  JR   z,squareRoot5   
07C1   04                     INC   b   
07C2                SQUAREROOT5:      
07C2   16 00                  LD   d,0   
07C4   C9                     RET      
07C5                PRTDEC:      
07C5   CB 7C                  BIT   7,h   
07C7   28 0B                  JR   z,prtdec0   
07C9   3E 2D                  LD   a,"-"   
07CB   CD 85 00               CALL   putchar   
07CE   AF                     XOR   a   
07CF   95                     SUB   l   
07D0   6F                     LD   l,a   
07D1   9F                     SBC   a,a   
07D2   94                     SUB   h   
07D3   67                     LD   h,a   
07D4                PRTDEC0:      
07D4   C5                     PUSH   bc   
07D5   0E 00                  LD   c,0   ; leading zeros flag = false
07D7   11 F0 D8               LD   de,-10000   
07DA   CD F6 07               CALL   prtdec1   
07DD   11 18 FC               LD   de,-1000   
07E0   CD F6 07               CALL   prtdec1   
07E3   11 9C FF               LD   de,-100   
07E6   CD F6 07               CALL   prtdec1   
07E9   1E F6                  LD   e,-10   
07EB   CD F6 07               CALL   prtdec1   
07EE   0C                     INC   c   ; flag = true for at least digit
07EF   1E FF                  LD   e,-1   
07F1   CD F6 07               CALL   prtdec1   
07F4   C1                     POP   bc   
07F5   C9                     RET      
07F6                PRTDEC1:      
07F6   06 2F                  LD   b,"0"-1   
07F8                PRTDEC2:      
07F8   04                     INC   b   
07F9   19                     ADD   hl,de   
07FA   38 FC                  JR   c,prtdec2   
07FC   ED 52                  SBC   hl,de   
07FE   3E 30                  LD   a,"0"   
0800   B8                     CP   b   
0801   20 05                  JR   nz,prtdec3   
0803   AF                     XOR   a   
0804   B1                     OR   c   
0805   C8                     RET   z   
0806   18 01                  JR   prtdec4   
0808                PRTDEC3:      
0808   0C                     INC   c   
0809                PRTDEC4:      
0809   78                     LD   a,b   
080A   C3 85 00               JP   putchar   
080D                PRTHEX:      ; display hl as a 16-bit number in hex.
080D   C5                     PUSH   bc   ; preserve the IP
080E   7C                     LD   a,h   
080F   CD 18 08               CALL   prthex2   
0812   7D                     LD   a,l   
0813   CD 18 08               CALL   prthex2   
0816   C1                     POP   bc   
0817   C9                     RET      
0818                PRTHEX2:      
0818   4F                     LD   c,a   
0819   1F                     RRA      
081A   1F                     RRA      
081B   1F                     RRA      
081C   1F                     RRA      
081D   CD 21 08               CALL   prthex3   
0820   79                     LD   a,c   
0821                PRTHEX3:      
0821   E6 0F                  AND   0x0F   
0823   C6 90                  ADD   a,0x90   
0825   27                     DAA      
0826   CE 40                  ADC   a,0x40   
0828   27                     DAA      
0829   C3 85 00               JP   putchar   
082C                PRTSTR0:      
082C   CD 85 00               CALL   putchar   
082F   23                     INC   hl   
0830                PRTSTR:      
0830   7E                     LD   a,(hl)   
0831   B7                     OR   a   
0832   20 F8                  JR   nz,prtstr0   
0834   C9                     RET      
0835                             ; **************************************************************************
0835                             ; calculate nesting value
0835                             ; a is char to be tested,
0835                             ; e is the nesting value (initially 0)
0835                             ; e is increased by ( and [
0835                             ; e is decreased by ) and ]
0835                             ; e has its bit 7 toggled by `
0835                             ; limited to 127 levels
0835                             ; **************************************************************************
0835                NESTING:      
0835   FE 22                  CP   $22   ; quote char
0837   20 0A                  JR   nz,nesting1   
0839   CB 7B                  BIT   7,e   
083B   28 03                  JR   z,nesting1a   
083D   CB BB                  RES   7,e   
083F   C9                     RET      
0840                NESTING1A:      
0840   CB FB                  SET   7,e   
0842   C9                     RET      
0843                NESTING1:      
0843   CB 7B                  BIT   7,e   
0845   C0                     RET   nz   
0846   FE 7B                  CP   "{"   
0848   28 08                  JR   z,nesting2   
084A   FE 5B                  CP   "["   
084C   28 04                  JR   z,nesting2   
084E   FE 28                  CP   "("   
0850   20 02                  JR   nz,nesting3   
0852                NESTING2:      
0852   1C                     INC   e   
0853   C9                     RET      
0854                NESTING3:      
0854   FE 7D                  CP   "}"   
0856   28 07                  JR   z,nesting4   
0858   FE 5D                  CP   "]"   
085A   28 03                  JR   z,nesting4   
085C   FE 29                  CP   ")"   
085E   C0                     RET   nz   
085F                NESTING4:      
085F   1D                     DEC   e   
0860   C9                     RET      
0861                PROMPT:      
0861   CD 71 08               CALL   printStr   
0864   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0869   C9                     RET      
086A                CRLF:        
086A   CD 71 08               CALL   printStr   
086D   0D 0A 00               .CSTR   "\r\n"   
0870   C9                     RET      
0871                PRINTSTR:      
0871   E3                     EX   (sp),hl   ; swap			
0872   CD 30 08               CALL   prtstr   
0875   23                     INC   hl   ; inc past NUL
0876   E3                     EX   (sp),hl   ; put it back	
0877   C9                     RET      
0878                DEFINE:      
0878   E1                     POP   hl   
0879   7E                     LD   a,(hl)   
087A   23                     INC   hl   
087B   44 4D                  LD   bc,hl   
087D   5F                     LD   e,a   
087E   16 00                  LD   d,0   
0880   19                     ADD   hl,de   
0881   5E                     LD   e,(hl)   
0882   23                     INC   hl   
0883   56                     LD   d,(hl)   
0884   23                     INC   hl   
0885   E5                     PUSH   hl   ; bc = str
0886   D5                     PUSH   de   
0887   CD 1F 07               CALL   hashStr   ; hl = hash
088A   D1                     POP   de   
088B   44 4D                  LD   bc,hl   
088D   C3 38 07               JP   defineEntry   
0890                INIT:        
0890   DD 21 63 0A            LD   ix,next   
0894   FD 21 80 18            LD   iy,STACK   
0898   21 80 01               LD   hl,isysVars   
089B   11 98 18               LD   de,sysVars   
089E   01 10 00               LD   bc,8 * 2   
08A1   ED B0                  LDIR      
08A3   3E FF                  LD   a,UNUSED   
08A5   06 00                  LD   b,0   
08A7   21 00 1B               LD   hl,hashSlots   
08AA                INIT1:       
08AA   77                     LD   (hl),a   
08AB   23                     INC   hl   
08AC   10 FC                  DJNZ   init1   
08AE   CD 78 08               CALL   define   
08B1   04 61 62 73 00         .PSTR   "abs",0   
08B6   BF 06                  DW   abs1   
08B8   CD 78 08               CALL   define   
08BB   05 61 64 64 72 00      .PSTR   "addr",0   
08C1   42 06                  DW   addr   
08C3   CD 78 08               CALL   define   
08C6   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08CD   99 05                  DW   bytes   
08CF   CD 78 08               CALL   define   
08D2   05 63 61 6C 6C 00      .PSTR   "call",0   
08D8   B1 0A                  DW   call   
08DA                             ; call define
08DA                             ; .pstr "closure",0
08DA                             ; dw closure
08DA   CD 78 08               CALL   define   
08DD   04 64 65 66 00         .PSTR   "def",0   
08E2   0C 06                  DW   def   
08E4   CD 78 08               CALL   define   
08E7   05 65 78 65 63 00      .PSTR   "exec",0   
08ED   98 0A                  DW   exec   
08EF   CD 78 08               CALL   define   
08F2   06 66 61 6C 73 65 00   .PSTR   "false",0   
08F9   00 00                  DW   false   
08FB   CD 78 08               CALL   define   
08FE   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0906   1D 07                  DW   filter   
0908   CD 78 08               CALL   define   
090B   05 66 72 61 63 00      .PSTR   "frac",0   
0911   AC 06                  DW   frac   
0913   CD 78 08               CALL   define   
0916   05 66 75 6E 63 00      .PSTR   "func",0   
091C   B0 05                  DW   func   
091E   CD 78 08               CALL   define   
0921   04 67 65 74 00         .PSTR   "get",0   
0926   62 05                  DW   get   
0928   CD 78 08               CALL   define   
092B   05 68 61 73 68 00      .PSTR   "hash",0   
0931   A5 05                  DW   hash   
0933   CD 78 08               CALL   define   
0936   06 69 6E 70 75 74 00   .PSTR   "input",0   
093D   F9 06                  DW   input   
093F   CD 78 08               CALL   define   
0942   03 69 66 00            .PSTR   "if",0   
0946   84 05                  DW   if   
0948   CD 78 08               CALL   define   
094B   05 69 66 74 65 00      .PSTR   "ifte",0   
0951   86 05                  DW   ifte   
0953   CD 78 08               CALL   define   
0956   04 6B 65 79 00         .PSTR   "key",0   
095B   0D 07                  DW   key   
095D   CD 78 08               CALL   define   
0960   04 6C 65 74 00         .PSTR   "let",0   
0965   1B 06                  DW   let   
0967   CD 78 08               CALL   define   
096A   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0970   92 05                  DW   loop   
0972   CD 78 08               CALL   define   
0975   04 6D 61 70 00         .PSTR   "map",0   
097A   1D 07                  DW   map   
097C   CD 78 08               CALL   define   
097F   04 6D 6F 64 00         .PSTR   "mod",0   
0984   CC 06                  DW   mod   
0986   CD 78 08               CALL   define   
0989   04 6E 65 67 00         .PSTR   "neg",0   
098E   16 07                  DW   neg   
0990   CD 78 08               CALL   define   
0993   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
099B   04 07                  DW   output   
099D   CD 78 08               CALL   define   
09A0   05 73 63 61 6E 00      .PSTR   "scan",0   
09A6   01 00                  DW   scan   
09A8   CD 78 08               CALL   define   
09AB   04 73 65 74 00         .PSTR   "set",0   
09B0   74 05                  DW   set   
09B2   CD 78 08               CALL   define   
09B5   04 73 68 6C 00         .PSTR   "shl",0   
09BA   DC 03                  DW   shl   
09BC   CD 78 08               CALL   define   
09BF   04 73 68 72 00         .PSTR   "shr",0   
09C4   EC 03                  DW   shr   
09C6   CD 78 08               CALL   define   
09C9   05 73 71 72 74 00      .PSTR   "sqrt",0   
09CF   B2 06                  DW   sqrt1   
09D1   CD 78 08               CALL   define   
09D4   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09DC   88 05                  DW   switch   
09DE   CD 78 08               CALL   define   
09E1   05 74 72 75 65 00      .PSTR   "true",0   
09E7   FF FF                  DW   true   
09E9   CD 78 08               CALL   define   
09EC   06 77 6F 72 64 73 00   .PSTR   "words",0   
09F3   94 05                  DW   words   
09F5   C9                     RET      
09F6                START:       
09F6   31 80 18               LD   sp,STACK   ; start of Siena
09F9   CD 90 08               CALL   init   ; setups
09FC   CD 71 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09FF   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A0C                INTERPRET:      
0A0C   CD 61 08               CALL   prompt   
0A0F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A12   ED 43 9C 18            LD   (vTIBPtr),bc   
0A16                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A16   1E 00                  LD   e,0   ; initilize nesting value
0A18   C5                     PUSH   bc   ; save offset into TIB,
0A19                             ; bc is also the count of chars in TIB
0A19   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A1C   18 06                  JR   interpret4   
0A1E                INTERPRET3:      
0A1E   7E                     LD   a,(hl)   ; a = char in TIB
0A1F   23                     INC   hl   ; inc pointer into TIB
0A20   0B                     DEC   bc   ; dec count of chars in TIB
0A21   CD 35 08               CALL   nesting   ; update nesting value
0A24                INTERPRET4:      
0A24   79                     LD   a,c   ; is count zero?
0A25   B0                     OR   b   
0A26   20 F6                  JR   nz,interpret3   ; if not loop
0A28   C1                     POP   bc   ; restore offset into TIB
0A29                WAITCHAR:      
0A29   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A2C   FE 20                  CP   $20   ; compare to space
0A2E   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A30   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A32                             ; ???? NEEDED?
0A32   28 27                  JR   z,waitchar4   
0A34   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A36   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A38                MACRO:       
0A38                             ;  ld (vTIBPtr),bc
0A38                             ;  ld hl,ctrlCodes
0A38                             ;  add a,l			            ; look up key of macros
0A38                             ;  ld l,a
0A38                             ;  ld e,(hl)
0A38                             ;  ld a,e
0A38                             ;  or a
0A38                             ;  jr z,macro1
0A38                             ;  ld d,msb(macros)
0A38                             ;  push de
0A38                             ;  call call		            ; Siena exec_ operation and jump to it
0A38                             ;  db DC1,0
0A38                             ; macro1:
0A38                             ;  ld bc,(vTIBPtr)
0A38   18 DC                  JR   interpret2   
0A3A                WAITCHAR1:      
0A3A   21 00 19               LD   hl,TIB   
0A3D   09                     ADD   hl,bc   
0A3E   77                     LD   (hl),a   ; store the character in textbuf
0A3F   03                     INC   bc   
0A40   CD 85 00               CALL   putchar   ; echo character to screen
0A43   CD 35 08               CALL   nesting   
0A46   18 E1                  JR   waitchar   ; wait for next character
0A48                WAITCHAR3:      
0A48   21 00 19               LD   hl,TIB   
0A4B   09                     ADD   hl,bc   
0A4C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A4E   23                     INC   hl   
0A4F   36 0A                  LD   (hl),"\n"   
0A51   23                     INC   hl   
0A52   03                     INC   bc   
0A53   03                     INC   bc   
0A54   CD 6A 08               CALL   crlf   ; echo character to screen
0A57   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A58   B7                     OR   a   
0A59   20 CE                  JR   nz,waitchar   
0A5B                             ; ld (hl),ETX                 ; store end of text ETX in text buffer ??? NEEDED?
0A5B                             ; inc bc
0A5B                WAITCHAR4:      
0A5B   ED 43 9C 18            LD   (vTIBPtr),bc   
0A5F   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A62                             ; we pressed enter
0A62   0B                     DEC   bc   
0A63                NEXT:        
0A63   03                     INC   bc   ; Increment the IP
0A64   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A65   FE 20                  CP   " "   ; whitespace?
0A67   28 FA                  JR   z,next   ; space? ignore
0A69   38 07                  JR   c,next1   
0A6B   6F                     LD   l,a   ; index into table
0A6C   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A6E   6E                     LD   l,(hl)   ; get low jump address
0A6F   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A71   E9                     JP   (hl)   ; Jump to routine
0A72                NEXT1:       
0A72   FE 1B                  CP   ESC   ; escape from interpreter
0A74   28 07                  JR   z,escape   
0A76   FE 00                  CP   NUL   ; end of input string?
0A78   28 07                  JR   z,exit   
0A7A   C3 0C 0A               JP   interpret   ; no, other whitespace, macros?
0A7D                ESCAPE:      
0A7D   60 69                  LD   hl,bc   ; address of code after escape opcode
0A7F   23                     INC   hl   
0A80   E9                     JP   (hl)   
0A81                EXIT:        
0A81   50 59                  LD   de,bc   ; address of code after exit opcode
0A83   13                     INC   de   
0A84   D9                     EXX      
0A85   C1                     POP   bc   ; bc = last result
0A86   E1                     POP   hl   ; pop array (discard)
0A87   FD 54                  LD   d,iyh   ; de = BP
0A89   FD 5D                  LD   e,iyl   
0A8B   EB                     EX   de,hl   ; hl = BP
0A8C   F9                     LD   sp,hl   ; sp = BP
0A8D   D9                     EXX      
0A8E   E1                     POP   hl   ; hl = old BP
0A8F   C1                     POP   bc   ; pop SCP (discard)
0A90   C1                     POP   bc   ; pop array (discard)
0A91   C1                     POP   bc   ; bc = IP
0A92   F9                     LD   sp,hl   ; sp = old BP
0A93   D9                     EXX      
0A94   C5                     PUSH   bc   ; push result
0A95   D9                     EXX      
0A96   EB                     EX   de,hl   
0A97   E9                     JP   (hl)   
0A98                             ; execute a block of code
0A98                             ; uses parent scope
0A98                EXEC:        ; execute code at pointer
0A98   E1                     POP   hl   ; hl = pointer to code
0A99   7C                     LD   a,h   ; skip if destination address is NUL
0A9A   B5                     OR   l   
0A9B   28 12                  JR   z,exec2   
0A9D   C5                     PUSH   bc   ; push IP
0A9E   11 00 00               LD   de,0   
0AA1   D5                     PUSH   de   ; array = 0
0AA2   FD E5                  PUSH   iy   ; push SCP
0AA4   FD E5                  PUSH   iy   ; push BP
0AA6   FD 21 00 00            LD   iy,0   ; BP = SP
0AAA   FD 39                  ADD   iy,sp   
0AAC   44 4D                  LD   bc,hl   ; IP = pointer to code
0AAE   0B                     DEC   bc   ; dec to prepare for next routine
0AAF                EXEC2:       
0AAF   DD E9                  JP   (ix)   
0AB1                             ; call with args
0AB1                             ; creates a scope
0AB1                CALL:        
0AB1                DOCALL:      ; execute code at pointer
0AB1   E1                     POP   hl   ; hl = pointer to code
0AB2   7C                     LD   a,h   ; skip if destination address is NUL
0AB3   B5                     OR   l   
0AB4   28 14                  JR   z,doCall2   
0AB6   C5                     PUSH   bc   ; push IP
0AB7   5E                     LD   e,(hl)   ; push static array
0AB8   23                     INC   hl   
0AB9   56                     LD   d,(hl)   
0ABA   23                     INC   hl   
0ABB   D5                     PUSH   de   
0ABC   5E                     LD   e,(hl)   ; push arglist
0ABD   23                     INC   hl   
0ABE   56                     LD   d,(hl)   
0ABF   D5                     PUSH   de   ; push arglist, hl = block-1
0AC0   FD E5                  PUSH   iy   ; push BP
0AC2   FD 21 00 00            LD   iy,0   ; BP = SP
0AC6   FD 39                  ADD   iy,sp   
0AC8   44 4D                  LD   bc,hl   ; IP = block-1, ready for NEXT
0ACA                DOCALL2:      
0ACA   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x '' {1} def x", 1
4000   31 80 18               LD   SP,STACK   
4003   CD 90 08               CALL   init   
4006   CD 98 0A               CALL   exec   
4009   3A 78 20 27 27 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   ":x '' {1} def x"   
4019                          ;*Macro unroll:  expect ":x '' {1} def x",1
4019   E1                     POP   HL   
401A   E5                     PUSH   HL   
401B   11 01 00               LD   DE,1   
401E   B7                     OR   A   
401F   ED 52                  SBC   HL,DE   
4021   7D                     LD   A,L   
4022   B4                     OR   H   
4023   28 5A                  JR   Z,expectM_0_2351S43   
4025   CD 71 08               CALL   printStr   
4028   43 6F 64 65 3A 20 3A 78 20 27 27 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x '' {1} def x"   
403E   CD 71 08               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 01 00               LD   HL,1   
4053   CD C5 07               CALL   prtdec   
4056   CD 71 08               CALL   printStr   
4059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4066   E1                     POP   hl   
4067   E5                     PUSH   hl   
4068   CD C5 07               CALL   prtdec   
406B   E1                     POP   hl   
406C   CD 71 08               CALL   printStr   
406F   20 28 23 00            .CSTR   " (#"   
4073   CD 0D 08               CALL   prthex   
4076   CD 71 08               CALL   printStr   
4079   29 0D 0A 00            .CSTR   ")\r\n"   
407D   76                     HALT      
407E   00                     .CSTR      
407F                EXPECTM_0_2351S43:      
407F   E1                     POP   HL   
4080                             ; test ":x 'a' {$a} def 2 x", 2
4080                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4080                             ; test ":x '' { 3 2 } def x + ", 5
4080                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4080                             ; test "1", 1
4080                             ; test "2", 2
4080                             ; test "1", 1
4080                             ; test "0", 0
4080                             ; test "10", 10
4080                             ; test "123", 123
4080                             ; test "-1",-1
4080                             ; test "``", 0
4080                             ; test "`a`", $61
4080                             ; test "`\\``", $60
4080                             ; test "#10", $10
4080                             ; test "#FF", $FF
4080                             ; test "-1 2 +",1
4080                             ; test "-1 1 +",0
4080                             ; test "1 2 +", 3
4080                             ; test "4 1 2 +", 3
4080                             ; test "1 2 +", 3
4080                             ; test "123 456 +", 123+456
4080                             ; test "64 128 +", 64+128
4080                             ; test "-1 -1 -",0
4080                             ; test "5 3 -", 2
4080                             ; test "3 5 &", 1
4080                             ; test "3 5 |", 7
4080                             ; test "2 3 *", 6
4080                             ; test "1 2 3 + *", 5
4080                             ; test "7 3 /", 2
4080                             ; test "7 3 / frac", 1
4080                             ; test "10 sqrt", 3
4080                             ; test "10 sqrt frac", 1
4080                             ; test "2 3 =", FALSE
4080                             ; test "3 3 =", TRUE
4080                             ; test "1 2 <", TRUE
4080                             ; test "2 1 <", FALSE
4080                             ; test "2 3 <", TRUE
4080                             ; test "3 3 <", FALSE
4080                             ; test "1 2 >", FALSE
4080                             ; test "2 1 >", TRUE
4080                             ; test "3 3 >", FALSE
4080                             ; test "4 3 >", TRUE
4080                             ; test "2 2 <=", TRUE
4080                             ; test "2 2 >=", TRUE
4080                             ; 
4080                             ; 
4080                             ; test ":x 1000 let x 10 set x", 10
4080                             ; test ":x [100] { @1 } closure x", 100
4080                             ; test ":x [100 200] { @2 } closure x", 200
4080                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4080                             ; test "0 [{1}] switch", 1
4080                             ; test "1 [{1} {2} {3}] switch", 2
4080                             ; test "9 [{1} {5}] switch", 5
4080                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4080                             ; test "bytes 'ABC' get", $41
4080                             ; test "bytes [1 2 3] get", 1
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":x 1 const ; x", 1
4080                             ; test ":x 'A' const x get", $41
4080                             ; test ":x [1] const x get", 1
4080                             ; test ":x [1 2 3] const x 2? get", 3
4080                             ; test "2 (1 2 +) *", 6
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":xyz 123 let ; xyz get", 123
4080                             ; test "1 2 {$1 $2 +} call", 3
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4080                             ; test ":xyz {1} def :xyz addr call", 1
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4080                             ; test ":xyz {10} def :xyz addr exec", 10
4080                             ; test ":xyz {10} def :xyz addr call", 10
4080                             ; test "'hello' hash", $7f54
4080                             ; test ":hello", $7f54
4080                             ; test "bytes [1 2 3]", $1e02
4080                             ; test "bytes [1 2 3] 1? get", 2
4080                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4080                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4080                             ; test "words [1 2 3]", $1e02
4080                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4080                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4080                             ; test "words [10 20 30] 1 ? get", 10
4080                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4080                             ; test "{{{1} exec} exec} exec", 1
4080                             ; test "5 {{{$1} exec} exec} call", 5
4080                             ; test "5 {$1} call", 5
4080                             ; test "5 {{$1} exec} call", 5
4080                             ; test "2 1 {{$1} call} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 1 {$1} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 4 {$2} call", 4
4080                             ; test "{{1} call} call", 1
4080                             ; test "5 {-1 {$1} if} call", 5
4080                             ; test "0 {} loop", 0
4080                             ; test "1 {1-} loop", $1a00
4080                             ; test ":h {1} def :h addr call", 1
4080                             ; ; call enter
4080                             ; ;     .cstr "1 3",$22,"+"
4080                             ; ; expect "1 3 DUP +", 6
4080   CD 71 08               CALL   printStr   
4083   44 6F 6E 65 21 00      .CSTR   "Done!"   
4089   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               071D DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1865 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1827 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1867 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 229 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 232 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 235 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 243 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
DOT2:               032A DEFINED AT LINE 248 IN Siena.asm
                    > USED AT LINE 245 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 257 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 263 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 270 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 274 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 276 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 278 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 280 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 282 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 284 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 286 IN Siena.asm
AND_:               0361 DEFINED AT LINE 288 IN Siena.asm
AND1:               0368 DEFINED AT LINE 296 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
OR_:                036C DEFINED AT LINE 301 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 311 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 313 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
INV_:               037E DEFINED AT LINE 322 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 326 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 333 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 338 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 341 IN Siena.asm
SUB1:               039F DEFINED AT LINE 349 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
SUB2:               03A1 DEFINED AT LINE 352 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
NOT_:               03A7 DEFINED AT LINE 358 IN Siena.asm
EQ_:                03AC DEFINED AT LINE 362 IN Siena.asm
EQ1:                03AD DEFINED AT LINE 364 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
GT_:                03B1 DEFINED AT LINE 368 IN Siena.asm
LT_:                03B5 DEFINED AT LINE 373 IN Siena.asm
LT1:                03B7 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
DIV_:               03C2 DEFINED AT LINE 384 IN Siena.asm
COMMENT_:           03D1 DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
NOP_:               03DA DEFINED AT LINE 403 IN Siena.asm
SHL:                03DC DEFINED AT LINE 413 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
SHL1:               03E4 DEFINED AT LINE 420 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
SHL2:               03E5 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 419 IN Siena.asm
SHR:                03EC DEFINED AT LINE 430 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
SHR1:               03F4 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
SHR2:               03F8 DEFINED AT LINE 440 IN Siena.asm
                    > USED AT LINE 436 IN Siena.asm
MUL:                03FF DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
MUL2:               0409 DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
NUM:                041B DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               0424 DEFINED AT LINE 475 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
NUM1:               0425 DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 494 IN Siena.asm
NUM2:               043D DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
                    > USED AT LINE 519 IN Siena.asm
NUM3:               0448 DEFINED AT LINE 503 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
HEXNUM:             044B DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            044E DEFINED AT LINE 509 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
HEXNUM2:            0456 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
STRING:             0468 DEFINED AT LINE 528 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0470 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
STRING2:            0473 DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
CHAR:               0481 DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
CHAR1:              0484 DEFINED AT LINE 549 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
CHAR2:              0490 DEFINED AT LINE 558 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
CHAR3:              0493 DEFINED AT LINE 561 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
PAREN:              0496 DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
PARENEND:           0498 DEFINED AT LINE 573 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
BLOCK:              049A DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
BLOCK1:             049E DEFINED AT LINE 589 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
                    > USED AT LINE 615 IN Siena.asm
                    > USED AT LINE 620 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
BLOCK2:             04C4 DEFINED AT LINE 613 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
BLOCK3:             04C7 DEFINED AT LINE 616 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
BLOCK4:             04CF DEFINED AT LINE 622 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 598 IN Siena.asm
                    > USED AT LINE 600 IN Siena.asm
BLOCK5:             04D2 DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
BLOCKEND:           04D5 DEFINED AT LINE 629 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
ARG:                0513 DEFINED AT LINE 672 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
ARG0:               0522 DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
ARG1:               0530 DEFINED AT LINE 694 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
PROP:               0548 DEFINED AT LINE 715 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              0562 DEFINED AT LINE 734 IN Siena.asm
GET:                0562 DEFINED AT LINE 735 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
GET1:               0563 DEFINED AT LINE 737 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
GET2:               0571 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 743 IN Siena.asm
SET:                0574 DEFINED AT LINE 751 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
SET1:               0582 DEFINED AT LINE 761 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
IF:                 0584 DEFINED AT LINE 766 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
IFTE:               0586 DEFINED AT LINE 773 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
SWITCH:             0588 DEFINED AT LINE 803 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
LOOP:               0592 DEFINED AT LINE 816 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
WORDS:              0594 DEFINED AT LINE 866 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
BYTES:              0599 DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
BYTES1:             059C DEFINED AT LINE 871 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
ARRAY:              05A1 DEFINED AT LINE 875 IN Siena.asm
                    > USED AT LINE 281 IN Siena.asm
ARRAYEND:           05A3 DEFINED AT LINE 886 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
HASH:               05A5 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
FUNC:               05B0 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
FUNC1:              05CF DEFINED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
FUNC2:              05F3 DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
FUNC3:              05F6 DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
FUNC4:              05FE DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
FUNC4A:             0601 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
DEF:                060C DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
DEF1:               0612 DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
LET:                061B DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
LET1:               0637 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
LET2:               063F DEFINED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
ADDR:               0642 DEFINED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
ADDR1:              064E DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
SYMBOL:             0656 DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
SYMBOL0:            065E DEFINED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
SYMBOL1:            0660 DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
SYMBOL2:            0670 DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
IDENT:              067E DEFINED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 285 IN Siena.asm
IDENT0:             0685 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
IDENT1:             0687 DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
IDENT2:             0697 DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1164 IN Siena.asm
IDENT3:             06AB DEFINED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
FRAC:               06AC DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
SQRT1:              06B2 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
ABS1:               06BF DEFINED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
MOD:                06CC DEFINED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
EQUALS:             06D8 DEFINED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
LESSTHANEQ:         06E0 DEFINED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 380 IN Siena.asm
LESSTHAN:           06E5 DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
LESSTHAN1:          06EA DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
TRUE1:              06ED DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
FALSE1:             06F3 DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
INPUT:              06F9 DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
OUTPUT:             0704 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
KEY:                070D DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
NEG:                0716 DEFINED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
FILTER:             071D DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
MAP:                071D DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
HASHSTR:            071F DEFINED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
HASHSTR1:           0722 DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
HASHSTR2:           0727 DEFINED AT LINE 1312 IN Siena.asm
DEFINEENTRY:        0738 DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
DEFINEENTRY0:       073D DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1352 IN Siena.asm
DEFINEENTRY1:       074C DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
DEFINEENTRY2:       0752 DEFINED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
DEFINEENTRY3:       0754 DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
LOOKUPENTRY:        075E DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
LOOKUPENTRY0:       0763 DEFINED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
LOOKUPENTRY1:       0772 DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
LOOKUPENTRY2:       0778 DEFINED AT LINE 1392 IN Siena.asm
LOOKUPENTRY3:       077A DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
DIVIDE:             0782 DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 389 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
DIVIDE1:            0787 DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
DIVIDE2:            0794 DEFINED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
DIVIDE3:            0795 DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
SQUAREROOT:         079B DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
SQUAREROOT1:        07A0 DEFINED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
SQUAREROOT4:        07BB DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
SQUAREROOT5:        07C2 DEFINED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
PRTDEC:             07C5 DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07D4 DEFINED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
PRTDEC1:            07F6 DEFINED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
PRTDEC2:            07F8 DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
PRTDEC3:            0808 DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
PRTDEC4:            0809 DEFINED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
PRTHEX:             080D DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0818 DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
PRTHEX3:            0821 DEFINED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
PRTSTR0:            082C DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1540 IN Siena.asm
PRTSTR:             0830 DEFINED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
NESTING:            0835 DEFINED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
                    > USED AT LINE 1828 IN Siena.asm
NESTING1A:          0840 DEFINED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
NESTING1:           0843 DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
NESTING2:           0852 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
NESTING3:           0854 DEFINED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
NESTING4:           085F DEFINED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
PROMPT:             0861 DEFINED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
CRLF:               086A DEFINED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
PRINTSTR:           0871 DEFINED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 142
DEFINE:             0878 DEFINED AT LINE 1603 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
INIT:               0890 DEFINED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1766 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08AA DEFINED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
START:              09F6 DEFINED AT LINE 1764 IN Siena.asm
INTERPRET:          0A0C DEFINED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 1869 IN Siena.asm
INTERPRET2:         0A16 DEFINED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1820 IN Siena.asm
INTERPRET3:         0A1E DEFINED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1792 IN Siena.asm
INTERPRET4:         0A24 DEFINED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
WAITCHAR:           0A29 DEFINED AT LINE 1795 IN Siena.asm
                    > USED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1843 IN Siena.asm
MACRO:              0A38 DEFINED AT LINE 1805 IN Siena.asm
WAITCHAR1:          0A3A DEFINED AT LINE 1822 IN Siena.asm
                    > USED AT LINE 1798 IN Siena.asm
WAITCHAR3:          0A48 DEFINED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
WAITCHAR4:          0A5B DEFINED AT LINE 1847 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
NEXT:               0A63 DEFINED AT LINE 1853 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1857 IN Siena.asm
NEXT1:              0A72 DEFINED AT LINE 1864 IN Siena.asm
                    > USED AT LINE 1858 IN Siena.asm
ESCAPE:             0A7D DEFINED AT LINE 1871 IN Siena.asm
                    > USED AT LINE 1866 IN Siena.asm
EXIT:               0A81 DEFINED AT LINE 1876 IN Siena.asm
                    > USED AT LINE 1868 IN Siena.asm
EXEC:               0A98 DEFINED AT LINE 1900 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0AAF DEFINED AT LINE 1914 IN Siena.asm
                    > USED AT LINE 1904 IN Siena.asm
CALL:               0AB1 DEFINED AT LINE 1919 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
DOCALL:             0AB1 DEFINED AT LINE 1920 IN Siena.asm
DOCALL2:            0ACA DEFINED AT LINE 1942 IN Siena.asm
                    > USED AT LINE 1924 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1626 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 390 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 266 IN Siena.asm
                    > USED AT LINE 741 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
                    > USED AT LINE 872 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 706 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1823 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1632 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2351S43:  407F DEFINED AT LINE 34
                    > USED AT LINE 10
