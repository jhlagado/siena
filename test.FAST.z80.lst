0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD AC 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; IP                             -- saved interpreter ptr
00CC                             ; arglist*                          -- arg list ptr
00CC                             ; ScopeBP                               -- scope base ptr           --> arg0
00CC                             ; BP                             -- saved base ptr           <-- iy
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arglist_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 3F 0B               JP   arg   
0309                PROP_:       
0309   C3 4D 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARGLIST_:      
030F   C3 7F 04               JP   arglist   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 29 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 4C 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD E1 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 59 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 9E 05               JP   array   
034B                ARRAYEND_:      
034B   C3 BA 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 9A 06               JP   ident   
0351                SYMBOL_:      
0351   C3 72 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 29 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 F4 06               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA FC 06               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 01 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD 9E 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      ; 
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ; arglist - parses input (ab:c)
047F                             ; names after the : represent uninitialised locals
047F                             ; return values are the state of the stack after the block ends
047F                ARGLIST:      
047F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arglist
0488   03                     INC   bc   ; point to next char
0489                ARGLIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arglist terminator
048C   28 12                  JR   z,arglist4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arglist2   
0492   14                     INC   d   ; non zero value local count acts as flag
0493   20 08                  JR   nz,arglist3   
0495                ARGLIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arglist3   
049C   14                     INC   d   ; if d > 0 increase local count
049D                ARGLIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arglist1   
04A0                ARGLIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arglist
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050D   FD 46 07               LD   b,(iy+7)   
0510   D9                     EXX      
0511   FD 54                  LD   d,iyh   ; hl = BP
0513   FD 5D                  LD   e,iyl   
0515   EB                     EX   de,hl   
0516   FD 5E 04               LD   e,(iy+4)   ; de = BP, hl = arglist*
0519   FD 56 05               LD   d,(iy+5)   
051C   EB                     EX   de,hl   
051D   01 00 00               LD   bc,0   ; bc = 0, b = num locals = 0, c = num args = 0
0520   7D                     LD   a,l   ; arglist* == null skip
0521   B4                     OR   h   
0522   28 08                  JR   z,blockend2   
0524   2B                     DEC   hl   ; b = (num locals) * 2
0525   46                     LD   b,(hl)   
0526   CB 20                  SLA   b   
0528   2B                     DEC   hl   
0529   4E                     LD   c,(hl)   ; c = (num args) * 2
052A   CB 21                  SLA   c   
052C                BLOCKEND2:      
052C   3E 08                  LD   a,8   ; a = header size in bytes
052E   81                     ADD   a,c   ; a = offset to firstArg
052F   6F                     LD   l,a   ; de = bp, hl = offset to firstArg
0530   26 00                  LD   h,0   
0532   19                     ADD   hl,de   ; de = first arg, hl = bp,
0533   EB                     EX   de,hl   
0534   E5                     PUSH   hl   ; save bp
0535   B7                     OR   a   ; bc = count
0536   ED 72                  SBC   hl,sp   
0538   44 4D                  LD   bc,hl   
053A   0B                     DEC   bc   ; bc -= 2 remove space used to save BP
053B   0B                     DEC   bc   
053C   E1                     POP   hl   ; hl = bp
053D   1B                     DEC   de   ; de = firstArg-1
053E   2B                     DEC   hl   ; hl = BP-1
053F   ED B8                  LDDR      
0541   13                     INC   de   ; hl = new tos
0542   EB                     EX   de,hl   
0543   F9                     LD   sp,hl   ; sp = new tos
0544   D9                     EXX      ; bc = IP, iy = oldBP
0545   D5                     PUSH   de   
0546   C5                     PUSH   bc   
0547   D9                     EXX      
0548   C1                     POP   bc   
0549   FD E1                  POP   iy   
054B   DD E9                  JP   (ix)   
054D                             ; @1..9
054D                             ; returns address of prop
054D                PROP:        
054D                             ; inc bc                      ; get next char
054D                             ; ld a,(bc)
054D                             ; sub "1"                     ; treat as a digit, 1 based index
054D                             ; and $0F                     ; mask
054D                             ; add a,a                     ; double
054D                             ; ld l,a                      ; hl = offset into args
054D                             ; ld h,0
054D                             ; ld e,(iy+6)                 ; de = closure array
054D                             ; ld d,(iy+7)
054D                             ; add hl,de                   ; find address of prop in array
054D                             ; ld (vPointer),hl             ; store address in setter
054D                             ; ld e,(hl)
054D                             ; inc hl
054D                             ; ld d,(hl)
054D                             ; push de                     ; push prop value
054D   DD E9                  JP   (ix)   
054F                             ; addr -- value
054F                DOLET:       
054F   E1                     POP   hl   
0550   22 9E 18               LD   (vPointer),hl   ; store address in setter
0553                DOLET2:      
0553   5E                     LD   e,(hl)   
0554   23                     INC   hl   
0555   56                     LD   d,(hl)   
0556                DOLET3:      
0556   D5                     PUSH   de   
0557   DD E9                  JP   (ix)   
0559                INDEX:       
0559   E1                     POP   hl   ; hl = index
055A   D1                     POP   de   ; de = addr
055B   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
055E   3D                     DEC   a   
055F   28 01                  JR   z,index1   
0561   29                     ADD   hl,hl   ; if data width = 2 then double
0562                INDEX1:      
0562   19                     ADD   hl,de   ; add addr
0563   22 9E 18               LD   (vPointer),hl   ; store address in setter
0566   16 00                  LD   d,0   
0568   5E                     LD   e,(hl)   
0569   B7                     OR   a   ; check data width again
056A   28 02                  JR   z,index2   
056C   23                     INC   hl   
056D   56                     LD   d,(hl)   
056E                INDEX2:      
056E   D5                     PUSH   de   
056F   DD E9                  JP   (ix)   
0571                             ; newvalue --
0571                SET:         
0571   D1                     POP   de   ; new value
0572   E1                     POP   hl   ; discard last accessed value
0573   2A 9E 18               LD   hl,(vPointer)   
0576   73                     LD   (hl),e   
0577   3A 9A 18               LD   a,(vDataWidth)   
057A   3D                     DEC   a   
057B   28 02                  JR   z,set1   
057D   23                     INC   hl   
057E   72                     LD   (hl),d   
057F                SET1:        
057F   DD E9                  JP   (ix)   
0581                             ; ifte
0581                             ; condition then -- value
0581                IF:          
0581   DD E9                  JP   (ix)   
0583                             ; ld de,0                      ; NUL pointer for else
0583                             ; jr ifte1
0583                             ; ifte
0583                             ; condition then else -- value
0583                IFTE:        
0583   DD E9                  JP   (ix)   
0585                             ;     pop de                      ; de = else
0585                             ; ifte1:
0585                             ;     pop hl                      ; hl = then
0585                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
0585                             ;     inc hl                      ; check for true
0585                             ;     ld a,h
0585                             ;     or l
0585                             ;     pop hl                      ; hl = then
0585                             ;     jr z,ifte2
0585                             ;     ex de,hl                    ; condition = false, hl = else
0585                             ; ifte2:
0585                             ;     ld a,h                      ; check if hl is NUL
0585                             ;     or l
0585                             ;     jr z,ifte3
0585                             ;     push bc                     ; push IP
0585                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
0585                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0585                             ;     push de                     ; push ScopeBP
0585                             ;     push iy                     ; push BP
0585                             ;     ld iy,0                     ; iy = sp
0585                             ;     add iy,sp
0585                             ;     ld bc,hl                    ; IP = then
0585                             ;     dec bc
0585                             ; ifte3:
0585                             ;     jp (ix)
0585                             ; switch
0585                             ; index array -- value
0585                SWITCH:      
0585   D1                     POP   de   ; de = array
0586   E1                     POP   hl   ; hl = index
0587   29                     ADD   hl,hl   ; indec *= 2
0588   19                     ADD   hl,de   ; add array[0]
0589   4E                     LD   c,(hl)   ; bc = case
058A   23                     INC   hl   
058B   46                     LD   b,(hl)   
058C   0B                     DEC   bc   
058D   DD E9                  JP   (ix)   
058F                             ; c b --
058F                             ; loops until c = 0
058F                LOOP:        
058F   DD E9                  JP   (ix)   
0591                             ;     pop de                      ; de = block                    c
0591                             ;     pop hl                      ; hl = condition
0591                             ;     push de
0591                             ;     push bc                     ; push IP
0591                             ;     ld bc,de                    ; bc = block
0591                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
0591                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0591                             ;     push de                     ; push ScopeBP
0591                             ;     push iy                     ; push BP
0591                             ;     ld iy,0                     ; iy = sp
0591                             ;     add iy,sp
0591                             ; loop1:
0591                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0591                             ;     or h
0591                             ;     jr z,loop3
0591                             ;     ld de,loop2-1               ; IP return address
0591                             ;     push de
0591                             ;     ld e,(iy+2)                 ; push parent ScopeBP
0591                             ;     ld d,(iy+3)
0591                             ;     push de                     ;
0591                             ;     push iy                     ; push BP
0591                             ;     ld iy,0                     ; iy = sp
0591                             ;     add iy,sp
0591                             ;     push hl                     ; push condition
0591                             ;     dec bc
0591                             ;     jp (ix)
0591                             ; loop2:
0591                             ;     db ESC                      ; escape from interpreter
0591                             ;     ld c,(iy+6)                 ; bc = block
0591                             ;     ld b,(iy+7)
0591                             ;     pop hl                      ; hl = condition
0591                             ;     jr loop1
0591                             ; loop3:
0591                             ;     ld d,iyh                    ; de = BP
0591                             ;     ld e,iyl
0591                             ;     ex de,hl                    ; hl = BP, de = result
0591                             ;     ld sp,hl                    ; sp = BP
0591                             ;     pop hl                      ; hl = old BP
0591                             ;     pop bc                      ; pop ScopeBP (discard)
0591                             ;     pop bc                      ; bc = IP
0591                             ;     ld sp,hl                    ; sp = old BP
0591                             ;     ld iy,0                     ; iy = sp
0591                             ;     add iy,sp
0591                             ;     ld ix,next                  ; needed?
0591                             ;     jp (ix)
0591                WORDS:       
0591   21 02 00               LD   hl,2   
0594   18 03                  JR   bytes1   
0596                BYTES:       
0596   21 01 00               LD   hl,1   
0599                BYTES1:      
0599   22 9A 18               LD   (vDataWidth),hl   
059C   DD E9                  JP   (ix)   
059E                ARRAY:       
059E   11 00 00               LD   de,0   ; create stack frame
05A1   D5                     PUSH   de   ; push null for IP
05A2   FD 5E 04               LD   e,(iy+4)   ; push arglist* from parent stack frame
05A5   FD 56 05               LD   d,(iy+5)   ; 
05A8   D5                     PUSH   de   ; 
05A9   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05AC   FD 56 03               LD   d,(iy+3)   ; 
05AF   D5                     PUSH   de   ; 
05B0   FD E5                  PUSH   iy   ; push BP
05B2   FD 21 00 00            LD   iy,0   ; BP = SP
05B6   FD 39                  ADD   iy,sp   
05B8   DD E9                  JP   (ix)   
05BA                ARRAYEND:      
05BA   FD 54                  LD   d,iyh   ; de = BP
05BC   FD 5D                  LD   e,iyl   
05BE   C5                     PUSH   bc   ; save IP
05BF   D9                     EXX      
05C0   C1                     POP   bc   
05C1   D9                     EXX      
05C2   62 6B                  LD   hl,de   ; hl = de = BP
05C4   B7                     OR   a   
05C5   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05C7   CB 3C                  SRL   h   ; 
05C9   CB 1D                  RR   l   
05CB   44 4D                  LD   bc,hl   ; bc = count
05CD   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05D0   71                     LD   (hl),c   ; write num items in length word
05D1   23                     INC   hl   
05D2   70                     LD   (hl),b   
05D3   23                     INC   hl   ; hl = array[0], bc = count
05D4                             ; de = BP, hl = array[0], bc = count
05D4   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05D7   FE 01                  CP   1   
05D9   20 10                  JR   nz,arrayEnd2   
05DB                ARRAYEND1:      ; byte
05DB   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05DE   77                     LD   (hl),a   ; write a to array item
05DF   23                     INC   hl   ; move to next byte in array
05E0   FD 2B                  DEC   iy   ; move tho next word on stack
05E2   FD 2B                  DEC   iy   
05E4   0B                     DEC   bc   ; dec items count
05E5   79                     LD   a,c   ; if not zero loop
05E6   B0                     OR   b   
05E7   20 F2                  JR   nz,arrayEnd1   
05E9   18 13                  JR   arrayEnd3   
05EB                ARRAYEND2:      ; word
05EB   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05EE   77                     LD   (hl),a   ; write lsb of array item
05EF   23                     INC   hl   ; move to msb of array item
05F0   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
05F3   77                     LD   (hl),a   ; write msb of array item
05F4   23                     INC   hl   ; move to next word in array
05F5   FD 2B                  DEC   iy   ; move to next word on stack
05F7   FD 2B                  DEC   iy   
05F9   0B                     DEC   bc   ; dec items count
05FA   79                     LD   a,c   ; if not zero loop
05FB   B0                     OR   b   
05FC   20 ED                  JR   nz,arrayEnd2   
05FE                ARRAYEND3:      
05FE   EB                     EX   de,hl   ; de = end of array, hl = BP
05FF   F9                     LD   sp,hl   ; sp = BP
0600   E1                     POP   hl   ; de = end of array, hl = old BP
0601   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0602   FD 62                  LD   iyh,d   
0604   FD 6B                  LD   iyl,e   
0606   D1                     POP   de   ; pop arglist (discard)
0607   D1                     POP   de   ; pop ScopeBP (discard)
0608   D1                     POP   de   ; pop IP (discard)
0609   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
060D   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0610   D9                     EXX      ; restore IP
0611   C5                     PUSH   bc   
0612   D9                     EXX      
0613   C1                     POP   bc   
0614   13                     INC   de   ; de = array[0]
0615   13                     INC   de   
0616   D5                     PUSH   de   ; return array[0]
0617   DD E9                  JP   (ix)   
0619                             ; str -- num
0619                HASH:        
0619   E1                     POP   hl   
061A   C5                     PUSH   bc   
061B   44 4D                  LD   bc,hl   
061D   CD 3B 07               CALL   hashStr   
0620   C1                     POP   bc   
0621   E5                     PUSH   hl   
0622   DD E9                  JP   (ix)   
0624                             ; symbol func --
0624                DEF:         
0624   DD 21 2B 06            LD   ix,def1   
0628   C3 E7 0A               JP   func   
062B                DEF1:        
062B   DD 21 75 0A            LD   ix,next   
062F   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0630   60 69                  LD   hl,bc   
0632   18 1C                  JR   let1   
0634                             ; symbol value --
0634                LET:         
0634   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0636   E3                     EX   (sp),hl   
0637   EB                     EX   de,hl   
0638   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
063B   36 CD                  LD   (hl),$cd   ; compile "call dolet"
063D   23                     INC   hl   
063E   36 4F                  LD   (hl),lsb(dolet)   
0640   23                     INC   hl   
0641   36 05                  LD   (hl),msb(dolet)   
0643   23                     INC   hl   
0644   73                     LD   (hl),e   
0645   23                     INC   hl   
0646   72                     LD   (hl),d   
0647   2B                     DEC   hl   
0648   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
064C   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
064F   E1                     POP   hl   ; de = addr, hl = IP
0650                LET1:        
0650   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0651   44 4D                  LD   bc,hl   ; bc = symbol
0653   CD 54 07               CALL   defineEntry   
0656   38 00                  JR   c,let2   
0658                             ; call error
0658                             ; .cstr "Let Collision"
0658                LET2:        
0658   C1                     POP   bc   
0659   DD E9                  JP   (ix)   
065B                             ; symbol -- ptr
065B                ADDR:        
065B   E1                     POP   hl   ; hl = hash
065C   C5                     PUSH   bc   
065D   44 4D                  LD   bc,hl   
065F   CD 7A 07               CALL   lookupEntry   
0662   38 03                  JR   c,addr1   
0664   21 00 00               LD   hl,0   
0667                             ; call printStr		
0667                             ; .cstr "Undefined"
0667                             ; jp interpret
0667                ADDR1:       
0667   C1                     POP   bc   
0668   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
066B   19                     ADD   hl,de   
066C   22 9E 18               LD   (vPointer),hl   
066F   E5                     PUSH   hl   
0670   DD E9                  JP   (ix)   
0672                SYMBOL:      
0672   03                     INC   bc   
0673   11 00 1A               LD   de,PAD   
0676   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0678   18 02                  JR   symbol1   
067A                SYMBOL0:      ; copy to PAD area
067A   03                     INC   bc   ; characters that are part of the identifier
067B   13                     INC   de   
067C                SYMBOL1:      ; 0-9 A-Z a-z _
067C   0A                     LD   a,(bc)   
067D   12                     LD   (de),a   
067E   FE 21                  CP   " "+1   
0680   38 0A                  JR   c,symbol2   
0682   6F                     LD   l,a   
0683   7E                     LD   a,(hl)   
0684   FE 4E                  CP   lsb(ident_)   
0686   28 F2                  JR   z,symbol0   
0688   FE 00                  CP   lsb(num_)   
068A   28 EE                  JR   z,symbol0   
068C                SYMBOL2:      
068C   0B                     DEC   bc   
068D   AF                     XOR   a   
068E   12                     LD   (de),a   ; terminate string with NUL
068F   C5                     PUSH   bc   
0690   01 00 1A               LD   bc,PAD   
0693   CD 3B 07               CALL   hashStr   ; hl = hash
0696   C1                     POP   bc   
0697   E5                     PUSH   hl   
0698   DD E9                  JP   (ix)   
069A                IDENT:       
069A   11 00 1A               LD   de,PAD   
069D   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069F   18 02                  JR   ident1   
06A1                IDENT0:      ; copy to PAD area
06A1   03                     INC   bc   ; characters that are part of the identifier
06A2   13                     INC   de   
06A3                IDENT1:      ; 0-9 A-Z a-z _
06A3   0A                     LD   a,(bc)   
06A4   12                     LD   (de),a   
06A5                             ; or a
06A5                             ; jr z,ident2
06A5   FE 21                  CP   " "+1   
06A7   38 0A                  JR   c,ident2   
06A9   6F                     LD   l,a   
06AA   7E                     LD   a,(hl)   
06AB   FE 4E                  CP   lsb(ident_)   
06AD   28 F2                  JR   z,ident0   
06AF   FE 00                  CP   lsb(num_)   
06B1   28 EE                  JR   z,ident0   
06B3                IDENT2:      
06B3   0B                     DEC   bc   
06B4   AF                     XOR   a   
06B5   12                     LD   (de),a   ; terminate string with NUL
06B6   C5                     PUSH   bc   
06B7   01 00 1A               LD   bc,PAD   
06BA   CD 3B 07               CALL   hashStr   ; hl = hash
06BD   44 4D                  LD   bc,hl   
06BF   CD 7A 07               CALL   lookupEntry   
06C2   C1                     POP   bc   
06C3   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06C5   DD E9                  JP   (ix)   
06C7                IDENT3:      
06C7   E9                     JP   (hl)   
06C8                FRAC:        
06C8   2A 98 18               LD   hl,(vFrac)   
06CB   E5                     PUSH   hl   
06CC   DD E9                  JP   (ix)   
06CE                SQRT1:       
06CE   E1                     POP   hl   
06CF   C5                     PUSH   bc   
06D0   CD B7 07               CALL   squareRoot   
06D3   ED 43 98 18            LD   (vFrac),bc   
06D7   C1                     POP   bc   
06D8   D5                     PUSH   de   
06D9   DD E9                  JP   (ix)   
06DB                ABS1:        
06DB   E1                     POP   hl   
06DC   CB 7C                  BIT   7,h   
06DE   C8                     RET   z   
06DF   AF                     XOR   a   
06E0   95                     SUB   l   
06E1   6F                     LD   l,a   
06E2   9F                     SBC   a,a   
06E3   94                     SUB   h   
06E4   67                     LD   h,a   
06E5   E5                     PUSH   hl   
06E6   DD E9                  JP   (ix)   
06E8                MOD:         
06E8   D1                     POP   de   ; get first value
06E9   E1                     POP   hl   ; get 2nd value
06EA   C5                     PUSH   bc   ; preserve the IP
06EB   44 4D                  LD   bc,hl   
06ED   CD 9E 07               CALL   divide   
06F0   C1                     POP   bc   
06F1   E5                     PUSH   hl   ; push remainder
06F2   DD E9                  JP   (ix)   
06F4                             ; hl = value1, de = value2
06F4                             ; hl = result
06F4                EQUALS:      
06F4   B7                     OR   a   ; reset the carry flag
06F5   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06F7   28 10                  JR   z,true1   
06F9   C3 0F 07               JP   false1   
06FC                             ; hl = value1 de = value2
06FC                             ; hl = result
06FC                LESSTHANEQ:      
06FC   B7                     OR   a   
06FD   ED 52                  SBC   hl,de   
06FF   18 05                  JR   lessthan1   
0701                             ; hl = value1 de = value2
0701                             ; hl = result
0701                LESSTHAN:      
0701   B7                     OR   a   
0702   ED 52                  SBC   hl,de   
0704   28 09                  JR   z,false1   
0706                LESSTHAN1:      
0706   FA 0F 07               JP   m,false1   
0709                TRUE1:       
0709   21 FF FF               LD   hl,TRUE   
070C   E5                     PUSH   hl   
070D   DD E9                  JP   (ix)   
070F                FALSE1:      
070F   21 00 00               LD   hl,FALSE   
0712   E5                     PUSH   hl   
0713   DD E9                  JP   (ix)   
0715                             ; Z80 port input
0715                             ; port -- value
0715                INPUT:       
0715   E1                     POP   hl   
0716   59                     LD   e,c   ; save IP
0717   4D                     LD   c,l   
0718   ED 68                  IN   l,(c)   
071A   26 00                  LD   h,0   
071C   4B                     LD   c,e   ; restore IP
071D   E5                     PUSH   hl   
071E   DD E9                  JP   (ix)   
0720                             ; Z80 port output
0720                             ; value port --
0720                OUTPUT:      
0720   E1                     POP   hl   
0721   59                     LD   e,c   ; save IP
0722   4D                     LD   c,l   
0723   E1                     POP   hl   
0724   ED 69                  OUT   (c),l   
0726   4B                     LD   c,e   ; restore IP
0727   DD E9                  JP   (ix)   
0729                KEY:         
0729   CD 81 00               CALL   getchar   
072C   26 00                  LD   h,0   
072E   6F                     LD   l,a   
072F   E5                     PUSH   hl   
0730   DD E9                  JP   (ix)   
0732                NEG:         
0732   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0735   D1                     POP   de   
0736   C3 94 03               JP   sub2   ; use the SUBtract routine
0739                FILTER:      
0739                MAP:         
0739                SCAN:        
0739   DD E9                  JP   (ix)   
073B                             ; -------------------------------------------------------------------------------
073B                             ; hash C-string
073B                             ; BC = str
073B                             ; HL = hash
073B                HASHSTR:      
073B   21 00 00               LD   hl,0   
073E                HASHSTR1:      
073E   0A                     LD   a,(bc)   ; load next char
073F   03                     INC   bc   
0740   FE 00                  CP   0   ; NUL?
0742   C8                     RET   z   
0743                HASHSTR2:      
0743   16 00                  LD   d,0   
0745   5F                     LD   e,a   
0746   19                     ADD   hl,de   
0747   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0749   29                     ADD   hl,hl   ; shift left
074A   19                     ADD   hl,de   ; add
074B   29                     ADD   hl,hl   ; shift left
074C   29                     ADD   hl,hl   ; shift left
074D   29                     ADD   hl,hl   ; shift left
074E   29                     ADD   hl,hl   ; shift left
074F   29                     ADD   hl,hl   ; shift left
0750   29                     ADD   hl,hl   ; shift left
0751   19                     ADD   hl,de   ; add
0752   18 EA                  JR   hashStr1   
0754                             ; add entry to hash slots and hash pointers
0754                             ; bc = hash (b = hi, c = lo), de = addr
0754                             ; sets carry if successful
0754                DEFINEENTRY:      
0754   CB 21                  SLA   c   ; lo = lo * 2
0756   69                     LD   l,c   ; lo1 = lo
0757   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0759                DEFINEENTRY0:      
0759   7E                     LD   a,(hl)   ; a = (lo1)
075A   FE FF                  CP   UNUSED   ; is it unused?
075C   28 12                  JR   z,defineEntry3   ; yes, add entry
075E   79                     LD   a,c   ; a = lo
075F   BE                     CP   (hl)   ; compare (lo1) with lo
0760   20 06                  JR   nz,defineEntry1   ; no match loop around
0762   2C                     INC   l   
0763   78                     LD   a,b   ; a = hi
0764   BE                     CP   (hl)   ; compare (lo1+1) with hi
0765   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0767   2D                     DEC   l   ; restore l
0768                DEFINEENTRY1:      
0768   2C                     INC   l   ; try next entry
0769   2C                     INC   l   
076A   79                     LD   a,c   ; compare lo and lo1
076B   BD                     CP   l   ; if equal then there's no space left, reject
076C   20 EB                  JR   nz,defineEntry0   
076E                DEFINEENTRY2:      
076E   B7                     OR   a   ; clear carry flag, failure
076F   C9                     RET      
0770                DEFINEENTRY3:      ; new entry
0770   71                     LD   (hl),c   ; (lo1) = hash lo
0771   23                     INC   hl   
0772   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0773   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0775   72                     LD   (hl),d   
0776   2B                     DEC   hl   
0777   73                     LD   (hl),e   ; (slot + 2) = address
0778   37                     SCF      ; set carry flag, success
0779   C9                     RET      
077A                             ; looks up hash and returns address
077A                             ; bc = hash
077A                             ; returns addr in hl, sets carry if successful
077A                LOOKUPENTRY:      
077A   CB 21                  SLA   c   ; lo = lo * 2
077C   69                     LD   l,c   ; lo1 = lo
077D   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077F                LOOKUPENTRY0:      
077F   7E                     LD   a,(hl)   ; a = (hl), slot
0780   FE FF                  CP   UNUSED   ; is it unused?
0782   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0784   79                     LD   a,c   ; a = lo
0785   BE                     CP   (hl)   ; compare (lo1) with lo
0786   20 06                  JR   nz,lookupEntry1   ; no match loop around
0788   2C                     INC   l   
0789   78                     LD   a,b   ; a = hi
078A   BE                     CP   (hl)   ; compare (lo1+1) with hi
078B   28 09                  JR   z,lookupEntry3   
078D   2D                     DEC   l   
078E                LOOKUPENTRY1:      
078E   2C                     INC   l   
078F   2C                     INC   l   
0790   79                     LD   a,c   
0791   BD                     CP   l   ; no space left, reject
0792   20 EB                  JR   nz,lookupEntry0   
0794                LOOKUPENTRY2:      
0794   B7                     OR   a   ; clear carry flag, failure
0795   C9                     RET      
0796                LOOKUPENTRY3:      
0796   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0798   56                     LD   d,(hl)   
0799   2D                     DEC   l   ; restore l
079A   5E                     LD   e,(hl)   ; (slot + 2) = address
079B   EB                     EX   de,hl   
079C   37                     SCF      
079D   C9                     RET      
079E                             ; division subroutine.
079E                             ; bc: divisor, de: dividend, hl: remainder
079E                DIVIDE:      
079E   21 00 00               LD   hl,0   ; zero the remainder
07A1   3E 10                  LD   a,16   ; loop counter
07A3                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07A3   CB 21                  SLA   c   
07A5   CB 10                  RL   b   
07A7   ED 6A                  ADC   hl,hl   
07A9   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07AB   38 03                  JR   c,divide2   
07AD   0C                     INC   c   
07AE   18 01                  JR   divide3   
07B0                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07B0   19                     ADD   hl,de   
07B1                DIVIDE3:      
07B1   3D                     DEC   a   
07B2   20 EF                  JR   nz,divide1   
07B4   50 59                  LD   de,bc   ; result from bc to de
07B6   C9                     RET      
07B7                             ; squareroot
07B7                             ; Input: HL = value
07B7                             ; Result: DE = square root BC = remainder
07B7                SQUAREROOT:      
07B7   01 00 08               LD   bc,0800h   
07BA   59                     LD   e,c   
07BB   AF                     XOR   a   
07BC                SQUAREROOT1:      
07BC   29                     ADD   hl,hl   
07BD   CB 11                  RL   c   
07BF   ED 6A                  ADC   hl,hl   
07C1   CB 11                  RL   c   
07C3   30 02                  JR   nc,$+4   
07C5   CB C5                  SET   0,l   
07C7   7B                     LD   a,e   
07C8   87                     ADD   a,a   
07C9   5F                     LD   e,a   
07CA   87                     ADD   a,a   
07CB   CB 45                  BIT   0,l   
07CD   20 03                  JR   nz,$+5   
07CF   91                     SUB   c   
07D0   30 05                  JR   nc,squareRoot4   
07D2   79                     LD   a,c   
07D3   93                     SUB   e   
07D4   1C                     INC   e   
07D5   93                     SUB   e   
07D6   4F                     LD   c,a   
07D7                SQUAREROOT4:      
07D7   10 E3                  DJNZ   squareRoot1   
07D9   CB 45                  BIT   0,l   
07DB   28 01                  JR   z,squareRoot5   
07DD   04                     INC   b   
07DE                SQUAREROOT5:      
07DE   16 00                  LD   d,0   
07E0   C9                     RET      
07E1                PRTDEC:      
07E1   CB 7C                  BIT   7,h   
07E3   28 0B                  JR   z,prtdec0   
07E5   3E 2D                  LD   a,"-"   
07E7   CD 85 00               CALL   putchar   
07EA   AF                     XOR   a   
07EB   95                     SUB   l   
07EC   6F                     LD   l,a   
07ED   9F                     SBC   a,a   
07EE   94                     SUB   h   
07EF   67                     LD   h,a   
07F0                PRTDEC0:      
07F0   C5                     PUSH   bc   
07F1   0E 00                  LD   c,0   ; leading zeros flag = false
07F3   11 F0 D8               LD   de,-10000   
07F6   CD 12 08               CALL   prtdec1   
07F9   11 18 FC               LD   de,-1000   
07FC   CD 12 08               CALL   prtdec1   
07FF   11 9C FF               LD   de,-100   
0802   CD 12 08               CALL   prtdec1   
0805   1E F6                  LD   e,-10   
0807   CD 12 08               CALL   prtdec1   
080A   0C                     INC   c   ; flag = true for at least digit
080B   1E FF                  LD   e,-1   
080D   CD 12 08               CALL   prtdec1   
0810   C1                     POP   bc   
0811   C9                     RET      
0812                PRTDEC1:      
0812   06 2F                  LD   b,"0"-1   
0814                PRTDEC2:      
0814   04                     INC   b   
0815   19                     ADD   hl,de   
0816   38 FC                  JR   c,prtdec2   
0818   ED 52                  SBC   hl,de   
081A   3E 30                  LD   a,"0"   
081C   B8                     CP   b   
081D   20 05                  JR   nz,prtdec3   
081F   AF                     XOR   a   
0820   B1                     OR   c   
0821   C8                     RET   z   
0822   18 01                  JR   prtdec4   
0824                PRTDEC3:      
0824   0C                     INC   c   
0825                PRTDEC4:      
0825   78                     LD   a,b   
0826   C3 85 00               JP   putchar   
0829                PRTHEX:      ; display hl as a 16-bit number in hex.
0829   C5                     PUSH   bc   ; preserve the IP
082A   7C                     LD   a,h   
082B   CD 34 08               CALL   prthex2   
082E   7D                     LD   a,l   
082F   CD 34 08               CALL   prthex2   
0832   C1                     POP   bc   
0833   C9                     RET      
0834                PRTHEX2:      
0834   4F                     LD   c,a   
0835   1F                     RRA      
0836   1F                     RRA      
0837   1F                     RRA      
0838   1F                     RRA      
0839   CD 3D 08               CALL   prthex3   
083C   79                     LD   a,c   
083D                PRTHEX3:      
083D   E6 0F                  AND   0x0F   
083F   C6 90                  ADD   a,0x90   
0841   27                     DAA      
0842   CE 40                  ADC   a,0x40   
0844   27                     DAA      
0845   C3 85 00               JP   putchar   
0848                PRTSTR0:      
0848   CD 85 00               CALL   putchar   
084B   23                     INC   hl   
084C                PRTSTR:      
084C   7E                     LD   a,(hl)   
084D   B7                     OR   a   
084E   20 F8                  JR   nz,prtstr0   
0850   C9                     RET      
0851                             ; **************************************************************************
0851                             ; calculate nesting value
0851                             ; a is char to be tested,
0851                             ; e is the nesting value (initially 0)
0851                             ; e is increased by ( and [
0851                             ; e is decreased by ) and ]
0851                             ; e has its bit 7 toggled by `
0851                             ; limited to 127 levels
0851                             ; **************************************************************************
0851                NESTING:      
0851   FE 22                  CP   $22   ; quote char
0853   20 0A                  JR   nz,nesting1   
0855   CB 7B                  BIT   7,e   
0857   28 03                  JR   z,nesting1a   
0859   CB BB                  RES   7,e   
085B   C9                     RET      
085C                NESTING1A:      
085C   CB FB                  SET   7,e   
085E   C9                     RET      
085F                NESTING1:      
085F   CB 7B                  BIT   7,e   
0861   C0                     RET   nz   
0862   FE 7B                  CP   "{"   
0864   28 08                  JR   z,nesting2   
0866   FE 5B                  CP   "["   
0868   28 04                  JR   z,nesting2   
086A   FE 28                  CP   "("   
086C   20 02                  JR   nz,nesting3   
086E                NESTING2:      
086E   1C                     INC   e   
086F   C9                     RET      
0870                NESTING3:      
0870   FE 7D                  CP   "}"   
0872   28 07                  JR   z,nesting4   
0874   FE 5D                  CP   "]"   
0876   28 03                  JR   z,nesting4   
0878   FE 29                  CP   ")"   
087A   C0                     RET   nz   
087B                NESTING4:      
087B   1D                     DEC   e   
087C   C9                     RET      
087D                PROMPT:      
087D   CD 8D 08               CALL   printStr   
0880   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0885   C9                     RET      
0886                CRLF:        
0886   CD 8D 08               CALL   printStr   
0889   0D 0A 00               .CSTR   "\r\n"   
088C   C9                     RET      
088D                PRINTSTR:      
088D   E3                     EX   (sp),hl   ; swap			
088E   CD 4C 08               CALL   prtstr   
0891   23                     INC   hl   ; inc past NUL
0892   E3                     EX   (sp),hl   ; put it back	
0893   C9                     RET      
0894                DEFINE:      
0894   E1                     POP   hl   
0895   7E                     LD   a,(hl)   
0896   23                     INC   hl   
0897   44 4D                  LD   bc,hl   
0899   5F                     LD   e,a   
089A   16 00                  LD   d,0   
089C   19                     ADD   hl,de   
089D   5E                     LD   e,(hl)   
089E   23                     INC   hl   
089F   56                     LD   d,(hl)   
08A0   23                     INC   hl   
08A1   E5                     PUSH   hl   ; bc = str
08A2   D5                     PUSH   de   
08A3   CD 3B 07               CALL   hashStr   ; hl = hash
08A6   D1                     POP   de   
08A7   44 4D                  LD   bc,hl   
08A9   C3 54 07               JP   defineEntry   
08AC                INIT:        
08AC   DD 21 75 0A            LD   ix,next   
08B0   FD 21 80 18            LD   iy,STACK   
08B4   21 80 01               LD   hl,isysVars   
08B7   11 98 18               LD   de,sysVars   
08BA   01 10 00               LD   bc,8 * 2   
08BD   ED B0                  LDIR      
08BF   3E FF                  LD   a,UNUSED   
08C1   06 00                  LD   b,0   
08C3   21 00 1B               LD   hl,hashSlots   
08C6                INIT1:       
08C6   77                     LD   (hl),a   
08C7   23                     INC   hl   
08C8   10 FC                  DJNZ   init1   
08CA   CD 94 08               CALL   define   
08CD   04 61 62 73 00         .PSTR   "abs",0   
08D2   DB 06                  DW   abs1   
08D4   CD 94 08               CALL   define   
08D7   05 61 64 64 72 00      .PSTR   "addr",0   
08DD   5B 06                  DW   addr   
08DF   CD 94 08               CALL   define   
08E2   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08E9   96 05                  DW   bytes   
08EB   CD 94 08               CALL   define   
08EE   05 63 61 6C 6C 00      .PSTR   "call",0   
08F4   B5 0A                  DW   call   
08F6                             ; call define
08F6                             ; .pstr "closure",0
08F6                             ; dw closure
08F6   CD 94 08               CALL   define   
08F9   04 64 65 66 00         .PSTR   "def",0   
08FE   24 06                  DW   def   
0900   CD 94 08               CALL   define   
0903   05 65 78 65 63 00      .PSTR   "exec",0   
0909   93 0A                  DW   exec   
090B   CD 94 08               CALL   define   
090E   06 66 61 6C 73 65 00   .PSTR   "false",0   
0915   00 00                  DW   false   
0917   CD 94 08               CALL   define   
091A   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0922   39 07                  DW   filter   
0924   CD 94 08               CALL   define   
0927   05 66 72 61 63 00      .PSTR   "frac",0   
092D   C8 06                  DW   frac   
092F   CD 94 08               CALL   define   
0932   05 66 75 6E 63 00      .PSTR   "func",0   
0938   E7 0A                  DW   func   
093A                             ; call define
093A                             ; .pstr "get",0
093A                             ; dw get
093A   CD 94 08               CALL   define   
093D   05 68 61 73 68 00      .PSTR   "hash",0   
0943   19 06                  DW   hash   
0945   CD 94 08               CALL   define   
0948   06 69 6E 70 75 74 00   .PSTR   "input",0   
094F   15 07                  DW   input   
0951   CD 94 08               CALL   define   
0954   03 69 66 00            .PSTR   "if",0   
0958   81 05                  DW   if   
095A   CD 94 08               CALL   define   
095D   05 69 66 74 65 00      .PSTR   "ifte",0   
0963   83 05                  DW   ifte   
0965   CD 94 08               CALL   define   
0968   04 6B 65 79 00         .PSTR   "key",0   
096D   29 07                  DW   key   
096F   CD 94 08               CALL   define   
0972   04 6C 65 74 00         .PSTR   "let",0   
0977   34 06                  DW   let   
0979   CD 94 08               CALL   define   
097C   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0982   8F 05                  DW   loop   
0984   CD 94 08               CALL   define   
0987   04 6D 61 70 00         .PSTR   "map",0   
098C   39 07                  DW   map   
098E   CD 94 08               CALL   define   
0991   04 6D 6F 64 00         .PSTR   "mod",0   
0996   E8 06                  DW   mod   
0998   CD 94 08               CALL   define   
099B   04 6E 65 67 00         .PSTR   "neg",0   
09A0   32 07                  DW   neg   
09A2   CD 94 08               CALL   define   
09A5   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09AD   20 07                  DW   output   
09AF   CD 94 08               CALL   define   
09B2   05 73 63 61 6E 00      .PSTR   "scan",0   
09B8   01 00                  DW   scan   
09BA   CD 94 08               CALL   define   
09BD   04 73 65 74 00         .PSTR   "set",0   
09C2   71 05                  DW   set   
09C4   CD 94 08               CALL   define   
09C7   04 73 68 6C 00         .PSTR   "shl",0   
09CC   CF 03                  DW   shl   
09CE   CD 94 08               CALL   define   
09D1   04 73 68 72 00         .PSTR   "shr",0   
09D6   DF 03                  DW   shr   
09D8   CD 94 08               CALL   define   
09DB   05 73 71 72 74 00      .PSTR   "sqrt",0   
09E1   CE 06                  DW   sqrt1   
09E3   CD 94 08               CALL   define   
09E6   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09EE   85 05                  DW   switch   
09F0   CD 94 08               CALL   define   
09F3   05 74 72 75 65 00      .PSTR   "true",0   
09F9   FF FF                  DW   true   
09FB   CD 94 08               CALL   define   
09FE   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A05   91 05                  DW   words   
0A07   C9                     RET      
0A08                START:       
0A08   31 80 18               LD   sp,STACK   ; start of Siena
0A0B   CD AC 08               CALL   init   ; setups
0A0E   CD 8D 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A11   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A1E                INTERPRET:      
0A1E   CD 7D 08               CALL   prompt   
0A21   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A24   ED 43 9C 18            LD   (vTIBPtr),bc   
0A28                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A28   1E 00                  LD   e,0   ; initilize nesting value
0A2A   C5                     PUSH   bc   ; save offset into TIB,
0A2B                             ; bc is also the count of chars in TIB
0A2B   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A2E   18 06                  JR   interpret4   
0A30                INTERPRET3:      
0A30   7E                     LD   a,(hl)   ; a = char in TIB
0A31   23                     INC   hl   ; inc pointer into TIB
0A32   0B                     DEC   bc   ; dec count of chars in TIB
0A33   CD 51 08               CALL   nesting   ; update nesting value
0A36                INTERPRET4:      
0A36   79                     LD   a,c   ; is count zero?
0A37   B0                     OR   b   
0A38   20 F6                  JR   nz,interpret3   ; if not loop
0A3A   C1                     POP   bc   ; restore offset into TIB
0A3B                WAITCHAR:      
0A3B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A3E   FE 20                  CP   $20   ; compare to space
0A40   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A42   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A44                             ; ???? NEEDED?
0A44   28 27                  JR   z,waitchar4   
0A46   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A48   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A4A                MACRO:       
0A4A                             ;  ld (vTIBPtr),bc
0A4A                             ;  ld hl,ctrlCodes
0A4A                             ;  add a,l			            ; look up key of macros
0A4A                             ;  ld l,a
0A4A                             ;  ld e,(hl)
0A4A                             ;  ld a,e
0A4A                             ;  or a
0A4A                             ;  jr z,macro1
0A4A                             ;  ld d,msb(macros)
0A4A                             ;  push de
0A4A                             ;  call call		            ; Siena exec_ operation and jump to it
0A4A                             ;  db DC1,0
0A4A                             ; macro1:
0A4A                             ;  ld bc,(vTIBPtr)
0A4A   18 DC                  JR   interpret2   
0A4C                WAITCHAR1:      
0A4C   21 00 19               LD   hl,TIB   
0A4F   09                     ADD   hl,bc   
0A50   77                     LD   (hl),a   ; store the character in textbuf
0A51   03                     INC   bc   
0A52   CD 85 00               CALL   putchar   ; echo character to screen
0A55   CD 51 08               CALL   nesting   
0A58   18 E1                  JR   waitchar   ; wait for next character
0A5A                WAITCHAR3:      
0A5A   21 00 19               LD   hl,TIB   
0A5D   09                     ADD   hl,bc   
0A5E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A60   23                     INC   hl   
0A61   36 0A                  LD   (hl),"\n"   
0A63   23                     INC   hl   
0A64   03                     INC   bc   
0A65   03                     INC   bc   
0A66   CD 86 08               CALL   crlf   ; echo character to screen
0A69   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A6A   B7                     OR   a   
0A6B   20 CE                  JR   nz,waitchar   
0A6D                WAITCHAR4:      
0A6D   ED 43 9C 18            LD   (vTIBPtr),bc   
0A71   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A74                             ; we pressed enter
0A74   0B                     DEC   bc   
0A75                NEXT:        
0A75   03                     INC   bc   ; Increment the IP
0A76   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A77   FE 20                  CP   " "   ; whitespace?
0A79   28 FA                  JR   z,next   ; space? ignore
0A7B   38 07                  JR   c,next1   
0A7D   6F                     LD   l,a   ; index into table
0A7E   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A80   6E                     LD   l,(hl)   ; get low jump address
0A81   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A83   E9                     JP   (hl)   ; Jump to routine
0A84                NEXT1:       
0A84   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0A86   28 07                  JR   z,escape_   
0A88   FE 00                  CP   NUL   ; end of input string?
0A8A   28 04                  JR   z,exit_   
0A8C                             ; cp ETX                    ; return from function ?
0A8C                             ; jr z,return_
0A8C   C3 1E 0A               JP   interpret   ; no, other whitespace, macros?
0A8F                ESCAPE_:      
0A8F   03                     INC   bc   ; falls through
0A90                EXIT_:       
0A90   60 69                  LD   hl,bc   
0A92   E9                     JP   (hl)   
0A93                             ; needs a different thing to execute a block of code than an a command like
0A93                             ; executes a null teminated string (which executes exit_)
0A93                EXEC:        
0A93   C1                     POP   bc   ; bc = code*
0A94   0B                     DEC   bc   ; dec to prepare for next routine
0A95   DD E9                  JP   (ix)   
0A97                             ; execute a block of code which ends with }
0A97                             ; uses parent scope
0A97                BLOCKEXEC:      
0A97   E1                     POP   hl   ; hl = code*
0A98   7C                     LD   a,h   ; skip if destination address is NUL
0A99   B5                     OR   l   
0A9A   28 17                  JR   z,exec2   
0A9C   C5                     PUSH   bc   ; push IP
0A9D   11 00 00               LD   de,0   
0AA0   D5                     PUSH   de   ; push null arglist*
0AA1   FD 5E 02               LD   e,(iy+2)   ; de = ScopeBP from parent stack frame
0AA4   FD 56 03               LD   d,(iy+3)   
0AA7   D5                     PUSH   de   ; push ScopeBP
0AA8   FD E5                  PUSH   iy   ; push BP
0AAA   FD 21 00 00            LD   iy,0   ; BP = SP
0AAE   FD 39                  ADD   iy,sp   
0AB0   44 4D                  LD   bc,hl   ; IP = pointer to code
0AB2   0B                     DEC   bc   ; dec to prepare for next routine
0AB3                EXEC2:       
0AB3   DD E9                  JP   (ix)   
0AB5                             ; call with args
0AB5                             ; creates a scope
0AB5                CALL:        
0AB5                DOCALL:      ; execute code at pointer
0AB5   E1                     POP   hl   ; hl = pointer to code
0AB6   7C                     LD   a,h   ; skip if destination address is NUL
0AB7   B5                     OR   l   
0AB8   28 2B                  JR   z,doCall2   
0ABA   5E                     LD   e,(hl)   ; de = code*, hl = arglist*
0ABB   23                     INC   hl   
0ABC   56                     LD   d,(hl)   
0ABD   E5                     PUSH   hl   ; hl' = block* - 1
0ABE   D9                     EXX      
0ABF   E1                     POP   hl   
0AC0   D9                     EXX      
0AC1   EB                     EX   de,hl   
0AC2                             ; reserve space for locals
0AC2   7D                     LD   a,l   ; if arglist* == null, skip
0AC3   B4                     OR   h   
0AC4   3E 00                  LD   a,0   
0AC6   28 03                  JR   z,doCall1   
0AC8   2B                     DEC   hl   ; a = num locals
0AC9   7E                     LD   a,(hl)   
0ACA   23                     INC   hl   ; hl = arglist*
0ACB                DOCALL1:      
0ACB   EB                     EX   de,hl   ; de = arglist*
0ACC   87                     ADD   a,a   ; double (bytes)
0ACD   ED 44                  NEG      ; a = -bytes
0ACF   6F                     LD   l,a   ; hl = -bytes
0AD0   07                     RLCA      
0AD1   9F                     SBC   a,a   
0AD2   67                     LD   h,a   
0AD3   39                     ADD   hl,sp   ; sp -= bytes
0AD4   F9                     LD   sp,hl   
0AD5   C5                     PUSH   bc   ; push IP
0AD6   D5                     PUSH   de   ; push arglist*
0AD7   FD E5                  PUSH   iy   ; push ScopeBP
0AD9   FD E5                  PUSH   iy   ; push BP
0ADB   FD 21 00 00            LD   iy,0   ; BP = SP
0ADF   FD 39                  ADD   iy,sp   
0AE1   D9                     EXX      
0AE2   E5                     PUSH   hl   
0AE3   D9                     EXX      
0AE4   C1                     POP   bc   ; IP = block-1, ready for NEXT
0AE5                DOCALL2:      
0AE5   DD E9                  JP   (ix)   
0AE7                             ; return:
0AE7                             ; exx
0AE7                             ; ld e,(iy+0)                 ; de = oldBP
0AE7                             ; ld d,(iy+1)
0AE7                             ; ld c,(iy+4)                 ; bc = IP
0AE7                             ; ld b,(iy+5)
0AE7                             ; exx
0AE7                             ; ld d,iyh                    ; hl = BP
0AE7                             ; ld e,iyl
0AE7                             ; ex de,hl
0AE7                             ; ld e,(iy+2)                 ; de = BP, hl = arglist (numargs = arglist[-2])
0AE7                             ; ld d,(iy+3)
0AE7                             ; ex de,hl
0AE7                             ; ld a,4                      ; a = 4
0AE7                             ; dec hl                      ; hl = ptr to numargs
0AE7                             ; dec hl
0AE7                             ; add a,(hl)                  ; a += numargs
0AE7                             ; add a,a                     ; a *= 2
0AE7                             ; ld hl,de                    ; a = offset, hl = de = BP
0AE7                             ; or a                        ; bc = BP - sp = count
0AE7                             ; sbc hl,sp
0AE7                             ; ld bc,hl
0AE7                             ; ld hl,de                    ; a = offset, bc = count, hl = de = BP
0AE7                             ; add a,l                     ; bc = count, de = BP + a = firstArg, hl = BP
0AE7                             ; ld l,a
0AE7                             ; ld a,0
0AE7                             ; adc a,h
0AE7                             ; ld h,a
0AE7                             ; ex de,hl
0AE7                             ; dec de                      ; de = firstArg-1
0AE7                             ; dec hl                      ; hl = BP-1
0AE7                             ; lddr
0AE7                             ; inc de                      ; sp = new sp
0AE7                             ; ex de,hl
0AE7                             ; ld sp,hl
0AE7                             ; exx
0AE7                             ; push de                     ; oldBP
0AE7                             ; push bc                     ; IP
0AE7                             ; exx
0AE7                             ; pop bc
0AE7                             ; pop iy
0AE7                             ; jp (ix)
0AE7                             ; arglist* block* -- ptr
0AE7                FUNC:        
0AE7   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0AEA   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0AEC   23                     INC   hl   
0AED   36 B5                  LD   (hl),lsb(doCall)   
0AEF   23                     INC   hl   
0AF0   36 0A                  LD   (hl),msb(doCall)   
0AF2   23                     INC   hl   
0AF3   D1                     POP   de   ; hl = heapPtr, de = block
0AF4   EB                     EX   de,hl   ; hl = heapPtr, de = arglist*, (sp) = block*
0AF5   E3                     EX   (sp),hl   
0AF6   EB                     EX   de,hl   
0AF7   73                     LD   (hl),e   ; compile arglist*
0AF8   23                     INC   hl   
0AF9   72                     LD   (hl),d   
0AFA   23                     INC   hl   
0AFB   D1                     POP   de   ; de = block*
0AFC   C5                     PUSH   bc   ; (sp) = IP
0AFD   06 01                  LD   b,1   ; b = nesting
0AFF                FUNC1:       
0AFF   1A                     LD   a,(de)   
0B00   13                     INC   de   
0B01   77                     LD   (hl),a   
0B02   23                     INC   hl   
0B03   FE 29                  CP   ")"   
0B05   28 29                  JR   z,func4   
0B07   FE 7D                  CP   "}"   
0B09   28 25                  JR   z,func4   
0B0B   FE 5D                  CP   "]"   
0B0D   28 21                  JR   z,func4   
0B0F   FE 28                  CP   "("   
0B11   28 12                  JR   z,func2   
0B13   FE 7B                  CP   "{"   
0B15   28 0E                  JR   z,func2   
0B17   FE 5B                  CP   "["   
0B19   28 0A                  JR   z,func2   
0B1B   FE 27                  CP   "'"   
0B1D   28 09                  JR   z,func3   
0B1F   FE 60                  CP   "`"   
0B21   28 05                  JR   z,func3   
0B23   18 DA                  JR   func1   
0B25                FUNC2:       
0B25   04                     INC   b   
0B26   18 D7                  JR   func1   
0B28                FUNC3:       
0B28   3E 80                  LD   a,$80   
0B2A   A8                     XOR   b   
0B2B   47                     LD   b,a   
0B2C   20 D1                  JR   nz,func1   
0B2E   18 03                  JR   func4a   
0B30                FUNC4:       
0B30   05                     DEC   b   
0B31   20 CC                  JR   nz,func1   ; get the next element
0B33                FUNC4A:      
0B33                             ; ld a,ETX                            ; compile ETX which means return from function (use ";" ?)
0B33                             ; ld (hl),a
0B33   23                     INC   hl   
0B34   C1                     POP   bc   ; de = defstart, hl = IP
0B35   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B39   D5                     PUSH   de   
0B3A   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B3D   DD E9                  JP   (ix)   
0B3F                             ; index -- value
0B3F                             ; returns value of arg
0B3F                ARG:         
0B3F                             ;     inc bc                      ; get next char
0B3F                             ;     ld a,(bc)
0B3F                             ;     push bc                     ; save IP
0B3F                             ;     ld e,(iy+2)                 ; hl = arglist, numargs = arglist[-2]
0B3F                             ;     ld d,(iy+3)
0B3F                             ;     ex de,hl
0B3F                             ;     dec hl
0B3F                             ;     dec hl
0B3F                             ;     ld b,(hl)                   ; b = numargs
0B3F                             ;     inc hl                      ; hl = arglist
0B3F                             ;     inc hl
0B3F                             ;     ld c,b                      ; offset = numargs * 2
0B3F                             ;     sla c
0B3F                             ; arg0:
0B3F                             ;     cp (hl)
0B3F                             ;     jr z,arg1
0B3F                             ;     inc hl
0B3F                             ;     dec c                       ; offset ++
0B3F                             ;     djnz arg0
0B3F                             ;     pop bc                      ; no match, restore IP
0B3F                             ;     ld hl,0                     ; return 0
0B3F                             ;     push hl
0B3F                             ;     jp (ix)
0B3F                             ; arg1:
0B3F                             ;     ld a,c                      ; hl = (offset + 4) * 2
0B3F                             ;     add a,4
0B3F                             ;     ld l,a
0B3F                             ;     ld h,0
0B3F                             ;     add hl,hl
0B3F                             ;     pop bc                      ; restore IP
0B3F                             ;     ld d,iyh                    ; de = BP
0B3F                             ;     ld e,iyl
0B3F                             ;     ex de,hl
0B3F                             ;     add hl,de                   ; hl = BP + (offset + 4) * 2
0B3F                             ;     dec hl                      ; de = arg
0B3F                             ;     ld (vPointer),hl             ; store address of arg in setter
0B3F                             ;     ld d,(hl)
0B3F                             ;     dec hl
0B3F                             ;     ld e,(hl)
0B3F                             ;     push de                     ; push arg
0B3F   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "() -2?", $0000
4000                             ; test "(a) -1?", $0001
4000                             ; test "(a:) -1?", $0001
4000                             ; test "(a:b) -1?", $0102
4000                             ; test "(:b) -1?", $0101
4000                             ; test ":x 20 let x 100 set x", 100
4000                             ; test "[10 20 30] 1?", 20
4000                             ; test ":x [10 20 30] let x 1? 50 set x 1?", 50
4000                             ; test "bytes [1 2 3] 1?", 2
4000                             ; test "bytes :x [1 2 3] let x 1?", 2
4000                             ; test "bytes [`A` `B` `C`] 1?", 66
4000                          ;*Macro unroll:  test ":x (a) {2} def 1 x", 2
4000   31 80 18               LD   SP,STACK   
4003   CD AC 08               CALL   init   
4006   CD 93 0A               CALL   exec   
4009   3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a) {2} def 1 x"   
401C                          ;*Macro unroll:  expect ":x (a) {2} def 1 x",2
401C   E1                     POP   HL   
401D   E5                     PUSH   HL   
401E   11 02 00               LD   DE,2   
4021   B7                     OR   A   
4022   ED 52                  SBC   HL,DE   
4024   7D                     LD   A,L   
4025   B4                     OR   H   
4026   28 5D                  JR   Z,expectM_0_2465S43   
4028   CD 8D 08               CALL   printStr   
402B   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a) {2} def 1 x"   
4044   CD 8D 08               CALL   printStr   
4047   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4056   21 02 00               LD   HL,2   
4059   CD E1 07               CALL   prtdec   
405C   CD 8D 08               CALL   printStr   
405F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
406C   E1                     POP   hl   
406D   E5                     PUSH   hl   
406E   CD E1 07               CALL   prtdec   
4071   E1                     POP   hl   
4072   CD 8D 08               CALL   printStr   
4075   20 28 23 00            .CSTR   " (#"   
4079   CD 29 08               CALL   prthex   
407C   CD 8D 08               CALL   printStr   
407F   29 0D 0A 00            .CSTR   ")\r\n"   
4083   76                     HALT      
4084   00                     .CSTR      
4085                EXPECTM_0_2465S43:      
4085   E1                     POP   HL   
4086                             ; test ":x (a) {a} def 1 x", 1
4086                             ; test ":x (a:b) {$a 1 + $b set} def x", 1
4086                             ; test "1", 1
4086                             ; test "2", 2
4086                             ; test "1", 1
4086                             ; test "0", 0
4086                             ; test "10", 10
4086                             ; test "123", 123
4086                             ; test "-1",-1
4086                             ; test "``", 0
4086                             ; test "`a`", $61
4086                             ; test "`\\``", $60
4086                             ; test "#10", $10
4086                             ; test "#FF", $FF
4086                             ; test "-1 2 +",1
4086                             ; test "-1 1 +",0
4086                             ; test "1 2 +", 3
4086                             ; test "4 1 2 +", 3
4086                             ; test "1 2 +", 3
4086                             ; test "123 456 +", 123+456
4086                             ; test "64 128 +", 64+128
4086                             ; test "-1 -1 -",0
4086                             ; test "5 3 -", 2
4086                             ; test "3 5 &", 1
4086                             ; test "3 5 |", 7
4086                             ; test "2 3 *", 6
4086                             ; test "1 2 3 + *", 5
4086                             ; test "7 3 /", 2
4086                             ; test "7 3 / frac", 1
4086                             ; test "10 sqrt", 3
4086                             ; test "10 sqrt frac", 1
4086                             ; test "2 3 =", FALSE
4086                             ; test "3 3 =", TRUE
4086                             ; test "1 2 <", TRUE
4086                             ; test "2 1 <", FALSE
4086                             ; test "2 3 <", TRUE
4086                             ; test "3 3 <", FALSE
4086                             ; test "1 2 >", FALSE
4086                             ; test "2 1 >", TRUE
4086                             ; test "3 3 >", FALSE
4086                             ; test "4 3 >", TRUE
4086                             ; test "2 2 <=", TRUE
4086                             ; test "2 2 >=", TRUE
4086                             ; 
4086                             ; 
4086                             ; test ":x 1000 let x 10 set x", 10
4086                             ; test ":x [100] { @1 } closure x", 100
4086                             ; test ":x [100 200] { @2 } closure x", 200
4086                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4086                             ; test ":x 'a' {$a} def 2 x", 2
4086                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4086                             ; test ":x '' { 3 2 } def x + ", 5
4086                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4086                             ; test "0 [{1}] switch", 1
4086                             ; test "1 [{1} {2} {3}] switch", 2
4086                             ; test "9 [{1} {5}] switch", 5
4086                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4086                             ; test "bytes 'ABC' get", $41
4086                             ; test "bytes [1 2 3] get", 1
4086                             ; test ":xyz 123 const ; xyz", 123
4086                             ; test ":x 1 const ; x", 1
4086                             ; test ":x 'A' const x get", $41
4086                             ; test ":x [1] const x get", 1
4086                             ; test ":x [1 2 3] const x 2?", 3
4086                             ; test "2 (1 2 +) *", 6
4086                             ; test ":xyz 123 const ; xyz", 123
4086                             ; test ":xyz 123 let ; xyz get", 123
4086                             ; test "1 2 {$1 $2 +} call", 3
4086                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4086                             ; test ":xyz {1} def :xyz addr call", 1
4086                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4086                             ; test ":xyz {10} def :xyz addr exec", 10
4086                             ; test ":xyz {10} def :xyz addr call", 10
4086                             ; test "'hello' hash", $7f54
4086                             ; test ":hello", $7f54
4086                             ; test "{{{1} exec} exec} exec", 1
4086                             ; test "5 {{{$1} exec} exec} call", 5
4086                             ; test "5 {$1} call", 5
4086                             ; test "5 {{$1} exec} call", 5
4086                             ; test "2 1 {{$1} call} call", 2
4086                             ; test "2 1 {$2} call", 1
4086                             ; test "2 1 {$1} call", 2
4086                             ; test "2 1 {$2} call", 1
4086                             ; test "2 4 {$2} call", 4
4086                             ; test "{{1} call} call", 1
4086                             ; test "5 {-1 {$1} if} call", 5
4086                             ; test "0 {} loop", 0
4086                             ; test "1 {1-} loop", $1a00
4086                             ; test ":h {1} def :h addr call", 1
4086                             ; ; call enter
4086                             ; ;     .cstr "1 3",$22,"+"
4086                             ; ; expect "1 3 DUP +", 6
4086   CD 8D 08               CALL   printStr   
4089   44 6F 6E 65 21 00      .CSTR   "Done!"   
408F   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0739 DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
ARGLIST_:           030F DEFINED AT LINE 229 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 232 IN Siena.asm
DOT1:               031E DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 251 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 260 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 263 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 265 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 267 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 269 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 271 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 273 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 275 IN Siena.asm
AND_:               0354 DEFINED AT LINE 277 IN Siena.asm
AND1:               035B DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
OR_:                035F DEFINED AT LINE 290 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 300 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 302 IN Siena.asm
                    > USED AT LINE 313 IN Siena.asm
INV_:               0371 DEFINED AT LINE 311 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 315 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 322 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 327 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 330 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
NOT_:               039A DEFINED AT LINE 347 IN Siena.asm
EQ_:                039F DEFINED AT LINE 351 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 357 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 362 IN Siena.asm
LT1:                03AA DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 373 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 384 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 392 IN Siena.asm
SHL:                03CF DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHR:                03DF DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 426 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
NUM:                040E DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
NUM3:               043B DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
STRING:             045B DEFINED AT LINE 520 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
ARGLIST:            047F DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
ARGLIST1:           0489 DEFINED AT LINE 562 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
ARGLIST2:           0495 DEFINED AT LINE 570 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
ARGLIST3:           049D DEFINED AT LINE 578 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
ARGLIST4:           04A0 DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
ARGLIST5:           04A5 DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 584 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 608 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 615 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 623 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 637 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 656 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 660 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
BLOCKEND2:          052C DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
PROP:               054D DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              054F DEFINED AT LINE 733 IN Siena.asm
DOLET2:             0553 DEFINED AT LINE 736 IN Siena.asm
DOLET3:             0556 DEFINED AT LINE 740 IN Siena.asm
INDEX:              0559 DEFINED AT LINE 744 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
INDEX1:             0562 DEFINED AT LINE 751 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
INDEX2:             056E DEFINED AT LINE 760 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
SET:                0571 DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
SET1:               057F DEFINED AT LINE 775 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
IF:                 0581 DEFINED AT LINE 780 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
IFTE:               0583 DEFINED AT LINE 787 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
SWITCH:             0585 DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
LOOP:               058F DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
WORDS:              0591 DEFINED AT LINE 880 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
BYTES:              0596 DEFINED AT LINE 883 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
BYTES1:             0599 DEFINED AT LINE 885 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
ARRAY:              059E DEFINED AT LINE 889 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
ARRAYEND:           05BA DEFINED AT LINE 903 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND1:          05DB DEFINED AT LINE 926 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
ARRAYEND2:          05EB DEFINED AT LINE 938 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
ARRAYEND3:          05FE DEFINED AT LINE 952 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
HASH:               0619 DEFINED AT LINE 974 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
DEF:                0624 DEFINED AT LINE 984 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
DEF1:               062B DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
LET:                0634 DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
LET1:               0650 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
LET2:               0658 DEFINED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
ADDR:               065B DEFINED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
ADDR1:              0667 DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
SYMBOL:             0672 DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
SYMBOL0:            067A DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
SYMBOL1:            067C DEFINED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
SYMBOL2:            068C DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
IDENT:              069A DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
IDENT0:             06A1 DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
IDENT1:             06A3 DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
IDENT2:             06B3 DEFINED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
IDENT3:             06C7 DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
FRAC:               06C8 DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
SQRT1:              06CE DEFINED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
ABS1:               06DB DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
MOD:                06E8 DEFINED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
EQUALS:             06F4 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
LESSTHANEQ:         06FC DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
LESSTHAN:           0701 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN1:          0706 DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
TRUE1:              0709 DEFINED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
FALSE1:             070F DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
INPUT:              0715 DEFINED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
OUTPUT:             0720 DEFINED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
KEY:                0729 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
NEG:                0732 DEFINED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
FILTER:             0739 DEFINED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
MAP:                0739 DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
HASHSTR:            073B DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
HASHSTR1:           073E DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
HASHSTR2:           0743 DEFINED AT LINE 1234 IN Siena.asm
DEFINEENTRY:        0754 DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
DEFINEENTRY0:       0759 DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1274 IN Siena.asm
DEFINEENTRY1:       0768 DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
DEFINEENTRY2:       076E DEFINED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
DEFINEENTRY3:       0770 DEFINED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
LOOKUPENTRY:        077A DEFINED AT LINE 1292 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1101 IN Siena.asm
LOOKUPENTRY0:       077F DEFINED AT LINE 1296 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
LOOKUPENTRY1:       078E DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
LOOKUPENTRY2:       0794 DEFINED AT LINE 1314 IN Siena.asm
LOOKUPENTRY3:       0796 DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
DIVIDE:             079E DEFINED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
DIVIDE1:            07A3 DEFINED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
DIVIDE2:            07B0 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
DIVIDE3:            07B1 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
SQUAREROOT:         07B7 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
SQUAREROOT1:        07BC DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
SQUAREROOT4:        07D7 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
SQUAREROOT5:        07DE DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
PRTDEC:             07E1 DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07F0 DEFINED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
PRTDEC1:            0812 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
PRTDEC2:            0814 DEFINED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
PRTDEC3:            0824 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
PRTDEC4:            0825 DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
PRTHEX:             0829 DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0834 DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
PRTHEX3:            083D DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
PRTSTR0:            0848 DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
PRTSTR:             084C DEFINED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
NESTING:            0851 DEFINED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
NESTING1A:          085C DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
NESTING1:           085F DEFINED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
NESTING2:           086E DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
NESTING3:           0870 DEFINED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
NESTING4:           087B DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
PROMPT:             087D DEFINED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
CRLF:               0886 DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
PRINTSTR:           088D DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 148
DEFINE:             0894 DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
INIT:               08AC DEFINED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08C6 DEFINED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
START:              0A08 DEFINED AT LINE 1686 IN Siena.asm
INTERPRET:          0A1E DEFINED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1791 IN Siena.asm
INTERPRET2:         0A28 DEFINED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
INTERPRET3:         0A30 DEFINED AT LINE 1705 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
INTERPRET4:         0A36 DEFINED AT LINE 1711 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
WAITCHAR:           0A3B DEFINED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
MACRO:              0A4A DEFINED AT LINE 1727 IN Siena.asm
WAITCHAR1:          0A4C DEFINED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
WAITCHAR3:          0A5A DEFINED AT LINE 1753 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
WAITCHAR4:          0A6D DEFINED AT LINE 1767 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
NEXT:               0A75 DEFINED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
NEXT1:              0A84 DEFINED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
ESCAPE_:            0A8F DEFINED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1786 IN Siena.asm
EXIT_:              0A90 DEFINED AT LINE 1796 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
EXEC:               0A93 DEFINED AT LINE 1802 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 41
BLOCKEXEC:          0A97 DEFINED AT LINE 1809 IN Siena.asm
EXEC2:              0AB3 DEFINED AT LINE 1825 IN Siena.asm
                    > USED AT LINE 1813 IN Siena.asm
CALL:               0AB5 DEFINED AT LINE 1830 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
DOCALL:             0AB5 DEFINED AT LINE 1831 IN Siena.asm
DOCALL1:            0ACB DEFINED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
DOCALL2:            0AE5 DEFINED AT LINE 1872 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
FUNC:               0AE7 DEFINED AT LINE 1919 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
FUNC1:              0AFF DEFINED AT LINE 1940 IN Siena.asm
                    > USED AT LINE 1964 IN Siena.asm
                    > USED AT LINE 1967 IN Siena.asm
                    > USED AT LINE 1972 IN Siena.asm
                    > USED AT LINE 1976 IN Siena.asm
FUNC2:              0B25 DEFINED AT LINE 1965 IN Siena.asm
                    > USED AT LINE 1954 IN Siena.asm
                    > USED AT LINE 1956 IN Siena.asm
                    > USED AT LINE 1958 IN Siena.asm
FUNC3:              0B28 DEFINED AT LINE 1968 IN Siena.asm
                    > USED AT LINE 1961 IN Siena.asm
                    > USED AT LINE 1963 IN Siena.asm
FUNC4:              0B30 DEFINED AT LINE 1974 IN Siena.asm
                    > USED AT LINE 1947 IN Siena.asm
                    > USED AT LINE 1949 IN Siena.asm
                    > USED AT LINE 1951 IN Siena.asm
FUNC4A:             0B33 DEFINED AT LINE 1977 IN Siena.asm
                    > USED AT LINE 1973 IN Siena.asm
ARG:                0B3F DEFINED AT LINE 1989 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1546 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1548 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 735 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 1920 IN Siena.asm
                    > USED AT LINE 1982 IN Siena.asm
                    > USED AT LINE 1984 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1554 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2465S43:  4085 DEFINED AT LINE 34
                    > USED AT LINE 10
