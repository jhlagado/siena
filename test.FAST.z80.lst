0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 73 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   AD                     DB   lsb(exit_)   ; NUL
0201   C5                     DB   lsb(nop_)   ; SOH
0202   C5                     DB   lsb(nop_)   ; STX
0203   AA                     DB   lsb(etx_)   ; ETX
0204   C5                     DB   lsb(nop_)   ; 
0205   C5                     DB   lsb(nop_)   ; 
0206   C5                     DB   lsb(nop_)   ; 
0207   C5                     DB   lsb(nop_)   ; 
0208   C5                     DB   lsb(nop_)   ; 
0209   C5                     DB   lsb(nop_)   ; 
020A   C5                     DB   lsb(nop_)   ; 
020B   C5                     DB   lsb(nop_)   ; 
020C   C5                     DB   lsb(nop_)   ; 
020D   C5                     DB   lsb(nop_)   ; 
020E   C5                     DB   lsb(nop_)   ; 
020F   C5                     DB   lsb(nop_)   ; 
0210   C5                     DB   lsb(nop_)   ; 
0211   C5                     DB   lsb(nop_)   ; 
0212   C5                     DB   lsb(nop_)   ; 
0213   C5                     DB   lsb(nop_)   ; 
0214   C5                     DB   lsb(nop_)   ; 
0215   C5                     DB   lsb(nop_)   ; 
0216   C5                     DB   lsb(nop_)   ; 
0217   C5                     DB   lsb(nop_)   ; 
0218   C5                     DB   lsb(nop_)   ; 
0219   C5                     DB   lsb(nop_)   ; 
021A   C5                     DB   lsb(nop_)   ; 
021B   C5                     DB   lsb(nop_)   ; 
021C   C5                     DB   lsb(nop_)   ; 
021D   C5                     DB   lsb(nop_)   ; 
021E   C5                     DB   lsb(nop_)   ; 
021F   C5                     DB   lsb(nop_)   ; 
0220   C5                     DB   lsb(nop_)   ; 
0221   C5                     DB   lsb(nop_)   ;    !
0222   C5                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C5                     DB   lsb(nop_)   ;    %
0226   C5                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   21                     DB   lsb(block_)   ;    (
0229   24                     DB   lsb(blockend_)   ;    )
022A   C5                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C5                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   15                     DB   lsb(dot_)   ;    .
022F   C5                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C5                     DB   lsb(nop_)   ;    :
023B   C5                     DB   lsb(nop_)   ;    ;
023C   C5                     DB   lsb(nop_)   ;    <
023D   C5                     DB   lsb(nop_)   ;    =
023E   C5                     DB   lsb(nop_)   ;    >
023F   C5                     DB   lsb(nop_)   ;    ?
0240   B0                     DB   lsb(fetch_)   ;    @
0241   8A                     DB   lsb(kall_)   ;    A
0242   8A                     DB   lsb(kall_)   ;    B
0243   8A                     DB   lsb(kall_)   ;    C
0244   8A                     DB   lsb(kall_)   ;    D
0245   8A                     DB   lsb(kall_)   ;    E
0246   8A                     DB   lsb(kall_)   ;    F
0247   8A                     DB   lsb(kall_)   ;    G
0248   8A                     DB   lsb(kall_)   ;    h
0249   8A                     DB   lsb(kall_)   ;    I
024A   8A                     DB   lsb(kall_)   ;    J
024B   8A                     DB   lsb(kall_)   ;    K
024C   8A                     DB   lsb(kall_)   ;    L
024D   8A                     DB   lsb(kall_)   ;    M
024E   8A                     DB   lsb(kall_)   ;    N
024F   8A                     DB   lsb(kall_)   ;    O
0250   8A                     DB   lsb(kall_)   ;    p
0251   8A                     DB   lsb(kall_)   ;    Q
0252   8A                     DB   lsb(kall_)   ;    R
0253   8A                     DB   lsb(kall_)   ;    S
0254   8A                     DB   lsb(kall_)   ;    T
0255   8A                     DB   lsb(kall_)   ;    U
0256   8A                     DB   lsb(kall_)   ;    V
0257   8A                     DB   lsb(kall_)   ;    W
0258   8A                     DB   lsb(kall_)   ;    X
0259   8A                     DB   lsb(kall_)   ;    Y
025A   8A                     DB   lsb(kall_)   ;    Z
025B   C5                     DB   lsb(nop_)   ;    [
025C   C5                     DB   lsb(nop_)   ;    \
025D   C5                     DB   lsb(nop_)   ;    ]
025E   C5                     DB   lsb(nop_)   ;    ^
025F   C5                     DB   lsb(nop_)   ;    _
0260   27                     DB   lsb(char_)   ;    `    	
0261   2A                     DB   lsb(a_)   ;    a
0262   36                     DB   lsb(var_)   ;    b
0263   2D                     DB   lsb(c_)   ;    c
0264   30                     DB   lsb(d_)   ;    d
0265   33                     DB   lsb(e_)   ;    e
0266   36                     DB   lsb(f_)   ;    f
0267   39                     DB   lsb(g_)   ;    g
0268   36                     DB   lsb(var_)   ;    h
0269   3C                     DB   lsb(i_)   ;    i
026A   36                     DB   lsb(var_)   ;    j
026B   3F                     DB   lsb(k_)   ;    k
026C   42                     DB   lsb(l_)   ;    l
026D   45                     DB   lsb(m_)   ;    m
026E   45                     DB   lsb(m_)   ;    n
026F   4B                     DB   lsb(o_)   ;    o
0270   4E                     DB   lsb(p_)   ;    p
0271   36                     DB   lsb(var_)   ;    q
0272   51                     DB   lsb(r_)   ;    r
0273   54                     DB   lsb(s_)   ;    s
0274   36                     DB   lsb(var_)   ;    t
0275   57                     DB   lsb(u_)   ;    u
0276   36                     DB   lsb(var_)   ;    v
0277   5A                     DB   lsb(w_)   ;    w
0278   5D                     DB   lsb(x_)   ;    x
0279   36                     DB   lsb(var_)   ;    y
027A   36                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   6C                     DB   lsb(or_)   ;    |
027D   12                     DB   lsb(lambdaEnd_)   ;    }
027E   C5                     DB   lsb(nop_)   ;    ~
027F   C5                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                NESTINGSTR:      
0300   22 27 28 29 5B 5D 7B 7D 60 00 .CSTR   $22,"'()[]{}`"   
030A                ETX:         
030A   21 00 E6               LD   hl,-DSTACK   
030D   39                     ADD   hl,sp   
030E   30 03                  JR   nc,etx1   
0310   31 00 1A               LD   sp,DSTACK   
0313                ETX1:        
0313   18 16                  JR   interpret   
0315                START:       
0315   31 00 1A               LD   sp,DSTACK   ; start of Siena
0318   CD 73 08               CALL   init   ; setups
031B   CD 94 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
031E   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
032B                INTERPRET:      
032B   CD 8F 07               CALL   prompt   
032E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0331   ED 43 84 1B            LD   (vTIBPtr),bc   
0335                INTERPRET2:      ; calc nesting (a macro might have changed it)
0335   1E 00                  LD   e,0   ; initilize nesting value
0337   C5                     PUSH   bc   ; save offset into TIB,
0338                             ; bc is also the count of chars in TIB
0338   21 00 18               LD   hl,TIB   ; hl is start of TIB
033B   18 06                  JR   interpret4   
033D                INTERPRET3:      
033D   7E                     LD   a,(hl)   ; a = char in TIB
033E   23                     INC   hl   ; inc pointer into TIB
033F   0B                     DEC   bc   ; dec count of chars in TIB
0340   CD B9 08               CALL   nesting   ; update nesting value
0343                INTERPRET4:      
0343   79                     LD   a,c   ; is count zero?
0344   B0                     OR   b   
0345   20 F6                  JR   nz,interpret3   ; if not loop
0347   C1                     POP   bc   ; restore offset into TIB
0348                WAITCHAR:      
0348   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
034B   FE 20                  CP   $20   ; compare to space
034D   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
034F   FE 00                  CP   $0   ; is it end of string? null end of string
0351   28 45                  JR   z,waitchar4   
0353   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0355   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
0357                MACRO:       
0357   ED 43 84 1B            LD   (vTIBPtr),bc   
035B   21 80 1A               LD   hl,ctrlCodes   
035E   85                     ADD   a,l   ; look up key of macros
035F   6F                     LD   l,a   
0360   5E                     LD   e,(hl)   
0361   7B                     LD   a,e   
0362   B7                     OR   a   
0363   28 09                  JR   z,macro1   
0365   16 01                  LD   d,msb(macros)   
0367   D5                     PUSH   de   
0368   CD 15 09               CALL   exec   ; Siena exec_ operation and jump to it
036B   63 61 00               .CSTR   "ca"   
036E                MACRO1:      
036E   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0372   18 C1                  JR   interpret2   
0374                WAITCHAR1:      
0374   21 00 18               LD   hl,TIB   
0377   09                     ADD   hl,bc   
0378   77                     LD   (hl),a   ; store the character in textbuf
0379   03                     INC   bc   
037A   CD 85 00               CALL   putchar   ; echo character to screen
037D   CD B9 08               CALL   nesting   
0380   18 C6                  JR   waitchar   ; wait for next character
0382                WAITCHAR3:      
0382   21 00 18               LD   hl,TIB   
0385   09                     ADD   hl,bc   
0386   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0388   23                     INC   hl   
0389   36 0A                  LD   (hl),"\n"   
038B   23                     INC   hl   
038C   03                     INC   bc   
038D   03                     INC   bc   
038E   CD B7 07               CALL   crlf   ; echo character to screen
0391   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0392   B7                     OR   a   
0393   20 B3                  JR   nz,waitchar   
0395   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0397   03                     INC   bc   
0398                WAITCHAR4:      
0398   ED 43 84 1B            LD   (vTIBPtr),bc   
039C   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
039F   0B                     DEC   bc   
03A0                             ; ********************************************************************************
03A0                             ; 
03A0                             ; Dispatch Routine.
03A0                             ; 
03A0                             ; Get the next character and form a 1 byte jump address
03A0                             ; 
03A0                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
03A0                             ; jump to the selected function.
03A0                             ; 
03A0                             ; Individual handler routines will deal with each category:
03A0                             ; 
03A0                             ; 1. Detect characters a-z and jump to the User Command handler routine
03A0                             ; 
03A0                             ; 2. Detect characters a-z and jump to the variable handler routine
03A0                             ; 
03A0                             ; 3. All other characters are punctuation and cause a jump to the associated
03A0                             ; primitive code.
03A0                             ; 
03A0                             ; Instruction Pointer IP bc is incremented
03A0                             ; 
03A0                             ; *********************************************************************************
03A0                NEXT:        
03A0   03                     INC   bc   ;  Increment the IP
03A1   0A                     LD   a,(bc)   ;  Get the next character and dispatch
03A2   6F                     LD   l,a   ;  Index into table
03A3   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
03A5   6E                     LD   l,(hl)   ;  get low jump address
03A6   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
03A8   E9                     JP   (hl)   ;  Jump to routine
03A9                             ; **********************************************************************			
03A9                             ; Page 4 primitive routines
03A9                             ; **********************************************************************
03A9                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 BE 07               JP   num   
0403                HEXNUM_:      
0403   C3 EF 07               JP   hexnum   
0406                ARG_:        
0406   C3 C3 09               JP   arg   
0409                STRDEF_:      
0409   C3 E5 08               JP   strDef   
040C                NEWADD2_:      
040C   C3 0A 0A               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 2B 09               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 66 09               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD 0C 08               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   C3 A0 03               JP   next   
0421                BLOCK_:      
0421   C3 7B 09               JP   block   
0424                BLOCKEND_:      
0424   C3 AE 09               JP   blockend   
0427                CHAR_:       
0427   C3 FF 08               JP   char   
042A                             ; exec_:
042A                             ;     jp exec
042A                A_:          
042A   C3 5A 06               JP   a   
042D                C_:          
042D   C3 6A 06               JP   c   
0430                D_:          
0430   C3 75 06               JP   d   
0433                E_:          
0433   C3 85 06               JP   e   
0436                F_:          
0436   C3 95 06               JP   f   
0439                G_:          
0439   C3 A0 06               JP   g   
043C                I_:          
043C   C3 B0 06               JP   i   
043F                K_:          
043F   C3 D0 06               JP   k   
0442                L_:          
0442   C3 DE 06               JP   l   
0445                M_:          
0445   C3 EE 06               JP   m   
0448                N_:          
0448   C3 FE 06               JP   n   
044B                O_:          
044B   C3 09 07               JP   o   
044E                P_:          
044E   C3 19 07               JP   p   
0451                R_:          
0451   C3 24 07               JP   r   
0454                S_:          
0454   C3 2F 07               JP   s   
0457                U_:          
0457   C3 4E 07               JP   u   
045A                W_:          
045A   C3 59 07               JP   w   
045D                X_:          
045D   C3 64 07               JP   x   
0460                AND_:        
0460   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0461   E1                     POP   hl   
0462   7B                     LD   a,e   
0463   A5                     AND   l   
0464   6F                     LD   l,a   
0465   7A                     LD   a,d   
0466   A4                     AND   h   
0467                AND1:        
0467   67                     LD   h,a   
0468   E5                     PUSH   hl   
0469   C3 A0 03               JP   next   
046C                OR_:         
046C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
046D   E1                     POP   hl   
046E   7B                     LD   a,e   
046F   B5                     OR   l   
0470   6F                     LD   l,a   
0471   7A                     LD   a,d   
0472   B4                     OR   h   
0473   18 F2                  JR   and1   
0475                XOR_:        
0475   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0476                XOR1:        
0476   E1                     POP   hl   
0477   7B                     LD   a,e   
0478   AD                     XOR   l   
0479   6F                     LD   l,a   
047A   7A                     LD   a,d   
047B   AC                     XOR   h   
047C   18 E9                  JR   and1   
047E                INV_:        ; Bitwise INVert the top member of the stack
047E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0481   18 F3                  JR   xor1   
0483                ADD_:        ; add the top 2 members of the stack
0483   D1                     POP   de   
0484   E1                     POP   hl   
0485   19                     ADD   hl,de   
0486   E5                     PUSH   hl   
0487   C3 A0 03               JP   next   
048A                KALL_:       
048A   0A                     LD   a,(bc)   
048B   CD A1 08               CALL   lookupRef1   
048E   5E                     LD   e,(hl)   
048F   23                     INC   hl   
0490   56                     LD   d,(hl)   
0491   C3 16 09               JP   exec1   
0494                HDOT_:       ; print hexadecimal
0494   E1                     POP   hl   
0495   CD 54 08               CALL   prthex   
0498   C3 19 04               JP   dot2   
049B                DROP_:       ; Discard the top member of the stack
049B   E1                     POP   hl   
049C   C3 A0 03               JP   next   
049F                UNDROP_:      
049F   3B                     DEC   sp   
04A0   3B                     DEC   sp   
04A1   C3 A0 03               JP   next   
04A4                DUP_:        
04A4   E1                     POP   hl   ; Duplicate the top member of the stack
04A5   E5                     PUSH   hl   
04A6   E5                     PUSH   hl   
04A7   C3 A0 03               JP   next   
04AA                ETX_:        
04AA   C3 0A 03               JP   ETX   
04AD                EXIT_:       
04AD   C3 DF 09               JP   exit   
04B0                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B0   E1                     POP   hl   
04B1                FETCH1:      
04B1   5E                     LD   e,(hl)   
04B2   23                     INC   hl   
04B3   56                     LD   d,(hl)   
04B4   D5                     PUSH   de   
04B5   C3 A0 03               JP   next   
04B8                KEY_:        
04B8   CD 81 00               CALL   getchar   
04BB   26 00                  LD   h,0   
04BD   6F                     LD   l,a   
04BE   E5                     PUSH   hl   
04BF   C3 A0 03               JP   next   
04C2   C3 72 07     MUL_:     JP   mul   
04C5                NOP_:        
04C5   C3 A0 03               JP   next   ; hardwire white space to always exec_ to next (important for arrays)
04C8                OVER_:       
04C8   E1                     POP   hl   ; Duplicate 2nd element of the stack
04C9   D1                     POP   de   
04CA   D5                     PUSH   de   
04CB   E5                     PUSH   hl   
04CC   D5                     PUSH   de   ; and push it to top of stack
04CD   C3 A0 03               JP   next   
04D0                ROT_:        ; a b c -- b c a
04D0   D1                     POP   de   ; a b    de = c
04D1   E1                     POP   hl   ; a       hl = b
04D2   E3                     EX   (sp),hl   ; b       hl = a
04D3   D5                     PUSH   de   ; b c
04D4   E5                     PUSH   hl   ; b c a
04D5   C3 A0 03               JP   next   
04D8                             ;  Left shift { is multiply by 2		
04D8                SHL_:        
04D8   E1                     POP   hl   ; Duplicate the top member of the stack
04D9   29                     ADD   hl,hl   
04DA   E5                     PUSH   hl   ; shift left fallthrough into add_
04DB   C3 A0 03               JP   next   
04DE                             ;  Right shift } is a divide by 2		
04DE                SHR_:        
04DE   E1                     POP   hl   ; Get the top member of the stack
04DF                SHR1:        
04DF   CB 3C                  SRL   h   
04E1   CB 1D                  RR   l   
04E3   E5                     PUSH   hl   
04E4   C3 A0 03               JP   next   
04E7                STORE_:      ; Store the value at the address placed on the top of the stack
04E7   E1                     POP   hl   
04E8   D1                     POP   de   
04E9   73                     LD   (hl),e   
04EA   23                     INC   hl   
04EB   72                     LD   (hl),d   
04EC   C3 A0 03               JP   next   
04EF                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04EF   E1                     POP   hl   
04F0   E3                     EX   (sp),hl   
04F1   E5                     PUSH   hl   
04F2   C3 A0 03               JP   next   
04F5                NEG_:        
04F5   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04F8   D1                     POP   de   
04F9   18 02                  JR   sub2   ; use the SUBtract routine
04FB                SUB_:        ; Subtract the value 2nd on stack from top of stack
04FB   D1                     POP   de   
04FC   E1                     POP   hl   ; Entry point for INVert
04FD                SUB2:        
04FD   B7                     OR   a   ; Entry point for NEGate
04FE   ED 52                  SBC   hl,de   
0500   E5                     PUSH   hl   
0501   C3 A0 03               JP   next   
0504                EQ_:         
0504   E1                     POP   hl   
0505   D1                     POP   de   
0506   B7                     OR   a   ; reset the carry flag
0507   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0509   28 15                  JR   z,true_   
050B                FALSE_:      
050B   21 00 00               LD   hl,0   
050E   E5                     PUSH   hl   
050F   C3 A0 03               JP   next   
0512                GT_:         
0512   D1                     POP   de   
0513   E1                     POP   hl   
0514   18 02                  JR   lt1   
0516                LT_:         
0516   E1                     POP   hl   
0517   D1                     POP   de   
0518                LT1:         
0518   B7                     OR   a   ; reset the carry flag
0519   ED 52                  SBC   hl,de   
051B   28 EE                  JR   z,false_   
051D   FA 0B 05               JP   m,false_   
0520                TRUE_:       
0520   21 01 00               LD   hl,1   
0523   E5                     PUSH   hl   
0524   C3 A0 03               JP   next   
0527                GTE_:        
0527   D1                     POP   de   
0528   E1                     POP   hl   
0529   18 02                  JR   lte1   
052B                LTE_:        
052B   E1                     POP   hl   
052C   D1                     POP   de   
052D                LTE1:        
052D   B7                     OR   a   ; reset the carry flag
052E   ED 52                  SBC   hl,de   
0530   FA 0B 05               JP   m,false_   
0533   C3 FF FF               JP   true   
0536                VAR_:        
0536   0A                     LD   a,(bc)   
0537   CD A7 08               CALL   lookupRef2   
053A   E5                     PUSH   hl   
053B   C3 A0 03               JP   next   
053E                DIV_:        
053E   18 04                  JR   div   
0540                             ;*******************************************************************
0540                             ; Page 5 primitive routines
0540                             ;*******************************************************************
0540                             ;falls through
0540   E5                     PUSH   hl   
0541   C3 A0 03               JP   next   
0544                             ; ********************************************************************
0544                             ; 16-bit division subroutine.
0544                             ; 
0544                             ; bc: divisor, de: dividend, hl: remainder
0544                             ; *********************************************************************
0544                             ; This divides de by bc, storing the result in de, remainder in hl
0544                             ; *********************************************************************
0544                             ; 1382 cycles
0544                             ; 35 bytes (reduced from 48)
0544                             ; 
0544                DIV:         ;=34
0544   D1                     POP   de   ; get first value
0545   E1                     POP   hl   ; get 2nd value
0546   C5                     PUSH   bc   ; Preserve the IP
0547   44                     LD   b,h   ; bc = 2nd value
0548   4D                     LD   c,l   
0549                             ; 
0549   21 00 00               LD   hl,0   ; Zero the remainder
054C   3E 10                  LD   a,16   ; Loop counter
054E                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
054E   CB 21                  SLA   c   
0550   CB 10                  RL   b   
0552   ED 6A                  ADC   hl,hl   
0554   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0556   38 03                  JR   c,div2   
0558   0C                     INC   c   
0559   18 01                  JR   div3   
055B                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
055B   19                     ADD   hl,de   
055C                DIV3:        
055C   3D                     DEC   a   
055D   20 EF                  JR   nz,div1   
055F   50                     LD   d,b   ; Result from bc to de
0560   59                     LD   e,c   
0561                DIV4:        
0561   C1                     POP   bc   ; Restore the IP
0562   D5                     PUSH   de   ; push Result
0563   E5                     PUSH   hl   ; push remainder
0564   C3 A0 03               JP   next   
0567                             ;=57
0567                             ; **************************************************************************
0567                             ; Page 6 Alt primitives
0567                             ; **************************************************************************
0567                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 A0 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 A0 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 A0 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 A0 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 A0 03               JP   next   
0623                             ; exec_:
0623                             ;     call exec1
0623                             ;     jp next
0623                             ; exec1:
0623                             ;     pop hl
0623                             ;     ex (sp),hl
0623                             ;     jp (hl)
0623                PROMPT_:      
0623   CD 8F 07               CALL   prompt   
0626   C3 A0 03               JP   next   
0629                INPORT_:      ; \<
0629   E1                     POP   hl   
062A   79                     LD   a,c   
062B   4D                     LD   c,l   
062C   ED 68                  IN   l,(c)   
062E   26 00                  LD   h,0   
0630   4F                     LD   c,a   
0631   E5                     PUSH   hl   
0632   C3 A0 03               JP   next   
0635                NEWLN_:      
0635   CD B7 07               CALL   crlf   
0638   C3 A0 03               JP   next   
063B                OUTPORT_:      
063B   E1                     POP   hl   
063C   59                     LD   e,c   
063D   4D                     LD   c,l   
063E   E1                     POP   hl   
063F   ED 69                  OUT   (c),l   
0641   4B                     LD   c,e   
0642   C3 A0 03               JP   next   
0645                PRTSTR_:      
0645                PRTSTR:      
0645   E1                     POP   hl   
0646   CD 9C 07               CALL   putStr   
0649   C3 A0 03               JP   next   
064C                RPUSH_:      
064C   E1                     POP   hl   
064D   CD A1 07               CALL   rpush   
0650   C3 A0 03               JP   next   
0653                RPOP_:       
0653   CD AC 07               CALL   rpop   
0656   E5                     PUSH   hl   
0657   C3 A0 03               JP   next   
065A                             ; **************************************************************************
065A                             ; Page 6 primitive routines continued  (page 7)
065A                             ; **************************************************************************
065A                             ; falls through to following page
065A                A:           
065A   03                     INC   bc   
065B   0A                     LD   a,(bc)   
065C   FE 64                  CP   "d"   
065E   CA 83 04               JP   z,add_   
0661   FE 6E                  CP   "n"   
0663   CA 60 04               JP   z,and_   
0666   0B                     DEC   bc   
0667   C3 36 05               JP   var_   
066A                C:           
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 61                  CP   "a"   
066E   CA 74 0A               JP   z,case   
0671   0B                     DEC   bc   
0672   C3 36 05               JP   var_   
0675                D:           
0675   03                     INC   bc   
0676   0A                     LD   a,(bc)   
0677   FE 65                  CP   "e"   
0679   CA 6F 07               JP   z,def_   
067C   FE 69                  CP   "i"   
067E   CA 3E 05               JP   z,div_   
0681   0B                     DEC   bc   
0682   C3 36 05               JP   var_   
0685                E:           
0685   03                     INC   bc   
0686   0A                     LD   a,(bc)   
0687   FE 78                  CP   "x"   
0689   CA 15 09               JP   z,exec   
068C   FE 71                  CP   "q"   
068E   CA 04 05               JP   z,eq_   
0691   0B                     DEC   bc   
0692   C3 36 05               JP   var_   
0695                F:           
0695   03                     INC   bc   
0696   0A                     LD   a,(bc)   
0697   FE 69                  CP   "i"   
0699   CA 6F 07               JP   z,filter_   
069C   0B                     DEC   bc   
069D   C3 36 05               JP   var_   
06A0                G:           
06A0   03                     INC   bc   
06A1   0A                     LD   a,(bc)   
06A2   FE 65                  CP   "e"   
06A4   CA 6F 07               JP   z,get_   
06A7   FE 74                  CP   "t"   
06A9   CA 12 05               JP   z,gt_   
06AC   0B                     DEC   bc   
06AD   C3 36 05               JP   var_   
06B0                I:           
06B0   03                     INC   bc   
06B1   0A                     LD   a,(bc)   
06B2   FE 6E                  CP   "n"   
06B4   CA F4 09               JP   z,in   
06B7   FE 76                  CP   "v"   
06B9   CA 7E 04               JP   z,inv_   
06BC   FE 66                  CP   "f"   
06BE   C2 CC 06               JP   nz,i1   
06C1   03                     INC   bc   
06C2   0A                     LD   a,(bc)   
06C3   FE 65                  CP   "e"   
06C5   CA 3B 0A               JP   z,ife   
06C8   0B                     DEC   bc   
06C9   C3 36 0A               JP   if   
06CC                I1:          
06CC   0B                     DEC   bc   
06CD   C3 36 05               JP   var_   
06D0                K:           
06D0   C3 64 07               JP   x   
06D3   03                     INC   bc   
06D4   0A                     LD   a,(bc)   
06D5   FE 65                  CP   "e"   
06D7   CA B8 04               JP   z,key_   
06DA   0B                     DEC   bc   
06DB   C3 36 05               JP   var_   
06DE                L:           
06DE   03                     INC   bc   
06DF   0A                     LD   a,(bc)   
06E0   FE 65                  CP   "e"   
06E2   CA 6F 07               JP   z,let_   
06E5   FE 74                  CP   "t"   
06E7   CA 16 05               JP   z,lt_   
06EA   0B                     DEC   bc   
06EB   C3 36 05               JP   var_   
06EE                M:           
06EE   03                     INC   bc   
06EF   0A                     LD   a,(bc)   
06F0   FE 61                  CP   "a"   
06F2   CA 6F 07               JP   z,map_   
06F5   FE 75                  CP   "u"   
06F7   CA C2 04               JP   z,mul_   
06FA   0B                     DEC   bc   
06FB   C3 36 05               JP   var_   
06FE                N:           
06FE   03                     INC   bc   
06FF   0A                     LD   a,(bc)   
0700   FE 65                  CP   "e"   
0702   CA F5 04               JP   z,neg_   
0705   0B                     DEC   bc   
0706   C3 36 05               JP   var_   
0709                O:           
0709   03                     INC   bc   
070A   0A                     LD   a,(bc)   
070B   FE 76                  CP   "v"   
070D   CA C8 04               JP   z,over_   
0710   FE 72                  CP   "r"   
0712   CA 6C 04               JP   z,or_   
0715   0B                     DEC   bc   
0716   C3 36 05               JP   var_   
0719                P:           
0719   03                     INC   bc   
071A   0A                     LD   a,(bc)   
071B   FE 72                  CP   "r"   
071D   CA 6F 07               JP   z,print_   
0720   0B                     DEC   bc   
0721   C3 36 05               JP   var_   
0724                R:           
0724   03                     INC   bc   
0725   0A                     LD   a,(bc)   
0726   FE 6F                  CP   "o"   
0728   CA D0 04               JP   z,rot_   
072B   0B                     DEC   bc   
072C   C3 36 05               JP   var_   
072F                S:           
072F   03                     INC   bc   
0730   0A                     LD   a,(bc)   
0731   FE 63                  CP   "c"   
0733   CA 6F 07               JP   z,scan_   
0736   FE 65                  CP   "e"   
0738                             ; jp nz,s1
0738                             ; inc bc
0738                             ; ld a,(bc)
0738                             ; cp "l"
0738                             ; jp z,select
0738                             ; cp "t"
0738   CA 6F 07               JP   z,set_   
073B                             ; dec bc
073B                             ; s1:
073B   FE 68                  CP   "h"   
073D   CA 6F 07               JP   z,shift_   
0740   FE 75                  CP   "u"   
0742   CA FB 04               JP   z,sub_   
0745   FE 77                  CP   "w"   
0747   CA 5F 0A               JP   z,switch   
074A   0B                     DEC   bc   
074B   C3 36 05               JP   var_   
074E                U:           
074E   03                     INC   bc   
074F   0A                     LD   a,(bc)   
0750   FE 6E                  CP   "n"   
0752   CA 9F 04               JP   z,undrop_   
0755   0B                     DEC   bc   
0756   C3 36 05               JP   var_   
0759                W:           
0759   03                     INC   bc   
075A   0A                     LD   a,(bc)   
075B   FE 68                  CP   "h"   
075D   CA 6F 07               JP   z,while_   
0760   0B                     DEC   bc   
0761   C3 36 05               JP   var_   
0764                X:           
0764   03                     INC   bc   
0765   0A                     LD   a,(bc)   
0766   FE 78                  CP   "x"   
0768   CA 75 04               JP   z,xor_   
076B   0B                     DEC   bc   
076C   C3 36 05               JP   var_   
076F                CLOSURE_:      
076F                DEF_:        
076F                FILTER_:      
076F                GET_:        
076F                IF_:         
076F                LET_:        
076F                MAP_:        
076F                PRINT_:      
076F                SCAN_:       
076F                SET_:        
076F                SHIFT_:      
076F                WHILE_:      
076F   C3 A0 03               JP   next   
0772                             ;*******************************************************************
0772                             ; Page 5 primitive routines continued
0772                             ;*******************************************************************
0772                             ; ********************************************************************
0772                             ; 16-bit multiply
0772                MUL:         ;=19
0772   D1                     POP   de   ; get first value
0773   E1                     POP   hl   
0774   C5                     PUSH   bc   ; Preserve the IP
0775   44                     LD   b,h   ; bc = 2nd value
0776   4D                     LD   c,l   
0777   21 00 00               LD   hl,0   
077A   3E 10                  LD   a,16   
077C                MUL2:        
077C   29                     ADD   hl,hl   
077D   CB 13                  RL   e   
077F   CB 12                  RL   d   
0781   30 04                  JR   nc,$+6   
0783   09                     ADD   hl,bc   
0784   30 01                  JR   nc,$+3   
0786   13                     INC   de   
0787   3D                     DEC   a   
0788   20 F2                  JR   nz,mul2   
078A   C1                     POP   bc   ; Restore the IP
078B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
078C   C3 A0 03               JP   next   
078F                             ;*******************************************************************
078F                             ; Subroutines
078F                             ;*******************************************************************
078F                PROMPT:      
078F   CD 94 08               CALL   printStr   
0792   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0797   C9                     RET      
0798                PUTSTR0:      
0798   CD 85 00               CALL   putchar   
079B   23                     INC   hl   
079C                PUTSTR:      
079C   7E                     LD   a,(hl)   
079D   B7                     OR   a   
079E   20 F8                  JR   nz,putStr0   
07A0   C9                     RET      
07A1                RPUSH:       
07A1   DD 2B                  DEC   ix   
07A3   DD 74 00               LD   (ix+0),h   
07A6   DD 2B                  DEC   ix   
07A8   DD 75 00               LD   (ix+0),l   
07AB   C9                     RET      
07AC                RPOP:        
07AC   DD 6E 00               LD   l,(ix+0)   
07AF   DD 23                  INC   ix   
07B1   DD 66 00               LD   h,(ix+0)   
07B4   DD 23                  INC   ix   
07B6                RPOP2:       
07B6   C9                     RET      
07B7                CRLF:        
07B7   CD 94 08               CALL   printStr   
07BA   0D 0A 00               .CSTR   "\r\n"   
07BD   C9                     RET      
07BE                             ;*******************************************************************
07BE                             ;*******************************************************************
07BE                NUM:         
07BE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C1   0A                     LD   a,(bc)   ; Get numeral or -
07C2   FE 2D                  CP   "-"   
07C4   20 01                  JR   nz,num0   
07C6   03                     INC   bc   ; move to next char, no flags affected
07C7                NUM0:        
07C7   08                     EX   af,af'   ; save zero flag = 0 for later
07C8                NUM1:        
07C8   0A                     LD   a,(bc)   ; read digit
07C9   D6 30                  SUB   "0"   ; less than 0?
07CB   38 13                  JR   c,num2   ; not a digit, exit loop
07CD   FE 0A                  CP   10   ; greater that 9?
07CF   30 0F                  JR   nc,num2   ; not a digit, exit loop
07D1   03                     INC   bc   ; inc IP
07D2   54 5D                  LD   de,hl   ; multiply hl * 10
07D4   29                     ADD   hl,hl   
07D5   29                     ADD   hl,hl   
07D6   19                     ADD   hl,de   
07D7   29                     ADD   hl,hl   
07D8   85                     ADD   a,l   ; add digit in a to hl
07D9   6F                     LD   l,a   
07DA   3E 00                  LD   a,0   
07DC   8C                     ADC   a,h   
07DD   67                     LD   h,a   
07DE   18 E8                  JR   num1   
07E0                NUM2:        
07E0   0B                     DEC   bc   
07E1   08                     EX   af,af'   ; restore zero flag
07E2   20 07                  JR   nz,num3   
07E4   EB                     EX   de,hl   ; negate the value of hl
07E5   21 00 00               LD   hl,0   
07E8   B7                     OR   a   ; jump to sub2
07E9   ED 52                  SBC   hl,de   
07EB                NUM3:        
07EB   E5                     PUSH   hl   ; Put the number on the stack
07EC   C3 A0 03               JP   next   ; and process the next character
07EF                HEXNUM:      ; 
07EF   21 00 00               LD   hl,0   ; Clear hl to accept the number
07F2                HEXNUM1:      
07F2   03                     INC   bc   
07F3   0A                     LD   a,(bc)   ; Get the character which is a numeral
07F4   CB 77                  BIT   6,a   ; is it uppercase alpha?
07F6   28 02                  JR   z,hexnum2   ; no a decimal
07F8   D6 07                  SUB   7   ; sub 7  to make $a - $F
07FA                HEXNUM2:      
07FA   D6 30                  SUB   $30   ; Form decimal digit
07FC   DA E0 07               JP   c,num2   
07FF   FE 10                  CP   $0F+1   
0801   D2 E0 07               JP   nc,num2   
0804   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0805   29                     ADD   hl,hl   ; 4X
0806   29                     ADD   hl,hl   ; 8X
0807   29                     ADD   hl,hl   ; 16X
0808   85                     ADD   a,l   ; add into bottom of hl
0809   6F                     LD   l,a   ; 
080A   18 E6                  JR   hexnum1   
080C                PRTDEC:      ;=34 ; removes leading zeros
080C                             ; ld a,h
080C                             ; or l
080C                             ; ld a, "0"
080C                             ; jp z, putchar
080C   CB 7C                  BIT   7,h   
080E   28 0B                  JR   z,prtdec0   
0810   3E 2D                  LD   a,"-"   
0812   CD 85 00               CALL   putchar   
0815   AF                     XOR   a   
0816   95                     SUB   l   
0817   6F                     LD   l,a   
0818   9F                     SBC   a,a   
0819   94                     SUB   h   
081A   67                     LD   h,a   
081B                PRTDEC0:      
081B   C5                     PUSH   bc   
081C   0E 00                  LD   c,0   ; leading zeros flag = false
081E   11 F0 D8               LD   de,-10000   
0821   CD 3D 08               CALL   prtdec1   
0824   11 18 FC               LD   de,-1000   
0827   CD 3D 08               CALL   prtdec1   
082A   11 9C FF               LD   de,-100   
082D   CD 3D 08               CALL   prtdec1   
0830   1E F6                  LD   e,-10   
0832   CD 3D 08               CALL   prtdec1   
0835   0C                     INC   c   ; flag = true for at least digit
0836   1E FF                  LD   e,-1   
0838   CD 3D 08               CALL   prtdec1   
083B   C1                     POP   bc   
083C   C9                     RET      
083D                PRTDEC1:      
083D   06 2F                  LD   b,"0"-1   
083F                PRTDEC2:      
083F   04                     INC   b   
0840   19                     ADD   hl,de   
0841   38 FC                  JR   c,prtdec2   
0843   ED 52                  SBC   hl,de   
0845   3E 30                  LD   a,"0"   
0847   B8                     CP   b   
0848   20 05                  JR   nz,prtdec3   
084A   AF                     XOR   a   
084B   B1                     OR   c   
084C   C8                     RET   z   
084D   18 01                  JR   prtdec4   
084F                PRTDEC3:      
084F   0C                     INC   c   
0850                PRTDEC4:      
0850   78                     LD   a,b   
0851   C3 85 00               JP   putchar   
0854                             ; 
0854                PRTHEX:      
0854                             ; Display hl as a 16-bit number in hex.
0854   C5                     PUSH   bc   ; preserve the IP
0855   7C                     LD   a,h   
0856   CD 5F 08               CALL   prthex2   
0859   7D                     LD   a,l   
085A   CD 5F 08               CALL   prthex2   
085D   C1                     POP   bc   
085E   C9                     RET      
085F                PRTHEX2:      
085F   4F                     LD   c,a   
0860   1F                     RRA      
0861   1F                     RRA      
0862   1F                     RRA      
0863   1F                     RRA      
0864   CD 68 08               CALL   prthex3   
0867   79                     LD   a,c   
0868                PRTHEX3:      
0868   E6 0F                  AND   0x0F   
086A   C6 90                  ADD   a,0x90   
086C   27                     DAA      
086D   CE 40                  ADC   a,0x40   
086F   27                     DAA      
0870   C3 85 00               JP   putchar   
0873                INIT:        
0873   FD 21 00 1A            LD   iy,DSTACK   
0877   DD 21 80 19            LD   ix,RSTACK   
087B   21 80 01               LD   hl,ialtVars   
087E   11 80 1B               LD   de,altVars   
0881   01 10 00               LD   bc,8 * 2   
0884   ED B0                  LDIR      
0886   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
0889   54 5D                  LD   de,hl   
088B   13                     INC   de   
088C   36 00                  LD   (hl),0   
088E   01 68 00               LD   bc,DATASIZE   
0891   ED B0                  LDIR      
0893   C9                     RET      
0894                PRINTSTR:      
0894   E3                     EX   (sp),hl   ; swap			
0895   CD 9C 07               CALL   putStr   
0898   23                     INC   hl   ; inc past null
0899   E3                     EX   (sp),hl   ; put it back	
089A   C9                     RET      
089B                LOOKUPREF:      
089B   16 00                  LD   d,0   
089D                LOOKUPREF0:      
089D   FE 61                  CP   "a"   
089F   30 06                  JR   nc,lookupRef2   
08A1                LOOKUPREF1:      
08A1   D6 61                  SUB   "a"   
08A3   1E 00                  LD   e,0   
08A5   18 04                  JR   lookupRef3   
08A7                LOOKUPREF2:      
08A7   D6 61                  SUB   "a"   
08A9   1E 34                  LD   e,26*2   
08AB                LOOKUPREF3:      
08AB   87                     ADD   a,a   
08AC   83                     ADD   a,e   
08AD   21 C0 1B               LD   hl,DATA   
08B0   85                     ADD   a,l   
08B1   6F                     LD   l,a   
08B2   3E 00                  LD   a,0   
08B4   8C                     ADC   a,h   
08B5   67                     LD   h,a   
08B6   AF                     XOR   a   
08B7   B3                     OR   e   ; sets z flag if a-z
08B8   C9                     RET      
08B9                             ; **************************************************************************
08B9                             ; calculate nesting value
08B9                             ; a is char to be tested,
08B9                             ; e is the nesting value (initially 0)
08B9                             ; e is increased by ( and [
08B9                             ; e is decreased by ) and ]
08B9                             ; e has its bit 7 toggled by `
08B9                             ; limited to 127 levels
08B9                             ; **************************************************************************
08B9                NESTING:      
08B9   FE 22                  CP   $22   ; quote char
08BB   20 0A                  JR   nz,nesting1   
08BD   CB 7B                  BIT   7,e   
08BF   28 03                  JR   z,nesting1a   
08C1   CB BB                  RES   7,e   
08C3   C9                     RET      
08C4                NESTING1A:      
08C4   CB FB                  SET   7,e   
08C6   C9                     RET      
08C7                NESTING1:      
08C7   CB 7B                  BIT   7,e   
08C9   C0                     RET   nz   
08CA   FE 7B                  CP   "{"   
08CC   28 08                  JR   z,nesting2   
08CE   FE 5B                  CP   "["   
08D0   28 04                  JR   z,nesting2   
08D2   FE 28                  CP   "("   
08D4   20 02                  JR   nz,nesting3   
08D6                NESTING2:      
08D6   1C                     INC   e   
08D7   C9                     RET      
08D8                NESTING3:      
08D8   FE 7D                  CP   "}"   
08DA   28 07                  JR   z,nesting4   
08DC   FE 5D                  CP   "]"   
08DE   28 03                  JR   z,nesting4   
08E0   FE 29                  CP   ")"   
08E2   C0                     RET   nz   
08E3                NESTING4:      
08E3   1D                     DEC   e   
08E4   C9                     RET      
08E5                             ; 
08E5                STRDEF:      
08E5   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
08E9   D5                     PUSH   de   ; save start of string
08EA   03                     INC   bc   ; point to next char
08EB   18 03                  JR   strDef2   
08ED                STRDEF1:      
08ED   12                     LD   (de),a   
08EE   13                     INC   de   ; increase count
08EF   03                     INC   bc   ; point to next char
08F0                STRDEF2:      
08F0   0A                     LD   a,(bc)   
08F1   FE 27                  CP   "'"   ; ' is the string terminator
08F3   20 F8                  JR   nz,strDef1   
08F5   AF                     XOR   a   ; write null to terminate string
08F6   12                     LD   (de),a   
08F7   13                     INC   de   
08F8   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
08FC   C3 A0 03               JP   next   
08FF                CHAR:        
08FF   21 00 00               LD   hl,0   ; if `` is empty
0902                CHAR1:       
0902   03                     INC   bc   ; point to next char
0903   0A                     LD   a,(bc)   
0904   FE 60                  CP   "`"   ; ` is the string terminator
0906   28 09                  JR   z,char3   
0908   FE 5C                  CP   $5c   ; \ is the escape
090A   20 02                  JR   nz,char2   
090C   03                     INC   bc   
090D   0A                     LD   a,(bc)   
090E                CHAR2:       
090E   6F                     LD   l,a   
090F   18 F1                  JR   char1   
0911                CHAR3:       
0911   E5                     PUSH   hl   
0912                             ; dec bc
0912   C3 A0 03               JP   next   
0915                EXEC:        ; execute lambda at pointer
0915   E1                     POP   hl   ; hl = pointer to lambda
0916                EXEC1:       
0916   7C                     LD   a,h   ; skip if destination address is null
0917   B5                     OR   l   
0918   28 0E                  JR   z,exec3   
091A                EXEC2:       
091A   C5                     PUSH   bc   ; push IP
091B   FD E5                  PUSH   iy   ; push SCP (scope pointer)
091D   FD E5                  PUSH   iy   ; push BP
091F   FD 21 00 00            LD   iy,0   ; BP = SP
0923   FD 39                  ADD   iy,sp   
0925   44 4D                  LD   bc,hl   ; IP = pointer to lambda
0927   0B                     DEC   bc   ; dec to prepare for next routine
0928                EXEC3:       
0928   C3 A0 03               JP   next   
092B                LAMBDA:      
092B   03                     INC   bc   
092C   2A 8E 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
092F   E5                     PUSH   hl   
0930   16 01                  LD   d,1   ; nesting: count first parenthesis
0932                LAMBDA1:      ; Skip to end of definition
0932   0A                     LD   a,(bc)   ; Get the next character
0933   03                     INC   bc   ; Point to next character
0934   77                     LD   (hl),a   
0935   23                     INC   hl   
0936   FE 27                  CP   "'"   
0938   28 1C                  JR   z,lambda2   
093A   FE 28                  CP   "("   
093C   28 18                  JR   z,lambda2   
093E   FE 29                  CP   ")"   
0940   28 14                  JR   z,lambda2   
0942   FE 7B                  CP   "{"   
0944   28 10                  JR   z,lambda2   
0946   FE 7D                  CP   "}"   ; Is it the end of the definition?
0948   28 0C                  JR   z,lambda2   
094A   FE 5B                  CP   "["   
094C   28 08                  JR   z,lambda2   
094E   FE 5D                  CP   "]"   
0950   28 04                  JR   z,lambda2   
0952   FE 60                  CP   "`"   
0954   20 DC                  JR   nz,lambda1   
0956                LAMBDA2:      
0956   14                     INC   d   
0957   CB 42                  BIT   0,d   ; balanced?
0959   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
095B   FE 7D                  CP   "}"   ; Is it the end of the definition?
095D   20 D3                  JR   nz,lambda1   ; get the next element
095F   0B                     DEC   bc   
0960   22 8E 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0963   C3 A0 03               JP   next   
0966                LAMBDAEND:      
0966   E1                     POP   hl   ; hl = last result
0967   FD 54                  LD   d,iyh   ; de = BP
0969   FD 5D                  LD   e,iyl   
096B   EB                     EX   de,hl   ; hl = BP, de = result
096C   F9                     LD   sp,hl   ; sp = BP
096D   E1                     POP   hl   ; hl = old BP
096E   C1                     POP   bc   ; pop scope ptr (discard)
096F   C1                     POP   bc   ; bc = IP
0970   F9                     LD   sp,hl   ; sp = old BP
0971   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0975   FD 39                  ADD   iy,sp   
0977   D5                     PUSH   de   ; push result
0978   C3 A0 03               JP   next   
097B                BLOCK:       
097B   03                     INC   bc   
097C   C5                     PUSH   bc   ; return first opcode of block
097D   16 01                  LD   d,1   ; nesting: count first parenthesis
097F                BLOCK1:      ; Skip to end of definition
097F   0A                     LD   a,(bc)   ; Get the next character
0980   03                     INC   bc   ; Point to next character
0981   FE 27                  CP   "'"   
0983   28 1C                  JR   z,block2   
0985   FE 28                  CP   "("   
0987   28 18                  JR   z,block2   
0989   FE 29                  CP   ")"   
098B   28 14                  JR   z,block2   
098D   FE 7B                  CP   "{"   
098F   28 10                  JR   z,block2   
0991   FE 7D                  CP   "}"   
0993   28 0C                  JR   z,block2   
0995   FE 5B                  CP   "["   
0997   28 08                  JR   z,block2   
0999   FE 5D                  CP   "]"   
099B   28 04                  JR   z,block2   
099D   FE 60                  CP   "`"   
099F   20 DE                  JR   nz,block1   
09A1                BLOCK2:      
09A1   14                     INC   d   
09A2   CB 42                  BIT   0,d   ; balanced?
09A4   20 D9                  JR   nz,block1   ; not balanced, get the next element
09A6   FE 29                  CP   ")"   ; Is it the end of the block?
09A8   20 D5                  JR   nz,block1   ; get the next element
09AA   0B                     DEC   bc   
09AB   C3 A0 03               JP   next   
09AE                BLOCKEND:      
09AE   E1                     POP   hl   ; hl = last result
09AF   FD 54                  LD   d,iyh   ; de = BP
09B1   FD 5D                  LD   e,iyl   
09B3   EB                     EX   de,hl   ; hl = BP, de = result
09B4   F9                     LD   sp,hl   ; sp = BP
09B5   E1                     POP   hl   ; hl = old BP
09B6   C1                     POP   bc   ; pop SCP (discard)
09B7   C1                     POP   bc   ; bc = IP
09B8   F9                     LD   sp,hl   ; sp = old BP
09B9   FD 21 00 00            LD   iy,0   ; iy = sp
09BD   FD 39                  ADD   iy,sp   
09BF   D5                     PUSH   de   ; push result
09C0   C3 A0 03               JP   next   
09C3                ARG:         
09C3   03                     INC   bc   ; get next char
09C4   0A                     LD   a,(bc)   
09C5   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09C7   E6 07                  AND   $07   ; mask
09C9   87                     ADD   a,a   ; double
09CA   6F                     LD   l,a   ; hl = offset into args
09CB   26 00                  LD   h,0   
09CD   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
09D0   FD 56 03               LD   d,(iy+3)   
09D3   EB                     EX   de,hl   ; hl = SCP - offset
09D4   B7                     OR   a   
09D5   ED 52                  SBC   hl,de   
09D7   2B                     DEC   hl   ; de = arg
09D8   56                     LD   d,(hl)   
09D9   2B                     DEC   hl   
09DA   5E                     LD   e,(hl)   
09DB   D5                     PUSH   de   ; push arg
09DC   C3 A0 03               JP   next   
09DF                             ; 
09DF                EXIT:        
09DF   50 59                  LD   de,bc   ; address of code after exit opcode
09E1   13                     INC   de   
09E2   D9                     EXX      
09E3   C1                     POP   bc   ; bc = last result
09E4   FD 54                  LD   d,iyh   ; de = BP
09E6   FD 5D                  LD   e,iyl   
09E8   EB                     EX   de,hl   ; hl = BP, de = result
09E9   F9                     LD   sp,hl   ; sp = BP
09EA   D9                     EXX      
09EB   E1                     POP   hl   ; hl = old BP
09EC   C1                     POP   bc   ; pop SCP (discard)
09ED   C1                     POP   bc   ; bc = IP
09EE   F9                     LD   sp,hl   ; sp = old BP
09EF   D9                     EXX      
09F0   C5                     PUSH   bc   ; push result
09F1   D9                     EXX      
09F2   EB                     EX   de,hl   
09F3   E9                     JP   (hl)   
09F4                IN:          
09F4   E1                     POP   hl   ; hl = string
09F5   D1                     POP   de   ; de = char
09F6                IN1:         
09F6   7E                     LD   a,(hl)   
09F7   23                     INC   hl   
09F8   FE 00                  CP   0   ; is end of string
09FA   28 04                  JR   z,in2   
09FC   BB                     CP   e   
09FD   20 F7                  JR   nz,in1   
09FF   B7                     OR   a   ; a is never 0, or a resets zero flag
0A00                IN2:         
0A00   21 00 00               LD   hl,0   ; hl = result
0A03   28 01                  JR   z,in3   
0A05   2B                     DEC   hl   ; if nz de = $ffff
0A06                IN3:         
0A06   E5                     PUSH   hl   ; push result
0A07   C3 A0 03               JP   next   
0A0A                NEWADD2:      
0A0A   C5                     PUSH   bc   ; push IP
0A0B   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A0E   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A11   D5                     PUSH   de   ; push SCP
0A12   FD E5                  PUSH   iy   ; push base pointer
0A14   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
0A18   FD 39                  ADD   iy,sp   ; 
0A1A   FD 56 FF               LD   d,(iy-1)   
0A1D   FD 5E FE               LD   e,(iy-2)   
0A20   FD 66 FD               LD   h,(iy-3)   
0A23   FD 6E FC               LD   l,(iy-4)   
0A26   19                     ADD   hl,de   ; hl = hl + de
0A27   EB                     EX   de,hl   ; de = result
0A28   E1                     POP   hl   ; hl = old BP
0A29   C1                     POP   bc   ; pop SCP (discard)
0A2A   C1                     POP   bc   ; bc = IP
0A2B   F9                     LD   sp,hl   ; sp = old BP
0A2C   FD 21 00 00            LD   iy,0   
0A30   FD 39                  ADD   iy,sp   
0A32   D5                     PUSH   de   ; push result
0A33   C3 A0 03               JP   next   
0A36                IF:          
0A36   11 00 00               LD   de,0   ; null pointer for else
0A39   18 01                  JR   ife1   
0A3B                IFE:         
0A3B   D1                     POP   de   ; de = else
0A3C                IFE1:        
0A3C   E1                     POP   hl   ; hl = then
0A3D   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A3E   23                     INC   hl   ; check for true
0A3F   7C                     LD   a,h   
0A40   B5                     OR   l   
0A41   E1                     POP   hl   ; hl = then
0A42   28 01                  JR   z,ife2   
0A44   EB                     EX   de,hl   ; condition = false, hl = else
0A45                IFE2:        
0A45   7C                     LD   a,h   ; check if hl is null
0A46   B5                     OR   l   
0A47   28 12                  JR   z,ife3   
0A49   C5                     PUSH   bc   ; push IP
0A4A   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A4D   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A50   D5                     PUSH   de   ; push SCP
0A51   FD E5                  PUSH   iy   ; push BP
0A53   FD 21 00 00            LD   iy,0   ; iy = sp
0A57   FD 39                  ADD   iy,sp   
0A59   44 4D                  LD   bc,hl   ; IP = then
0A5B                IFE3:        
0A5B   0B                     DEC   bc   
0A5C   C3 A0 03               JP   next   
0A5F                SWITCH:      
0A5F   E1                     POP   hl   ; get condition from stack
0A60   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0A61   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A64   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A67   D5                     PUSH   de   ; push SCP
0A68   FD E5                  PUSH   iy   ; push BP
0A6A   FD 21 00 00            LD   iy,0   ; BP = SP
0A6E   FD 39                  ADD   iy,sp   
0A70   E5                     PUSH   hl   ; push condition as first arg of new frame
0A71   C3 A0 03               JP   next   
0A74                CASE:        
0A74   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0A77   FD 6E FE               LD   l,(iy-2)   
0A7A   23                     INC   hl   ; hl -= 1 index from second arg
0A7B   29                     ADD   hl,hl   ; hl *= 2 word offset
0A7C   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0A7E   FD 5D                  LD   e,iyl   
0A80   EB                     EX   de,hl   
0A81   B7                     OR   a   ; hl = BP - offset
0A82   ED 52                  SBC   hl,de   
0A84   54 5D                  LD   de,hl   ; save arg ptr
0A86   2B                     DEC   hl   ; hl += 2
0A87   2B                     DEC   hl   
0A88   B7                     OR   a   ; arg ptr - stack pointer
0A89   ED 72                  SBC   hl,sp   
0A8B   30 0D                  JR   nc,case0   
0A8D                             ; ld e,(iy+0)                 ; yes pop stack frame, de = BP
0A8D                             ; ld d,(iy+1)
0A8D   FD 54                  LD   d,iyh   ; yes pop stack frame, de = BP
0A8F   FD 5D                  LD   e,iyl   
0A91   EB                     EX   de,hl   ; hl = BP
0A92   F9                     LD   sp,hl   ; sp = BP
0A93   FD E1                  POP   iy   ; iy = old BP
0A95   D1                     POP   de   ; pop SCP (discard)
0A96   D1                     POP   de   ; bc = IP (discard)
0A97   C3 A0 03               JP   next   
0A9A                CASE0:       
0A9A   EB                     EX   de,hl   
0A9B   2B                     DEC   hl   ; de = arg
0A9C   56                     LD   d,(hl)   
0A9D   2B                     DEC   hl   
0A9E   5E                     LD   e,(hl)   
0A9F   7A                     LD   a,d   ; is arg == null ? then skip
0AA0   B3                     OR   e   
0AA1   20 00                  JR   nz,case1   
0AA3                CASE1:       
0AA3   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0AA6   FD 70 05               LD   (iy+5),b   
0AA9   42 4B                  LD   bc,de   ; IP = arg
0AAB   0B                     DEC   bc   
0AAC   C3 A0 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "5 1 sw (1) ca", 5
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 73 08               CALL   init   
4006   CD 15 09               CALL   exec   
4009   35 20 31 20 73 77 20 28 31 29 20 63 61 00 .CSTR   "5 1 sw (1) ca"   
4017                          ;*Macro unroll:  expect "5 1 sw (1) ca",5
4017   E1                     POP   HL   
4018   E5                     PUSH   HL   
4019   11 05 00               LD   DE,5   
401C   B7                     OR   A   
401D   ED 52                  SBC   HL,DE   
401F   7D                     LD   A,L   
4020   B4                     OR   H   
4021   28 58                  JR   Z,expectM_0_2180S43   
4023   CD 94 08               CALL   printStr   
4026   43 6F 64 65 3A 20 35 20 31 20 73 77 20 28 31 29 20 63 61 00 .CSTR   "Code: ","5 1 sw (1) ca"   
403A   CD 94 08               CALL   printStr   
403D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404C   21 05 00               LD   HL,5   
404F   CD 0C 08               CALL   prtdec   
4052   CD 94 08               CALL   printStr   
4055   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4062   E1                     POP   hl   
4063   E5                     PUSH   hl   
4064   CD 0C 08               CALL   prtdec   
4067   E1                     POP   hl   
4068   CD 94 08               CALL   printStr   
406B   20 28 23 00            .CSTR   " (#"   
406F   CD 54 08               CALL   prthex   
4072   CD 94 08               CALL   printStr   
4075   29 0D 0A 00            .CSTR   ")\r\n"   
4079   76                     HALT      
407A   00                     .CSTR      
407B                EXPECTM_0_2180S43:      
407B   E1                     POP   HL   
407C                          ;*Macro unroll:  test "0 sw (1) ca", 1
407C   31 00 1A               LD   SP,DSTACK   
407F   CD 73 08               CALL   init   
4082   CD 15 09               CALL   exec   
4085   30 20 73 77 20 28 31 29 20 63 61 00 .CSTR   "0 sw (1) ca"   
4091                          ;*Macro unroll:  expect "0 sw (1) ca",1
4091   E1                     POP   HL   
4092   E5                     PUSH   HL   
4093   11 01 00               LD   DE,1   
4096   B7                     OR   A   
4097   ED 52                  SBC   HL,DE   
4099   7D                     LD   A,L   
409A   B4                     OR   H   
409B   28 56                  JR   Z,expectM_0_2181S43   
409D   CD 94 08               CALL   printStr   
40A0   43 6F 64 65 3A 20 30 20 73 77 20 28 31 29 20 63 61 00 .CSTR   "Code: ","0 sw (1) ca"   
40B2   CD 94 08               CALL   printStr   
40B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C4   21 01 00               LD   HL,1   
40C7   CD 0C 08               CALL   prtdec   
40CA   CD 94 08               CALL   printStr   
40CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40DA   E1                     POP   hl   
40DB   E5                     PUSH   hl   
40DC   CD 0C 08               CALL   prtdec   
40DF   E1                     POP   hl   
40E0   CD 94 08               CALL   printStr   
40E3   20 28 23 00            .CSTR   " (#"   
40E7   CD 54 08               CALL   prthex   
40EA   CD 94 08               CALL   printStr   
40ED   29 0D 0A 00            .CSTR   ")\r\n"   
40F1   76                     HALT      
40F2   00                     .CSTR      
40F3                EXPECTM_0_2181S43:      
40F3   E1                     POP   HL   
40F4                          ;*Macro unroll:  test "1 sw (1) (2) (3) ca", 2
40F4   31 00 1A               LD   SP,DSTACK   
40F7   CD 73 08               CALL   init   
40FA   CD 15 09               CALL   exec   
40FD   31 20 73 77 20 28 31 29 20 28 32 29 20 28 33 29 20 63 61 00 .CSTR   "1 sw (1) (2) (3) ca"   
4111                          ;*Macro unroll:  expect "1 sw (1) (2) (3) ca",2
4111   E1                     POP   HL   
4112   E5                     PUSH   HL   
4113   11 02 00               LD   DE,2   
4116   B7                     OR   A   
4117   ED 52                  SBC   HL,DE   
4119   7D                     LD   A,L   
411A   B4                     OR   H   
411B   28 5E                  JR   Z,expectM_0_2182S43   
411D   CD 94 08               CALL   printStr   
4120   43 6F 64 65 3A 20 31 20 73 77 20 28 31 29 20 28 32 29 20 28 33 29 20 63 61 00 .CSTR   "Code: ","1 sw (1) (2) (3) ca"   
413A   CD 94 08               CALL   printStr   
413D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
414C   21 02 00               LD   HL,2   
414F   CD 0C 08               CALL   prtdec   
4152   CD 94 08               CALL   printStr   
4155   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4162   E1                     POP   hl   
4163   E5                     PUSH   hl   
4164   CD 0C 08               CALL   prtdec   
4167   E1                     POP   hl   
4168   CD 94 08               CALL   printStr   
416B   20 28 23 00            .CSTR   " (#"   
416F   CD 54 08               CALL   prthex   
4172   CD 94 08               CALL   printStr   
4175   29 0D 0A 00            .CSTR   ")\r\n"   
4179   76                     HALT      
417A   00                     .CSTR      
417B                EXPECTM_0_2182S43:      
417B   E1                     POP   HL   
417C                             ; test "1 2 +", 3
417C                             ; test "4 1 2 +", 3
417C                             ; test "5 0 (1) if", 5
417C                             ; test "5 -1 (1) if", 1
417C                             ; test "0 (1) (2) ife", 2
417C                             ; test "-1 (1) (2) ife", 1
417C                             ; test "0 (1) (2) sw", 1
417C                             ; test "1 (1) (2) sw", 2
417C                             ; test "1", 1
417C                             ; test "2", 2
417C                             ; test "``", 0
417C                             ; test "`a`", $61
417C                             ; test "`\\``", $60
417C                             ; test "`b` 'cba' in", -1
417C                             ; test "`x` 'cba' in", 0
417C                             ; test "1 2 +", 3
417C                             ; test "5 -1 (2) if", 2
417C                             ; test "5 0 (2) if", 5
417C                             ; test "5 0 (0 (2) if) if", 5
417C                             ; test "5 0 (-1 (2) if) if", 5
417C                             ; test "5 -1 (2) if", 2
417C                             ; test "5 -1 (-1 (2) if) if", 2
417C                             ; test "{1} go", 1
417C                             ; test "2 {$1} go", 2
417C                             ; test "2 4 {$2} go", 4
417C                             ; test "{{1} go} go", 1
417C                             ; test "5 {-1 ($1) if} go", 5
417C                             ; test "'A' @", 65
417C                             ; test "1", 1
417C                             ; test "0", 0
417C                             ; test "10", 10
417C                             ; test "123", 123
417C                             ; test "$10", $10
417C                             ; test "$FF", $FF
417C                             ; test "2 3 =", 0
417C                             ; test "3 3 =", 1
417C                             ; test "2 3 <", 1
417C                             ; test "3 3 <", 0
417C                             ; test "3 3 >", 0
417C                             ; test "4 3 >", 1
417C                             ; test "1 2 +", 3
417C                             ; test "123 456 +", 123+456
417C                             ; test "64 128 +", 64+128
417C                             ; test "5 3 -", 2
417C                             ; test "3 5 &", 1
417C                             ; test "3 5 |", 7
417C                             ; test "2 3 *", 6
417C                             ; test "1 2 3 + *", 5
417C                             ; ; test "1 2 3 ' +", 3
417C                             ; ; test "1_ 2 +",1
417C                             ; ; test "1_ 1 +",0
417C                             ; ; call enter
417C                             ; ;     .cstr "1 3",$22,"+"
417C                             ; ; expect "1 3 DUP +", 6
417C                             ; ; test "5 2/'", 2
417C                             ; ; test "3 5$ -", 2
417C                             ; ; test "5 2/$ '", 1
417C                             ; ; test "2 3%++", 7
417C                             ; ; test "1 2 3~''", 2
417C                             ; ; test "1 2 3~+*", 8
417C                             ; ; test "2a!a@",2
417C                             ; ; test "3x! 1 x@+x! x@", 4
417C                             ; ; test "3x! 1_ x@+x! x@", 2
417C                             ; ; test "1{", 2
417C                             ; ; test "1}", 0
417C                             ; ; test "2}", 1
417C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
417C                             ; ; test "(2) \\^", 2
417C                             ; ; test ":X1; X", 1
417C                             ; ; test ":A100;A", 100
417C                             ; ; test ":Aa!; 3A a@", 3
417C                             ; ; test ":Aa!;:Ba@;4AB", 4
417C                             ; ; test "[]$ '", 0
417C                             ; ; test "[3]$ '", 1
417C                             ; ; test "[3]'@", 3
417C                             ; ; test "[1 2 3]'@", 1
417C                             ; ; test "[1 2 3]'2+@", 2
417C                             ; ; test "\\h@[1]''\\h@$-", 2
417C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
417C                             ; ; test "\\[]$ '", 0
417C                             ; ; test "\\[3]'\\@", 3
417C                             ; ; test "\\[3]$ '", 1
417C                             ; ; test "\\[1 2 3]'\\@", 1
417C                             ; ; test "\\[1 2 3]'1+\\@", 2
417C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
417C                             ; ; test "\\h@\\[1]''\\h@$-", 1
417C                             ; ; test "\\`A`\\@",65
417C                             ; ; test "0 0(1+)", 0
417C                             ; ; test "0 1(1+)", 1
417C                             ; ; test "0 2(1+)", 2
417C                             ; ; test "0 1(0(1+))", 0
417C                             ; ; test "0 1(1(1+))", 1
417C                             ; ; test "0 2(1(1+))", 2
417C                             ; ; test "0 2(2(1+))", 4
417C                             ; ; test "0 1(\\i@+)", 0
417C                             ; ; test "0 2(\\i@+)", 1
417C                             ; ; test "0 3(\\i@+)", 3
417C                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
417C                             ; ; test "0t! 10(1 t@+t!) t@",10
417C                             ; ; test "0(100)(200)",200
417C                             ; ; test "1(100)(200)",100
417C                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
417C                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
417C                             ; ; test ":X10;\\0X", 10
417C                             ; ; test "2 \\1x! \\1x@", 2
417C   CD 94 08               CALL   printStr   
417F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4185   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 351 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
NESTINGSTR:         0300 DEFINED AT LINE 308 IN Siena.asm
ETX:                030A DEFINED AT LINE 311 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
ETX1:               0313 DEFINED AT LINE 316 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
START:              0315 DEFINED AT LINE 319 IN Siena.asm
INTERPRET:          032B DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
INTERPRET2:         0335 DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
INTERPRET3:         033D DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
INTERPRET4:         0343 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
WAITCHAR:           0348 DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
MACRO:              0357 DEFINED AT LINE 359 IN Siena.asm
MACRO1:             036E DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
WAITCHAR1:          0374 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
WAITCHAR3:          0382 DEFINED AT LINE 385 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
WAITCHAR4:          0398 DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
NEXT:               03A0 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 857 IN Siena.asm
                    > USED AT LINE 863 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 441 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 443 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 445 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 447 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 449 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 451 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 453 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 455 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 457 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
BLOCK_:             0421 DEFINED AT LINE 464 IN Siena.asm
BLOCKEND_:          0424 DEFINED AT LINE 466 IN Siena.asm
CHAR_:              0427 DEFINED AT LINE 468 IN Siena.asm
A_:                 042A DEFINED AT LINE 472 IN Siena.asm
C_:                 042D DEFINED AT LINE 474 IN Siena.asm
D_:                 0430 DEFINED AT LINE 476 IN Siena.asm
E_:                 0433 DEFINED AT LINE 478 IN Siena.asm
F_:                 0436 DEFINED AT LINE 480 IN Siena.asm
G_:                 0439 DEFINED AT LINE 482 IN Siena.asm
I_:                 043C DEFINED AT LINE 484 IN Siena.asm
K_:                 043F DEFINED AT LINE 486 IN Siena.asm
L_:                 0442 DEFINED AT LINE 488 IN Siena.asm
M_:                 0445 DEFINED AT LINE 490 IN Siena.asm
N_:                 0448 DEFINED AT LINE 492 IN Siena.asm
O_:                 044B DEFINED AT LINE 494 IN Siena.asm
P_:                 044E DEFINED AT LINE 496 IN Siena.asm
R_:                 0451 DEFINED AT LINE 498 IN Siena.asm
S_:                 0454 DEFINED AT LINE 500 IN Siena.asm
U_:                 0457 DEFINED AT LINE 502 IN Siena.asm
W_:                 045A DEFINED AT LINE 504 IN Siena.asm
X_:                 045D DEFINED AT LINE 506 IN Siena.asm
AND_:               0460 DEFINED AT LINE 509 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
AND1:               0467 DEFINED AT LINE 517 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
OR_:                046C DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
XOR_:               0475 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
XOR1:               0476 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
INV_:               047E DEFINED AT LINE 544 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
ADD_:               0483 DEFINED AT LINE 548 IN Siena.asm
                    > USED AT LINE 878 IN Siena.asm
KALL_:              048A DEFINED AT LINE 555 IN Siena.asm
HDOT_:              0494 DEFINED AT LINE 563 IN Siena.asm
DROP_:              049B DEFINED AT LINE 568 IN Siena.asm
UNDROP_:            049F DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
DUP_:               04A4 DEFINED AT LINE 577 IN Siena.asm
ETX_:               04AA DEFINED AT LINE 582 IN Siena.asm
EXIT_:              04AD DEFINED AT LINE 585 IN Siena.asm
FETCH_:             04B0 DEFINED AT LINE 588 IN Siena.asm
FETCH1:             04B1 DEFINED AT LINE 590 IN Siena.asm
KEY_:               04B8 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 954 IN Siena.asm
MUL_:               04C2 DEFINED AT LINE 605 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
NOP_:               04C5 DEFINED AT LINE 607 IN Siena.asm
OVER_:              04C8 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
ROT_:               04D0 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
SHL_:               04D8 DEFINED AT LINE 628 IN Siena.asm
SHR_:               04DE DEFINED AT LINE 635 IN Siena.asm
SHR1:               04DF DEFINED AT LINE 637 IN Siena.asm
STORE_:             04E7 DEFINED AT LINE 643 IN Siena.asm
SWAP_:              04EF DEFINED AT LINE 651 IN Siena.asm
NEG_:               04F5 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
SUB_:               04FB DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
SUB2:               04FD DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
EQ_:                0504 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
FALSE_:             050B DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
GT_:                0512 DEFINED AT LINE 682 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
LT_:                0516 DEFINED AT LINE 687 IN Siena.asm
                    > USED AT LINE 964 IN Siena.asm
LT1:                0518 DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
TRUE_:              0520 DEFINED AT LINE 695 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
GTE_:               0527 DEFINED AT LINE 700 IN Siena.asm
LTE_:               052B DEFINED AT LINE 704 IN Siena.asm
LTE1:               052D DEFINED AT LINE 707 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
VAR_:               0536 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 966 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
DIV_:               053E DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
DIV:                0544 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
DIV1:               054E DEFINED AT LINE 756 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
DIV2:               055B DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
DIV3:               055C DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
DIV4:               0561 DEFINED AT LINE 772 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 785 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 787 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 790 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 805 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 811 IN Siena.asm
PROMPT_:            0623 DEFINED AT LINE 825 IN Siena.asm
INPORT_:            0629 DEFINED AT LINE 830 IN Siena.asm
NEWLN_:             0635 DEFINED AT LINE 840 IN Siena.asm
OUTPORT_:           063B DEFINED AT LINE 844 IN Siena.asm
PRTSTR_:            0645 DEFINED AT LINE 853 IN Siena.asm
PRTSTR:             0645 DEFINED AT LINE 854 IN Siena.asm
RPUSH_:             064C DEFINED AT LINE 860 IN Siena.asm
RPOP_:              0653 DEFINED AT LINE 865 IN Siena.asm
A:                  065A DEFINED AT LINE 874 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
                    > USED AT LINE 6
                    > USED AT LINE 8
                    > USED AT LINE 6
                    > USED AT LINE 8
C:                  066A DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
D:                  0675 DEFINED AT LINE 892 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
E:                  0685 DEFINED AT LINE 902 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
F:                  0695 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
G:                  06A0 DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
I:                  06B0 DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
I1:                 06CC DEFINED AT LINE 945 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
K:                  06D0 DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
L:                  06DE DEFINED AT LINE 958 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 527 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 8
                    > USED AT LINE 8
                    > USED AT LINE 8
M:                  06EE DEFINED AT LINE 968 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
N:                  06FE DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
O:                  0709 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
P:                  0719 DEFINED AT LINE 996 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
R:                  0724 DEFINED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
S:                  072F DEFINED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
U:                  074E DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
W:                  0759 DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
X:                  0764 DEFINED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
CLOSURE_:           076F DEFINED AT LINE 1059 IN Siena.asm
DEF_:               076F DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
FILTER_:            076F DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
GET_:               076F DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
IF_:                076F DEFINED AT LINE 1063 IN Siena.asm
LET_:               076F DEFINED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
MAP_:               076F DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
PRINT_:             076F DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
SCAN_:              076F DEFINED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
SET_:               076F DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
SHIFT_:             076F DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
WHILE_:             076F DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
MUL:                0772 DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
MUL2:               077C DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
PROMPT:             078F DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
PUTSTR0:            0798 DEFINED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
PUTSTR:             079C DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
RPUSH:              07A1 DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 862 IN Siena.asm
RPOP:               07AC DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
RPOP2:              07B6 DEFINED AT LINE 1134 IN Siena.asm
CRLF:               07B7 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
NUM:                07BE DEFINED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
NUM0:               07C7 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
NUM1:               07C8 DEFINED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
NUM2:               07E0 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
NUM3:               07EB DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
HEXNUM:             07EF DEFINED AT LINE 1184 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
HEXNUM1:            07F2 DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
HEXNUM2:            07FA DEFINED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
PRTDEC:             080C DEFINED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            081B DEFINED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
PRTDEC1:            083D DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
PRTDEC2:            083F DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
PRTDEC3:            084F DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
PRTDEC4:            0850 DEFINED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1249 IN Siena.asm
PRTHEX:             0854 DEFINED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            085F DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
PRTHEX3:            0868 DEFINED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
INIT:               0873 DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
PRINTSTR:           0894 DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 138
LOOKUPREF:          089B DEFINED AT LINE 1304 IN Siena.asm
LOOKUPREF0:         089D DEFINED AT LINE 1306 IN Siena.asm
LOOKUPREF1:         08A1 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
LOOKUPREF2:         08A7 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 1308 IN Siena.asm
LOOKUPREF3:         08AB DEFINED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
NESTING:            08B9 DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
NESTING1A:          08C4 DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
NESTING1:           08C7 DEFINED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
NESTING2:           08D6 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
NESTING3:           08D8 DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
NESTING4:           08E3 DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
STRDEF:             08E5 DEFINED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
STRDEF1:            08ED DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
STRDEF2:            08F0 DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
CHAR:               08FF DEFINED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
CHAR1:              0902 DEFINED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
CHAR2:              090E DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
CHAR3:              0911 DEFINED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
EXEC:               0915 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC1:              0916 DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
EXEC2:              091A DEFINED AT LINE 1417 IN Siena.asm
EXEC3:              0928 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
LAMBDA:             092B DEFINED AT LINE 1429 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
LAMBDA1:            0932 DEFINED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
LAMBDA2:            0956 DEFINED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
LAMBDAEND:          0966 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
BLOCK:              097B DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
BLOCK1:             097F DEFINED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
BLOCK2:             09A1 DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
BLOCKEND:           09AE DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
ARG:                09C3 DEFINED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
EXIT:               09DF DEFINED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
IN:                 09F4 DEFINED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
IN1:                09F6 DEFINED AT LINE 1570 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
IN2:                0A00 DEFINED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
IN3:                0A06 DEFINED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
NEWADD2:            0A0A DEFINED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
IF:                 0A36 DEFINED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
IFE:                0A3B DEFINED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
IFE1:               0A3C DEFINED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
IFE2:               0A45 DEFINED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
IFE3:               0A5B DEFINED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
SWITCH:             0A5F DEFINED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
CASE:               0A74 DEFINED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
CASE0:              0A9A DEFINED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
CASE1:              0AA3 DEFINED AT LINE 1691 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1283 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 40 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 361 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1285 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2180S43:  407B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  40F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  417B DEFINED AT LINE 34
                    > USED AT LINE 10
