0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD B4 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; oldIP                             -- saved interpreter ptr
00CC                             ; static                            -- static array
00CC                             ; SCP                               -- scope base ptr           --> arg0
00CC                             ; oldBP                             -- saved base ptr           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arglist_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 6B 0B               JP   arg   
0309                PROP_:       
0309   C3 43 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARGLIST_:      
030F   C3 7F 04               JP   arglist   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 31 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 54 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD E9 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 67 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 AC 05               JP   array   
034B                ARRAYEND_:      
034B   C3 C2 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 A2 06               JP   ident   
0351                SYMBOL_:      
0351   C3 7A 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 31 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 FC 06               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 04 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 09 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD A6 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      ; 
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ;arglist - parses input (ab:c)
047F                ARGLIST:      
047F   11 00 00               LD   de,0   ; d = count ret args, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arglist
0488   03                     INC   bc   ; point to next char
0489                ARGLIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arglist terminator
048C   28 12                  JR   z,arglist4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arglist2   
0492   14                     INC   d   ; non zero value ret count acts as flag
0493   20 08                  JR   nz,arglist3   
0495                ARGLIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arglist3   
049C   14                     INC   d   ; if d > 0 increase ret arg count
049D                ARGLIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arglist1   
04A0                ARGLIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arglist
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 04               LD   c,(iy+4)   ; bc = IP
050D   FD 46 05               LD   b,(iy+5)   
0510   D9                     EXX      
0511   FD 54                  LD   d,iyh   ; hl = BP
0513   FD 5D                  LD   e,iyl   
0515   EB                     EX   de,hl   
0516   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
0519   FD 56 03               LD   d,(iy+3)   
051C   EB                     EX   de,hl   
051D   3E 04                  LD   a,4   ; a = 4
051F   2B                     DEC   hl   ; hl = ptr to numargs
0520   2B                     DEC   hl   
0521   86                     ADD   a,(hl)   ; a += numargs
0522   87                     ADD   a,a   ; a *= 2
0523   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
0525   B7                     OR   a   ; bc = BP - sp = count
0526   ED 72                  SBC   hl,sp   
0528   44 4D                  LD   bc,hl   
052A   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
052C   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
052D   6F                     LD   l,a   
052E   3E 00                  LD   a,0   
0530   8C                     ADC   a,h   
0531   67                     LD   h,a   
0532   EB                     EX   de,hl   
0533   1B                     DEC   de   ; de = firstArg-1
0534   2B                     DEC   hl   ; hl = BP-1
0535   ED B8                  LDDR      
0537   13                     INC   de   ; sp = new sp
0538   EB                     EX   de,hl   
0539   F9                     LD   sp,hl   
053A   D9                     EXX      
053B   D5                     PUSH   de   ; oldBP
053C   C5                     PUSH   bc   ; IP
053D   D9                     EXX      
053E   C1                     POP   bc   
053F   FD E1                  POP   iy   
0541   DD E9                  JP   (ix)   
0543                             ; @1..9
0543                             ; returns address of prop
0543                PROP:        
0543   03                     INC   bc   ; get next char
0544   0A                     LD   a,(bc)   
0545   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0547   E6 0F                  AND   $0F   ; mask
0549   87                     ADD   a,a   ; double
054A   6F                     LD   l,a   ; hl = offset into args
054B   26 00                  LD   h,0   
054D   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0550   FD 56 07               LD   d,(iy+7)   
0553   19                     ADD   hl,de   ; find address of prop in array
0554   22 9E 18               LD   (vPointer),hl   ; store address in setter
0557   5E                     LD   e,(hl)   
0558   23                     INC   hl   
0559   56                     LD   d,(hl)   
055A   D5                     PUSH   de   ; push prop value
055B   DD E9                  JP   (ix)   
055D                             ; addr -- value
055D                DOLET:       
055D   E1                     POP   hl   
055E   22 9E 18               LD   (vPointer),hl   ; store address in setter
0561                DOLET2:      
0561   5E                     LD   e,(hl)   
0562   23                     INC   hl   
0563   56                     LD   d,(hl)   
0564                DOLET3:      
0564   D5                     PUSH   de   
0565   DD E9                  JP   (ix)   
0567                INDEX:       
0567   E1                     POP   hl   ; hl = index
0568   D1                     POP   de   ; de = addr
0569   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
056C   3D                     DEC   a   
056D   28 01                  JR   z,index1   
056F   29                     ADD   hl,hl   ; if data width = 2 then double
0570                INDEX1:      
0570   19                     ADD   hl,de   ; add addr
0571   22 9E 18               LD   (vPointer),hl   ; store address in setter
0574   16 00                  LD   d,0   
0576   5E                     LD   e,(hl)   
0577   B7                     OR   a   ; check data width again
0578   28 02                  JR   z,index2   
057A   23                     INC   hl   
057B   56                     LD   d,(hl)   
057C                INDEX2:      
057C   D5                     PUSH   de   
057D   DD E9                  JP   (ix)   
057F                             ; newvalue --
057F                SET:         
057F   D1                     POP   de   ; new value
0580   E1                     POP   hl   ; discard last accessed value
0581   2A 9E 18               LD   hl,(vPointer)   
0584   73                     LD   (hl),e   
0585   3A 9A 18               LD   a,(vDataWidth)   
0588   3D                     DEC   a   
0589   28 02                  JR   z,set1   
058B   23                     INC   hl   
058C   72                     LD   (hl),d   
058D                SET1:        
058D   DD E9                  JP   (ix)   
058F                             ; ifte
058F                             ; condition then -- value
058F                IF:          
058F   DD E9                  JP   (ix)   
0591                             ; ld de,0                      ; NUL pointer for else
0591                             ; jr ifte1
0591                             ; ifte
0591                             ; condition then else -- value
0591                IFTE:        
0591   DD E9                  JP   (ix)   
0593                             ;     pop de                      ; de = else
0593                             ; ifte1:
0593                             ;     pop hl                      ; hl = then
0593                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
0593                             ;     inc hl                      ; check for true
0593                             ;     ld a,h
0593                             ;     or l
0593                             ;     pop hl                      ; hl = then
0593                             ;     jr z,ifte2
0593                             ;     ex de,hl                    ; condition = false, hl = else
0593                             ; ifte2:
0593                             ;     ld a,h                      ; check if hl is NUL
0593                             ;     or l
0593                             ;     jr z,ifte3
0593                             ;     push bc                     ; push IP
0593                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0593                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0593                             ;     push de                     ; push SCP
0593                             ;     push iy                     ; push BP
0593                             ;     ld iy,0                     ; iy = sp
0593                             ;     add iy,sp
0593                             ;     ld bc,hl                    ; IP = then
0593                             ;     dec bc
0593                             ; ifte3:
0593                             ;     jp (ix)
0593                             ; switch
0593                             ; index array -- value
0593                SWITCH:      
0593   D1                     POP   de   ; de = array
0594   E1                     POP   hl   ; hl = index
0595   29                     ADD   hl,hl   ; indec *= 2
0596   19                     ADD   hl,de   ; add array[0]
0597   4E                     LD   c,(hl)   ; bc = case
0598   23                     INC   hl   
0599   46                     LD   b,(hl)   
059A   0B                     DEC   bc   
059B   DD E9                  JP   (ix)   
059D                             ; c b --
059D                             ; loops until c = 0
059D                LOOP:        
059D   DD E9                  JP   (ix)   
059F                             ;     pop de                      ; de = block                    c
059F                             ;     pop hl                      ; hl = condition
059F                             ;     push de
059F                             ;     push bc                     ; push IP
059F                             ;     ld bc,de                    ; bc = block
059F                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
059F                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
059F                             ;     push de                     ; push SCP
059F                             ;     push iy                     ; push BP
059F                             ;     ld iy,0                     ; iy = sp
059F                             ;     add iy,sp
059F                             ; loop1:
059F                             ;     ld a,l                      ; bc = block, hl = condition = zero?
059F                             ;     or h
059F                             ;     jr z,loop3
059F                             ;     ld de,loop2-1               ; IP return address
059F                             ;     push de
059F                             ;     ld e,(iy+2)                 ; push parent SCP
059F                             ;     ld d,(iy+3)
059F                             ;     push de                     ;
059F                             ;     push iy                     ; push BP
059F                             ;     ld iy,0                     ; iy = sp
059F                             ;     add iy,sp
059F                             ;     push hl                     ; push condition
059F                             ;     dec bc
059F                             ;     jp (ix)
059F                             ; loop2:
059F                             ;     db ESC                      ; escape from interpreter
059F                             ;     ld c,(iy+6)                 ; bc = block
059F                             ;     ld b,(iy+7)
059F                             ;     pop hl                      ; hl = condition
059F                             ;     jr loop1
059F                             ; loop3:
059F                             ;     ld d,iyh                    ; de = BP
059F                             ;     ld e,iyl
059F                             ;     ex de,hl                    ; hl = BP, de = result
059F                             ;     ld sp,hl                    ; sp = BP
059F                             ;     pop hl                      ; hl = old BP
059F                             ;     pop bc                      ; pop SCP (discard)
059F                             ;     pop bc                      ; bc = IP
059F                             ;     ld sp,hl                    ; sp = old BP
059F                             ;     ld iy,0                     ; iy = sp
059F                             ;     add iy,sp
059F                             ;     ld ix,next                  ; needed?
059F                             ;     jp (ix)
059F                WORDS:       
059F   21 02 00               LD   hl,2   
05A2   18 03                  JR   bytes1   
05A4                BYTES:       
05A4   21 01 00               LD   hl,1   
05A7                BYTES1:      
05A7   22 9A 18               LD   (vDataWidth),hl   
05AA   DD E9                  JP   (ix)   
05AC                ARRAY:       
05AC   11 00 00               LD   de,0   ; create stack frame
05AF   D5                     PUSH   de   ; push null for IP
05B0   D5                     PUSH   de   ; push null for static array
05B1   FD 5E 02               LD   e,(iy+2)   ; get and save arglist from parent stack frame
05B4   FD 56 03               LD   d,(iy+3)   ; 
05B7   D5                     PUSH   de   ; 
05B8   FD E5                  PUSH   iy   ; push BP
05BA   FD 21 00 00            LD   iy,0   ; BP = SP
05BE   FD 39                  ADD   iy,sp   
05C0   DD E9                  JP   (ix)   
05C2                ARRAYEND:      
05C2   FD 54                  LD   d,iyh   ; de = BP
05C4   FD 5D                  LD   e,iyl   
05C6   C5                     PUSH   bc   ; save IP
05C7   D9                     EXX      
05C8   C1                     POP   bc   
05C9   D9                     EXX      
05CA   62 6B                  LD   hl,de   ; hl = de = BP
05CC   B7                     OR   a   
05CD   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05CF   CB 3C                  SRL   h   ; 
05D1   CB 1D                  RR   l   
05D3   44 4D                  LD   bc,hl   ; bc = count
05D5   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05D8   71                     LD   (hl),c   ; write num items in length word
05D9   23                     INC   hl   
05DA   70                     LD   (hl),b   
05DB   23                     INC   hl   ; hl = array[0], bc = count
05DC                             ; de = BP, hl = array[0], bc = count
05DC   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05DF   FE 01                  CP   1   
05E1   20 10                  JR   nz,arrayEnd2   
05E3                ARRAYEND1:      ; byte
05E3   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05E6   77                     LD   (hl),a   ; write a to array item
05E7   23                     INC   hl   ; move to next byte in array
05E8   FD 2B                  DEC   iy   ; move tho next word on stack
05EA   FD 2B                  DEC   iy   
05EC   0B                     DEC   bc   ; dec items count
05ED   79                     LD   a,c   ; if not zero loop
05EE   B0                     OR   b   
05EF   20 F2                  JR   nz,arrayEnd1   
05F1   18 13                  JR   arrayEnd3   
05F3                ARRAYEND2:      ; word
05F3   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F6   77                     LD   (hl),a   ; write lsb of array item
05F7   23                     INC   hl   ; move to msb of array item
05F8   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
05FB   77                     LD   (hl),a   ; write msb of array item
05FC   23                     INC   hl   ; move to next word in array
05FD   FD 2B                  DEC   iy   ; move to next word on stack
05FF   FD 2B                  DEC   iy   
0601   0B                     DEC   bc   ; dec items count
0602   79                     LD   a,c   ; if not zero loop
0603   B0                     OR   b   
0604   20 ED                  JR   nz,arrayEnd2   
0606                ARRAYEND3:      
0606   EB                     EX   de,hl   ; de = end of array, hl = BP
0607   F9                     LD   sp,hl   ; sp = BP
0608   E1                     POP   hl   ; de = end of array, hl = old BP
0609   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
060A   FD 62                  LD   iyh,d   
060C   FD 6B                  LD   iyl,e   
060E   D1                     POP   de   ; pop arglist (discard)
060F   D1                     POP   de   ; pop static array (discard)
0610   D1                     POP   de   ; pop IP (discard)
0611   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0615   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0618   D9                     EXX      ; restore IP
0619   C5                     PUSH   bc   
061A   D9                     EXX      
061B   C1                     POP   bc   
061C   13                     INC   de   ; de = array[0]
061D   13                     INC   de   
061E   D5                     PUSH   de   ; return array[0]
061F   DD E9                  JP   (ix)   
0621                             ; str -- num
0621                HASH:        
0621   E1                     POP   hl   
0622   C5                     PUSH   bc   
0623   44 4D                  LD   bc,hl   
0625   CD 43 07               CALL   hashStr   
0628   C1                     POP   bc   
0629   E5                     PUSH   hl   
062A   DD E9                  JP   (ix)   
062C                             ; symbol func --
062C                DEF:         
062C   DD 21 33 06            LD   ix,def1   
0630   C3 10 0B               JP   func   
0633                DEF1:        
0633   DD 21 7D 0A            LD   ix,next   
0637   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0638   60 69                  LD   hl,bc   
063A   18 1C                  JR   let1   
063C                             ; symbol value --
063C                LET:         
063C   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
063E   E3                     EX   (sp),hl   
063F   EB                     EX   de,hl   
0640   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0643   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0645   23                     INC   hl   
0646   36 5D                  LD   (hl),lsb(dolet)   
0648   23                     INC   hl   
0649   36 05                  LD   (hl),msb(dolet)   
064B   23                     INC   hl   
064C   73                     LD   (hl),e   
064D   23                     INC   hl   
064E   72                     LD   (hl),d   
064F   2B                     DEC   hl   
0650   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0654   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0657   E1                     POP   hl   ; de = addr, hl = IP
0658                LET1:        
0658   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0659   44 4D                  LD   bc,hl   ; bc = symbol
065B   CD 5C 07               CALL   defineEntry   
065E   38 00                  JR   c,let2   
0660                             ; call error
0660                             ; .cstr "Let Collision"
0660                LET2:        
0660   C1                     POP   bc   
0661   DD E9                  JP   (ix)   
0663                             ; symbol -- ptr
0663                ADDR:        
0663   E1                     POP   hl   ; hl = hash
0664   C5                     PUSH   bc   
0665   44 4D                  LD   bc,hl   
0667   CD 82 07               CALL   lookupEntry   
066A   38 03                  JR   c,addr1   
066C   21 00 00               LD   hl,0   
066F                             ; call printStr		
066F                             ; .cstr "Undefined"
066F                             ; jp interpret
066F                ADDR1:       
066F   C1                     POP   bc   
0670   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0673   19                     ADD   hl,de   
0674   22 9E 18               LD   (vPointer),hl   
0677   E5                     PUSH   hl   
0678   DD E9                  JP   (ix)   
067A                SYMBOL:      
067A   03                     INC   bc   
067B   11 00 1A               LD   de,PAD   
067E   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0680   18 02                  JR   symbol1   
0682                SYMBOL0:      ; copy to PAD area
0682   03                     INC   bc   ; characters that are part of the identifier
0683   13                     INC   de   
0684                SYMBOL1:      ; 0-9 A-Z a-z _
0684   0A                     LD   a,(bc)   
0685   12                     LD   (de),a   
0686   FE 21                  CP   " "+1   
0688   38 0A                  JR   c,symbol2   
068A   6F                     LD   l,a   
068B   7E                     LD   a,(hl)   
068C   FE 4E                  CP   lsb(ident_)   
068E   28 F2                  JR   z,symbol0   
0690   FE 00                  CP   lsb(num_)   
0692   28 EE                  JR   z,symbol0   
0694                SYMBOL2:      
0694   0B                     DEC   bc   
0695   AF                     XOR   a   
0696   12                     LD   (de),a   ; terminate string with NUL
0697   C5                     PUSH   bc   
0698   01 00 1A               LD   bc,PAD   
069B   CD 43 07               CALL   hashStr   ; hl = hash
069E   C1                     POP   bc   
069F   E5                     PUSH   hl   
06A0   DD E9                  JP   (ix)   
06A2                IDENT:       
06A2   11 00 1A               LD   de,PAD   
06A5   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06A7   18 02                  JR   ident1   
06A9                IDENT0:      ; copy to PAD area
06A9   03                     INC   bc   ; characters that are part of the identifier
06AA   13                     INC   de   
06AB                IDENT1:      ; 0-9 A-Z a-z _
06AB   0A                     LD   a,(bc)   
06AC   12                     LD   (de),a   
06AD                             ; or a
06AD                             ; jr z,ident2
06AD   FE 21                  CP   " "+1   
06AF   38 0A                  JR   c,ident2   
06B1   6F                     LD   l,a   
06B2   7E                     LD   a,(hl)   
06B3   FE 4E                  CP   lsb(ident_)   
06B5   28 F2                  JR   z,ident0   
06B7   FE 00                  CP   lsb(num_)   
06B9   28 EE                  JR   z,ident0   
06BB                IDENT2:      
06BB   0B                     DEC   bc   
06BC   AF                     XOR   a   
06BD   12                     LD   (de),a   ; terminate string with NUL
06BE   C5                     PUSH   bc   
06BF   01 00 1A               LD   bc,PAD   
06C2   CD 43 07               CALL   hashStr   ; hl = hash
06C5   44 4D                  LD   bc,hl   
06C7   CD 82 07               CALL   lookupEntry   
06CA   C1                     POP   bc   
06CB   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06CD   DD E9                  JP   (ix)   
06CF                IDENT3:      
06CF   E9                     JP   (hl)   
06D0                FRAC:        
06D0   2A 98 18               LD   hl,(vFrac)   
06D3   E5                     PUSH   hl   
06D4   DD E9                  JP   (ix)   
06D6                SQRT1:       
06D6   E1                     POP   hl   
06D7   C5                     PUSH   bc   
06D8   CD BF 07               CALL   squareRoot   
06DB   ED 43 98 18            LD   (vFrac),bc   
06DF   C1                     POP   bc   
06E0   D5                     PUSH   de   
06E1   DD E9                  JP   (ix)   
06E3                ABS1:        
06E3   E1                     POP   hl   
06E4   CB 7C                  BIT   7,h   
06E6   C8                     RET   z   
06E7   AF                     XOR   a   
06E8   95                     SUB   l   
06E9   6F                     LD   l,a   
06EA   9F                     SBC   a,a   
06EB   94                     SUB   h   
06EC   67                     LD   h,a   
06ED   E5                     PUSH   hl   
06EE   DD E9                  JP   (ix)   
06F0                MOD:         
06F0   D1                     POP   de   ; get first value
06F1   E1                     POP   hl   ; get 2nd value
06F2   C5                     PUSH   bc   ; preserve the IP
06F3   44 4D                  LD   bc,hl   
06F5   CD A6 07               CALL   divide   
06F8   C1                     POP   bc   
06F9   E5                     PUSH   hl   ; push remainder
06FA   DD E9                  JP   (ix)   
06FC                             ; hl = value1, de = value2
06FC                             ; hl = result
06FC                EQUALS:      
06FC   B7                     OR   a   ; reset the carry flag
06FD   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06FF   28 10                  JR   z,true1   
0701   C3 17 07               JP   false1   
0704                             ; hl = value1 de = value2
0704                             ; hl = result
0704                LESSTHANEQ:      
0704   B7                     OR   a   
0705   ED 52                  SBC   hl,de   
0707   18 05                  JR   lessthan1   
0709                             ; hl = value1 de = value2
0709                             ; hl = result
0709                LESSTHAN:      
0709   B7                     OR   a   
070A   ED 52                  SBC   hl,de   
070C   28 09                  JR   z,false1   
070E                LESSTHAN1:      
070E   FA 17 07               JP   m,false1   
0711                TRUE1:       
0711   21 FF FF               LD   hl,TRUE   
0714   E5                     PUSH   hl   
0715   DD E9                  JP   (ix)   
0717                FALSE1:      
0717   21 00 00               LD   hl,FALSE   
071A   E5                     PUSH   hl   
071B   DD E9                  JP   (ix)   
071D                             ; Z80 port input
071D                             ; port -- value
071D                INPUT:       
071D   E1                     POP   hl   
071E   59                     LD   e,c   ; save IP
071F   4D                     LD   c,l   
0720   ED 68                  IN   l,(c)   
0722   26 00                  LD   h,0   
0724   4B                     LD   c,e   ; restore IP
0725   E5                     PUSH   hl   
0726   DD E9                  JP   (ix)   
0728                             ; Z80 port output
0728                             ; value port --
0728                OUTPUT:      
0728   E1                     POP   hl   
0729   59                     LD   e,c   ; save IP
072A   4D                     LD   c,l   
072B   E1                     POP   hl   
072C   ED 69                  OUT   (c),l   
072E   4B                     LD   c,e   ; restore IP
072F   DD E9                  JP   (ix)   
0731                KEY:         
0731   CD 81 00               CALL   getchar   
0734   26 00                  LD   h,0   
0736   6F                     LD   l,a   
0737   E5                     PUSH   hl   
0738   DD E9                  JP   (ix)   
073A                NEG:         
073A   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
073D   D1                     POP   de   
073E   C3 94 03               JP   sub2   ; use the SUBtract routine
0741                FILTER:      
0741                MAP:         
0741                SCAN:        
0741   DD E9                  JP   (ix)   
0743                             ; -------------------------------------------------------------------------------
0743                             ; hash C-string
0743                             ; BC = str
0743                             ; HL = hash
0743                HASHSTR:      
0743   21 00 00               LD   hl,0   
0746                HASHSTR1:      
0746   0A                     LD   a,(bc)   ; load next char
0747   03                     INC   bc   
0748   FE 00                  CP   0   ; NUL?
074A   C8                     RET   z   
074B                HASHSTR2:      
074B   16 00                  LD   d,0   
074D   5F                     LD   e,a   
074E   19                     ADD   hl,de   
074F   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0751   29                     ADD   hl,hl   ; shift left
0752   19                     ADD   hl,de   ; add
0753   29                     ADD   hl,hl   ; shift left
0754   29                     ADD   hl,hl   ; shift left
0755   29                     ADD   hl,hl   ; shift left
0756   29                     ADD   hl,hl   ; shift left
0757   29                     ADD   hl,hl   ; shift left
0758   29                     ADD   hl,hl   ; shift left
0759   19                     ADD   hl,de   ; add
075A   18 EA                  JR   hashStr1   
075C                             ; add entry to hash slots and hash pointers
075C                             ; bc = hash (b = hi, c = lo), de = addr
075C                             ; sets carry if successful
075C                DEFINEENTRY:      
075C   CB 21                  SLA   c   ; lo = lo * 2
075E   69                     LD   l,c   ; lo1 = lo
075F   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0761                DEFINEENTRY0:      
0761   7E                     LD   a,(hl)   ; a = (lo1)
0762   FE FF                  CP   UNUSED   ; is it unused?
0764   28 12                  JR   z,defineEntry3   ; yes, add entry
0766   79                     LD   a,c   ; a = lo
0767   BE                     CP   (hl)   ; compare (lo1) with lo
0768   20 06                  JR   nz,defineEntry1   ; no match loop around
076A   2C                     INC   l   
076B   78                     LD   a,b   ; a = hi
076C   BE                     CP   (hl)   ; compare (lo1+1) with hi
076D   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
076F   2D                     DEC   l   ; restore l
0770                DEFINEENTRY1:      
0770   2C                     INC   l   ; try next entry
0771   2C                     INC   l   
0772   79                     LD   a,c   ; compare lo and lo1
0773   BD                     CP   l   ; if equal then there's no space left, reject
0774   20 EB                  JR   nz,defineEntry0   
0776                DEFINEENTRY2:      
0776   B7                     OR   a   ; clear carry flag, failure
0777   C9                     RET      
0778                DEFINEENTRY3:      ; new entry
0778   71                     LD   (hl),c   ; (lo1) = hash lo
0779   23                     INC   hl   
077A   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
077B   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
077D   72                     LD   (hl),d   
077E   2B                     DEC   hl   
077F   73                     LD   (hl),e   ; (slot + 2) = address
0780   37                     SCF      ; set carry flag, success
0781   C9                     RET      
0782                             ; looks up hash and returns address
0782                             ; bc = hash
0782                             ; returns addr in hl, sets carry if successful
0782                LOOKUPENTRY:      
0782   CB 21                  SLA   c   ; lo = lo * 2
0784   69                     LD   l,c   ; lo1 = lo
0785   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0787                LOOKUPENTRY0:      
0787   7E                     LD   a,(hl)   ; a = (hl), slot
0788   FE FF                  CP   UNUSED   ; is it unused?
078A   28 EA                  JR   z,defineEntry2   ; yes, does not exist
078C   79                     LD   a,c   ; a = lo
078D   BE                     CP   (hl)   ; compare (lo1) with lo
078E   20 06                  JR   nz,lookupEntry1   ; no match loop around
0790   2C                     INC   l   
0791   78                     LD   a,b   ; a = hi
0792   BE                     CP   (hl)   ; compare (lo1+1) with hi
0793   28 09                  JR   z,lookupEntry3   
0795   2D                     DEC   l   
0796                LOOKUPENTRY1:      
0796   2C                     INC   l   
0797   2C                     INC   l   
0798   79                     LD   a,c   
0799   BD                     CP   l   ; no space left, reject
079A   20 EB                  JR   nz,lookupEntry0   
079C                LOOKUPENTRY2:      
079C   B7                     OR   a   ; clear carry flag, failure
079D   C9                     RET      
079E                LOOKUPENTRY3:      
079E   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07A0   56                     LD   d,(hl)   
07A1   2D                     DEC   l   ; restore l
07A2   5E                     LD   e,(hl)   ; (slot + 2) = address
07A3   EB                     EX   de,hl   
07A4   37                     SCF      
07A5   C9                     RET      
07A6                             ; division subroutine.
07A6                             ; bc: divisor, de: dividend, hl: remainder
07A6                DIVIDE:      
07A6   21 00 00               LD   hl,0   ; zero the remainder
07A9   3E 10                  LD   a,16   ; loop counter
07AB                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07AB   CB 21                  SLA   c   
07AD   CB 10                  RL   b   
07AF   ED 6A                  ADC   hl,hl   
07B1   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07B3   38 03                  JR   c,divide2   
07B5   0C                     INC   c   
07B6   18 01                  JR   divide3   
07B8                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07B8   19                     ADD   hl,de   
07B9                DIVIDE3:      
07B9   3D                     DEC   a   
07BA   20 EF                  JR   nz,divide1   
07BC   50 59                  LD   de,bc   ; result from bc to de
07BE   C9                     RET      
07BF                             ; squareroot
07BF                             ; Input: HL = value
07BF                             ; Result: DE = square root BC = remainder
07BF                SQUAREROOT:      
07BF   01 00 08               LD   bc,0800h   
07C2   59                     LD   e,c   
07C3   AF                     XOR   a   
07C4                SQUAREROOT1:      
07C4   29                     ADD   hl,hl   
07C5   CB 11                  RL   c   
07C7   ED 6A                  ADC   hl,hl   
07C9   CB 11                  RL   c   
07CB   30 02                  JR   nc,$+4   
07CD   CB C5                  SET   0,l   
07CF   7B                     LD   a,e   
07D0   87                     ADD   a,a   
07D1   5F                     LD   e,a   
07D2   87                     ADD   a,a   
07D3   CB 45                  BIT   0,l   
07D5   20 03                  JR   nz,$+5   
07D7   91                     SUB   c   
07D8   30 05                  JR   nc,squareRoot4   
07DA   79                     LD   a,c   
07DB   93                     SUB   e   
07DC   1C                     INC   e   
07DD   93                     SUB   e   
07DE   4F                     LD   c,a   
07DF                SQUAREROOT4:      
07DF   10 E3                  DJNZ   squareRoot1   
07E1   CB 45                  BIT   0,l   
07E3   28 01                  JR   z,squareRoot5   
07E5   04                     INC   b   
07E6                SQUAREROOT5:      
07E6   16 00                  LD   d,0   
07E8   C9                     RET      
07E9                PRTDEC:      
07E9   CB 7C                  BIT   7,h   
07EB   28 0B                  JR   z,prtdec0   
07ED   3E 2D                  LD   a,"-"   
07EF   CD 85 00               CALL   putchar   
07F2   AF                     XOR   a   
07F3   95                     SUB   l   
07F4   6F                     LD   l,a   
07F5   9F                     SBC   a,a   
07F6   94                     SUB   h   
07F7   67                     LD   h,a   
07F8                PRTDEC0:      
07F8   C5                     PUSH   bc   
07F9   0E 00                  LD   c,0   ; leading zeros flag = false
07FB   11 F0 D8               LD   de,-10000   
07FE   CD 1A 08               CALL   prtdec1   
0801   11 18 FC               LD   de,-1000   
0804   CD 1A 08               CALL   prtdec1   
0807   11 9C FF               LD   de,-100   
080A   CD 1A 08               CALL   prtdec1   
080D   1E F6                  LD   e,-10   
080F   CD 1A 08               CALL   prtdec1   
0812   0C                     INC   c   ; flag = true for at least digit
0813   1E FF                  LD   e,-1   
0815   CD 1A 08               CALL   prtdec1   
0818   C1                     POP   bc   
0819   C9                     RET      
081A                PRTDEC1:      
081A   06 2F                  LD   b,"0"-1   
081C                PRTDEC2:      
081C   04                     INC   b   
081D   19                     ADD   hl,de   
081E   38 FC                  JR   c,prtdec2   
0820   ED 52                  SBC   hl,de   
0822   3E 30                  LD   a,"0"   
0824   B8                     CP   b   
0825   20 05                  JR   nz,prtdec3   
0827   AF                     XOR   a   
0828   B1                     OR   c   
0829   C8                     RET   z   
082A   18 01                  JR   prtdec4   
082C                PRTDEC3:      
082C   0C                     INC   c   
082D                PRTDEC4:      
082D   78                     LD   a,b   
082E   C3 85 00               JP   putchar   
0831                PRTHEX:      ; display hl as a 16-bit number in hex.
0831   C5                     PUSH   bc   ; preserve the IP
0832   7C                     LD   a,h   
0833   CD 3C 08               CALL   prthex2   
0836   7D                     LD   a,l   
0837   CD 3C 08               CALL   prthex2   
083A   C1                     POP   bc   
083B   C9                     RET      
083C                PRTHEX2:      
083C   4F                     LD   c,a   
083D   1F                     RRA      
083E   1F                     RRA      
083F   1F                     RRA      
0840   1F                     RRA      
0841   CD 45 08               CALL   prthex3   
0844   79                     LD   a,c   
0845                PRTHEX3:      
0845   E6 0F                  AND   0x0F   
0847   C6 90                  ADD   a,0x90   
0849   27                     DAA      
084A   CE 40                  ADC   a,0x40   
084C   27                     DAA      
084D   C3 85 00               JP   putchar   
0850                PRTSTR0:      
0850   CD 85 00               CALL   putchar   
0853   23                     INC   hl   
0854                PRTSTR:      
0854   7E                     LD   a,(hl)   
0855   B7                     OR   a   
0856   20 F8                  JR   nz,prtstr0   
0858   C9                     RET      
0859                             ; **************************************************************************
0859                             ; calculate nesting value
0859                             ; a is char to be tested,
0859                             ; e is the nesting value (initially 0)
0859                             ; e is increased by ( and [
0859                             ; e is decreased by ) and ]
0859                             ; e has its bit 7 toggled by `
0859                             ; limited to 127 levels
0859                             ; **************************************************************************
0859                NESTING:      
0859   FE 22                  CP   $22   ; quote char
085B   20 0A                  JR   nz,nesting1   
085D   CB 7B                  BIT   7,e   
085F   28 03                  JR   z,nesting1a   
0861   CB BB                  RES   7,e   
0863   C9                     RET      
0864                NESTING1A:      
0864   CB FB                  SET   7,e   
0866   C9                     RET      
0867                NESTING1:      
0867   CB 7B                  BIT   7,e   
0869   C0                     RET   nz   
086A   FE 7B                  CP   "{"   
086C   28 08                  JR   z,nesting2   
086E   FE 5B                  CP   "["   
0870   28 04                  JR   z,nesting2   
0872   FE 28                  CP   "("   
0874   20 02                  JR   nz,nesting3   
0876                NESTING2:      
0876   1C                     INC   e   
0877   C9                     RET      
0878                NESTING3:      
0878   FE 7D                  CP   "}"   
087A   28 07                  JR   z,nesting4   
087C   FE 5D                  CP   "]"   
087E   28 03                  JR   z,nesting4   
0880   FE 29                  CP   ")"   
0882   C0                     RET   nz   
0883                NESTING4:      
0883   1D                     DEC   e   
0884   C9                     RET      
0885                PROMPT:      
0885   CD 95 08               CALL   printStr   
0888   0D 0A 3E 20 00         .CSTR   "\r\n> "   
088D   C9                     RET      
088E                CRLF:        
088E   CD 95 08               CALL   printStr   
0891   0D 0A 00               .CSTR   "\r\n"   
0894   C9                     RET      
0895                PRINTSTR:      
0895   E3                     EX   (sp),hl   ; swap			
0896   CD 54 08               CALL   prtstr   
0899   23                     INC   hl   ; inc past NUL
089A   E3                     EX   (sp),hl   ; put it back	
089B   C9                     RET      
089C                DEFINE:      
089C   E1                     POP   hl   
089D   7E                     LD   a,(hl)   
089E   23                     INC   hl   
089F   44 4D                  LD   bc,hl   
08A1   5F                     LD   e,a   
08A2   16 00                  LD   d,0   
08A4   19                     ADD   hl,de   
08A5   5E                     LD   e,(hl)   
08A6   23                     INC   hl   
08A7   56                     LD   d,(hl)   
08A8   23                     INC   hl   
08A9   E5                     PUSH   hl   ; bc = str
08AA   D5                     PUSH   de   
08AB   CD 43 07               CALL   hashStr   ; hl = hash
08AE   D1                     POP   de   
08AF   44 4D                  LD   bc,hl   
08B1   C3 5C 07               JP   defineEntry   
08B4                INIT:        
08B4   DD 21 7D 0A            LD   ix,next   
08B8   FD 21 80 18            LD   iy,STACK   
08BC   21 80 01               LD   hl,isysVars   
08BF   11 98 18               LD   de,sysVars   
08C2   01 10 00               LD   bc,8 * 2   
08C5   ED B0                  LDIR      
08C7   3E FF                  LD   a,UNUSED   
08C9   06 00                  LD   b,0   
08CB   21 00 1B               LD   hl,hashSlots   
08CE                INIT1:       
08CE   77                     LD   (hl),a   
08CF   23                     INC   hl   
08D0   10 FC                  DJNZ   init1   
08D2   CD 9C 08               CALL   define   
08D5   04 61 62 73 00         .PSTR   "abs",0   
08DA   E3 06                  DW   abs1   
08DC   CD 9C 08               CALL   define   
08DF   05 61 64 64 72 00      .PSTR   "addr",0   
08E5   63 06                  DW   addr   
08E7   CD 9C 08               CALL   define   
08EA   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08F1   A4 05                  DW   bytes   
08F3   CD 9C 08               CALL   define   
08F6   05 63 61 6C 6C 00      .PSTR   "call",0   
08FC   A6 0A                  DW   call   
08FE                             ; call define
08FE                             ; .pstr "closure",0
08FE                             ; dw closure
08FE   CD 9C 08               CALL   define   
0901   04 64 65 66 00         .PSTR   "def",0   
0906   2C 06                  DW   def   
0908   CD 9C 08               CALL   define   
090B   05 65 78 65 63 00      .PSTR   "exec",0   
0911   A2 0A                  DW   exec   
0913   CD 9C 08               CALL   define   
0916   06 66 61 6C 73 65 00   .PSTR   "false",0   
091D   00 00                  DW   false   
091F   CD 9C 08               CALL   define   
0922   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
092A   41 07                  DW   filter   
092C   CD 9C 08               CALL   define   
092F   05 66 72 61 63 00      .PSTR   "frac",0   
0935   D0 06                  DW   frac   
0937   CD 9C 08               CALL   define   
093A   05 66 75 6E 63 00      .PSTR   "func",0   
0940   10 0B                  DW   func   
0942                             ; call define
0942                             ; .pstr "get",0
0942                             ; dw get
0942   CD 9C 08               CALL   define   
0945   05 68 61 73 68 00      .PSTR   "hash",0   
094B   21 06                  DW   hash   
094D   CD 9C 08               CALL   define   
0950   06 69 6E 70 75 74 00   .PSTR   "input",0   
0957   1D 07                  DW   input   
0959   CD 9C 08               CALL   define   
095C   03 69 66 00            .PSTR   "if",0   
0960   8F 05                  DW   if   
0962   CD 9C 08               CALL   define   
0965   05 69 66 74 65 00      .PSTR   "ifte",0   
096B   91 05                  DW   ifte   
096D   CD 9C 08               CALL   define   
0970   04 6B 65 79 00         .PSTR   "key",0   
0975   31 07                  DW   key   
0977   CD 9C 08               CALL   define   
097A   04 6C 65 74 00         .PSTR   "let",0   
097F   3C 06                  DW   let   
0981   CD 9C 08               CALL   define   
0984   05 6C 6F 6F 70 00      .PSTR   "loop",0   
098A   9D 05                  DW   loop   
098C   CD 9C 08               CALL   define   
098F   04 6D 61 70 00         .PSTR   "map",0   
0994   41 07                  DW   map   
0996   CD 9C 08               CALL   define   
0999   04 6D 6F 64 00         .PSTR   "mod",0   
099E   F0 06                  DW   mod   
09A0   CD 9C 08               CALL   define   
09A3   04 6E 65 67 00         .PSTR   "neg",0   
09A8   3A 07                  DW   neg   
09AA   CD 9C 08               CALL   define   
09AD   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09B5   28 07                  DW   output   
09B7   CD 9C 08               CALL   define   
09BA   05 73 63 61 6E 00      .PSTR   "scan",0   
09C0   01 00                  DW   scan   
09C2   CD 9C 08               CALL   define   
09C5   04 73 65 74 00         .PSTR   "set",0   
09CA   7F 05                  DW   set   
09CC   CD 9C 08               CALL   define   
09CF   04 73 68 6C 00         .PSTR   "shl",0   
09D4   CF 03                  DW   shl   
09D6   CD 9C 08               CALL   define   
09D9   04 73 68 72 00         .PSTR   "shr",0   
09DE   DF 03                  DW   shr   
09E0   CD 9C 08               CALL   define   
09E3   05 73 71 72 74 00      .PSTR   "sqrt",0   
09E9   D6 06                  DW   sqrt1   
09EB   CD 9C 08               CALL   define   
09EE   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09F6   93 05                  DW   switch   
09F8   CD 9C 08               CALL   define   
09FB   05 74 72 75 65 00      .PSTR   "true",0   
0A01   FF FF                  DW   true   
0A03   CD 9C 08               CALL   define   
0A06   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A0D   9F 05                  DW   words   
0A0F   C9                     RET      
0A10                START:       
0A10   31 80 18               LD   sp,STACK   ; start of Siena
0A13   CD B4 08               CALL   init   ; setups
0A16   CD 95 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A19   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A26                INTERPRET:      
0A26   CD 85 08               CALL   prompt   
0A29   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A2C   ED 43 9C 18            LD   (vTIBPtr),bc   
0A30                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A30   1E 00                  LD   e,0   ; initilize nesting value
0A32   C5                     PUSH   bc   ; save offset into TIB,
0A33                             ; bc is also the count of chars in TIB
0A33   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A36   18 06                  JR   interpret4   
0A38                INTERPRET3:      
0A38   7E                     LD   a,(hl)   ; a = char in TIB
0A39   23                     INC   hl   ; inc pointer into TIB
0A3A   0B                     DEC   bc   ; dec count of chars in TIB
0A3B   CD 59 08               CALL   nesting   ; update nesting value
0A3E                INTERPRET4:      
0A3E   79                     LD   a,c   ; is count zero?
0A3F   B0                     OR   b   
0A40   20 F6                  JR   nz,interpret3   ; if not loop
0A42   C1                     POP   bc   ; restore offset into TIB
0A43                WAITCHAR:      
0A43   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A46   FE 20                  CP   $20   ; compare to space
0A48   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A4A   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A4C                             ; ???? NEEDED?
0A4C   28 27                  JR   z,waitchar4   
0A4E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A50   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A52                MACRO:       
0A52                             ;  ld (vTIBPtr),bc
0A52                             ;  ld hl,ctrlCodes
0A52                             ;  add a,l			            ; look up key of macros
0A52                             ;  ld l,a
0A52                             ;  ld e,(hl)
0A52                             ;  ld a,e
0A52                             ;  or a
0A52                             ;  jr z,macro1
0A52                             ;  ld d,msb(macros)
0A52                             ;  push de
0A52                             ;  call call		            ; Siena exec_ operation and jump to it
0A52                             ;  db DC1,0
0A52                             ; macro1:
0A52                             ;  ld bc,(vTIBPtr)
0A52   18 DC                  JR   interpret2   
0A54                WAITCHAR1:      
0A54   21 00 19               LD   hl,TIB   
0A57   09                     ADD   hl,bc   
0A58   77                     LD   (hl),a   ; store the character in textbuf
0A59   03                     INC   bc   
0A5A   CD 85 00               CALL   putchar   ; echo character to screen
0A5D   CD 59 08               CALL   nesting   
0A60   18 E1                  JR   waitchar   ; wait for next character
0A62                WAITCHAR3:      
0A62   21 00 19               LD   hl,TIB   
0A65   09                     ADD   hl,bc   
0A66   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A68   23                     INC   hl   
0A69   36 0A                  LD   (hl),"\n"   
0A6B   23                     INC   hl   
0A6C   03                     INC   bc   
0A6D   03                     INC   bc   
0A6E   CD 8E 08               CALL   crlf   ; echo character to screen
0A71   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A72   B7                     OR   a   
0A73   20 CE                  JR   nz,waitchar   
0A75                WAITCHAR4:      
0A75   ED 43 9C 18            LD   (vTIBPtr),bc   
0A79   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A7C                             ; we pressed enter
0A7C   0B                     DEC   bc   
0A7D                NEXT:        
0A7D   03                     INC   bc   ; Increment the IP
0A7E   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A7F   FE 20                  CP   " "   ; whitespace?
0A81   28 FA                  JR   z,next   ; space? ignore
0A83   38 07                  JR   c,next1   
0A85   6F                     LD   l,a   ; index into table
0A86   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A88   6E                     LD   l,(hl)   ; get low jump address
0A89   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A8B   E9                     JP   (hl)   ; Jump to routine
0A8C                NEXT1:       
0A8C   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0A8E   28 0B                  JR   z,escape_   
0A90   FE 00                  CP   NUL   ; end of input string?
0A92   28 08                  JR   z,exit_   
0A94   FE 03                  CP   ETX   ; return from function ?
0A96   28 07                  JR   z,return_   
0A98   C3 26 0A               JP   interpret   ; no, other whitespace, macros?
0A9B                ESCAPE_:      
0A9B   03                     INC   bc   
0A9C                EXIT_:       
0A9C   60 69                  LD   hl,bc   
0A9E   E9                     JP   (hl)   
0A9F                RETURN_:      
0A9F   C3 D0 0A               JP   return   
0AA2                             ; execute a block of code
0AA2                             ; uses parent scope
0AA2                EXEC:        ; execute code at pointer
0AA2   C1                     POP   bc   ; hl = pointer to code
0AA3   0B                     DEC   bc   ; dec to prepare for next routine
0AA4   DD E9                  JP   (ix)   
0AA6                             ; call with args
0AA6                             ; creates a scope
0AA6                CALL:        
0AA6                DOCALL:      ; execute code at pointer
0AA6   E1                     POP   hl   ; hl = pointer to code
0AA7   7C                     LD   a,h   ; skip if destination address is NUL
0AA8   B5                     OR   l   
0AA9   28 23                  JR   z,doCall2   
0AAB   5E                     LD   e,(hl)   ; de = code*, hl = arglist*
0AAC   23                     INC   hl   
0AAD   56                     LD   d,(hl)   
0AAE   E5                     PUSH   hl   ; hl' = block* - 1
0AAF   D9                     EXX      
0AB0   E1                     POP   hl   
0AB1   D9                     EXX      
0AB2   EB                     EX   de,hl   
0AB3                             ; reserve space for return args
0AB3   2B                     DEC   hl   ; a = num return args
0AB4   7E                     LD   a,(hl)   
0AB5   23                     INC   hl   ; hl = arglist*
0AB6   EB                     EX   de,hl   ; de = arglist*
0AB7   87                     ADD   a,a   ; double (bytes)
0AB8   ED 44                  NEG      ; a = -bytes
0ABA   6F                     LD   l,a   ; hl = -bytes
0ABB   07                     RLCA      
0ABC   9F                     SBC   a,a   
0ABD   67                     LD   h,a   
0ABE   39                     ADD   hl,sp   ; sp -= bytes
0ABF   F9                     LD   sp,hl   
0AC0   C5                     PUSH   bc   ; push IP
0AC1   D5                     PUSH   de   ; push arglist*
0AC2   FD E5                  PUSH   iy   ; push BP
0AC4   FD 21 00 00            LD   iy,0   ; BP = SP
0AC8   FD 39                  ADD   iy,sp   
0ACA   D9                     EXX      
0ACB   E5                     PUSH   hl   
0ACC   D9                     EXX      
0ACD   C1                     POP   bc   ; IP = block-1, ready for NEXT
0ACE                DOCALL2:      
0ACE   DD E9                  JP   (ix)   
0AD0                RETURN:      
0AD0   D9                     EXX      
0AD1   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0AD4   FD 56 01               LD   d,(iy+1)   
0AD7   FD 4E 04               LD   c,(iy+4)   ; bc = IP
0ADA   FD 46 05               LD   b,(iy+5)   
0ADD   D9                     EXX      
0ADE   FD 54                  LD   d,iyh   ; hl = BP
0AE0   FD 5D                  LD   e,iyl   
0AE2   EB                     EX   de,hl   
0AE3   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
0AE6   FD 56 03               LD   d,(iy+3)   
0AE9   EB                     EX   de,hl   
0AEA   3E 04                  LD   a,4   ; a = 4
0AEC   2B                     DEC   hl   ; hl = ptr to numargs
0AED   2B                     DEC   hl   
0AEE   86                     ADD   a,(hl)   ; a += numargs
0AEF   87                     ADD   a,a   ; a *= 2
0AF0   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
0AF2   B7                     OR   a   ; bc = BP - sp = count
0AF3   ED 72                  SBC   hl,sp   
0AF5   44 4D                  LD   bc,hl   
0AF7   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
0AF9   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
0AFA   6F                     LD   l,a   
0AFB   3E 00                  LD   a,0   
0AFD   8C                     ADC   a,h   
0AFE   67                     LD   h,a   
0AFF   EB                     EX   de,hl   
0B00   1B                     DEC   de   ; de = firstArg-1
0B01   2B                     DEC   hl   ; hl = BP-1
0B02   ED B8                  LDDR      
0B04   13                     INC   de   ; sp = new sp
0B05   EB                     EX   de,hl   
0B06   F9                     LD   sp,hl   
0B07   D9                     EXX      
0B08   D5                     PUSH   de   ; oldBP
0B09   C5                     PUSH   bc   ; IP
0B0A   D9                     EXX      
0B0B   C1                     POP   bc   
0B0C   FD E1                  POP   iy   
0B0E   DD E9                  JP   (ix)   
0B10                             ; arglist* block* -- ptr
0B10                FUNC:        
0B10   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B13   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B15   23                     INC   hl   
0B16   36 A6                  LD   (hl),lsb(doCall)   
0B18   23                     INC   hl   
0B19   36 0A                  LD   (hl),msb(doCall)   
0B1B   23                     INC   hl   
0B1C   D1                     POP   de   ; hl = heapPtr, de = block
0B1D   EB                     EX   de,hl   ; hl = heapPtr, de = arglist*, (sp) = block*
0B1E   E3                     EX   (sp),hl   
0B1F   EB                     EX   de,hl   
0B20   73                     LD   (hl),e   ; compile arglist*
0B21   23                     INC   hl   
0B22   72                     LD   (hl),d   
0B23   23                     INC   hl   
0B24   D1                     POP   de   ; de = block*
0B25   C5                     PUSH   bc   ; (sp) = IP
0B26   06 01                  LD   b,1   ; b = nesting
0B28                FUNC1:       
0B28   1A                     LD   a,(de)   
0B29   13                     INC   de   
0B2A   77                     LD   (hl),a   
0B2B   23                     INC   hl   
0B2C   FE 29                  CP   ")"   
0B2E   28 29                  JR   z,func4   
0B30   FE 7D                  CP   "}"   
0B32   28 25                  JR   z,func4   
0B34   FE 5D                  CP   "]"   
0B36   28 21                  JR   z,func4   
0B38   FE 28                  CP   "("   
0B3A   28 12                  JR   z,func2   
0B3C   FE 7B                  CP   "{"   
0B3E   28 0E                  JR   z,func2   
0B40   FE 5B                  CP   "["   
0B42   28 0A                  JR   z,func2   
0B44   FE 27                  CP   "'"   
0B46   28 09                  JR   z,func3   
0B48   FE 60                  CP   "`"   
0B4A   28 05                  JR   z,func3   
0B4C   18 DA                  JR   func1   
0B4E                FUNC2:       
0B4E   04                     INC   b   
0B4F   18 D7                  JR   func1   
0B51                FUNC3:       
0B51   3E 80                  LD   a,$80   
0B53   A8                     XOR   b   
0B54   47                     LD   b,a   
0B55   20 D1                  JR   nz,func1   
0B57   18 03                  JR   func4a   
0B59                FUNC4:       
0B59   05                     DEC   b   
0B5A   20 CC                  JR   nz,func1   ; get the next element
0B5C                FUNC4A:      
0B5C   3E 03                  LD   a,ETX   ; compile ETX which means return from function (use ";" ?)
0B5E   77                     LD   (hl),a   
0B5F   23                     INC   hl   
0B60   C1                     POP   bc   ; de = defstart, hl = IP
0B61   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B65   D5                     PUSH   de   
0B66   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B69   DD E9                  JP   (ix)   
0B6B                             ; index -- value
0B6B                             ; returns value of arg
0B6B                ARG:         
0B6B   03                     INC   bc   ; get next char
0B6C   0A                     LD   a,(bc)   
0B6D   C5                     PUSH   bc   ; save IP
0B6E   FD 5E 02               LD   e,(iy+2)   ; hl = arglist, numargs = arglist[-2]
0B71   FD 56 03               LD   d,(iy+3)   
0B74   EB                     EX   de,hl   
0B75   2B                     DEC   hl   
0B76   2B                     DEC   hl   
0B77   46                     LD   b,(hl)   ; b = numargs
0B78   23                     INC   hl   ; hl = arglist
0B79   23                     INC   hl   
0B7A   48                     LD   c,b   ; offset = numargs * 2
0B7B   CB 21                  SLA   c   
0B7D                ARG0:        
0B7D   BE                     CP   (hl)   
0B7E   28 0B                  JR   z,arg1   
0B80   23                     INC   hl   
0B81   0D                     DEC   c   ; offset ++
0B82   10 F9                  DJNZ   arg0   
0B84   C1                     POP   bc   ; no match, restore IP
0B85   21 00 00               LD   hl,0   ; return 0
0B88   E5                     PUSH   hl   
0B89   DD E9                  JP   (ix)   
0B8B                ARG1:        
0B8B   79                     LD   a,c   ; hl = (offset + 4) * 2
0B8C   C6 04                  ADD   a,4   
0B8E   6F                     LD   l,a   
0B8F   26 00                  LD   h,0   
0B91   29                     ADD   hl,hl   
0B92   C1                     POP   bc   ; restore IP
0B93   FD 54                  LD   d,iyh   ; de = BP
0B95   FD 5D                  LD   e,iyl   
0B97   EB                     EX   de,hl   
0B98   19                     ADD   hl,de   ; hl = BP + (offset + 4) * 2
0B99   2B                     DEC   hl   ; de = arg
0B9A   22 9E 18               LD   (vPointer),hl   ; store address of arg in setter
0B9D   56                     LD   d,(hl)   
0B9E   2B                     DEC   hl   
0B9F   5E                     LD   e,(hl)   
0BA0   D5                     PUSH   de   ; push arg
0BA1   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x 20 let x 100 set x", 100
4000                             ; test "[10 20 30] 1?", 20
4000                             ; test ":x [10 20 30] let x 1? 50 set x 1?", 50
4000                             ; test "bytes [1 2 3] 1?", 2
4000                             ; test "bytes :x [1 2 3] let x 1?", 2
4000                             ; test "bytes [`A` `B` `C`] 1?", 66
4000                             ; test "() -2 ?", $0000
4000                             ; test "(a) -1 ?", $0001
4000                             ; test "(a:) -1 ?", $0001
4000                             ; test "(a:b) -1 ?", $0102
4000                             ; test "(:b) -1 ?", $0101
4000                          ;*Macro unroll:  test ":x () {1} def x", 1
4000   31 80 18               LD   SP,STACK   
4003   CD B4 08               CALL   init   
4006   CD A2 0A               CALL   exec   
4009   3A 78 20 28 29 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   ":x () {1} def x"   
4019                          ;*Macro unroll:  expect ":x () {1} def x",1
4019   E1                     POP   HL   
401A   E5                     PUSH   HL   
401B   11 01 00               LD   DE,1   
401E   B7                     OR   A   
401F   ED 52                  SBC   HL,DE   
4021   7D                     LD   A,L   
4022   B4                     OR   H   
4023   28 5A                  JR   Z,expectM_0_2429S43   
4025   CD 95 08               CALL   printStr   
4028   43 6F 64 65 3A 20 3A 78 20 28 29 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x () {1} def x"   
403E   CD 95 08               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 01 00               LD   HL,1   
4053   CD E9 07               CALL   prtdec   
4056   CD 95 08               CALL   printStr   
4059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4066   E1                     POP   hl   
4067   E5                     PUSH   hl   
4068   CD E9 07               CALL   prtdec   
406B   E1                     POP   hl   
406C   CD 95 08               CALL   printStr   
406F   20 28 23 00            .CSTR   " (#"   
4073   CD 31 08               CALL   prthex   
4076   CD 95 08               CALL   printStr   
4079   29 0D 0A 00            .CSTR   ")\r\n"   
407D   76                     HALT      
407E   00                     .CSTR      
407F                EXPECTM_0_2429S43:      
407F   E1                     POP   HL   
4080                             ; test ":x (a:b) {$a 1 + $b set} def x", 1
4080                             ; test "1", 1
4080                             ; test "2", 2
4080                             ; test "1", 1
4080                             ; test "0", 0
4080                             ; test "10", 10
4080                             ; test "123", 123
4080                             ; test "-1",-1
4080                             ; test "``", 0
4080                             ; test "`a`", $61
4080                             ; test "`\\``", $60
4080                             ; test "#10", $10
4080                             ; test "#FF", $FF
4080                             ; test "-1 2 +",1
4080                             ; test "-1 1 +",0
4080                             ; test "1 2 +", 3
4080                             ; test "4 1 2 +", 3
4080                             ; test "1 2 +", 3
4080                             ; test "123 456 +", 123+456
4080                             ; test "64 128 +", 64+128
4080                             ; test "-1 -1 -",0
4080                             ; test "5 3 -", 2
4080                             ; test "3 5 &", 1
4080                             ; test "3 5 |", 7
4080                             ; test "2 3 *", 6
4080                             ; test "1 2 3 + *", 5
4080                             ; test "7 3 /", 2
4080                             ; test "7 3 / frac", 1
4080                             ; test "10 sqrt", 3
4080                             ; test "10 sqrt frac", 1
4080                             ; test "2 3 =", FALSE
4080                             ; test "3 3 =", TRUE
4080                             ; test "1 2 <", TRUE
4080                             ; test "2 1 <", FALSE
4080                             ; test "2 3 <", TRUE
4080                             ; test "3 3 <", FALSE
4080                             ; test "1 2 >", FALSE
4080                             ; test "2 1 >", TRUE
4080                             ; test "3 3 >", FALSE
4080                             ; test "4 3 >", TRUE
4080                             ; test "2 2 <=", TRUE
4080                             ; test "2 2 >=", TRUE
4080                             ; 
4080                             ; 
4080                             ; test ":x 1000 let x 10 set x", 10
4080                             ; test ":x [100] { @1 } closure x", 100
4080                             ; test ":x [100 200] { @2 } closure x", 200
4080                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4080                             ; test ":x 'a' {$a} def 2 x", 2
4080                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4080                             ; test ":x '' { 3 2 } def x + ", 5
4080                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4080                             ; test "0 [{1}] switch", 1
4080                             ; test "1 [{1} {2} {3}] switch", 2
4080                             ; test "9 [{1} {5}] switch", 5
4080                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4080                             ; test "bytes 'ABC' get", $41
4080                             ; test "bytes [1 2 3] get", 1
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":x 1 const ; x", 1
4080                             ; test ":x 'A' const x get", $41
4080                             ; test ":x [1] const x get", 1
4080                             ; test ":x [1 2 3] const x 2?", 3
4080                             ; test "2 (1 2 +) *", 6
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":xyz 123 let ; xyz get", 123
4080                             ; test "1 2 {$1 $2 +} call", 3
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4080                             ; test ":xyz {1} def :xyz addr call", 1
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4080                             ; test ":xyz {10} def :xyz addr exec", 10
4080                             ; test ":xyz {10} def :xyz addr call", 10
4080                             ; test "'hello' hash", $7f54
4080                             ; test ":hello", $7f54
4080                             ; test "{{{1} exec} exec} exec", 1
4080                             ; test "5 {{{$1} exec} exec} call", 5
4080                             ; test "5 {$1} call", 5
4080                             ; test "5 {{$1} exec} call", 5
4080                             ; test "2 1 {{$1} call} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 1 {$1} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 4 {$2} call", 4
4080                             ; test "{{1} call} call", 1
4080                             ; test "5 {-1 {$1} if} call", 5
4080                             ; test "0 {} loop", 0
4080                             ; test "1 {1-} loop", $1a00
4080                             ; test ":h {1} def :h addr call", 1
4080                             ; ; call enter
4080                             ; ;     .cstr "1 3",$22,"+"
4080                             ; ; expect "1 3 DUP +", 6
4080   CD 95 08               CALL   printStr   
4083   44 6F 6E 65 21 00      .CSTR   "Done!"   
4089   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0741 DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1941 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
ARGLIST_:           030F DEFINED AT LINE 229 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 232 IN Siena.asm
DOT1:               031E DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 251 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 260 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 263 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 265 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 267 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 269 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 271 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 273 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 275 IN Siena.asm
AND_:               0354 DEFINED AT LINE 277 IN Siena.asm
AND1:               035B DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
OR_:                035F DEFINED AT LINE 290 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 300 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 302 IN Siena.asm
                    > USED AT LINE 313 IN Siena.asm
INV_:               0371 DEFINED AT LINE 311 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 315 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 322 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 327 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 330 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
NOT_:               039A DEFINED AT LINE 347 IN Siena.asm
EQ_:                039F DEFINED AT LINE 351 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 357 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 362 IN Siena.asm
LT1:                03AA DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 373 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 384 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 392 IN Siena.asm
SHL:                03CF DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHR:                03DF DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 426 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
NUM:                040E DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
NUM3:               043B DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
STRING:             045B DEFINED AT LINE 520 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
ARGLIST:            047F DEFINED AT LINE 553 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
ARGLIST1:           0489 DEFINED AT LINE 560 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
ARGLIST2:           0495 DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
ARGLIST3:           049D DEFINED AT LINE 576 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
ARGLIST4:           04A0 DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
ARGLIST5:           04A5 DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 606 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 613 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 617 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 642 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 645 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 654 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
PROP:               0543 DEFINED AT LINE 703 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              055D DEFINED AT LINE 722 IN Siena.asm
DOLET2:             0561 DEFINED AT LINE 725 IN Siena.asm
DOLET3:             0564 DEFINED AT LINE 729 IN Siena.asm
INDEX:              0567 DEFINED AT LINE 733 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
INDEX1:             0570 DEFINED AT LINE 740 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
INDEX2:             057C DEFINED AT LINE 749 IN Siena.asm
                    > USED AT LINE 746 IN Siena.asm
SET:                057F DEFINED AT LINE 754 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
SET1:               058D DEFINED AT LINE 764 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
IF:                 058F DEFINED AT LINE 769 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
IFTE:               0591 DEFINED AT LINE 776 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
SWITCH:             0593 DEFINED AT LINE 806 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
LOOP:               059D DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
WORDS:              059F DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
BYTES:              05A4 DEFINED AT LINE 872 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
BYTES1:             05A7 DEFINED AT LINE 874 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
ARRAY:              05AC DEFINED AT LINE 878 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
ARRAYEND:           05C2 DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND1:          05E3 DEFINED AT LINE 913 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
ARRAYEND2:          05F3 DEFINED AT LINE 925 IN Siena.asm
                    > USED AT LINE 911 IN Siena.asm
                    > USED AT LINE 937 IN Siena.asm
ARRAYEND3:          0606 DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 923 IN Siena.asm
HASH:               0621 DEFINED AT LINE 961 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
DEF:                062C DEFINED AT LINE 971 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
DEF1:               0633 DEFINED AT LINE 974 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
LET:                063C DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
LET1:               0658 DEFINED AT LINE 1000 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
LET2:               0660 DEFINED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
ADDR:               0663 DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
ADDR1:              066F DEFINED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
SYMBOL:             067A DEFINED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
SYMBOL0:            0682 DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
SYMBOL1:            0684 DEFINED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
SYMBOL2:            0694 DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
IDENT:              06A2 DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
IDENT0:             06A9 DEFINED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
IDENT1:             06AB DEFINED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
IDENT2:             06BB DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
IDENT3:             06CF DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
FRAC:               06D0 DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
SQRT1:              06D6 DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
ABS1:               06E3 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
MOD:                06F0 DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
EQUALS:             06FC DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
LESSTHANEQ:         0704 DEFINED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
LESSTHAN:           0709 DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN1:          070E DEFINED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
TRUE1:              0711 DEFINED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
FALSE1:             0717 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
INPUT:              071D DEFINED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
OUTPUT:             0728 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
KEY:                0731 DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
NEG:                073A DEFINED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
FILTER:             0741 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
MAP:                0741 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
HASHSTR:            0743 DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
HASHSTR1:           0746 DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
HASHSTR2:           074B DEFINED AT LINE 1221 IN Siena.asm
DEFINEENTRY:        075C DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
DEFINEENTRY0:       0761 DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
DEFINEENTRY1:       0770 DEFINED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 1250 IN Siena.asm
DEFINEENTRY2:       0776 DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1286 IN Siena.asm
DEFINEENTRY3:       0778 DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
LOOKUPENTRY:        0782 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
LOOKUPENTRY0:       0787 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1300 IN Siena.asm
LOOKUPENTRY1:       0796 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1289 IN Siena.asm
LOOKUPENTRY2:       079C DEFINED AT LINE 1301 IN Siena.asm
LOOKUPENTRY3:       079E DEFINED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
DIVIDE:             07A6 DEFINED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
DIVIDE1:            07AB DEFINED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1331 IN Siena.asm
DIVIDE2:            07B8 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
DIVIDE3:            07B9 DEFINED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
SQUAREROOT:         07BF DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
SQUAREROOT1:        07C4 DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
SQUAREROOT4:        07DF DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
SQUAREROOT5:        07E6 DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
PRTDEC:             07E9 DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07F8 DEFINED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
PRTDEC1:            081A DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
PRTDEC2:            081C DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
PRTDEC3:            082C DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
PRTDEC4:            082D DEFINED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
PRTHEX:             0831 DEFINED AT LINE 1419 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            083C DEFINED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
PRTHEX3:            0845 DEFINED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
PRTSTR0:            0850 DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
PRTSTR:             0854 DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
NESTING:            0859 DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
NESTING1A:          0864 DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
NESTING1:           0867 DEFINED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
NESTING2:           0876 DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
NESTING3:           0878 DEFINED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
NESTING4:           0883 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
PROMPT:             0885 DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
CRLF:               088E DEFINED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
PRINTSTR:           0895 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 151
DEFINE:             089C DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
INIT:               08B4 DEFINED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08CE DEFINED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
START:              0A10 DEFINED AT LINE 1673 IN Siena.asm
INTERPRET:          0A26 DEFINED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
INTERPRET2:         0A30 DEFINED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
INTERPRET3:         0A38 DEFINED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
INTERPRET4:         0A3E DEFINED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
WAITCHAR:           0A43 DEFINED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
MACRO:              0A52 DEFINED AT LINE 1714 IN Siena.asm
WAITCHAR1:          0A54 DEFINED AT LINE 1731 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
WAITCHAR3:          0A62 DEFINED AT LINE 1740 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
WAITCHAR4:          0A75 DEFINED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
NEXT:               0A7D DEFINED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
NEXT1:              0A8C DEFINED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
ESCAPE_:            0A9B DEFINED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
EXIT_:              0A9C DEFINED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
RETURN_:            0A9F DEFINED AT LINE 1787 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
EXEC:               0AA2 DEFINED AT LINE 1792 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 41
CALL:               0AA6 DEFINED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
DOCALL:             0AA6 DEFINED AT LINE 1800 IN Siena.asm
DOCALL2:            0ACE DEFINED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
RETURN:             0AD0 DEFINED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
FUNC:               0B10 DEFINED AT LINE 1882 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
FUNC1:              0B28 DEFINED AT LINE 1903 IN Siena.asm
                    > USED AT LINE 1927 IN Siena.asm
                    > USED AT LINE 1930 IN Siena.asm
                    > USED AT LINE 1935 IN Siena.asm
                    > USED AT LINE 1939 IN Siena.asm
FUNC2:              0B4E DEFINED AT LINE 1928 IN Siena.asm
                    > USED AT LINE 1917 IN Siena.asm
                    > USED AT LINE 1919 IN Siena.asm
                    > USED AT LINE 1921 IN Siena.asm
FUNC3:              0B51 DEFINED AT LINE 1931 IN Siena.asm
                    > USED AT LINE 1924 IN Siena.asm
                    > USED AT LINE 1926 IN Siena.asm
FUNC4:              0B59 DEFINED AT LINE 1937 IN Siena.asm
                    > USED AT LINE 1910 IN Siena.asm
                    > USED AT LINE 1912 IN Siena.asm
                    > USED AT LINE 1914 IN Siena.asm
FUNC4A:             0B5C DEFINED AT LINE 1940 IN Siena.asm
                    > USED AT LINE 1936 IN Siena.asm
ARG:                0B6B DEFINED AT LINE 1952 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
ARG0:               0B7D DEFINED AT LINE 1966 IN Siena.asm
                    > USED AT LINE 1971 IN Siena.asm
ARG1:               0B8B DEFINED AT LINE 1976 IN Siena.asm
                    > USED AT LINE 1968 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1535 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 736 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 909 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1683 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 714 IN Siena.asm
                    > USED AT LINE 724 IN Siena.asm
                    > USED AT LINE 742 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1988 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
                    > USED AT LINE 903 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1883 IN Siena.asm
                    > USED AT LINE 1945 IN Siena.asm
                    > USED AT LINE 1947 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1541 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2429S43:  407F DEFINED AT LINE 34
                    > USED AT LINE 10
