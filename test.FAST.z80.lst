0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD C1 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; oldIP                             -- saved interpreter ptr
00CC                             ; static                            -- static array
00CC                             ; SCP                               -- scope base ptr           --> arg0
00CC                             ; oldBP                             -- saved base ptr           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arglist_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 E4 0B               JP   arg   
0309                PROP_:       
0309   C3 50 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARGLIST_:      
030F   C3 7F 04               JP   arglist   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 3E 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 61 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD F6 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 74 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 B9 05               JP   array   
034B                ARRAYEND_:      
034B   C3 CF 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 AF 06               JP   ident   
0351                SYMBOL_:      
0351   C3 87 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 3E 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 09 07               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 11 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 16 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD B3 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      ; 
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ;arglist - parses input (ab:c)
047F                ARGLIST:      
047F   11 00 00               LD   de,0   ; d = count ret args, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arglist
0488   03                     INC   bc   ; point to next char
0489                ARGLIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arglist terminator
048C   28 12                  JR   z,arglist4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arglist2   
0492   14                     INC   d   ; non zero value ret count acts as flag
0493   20 08                  JR   nz,arglist3   
0495                ARGLIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arglist3   
049C   14                     INC   d   ; if d > 0 increase ret arg count
049D                ARGLIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arglist1   
04A0                ARGLIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arglist
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 04               LD   c,(iy+4)   ; bc = IP
050D   FD 46 05               LD   b,(iy+5)   
0510   D9                     EXX      
0511   FD 54                  LD   d,iyh   ; hl = BP
0513   FD 5D                  LD   e,iyl   
0515   EB                     EX   de,hl   
0516   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist* (numargs = arglist[-2])
0519   FD 56 03               LD   d,(iy+3)   
051C   EB                     EX   de,hl   
051D   01 00 00               LD   bc,0   ; bc = 0 b = 0 ret args c = 0 args
0520   7D                     LD   a,l   
0521   B4                     OR   h   
0522   28 08                  JR   z,blockend1   
0524   2B                     DEC   hl   ; b = num ret args
0525   46                     LD   b,(hl)   
0526   CB 20                  SLA   b   ; b *= 2
0528   2B                     DEC   hl   
0529   4E                     LD   c,(hl)   ; c = num args
052A   CB 21                  SLA   c   ; c *= 2
052C                BLOCKEND1:      
052C   3E 03                  LD   a,3   ; a = header in words
052E   87                     ADD   a,a   ; a *= 2 header in bytes
052F   81                     ADD   a,c   ; a = offset to firstArg
0530   6F                     LD   l,a   ; de = bp, hl = offset to firstArg
0531   26 00                  LD   h,0   
0533   19                     ADD   hl,de   ; hl = first arg
0534   79                     LD   a,c   ; bc = c - b = count bytes
0535   90                     SUB   b   
0536   28 0E                  JR   z,blockend2   
0538   54 5D                  LD   de,hl   ; de = hl = first arg
053A   4F                     LD   c,a   
053B   06 00                  LD   b,0   
053D   B7                     OR   a   
053E   ED 42                  SBC   hl,bc   ; hl = first ret arg
0540   2B                     DEC   hl   ; hl = first ret arg - 1
0541   1B                     DEC   de   ; de = first arg - 1
0542   ED B8                  LDDR      
0544   13                     INC   de   ; sp = new sp
0545   EB                     EX   de,hl   
0546                BLOCKEND2:      
0546   F9                     LD   sp,hl   
0547   D9                     EXX      
0548   D5                     PUSH   de   ; oldBP
0549   C5                     PUSH   bc   ; IP
054A   D9                     EXX      
054B   C1                     POP   bc   
054C   FD E1                  POP   iy   
054E   DD E9                  JP   (ix)   
0550                             ; @1..9
0550                             ; returns address of prop
0550                PROP:        
0550   03                     INC   bc   ; get next char
0551   0A                     LD   a,(bc)   
0552   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0554   E6 0F                  AND   $0F   ; mask
0556   87                     ADD   a,a   ; double
0557   6F                     LD   l,a   ; hl = offset into args
0558   26 00                  LD   h,0   
055A   FD 5E 06               LD   e,(iy+6)   ; de = closure array
055D   FD 56 07               LD   d,(iy+7)   
0560   19                     ADD   hl,de   ; find address of prop in array
0561   22 9E 18               LD   (vPointer),hl   ; store address in setter
0564   5E                     LD   e,(hl)   
0565   23                     INC   hl   
0566   56                     LD   d,(hl)   
0567   D5                     PUSH   de   ; push prop value
0568   DD E9                  JP   (ix)   
056A                             ; addr -- value
056A                DOLET:       
056A   E1                     POP   hl   
056B   22 9E 18               LD   (vPointer),hl   ; store address in setter
056E                DOLET2:      
056E   5E                     LD   e,(hl)   
056F   23                     INC   hl   
0570   56                     LD   d,(hl)   
0571                DOLET3:      
0571   D5                     PUSH   de   
0572   DD E9                  JP   (ix)   
0574                INDEX:       
0574   E1                     POP   hl   ; hl = index
0575   D1                     POP   de   ; de = addr
0576   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0579   3D                     DEC   a   
057A   28 01                  JR   z,index1   
057C   29                     ADD   hl,hl   ; if data width = 2 then double
057D                INDEX1:      
057D   19                     ADD   hl,de   ; add addr
057E   22 9E 18               LD   (vPointer),hl   ; store address in setter
0581   16 00                  LD   d,0   
0583   5E                     LD   e,(hl)   
0584   B7                     OR   a   ; check data width again
0585   28 02                  JR   z,index2   
0587   23                     INC   hl   
0588   56                     LD   d,(hl)   
0589                INDEX2:      
0589   D5                     PUSH   de   
058A   DD E9                  JP   (ix)   
058C                             ; newvalue --
058C                SET:         
058C   D1                     POP   de   ; new value
058D   E1                     POP   hl   ; discard last accessed value
058E   2A 9E 18               LD   hl,(vPointer)   
0591   73                     LD   (hl),e   
0592   3A 9A 18               LD   a,(vDataWidth)   
0595   3D                     DEC   a   
0596   28 02                  JR   z,set1   
0598   23                     INC   hl   
0599   72                     LD   (hl),d   
059A                SET1:        
059A   DD E9                  JP   (ix)   
059C                             ; ifte
059C                             ; condition then -- value
059C                IF:          
059C   DD E9                  JP   (ix)   
059E                             ; ld de,0                      ; NUL pointer for else
059E                             ; jr ifte1
059E                             ; ifte
059E                             ; condition then else -- value
059E                IFTE:        
059E   DD E9                  JP   (ix)   
05A0                             ;     pop de                      ; de = else
05A0                             ; ifte1:
05A0                             ;     pop hl                      ; hl = then
05A0                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
05A0                             ;     inc hl                      ; check for true
05A0                             ;     ld a,h
05A0                             ;     or l
05A0                             ;     pop hl                      ; hl = then
05A0                             ;     jr z,ifte2
05A0                             ;     ex de,hl                    ; condition = false, hl = else
05A0                             ; ifte2:
05A0                             ;     ld a,h                      ; check if hl is NUL
05A0                             ;     or l
05A0                             ;     jr z,ifte3
05A0                             ;     push bc                     ; push IP
05A0                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05A0                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05A0                             ;     push de                     ; push SCP
05A0                             ;     push iy                     ; push BP
05A0                             ;     ld iy,0                     ; iy = sp
05A0                             ;     add iy,sp
05A0                             ;     ld bc,hl                    ; IP = then
05A0                             ;     dec bc
05A0                             ; ifte3:
05A0                             ;     jp (ix)
05A0                             ; switch
05A0                             ; index array -- value
05A0                SWITCH:      
05A0   D1                     POP   de   ; de = array
05A1   E1                     POP   hl   ; hl = index
05A2   29                     ADD   hl,hl   ; indec *= 2
05A3   19                     ADD   hl,de   ; add array[0]
05A4   4E                     LD   c,(hl)   ; bc = case
05A5   23                     INC   hl   
05A6   46                     LD   b,(hl)   
05A7   0B                     DEC   bc   
05A8   DD E9                  JP   (ix)   
05AA                             ; c b --
05AA                             ; loops until c = 0
05AA                LOOP:        
05AA   DD E9                  JP   (ix)   
05AC                             ;     pop de                      ; de = block                    c
05AC                             ;     pop hl                      ; hl = condition
05AC                             ;     push de
05AC                             ;     push bc                     ; push IP
05AC                             ;     ld bc,de                    ; bc = block
05AC                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05AC                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05AC                             ;     push de                     ; push SCP
05AC                             ;     push iy                     ; push BP
05AC                             ;     ld iy,0                     ; iy = sp
05AC                             ;     add iy,sp
05AC                             ; loop1:
05AC                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05AC                             ;     or h
05AC                             ;     jr z,loop3
05AC                             ;     ld de,loop2-1               ; IP return address
05AC                             ;     push de
05AC                             ;     ld e,(iy+2)                 ; push parent SCP
05AC                             ;     ld d,(iy+3)
05AC                             ;     push de                     ;
05AC                             ;     push iy                     ; push BP
05AC                             ;     ld iy,0                     ; iy = sp
05AC                             ;     add iy,sp
05AC                             ;     push hl                     ; push condition
05AC                             ;     dec bc
05AC                             ;     jp (ix)
05AC                             ; loop2:
05AC                             ;     db ESC                      ; escape from interpreter
05AC                             ;     ld c,(iy+6)                 ; bc = block
05AC                             ;     ld b,(iy+7)
05AC                             ;     pop hl                      ; hl = condition
05AC                             ;     jr loop1
05AC                             ; loop3:
05AC                             ;     ld d,iyh                    ; de = BP
05AC                             ;     ld e,iyl
05AC                             ;     ex de,hl                    ; hl = BP, de = result
05AC                             ;     ld sp,hl                    ; sp = BP
05AC                             ;     pop hl                      ; hl = old BP
05AC                             ;     pop bc                      ; pop SCP (discard)
05AC                             ;     pop bc                      ; bc = IP
05AC                             ;     ld sp,hl                    ; sp = old BP
05AC                             ;     ld iy,0                     ; iy = sp
05AC                             ;     add iy,sp
05AC                             ;     ld ix,next                  ; needed?
05AC                             ;     jp (ix)
05AC                WORDS:       
05AC   21 02 00               LD   hl,2   
05AF   18 03                  JR   bytes1   
05B1                BYTES:       
05B1   21 01 00               LD   hl,1   
05B4                BYTES1:      
05B4   22 9A 18               LD   (vDataWidth),hl   
05B7   DD E9                  JP   (ix)   
05B9                ARRAY:       
05B9   11 00 00               LD   de,0   ; create stack frame
05BC   D5                     PUSH   de   ; push null for IP
05BD   D5                     PUSH   de   ; push null for static array
05BE   FD 5E 02               LD   e,(iy+2)   ; get and save arglist from parent stack frame
05C1   FD 56 03               LD   d,(iy+3)   ; 
05C4   D5                     PUSH   de   ; 
05C5   FD E5                  PUSH   iy   ; push BP
05C7   FD 21 00 00            LD   iy,0   ; BP = SP
05CB   FD 39                  ADD   iy,sp   
05CD   DD E9                  JP   (ix)   
05CF                ARRAYEND:      
05CF   FD 54                  LD   d,iyh   ; de = BP
05D1   FD 5D                  LD   e,iyl   
05D3   C5                     PUSH   bc   ; save IP
05D4   D9                     EXX      
05D5   C1                     POP   bc   
05D6   D9                     EXX      
05D7   62 6B                  LD   hl,de   ; hl = de = BP
05D9   B7                     OR   a   
05DA   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05DC   CB 3C                  SRL   h   ; 
05DE   CB 1D                  RR   l   
05E0   44 4D                  LD   bc,hl   ; bc = count
05E2   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05E5   71                     LD   (hl),c   ; write num items in length word
05E6   23                     INC   hl   
05E7   70                     LD   (hl),b   
05E8   23                     INC   hl   ; hl = array[0], bc = count
05E9                             ; de = BP, hl = array[0], bc = count
05E9   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05EC   FE 01                  CP   1   
05EE   20 10                  JR   nz,arrayEnd2   
05F0                ARRAYEND1:      ; byte
05F0   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F3   77                     LD   (hl),a   ; write a to array item
05F4   23                     INC   hl   ; move to next byte in array
05F5   FD 2B                  DEC   iy   ; move tho next word on stack
05F7   FD 2B                  DEC   iy   
05F9   0B                     DEC   bc   ; dec items count
05FA   79                     LD   a,c   ; if not zero loop
05FB   B0                     OR   b   
05FC   20 F2                  JR   nz,arrayEnd1   
05FE   18 13                  JR   arrayEnd3   
0600                ARRAYEND2:      ; word
0600   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0603   77                     LD   (hl),a   ; write lsb of array item
0604   23                     INC   hl   ; move to msb of array item
0605   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0608   77                     LD   (hl),a   ; write msb of array item
0609   23                     INC   hl   ; move to next word in array
060A   FD 2B                  DEC   iy   ; move to next word on stack
060C   FD 2B                  DEC   iy   
060E   0B                     DEC   bc   ; dec items count
060F   79                     LD   a,c   ; if not zero loop
0610   B0                     OR   b   
0611   20 ED                  JR   nz,arrayEnd2   
0613                ARRAYEND3:      
0613   EB                     EX   de,hl   ; de = end of array, hl = BP
0614   F9                     LD   sp,hl   ; sp = BP
0615   E1                     POP   hl   ; de = end of array, hl = old BP
0616   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0617   FD 62                  LD   iyh,d   
0619   FD 6B                  LD   iyl,e   
061B   D1                     POP   de   ; pop arglist (discard)
061C   D1                     POP   de   ; pop static array (discard)
061D   D1                     POP   de   ; pop IP (discard)
061E   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0622   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0625   D9                     EXX      ; restore IP
0626   C5                     PUSH   bc   
0627   D9                     EXX      
0628   C1                     POP   bc   
0629   13                     INC   de   ; de = array[0]
062A   13                     INC   de   
062B   D5                     PUSH   de   ; return array[0]
062C   DD E9                  JP   (ix)   
062E                             ; str -- num
062E                HASH:        
062E   E1                     POP   hl   
062F   C5                     PUSH   bc   
0630   44 4D                  LD   bc,hl   
0632   CD 50 07               CALL   hashStr   
0635   C1                     POP   bc   
0636   E5                     PUSH   hl   
0637   DD E9                  JP   (ix)   
0639                             ; symbol func --
0639                DEF:         
0639   DD 21 40 06            LD   ix,def1   
063D   C3 89 0B               JP   func   
0640                DEF1:        
0640   DD 21 8A 0A            LD   ix,next   
0644   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0645   60 69                  LD   hl,bc   
0647   18 1C                  JR   let1   
0649                             ; symbol value --
0649                LET:         
0649   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
064B   E3                     EX   (sp),hl   
064C   EB                     EX   de,hl   
064D   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0650   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0652   23                     INC   hl   
0653   36 6A                  LD   (hl),lsb(dolet)   
0655   23                     INC   hl   
0656   36 05                  LD   (hl),msb(dolet)   
0658   23                     INC   hl   
0659   73                     LD   (hl),e   
065A   23                     INC   hl   
065B   72                     LD   (hl),d   
065C   2B                     DEC   hl   
065D   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0661   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0664   E1                     POP   hl   ; de = addr, hl = IP
0665                LET1:        
0665   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0666   44 4D                  LD   bc,hl   ; bc = symbol
0668   CD 69 07               CALL   defineEntry   
066B   38 00                  JR   c,let2   
066D                             ; call error
066D                             ; .cstr "Let Collision"
066D                LET2:        
066D   C1                     POP   bc   
066E   DD E9                  JP   (ix)   
0670                             ; symbol -- ptr
0670                ADDR:        
0670   E1                     POP   hl   ; hl = hash
0671   C5                     PUSH   bc   
0672   44 4D                  LD   bc,hl   
0674   CD 8F 07               CALL   lookupEntry   
0677   38 03                  JR   c,addr1   
0679   21 00 00               LD   hl,0   
067C                             ; call printStr		
067C                             ; .cstr "Undefined"
067C                             ; jp interpret
067C                ADDR1:       
067C   C1                     POP   bc   
067D   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0680   19                     ADD   hl,de   
0681   22 9E 18               LD   (vPointer),hl   
0684   E5                     PUSH   hl   
0685   DD E9                  JP   (ix)   
0687                SYMBOL:      
0687   03                     INC   bc   
0688   11 00 1A               LD   de,PAD   
068B   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
068D   18 02                  JR   symbol1   
068F                SYMBOL0:      ; copy to PAD area
068F   03                     INC   bc   ; characters that are part of the identifier
0690   13                     INC   de   
0691                SYMBOL1:      ; 0-9 A-Z a-z _
0691   0A                     LD   a,(bc)   
0692   12                     LD   (de),a   
0693   FE 21                  CP   " "+1   
0695   38 0A                  JR   c,symbol2   
0697   6F                     LD   l,a   
0698   7E                     LD   a,(hl)   
0699   FE 4E                  CP   lsb(ident_)   
069B   28 F2                  JR   z,symbol0   
069D   FE 00                  CP   lsb(num_)   
069F   28 EE                  JR   z,symbol0   
06A1                SYMBOL2:      
06A1   0B                     DEC   bc   
06A2   AF                     XOR   a   
06A3   12                     LD   (de),a   ; terminate string with NUL
06A4   C5                     PUSH   bc   
06A5   01 00 1A               LD   bc,PAD   
06A8   CD 50 07               CALL   hashStr   ; hl = hash
06AB   C1                     POP   bc   
06AC   E5                     PUSH   hl   
06AD   DD E9                  JP   (ix)   
06AF                IDENT:       
06AF   11 00 1A               LD   de,PAD   
06B2   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06B4   18 02                  JR   ident1   
06B6                IDENT0:      ; copy to PAD area
06B6   03                     INC   bc   ; characters that are part of the identifier
06B7   13                     INC   de   
06B8                IDENT1:      ; 0-9 A-Z a-z _
06B8   0A                     LD   a,(bc)   
06B9   12                     LD   (de),a   
06BA                             ; or a
06BA                             ; jr z,ident2
06BA   FE 21                  CP   " "+1   
06BC   38 0A                  JR   c,ident2   
06BE   6F                     LD   l,a   
06BF   7E                     LD   a,(hl)   
06C0   FE 4E                  CP   lsb(ident_)   
06C2   28 F2                  JR   z,ident0   
06C4   FE 00                  CP   lsb(num_)   
06C6   28 EE                  JR   z,ident0   
06C8                IDENT2:      
06C8   0B                     DEC   bc   
06C9   AF                     XOR   a   
06CA   12                     LD   (de),a   ; terminate string with NUL
06CB   C5                     PUSH   bc   
06CC   01 00 1A               LD   bc,PAD   
06CF   CD 50 07               CALL   hashStr   ; hl = hash
06D2   44 4D                  LD   bc,hl   
06D4   CD 8F 07               CALL   lookupEntry   
06D7   C1                     POP   bc   
06D8   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06DA   DD E9                  JP   (ix)   
06DC                IDENT3:      
06DC   E9                     JP   (hl)   
06DD                FRAC:        
06DD   2A 98 18               LD   hl,(vFrac)   
06E0   E5                     PUSH   hl   
06E1   DD E9                  JP   (ix)   
06E3                SQRT1:       
06E3   E1                     POP   hl   
06E4   C5                     PUSH   bc   
06E5   CD CC 07               CALL   squareRoot   
06E8   ED 43 98 18            LD   (vFrac),bc   
06EC   C1                     POP   bc   
06ED   D5                     PUSH   de   
06EE   DD E9                  JP   (ix)   
06F0                ABS1:        
06F0   E1                     POP   hl   
06F1   CB 7C                  BIT   7,h   
06F3   C8                     RET   z   
06F4   AF                     XOR   a   
06F5   95                     SUB   l   
06F6   6F                     LD   l,a   
06F7   9F                     SBC   a,a   
06F8   94                     SUB   h   
06F9   67                     LD   h,a   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                MOD:         
06FD   D1                     POP   de   ; get first value
06FE   E1                     POP   hl   ; get 2nd value
06FF   C5                     PUSH   bc   ; preserve the IP
0700   44 4D                  LD   bc,hl   
0702   CD B3 07               CALL   divide   
0705   C1                     POP   bc   
0706   E5                     PUSH   hl   ; push remainder
0707   DD E9                  JP   (ix)   
0709                             ; hl = value1, de = value2
0709                             ; hl = result
0709                EQUALS:      
0709   B7                     OR   a   ; reset the carry flag
070A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
070C   28 10                  JR   z,true1   
070E   C3 24 07               JP   false1   
0711                             ; hl = value1 de = value2
0711                             ; hl = result
0711                LESSTHANEQ:      
0711   B7                     OR   a   
0712   ED 52                  SBC   hl,de   
0714   18 05                  JR   lessthan1   
0716                             ; hl = value1 de = value2
0716                             ; hl = result
0716                LESSTHAN:      
0716   B7                     OR   a   
0717   ED 52                  SBC   hl,de   
0719   28 09                  JR   z,false1   
071B                LESSTHAN1:      
071B   FA 24 07               JP   m,false1   
071E                TRUE1:       
071E   21 FF FF               LD   hl,TRUE   
0721   E5                     PUSH   hl   
0722   DD E9                  JP   (ix)   
0724                FALSE1:      
0724   21 00 00               LD   hl,FALSE   
0727   E5                     PUSH   hl   
0728   DD E9                  JP   (ix)   
072A                             ; Z80 port input
072A                             ; port -- value
072A                INPUT:       
072A   E1                     POP   hl   
072B   59                     LD   e,c   ; save IP
072C   4D                     LD   c,l   
072D   ED 68                  IN   l,(c)   
072F   26 00                  LD   h,0   
0731   4B                     LD   c,e   ; restore IP
0732   E5                     PUSH   hl   
0733   DD E9                  JP   (ix)   
0735                             ; Z80 port output
0735                             ; value port --
0735                OUTPUT:      
0735   E1                     POP   hl   
0736   59                     LD   e,c   ; save IP
0737   4D                     LD   c,l   
0738   E1                     POP   hl   
0739   ED 69                  OUT   (c),l   
073B   4B                     LD   c,e   ; restore IP
073C   DD E9                  JP   (ix)   
073E                KEY:         
073E   CD 81 00               CALL   getchar   
0741   26 00                  LD   h,0   
0743   6F                     LD   l,a   
0744   E5                     PUSH   hl   
0745   DD E9                  JP   (ix)   
0747                NEG:         
0747   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
074A   D1                     POP   de   
074B   C3 94 03               JP   sub2   ; use the SUBtract routine
074E                FILTER:      
074E                MAP:         
074E                SCAN:        
074E   DD E9                  JP   (ix)   
0750                             ; -------------------------------------------------------------------------------
0750                             ; hash C-string
0750                             ; BC = str
0750                             ; HL = hash
0750                HASHSTR:      
0750   21 00 00               LD   hl,0   
0753                HASHSTR1:      
0753   0A                     LD   a,(bc)   ; load next char
0754   03                     INC   bc   
0755   FE 00                  CP   0   ; NUL?
0757   C8                     RET   z   
0758                HASHSTR2:      
0758   16 00                  LD   d,0   
075A   5F                     LD   e,a   
075B   19                     ADD   hl,de   
075C   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
075E   29                     ADD   hl,hl   ; shift left
075F   19                     ADD   hl,de   ; add
0760   29                     ADD   hl,hl   ; shift left
0761   29                     ADD   hl,hl   ; shift left
0762   29                     ADD   hl,hl   ; shift left
0763   29                     ADD   hl,hl   ; shift left
0764   29                     ADD   hl,hl   ; shift left
0765   29                     ADD   hl,hl   ; shift left
0766   19                     ADD   hl,de   ; add
0767   18 EA                  JR   hashStr1   
0769                             ; add entry to hash slots and hash pointers
0769                             ; bc = hash (b = hi, c = lo), de = addr
0769                             ; sets carry if successful
0769                DEFINEENTRY:      
0769   CB 21                  SLA   c   ; lo = lo * 2
076B   69                     LD   l,c   ; lo1 = lo
076C   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
076E                DEFINEENTRY0:      
076E   7E                     LD   a,(hl)   ; a = (lo1)
076F   FE FF                  CP   UNUSED   ; is it unused?
0771   28 12                  JR   z,defineEntry3   ; yes, add entry
0773   79                     LD   a,c   ; a = lo
0774   BE                     CP   (hl)   ; compare (lo1) with lo
0775   20 06                  JR   nz,defineEntry1   ; no match loop around
0777   2C                     INC   l   
0778   78                     LD   a,b   ; a = hi
0779   BE                     CP   (hl)   ; compare (lo1+1) with hi
077A   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
077C   2D                     DEC   l   ; restore l
077D                DEFINEENTRY1:      
077D   2C                     INC   l   ; try next entry
077E   2C                     INC   l   
077F   79                     LD   a,c   ; compare lo and lo1
0780   BD                     CP   l   ; if equal then there's no space left, reject
0781   20 EB                  JR   nz,defineEntry0   
0783                DEFINEENTRY2:      
0783   B7                     OR   a   ; clear carry flag, failure
0784   C9                     RET      
0785                DEFINEENTRY3:      ; new entry
0785   71                     LD   (hl),c   ; (lo1) = hash lo
0786   23                     INC   hl   
0787   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0788   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
078A   72                     LD   (hl),d   
078B   2B                     DEC   hl   
078C   73                     LD   (hl),e   ; (slot + 2) = address
078D   37                     SCF      ; set carry flag, success
078E   C9                     RET      
078F                             ; looks up hash and returns address
078F                             ; bc = hash
078F                             ; returns addr in hl, sets carry if successful
078F                LOOKUPENTRY:      
078F   CB 21                  SLA   c   ; lo = lo * 2
0791   69                     LD   l,c   ; lo1 = lo
0792   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0794                LOOKUPENTRY0:      
0794   7E                     LD   a,(hl)   ; a = (hl), slot
0795   FE FF                  CP   UNUSED   ; is it unused?
0797   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0799   79                     LD   a,c   ; a = lo
079A   BE                     CP   (hl)   ; compare (lo1) with lo
079B   20 06                  JR   nz,lookupEntry1   ; no match loop around
079D   2C                     INC   l   
079E   78                     LD   a,b   ; a = hi
079F   BE                     CP   (hl)   ; compare (lo1+1) with hi
07A0   28 09                  JR   z,lookupEntry3   
07A2   2D                     DEC   l   
07A3                LOOKUPENTRY1:      
07A3   2C                     INC   l   
07A4   2C                     INC   l   
07A5   79                     LD   a,c   
07A6   BD                     CP   l   ; no space left, reject
07A7   20 EB                  JR   nz,lookupEntry0   
07A9                LOOKUPENTRY2:      
07A9   B7                     OR   a   ; clear carry flag, failure
07AA   C9                     RET      
07AB                LOOKUPENTRY3:      
07AB   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07AD   56                     LD   d,(hl)   
07AE   2D                     DEC   l   ; restore l
07AF   5E                     LD   e,(hl)   ; (slot + 2) = address
07B0   EB                     EX   de,hl   
07B1   37                     SCF      
07B2   C9                     RET      
07B3                             ; division subroutine.
07B3                             ; bc: divisor, de: dividend, hl: remainder
07B3                DIVIDE:      
07B3   21 00 00               LD   hl,0   ; zero the remainder
07B6   3E 10                  LD   a,16   ; loop counter
07B8                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07B8   CB 21                  SLA   c   
07BA   CB 10                  RL   b   
07BC   ED 6A                  ADC   hl,hl   
07BE   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07C0   38 03                  JR   c,divide2   
07C2   0C                     INC   c   
07C3   18 01                  JR   divide3   
07C5                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07C5   19                     ADD   hl,de   
07C6                DIVIDE3:      
07C6   3D                     DEC   a   
07C7   20 EF                  JR   nz,divide1   
07C9   50 59                  LD   de,bc   ; result from bc to de
07CB   C9                     RET      
07CC                             ; squareroot
07CC                             ; Input: HL = value
07CC                             ; Result: DE = square root BC = remainder
07CC                SQUAREROOT:      
07CC   01 00 08               LD   bc,0800h   
07CF   59                     LD   e,c   
07D0   AF                     XOR   a   
07D1                SQUAREROOT1:      
07D1   29                     ADD   hl,hl   
07D2   CB 11                  RL   c   
07D4   ED 6A                  ADC   hl,hl   
07D6   CB 11                  RL   c   
07D8   30 02                  JR   nc,$+4   
07DA   CB C5                  SET   0,l   
07DC   7B                     LD   a,e   
07DD   87                     ADD   a,a   
07DE   5F                     LD   e,a   
07DF   87                     ADD   a,a   
07E0   CB 45                  BIT   0,l   
07E2   20 03                  JR   nz,$+5   
07E4   91                     SUB   c   
07E5   30 05                  JR   nc,squareRoot4   
07E7   79                     LD   a,c   
07E8   93                     SUB   e   
07E9   1C                     INC   e   
07EA   93                     SUB   e   
07EB   4F                     LD   c,a   
07EC                SQUAREROOT4:      
07EC   10 E3                  DJNZ   squareRoot1   
07EE   CB 45                  BIT   0,l   
07F0   28 01                  JR   z,squareRoot5   
07F2   04                     INC   b   
07F3                SQUAREROOT5:      
07F3   16 00                  LD   d,0   
07F5   C9                     RET      
07F6                PRTDEC:      
07F6   CB 7C                  BIT   7,h   
07F8   28 0B                  JR   z,prtdec0   
07FA   3E 2D                  LD   a,"-"   
07FC   CD 85 00               CALL   putchar   
07FF   AF                     XOR   a   
0800   95                     SUB   l   
0801   6F                     LD   l,a   
0802   9F                     SBC   a,a   
0803   94                     SUB   h   
0804   67                     LD   h,a   
0805                PRTDEC0:      
0805   C5                     PUSH   bc   
0806   0E 00                  LD   c,0   ; leading zeros flag = false
0808   11 F0 D8               LD   de,-10000   
080B   CD 27 08               CALL   prtdec1   
080E   11 18 FC               LD   de,-1000   
0811   CD 27 08               CALL   prtdec1   
0814   11 9C FF               LD   de,-100   
0817   CD 27 08               CALL   prtdec1   
081A   1E F6                  LD   e,-10   
081C   CD 27 08               CALL   prtdec1   
081F   0C                     INC   c   ; flag = true for at least digit
0820   1E FF                  LD   e,-1   
0822   CD 27 08               CALL   prtdec1   
0825   C1                     POP   bc   
0826   C9                     RET      
0827                PRTDEC1:      
0827   06 2F                  LD   b,"0"-1   
0829                PRTDEC2:      
0829   04                     INC   b   
082A   19                     ADD   hl,de   
082B   38 FC                  JR   c,prtdec2   
082D   ED 52                  SBC   hl,de   
082F   3E 30                  LD   a,"0"   
0831   B8                     CP   b   
0832   20 05                  JR   nz,prtdec3   
0834   AF                     XOR   a   
0835   B1                     OR   c   
0836   C8                     RET   z   
0837   18 01                  JR   prtdec4   
0839                PRTDEC3:      
0839   0C                     INC   c   
083A                PRTDEC4:      
083A   78                     LD   a,b   
083B   C3 85 00               JP   putchar   
083E                PRTHEX:      ; display hl as a 16-bit number in hex.
083E   C5                     PUSH   bc   ; preserve the IP
083F   7C                     LD   a,h   
0840   CD 49 08               CALL   prthex2   
0843   7D                     LD   a,l   
0844   CD 49 08               CALL   prthex2   
0847   C1                     POP   bc   
0848   C9                     RET      
0849                PRTHEX2:      
0849   4F                     LD   c,a   
084A   1F                     RRA      
084B   1F                     RRA      
084C   1F                     RRA      
084D   1F                     RRA      
084E   CD 52 08               CALL   prthex3   
0851   79                     LD   a,c   
0852                PRTHEX3:      
0852   E6 0F                  AND   0x0F   
0854   C6 90                  ADD   a,0x90   
0856   27                     DAA      
0857   CE 40                  ADC   a,0x40   
0859   27                     DAA      
085A   C3 85 00               JP   putchar   
085D                PRTSTR0:      
085D   CD 85 00               CALL   putchar   
0860   23                     INC   hl   
0861                PRTSTR:      
0861   7E                     LD   a,(hl)   
0862   B7                     OR   a   
0863   20 F8                  JR   nz,prtstr0   
0865   C9                     RET      
0866                             ; **************************************************************************
0866                             ; calculate nesting value
0866                             ; a is char to be tested,
0866                             ; e is the nesting value (initially 0)
0866                             ; e is increased by ( and [
0866                             ; e is decreased by ) and ]
0866                             ; e has its bit 7 toggled by `
0866                             ; limited to 127 levels
0866                             ; **************************************************************************
0866                NESTING:      
0866   FE 22                  CP   $22   ; quote char
0868   20 0A                  JR   nz,nesting1   
086A   CB 7B                  BIT   7,e   
086C   28 03                  JR   z,nesting1a   
086E   CB BB                  RES   7,e   
0870   C9                     RET      
0871                NESTING1A:      
0871   CB FB                  SET   7,e   
0873   C9                     RET      
0874                NESTING1:      
0874   CB 7B                  BIT   7,e   
0876   C0                     RET   nz   
0877   FE 7B                  CP   "{"   
0879   28 08                  JR   z,nesting2   
087B   FE 5B                  CP   "["   
087D   28 04                  JR   z,nesting2   
087F   FE 28                  CP   "("   
0881   20 02                  JR   nz,nesting3   
0883                NESTING2:      
0883   1C                     INC   e   
0884   C9                     RET      
0885                NESTING3:      
0885   FE 7D                  CP   "}"   
0887   28 07                  JR   z,nesting4   
0889   FE 5D                  CP   "]"   
088B   28 03                  JR   z,nesting4   
088D   FE 29                  CP   ")"   
088F   C0                     RET   nz   
0890                NESTING4:      
0890   1D                     DEC   e   
0891   C9                     RET      
0892                PROMPT:      
0892   CD A2 08               CALL   printStr   
0895   0D 0A 3E 20 00         .CSTR   "\r\n> "   
089A   C9                     RET      
089B                CRLF:        
089B   CD A2 08               CALL   printStr   
089E   0D 0A 00               .CSTR   "\r\n"   
08A1   C9                     RET      
08A2                PRINTSTR:      
08A2   E3                     EX   (sp),hl   ; swap			
08A3   CD 61 08               CALL   prtstr   
08A6   23                     INC   hl   ; inc past NUL
08A7   E3                     EX   (sp),hl   ; put it back	
08A8   C9                     RET      
08A9                DEFINE:      
08A9   E1                     POP   hl   
08AA   7E                     LD   a,(hl)   
08AB   23                     INC   hl   
08AC   44 4D                  LD   bc,hl   
08AE   5F                     LD   e,a   
08AF   16 00                  LD   d,0   
08B1   19                     ADD   hl,de   
08B2   5E                     LD   e,(hl)   
08B3   23                     INC   hl   
08B4   56                     LD   d,(hl)   
08B5   23                     INC   hl   
08B6   E5                     PUSH   hl   ; bc = str
08B7   D5                     PUSH   de   
08B8   CD 50 07               CALL   hashStr   ; hl = hash
08BB   D1                     POP   de   
08BC   44 4D                  LD   bc,hl   
08BE   C3 69 07               JP   defineEntry   
08C1                INIT:        
08C1   DD 21 8A 0A            LD   ix,next   
08C5   FD 21 80 18            LD   iy,STACK   
08C9   21 80 01               LD   hl,isysVars   
08CC   11 98 18               LD   de,sysVars   
08CF   01 10 00               LD   bc,8 * 2   
08D2   ED B0                  LDIR      
08D4   3E FF                  LD   a,UNUSED   
08D6   06 00                  LD   b,0   
08D8   21 00 1B               LD   hl,hashSlots   
08DB                INIT1:       
08DB   77                     LD   (hl),a   
08DC   23                     INC   hl   
08DD   10 FC                  DJNZ   init1   
08DF   CD A9 08               CALL   define   
08E2   04 61 62 73 00         .PSTR   "abs",0   
08E7   F0 06                  DW   abs1   
08E9   CD A9 08               CALL   define   
08EC   05 61 64 64 72 00      .PSTR   "addr",0   
08F2   70 06                  DW   addr   
08F4   CD A9 08               CALL   define   
08F7   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08FE   B1 05                  DW   bytes   
0900   CD A9 08               CALL   define   
0903   05 63 61 6C 6C 00      .PSTR   "call",0   
0909   1F 0B                  DW   call   
090B                             ; call define
090B                             ; .pstr "closure",0
090B                             ; dw closure
090B   CD A9 08               CALL   define   
090E   04 64 65 66 00         .PSTR   "def",0   
0913   39 06                  DW   def   
0915   CD A9 08               CALL   define   
0918   05 65 78 65 63 00      .PSTR   "exec",0   
091E   08 0B                  DW   exec   
0920   CD A9 08               CALL   define   
0923   06 66 61 6C 73 65 00   .PSTR   "false",0   
092A   00 00                  DW   false   
092C   CD A9 08               CALL   define   
092F   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0937   4E 07                  DW   filter   
0939   CD A9 08               CALL   define   
093C   05 66 72 61 63 00      .PSTR   "frac",0   
0942   DD 06                  DW   frac   
0944   CD A9 08               CALL   define   
0947   05 66 75 6E 63 00      .PSTR   "func",0   
094D   89 0B                  DW   func   
094F                             ; call define
094F                             ; .pstr "get",0
094F                             ; dw get
094F   CD A9 08               CALL   define   
0952   05 68 61 73 68 00      .PSTR   "hash",0   
0958   2E 06                  DW   hash   
095A   CD A9 08               CALL   define   
095D   06 69 6E 70 75 74 00   .PSTR   "input",0   
0964   2A 07                  DW   input   
0966   CD A9 08               CALL   define   
0969   03 69 66 00            .PSTR   "if",0   
096D   9C 05                  DW   if   
096F   CD A9 08               CALL   define   
0972   05 69 66 74 65 00      .PSTR   "ifte",0   
0978   9E 05                  DW   ifte   
097A   CD A9 08               CALL   define   
097D   04 6B 65 79 00         .PSTR   "key",0   
0982   3E 07                  DW   key   
0984   CD A9 08               CALL   define   
0987   04 6C 65 74 00         .PSTR   "let",0   
098C   49 06                  DW   let   
098E   CD A9 08               CALL   define   
0991   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0997   AA 05                  DW   loop   
0999   CD A9 08               CALL   define   
099C   04 6D 61 70 00         .PSTR   "map",0   
09A1   4E 07                  DW   map   
09A3   CD A9 08               CALL   define   
09A6   04 6D 6F 64 00         .PSTR   "mod",0   
09AB   FD 06                  DW   mod   
09AD   CD A9 08               CALL   define   
09B0   04 6E 65 67 00         .PSTR   "neg",0   
09B5   47 07                  DW   neg   
09B7   CD A9 08               CALL   define   
09BA   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09C2   35 07                  DW   output   
09C4   CD A9 08               CALL   define   
09C7   05 73 63 61 6E 00      .PSTR   "scan",0   
09CD   01 00                  DW   scan   
09CF   CD A9 08               CALL   define   
09D2   04 73 65 74 00         .PSTR   "set",0   
09D7   8C 05                  DW   set   
09D9   CD A9 08               CALL   define   
09DC   04 73 68 6C 00         .PSTR   "shl",0   
09E1   CF 03                  DW   shl   
09E3   CD A9 08               CALL   define   
09E6   04 73 68 72 00         .PSTR   "shr",0   
09EB   DF 03                  DW   shr   
09ED   CD A9 08               CALL   define   
09F0   05 73 71 72 74 00      .PSTR   "sqrt",0   
09F6   E3 06                  DW   sqrt1   
09F8   CD A9 08               CALL   define   
09FB   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A03   A0 05                  DW   switch   
0A05   CD A9 08               CALL   define   
0A08   05 74 72 75 65 00      .PSTR   "true",0   
0A0E   FF FF                  DW   true   
0A10   CD A9 08               CALL   define   
0A13   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A1A   AC 05                  DW   words   
0A1C   C9                     RET      
0A1D                START:       
0A1D   31 80 18               LD   sp,STACK   ; start of Siena
0A20   CD C1 08               CALL   init   ; setups
0A23   CD A2 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A26   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A33                INTERPRET:      
0A33   CD 92 08               CALL   prompt   
0A36   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A39   ED 43 9C 18            LD   (vTIBPtr),bc   
0A3D                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A3D   1E 00                  LD   e,0   ; initilize nesting value
0A3F   C5                     PUSH   bc   ; save offset into TIB,
0A40                             ; bc is also the count of chars in TIB
0A40   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A43   18 06                  JR   interpret4   
0A45                INTERPRET3:      
0A45   7E                     LD   a,(hl)   ; a = char in TIB
0A46   23                     INC   hl   ; inc pointer into TIB
0A47   0B                     DEC   bc   ; dec count of chars in TIB
0A48   CD 66 08               CALL   nesting   ; update nesting value
0A4B                INTERPRET4:      
0A4B   79                     LD   a,c   ; is count zero?
0A4C   B0                     OR   b   
0A4D   20 F6                  JR   nz,interpret3   ; if not loop
0A4F   C1                     POP   bc   ; restore offset into TIB
0A50                WAITCHAR:      
0A50   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A53   FE 20                  CP   $20   ; compare to space
0A55   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A57   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A59                             ; ???? NEEDED?
0A59   28 27                  JR   z,waitchar4   
0A5B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A5D   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A5F                MACRO:       
0A5F                             ;  ld (vTIBPtr),bc
0A5F                             ;  ld hl,ctrlCodes
0A5F                             ;  add a,l			            ; look up key of macros
0A5F                             ;  ld l,a
0A5F                             ;  ld e,(hl)
0A5F                             ;  ld a,e
0A5F                             ;  or a
0A5F                             ;  jr z,macro1
0A5F                             ;  ld d,msb(macros)
0A5F                             ;  push de
0A5F                             ;  call call		            ; Siena exec_ operation and jump to it
0A5F                             ;  db DC1,0
0A5F                             ; macro1:
0A5F                             ;  ld bc,(vTIBPtr)
0A5F   18 DC                  JR   interpret2   
0A61                WAITCHAR1:      
0A61   21 00 19               LD   hl,TIB   
0A64   09                     ADD   hl,bc   
0A65   77                     LD   (hl),a   ; store the character in textbuf
0A66   03                     INC   bc   
0A67   CD 85 00               CALL   putchar   ; echo character to screen
0A6A   CD 66 08               CALL   nesting   
0A6D   18 E1                  JR   waitchar   ; wait for next character
0A6F                WAITCHAR3:      
0A6F   21 00 19               LD   hl,TIB   
0A72   09                     ADD   hl,bc   
0A73   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A75   23                     INC   hl   
0A76   36 0A                  LD   (hl),"\n"   
0A78   23                     INC   hl   
0A79   03                     INC   bc   
0A7A   03                     INC   bc   
0A7B   CD 9B 08               CALL   crlf   ; echo character to screen
0A7E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A7F   B7                     OR   a   
0A80   20 CE                  JR   nz,waitchar   
0A82                WAITCHAR4:      
0A82   ED 43 9C 18            LD   (vTIBPtr),bc   
0A86   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A89                             ; we pressed enter
0A89   0B                     DEC   bc   
0A8A                NEXT:        
0A8A   03                     INC   bc   ; Increment the IP
0A8B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A8C   FE 20                  CP   " "   ; whitespace?
0A8E   28 FA                  JR   z,next   ; space? ignore
0A90   38 07                  JR   c,next1   
0A92   6F                     LD   l,a   ; index into table
0A93   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A95   6E                     LD   l,(hl)   ; get low jump address
0A96   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A98   E9                     JP   (hl)   ; Jump to routine
0A99                NEXT1:       
0A99   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0A9B   28 07                  JR   z,escape_   
0A9D   FE 00                  CP   NUL   ; end of input string?
0A9F   28 04                  JR   z,exit_   
0AA1                             ; cp ETX                    ; return from function ?
0AA1                             ; jr z,return_
0AA1   C3 33 0A               JP   interpret   ; no, other whitespace, macros?
0AA4                ESCAPE_:      
0AA4   03                     INC   bc   ; falls through
0AA5                EXIT_:       
0AA5   50 59                  LD   de,bc   ; address of code after exit opcode
0AA7   13                     INC   de   
0AA8   D9                     EXX      
0AA9   C1                     POP   bc   ; bc = last result
0AAA   FD 54                  LD   d,iyh   ; de = BP
0AAC   FD 5D                  LD   e,iyl   
0AAE   EB                     EX   de,hl   ; hl = BP
0AAF   F9                     LD   sp,hl   ; sp = BP
0AB0   D9                     EXX      
0AB1   E1                     POP   hl   ; hl = old BP
0AB2   C1                     POP   bc   ; pop SCP (discard)
0AB3   C1                     POP   bc   ; pop array (discard)
0AB4   C1                     POP   bc   ; bc = IP
0AB5   F9                     LD   sp,hl   ; sp = old BP
0AB6   D9                     EXX      
0AB7   C5                     PUSH   bc   ; push result
0AB8   D9                     EXX      
0AB9   EB                     EX   de,hl   
0ABA   E9                     JP   (hl)   
0ABB                XEXIT:       
0ABB   D9                     EXX      
0ABC   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0ABF   FD 56 01               LD   d,(iy+1)   
0AC2   FD 4E 04               LD   c,(iy+4)   ; bc = IP
0AC5   FD 46 05               LD   b,(iy+5)   
0AC8   D9                     EXX      
0AC9   FD 54                  LD   d,iyh   ; hl = BP
0ACB   FD 5D                  LD   e,iyl   
0ACD   EB                     EX   de,hl   
0ACE   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
0AD1   FD 56 03               LD   d,(iy+3)   
0AD4   EB                     EX   de,hl   
0AD5   01 00 00               LD   bc,0   ; bc = 0 b = 0 ret args c = 0 args
0AD8   7D                     LD   a,l   
0AD9   B4                     OR   h   
0ADA   28 08                  JR   z,xexit1   
0ADC   2B                     DEC   hl   ; b = num ret args
0ADD   46                     LD   b,(hl)   
0ADE   CB 20                  SLA   b   ; b *= 2
0AE0   2B                     DEC   hl   
0AE1   4E                     LD   c,(hl)   ; c = num args
0AE2   CB 21                  SLA   c   ; c *= 2
0AE4                XEXIT1:      
0AE4   3E 03                  LD   a,3   ; a = header in words
0AE6   87                     ADD   a,a   ; a *= 2 header in bytes
0AE7   81                     ADD   a,c   ; a = offset to firstArg
0AE8   6F                     LD   l,a   ; hl = offset to firstArg
0AE9   26 00                  LD   h,0   
0AEB   19                     ADD   hl,de   ; hl = firstArg
0AEC   79                     LD   a,c   ; bc = count bytes
0AED   90                     SUB   b   
0AEE   4F                     LD   c,a   
0AEF   06 00                  LD   b,0   
0AF1   EB                     EX   de,hl   ; de = first arg
0AF2   21 00 00               LD   hl,0   
0AF5   B7                     OR   a   
0AF6   ED 42                  SBC   hl,bc   ; hl = first ret arg
0AF8   2B                     DEC   hl   ; hl = first ret arg - 1
0AF9   1B                     DEC   de   ; de = first arg - 1
0AFA   ED B8                  LDDR      
0AFC   13                     INC   de   ; sp = new sp
0AFD   EB                     EX   de,hl   
0AFE   F9                     LD   sp,hl   
0AFF   D9                     EXX      
0B00   D5                     PUSH   de   ; oldBP
0B01   C5                     PUSH   bc   ; IP
0B02   D9                     EXX      
0B03   C1                     POP   bc   
0B04   FD E1                  POP   iy   
0B06   DD E9                  JP   (ix)   
0B08                             ; return_:
0B08                             ;     jp return
0B08                             ; execute a block of code
0B08                             ; uses parent scope
0B08                EXEC:        ; execute code at pointer
0B08   E1                     POP   hl   ; hl = code*
0B09   7C                     LD   a,h   ; skip if destination address is NUL
0B0A   B5                     OR   l   
0B0B   28 10                  JR   z,exec2   
0B0D   C5                     PUSH   bc   ; push IP
0B0E   11 00 00               LD   de,0   
0B11   D5                     PUSH   de   ; push null arglist*
0B12   FD E5                  PUSH   iy   ; push BP
0B14   FD 21 00 00            LD   iy,0   ; BP = SP
0B18   FD 39                  ADD   iy,sp   
0B1A   44 4D                  LD   bc,hl   ; IP = pointer to code
0B1C   0B                     DEC   bc   ; dec to prepare for next routine
0B1D                EXEC2:       
0B1D   DD E9                  JP   (ix)   
0B1F                             ; call with args
0B1F                             ; creates a scope
0B1F                CALL:        
0B1F                DOCALL:      ; execute code at pointer
0B1F   E1                     POP   hl   ; hl = pointer to code
0B20   7C                     LD   a,h   ; skip if destination address is NUL
0B21   B5                     OR   l   
0B22   28 23                  JR   z,doCall2   
0B24   5E                     LD   e,(hl)   ; de = code*, hl = arglist*
0B25   23                     INC   hl   
0B26   56                     LD   d,(hl)   
0B27   E5                     PUSH   hl   ; hl' = block* - 1
0B28   D9                     EXX      
0B29   E1                     POP   hl   
0B2A   D9                     EXX      
0B2B   EB                     EX   de,hl   
0B2C                             ; reserve space for return args
0B2C   2B                     DEC   hl   ; a = num return args
0B2D   7E                     LD   a,(hl)   
0B2E   23                     INC   hl   ; hl = arglist*
0B2F   EB                     EX   de,hl   ; de = arglist*
0B30   87                     ADD   a,a   ; double (bytes)
0B31   ED 44                  NEG      ; a = -bytes
0B33   6F                     LD   l,a   ; hl = -bytes
0B34   07                     RLCA      
0B35   9F                     SBC   a,a   
0B36   67                     LD   h,a   
0B37   39                     ADD   hl,sp   ; sp -= bytes
0B38   F9                     LD   sp,hl   
0B39   C5                     PUSH   bc   ; push IP
0B3A   D5                     PUSH   de   ; push arglist*
0B3B   FD E5                  PUSH   iy   ; push BP
0B3D   FD 21 00 00            LD   iy,0   ; BP = SP
0B41   FD 39                  ADD   iy,sp   
0B43   D9                     EXX      
0B44   E5                     PUSH   hl   
0B45   D9                     EXX      
0B46   C1                     POP   bc   ; IP = block-1, ready for NEXT
0B47                DOCALL2:      
0B47   DD E9                  JP   (ix)   
0B49                RETURN:      
0B49   D9                     EXX      
0B4A   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B4D   FD 56 01               LD   d,(iy+1)   
0B50   FD 4E 04               LD   c,(iy+4)   ; bc = IP
0B53   FD 46 05               LD   b,(iy+5)   
0B56   D9                     EXX      
0B57   FD 54                  LD   d,iyh   ; hl = BP
0B59   FD 5D                  LD   e,iyl   
0B5B   EB                     EX   de,hl   
0B5C   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
0B5F   FD 56 03               LD   d,(iy+3)   
0B62   EB                     EX   de,hl   
0B63   3E 04                  LD   a,4   ; a = 4
0B65   2B                     DEC   hl   ; hl = ptr to numargs
0B66   2B                     DEC   hl   
0B67   86                     ADD   a,(hl)   ; a += numargs
0B68   87                     ADD   a,a   ; a *= 2
0B69   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
0B6B   B7                     OR   a   ; bc = BP - sp = count
0B6C   ED 72                  SBC   hl,sp   
0B6E   44 4D                  LD   bc,hl   
0B70   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
0B72   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
0B73   6F                     LD   l,a   
0B74   3E 00                  LD   a,0   
0B76   8C                     ADC   a,h   
0B77   67                     LD   h,a   
0B78   EB                     EX   de,hl   
0B79   1B                     DEC   de   ; de = firstArg-1
0B7A   2B                     DEC   hl   ; hl = BP-1
0B7B   ED B8                  LDDR      
0B7D   13                     INC   de   ; sp = new sp
0B7E   EB                     EX   de,hl   
0B7F   F9                     LD   sp,hl   
0B80   D9                     EXX      
0B81   D5                     PUSH   de   ; oldBP
0B82   C5                     PUSH   bc   ; IP
0B83   D9                     EXX      
0B84   C1                     POP   bc   
0B85   FD E1                  POP   iy   
0B87   DD E9                  JP   (ix)   
0B89                             ; arglist* block* -- ptr
0B89                FUNC:        
0B89   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B8C   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B8E   23                     INC   hl   
0B8F   36 1F                  LD   (hl),lsb(doCall)   
0B91   23                     INC   hl   
0B92   36 0B                  LD   (hl),msb(doCall)   
0B94   23                     INC   hl   
0B95   D1                     POP   de   ; hl = heapPtr, de = block
0B96   EB                     EX   de,hl   ; hl = heapPtr, de = arglist*, (sp) = block*
0B97   E3                     EX   (sp),hl   
0B98   EB                     EX   de,hl   
0B99   73                     LD   (hl),e   ; compile arglist*
0B9A   23                     INC   hl   
0B9B   72                     LD   (hl),d   
0B9C   23                     INC   hl   
0B9D   D1                     POP   de   ; de = block*
0B9E   C5                     PUSH   bc   ; (sp) = IP
0B9F   06 01                  LD   b,1   ; b = nesting
0BA1                FUNC1:       
0BA1   1A                     LD   a,(de)   
0BA2   13                     INC   de   
0BA3   77                     LD   (hl),a   
0BA4   23                     INC   hl   
0BA5   FE 29                  CP   ")"   
0BA7   28 29                  JR   z,func4   
0BA9   FE 7D                  CP   "}"   
0BAB   28 25                  JR   z,func4   
0BAD   FE 5D                  CP   "]"   
0BAF   28 21                  JR   z,func4   
0BB1   FE 28                  CP   "("   
0BB3   28 12                  JR   z,func2   
0BB5   FE 7B                  CP   "{"   
0BB7   28 0E                  JR   z,func2   
0BB9   FE 5B                  CP   "["   
0BBB   28 0A                  JR   z,func2   
0BBD   FE 27                  CP   "'"   
0BBF   28 09                  JR   z,func3   
0BC1   FE 60                  CP   "`"   
0BC3   28 05                  JR   z,func3   
0BC5   18 DA                  JR   func1   
0BC7                FUNC2:       
0BC7   04                     INC   b   
0BC8   18 D7                  JR   func1   
0BCA                FUNC3:       
0BCA   3E 80                  LD   a,$80   
0BCC   A8                     XOR   b   
0BCD   47                     LD   b,a   
0BCE   20 D1                  JR   nz,func1   
0BD0   18 03                  JR   func4a   
0BD2                FUNC4:       
0BD2   05                     DEC   b   
0BD3   20 CC                  JR   nz,func1   ; get the next element
0BD5                FUNC4A:      
0BD5   3E 03                  LD   a,ETX   ; compile ETX which means return from function (use ";" ?)
0BD7   77                     LD   (hl),a   
0BD8   23                     INC   hl   
0BD9   C1                     POP   bc   ; de = defstart, hl = IP
0BDA   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0BDE   D5                     PUSH   de   
0BDF   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0BE2   DD E9                  JP   (ix)   
0BE4                             ; index -- value
0BE4                             ; returns value of arg
0BE4                ARG:         
0BE4   03                     INC   bc   ; get next char
0BE5   0A                     LD   a,(bc)   
0BE6   C5                     PUSH   bc   ; save IP
0BE7   FD 5E 02               LD   e,(iy+2)   ; hl = arglist, numargs = arglist[-2]
0BEA   FD 56 03               LD   d,(iy+3)   
0BED   EB                     EX   de,hl   
0BEE   2B                     DEC   hl   
0BEF   2B                     DEC   hl   
0BF0   46                     LD   b,(hl)   ; b = numargs
0BF1   23                     INC   hl   ; hl = arglist
0BF2   23                     INC   hl   
0BF3   48                     LD   c,b   ; offset = numargs * 2
0BF4   CB 21                  SLA   c   
0BF6                ARG0:        
0BF6   BE                     CP   (hl)   
0BF7   28 0B                  JR   z,arg1   
0BF9   23                     INC   hl   
0BFA   0D                     DEC   c   ; offset ++
0BFB   10 F9                  DJNZ   arg0   
0BFD   C1                     POP   bc   ; no match, restore IP
0BFE   21 00 00               LD   hl,0   ; return 0
0C01   E5                     PUSH   hl   
0C02   DD E9                  JP   (ix)   
0C04                ARG1:        
0C04   79                     LD   a,c   ; hl = (offset + 4) * 2
0C05   C6 04                  ADD   a,4   
0C07   6F                     LD   l,a   
0C08   26 00                  LD   h,0   
0C0A   29                     ADD   hl,hl   
0C0B   C1                     POP   bc   ; restore IP
0C0C   FD 54                  LD   d,iyh   ; de = BP
0C0E   FD 5D                  LD   e,iyl   
0C10   EB                     EX   de,hl   
0C11   19                     ADD   hl,de   ; hl = BP + (offset + 4) * 2
0C12   2B                     DEC   hl   ; de = arg
0C13   22 9E 18               LD   (vPointer),hl   ; store address of arg in setter
0C16   56                     LD   d,(hl)   
0C17   2B                     DEC   hl   
0C18   5E                     LD   e,(hl)   
0C19   D5                     PUSH   de   ; push arg
0C1A   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x 20 let x 100 set x", 100
4000                             ; test "[10 20 30] 1?", 20
4000                             ; test ":x [10 20 30] let x 1? 50 set x 1?", 50
4000                             ; test "bytes [1 2 3] 1?", 2
4000                             ; test "bytes :x [1 2 3] let x 1?", 2
4000                             ; test "bytes [`A` `B` `C`] 1?", 66
4000                             ; test "() -2 ?", $0000
4000                             ; test "(a) -1 ?", $0001
4000                             ; test "(a:) -1 ?", $0001
4000                             ; test "(a:b) -1 ?", $0102
4000                             ; test "(:b) -1 ?", $0101
4000                          ;*Macro unroll:  test ":x () {1} def x", 1
4000   31 80 18               LD   SP,STACK   
4003   CD C1 08               CALL   init   
4006   CD 08 0B               CALL   exec   
4009   3A 78 20 28 29 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   ":x () {1} def x"   
4019                          ;*Macro unroll:  expect ":x () {1} def x",1
4019   E1                     POP   HL   
401A   E5                     PUSH   HL   
401B   11 01 00               LD   DE,1   
401E   B7                     OR   A   
401F   ED 52                  SBC   HL,DE   
4021   7D                     LD   A,L   
4022   B4                     OR   H   
4023   28 5A                  JR   Z,expectM_0_2518S43   
4025   CD A2 08               CALL   printStr   
4028   43 6F 64 65 3A 20 3A 78 20 28 29 20 7B 31 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x () {1} def x"   
403E   CD A2 08               CALL   printStr   
4041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4050   21 01 00               LD   HL,1   
4053   CD F6 07               CALL   prtdec   
4056   CD A2 08               CALL   printStr   
4059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4066   E1                     POP   hl   
4067   E5                     PUSH   hl   
4068   CD F6 07               CALL   prtdec   
406B   E1                     POP   hl   
406C   CD A2 08               CALL   printStr   
406F   20 28 23 00            .CSTR   " (#"   
4073   CD 3E 08               CALL   prthex   
4076   CD A2 08               CALL   printStr   
4079   29 0D 0A 00            .CSTR   ")\r\n"   
407D   76                     HALT      
407E   00                     .CSTR      
407F                EXPECTM_0_2518S43:      
407F   E1                     POP   HL   
4080                             ; test ":x (a:b) {$a 1 + $b set} def x", 1
4080                             ; test "1", 1
4080                             ; test "2", 2
4080                             ; test "1", 1
4080                             ; test "0", 0
4080                             ; test "10", 10
4080                             ; test "123", 123
4080                             ; test "-1",-1
4080                             ; test "``", 0
4080                             ; test "`a`", $61
4080                             ; test "`\\``", $60
4080                             ; test "#10", $10
4080                             ; test "#FF", $FF
4080                             ; test "-1 2 +",1
4080                             ; test "-1 1 +",0
4080                             ; test "1 2 +", 3
4080                             ; test "4 1 2 +", 3
4080                             ; test "1 2 +", 3
4080                             ; test "123 456 +", 123+456
4080                             ; test "64 128 +", 64+128
4080                             ; test "-1 -1 -",0
4080                             ; test "5 3 -", 2
4080                             ; test "3 5 &", 1
4080                             ; test "3 5 |", 7
4080                             ; test "2 3 *", 6
4080                             ; test "1 2 3 + *", 5
4080                             ; test "7 3 /", 2
4080                             ; test "7 3 / frac", 1
4080                             ; test "10 sqrt", 3
4080                             ; test "10 sqrt frac", 1
4080                             ; test "2 3 =", FALSE
4080                             ; test "3 3 =", TRUE
4080                             ; test "1 2 <", TRUE
4080                             ; test "2 1 <", FALSE
4080                             ; test "2 3 <", TRUE
4080                             ; test "3 3 <", FALSE
4080                             ; test "1 2 >", FALSE
4080                             ; test "2 1 >", TRUE
4080                             ; test "3 3 >", FALSE
4080                             ; test "4 3 >", TRUE
4080                             ; test "2 2 <=", TRUE
4080                             ; test "2 2 >=", TRUE
4080                             ; 
4080                             ; 
4080                             ; test ":x 1000 let x 10 set x", 10
4080                             ; test ":x [100] { @1 } closure x", 100
4080                             ; test ":x [100 200] { @2 } closure x", 200
4080                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4080                             ; test ":x 'a' {$a} def 2 x", 2
4080                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4080                             ; test ":x '' { 3 2 } def x + ", 5
4080                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4080                             ; test "0 [{1}] switch", 1
4080                             ; test "1 [{1} {2} {3}] switch", 2
4080                             ; test "9 [{1} {5}] switch", 5
4080                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4080                             ; test "bytes 'ABC' get", $41
4080                             ; test "bytes [1 2 3] get", 1
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":x 1 const ; x", 1
4080                             ; test ":x 'A' const x get", $41
4080                             ; test ":x [1] const x get", 1
4080                             ; test ":x [1 2 3] const x 2?", 3
4080                             ; test "2 (1 2 +) *", 6
4080                             ; test ":xyz 123 const ; xyz", 123
4080                             ; test ":xyz 123 let ; xyz get", 123
4080                             ; test "1 2 {$1 $2 +} call", 3
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4080                             ; test ":xyz {1} def :xyz addr call", 1
4080                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4080                             ; test ":xyz {10} def :xyz addr exec", 10
4080                             ; test ":xyz {10} def :xyz addr call", 10
4080                             ; test "'hello' hash", $7f54
4080                             ; test ":hello", $7f54
4080                             ; test "{{{1} exec} exec} exec", 1
4080                             ; test "5 {{{$1} exec} exec} call", 5
4080                             ; test "5 {$1} call", 5
4080                             ; test "5 {{$1} exec} call", 5
4080                             ; test "2 1 {{$1} call} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 1 {$1} call", 2
4080                             ; test "2 1 {$2} call", 1
4080                             ; test "2 4 {$2} call", 4
4080                             ; test "{{1} call} call", 1
4080                             ; test "5 {-1 {$1} if} call", 5
4080                             ; test "0 {} loop", 0
4080                             ; test "1 {1-} loop", $1a00
4080                             ; test ":h {1} def :h addr call", 1
4080                             ; ; call enter
4080                             ; ;     .cstr "1 3",$22,"+"
4080                             ; ; expect "1 3 DUP +", 6
4080   CD A2 08               CALL   printStr   
4083   44 6F 6E 65 21 00      .CSTR   "Done!"   
4089   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               074E DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 2033 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
ARGLIST_:           030F DEFINED AT LINE 229 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 232 IN Siena.asm
DOT1:               031E DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 251 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 260 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 263 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 265 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 267 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 269 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 271 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 273 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 275 IN Siena.asm
AND_:               0354 DEFINED AT LINE 277 IN Siena.asm
AND1:               035B DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
OR_:                035F DEFINED AT LINE 290 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 300 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 302 IN Siena.asm
                    > USED AT LINE 313 IN Siena.asm
INV_:               0371 DEFINED AT LINE 311 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 315 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 322 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 327 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 330 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
NOT_:               039A DEFINED AT LINE 347 IN Siena.asm
EQ_:                039F DEFINED AT LINE 351 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 357 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 362 IN Siena.asm
LT1:                03AA DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 373 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 384 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 392 IN Siena.asm
SHL:                03CF DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHR:                03DF DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 426 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
NUM:                040E DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
NUM3:               043B DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
STRING:             045B DEFINED AT LINE 520 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
ARGLIST:            047F DEFINED AT LINE 553 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
ARGLIST1:           0489 DEFINED AT LINE 560 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
ARGLIST2:           0495 DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
ARGLIST3:           049D DEFINED AT LINE 576 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
ARGLIST4:           04A0 DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
ARGLIST5:           04A5 DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 606 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 613 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 617 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 642 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 645 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 654 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
BLOCKEND1:          052C DEFINED AT LINE 681 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
BLOCKEND2:          0546 DEFINED AT LINE 701 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
PROP:               0550 DEFINED AT LINE 713 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              056A DEFINED AT LINE 732 IN Siena.asm
DOLET2:             056E DEFINED AT LINE 735 IN Siena.asm
DOLET3:             0571 DEFINED AT LINE 739 IN Siena.asm
INDEX:              0574 DEFINED AT LINE 743 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
INDEX1:             057D DEFINED AT LINE 750 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
INDEX2:             0589 DEFINED AT LINE 759 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
SET:                058C DEFINED AT LINE 764 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
SET1:               059A DEFINED AT LINE 774 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
IF:                 059C DEFINED AT LINE 779 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
IFTE:               059E DEFINED AT LINE 786 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
SWITCH:             05A0 DEFINED AT LINE 816 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
LOOP:               05AA DEFINED AT LINE 829 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
WORDS:              05AC DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
BYTES:              05B1 DEFINED AT LINE 882 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
BYTES1:             05B4 DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
ARRAY:              05B9 DEFINED AT LINE 888 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
ARRAYEND:           05CF DEFINED AT LINE 900 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND1:          05F0 DEFINED AT LINE 923 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
ARRAYEND2:          0600 DEFINED AT LINE 935 IN Siena.asm
                    > USED AT LINE 921 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
ARRAYEND3:          0613 DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 933 IN Siena.asm
HASH:               062E DEFINED AT LINE 971 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
DEF:                0639 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
DEF1:               0640 DEFINED AT LINE 984 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
LET:                0649 DEFINED AT LINE 991 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
LET1:               0665 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
LET2:               066D DEFINED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1014 IN Siena.asm
ADDR:               0670 DEFINED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
ADDR1:              067C DEFINED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
SYMBOL:             0687 DEFINED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
SYMBOL0:            068F DEFINED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
SYMBOL1:            0691 DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1044 IN Siena.asm
SYMBOL2:            06A1 DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
IDENT:              06AF DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
IDENT0:             06B6 DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
IDENT1:             06B8 DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
IDENT2:             06C8 DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
IDENT3:             06DC DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
FRAC:               06DD DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
SQRT1:              06E3 DEFINED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
ABS1:               06F0 DEFINED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
MOD:                06FD DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
EQUALS:             0709 DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
LESSTHANEQ:         0711 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
LESSTHAN:           0716 DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN1:          071B DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
TRUE1:              071E DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1147 IN Siena.asm
FALSE1:             0724 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
INPUT:              072A DEFINED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
OUTPUT:             0735 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
KEY:                073E DEFINED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
NEG:                0747 DEFINED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
FILTER:             074E DEFINED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
MAP:                074E DEFINED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
HASHSTR:            0750 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
HASHSTR1:           0753 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
HASHSTR2:           0758 DEFINED AT LINE 1231 IN Siena.asm
DEFINEENTRY:        0769 DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
DEFINEENTRY0:       076E DEFINED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
DEFINEENTRY1:       077D DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
DEFINEENTRY2:       0783 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
DEFINEENTRY3:       0785 DEFINED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1257 IN Siena.asm
LOOKUPENTRY:        078F DEFINED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
LOOKUPENTRY0:       0794 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
LOOKUPENTRY1:       07A3 DEFINED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
LOOKUPENTRY2:       07A9 DEFINED AT LINE 1311 IN Siena.asm
LOOKUPENTRY3:       07AB DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
DIVIDE:             07B3 DEFINED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
DIVIDE1:            07B8 DEFINED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
DIVIDE2:            07C5 DEFINED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
DIVIDE3:            07C6 DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
SQUAREROOT:         07CC DEFINED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
SQUAREROOT1:        07D1 DEFINED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
SQUAREROOT4:        07EC DEFINED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
SQUAREROOT5:        07F3 DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1376 IN Siena.asm
PRTDEC:             07F6 DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0805 DEFINED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
PRTDEC1:            0827 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
PRTDEC2:            0829 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
PRTDEC3:            0839 DEFINED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
PRTDEC4:            083A DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
PRTHEX:             083E DEFINED AT LINE 1429 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0849 DEFINED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
PRTHEX3:            0852 DEFINED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
PRTSTR0:            085D DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
PRTSTR:             0861 DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
NESTING:            0866 DEFINED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
NESTING1A:          0871 DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
NESTING1:           0874 DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
NESTING2:           0883 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
NESTING3:           0885 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
NESTING4:           0890 DEFINED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
PROMPT:             0892 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
CRLF:               089B DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
PRINTSTR:           08A2 DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 151
DEFINE:             08A9 DEFINED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
INIT:               08C1 DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08DB DEFINED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
START:              0A1D DEFINED AT LINE 1683 IN Siena.asm
INTERPRET:          0A33 DEFINED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
INTERPRET2:         0A3D DEFINED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
INTERPRET3:         0A45 DEFINED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
INTERPRET4:         0A4B DEFINED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
WAITCHAR:           0A50 DEFINED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
MACRO:              0A5F DEFINED AT LINE 1724 IN Siena.asm
WAITCHAR1:          0A61 DEFINED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
WAITCHAR3:          0A6F DEFINED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
WAITCHAR4:          0A82 DEFINED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
NEXT:               0A8A DEFINED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
NEXT1:              0A99 DEFINED AT LINE 1781 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
ESCAPE_:            0AA4 DEFINED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
EXIT_:              0AA5 DEFINED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
XEXIT:              0ABB DEFINED AT LINE 1814 IN Siena.asm
XEXIT1:             0AE4 DEFINED AT LINE 1837 IN Siena.asm
                    > USED AT LINE 1830 IN Siena.asm
EXEC:               0B08 DEFINED AT LINE 1873 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0B1D DEFINED AT LINE 1886 IN Siena.asm
                    > USED AT LINE 1877 IN Siena.asm
CALL:               0B1F DEFINED AT LINE 1891 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
DOCALL:             0B1F DEFINED AT LINE 1892 IN Siena.asm
DOCALL2:            0B47 DEFINED AT LINE 1927 IN Siena.asm
                    > USED AT LINE 1896 IN Siena.asm
RETURN:             0B49 DEFINED AT LINE 1930 IN Siena.asm
FUNC:               0B89 DEFINED AT LINE 1974 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
FUNC1:              0BA1 DEFINED AT LINE 1995 IN Siena.asm
                    > USED AT LINE 2019 IN Siena.asm
                    > USED AT LINE 2022 IN Siena.asm
                    > USED AT LINE 2027 IN Siena.asm
                    > USED AT LINE 2031 IN Siena.asm
FUNC2:              0BC7 DEFINED AT LINE 2020 IN Siena.asm
                    > USED AT LINE 2009 IN Siena.asm
                    > USED AT LINE 2011 IN Siena.asm
                    > USED AT LINE 2013 IN Siena.asm
FUNC3:              0BCA DEFINED AT LINE 2023 IN Siena.asm
                    > USED AT LINE 2016 IN Siena.asm
                    > USED AT LINE 2018 IN Siena.asm
FUNC4:              0BD2 DEFINED AT LINE 2029 IN Siena.asm
                    > USED AT LINE 2002 IN Siena.asm
                    > USED AT LINE 2004 IN Siena.asm
                    > USED AT LINE 2006 IN Siena.asm
FUNC4A:             0BD5 DEFINED AT LINE 2032 IN Siena.asm
                    > USED AT LINE 2028 IN Siena.asm
ARG:                0BE4 DEFINED AT LINE 2044 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
ARG0:               0BF6 DEFINED AT LINE 2058 IN Siena.asm
                    > USED AT LINE 2063 IN Siena.asm
ARG1:               0C04 DEFINED AT LINE 2068 IN Siena.asm
                    > USED AT LINE 2060 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1545 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 746 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 724 IN Siena.asm
                    > USED AT LINE 734 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 2080 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1975 IN Siena.asm
                    > USED AT LINE 2037 IN Siena.asm
                    > USED AT LINE 2039 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1551 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2518S43:  407F DEFINED AT LINE 34
                    > USED AT LINE 10
