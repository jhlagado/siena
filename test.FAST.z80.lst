0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD AC 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                             ; ETX         EQU     3
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; IP                             -- saved interpreter ptr
00CC                             ; arglist*                          -- arg list ptr
00CC                             ; ScopeBP                               -- scope base ptr           --> arg0
00CC                             ; BP                             -- saved base ptr           <-- iy
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   75 0A                  DW   next   ; g nNext
018E   00 1D                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available " % , ; DEL
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arglist_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 56 0B               JP   arg   
0309                PROP_:       
0309   C3 36 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARGLIST_:      
030F   C3 7F 04               JP   arglist   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 25 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 48 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD DD 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 42 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 96 05               JP   array   
034B                ARRAYEND_:      
034B   C3 B2 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 92 06               JP   ident   
0351                SYMBOL_:      
0351   C3 6A 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 25 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 EC 06               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA F4 06               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 F9 06               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD 9A 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ; arglist - parses input (ab:c)
047F                             ; names after the : represent uninitialised locals
047F                             ; return values are the state of the stack after the block ends
047F                ARGLIST:      
047F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arglist
0488   03                     INC   bc   ; point to next char
0489                ARGLIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arglist terminator
048C   28 12                  JR   z,arglist4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arglist2   
0492   14                     INC   d   ; non zero value local count acts as flag
0493   20 08                  JR   nz,arglist3   
0495                ARGLIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arglist3   
049C   14                     INC   d   ; if d > 0 increase local count
049D                ARGLIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arglist1   
04A0                ARGLIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arglist
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050D   FD 46 07               LD   b,(iy+7)   
0510   D9                     EXX      
0511   FD 5E 00               LD   e,(iy+0)   ; hl = oldBP
0514   FD 56 01               LD   d,(iy+1)   
0517   EB                     EX   de,hl   
0518   FD 54                  LD   d,iyh   ; de = oldBP, hl = BP
051A   FD 5D                  LD   e,iyl   
051C   EB                     EX   de,hl   
051D   E5                     PUSH   hl   ; save BP
051E   2B                     DEC   hl   ; hl += 2 to compensate for pushing BP
051F   2B                     DEC   hl   
0520   B7                     OR   a   ; bc = BP - SP = count
0521   ED 72                  SBC   hl,sp   
0523   44 4D                  LD   bc,hl   
0525   E1                     POP   hl   ; hl = BP
0526   1B                     DEC   de   ; de = args*-1
0527   2B                     DEC   hl   ; hl = BP-1
0528   ED B8                  LDDR      
052A   13                     INC   de   ; hl = new tos
052B   EB                     EX   de,hl   
052C   F9                     LD   sp,hl   ; sp = new tos
052D   D9                     EXX      ; bc = IP, iy = oldBP
052E   D5                     PUSH   de   
052F   C5                     PUSH   bc   
0530   D9                     EXX      
0531   C1                     POP   bc   
0532   FD E1                  POP   iy   
0534   DD E9                  JP   (ix)   
0536                             ; blockend:
0536                             ;     exx
0536                             ;     ld e,(iy+0)                 ; de = oldBP
0536                             ;     ld d,(iy+1)
0536                             ;     ld c,(iy+6)                 ; bc = IP
0536                             ;     ld b,(iy+7)
0536                             ;     exx
0536                             ;     ld d,iyh                    ; hl = BP
0536                             ;     ld e,iyl
0536                             ;     ex de,hl
0536                             ;     ld e,(iy+4)                 ; de = BP, hl = arglist*
0536                             ;     ld d,(iy+5)
0536                             ;     ex de,hl
0536                             ;     ld bc,0                     ; bc = 0, b = num locals = 0, c = num args = 0
0536                             ;     ld a,l                      ; arglist* == null skip
0536                             ;     or h
0536                             ;     jr z,blockend2
0536                             ;     dec hl                      ; b = (num locals) * 2
0536                             ;     ld b,(hl)
0536                             ;     sla b
0536                             ;     dec hl
0536                             ;     ld c,(hl)                   ; c = (num args) * 2
0536                             ;     sla c
0536                             ; blockend2:
0536                             ;     ld a,8                      ; a = header size in bytes
0536                             ;     add a,c                     ; a = offset to args*
0536                             ;     ld l,a                      ; de = bp, hl = offset to args*
0536                             ;     ld h,0
0536                             ;     add hl,de                   ; de = args*, hl = bp,
0536                             ;     ex de,hl
0536                             ;     push hl                     ; save bp
0536                             ;     or a                        ; bc = count
0536                             ;     sbc hl,sp
0536                             ;     ld bc,hl
0536                             ;     dec bc                      ; bc -= 2 remove space used to save BP
0536                             ;     dec bc
0536                             ;     pop hl                      ; hl = bp
0536                             ;     dec de                      ; de = args*-1
0536                             ;     dec hl                      ; hl = BP-1
0536                             ;     lddr
0536                             ;     inc de                      ; hl = new tos
0536                             ;     ex de,hl
0536                             ;     ld sp,hl                    ; sp = new tos
0536                             ;     exx                         ; bc = IP, iy = oldBP
0536                             ;     push de
0536                             ;     push bc
0536                             ;     exx
0536                             ;     pop bc
0536                             ;     pop iy
0536                             ;     jp (ix)
0536                             ; @1..9
0536                             ; returns address of prop
0536                PROP:        
0536                             ; inc bc                      ; get next char
0536                             ; ld a,(bc)
0536                             ; sub "1"                     ; treat as a digit, 1 based index
0536                             ; and $0F                     ; mask
0536                             ; add a,a                     ; double
0536                             ; ld l,a                      ; hl = offset into args
0536                             ; ld h,0
0536                             ; ld e,(iy+6)                 ; de = closure array
0536                             ; ld d,(iy+7)
0536                             ; add hl,de                   ; find address of prop in array
0536                             ; ld (vPointer),hl             ; store address in setter
0536                             ; ld e,(hl)
0536                             ; inc hl
0536                             ; ld d,(hl)
0536                             ; push de                     ; push prop value
0536   DD E9                  JP   (ix)   
0538                             ; addr -- value
0538                DOLET:       
0538   E1                     POP   hl   
0539   22 9E 18               LD   (vPointer),hl   ; store address in setter
053C                DOLET2:      
053C   5E                     LD   e,(hl)   
053D   23                     INC   hl   
053E   56                     LD   d,(hl)   
053F                DOLET3:      
053F   D5                     PUSH   de   
0540   DD E9                  JP   (ix)   
0542                INDEX:       
0542   E1                     POP   hl   ; hl = index
0543   D1                     POP   de   ; de = addr
0544   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0547   3D                     DEC   a   
0548   28 01                  JR   z,index1   
054A   29                     ADD   hl,hl   ; if data width = 2 then double
054B                INDEX1:      
054B   19                     ADD   hl,de   ; add addr
054C   22 9E 18               LD   (vPointer),hl   ; store address in setter
054F   16 00                  LD   d,0   
0551   5E                     LD   e,(hl)   
0552   B7                     OR   a   ; check data width again
0553   28 02                  JR   z,index2   
0555   23                     INC   hl   
0556   56                     LD   d,(hl)   
0557                INDEX2:      
0557   D5                     PUSH   de   
0558   DD E9                  JP   (ix)   
055A                             ; newvalue --
055A                SET:         
055A   E1                     POP   hl   ; discard last accessed value
055B   D1                     POP   de   ; new value
055C   2A 9E 18               LD   hl,(vPointer)   
055F   73                     LD   (hl),e   
0560   3A 9A 18               LD   a,(vDataWidth)   
0563   3D                     DEC   a   
0564   28 02                  JR   z,set1   
0566   23                     INC   hl   
0567   72                     LD   (hl),d   
0568                SET1:        
0568   DD E9                  JP   (ix)   
056A                             ; if
056A                             ; condition then -- value
056A                IF:          
056A   11 00 00               LD   de,0   ; NUL pointer for else
056D   18 01                  JR   ifte1   
056F                             ; ifte
056F                             ; condition then else -- value
056F                IFTE:        
056F   D1                     POP   de   ; de = else
0570                IFTE1:       
0570   E1                     POP   hl   ; hl = then
0571   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0572   23                     INC   hl   ; check for true
0573   7C                     LD   a,h   
0574   B5                     OR   l   
0575   E1                     POP   hl   ; hl = then
0576   28 01                  JR   z,ifte2   
0578   EB                     EX   de,hl   ; condition = false, hl = else
0579                IFTE2:       
0579   E5                     PUSH   hl   
057A   C3 AB 0A               JP   exec   
057D                             ;     ld a,h                      ; check if hl is NUL
057D                             ;     or l
057D                             ;     jr z,ifte3
057D                             ;     push bc                     ; push IP
057D                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
057D                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
057D                             ;     push de                     ; push ScopeBP
057D                             ;     push iy                     ; push BP
057D                             ;     ld iy,0                     ; iy = sp
057D                             ;     add iy,sp
057D                             ;     ld bc,hl                    ; IP = then
057D                             ;     dec bc
057D                             ; ifte3:
057D                             ;     jp (ix)
057D                             ; switch
057D                             ; index array -- value
057D                SWITCH:      
057D   D1                     POP   de   ; de = array
057E   E1                     POP   hl   ; hl = index
057F   29                     ADD   hl,hl   ; indec *= 2
0580   19                     ADD   hl,de   ; add array[0]
0581   4E                     LD   c,(hl)   ; bc = case
0582   23                     INC   hl   
0583   46                     LD   b,(hl)   
0584   0B                     DEC   bc   
0585   DD E9                  JP   (ix)   
0587                             ; c b --
0587                             ; loops until c = 0
0587                LOOP:        
0587   DD E9                  JP   (ix)   
0589                             ;     pop de                      ; de = block                    c
0589                             ;     pop hl                      ; hl = condition
0589                             ;     push de
0589                             ;     push bc                     ; push IP
0589                             ;     ld bc,de                    ; bc = block
0589                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
0589                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0589                             ;     push de                     ; push ScopeBP
0589                             ;     push iy                     ; push BP
0589                             ;     ld iy,0                     ; iy = sp
0589                             ;     add iy,sp
0589                             ; loop1:
0589                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0589                             ;     or h
0589                             ;     jr z,loop3
0589                             ;     ld de,loop2-1               ; IP return address
0589                             ;     push de
0589                             ;     ld e,(iy+2)                 ; push parent ScopeBP
0589                             ;     ld d,(iy+3)
0589                             ;     push de                     ;
0589                             ;     push iy                     ; push BP
0589                             ;     ld iy,0                     ; iy = sp
0589                             ;     add iy,sp
0589                             ;     push hl                     ; push condition
0589                             ;     dec bc
0589                             ;     jp (ix)
0589                             ; loop2:
0589                             ;     db ESC                      ; escape from interpreter
0589                             ;     ld c,(iy+6)                 ; bc = block
0589                             ;     ld b,(iy+7)
0589                             ;     pop hl                      ; hl = condition
0589                             ;     jr loop1
0589                             ; loop3:
0589                             ;     ld d,iyh                    ; de = BP
0589                             ;     ld e,iyl
0589                             ;     ex de,hl                    ; hl = BP, de = result
0589                             ;     ld sp,hl                    ; sp = BP
0589                             ;     pop hl                      ; hl = old BP
0589                             ;     pop bc                      ; pop ScopeBP (discard)
0589                             ;     pop bc                      ; bc = IP
0589                             ;     ld sp,hl                    ; sp = old BP
0589                             ;     ld iy,0                     ; iy = sp
0589                             ;     add iy,sp
0589                             ;     ld ix,(vNext)                  ; needed?
0589                             ;     jp (ix)
0589                WORDS:       
0589   21 02 00               LD   hl,2   
058C   18 03                  JR   bytes1   
058E                BYTES:       
058E   21 01 00               LD   hl,1   
0591                BYTES1:      
0591   22 9A 18               LD   (vDataWidth),hl   
0594   DD E9                  JP   (ix)   
0596                ARRAY:       
0596   11 00 00               LD   de,0   ; create stack frame
0599   D5                     PUSH   de   ; push null for IP
059A   FD 5E 04               LD   e,(iy+4)   ; push arglist* from parent stack frame
059D   FD 56 05               LD   d,(iy+5)   ; 
05A0   D5                     PUSH   de   ; 
05A1   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05A4   FD 56 03               LD   d,(iy+3)   ; 
05A7   D5                     PUSH   de   ; 
05A8   FD E5                  PUSH   iy   ; push BP
05AA   FD 21 00 00            LD   iy,0   ; BP = SP
05AE   FD 39                  ADD   iy,sp   
05B0   DD E9                  JP   (ix)   
05B2                ARRAYEND:      
05B2   FD 54                  LD   d,iyh   ; de = BP
05B4   FD 5D                  LD   e,iyl   
05B6   C5                     PUSH   bc   ; save IP
05B7   D9                     EXX      
05B8   C1                     POP   bc   
05B9   D9                     EXX      
05BA   62 6B                  LD   hl,de   ; hl = de = BP
05BC   B7                     OR   a   
05BD   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05BF   CB 3C                  SRL   h   ; 
05C1   CB 1D                  RR   l   
05C3   44 4D                  LD   bc,hl   ; bc = count
05C5   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05C8   71                     LD   (hl),c   ; write num items in length word
05C9   23                     INC   hl   
05CA   70                     LD   (hl),b   
05CB   23                     INC   hl   ; hl = array[0], bc = count
05CC                             ; de = BP, hl = array[0], bc = count
05CC   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05CF   FE 01                  CP   1   
05D1   20 10                  JR   nz,arrayEnd2   
05D3                ARRAYEND1:      ; byte
05D3   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05D6   77                     LD   (hl),a   ; write a to array item
05D7   23                     INC   hl   ; move to next byte in array
05D8   FD 2B                  DEC   iy   ; move tho next word on stack
05DA   FD 2B                  DEC   iy   
05DC   0B                     DEC   bc   ; dec items count
05DD   79                     LD   a,c   ; if not zero loop
05DE   B0                     OR   b   
05DF   20 F2                  JR   nz,arrayEnd1   
05E1   18 13                  JR   arrayEnd3   
05E3                ARRAYEND2:      ; word
05E3   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05E6   77                     LD   (hl),a   ; write lsb of array item
05E7   23                     INC   hl   ; move to msb of array item
05E8   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
05EB   77                     LD   (hl),a   ; write msb of array item
05EC   23                     INC   hl   ; move to next word in array
05ED   FD 2B                  DEC   iy   ; move to next word on stack
05EF   FD 2B                  DEC   iy   
05F1   0B                     DEC   bc   ; dec items count
05F2   79                     LD   a,c   ; if not zero loop
05F3   B0                     OR   b   
05F4   20 ED                  JR   nz,arrayEnd2   
05F6                ARRAYEND3:      
05F6   EB                     EX   de,hl   ; de = end of array, hl = BP
05F7   F9                     LD   sp,hl   ; sp = BP
05F8   E1                     POP   hl   ; de = end of array, hl = old BP
05F9   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
05FA   FD 62                  LD   iyh,d   
05FC   FD 6B                  LD   iyl,e   
05FE   D1                     POP   de   ; pop arglist (discard)
05FF   D1                     POP   de   ; pop ScopeBP (discard)
0600   D1                     POP   de   ; pop IP (discard)
0601   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0605   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0608   D9                     EXX      ; restore IP
0609   C5                     PUSH   bc   
060A   D9                     EXX      
060B   C1                     POP   bc   
060C   13                     INC   de   ; de = array[0]
060D   13                     INC   de   
060E   D5                     PUSH   de   ; return array[0]
060F   DD E9                  JP   (ix)   
0611                             ; str -- num
0611                HASH:        
0611   E1                     POP   hl   
0612   C5                     PUSH   bc   
0613   44 4D                  LD   bc,hl   
0615   CD 33 07               CALL   hashStr   
0618   C1                     POP   bc   
0619   E5                     PUSH   hl   
061A   DD E9                  JP   (ix)   
061C                             ; symbol func --
061C                DEF:         
061C   DD 21 23 06            LD   ix,def1   
0620   C3 FE 0A               JP   func   
0623                DEF1:        
0623   DD 2A A4 18            LD   ix,(vNext)   
0627   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0628   60 69                  LD   hl,bc   
062A   18 1C                  JR   let1   
062C                             ; symbol value --
062C                LET:         
062C   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
062E   E3                     EX   (sp),hl   
062F   EB                     EX   de,hl   
0630   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0633   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0635   23                     INC   hl   
0636   36 38                  LD   (hl),lsb(dolet)   
0638   23                     INC   hl   
0639   36 05                  LD   (hl),msb(dolet)   
063B   23                     INC   hl   
063C   73                     LD   (hl),e   
063D   23                     INC   hl   
063E   72                     LD   (hl),d   
063F   2B                     DEC   hl   
0640   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0644   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0647   E1                     POP   hl   ; de = addr, hl = IP
0648                LET1:        
0648   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0649   44 4D                  LD   bc,hl   ; bc = symbol
064B   CD 50 07               CALL   defineEntry   
064E   38 00                  JR   c,let2   
0650                             ; call error
0650                             ; .cstr "Let Collision"
0650                LET2:        
0650   C1                     POP   bc   
0651   DD E9                  JP   (ix)   
0653                             ; symbol -- ptr
0653                ADDR:        
0653   E1                     POP   hl   ; hl = hash
0654   C5                     PUSH   bc   
0655   44 4D                  LD   bc,hl   
0657   CD 76 07               CALL   lookupEntry   
065A   38 03                  JR   c,addr1   
065C   21 00 00               LD   hl,0   
065F                             ; call printStr		
065F                             ; .cstr "Undefined"
065F                             ; jp interpret
065F                ADDR1:       
065F   C1                     POP   bc   
0660   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0663   19                     ADD   hl,de   
0664   22 9E 18               LD   (vPointer),hl   
0667   E5                     PUSH   hl   
0668   DD E9                  JP   (ix)   
066A                SYMBOL:      
066A   03                     INC   bc   
066B   11 00 1A               LD   de,PAD   
066E   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0670   18 02                  JR   symbol1   
0672                SYMBOL0:      ; copy to PAD area
0672   03                     INC   bc   ; characters that are part of the identifier
0673   13                     INC   de   
0674                SYMBOL1:      ; 0-9 A-Z a-z _
0674   0A                     LD   a,(bc)   
0675   12                     LD   (de),a   
0676   FE 21                  CP   " "+1   
0678   38 0A                  JR   c,symbol2   
067A   6F                     LD   l,a   
067B   7E                     LD   a,(hl)   
067C   FE 4E                  CP   lsb(ident_)   
067E   28 F2                  JR   z,symbol0   
0680   FE 00                  CP   lsb(num_)   
0682   28 EE                  JR   z,symbol0   
0684                SYMBOL2:      
0684   0B                     DEC   bc   
0685   AF                     XOR   a   
0686   12                     LD   (de),a   ; terminate string with NUL
0687   C5                     PUSH   bc   
0688   01 00 1A               LD   bc,PAD   
068B   CD 33 07               CALL   hashStr   ; hl = hash
068E   C1                     POP   bc   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                IDENT:       
0692   11 00 1A               LD   de,PAD   
0695   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0697   18 02                  JR   ident1   
0699                IDENT0:      ; copy to PAD area
0699   03                     INC   bc   ; characters that are part of the identifier
069A   13                     INC   de   
069B                IDENT1:      ; 0-9 A-Z a-z _
069B   0A                     LD   a,(bc)   
069C   12                     LD   (de),a   
069D                             ; or a
069D                             ; jr z,ident2
069D   FE 21                  CP   " "+1   
069F   38 0A                  JR   c,ident2   
06A1   6F                     LD   l,a   
06A2   7E                     LD   a,(hl)   
06A3   FE 4E                  CP   lsb(ident_)   
06A5   28 F2                  JR   z,ident0   
06A7   FE 00                  CP   lsb(num_)   
06A9   28 EE                  JR   z,ident0   
06AB                IDENT2:      
06AB   0B                     DEC   bc   
06AC   AF                     XOR   a   
06AD   12                     LD   (de),a   ; terminate string with NUL
06AE   C5                     PUSH   bc   
06AF   01 00 1A               LD   bc,PAD   
06B2   CD 33 07               CALL   hashStr   ; hl = hash
06B5   44 4D                  LD   bc,hl   
06B7   CD 76 07               CALL   lookupEntry   
06BA   C1                     POP   bc   
06BB   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06BD   DD E9                  JP   (ix)   
06BF                IDENT3:      
06BF   E9                     JP   (hl)   
06C0                FRAC:        
06C0   2A 98 18               LD   hl,(vFrac)   
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                SQRT1:       
06C6   E1                     POP   hl   
06C7   C5                     PUSH   bc   
06C8   CD B3 07               CALL   squareRoot   
06CB   ED 43 98 18            LD   (vFrac),bc   
06CF   C1                     POP   bc   
06D0   D5                     PUSH   de   
06D1   DD E9                  JP   (ix)   
06D3                ABS1:        
06D3   E1                     POP   hl   
06D4   CB 7C                  BIT   7,h   
06D6   C8                     RET   z   
06D7   AF                     XOR   a   
06D8   95                     SUB   l   
06D9   6F                     LD   l,a   
06DA   9F                     SBC   a,a   
06DB   94                     SUB   h   
06DC   67                     LD   h,a   
06DD   E5                     PUSH   hl   
06DE   DD E9                  JP   (ix)   
06E0                MOD:         
06E0   D1                     POP   de   ; get first value
06E1   E1                     POP   hl   ; get 2nd value
06E2   C5                     PUSH   bc   ; preserve the IP
06E3   44 4D                  LD   bc,hl   
06E5   CD 9A 07               CALL   divide   
06E8   C1                     POP   bc   
06E9   E5                     PUSH   hl   ; push remainder
06EA   DD E9                  JP   (ix)   
06EC                             ; hl = value1, de = value2
06EC                             ; hl = result
06EC                EQUALS:      
06EC   B7                     OR   a   ; reset the carry flag
06ED   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06EF   28 10                  JR   z,true1   
06F1   C3 07 07               JP   false1   
06F4                             ; hl = value1 de = value2
06F4                             ; hl = result
06F4                LESSTHANEQ:      
06F4   B7                     OR   a   
06F5   ED 52                  SBC   hl,de   
06F7   18 05                  JR   lessthan1   
06F9                             ; hl = value1 de = value2
06F9                             ; hl = result
06F9                LESSTHAN:      
06F9   B7                     OR   a   
06FA   ED 52                  SBC   hl,de   
06FC   28 09                  JR   z,false1   
06FE                LESSTHAN1:      
06FE   FA 07 07               JP   m,false1   
0701                TRUE1:       
0701   21 FF FF               LD   hl,TRUE   
0704   E5                     PUSH   hl   
0705   DD E9                  JP   (ix)   
0707                FALSE1:      
0707   21 00 00               LD   hl,FALSE   
070A   E5                     PUSH   hl   
070B   DD E9                  JP   (ix)   
070D                             ; Z80 port input
070D                             ; port -- value
070D                INPUT:       
070D   E1                     POP   hl   
070E   59                     LD   e,c   ; save IP
070F   4D                     LD   c,l   
0710   ED 68                  IN   l,(c)   
0712   26 00                  LD   h,0   
0714   4B                     LD   c,e   ; restore IP
0715   E5                     PUSH   hl   
0716   DD E9                  JP   (ix)   
0718                             ; Z80 port output
0718                             ; value port --
0718                OUTPUT:      
0718   E1                     POP   hl   
0719   59                     LD   e,c   ; save IP
071A   4D                     LD   c,l   
071B   E1                     POP   hl   
071C   ED 69                  OUT   (c),l   
071E   4B                     LD   c,e   ; restore IP
071F   DD E9                  JP   (ix)   
0721                KEY:         
0721   CD 81 00               CALL   getchar   
0724   26 00                  LD   h,0   
0726   6F                     LD   l,a   
0727   E5                     PUSH   hl   
0728   DD E9                  JP   (ix)   
072A                NEG:         
072A   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
072D   D1                     POP   de   
072E   C3 94 03               JP   sub2   ; use the SUBtract routine
0731                FILTER:      
0731                MAP:         
0731                SCAN:        
0731   DD E9                  JP   (ix)   
0733                             ; -------------------------------------------------------------------------------
0733                             ; hash C-string
0733                             ; BC = str
0733                             ; HL = hash
0733                HASHSTR:      
0733   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
0737   21 00 00               LD   hl,0   
073A                HASHSTR1:      
073A   0A                     LD   a,(bc)   ; load next char
073B   03                     INC   bc   
073C   FE 00                  CP   0   ; NUL?
073E   C8                     RET   z   
073F                HASHSTR2:      
073F   16 00                  LD   d,0   
0741   5F                     LD   e,a   
0742   19                     ADD   hl,de   
0743   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0745   29                     ADD   hl,hl   ; shift left
0746   19                     ADD   hl,de   ; add
0747   29                     ADD   hl,hl   ; shift left
0748   29                     ADD   hl,hl   ; shift left
0749   29                     ADD   hl,hl   ; shift left
074A   29                     ADD   hl,hl   ; shift left
074B   29                     ADD   hl,hl   ; shift left
074C   29                     ADD   hl,hl   ; shift left
074D   19                     ADD   hl,de   ; add
074E   18 EA                  JR   hashStr1   
0750                             ; add entry to hash slots and hash pointers
0750                             ; bc = hash (b = hi, c = lo), de = addr
0750                             ; sets carry if successful
0750                DEFINEENTRY:      
0750   CB 21                  SLA   c   ; lo = lo * 2
0752   69                     LD   l,c   ; lo1 = lo
0753   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0755                DEFINEENTRY0:      
0755   7E                     LD   a,(hl)   ; a = (lo1)
0756   FE FF                  CP   UNUSED   ; is it unused?
0758   28 12                  JR   z,defineEntry3   ; yes, add entry
075A   79                     LD   a,c   ; a = lo
075B   BE                     CP   (hl)   ; compare (lo1) with lo
075C   20 06                  JR   nz,defineEntry1   ; no match loop around
075E   2C                     INC   l   
075F   78                     LD   a,b   ; a = hi
0760   BE                     CP   (hl)   ; compare (lo1+1) with hi
0761   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0763   2D                     DEC   l   ; restore l
0764                DEFINEENTRY1:      
0764   2C                     INC   l   ; try next entry
0765   2C                     INC   l   
0766   79                     LD   a,c   ; compare lo and lo1
0767   BD                     CP   l   ; if equal then there's no space left, reject
0768   20 EB                  JR   nz,defineEntry0   
076A                DEFINEENTRY2:      
076A   B7                     OR   a   ; clear carry flag, failure
076B   C9                     RET      
076C                DEFINEENTRY3:      ; new entry
076C   71                     LD   (hl),c   ; (lo1) = hash lo
076D   23                     INC   hl   
076E   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
076F   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0771   72                     LD   (hl),d   
0772   2B                     DEC   hl   
0773   73                     LD   (hl),e   ; (slot + 2) = address
0774   37                     SCF      ; set carry flag, success
0775   C9                     RET      
0776                             ; looks up hash and returns address
0776                             ; bc = hash
0776                             ; returns addr in hl, sets carry if successful
0776                LOOKUPENTRY:      
0776   CB 21                  SLA   c   ; lo = lo * 2
0778   69                     LD   l,c   ; lo1 = lo
0779   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077B                LOOKUPENTRY0:      
077B   7E                     LD   a,(hl)   ; a = (hl), slot
077C   FE FF                  CP   UNUSED   ; is it unused?
077E   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0780   79                     LD   a,c   ; a = lo
0781   BE                     CP   (hl)   ; compare (lo1) with lo
0782   20 06                  JR   nz,lookupEntry1   ; no match loop around
0784   2C                     INC   l   
0785   78                     LD   a,b   ; a = hi
0786   BE                     CP   (hl)   ; compare (lo1+1) with hi
0787   28 09                  JR   z,lookupEntry3   
0789   2D                     DEC   l   
078A                LOOKUPENTRY1:      
078A   2C                     INC   l   
078B   2C                     INC   l   
078C   79                     LD   a,c   
078D   BD                     CP   l   ; no space left, reject
078E   20 EB                  JR   nz,lookupEntry0   
0790                LOOKUPENTRY2:      
0790   B7                     OR   a   ; clear carry flag, failure
0791   C9                     RET      
0792                LOOKUPENTRY3:      
0792   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0794   56                     LD   d,(hl)   
0795   2D                     DEC   l   ; restore l
0796   5E                     LD   e,(hl)   ; (slot + 2) = address
0797   EB                     EX   de,hl   
0798   37                     SCF      
0799   C9                     RET      
079A                             ; division subroutine.
079A                             ; bc: divisor, de: dividend, hl: remainder
079A                DIVIDE:      
079A   21 00 00               LD   hl,0   ; zero the remainder
079D   3E 10                  LD   a,16   ; loop counter
079F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
079F   CB 21                  SLA   c   
07A1   CB 10                  RL   b   
07A3   ED 6A                  ADC   hl,hl   
07A5   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07A7   38 03                  JR   c,divide2   
07A9   0C                     INC   c   
07AA   18 01                  JR   divide3   
07AC                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07AC   19                     ADD   hl,de   
07AD                DIVIDE3:      
07AD   3D                     DEC   a   
07AE   20 EF                  JR   nz,divide1   
07B0   50 59                  LD   de,bc   ; result from bc to de
07B2   C9                     RET      
07B3                             ; squareroot
07B3                             ; Input: HL = value
07B3                             ; Result: DE = square root BC = remainder
07B3                SQUAREROOT:      
07B3   01 00 08               LD   bc,0800h   
07B6   59                     LD   e,c   
07B7   AF                     XOR   a   
07B8                SQUAREROOT1:      
07B8   29                     ADD   hl,hl   
07B9   CB 11                  RL   c   
07BB   ED 6A                  ADC   hl,hl   
07BD   CB 11                  RL   c   
07BF   30 02                  JR   nc,$+4   
07C1   CB C5                  SET   0,l   
07C3   7B                     LD   a,e   
07C4   87                     ADD   a,a   
07C5   5F                     LD   e,a   
07C6   87                     ADD   a,a   
07C7   CB 45                  BIT   0,l   
07C9   20 03                  JR   nz,$+5   
07CB   91                     SUB   c   
07CC   30 05                  JR   nc,squareRoot4   
07CE   79                     LD   a,c   
07CF   93                     SUB   e   
07D0   1C                     INC   e   
07D1   93                     SUB   e   
07D2   4F                     LD   c,a   
07D3                SQUAREROOT4:      
07D3   10 E3                  DJNZ   squareRoot1   
07D5   CB 45                  BIT   0,l   
07D7   28 01                  JR   z,squareRoot5   
07D9   04                     INC   b   
07DA                SQUAREROOT5:      
07DA   16 00                  LD   d,0   
07DC   C9                     RET      
07DD                PRTDEC:      
07DD   CB 7C                  BIT   7,h   
07DF   28 0B                  JR   z,prtdec0   
07E1   3E 2D                  LD   a,"-"   
07E3   CD 85 00               CALL   putchar   
07E6   AF                     XOR   a   
07E7   95                     SUB   l   
07E8   6F                     LD   l,a   
07E9   9F                     SBC   a,a   
07EA   94                     SUB   h   
07EB   67                     LD   h,a   
07EC                PRTDEC0:      
07EC   C5                     PUSH   bc   
07ED   0E 00                  LD   c,0   ; leading zeros flag = false
07EF   11 F0 D8               LD   de,-10000   
07F2   CD 0E 08               CALL   prtdec1   
07F5   11 18 FC               LD   de,-1000   
07F8   CD 0E 08               CALL   prtdec1   
07FB   11 9C FF               LD   de,-100   
07FE   CD 0E 08               CALL   prtdec1   
0801   1E F6                  LD   e,-10   
0803   CD 0E 08               CALL   prtdec1   
0806   0C                     INC   c   ; flag = true for at least digit
0807   1E FF                  LD   e,-1   
0809   CD 0E 08               CALL   prtdec1   
080C   C1                     POP   bc   
080D   C9                     RET      
080E                PRTDEC1:      
080E   06 2F                  LD   b,"0"-1   
0810                PRTDEC2:      
0810   04                     INC   b   
0811   19                     ADD   hl,de   
0812   38 FC                  JR   c,prtdec2   
0814   ED 52                  SBC   hl,de   
0816   3E 30                  LD   a,"0"   
0818   B8                     CP   b   
0819   20 05                  JR   nz,prtdec3   
081B   AF                     XOR   a   
081C   B1                     OR   c   
081D   C8                     RET   z   
081E   18 01                  JR   prtdec4   
0820                PRTDEC3:      
0820   0C                     INC   c   
0821                PRTDEC4:      
0821   78                     LD   a,b   
0822   C3 85 00               JP   putchar   
0825                PRTHEX:      ; display hl as a 16-bit number in hex.
0825   C5                     PUSH   bc   ; preserve the IP
0826   7C                     LD   a,h   
0827   CD 30 08               CALL   prthex2   
082A   7D                     LD   a,l   
082B   CD 30 08               CALL   prthex2   
082E   C1                     POP   bc   
082F   C9                     RET      
0830                PRTHEX2:      
0830   4F                     LD   c,a   
0831   1F                     RRA      
0832   1F                     RRA      
0833   1F                     RRA      
0834   1F                     RRA      
0835   CD 39 08               CALL   prthex3   
0838   79                     LD   a,c   
0839                PRTHEX3:      
0839   E6 0F                  AND   0x0F   
083B   C6 90                  ADD   a,0x90   
083D   27                     DAA      
083E   CE 40                  ADC   a,0x40   
0840   27                     DAA      
0841   C3 85 00               JP   putchar   
0844                PRTSTR0:      
0844   CD 85 00               CALL   putchar   
0847   23                     INC   hl   
0848                PRTSTR:      
0848   7E                     LD   a,(hl)   
0849   B7                     OR   a   
084A   20 F8                  JR   nz,prtstr0   
084C   C9                     RET      
084D                             ; **************************************************************************
084D                             ; calculate nesting value
084D                             ; a is char to be tested,
084D                             ; e is the nesting value (initially 0)
084D                             ; e is increased by ( and [
084D                             ; e is decreased by ) and ]
084D                             ; e has its bit 7 toggled by `
084D                             ; limited to 127 levels
084D                             ; **************************************************************************
084D                NESTING:      
084D   FE 22                  CP   $22   ; quote char
084F   20 0A                  JR   nz,nesting1   
0851   CB 7B                  BIT   7,e   
0853   28 03                  JR   z,nesting1a   
0855   CB BB                  RES   7,e   
0857   C9                     RET      
0858                NESTING1A:      
0858   CB FB                  SET   7,e   
085A   C9                     RET      
085B                NESTING1:      
085B   CB 7B                  BIT   7,e   
085D   C0                     RET   nz   
085E   FE 7B                  CP   "{"   
0860   28 08                  JR   z,nesting2   
0862   FE 5B                  CP   "["   
0864   28 04                  JR   z,nesting2   
0866   FE 28                  CP   "("   
0868   20 02                  JR   nz,nesting3   
086A                NESTING2:      
086A   1C                     INC   e   
086B   C9                     RET      
086C                NESTING3:      
086C   FE 7D                  CP   "}"   
086E   28 07                  JR   z,nesting4   
0870   FE 5D                  CP   "]"   
0872   28 03                  JR   z,nesting4   
0874   FE 29                  CP   ")"   
0876   C0                     RET   nz   
0877                NESTING4:      
0877   1D                     DEC   e   
0878   C9                     RET      
0879                PROMPT:      
0879   CD 89 08               CALL   printStr   
087C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0881   C9                     RET      
0882                CRLF:        
0882   CD 89 08               CALL   printStr   
0885   0D 0A 00               .CSTR   "\r\n"   
0888   C9                     RET      
0889                             ; prints a null teminated string
0889                             ; the string should be immedaitely following the call
0889                PRINTSTR:      
0889   E3                     EX   (sp),hl   ; swap			
088A   CD 48 08               CALL   prtstr   
088D   23                     INC   hl   ; inc past NUL
088E   E3                     EX   (sp),hl   ; put it back	
088F   C9                     RET      
0890                             ; executes a null teminated string (null executes exit_)
0890                             ; the string should be immedaitely following the call
0890                EXECSTR:      
0890                BRANCH:      ; executes the address on the stack
0890   C1                     POP   bc   ; bc = code*
0891   0B                     DEC   bc   ; dec to prepare for next routine
0892   DD E9                  JP   (ix)   
0894                DEFINE:      
0894   E1                     POP   hl   
0895   7E                     LD   a,(hl)   
0896   23                     INC   hl   
0897   44 4D                  LD   bc,hl   
0899   5F                     LD   e,a   
089A   16 00                  LD   d,0   
089C   19                     ADD   hl,de   
089D   5E                     LD   e,(hl)   
089E   23                     INC   hl   
089F   56                     LD   d,(hl)   
08A0   23                     INC   hl   
08A1   E5                     PUSH   hl   ; bc = str
08A2   D5                     PUSH   de   
08A3   CD 33 07               CALL   hashStr   ; hl = hash
08A6   D1                     POP   de   
08A7   44 4D                  LD   bc,hl   
08A9   C3 50 07               JP   defineEntry   
08AC                INIT:        
08AC   DD 2A A4 18            LD   ix,(vNext)   
08B0   FD 21 80 18            LD   iy,STACK   
08B4   21 80 01               LD   hl,isysVars   
08B7   11 98 18               LD   de,sysVars   
08BA   01 10 00               LD   bc,8 * 2   
08BD   ED B0                  LDIR      
08BF   3E FF                  LD   a,UNUSED   
08C1   06 00                  LD   b,0   
08C3   21 00 1B               LD   hl,hashSlots   
08C6                INIT1:       
08C6   77                     LD   (hl),a   
08C7   23                     INC   hl   
08C8   10 FC                  DJNZ   init1   
08CA   CD 94 08               CALL   define   
08CD   04 61 62 73 00         .PSTR   "abs",0   
08D2   D3 06                  DW   abs1   
08D4   CD 94 08               CALL   define   
08D7   05 61 64 64 72 00      .PSTR   "addr",0   
08DD   53 06                  DW   addr   
08DF   CD 94 08               CALL   define   
08E2   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08E9   8E 05                  DW   bytes   
08EB   CD 94 08               CALL   define   
08EE   05 63 61 6C 6C 00      .PSTR   "call",0   
08F4   CC 0A                  DW   call   
08F6                             ; call define
08F6                             ; .pstr "closure",0
08F6                             ; dw closure
08F6   CD 94 08               CALL   define   
08F9   04 64 65 66 00         .PSTR   "def",0   
08FE   1C 06                  DW   def   
0900   CD 94 08               CALL   define   
0903   05 65 78 65 63 00      .PSTR   "exec",0   
0909   AB 0A                  DW   exec   
090B   CD 94 08               CALL   define   
090E   06 66 61 6C 73 65 00   .PSTR   "false",0   
0915   00 00                  DW   false   
0917   CD 94 08               CALL   define   
091A   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0922   31 07                  DW   filter   
0924   CD 94 08               CALL   define   
0927   05 66 72 61 63 00      .PSTR   "frac",0   
092D   C0 06                  DW   frac   
092F   CD 94 08               CALL   define   
0932   05 66 75 6E 63 00      .PSTR   "func",0   
0938   FE 0A                  DW   func   
093A                             ; call define
093A                             ; .pstr "get",0
093A                             ; dw get
093A   CD 94 08               CALL   define   
093D   05 68 61 73 68 00      .PSTR   "hash",0   
0943   11 06                  DW   hash   
0945   CD 94 08               CALL   define   
0948   06 69 6E 70 75 74 00   .PSTR   "input",0   
094F   0D 07                  DW   input   
0951   CD 94 08               CALL   define   
0954   03 69 66 00            .PSTR   "if",0   
0958   6A 05                  DW   if   
095A   CD 94 08               CALL   define   
095D   05 69 66 74 65 00      .PSTR   "ifte",0   
0963   6F 05                  DW   ifte   
0965   CD 94 08               CALL   define   
0968   04 6B 65 79 00         .PSTR   "key",0   
096D   21 07                  DW   key   
096F   CD 94 08               CALL   define   
0972   04 6C 65 74 00         .PSTR   "let",0   
0977   2C 06                  DW   let   
0979   CD 94 08               CALL   define   
097C   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0982   87 05                  DW   loop   
0984   CD 94 08               CALL   define   
0987   04 6D 61 70 00         .PSTR   "map",0   
098C   31 07                  DW   map   
098E   CD 94 08               CALL   define   
0991   04 6D 6F 64 00         .PSTR   "mod",0   
0996   E0 06                  DW   mod   
0998   CD 94 08               CALL   define   
099B   04 6E 65 67 00         .PSTR   "neg",0   
09A0   2A 07                  DW   neg   
09A2   CD 94 08               CALL   define   
09A5   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09AD   18 07                  DW   output   
09AF   CD 94 08               CALL   define   
09B2   05 73 63 61 6E 00      .PSTR   "scan",0   
09B8   01 00                  DW   scan   
09BA   CD 94 08               CALL   define   
09BD   04 73 65 74 00         .PSTR   "set",0   
09C2   5A 05                  DW   set   
09C4   CD 94 08               CALL   define   
09C7   04 73 68 6C 00         .PSTR   "shl",0   
09CC   CF 03                  DW   shl   
09CE   CD 94 08               CALL   define   
09D1   04 73 68 72 00         .PSTR   "shr",0   
09D6   DF 03                  DW   shr   
09D8   CD 94 08               CALL   define   
09DB   05 73 71 72 74 00      .PSTR   "sqrt",0   
09E1   C6 06                  DW   sqrt1   
09E3   CD 94 08               CALL   define   
09E6   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09EE   7D 05                  DW   switch   
09F0   CD 94 08               CALL   define   
09F3   05 74 72 75 65 00      .PSTR   "true",0   
09F9   FF FF                  DW   true   
09FB   CD 94 08               CALL   define   
09FE   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A05   89 05                  DW   words   
0A07   C9                     RET      
0A08                START:       
0A08   31 80 18               LD   sp,STACK   ; start of Siena
0A0B   CD AC 08               CALL   init   ; setups
0A0E   CD 89 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A11   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A1E                INTERPRET:      
0A1E   CD 79 08               CALL   prompt   
0A21   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A24   ED 43 9C 18            LD   (vTIBPtr),bc   
0A28                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A28   1E 00                  LD   e,0   ; initilize nesting value
0A2A   C5                     PUSH   bc   ; save offset into TIB,
0A2B                             ; bc is also the count of chars in TIB
0A2B   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A2E   18 06                  JR   interpret4   
0A30                INTERPRET3:      
0A30   7E                     LD   a,(hl)   ; a = char in TIB
0A31   23                     INC   hl   ; inc pointer into TIB
0A32   0B                     DEC   bc   ; dec count of chars in TIB
0A33   CD 4D 08               CALL   nesting   ; update nesting value
0A36                INTERPRET4:      
0A36   79                     LD   a,c   ; is count zero?
0A37   B0                     OR   b   
0A38   20 F6                  JR   nz,interpret3   ; if not loop
0A3A   C1                     POP   bc   ; restore offset into TIB
0A3B                WAITCHAR:      
0A3B   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A3E   FE 20                  CP   $20   ; compare to space
0A40   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A42   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A44                             ; ???? NEEDED?
0A44   28 27                  JR   z,waitchar4   
0A46   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A48   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A4A                MACRO:       
0A4A                             ;  ld (vTIBPtr),bc
0A4A                             ;  ld hl,ctrlCodes
0A4A                             ;  add a,l			            ; look up key of macros
0A4A                             ;  ld l,a
0A4A                             ;  ld e,(hl)
0A4A                             ;  ld a,e
0A4A                             ;  or a
0A4A                             ;  jr z,macro1
0A4A                             ;  ld d,msb(macros)
0A4A                             ;  push de
0A4A                             ;  call call		            ; Siena exec_ operation and jump to it
0A4A                             ;  db DC1,0
0A4A                             ; macro1:
0A4A                             ;  ld bc,(vTIBPtr)
0A4A   18 DC                  JR   interpret2   
0A4C                WAITCHAR1:      
0A4C   21 00 19               LD   hl,TIB   
0A4F   09                     ADD   hl,bc   
0A50   77                     LD   (hl),a   ; store the character in textbuf
0A51   03                     INC   bc   
0A52   CD 85 00               CALL   putchar   ; echo character to screen
0A55   CD 4D 08               CALL   nesting   
0A58   18 E1                  JR   waitchar   ; wait for next character
0A5A                WAITCHAR3:      
0A5A   21 00 19               LD   hl,TIB   
0A5D   09                     ADD   hl,bc   
0A5E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A60   23                     INC   hl   
0A61   36 0A                  LD   (hl),"\n"   
0A63   23                     INC   hl   
0A64   03                     INC   bc   
0A65   03                     INC   bc   
0A66   CD 82 08               CALL   crlf   ; echo character to screen
0A69   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A6A   B7                     OR   a   
0A6B   20 CE                  JR   nz,waitchar   
0A6D                WAITCHAR4:      
0A6D   ED 43 9C 18            LD   (vTIBPtr),bc   
0A71   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A74                             ; we pressed enter
0A74   0B                     DEC   bc   
0A75                NEXT:        
0A75   03                     INC   bc   ; Increment the IP
0A76   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A77   FE 20                  CP   " "   ; whitespace?
0A79   28 FA                  JR   z,next   ; space? ignore
0A7B   38 07                  JR   c,next1   
0A7D   6F                     LD   l,a   ; index into table
0A7E   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A80   6E                     LD   l,(hl)   ; get low jump address
0A81   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A83   E9                     JP   (hl)   ; Jump to routine
0A84                NEXT1:       
0A84   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0A86   28 0F                  JR   z,escape_   
0A88   FE 00                  CP   NUL   ; end of input string?
0A8A   28 0C                  JR   z,exit_   
0A8C   FE 11                  CP   DC1   ; literal number
0A8E   28 0B                  JR   z,literal_   
0A90   FE 12                  CP   DC2   ; enter routine
0A92   28 10                  JR   z,enter_   
0A94   C3 1E 0A               JP   interpret   ; no, other whitespace, macros?
0A97                ESCAPE_:      
0A97   03                     INC   bc   ; falls through
0A98                EXIT_:       
0A98   60 69                  LD   hl,bc   
0A9A   E9                     JP   (hl)   
0A9B                LITERAL_:      
0A9B   03                     INC   bc   
0A9C   0A                     LD   a,(bc)   
0A9D   6F                     LD   l,a   
0A9E   03                     INC   bc   
0A9F   0A                     LD   a,(bc)   
0AA0   67                     LD   h,a   
0AA1   E5                     PUSH   hl   
0AA2   DD E9                  JP   (ix)   
0AA4                ENTER_:      
0AA4   03                     INC   bc   
0AA5   0A                     LD   a,(bc)   
0AA6   6F                     LD   l,a   
0AA7   03                     INC   bc   
0AA8   0A                     LD   a,(bc)   
0AA9   67                     LD   h,a   
0AAA   E9                     JP   (hl)   
0AAB                             ; execute a block of code which ends with }
0AAB                             ; uses parent scope
0AAB                EXEC:        
0AAB   E1                     POP   hl   ; hl = code*
0AAC   7C                     LD   a,h   ; skip if destination address is NUL
0AAD   B5                     OR   l   
0AAE   28 1A                  JR   z,exec2   
0AB0   C5                     PUSH   bc   ; push IP
0AB1   FD 5E 04               LD   e,(iy+4)   ; de = scope arglist*
0AB4   FD 56 05               LD   d,(iy+5)   
0AB7   D5                     PUSH   de   ; push scope arglist*
0AB8   FD 5E 02               LD   e,(iy+2)   ; de = ScopeBP from parent stack frame
0ABB   FD 56 03               LD   d,(iy+3)   
0ABE   D5                     PUSH   de   ; push ScopeBP
0ABF   FD E5                  PUSH   iy   ; push BP
0AC1   FD 21 00 00            LD   iy,0   ; BP = SP
0AC5   FD 39                  ADD   iy,sp   
0AC7   44 4D                  LD   bc,hl   ; IP = pointer to code
0AC9   0B                     DEC   bc   ; dec to prepare for next routine
0ACA                EXEC2:       
0ACA   DD E9                  JP   (ix)   
0ACC                             ; arg1 .. argn func -- ?
0ACC                CALL:        
0ACC   E1                     POP   hl   
0ACD   E9                     JP   (hl)   
0ACE                             ; call with args
0ACE                             ; creates a scope
0ACE                DOCALL:      ; execute code at pointer
0ACE   E1                     POP   hl   ; hl = pointer to code
0ACF   7C                     LD   a,h   ; skip if destination address is NUL
0AD0   B5                     OR   l   
0AD1   28 29                  JR   z,doCall2   
0AD3   5E                     LD   e,(hl)   ; de = code*, hl = arglist*
0AD4   23                     INC   hl   
0AD5   56                     LD   d,(hl)   
0AD6   E5                     PUSH   hl   ; hl' = block* - 1
0AD7   D9                     EXX      
0AD8   E1                     POP   hl   
0AD9   D9                     EXX      
0ADA   EB                     EX   de,hl   
0ADB   7D                     LD   a,l   ; if arglist* == null skip, a = 0
0ADC   B4                     OR   h   
0ADD   28 03                  JR   z,doCall1   
0ADF   2B                     DEC   hl   ; a = num locals
0AE0   7E                     LD   a,(hl)   
0AE1   23                     INC   hl   ; hl = arglist*
0AE2                DOCALL1:      ; reserve space for locals
0AE2   B7                     OR   a   
0AE3   28 07                  JR   z,doCall1c   
0AE5   11 00 00               LD   de,0   
0AE8                DOCALL1A:      
0AE8   D5                     PUSH   de   
0AE9   3D                     DEC   a   
0AEA   20 FC                  JR   nz,doCall1a   
0AEC                DOCALL1C:      
0AEC   C5                     PUSH   bc   ; push IP
0AED   E5                     PUSH   hl   ; push arglist*
0AEE   FD E5                  PUSH   iy   ; push ScopeBP
0AF0   FD E5                  PUSH   iy   ; push BP
0AF2   FD 21 00 00            LD   iy,0   ; BP = SP
0AF6   FD 39                  ADD   iy,sp   
0AF8   D9                     EXX      
0AF9   E5                     PUSH   hl   
0AFA   D9                     EXX      
0AFB   C1                     POP   bc   ; IP = block-1, ready for NEXT
0AFC                DOCALL2:      
0AFC   DD E9                  JP   (ix)   
0AFE                             ; arglist* block* -- ptr
0AFE                FUNC:        
0AFE   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B01   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B03   23                     INC   hl   
0B04   36 CE                  LD   (hl),lsb(doCall)   
0B06   23                     INC   hl   
0B07   36 0A                  LD   (hl),msb(doCall)   
0B09   23                     INC   hl   
0B0A   D1                     POP   de   ; hl = heapPtr, de = block
0B0B   EB                     EX   de,hl   ; hl = heapPtr, de = arglist*, (sp) = block*
0B0C   E3                     EX   (sp),hl   
0B0D   EB                     EX   de,hl   
0B0E   73                     LD   (hl),e   ; compile arglist*
0B0F   23                     INC   hl   
0B10   72                     LD   (hl),d   
0B11   23                     INC   hl   
0B12   D1                     POP   de   ; de = block*
0B13   C5                     PUSH   bc   ; (sp) = IP
0B14   06 01                  LD   b,1   ; b = nesting
0B16                FUNC1:       
0B16   1A                     LD   a,(de)   
0B17   13                     INC   de   
0B18   77                     LD   (hl),a   
0B19   23                     INC   hl   
0B1A   FE 29                  CP   ")"   
0B1C   28 29                  JR   z,func4   
0B1E   FE 7D                  CP   "}"   
0B20   28 25                  JR   z,func4   
0B22   FE 5D                  CP   "]"   
0B24   28 21                  JR   z,func4   
0B26   FE 28                  CP   "("   
0B28   28 12                  JR   z,func2   
0B2A   FE 7B                  CP   "{"   
0B2C   28 0E                  JR   z,func2   
0B2E   FE 5B                  CP   "["   
0B30   28 0A                  JR   z,func2   
0B32   FE 27                  CP   "'"   
0B34   28 09                  JR   z,func3   
0B36   FE 60                  CP   "`"   
0B38   28 05                  JR   z,func3   
0B3A   18 DA                  JR   func1   
0B3C                FUNC2:       
0B3C   04                     INC   b   
0B3D   18 D7                  JR   func1   
0B3F                FUNC3:       
0B3F   3E 80                  LD   a,$80   
0B41   A8                     XOR   b   
0B42   47                     LD   b,a   
0B43   20 D1                  JR   nz,func1   
0B45   18 03                  JR   func4a   
0B47                FUNC4:       
0B47   05                     DEC   b   
0B48   20 CC                  JR   nz,func1   ; get the next element
0B4A                FUNC4A:      
0B4A                             ; ld a,ETX                            ; compile ETX which means return from function (use ";" ?)
0B4A                             ; ld (hl),a
0B4A   23                     INC   hl   
0B4B   C1                     POP   bc   ; de = defstart, hl = IP
0B4C   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B50   D5                     PUSH   de   
0B51   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B54   DD E9                  JP   (ix)   
0B56                             ; $a .. $z
0B56                             ; -- value
0B56                             ; returns value of arg
0B56                ARG:         
0B56   FD 5E 04               LD   e,(iy+4)   ; hl = arglist*
0B59   FD 56 05               LD   d,(iy+5)   
0B5C   EB                     EX   de,hl   
0B5D   7D                     LD   a,l   ; arglist* == null skip
0B5E   B4                     OR   h   
0B5F   28 1C                  JR   z,arg0a   
0B61   2B                     DEC   hl   ; e = num_args, hl = arglist*
0B62   2B                     DEC   hl   
0B63   7E                     LD   a,(hl)   
0B64   B7                     OR   a   
0B65   28 16                  JR   z,arg0a   
0B67   5F                     LD   e,a   
0B68   23                     INC   hl   
0B69   23                     INC   hl   
0B6A   03                     INC   bc   ; a = next char = arg_name
0B6B   0A                     LD   a,(bc)   
0B6C   C5                     PUSH   bc   ; save IP
0B6D   43                     LD   b,e   ; b = num_args
0B6E   FD 5E 02               LD   e,(iy+2)   ; de = ScopeBP, hl = argslist*
0B71   FD 56 03               LD   d,(iy+3)   
0B74                ARG0:        
0B74   1B                     DEC   de   ; a = arg_name, de = next arg*
0B75   1B                     DEC   de   
0B76   BE                     CP   (hl)   
0B77   28 09                  JR   z,arg1   
0B79   23                     INC   hl   ; hl = next arglist*
0B7A   10 F8                  DJNZ   arg0   
0B7C   C1                     POP   bc   ; no match, restore IP
0B7D                ARG0A:       
0B7D   11 00 00               LD   de,0   ; return 0
0B80   18 08                  JR   arg1a   
0B82                ARG1:        
0B82   C1                     POP   bc   ; restore IP
0B83   EB                     EX   de,hl   ; hl = arg*
0B84   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0B87   5E                     LD   e,(hl)   
0B88   23                     INC   hl   
0B89   56                     LD   d,(hl)   ; de = arg
0B8A                ARG1A:       
0B8A   D5                     PUSH   de   ; push arg
0B8B   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1", 1
4000   31 80 18               LD   SP,STACK   
4003   CD AC 08               CALL   init   
4006   CD 90 08               CALL   execStr   
4009   31 00                  .CSTR   "1"   
400B                          ;*Macro unroll:  expect "1",1
400B   E1                     POP   HL   
400C   E5                     PUSH   HL   
400D   11 01 00               LD   DE,1   
4010   B7                     OR   A   
4011   ED 52                  SBC   HL,DE   
4013   7D                     LD   A,L   
4014   B4                     OR   H   
4015   28 4C                  JR   Z,expectM_0_2472S43   
4017   CD 89 08               CALL   printStr   
401A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4022   CD 89 08               CALL   printStr   
4025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4034   21 01 00               LD   HL,1   
4037   CD DD 07               CALL   prtdec   
403A   CD 89 08               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   CD DD 07               CALL   prtdec   
404F   E1                     POP   hl   
4050   CD 89 08               CALL   printStr   
4053   20 28 23 00            .CSTR   " (#"   
4057   CD 25 08               CALL   prthex   
405A   CD 89 08               CALL   printStr   
405D   29 0D 0A 00            .CSTR   ")\r\n"   
4061   76                     HALT      
4062   00                     .CSTR      
4063                EXPECTM_0_2472S43:      
4063   E1                     POP   HL   
4064                          ;*Macro unroll:  test "2", 2
4064   31 80 18               LD   SP,STACK   
4067   CD AC 08               CALL   init   
406A   CD 90 08               CALL   execStr   
406D   32 00                  .CSTR   "2"   
406F                          ;*Macro unroll:  expect "2",2
406F   E1                     POP   HL   
4070   E5                     PUSH   HL   
4071   11 02 00               LD   DE,2   
4074   B7                     OR   A   
4075   ED 52                  SBC   HL,DE   
4077   7D                     LD   A,L   
4078   B4                     OR   H   
4079   28 4C                  JR   Z,expectM_0_2473S43   
407B   CD 89 08               CALL   printStr   
407E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4086   CD 89 08               CALL   printStr   
4089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4098   21 02 00               LD   HL,2   
409B   CD DD 07               CALL   prtdec   
409E   CD 89 08               CALL   printStr   
40A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AE   E1                     POP   hl   
40AF   E5                     PUSH   hl   
40B0   CD DD 07               CALL   prtdec   
40B3   E1                     POP   hl   
40B4   CD 89 08               CALL   printStr   
40B7   20 28 23 00            .CSTR   " (#"   
40BB   CD 25 08               CALL   prthex   
40BE   CD 89 08               CALL   printStr   
40C1   29 0D 0A 00            .CSTR   ")\r\n"   
40C5   76                     HALT      
40C6   00                     .CSTR      
40C7                EXPECTM_0_2473S43:      
40C7   E1                     POP   HL   
40C8                          ;*Macro unroll:  test "1", 1
40C8   31 80 18               LD   SP,STACK   
40CB   CD AC 08               CALL   init   
40CE   CD 90 08               CALL   execStr   
40D1   31 00                  .CSTR   "1"   
40D3                          ;*Macro unroll:  expect "1",1
40D3   E1                     POP   HL   
40D4   E5                     PUSH   HL   
40D5   11 01 00               LD   DE,1   
40D8   B7                     OR   A   
40D9   ED 52                  SBC   HL,DE   
40DB   7D                     LD   A,L   
40DC   B4                     OR   H   
40DD   28 4C                  JR   Z,expectM_0_2474S43   
40DF   CD 89 08               CALL   printStr   
40E2   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40EA   CD 89 08               CALL   printStr   
40ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FC   21 01 00               LD   HL,1   
40FF   CD DD 07               CALL   prtdec   
4102   CD 89 08               CALL   printStr   
4105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4112   E1                     POP   hl   
4113   E5                     PUSH   hl   
4114   CD DD 07               CALL   prtdec   
4117   E1                     POP   hl   
4118   CD 89 08               CALL   printStr   
411B   20 28 23 00            .CSTR   " (#"   
411F   CD 25 08               CALL   prthex   
4122   CD 89 08               CALL   printStr   
4125   29 0D 0A 00            .CSTR   ")\r\n"   
4129   76                     HALT      
412A   00                     .CSTR      
412B                EXPECTM_0_2474S43:      
412B   E1                     POP   HL   
412C                          ;*Macro unroll:  test "0", 0
412C   31 80 18               LD   SP,STACK   
412F   CD AC 08               CALL   init   
4132   CD 90 08               CALL   execStr   
4135   30 00                  .CSTR   "0"   
4137                          ;*Macro unroll:  expect "0",0
4137   E1                     POP   HL   
4138   E5                     PUSH   HL   
4139   11 00 00               LD   DE,0   
413C   B7                     OR   A   
413D   ED 52                  SBC   HL,DE   
413F   7D                     LD   A,L   
4140   B4                     OR   H   
4141   28 4C                  JR   Z,expectM_0_2475S43   
4143   CD 89 08               CALL   printStr   
4146   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
414E   CD 89 08               CALL   printStr   
4151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4160   21 00 00               LD   HL,0   
4163   CD DD 07               CALL   prtdec   
4166   CD 89 08               CALL   printStr   
4169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4176   E1                     POP   hl   
4177   E5                     PUSH   hl   
4178   CD DD 07               CALL   prtdec   
417B   E1                     POP   hl   
417C   CD 89 08               CALL   printStr   
417F   20 28 23 00            .CSTR   " (#"   
4183   CD 25 08               CALL   prthex   
4186   CD 89 08               CALL   printStr   
4189   29 0D 0A 00            .CSTR   ")\r\n"   
418D   76                     HALT      
418E   00                     .CSTR      
418F                EXPECTM_0_2475S43:      
418F   E1                     POP   HL   
4190                          ;*Macro unroll:  test "10", 10
4190   31 80 18               LD   SP,STACK   
4193   CD AC 08               CALL   init   
4196   CD 90 08               CALL   execStr   
4199   31 30 00               .CSTR   "10"   
419C                          ;*Macro unroll:  expect "10",10
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 0A 00               LD   DE,10   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   28 4D                  JR   Z,expectM_0_2476S43   
41A8   CD 89 08               CALL   printStr   
41AB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
41B4   CD 89 08               CALL   printStr   
41B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C6   21 0A 00               LD   HL,10   
41C9   CD DD 07               CALL   prtdec   
41CC   CD 89 08               CALL   printStr   
41CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DC   E1                     POP   hl   
41DD   E5                     PUSH   hl   
41DE   CD DD 07               CALL   prtdec   
41E1   E1                     POP   hl   
41E2   CD 89 08               CALL   printStr   
41E5   20 28 23 00            .CSTR   " (#"   
41E9   CD 25 08               CALL   prthex   
41EC   CD 89 08               CALL   printStr   
41EF   29 0D 0A 00            .CSTR   ")\r\n"   
41F3   76                     HALT      
41F4   00                     .CSTR      
41F5                EXPECTM_0_2476S43:      
41F5   E1                     POP   HL   
41F6                          ;*Macro unroll:  test "123", 123
41F6   31 80 18               LD   SP,STACK   
41F9   CD AC 08               CALL   init   
41FC   CD 90 08               CALL   execStr   
41FF   31 32 33 00            .CSTR   "123"   
4203                          ;*Macro unroll:  expect "123",123
4203   E1                     POP   HL   
4204   E5                     PUSH   HL   
4205   11 7B 00               LD   DE,123   
4208   B7                     OR   A   
4209   ED 52                  SBC   HL,DE   
420B   7D                     LD   A,L   
420C   B4                     OR   H   
420D   28 4E                  JR   Z,expectM_0_2477S43   
420F   CD 89 08               CALL   printStr   
4212   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
421C   CD 89 08               CALL   printStr   
421F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422E   21 7B 00               LD   HL,123   
4231   CD DD 07               CALL   prtdec   
4234   CD 89 08               CALL   printStr   
4237   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4244   E1                     POP   hl   
4245   E5                     PUSH   hl   
4246   CD DD 07               CALL   prtdec   
4249   E1                     POP   hl   
424A   CD 89 08               CALL   printStr   
424D   20 28 23 00            .CSTR   " (#"   
4251   CD 25 08               CALL   prthex   
4254   CD 89 08               CALL   printStr   
4257   29 0D 0A 00            .CSTR   ")\r\n"   
425B   76                     HALT      
425C   00                     .CSTR      
425D                EXPECTM_0_2477S43:      
425D   E1                     POP   HL   
425E                          ;*Macro unroll:  test "-1",-1
425E   31 80 18               LD   SP,STACK   
4261   CD AC 08               CALL   init   
4264   CD 90 08               CALL   execStr   
4267   2D 31 00               .CSTR   "-1"   
426A                          ;*Macro unroll:  expect "-1",-1
426A   E1                     POP   HL   
426B   E5                     PUSH   HL   
426C   11 FF FF               LD   DE,-1   
426F   B7                     OR   A   
4270   ED 52                  SBC   HL,DE   
4272   7D                     LD   A,L   
4273   B4                     OR   H   
4274   28 4D                  JR   Z,expectM_0_2478S43   
4276   CD 89 08               CALL   printStr   
4279   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
4282   CD 89 08               CALL   printStr   
4285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4294   21 FF FF               LD   HL,-1   
4297   CD DD 07               CALL   prtdec   
429A   CD 89 08               CALL   printStr   
429D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AA   E1                     POP   hl   
42AB   E5                     PUSH   hl   
42AC   CD DD 07               CALL   prtdec   
42AF   E1                     POP   hl   
42B0   CD 89 08               CALL   printStr   
42B3   20 28 23 00            .CSTR   " (#"   
42B7   CD 25 08               CALL   prthex   
42BA   CD 89 08               CALL   printStr   
42BD   29 0D 0A 00            .CSTR   ")\r\n"   
42C1   76                     HALT      
42C2   00                     .CSTR      
42C3                EXPECTM_0_2478S43:      
42C3   E1                     POP   HL   
42C4                          ;*Macro unroll:  test "``", 0
42C4   31 80 18               LD   SP,STACK   
42C7   CD AC 08               CALL   init   
42CA   CD 90 08               CALL   execStr   
42CD   60 60 00               .CSTR   "``"   
42D0                          ;*Macro unroll:  expect "``",0
42D0   E1                     POP   HL   
42D1   E5                     PUSH   HL   
42D2   11 00 00               LD   DE,0   
42D5   B7                     OR   A   
42D6   ED 52                  SBC   HL,DE   
42D8   7D                     LD   A,L   
42D9   B4                     OR   H   
42DA   28 4D                  JR   Z,expectM_0_2479S43   
42DC   CD 89 08               CALL   printStr   
42DF   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
42E8   CD 89 08               CALL   printStr   
42EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FA   21 00 00               LD   HL,0   
42FD   CD DD 07               CALL   prtdec   
4300   CD 89 08               CALL   printStr   
4303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4310   E1                     POP   hl   
4311   E5                     PUSH   hl   
4312   CD DD 07               CALL   prtdec   
4315   E1                     POP   hl   
4316   CD 89 08               CALL   printStr   
4319   20 28 23 00            .CSTR   " (#"   
431D   CD 25 08               CALL   prthex   
4320   CD 89 08               CALL   printStr   
4323   29 0D 0A 00            .CSTR   ")\r\n"   
4327   76                     HALT      
4328   00                     .CSTR      
4329                EXPECTM_0_2479S43:      
4329   E1                     POP   HL   
432A                          ;*Macro unroll:  test "`a`", $61
432A   31 80 18               LD   SP,STACK   
432D   CD AC 08               CALL   init   
4330   CD 90 08               CALL   execStr   
4333   60 61 60 00            .CSTR   "`a`"   
4337                          ;*Macro unroll:  expect "`a`",$61
4337   E1                     POP   HL   
4338   E5                     PUSH   HL   
4339   11 61 00               LD   DE,$61   
433C   B7                     OR   A   
433D   ED 52                  SBC   HL,DE   
433F   7D                     LD   A,L   
4340   B4                     OR   H   
4341   28 4E                  JR   Z,expectM_0_2480S43   
4343   CD 89 08               CALL   printStr   
4346   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
4350   CD 89 08               CALL   printStr   
4353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4362   21 61 00               LD   HL,$61   
4365   CD DD 07               CALL   prtdec   
4368   CD 89 08               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   CD DD 07               CALL   prtdec   
437D   E1                     POP   hl   
437E   CD 89 08               CALL   printStr   
4381   20 28 23 00            .CSTR   " (#"   
4385   CD 25 08               CALL   prthex   
4388   CD 89 08               CALL   printStr   
438B   29 0D 0A 00            .CSTR   ")\r\n"   
438F   76                     HALT      
4390   00                     .CSTR      
4391                EXPECTM_0_2480S43:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "`\\``", $60
4392   31 80 18               LD   SP,STACK   
4395   CD AC 08               CALL   init   
4398   CD 90 08               CALL   execStr   
439B   60 5C 60 60 00         .CSTR   "`\\``"   
43A0                          ;*Macro unroll:  expect "`\\``",$60
43A0   E1                     POP   HL   
43A1   E5                     PUSH   HL   
43A2   11 60 00               LD   DE,$60   
43A5   B7                     OR   A   
43A6   ED 52                  SBC   HL,DE   
43A8   7D                     LD   A,L   
43A9   B4                     OR   H   
43AA   28 4F                  JR   Z,expectM_0_2481S43   
43AC   CD 89 08               CALL   printStr   
43AF   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
43BA   CD 89 08               CALL   printStr   
43BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CC   21 60 00               LD   HL,$60   
43CF   CD DD 07               CALL   prtdec   
43D2   CD 89 08               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   CD DD 07               CALL   prtdec   
43E7   E1                     POP   hl   
43E8   CD 89 08               CALL   printStr   
43EB   20 28 23 00            .CSTR   " (#"   
43EF   CD 25 08               CALL   prthex   
43F2   CD 89 08               CALL   printStr   
43F5   29 0D 0A 00            .CSTR   ")\r\n"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2481S43:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "#10", $10
43FC   31 80 18               LD   SP,STACK   
43FF   CD AC 08               CALL   init   
4402   CD 90 08               CALL   execStr   
4405   23 31 30 00            .CSTR   "#10"   
4409                          ;*Macro unroll:  expect "#10",$10
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 10 00               LD   DE,$10   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   28 4E                  JR   Z,expectM_0_2482S43   
4415   CD 89 08               CALL   printStr   
4418   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4422   CD 89 08               CALL   printStr   
4425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4434   21 10 00               LD   HL,$10   
4437   CD DD 07               CALL   prtdec   
443A   CD 89 08               CALL   printStr   
443D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444A   E1                     POP   hl   
444B   E5                     PUSH   hl   
444C   CD DD 07               CALL   prtdec   
444F   E1                     POP   hl   
4450   CD 89 08               CALL   printStr   
4453   20 28 23 00            .CSTR   " (#"   
4457   CD 25 08               CALL   prthex   
445A   CD 89 08               CALL   printStr   
445D   29 0D 0A 00            .CSTR   ")\r\n"   
4461   76                     HALT      
4462   00                     .CSTR      
4463                EXPECTM_0_2482S43:      
4463   E1                     POP   HL   
4464                          ;*Macro unroll:  test "#FF", $FF
4464   31 80 18               LD   SP,STACK   
4467   CD AC 08               CALL   init   
446A   CD 90 08               CALL   execStr   
446D   23 46 46 00            .CSTR   "#FF"   
4471                          ;*Macro unroll:  expect "#FF",$FF
4471   E1                     POP   HL   
4472   E5                     PUSH   HL   
4473   11 FF 00               LD   DE,$FF   
4476   B7                     OR   A   
4477   ED 52                  SBC   HL,DE   
4479   7D                     LD   A,L   
447A   B4                     OR   H   
447B   28 4E                  JR   Z,expectM_0_2483S43   
447D   CD 89 08               CALL   printStr   
4480   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
448A   CD 89 08               CALL   printStr   
448D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
449C   21 FF 00               LD   HL,$FF   
449F   CD DD 07               CALL   prtdec   
44A2   CD 89 08               CALL   printStr   
44A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B2   E1                     POP   hl   
44B3   E5                     PUSH   hl   
44B4   CD DD 07               CALL   prtdec   
44B7   E1                     POP   hl   
44B8   CD 89 08               CALL   printStr   
44BB   20 28 23 00            .CSTR   " (#"   
44BF   CD 25 08               CALL   prthex   
44C2   CD 89 08               CALL   printStr   
44C5   29 0D 0A 00            .CSTR   ")\r\n"   
44C9   76                     HALT      
44CA   00                     .CSTR      
44CB                EXPECTM_0_2483S43:      
44CB   E1                     POP   HL   
44CC                          ;*Macro unroll:  test "-1 2 +",1
44CC   31 80 18               LD   SP,STACK   
44CF   CD AC 08               CALL   init   
44D2   CD 90 08               CALL   execStr   
44D5   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
44DC                          ;*Macro unroll:  expect "-1 2 +",1
44DC   E1                     POP   HL   
44DD   E5                     PUSH   HL   
44DE   11 01 00               LD   DE,1   
44E1   B7                     OR   A   
44E2   ED 52                  SBC   HL,DE   
44E4   7D                     LD   A,L   
44E5   B4                     OR   H   
44E6   28 51                  JR   Z,expectM_0_2484S43   
44E8   CD 89 08               CALL   printStr   
44EB   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
44F8   CD 89 08               CALL   printStr   
44FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450A   21 01 00               LD   HL,1   
450D   CD DD 07               CALL   prtdec   
4510   CD 89 08               CALL   printStr   
4513   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4520   E1                     POP   hl   
4521   E5                     PUSH   hl   
4522   CD DD 07               CALL   prtdec   
4525   E1                     POP   hl   
4526   CD 89 08               CALL   printStr   
4529   20 28 23 00            .CSTR   " (#"   
452D   CD 25 08               CALL   prthex   
4530   CD 89 08               CALL   printStr   
4533   29 0D 0A 00            .CSTR   ")\r\n"   
4537   76                     HALT      
4538   00                     .CSTR      
4539                EXPECTM_0_2484S43:      
4539   E1                     POP   HL   
453A                          ;*Macro unroll:  test "-1 1 +",0
453A   31 80 18               LD   SP,STACK   
453D   CD AC 08               CALL   init   
4540   CD 90 08               CALL   execStr   
4543   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
454A                          ;*Macro unroll:  expect "-1 1 +",0
454A   E1                     POP   HL   
454B   E5                     PUSH   HL   
454C   11 00 00               LD   DE,0   
454F   B7                     OR   A   
4550   ED 52                  SBC   HL,DE   
4552   7D                     LD   A,L   
4553   B4                     OR   H   
4554   28 51                  JR   Z,expectM_0_2485S43   
4556   CD 89 08               CALL   printStr   
4559   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
4566   CD 89 08               CALL   printStr   
4569   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4578   21 00 00               LD   HL,0   
457B   CD DD 07               CALL   prtdec   
457E   CD 89 08               CALL   printStr   
4581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458E   E1                     POP   hl   
458F   E5                     PUSH   hl   
4590   CD DD 07               CALL   prtdec   
4593   E1                     POP   hl   
4594   CD 89 08               CALL   printStr   
4597   20 28 23 00            .CSTR   " (#"   
459B   CD 25 08               CALL   prthex   
459E   CD 89 08               CALL   printStr   
45A1   29 0D 0A 00            .CSTR   ")\r\n"   
45A5   76                     HALT      
45A6   00                     .CSTR      
45A7                EXPECTM_0_2485S43:      
45A7   E1                     POP   HL   
45A8                          ;*Macro unroll:  test "1 2 +", 3
45A8   31 80 18               LD   SP,STACK   
45AB   CD AC 08               CALL   init   
45AE   CD 90 08               CALL   execStr   
45B1   31 20 32 20 2B 00      .CSTR   "1 2 +"   
45B7                          ;*Macro unroll:  expect "1 2 +",3
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 03 00               LD   DE,3   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   28 50                  JR   Z,expectM_0_2486S43   
45C3   CD 89 08               CALL   printStr   
45C6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
45D2   CD 89 08               CALL   printStr   
45D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E4   21 03 00               LD   HL,3   
45E7   CD DD 07               CALL   prtdec   
45EA   CD 89 08               CALL   printStr   
45ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45FA   E1                     POP   hl   
45FB   E5                     PUSH   hl   
45FC   CD DD 07               CALL   prtdec   
45FF   E1                     POP   hl   
4600   CD 89 08               CALL   printStr   
4603   20 28 23 00            .CSTR   " (#"   
4607   CD 25 08               CALL   prthex   
460A   CD 89 08               CALL   printStr   
460D   29 0D 0A 00            .CSTR   ")\r\n"   
4611   76                     HALT      
4612   00                     .CSTR      
4613                EXPECTM_0_2486S43:      
4613   E1                     POP   HL   
4614                          ;*Macro unroll:  test "4 1 2 +", 3
4614   31 80 18               LD   SP,STACK   
4617   CD AC 08               CALL   init   
461A   CD 90 08               CALL   execStr   
461D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
4625                          ;*Macro unroll:  expect "4 1 2 +",3
4625   E1                     POP   HL   
4626   E5                     PUSH   HL   
4627   11 03 00               LD   DE,3   
462A   B7                     OR   A   
462B   ED 52                  SBC   HL,DE   
462D   7D                     LD   A,L   
462E   B4                     OR   H   
462F   28 52                  JR   Z,expectM_0_2487S43   
4631   CD 89 08               CALL   printStr   
4634   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4642   CD 89 08               CALL   printStr   
4645   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4654   21 03 00               LD   HL,3   
4657   CD DD 07               CALL   prtdec   
465A   CD 89 08               CALL   printStr   
465D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
466A   E1                     POP   hl   
466B   E5                     PUSH   hl   
466C   CD DD 07               CALL   prtdec   
466F   E1                     POP   hl   
4670   CD 89 08               CALL   printStr   
4673   20 28 23 00            .CSTR   " (#"   
4677   CD 25 08               CALL   prthex   
467A   CD 89 08               CALL   printStr   
467D   29 0D 0A 00            .CSTR   ")\r\n"   
4681   76                     HALT      
4682   00                     .CSTR      
4683                EXPECTM_0_2487S43:      
4683   E1                     POP   HL   
4684                          ;*Macro unroll:  test "1 2 +", 3
4684   31 80 18               LD   SP,STACK   
4687   CD AC 08               CALL   init   
468A   CD 90 08               CALL   execStr   
468D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4693                          ;*Macro unroll:  expect "1 2 +",3
4693   E1                     POP   HL   
4694   E5                     PUSH   HL   
4695   11 03 00               LD   DE,3   
4698   B7                     OR   A   
4699   ED 52                  SBC   HL,DE   
469B   7D                     LD   A,L   
469C   B4                     OR   H   
469D   28 50                  JR   Z,expectM_0_2488S43   
469F   CD 89 08               CALL   printStr   
46A2   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
46AE   CD 89 08               CALL   printStr   
46B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C0   21 03 00               LD   HL,3   
46C3   CD DD 07               CALL   prtdec   
46C6   CD 89 08               CALL   printStr   
46C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D6   E1                     POP   hl   
46D7   E5                     PUSH   hl   
46D8   CD DD 07               CALL   prtdec   
46DB   E1                     POP   hl   
46DC   CD 89 08               CALL   printStr   
46DF   20 28 23 00            .CSTR   " (#"   
46E3   CD 25 08               CALL   prthex   
46E6   CD 89 08               CALL   printStr   
46E9   29 0D 0A 00            .CSTR   ")\r\n"   
46ED   76                     HALT      
46EE   00                     .CSTR      
46EF                EXPECTM_0_2488S43:      
46EF   E1                     POP   HL   
46F0                          ;*Macro unroll:  test "123 456 +", 123+456
46F0   31 80 18               LD   SP,STACK   
46F3   CD AC 08               CALL   init   
46F6   CD 90 08               CALL   execStr   
46F9   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4703                          ;*Macro unroll:  expect "123 456 +",123+456
4703   E1                     POP   HL   
4704   E5                     PUSH   HL   
4705   11 43 02               LD   DE,123+456   
4708   B7                     OR   A   
4709   ED 52                  SBC   HL,DE   
470B   7D                     LD   A,L   
470C   B4                     OR   H   
470D   28 54                  JR   Z,expectM_0_2489S43   
470F   CD 89 08               CALL   printStr   
4712   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4722   CD 89 08               CALL   printStr   
4725   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4734   21 43 02               LD   HL,123+456   
4737   CD DD 07               CALL   prtdec   
473A   CD 89 08               CALL   printStr   
473D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
474A   E1                     POP   hl   
474B   E5                     PUSH   hl   
474C   CD DD 07               CALL   prtdec   
474F   E1                     POP   hl   
4750   CD 89 08               CALL   printStr   
4753   20 28 23 00            .CSTR   " (#"   
4757   CD 25 08               CALL   prthex   
475A   CD 89 08               CALL   printStr   
475D   29 0D 0A 00            .CSTR   ")\r\n"   
4761   76                     HALT      
4762   00                     .CSTR      
4763                EXPECTM_0_2489S43:      
4763   E1                     POP   HL   
4764                          ;*Macro unroll:  test "64 128 +", 64+128
4764   31 80 18               LD   SP,STACK   
4767   CD AC 08               CALL   init   
476A   CD 90 08               CALL   execStr   
476D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4776                          ;*Macro unroll:  expect "64 128 +",64+128
4776   E1                     POP   HL   
4777   E5                     PUSH   HL   
4778   11 C0 00               LD   DE,64+128   
477B   B7                     OR   A   
477C   ED 52                  SBC   HL,DE   
477E   7D                     LD   A,L   
477F   B4                     OR   H   
4780   28 53                  JR   Z,expectM_0_2490S43   
4782   CD 89 08               CALL   printStr   
4785   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4794   CD 89 08               CALL   printStr   
4797   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A6   21 C0 00               LD   HL,64+128   
47A9   CD DD 07               CALL   prtdec   
47AC   CD 89 08               CALL   printStr   
47AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BC   E1                     POP   hl   
47BD   E5                     PUSH   hl   
47BE   CD DD 07               CALL   prtdec   
47C1   E1                     POP   hl   
47C2   CD 89 08               CALL   printStr   
47C5   20 28 23 00            .CSTR   " (#"   
47C9   CD 25 08               CALL   prthex   
47CC   CD 89 08               CALL   printStr   
47CF   29 0D 0A 00            .CSTR   ")\r\n"   
47D3   76                     HALT      
47D4   00                     .CSTR      
47D5                EXPECTM_0_2490S43:      
47D5   E1                     POP   HL   
47D6                          ;*Macro unroll:  test "-1 -1 -",0
47D6   31 80 18               LD   SP,STACK   
47D9   CD AC 08               CALL   init   
47DC   CD 90 08               CALL   execStr   
47DF   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
47E7                          ;*Macro unroll:  expect "-1 -1 -",0
47E7   E1                     POP   HL   
47E8   E5                     PUSH   HL   
47E9   11 00 00               LD   DE,0   
47EC   B7                     OR   A   
47ED   ED 52                  SBC   HL,DE   
47EF   7D                     LD   A,L   
47F0   B4                     OR   H   
47F1   28 52                  JR   Z,expectM_0_2491S43   
47F3   CD 89 08               CALL   printStr   
47F6   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4804   CD 89 08               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 00 00               LD   HL,0   
4819   CD DD 07               CALL   prtdec   
481C   CD 89 08               CALL   printStr   
481F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482C   E1                     POP   hl   
482D   E5                     PUSH   hl   
482E   CD DD 07               CALL   prtdec   
4831   E1                     POP   hl   
4832   CD 89 08               CALL   printStr   
4835   20 28 23 00            .CSTR   " (#"   
4839   CD 25 08               CALL   prthex   
483C   CD 89 08               CALL   printStr   
483F   29 0D 0A 00            .CSTR   ")\r\n"   
4843   76                     HALT      
4844   00                     .CSTR      
4845                EXPECTM_0_2491S43:      
4845   E1                     POP   HL   
4846                          ;*Macro unroll:  test "5 3 -", 2
4846   31 80 18               LD   SP,STACK   
4849   CD AC 08               CALL   init   
484C   CD 90 08               CALL   execStr   
484F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4855                          ;*Macro unroll:  expect "5 3 -",2
4855   E1                     POP   HL   
4856   E5                     PUSH   HL   
4857   11 02 00               LD   DE,2   
485A   B7                     OR   A   
485B   ED 52                  SBC   HL,DE   
485D   7D                     LD   A,L   
485E   B4                     OR   H   
485F   28 50                  JR   Z,expectM_0_2492S43   
4861   CD 89 08               CALL   printStr   
4864   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4870   CD 89 08               CALL   printStr   
4873   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4882   21 02 00               LD   HL,2   
4885   CD DD 07               CALL   prtdec   
4888   CD 89 08               CALL   printStr   
488B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4898   E1                     POP   hl   
4899   E5                     PUSH   hl   
489A   CD DD 07               CALL   prtdec   
489D   E1                     POP   hl   
489E   CD 89 08               CALL   printStr   
48A1   20 28 23 00            .CSTR   " (#"   
48A5   CD 25 08               CALL   prthex   
48A8   CD 89 08               CALL   printStr   
48AB   29 0D 0A 00            .CSTR   ")\r\n"   
48AF   76                     HALT      
48B0   00                     .CSTR      
48B1                EXPECTM_0_2492S43:      
48B1   E1                     POP   HL   
48B2                          ;*Macro unroll:  test "3 5 &", 1
48B2   31 80 18               LD   SP,STACK   
48B5   CD AC 08               CALL   init   
48B8   CD 90 08               CALL   execStr   
48BB   33 20 35 20 26 00      .CSTR   "3 5 &"   
48C1                          ;*Macro unroll:  expect "3 5 &",1
48C1   E1                     POP   HL   
48C2   E5                     PUSH   HL   
48C3   11 01 00               LD   DE,1   
48C6   B7                     OR   A   
48C7   ED 52                  SBC   HL,DE   
48C9   7D                     LD   A,L   
48CA   B4                     OR   H   
48CB   28 50                  JR   Z,expectM_0_2493S43   
48CD   CD 89 08               CALL   printStr   
48D0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
48DC   CD 89 08               CALL   printStr   
48DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EE   21 01 00               LD   HL,1   
48F1   CD DD 07               CALL   prtdec   
48F4   CD 89 08               CALL   printStr   
48F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4904   E1                     POP   hl   
4905   E5                     PUSH   hl   
4906   CD DD 07               CALL   prtdec   
4909   E1                     POP   hl   
490A   CD 89 08               CALL   printStr   
490D   20 28 23 00            .CSTR   " (#"   
4911   CD 25 08               CALL   prthex   
4914   CD 89 08               CALL   printStr   
4917   29 0D 0A 00            .CSTR   ")\r\n"   
491B   76                     HALT      
491C   00                     .CSTR      
491D                EXPECTM_0_2493S43:      
491D   E1                     POP   HL   
491E                          ;*Macro unroll:  test "3 5 |", 7
491E   31 80 18               LD   SP,STACK   
4921   CD AC 08               CALL   init   
4924   CD 90 08               CALL   execStr   
4927   33 20 35 20 7C 00      .CSTR   "3 5 |"   
492D                          ;*Macro unroll:  expect "3 5 |",7
492D   E1                     POP   HL   
492E   E5                     PUSH   HL   
492F   11 07 00               LD   DE,7   
4932   B7                     OR   A   
4933   ED 52                  SBC   HL,DE   
4935   7D                     LD   A,L   
4936   B4                     OR   H   
4937   28 50                  JR   Z,expectM_0_2494S43   
4939   CD 89 08               CALL   printStr   
493C   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4948   CD 89 08               CALL   printStr   
494B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
495A   21 07 00               LD   HL,7   
495D   CD DD 07               CALL   prtdec   
4960   CD 89 08               CALL   printStr   
4963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4970   E1                     POP   hl   
4971   E5                     PUSH   hl   
4972   CD DD 07               CALL   prtdec   
4975   E1                     POP   hl   
4976   CD 89 08               CALL   printStr   
4979   20 28 23 00            .CSTR   " (#"   
497D   CD 25 08               CALL   prthex   
4980   CD 89 08               CALL   printStr   
4983   29 0D 0A 00            .CSTR   ")\r\n"   
4987   76                     HALT      
4988   00                     .CSTR      
4989                EXPECTM_0_2494S43:      
4989   E1                     POP   HL   
498A                          ;*Macro unroll:  test "2 3 *", 6
498A   31 80 18               LD   SP,STACK   
498D   CD AC 08               CALL   init   
4990   CD 90 08               CALL   execStr   
4993   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4999                          ;*Macro unroll:  expect "2 3 *",6
4999   E1                     POP   HL   
499A   E5                     PUSH   HL   
499B   11 06 00               LD   DE,6   
499E   B7                     OR   A   
499F   ED 52                  SBC   HL,DE   
49A1   7D                     LD   A,L   
49A2   B4                     OR   H   
49A3   28 50                  JR   Z,expectM_0_2495S43   
49A5   CD 89 08               CALL   printStr   
49A8   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
49B4   CD 89 08               CALL   printStr   
49B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C6   21 06 00               LD   HL,6   
49C9   CD DD 07               CALL   prtdec   
49CC   CD 89 08               CALL   printStr   
49CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49DC   E1                     POP   hl   
49DD   E5                     PUSH   hl   
49DE   CD DD 07               CALL   prtdec   
49E1   E1                     POP   hl   
49E2   CD 89 08               CALL   printStr   
49E5   20 28 23 00            .CSTR   " (#"   
49E9   CD 25 08               CALL   prthex   
49EC   CD 89 08               CALL   printStr   
49EF   29 0D 0A 00            .CSTR   ")\r\n"   
49F3   76                     HALT      
49F4   00                     .CSTR      
49F5                EXPECTM_0_2495S43:      
49F5   E1                     POP   HL   
49F6                          ;*Macro unroll:  test "1 2 3 + *", 5
49F6   31 80 18               LD   SP,STACK   
49F9   CD AC 08               CALL   init   
49FC   CD 90 08               CALL   execStr   
49FF   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4A09                          ;*Macro unroll:  expect "1 2 3 + *",5
4A09   E1                     POP   HL   
4A0A   E5                     PUSH   HL   
4A0B   11 05 00               LD   DE,5   
4A0E   B7                     OR   A   
4A0F   ED 52                  SBC   HL,DE   
4A11   7D                     LD   A,L   
4A12   B4                     OR   H   
4A13   28 54                  JR   Z,expectM_0_2496S43   
4A15   CD 89 08               CALL   printStr   
4A18   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4A28   CD 89 08               CALL   printStr   
4A2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3A   21 05 00               LD   HL,5   
4A3D   CD DD 07               CALL   prtdec   
4A40   CD 89 08               CALL   printStr   
4A43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A50   E1                     POP   hl   
4A51   E5                     PUSH   hl   
4A52   CD DD 07               CALL   prtdec   
4A55   E1                     POP   hl   
4A56   CD 89 08               CALL   printStr   
4A59   20 28 23 00            .CSTR   " (#"   
4A5D   CD 25 08               CALL   prthex   
4A60   CD 89 08               CALL   printStr   
4A63   29 0D 0A 00            .CSTR   ")\r\n"   
4A67   76                     HALT      
4A68   00                     .CSTR      
4A69                EXPECTM_0_2496S43:      
4A69   E1                     POP   HL   
4A6A                          ;*Macro unroll:  test "7 3 /", 2
4A6A   31 80 18               LD   SP,STACK   
4A6D   CD AC 08               CALL   init   
4A70   CD 90 08               CALL   execStr   
4A73   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4A79                          ;*Macro unroll:  expect "7 3 /",2
4A79   E1                     POP   HL   
4A7A   E5                     PUSH   HL   
4A7B   11 02 00               LD   DE,2   
4A7E   B7                     OR   A   
4A7F   ED 52                  SBC   HL,DE   
4A81   7D                     LD   A,L   
4A82   B4                     OR   H   
4A83   28 50                  JR   Z,expectM_0_2497S43   
4A85   CD 89 08               CALL   printStr   
4A88   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4A94   CD 89 08               CALL   printStr   
4A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA6   21 02 00               LD   HL,2   
4AA9   CD DD 07               CALL   prtdec   
4AAC   CD 89 08               CALL   printStr   
4AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ABC   E1                     POP   hl   
4ABD   E5                     PUSH   hl   
4ABE   CD DD 07               CALL   prtdec   
4AC1   E1                     POP   hl   
4AC2   CD 89 08               CALL   printStr   
4AC5   20 28 23 00            .CSTR   " (#"   
4AC9   CD 25 08               CALL   prthex   
4ACC   CD 89 08               CALL   printStr   
4ACF   29 0D 0A 00            .CSTR   ")\r\n"   
4AD3   76                     HALT      
4AD4   00                     .CSTR      
4AD5                EXPECTM_0_2497S43:      
4AD5   E1                     POP   HL   
4AD6                          ;*Macro unroll:  test "7 3 / frac", 1
4AD6   31 80 18               LD   SP,STACK   
4AD9   CD AC 08               CALL   init   
4ADC   CD 90 08               CALL   execStr   
4ADF   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
4AEA                          ;*Macro unroll:  expect "7 3 / frac",1
4AEA   E1                     POP   HL   
4AEB   E5                     PUSH   HL   
4AEC   11 01 00               LD   DE,1   
4AEF   B7                     OR   A   
4AF0   ED 52                  SBC   HL,DE   
4AF2   7D                     LD   A,L   
4AF3   B4                     OR   H   
4AF4   28 55                  JR   Z,expectM_0_2498S43   
4AF6   CD 89 08               CALL   printStr   
4AF9   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
4B0A   CD 89 08               CALL   printStr   
4B0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B1C   21 01 00               LD   HL,1   
4B1F   CD DD 07               CALL   prtdec   
4B22   CD 89 08               CALL   printStr   
4B25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B32   E1                     POP   hl   
4B33   E5                     PUSH   hl   
4B34   CD DD 07               CALL   prtdec   
4B37   E1                     POP   hl   
4B38   CD 89 08               CALL   printStr   
4B3B   20 28 23 00            .CSTR   " (#"   
4B3F   CD 25 08               CALL   prthex   
4B42   CD 89 08               CALL   printStr   
4B45   29 0D 0A 00            .CSTR   ")\r\n"   
4B49   76                     HALT      
4B4A   00                     .CSTR      
4B4B                EXPECTM_0_2498S43:      
4B4B   E1                     POP   HL   
4B4C                          ;*Macro unroll:  test "10 sqrt", 3
4B4C   31 80 18               LD   SP,STACK   
4B4F   CD AC 08               CALL   init   
4B52   CD 90 08               CALL   execStr   
4B55   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
4B5D                          ;*Macro unroll:  expect "10 sqrt",3
4B5D   E1                     POP   HL   
4B5E   E5                     PUSH   HL   
4B5F   11 03 00               LD   DE,3   
4B62   B7                     OR   A   
4B63   ED 52                  SBC   HL,DE   
4B65   7D                     LD   A,L   
4B66   B4                     OR   H   
4B67   28 52                  JR   Z,expectM_0_2499S43   
4B69   CD 89 08               CALL   printStr   
4B6C   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
4B7A   CD 89 08               CALL   printStr   
4B7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B8C   21 03 00               LD   HL,3   
4B8F   CD DD 07               CALL   prtdec   
4B92   CD 89 08               CALL   printStr   
4B95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA2   E1                     POP   hl   
4BA3   E5                     PUSH   hl   
4BA4   CD DD 07               CALL   prtdec   
4BA7   E1                     POP   hl   
4BA8   CD 89 08               CALL   printStr   
4BAB   20 28 23 00            .CSTR   " (#"   
4BAF   CD 25 08               CALL   prthex   
4BB2   CD 89 08               CALL   printStr   
4BB5   29 0D 0A 00            .CSTR   ")\r\n"   
4BB9   76                     HALT      
4BBA   00                     .CSTR      
4BBB                EXPECTM_0_2499S43:      
4BBB   E1                     POP   HL   
4BBC                          ;*Macro unroll:  test "10 sqrt frac", 1
4BBC   31 80 18               LD   SP,STACK   
4BBF   CD AC 08               CALL   init   
4BC2   CD 90 08               CALL   execStr   
4BC5   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4BD2                          ;*Macro unroll:  expect "10 sqrt frac",1
4BD2   E1                     POP   HL   
4BD3   E5                     PUSH   HL   
4BD4   11 01 00               LD   DE,1   
4BD7   B7                     OR   A   
4BD8   ED 52                  SBC   HL,DE   
4BDA   7D                     LD   A,L   
4BDB   B4                     OR   H   
4BDC   28 57                  JR   Z,expectM_0_2500S43   
4BDE   CD 89 08               CALL   printStr   
4BE1   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4BF4   CD 89 08               CALL   printStr   
4BF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C06   21 01 00               LD   HL,1   
4C09   CD DD 07               CALL   prtdec   
4C0C   CD 89 08               CALL   printStr   
4C0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C1C   E1                     POP   hl   
4C1D   E5                     PUSH   hl   
4C1E   CD DD 07               CALL   prtdec   
4C21   E1                     POP   hl   
4C22   CD 89 08               CALL   printStr   
4C25   20 28 23 00            .CSTR   " (#"   
4C29   CD 25 08               CALL   prthex   
4C2C   CD 89 08               CALL   printStr   
4C2F   29 0D 0A 00            .CSTR   ")\r\n"   
4C33   76                     HALT      
4C34   00                     .CSTR      
4C35                EXPECTM_0_2500S43:      
4C35   E1                     POP   HL   
4C36                          ;*Macro unroll:  test "2 3 =", FALSE
4C36   31 80 18               LD   SP,STACK   
4C39   CD AC 08               CALL   init   
4C3C   CD 90 08               CALL   execStr   
4C3F   32 20 33 20 3D 00      .CSTR   "2 3 ="   
4C45                          ;*Macro unroll:  expect "2 3 =",FALSE
4C45   E1                     POP   HL   
4C46   E5                     PUSH   HL   
4C47   11 00 00               LD   DE,FALSE   
4C4A   B7                     OR   A   
4C4B   ED 52                  SBC   HL,DE   
4C4D   7D                     LD   A,L   
4C4E   B4                     OR   H   
4C4F   28 50                  JR   Z,expectM_0_2501S43   
4C51   CD 89 08               CALL   printStr   
4C54   43 6F 64 65 3A 20 32 20 33 20 3D 00 .CSTR   "Code: ","2 3 ="   
4C60   CD 89 08               CALL   printStr   
4C63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C72   21 00 00               LD   HL,FALSE   
4C75   CD DD 07               CALL   prtdec   
4C78   CD 89 08               CALL   printStr   
4C7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C88   E1                     POP   hl   
4C89   E5                     PUSH   hl   
4C8A   CD DD 07               CALL   prtdec   
4C8D   E1                     POP   hl   
4C8E   CD 89 08               CALL   printStr   
4C91   20 28 23 00            .CSTR   " (#"   
4C95   CD 25 08               CALL   prthex   
4C98   CD 89 08               CALL   printStr   
4C9B   29 0D 0A 00            .CSTR   ")\r\n"   
4C9F   76                     HALT      
4CA0   00                     .CSTR      
4CA1                EXPECTM_0_2501S43:      
4CA1   E1                     POP   HL   
4CA2                          ;*Macro unroll:  test "3 3 =", TRUE
4CA2   31 80 18               LD   SP,STACK   
4CA5   CD AC 08               CALL   init   
4CA8   CD 90 08               CALL   execStr   
4CAB   33 20 33 20 3D 00      .CSTR   "3 3 ="   
4CB1                          ;*Macro unroll:  expect "3 3 =",TRUE
4CB1   E1                     POP   HL   
4CB2   E5                     PUSH   HL   
4CB3   11 FF FF               LD   DE,TRUE   
4CB6   B7                     OR   A   
4CB7   ED 52                  SBC   HL,DE   
4CB9   7D                     LD   A,L   
4CBA   B4                     OR   H   
4CBB   28 50                  JR   Z,expectM_0_2502S43   
4CBD   CD 89 08               CALL   printStr   
4CC0   43 6F 64 65 3A 20 33 20 33 20 3D 00 .CSTR   "Code: ","3 3 ="   
4CCC   CD 89 08               CALL   printStr   
4CCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CDE   21 FF FF               LD   HL,TRUE   
4CE1   CD DD 07               CALL   prtdec   
4CE4   CD 89 08               CALL   printStr   
4CE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CF4   E1                     POP   hl   
4CF5   E5                     PUSH   hl   
4CF6   CD DD 07               CALL   prtdec   
4CF9   E1                     POP   hl   
4CFA   CD 89 08               CALL   printStr   
4CFD   20 28 23 00            .CSTR   " (#"   
4D01   CD 25 08               CALL   prthex   
4D04   CD 89 08               CALL   printStr   
4D07   29 0D 0A 00            .CSTR   ")\r\n"   
4D0B   76                     HALT      
4D0C   00                     .CSTR      
4D0D                EXPECTM_0_2502S43:      
4D0D   E1                     POP   HL   
4D0E                          ;*Macro unroll:  test "1 2 <", TRUE
4D0E   31 80 18               LD   SP,STACK   
4D11   CD AC 08               CALL   init   
4D14   CD 90 08               CALL   execStr   
4D17   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D1D                          ;*Macro unroll:  expect "1 2 <",TRUE
4D1D   E1                     POP   HL   
4D1E   E5                     PUSH   HL   
4D1F   11 FF FF               LD   DE,TRUE   
4D22   B7                     OR   A   
4D23   ED 52                  SBC   HL,DE   
4D25   7D                     LD   A,L   
4D26   B4                     OR   H   
4D27   28 50                  JR   Z,expectM_0_2503S43   
4D29   CD 89 08               CALL   printStr   
4D2C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D38   CD 89 08               CALL   printStr   
4D3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D4A   21 FF FF               LD   HL,TRUE   
4D4D   CD DD 07               CALL   prtdec   
4D50   CD 89 08               CALL   printStr   
4D53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D60   E1                     POP   hl   
4D61   E5                     PUSH   hl   
4D62   CD DD 07               CALL   prtdec   
4D65   E1                     POP   hl   
4D66   CD 89 08               CALL   printStr   
4D69   20 28 23 00            .CSTR   " (#"   
4D6D   CD 25 08               CALL   prthex   
4D70   CD 89 08               CALL   printStr   
4D73   29 0D 0A 00            .CSTR   ")\r\n"   
4D77   76                     HALT      
4D78   00                     .CSTR      
4D79                EXPECTM_0_2503S43:      
4D79   E1                     POP   HL   
4D7A                          ;*Macro unroll:  test "2 1 <", FALSE
4D7A   31 80 18               LD   SP,STACK   
4D7D   CD AC 08               CALL   init   
4D80   CD 90 08               CALL   execStr   
4D83   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D89                          ;*Macro unroll:  expect "2 1 <",FALSE
4D89   E1                     POP   HL   
4D8A   E5                     PUSH   HL   
4D8B   11 00 00               LD   DE,FALSE   
4D8E   B7                     OR   A   
4D8F   ED 52                  SBC   HL,DE   
4D91   7D                     LD   A,L   
4D92   B4                     OR   H   
4D93   28 50                  JR   Z,expectM_0_2504S43   
4D95   CD 89 08               CALL   printStr   
4D98   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4DA4   CD 89 08               CALL   printStr   
4DA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DB6   21 00 00               LD   HL,FALSE   
4DB9   CD DD 07               CALL   prtdec   
4DBC   CD 89 08               CALL   printStr   
4DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DCC   E1                     POP   hl   
4DCD   E5                     PUSH   hl   
4DCE   CD DD 07               CALL   prtdec   
4DD1   E1                     POP   hl   
4DD2   CD 89 08               CALL   printStr   
4DD5   20 28 23 00            .CSTR   " (#"   
4DD9   CD 25 08               CALL   prthex   
4DDC   CD 89 08               CALL   printStr   
4DDF   29 0D 0A 00            .CSTR   ")\r\n"   
4DE3   76                     HALT      
4DE4   00                     .CSTR      
4DE5                EXPECTM_0_2504S43:      
4DE5   E1                     POP   HL   
4DE6                          ;*Macro unroll:  test "2 3 <", TRUE
4DE6   31 80 18               LD   SP,STACK   
4DE9   CD AC 08               CALL   init   
4DEC   CD 90 08               CALL   execStr   
4DEF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4DF5                          ;*Macro unroll:  expect "2 3 <",TRUE
4DF5   E1                     POP   HL   
4DF6   E5                     PUSH   HL   
4DF7   11 FF FF               LD   DE,TRUE   
4DFA   B7                     OR   A   
4DFB   ED 52                  SBC   HL,DE   
4DFD   7D                     LD   A,L   
4DFE   B4                     OR   H   
4DFF   28 50                  JR   Z,expectM_0_2505S43   
4E01   CD 89 08               CALL   printStr   
4E04   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E10   CD 89 08               CALL   printStr   
4E13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E22   21 FF FF               LD   HL,TRUE   
4E25   CD DD 07               CALL   prtdec   
4E28   CD 89 08               CALL   printStr   
4E2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E38   E1                     POP   hl   
4E39   E5                     PUSH   hl   
4E3A   CD DD 07               CALL   prtdec   
4E3D   E1                     POP   hl   
4E3E   CD 89 08               CALL   printStr   
4E41   20 28 23 00            .CSTR   " (#"   
4E45   CD 25 08               CALL   prthex   
4E48   CD 89 08               CALL   printStr   
4E4B   29 0D 0A 00            .CSTR   ")\r\n"   
4E4F   76                     HALT      
4E50   00                     .CSTR      
4E51                EXPECTM_0_2505S43:      
4E51   E1                     POP   HL   
4E52                          ;*Macro unroll:  test "3 3 <", FALSE
4E52   31 80 18               LD   SP,STACK   
4E55   CD AC 08               CALL   init   
4E58   CD 90 08               CALL   execStr   
4E5B   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4E61                          ;*Macro unroll:  expect "3 3 <",FALSE
4E61   E1                     POP   HL   
4E62   E5                     PUSH   HL   
4E63   11 00 00               LD   DE,FALSE   
4E66   B7                     OR   A   
4E67   ED 52                  SBC   HL,DE   
4E69   7D                     LD   A,L   
4E6A   B4                     OR   H   
4E6B   28 50                  JR   Z,expectM_0_2506S43   
4E6D   CD 89 08               CALL   printStr   
4E70   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4E7C   CD 89 08               CALL   printStr   
4E7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E8E   21 00 00               LD   HL,FALSE   
4E91   CD DD 07               CALL   prtdec   
4E94   CD 89 08               CALL   printStr   
4E97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EA4   E1                     POP   hl   
4EA5   E5                     PUSH   hl   
4EA6   CD DD 07               CALL   prtdec   
4EA9   E1                     POP   hl   
4EAA   CD 89 08               CALL   printStr   
4EAD   20 28 23 00            .CSTR   " (#"   
4EB1   CD 25 08               CALL   prthex   
4EB4   CD 89 08               CALL   printStr   
4EB7   29 0D 0A 00            .CSTR   ")\r\n"   
4EBB   76                     HALT      
4EBC   00                     .CSTR      
4EBD                EXPECTM_0_2506S43:      
4EBD   E1                     POP   HL   
4EBE                          ;*Macro unroll:  test "1 2 >", FALSE
4EBE   31 80 18               LD   SP,STACK   
4EC1   CD AC 08               CALL   init   
4EC4   CD 90 08               CALL   execStr   
4EC7   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4ECD                          ;*Macro unroll:  expect "1 2 >",FALSE
4ECD   E1                     POP   HL   
4ECE   E5                     PUSH   HL   
4ECF   11 00 00               LD   DE,FALSE   
4ED2   B7                     OR   A   
4ED3   ED 52                  SBC   HL,DE   
4ED5   7D                     LD   A,L   
4ED6   B4                     OR   H   
4ED7   28 50                  JR   Z,expectM_0_2507S43   
4ED9   CD 89 08               CALL   printStr   
4EDC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4EE8   CD 89 08               CALL   printStr   
4EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EFA   21 00 00               LD   HL,FALSE   
4EFD   CD DD 07               CALL   prtdec   
4F00   CD 89 08               CALL   printStr   
4F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F10   E1                     POP   hl   
4F11   E5                     PUSH   hl   
4F12   CD DD 07               CALL   prtdec   
4F15   E1                     POP   hl   
4F16   CD 89 08               CALL   printStr   
4F19   20 28 23 00            .CSTR   " (#"   
4F1D   CD 25 08               CALL   prthex   
4F20   CD 89 08               CALL   printStr   
4F23   29 0D 0A 00            .CSTR   ")\r\n"   
4F27   76                     HALT      
4F28   00                     .CSTR      
4F29                EXPECTM_0_2507S43:      
4F29   E1                     POP   HL   
4F2A                          ;*Macro unroll:  test "2 1 >", TRUE
4F2A   31 80 18               LD   SP,STACK   
4F2D   CD AC 08               CALL   init   
4F30   CD 90 08               CALL   execStr   
4F33   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F39                          ;*Macro unroll:  expect "2 1 >",TRUE
4F39   E1                     POP   HL   
4F3A   E5                     PUSH   HL   
4F3B   11 FF FF               LD   DE,TRUE   
4F3E   B7                     OR   A   
4F3F   ED 52                  SBC   HL,DE   
4F41   7D                     LD   A,L   
4F42   B4                     OR   H   
4F43   28 50                  JR   Z,expectM_0_2508S43   
4F45   CD 89 08               CALL   printStr   
4F48   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4F54   CD 89 08               CALL   printStr   
4F57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F66   21 FF FF               LD   HL,TRUE   
4F69   CD DD 07               CALL   prtdec   
4F6C   CD 89 08               CALL   printStr   
4F6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F7C   E1                     POP   hl   
4F7D   E5                     PUSH   hl   
4F7E   CD DD 07               CALL   prtdec   
4F81   E1                     POP   hl   
4F82   CD 89 08               CALL   printStr   
4F85   20 28 23 00            .CSTR   " (#"   
4F89   CD 25 08               CALL   prthex   
4F8C   CD 89 08               CALL   printStr   
4F8F   29 0D 0A 00            .CSTR   ")\r\n"   
4F93   76                     HALT      
4F94   00                     .CSTR      
4F95                EXPECTM_0_2508S43:      
4F95   E1                     POP   HL   
4F96                          ;*Macro unroll:  test "3 3 >", FALSE
4F96   31 80 18               LD   SP,STACK   
4F99   CD AC 08               CALL   init   
4F9C   CD 90 08               CALL   execStr   
4F9F   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4FA5                          ;*Macro unroll:  expect "3 3 >",FALSE
4FA5   E1                     POP   HL   
4FA6   E5                     PUSH   HL   
4FA7   11 00 00               LD   DE,FALSE   
4FAA   B7                     OR   A   
4FAB   ED 52                  SBC   HL,DE   
4FAD   7D                     LD   A,L   
4FAE   B4                     OR   H   
4FAF   28 50                  JR   Z,expectM_0_2509S43   
4FB1   CD 89 08               CALL   printStr   
4FB4   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4FC0   CD 89 08               CALL   printStr   
4FC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FD2   21 00 00               LD   HL,FALSE   
4FD5   CD DD 07               CALL   prtdec   
4FD8   CD 89 08               CALL   printStr   
4FDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FE8   E1                     POP   hl   
4FE9   E5                     PUSH   hl   
4FEA   CD DD 07               CALL   prtdec   
4FED   E1                     POP   hl   
4FEE   CD 89 08               CALL   printStr   
4FF1   20 28 23 00            .CSTR   " (#"   
4FF5   CD 25 08               CALL   prthex   
4FF8   CD 89 08               CALL   printStr   
4FFB   29 0D 0A 00            .CSTR   ")\r\n"   
4FFF   76                     HALT      
5000   00                     .CSTR      
5001                EXPECTM_0_2509S43:      
5001   E1                     POP   HL   
5002                          ;*Macro unroll:  test "4 3 >", TRUE
5002   31 80 18               LD   SP,STACK   
5005   CD AC 08               CALL   init   
5008   CD 90 08               CALL   execStr   
500B   34 20 33 20 3E 00      .CSTR   "4 3 >"   
5011                          ;*Macro unroll:  expect "4 3 >",TRUE
5011   E1                     POP   HL   
5012   E5                     PUSH   HL   
5013   11 FF FF               LD   DE,TRUE   
5016   B7                     OR   A   
5017   ED 52                  SBC   HL,DE   
5019   7D                     LD   A,L   
501A   B4                     OR   H   
501B   28 50                  JR   Z,expectM_0_2510S43   
501D   CD 89 08               CALL   printStr   
5020   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
502C   CD 89 08               CALL   printStr   
502F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
503E   21 FF FF               LD   HL,TRUE   
5041   CD DD 07               CALL   prtdec   
5044   CD 89 08               CALL   printStr   
5047   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5054   E1                     POP   hl   
5055   E5                     PUSH   hl   
5056   CD DD 07               CALL   prtdec   
5059   E1                     POP   hl   
505A   CD 89 08               CALL   printStr   
505D   20 28 23 00            .CSTR   " (#"   
5061   CD 25 08               CALL   prthex   
5064   CD 89 08               CALL   printStr   
5067   29 0D 0A 00            .CSTR   ")\r\n"   
506B   76                     HALT      
506C   00                     .CSTR      
506D                EXPECTM_0_2510S43:      
506D   E1                     POP   HL   
506E                          ;*Macro unroll:  test "2 2 <=", TRUE
506E   31 80 18               LD   SP,STACK   
5071   CD AC 08               CALL   init   
5074   CD 90 08               CALL   execStr   
5077   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
507E                          ;*Macro unroll:  expect "2 2 <=",TRUE
507E   E1                     POP   HL   
507F   E5                     PUSH   HL   
5080   11 FF FF               LD   DE,TRUE   
5083   B7                     OR   A   
5084   ED 52                  SBC   HL,DE   
5086   7D                     LD   A,L   
5087   B4                     OR   H   
5088   28 51                  JR   Z,expectM_0_2511S43   
508A   CD 89 08               CALL   printStr   
508D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
509A   CD 89 08               CALL   printStr   
509D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50AC   21 FF FF               LD   HL,TRUE   
50AF   CD DD 07               CALL   prtdec   
50B2   CD 89 08               CALL   printStr   
50B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50C2   E1                     POP   hl   
50C3   E5                     PUSH   hl   
50C4   CD DD 07               CALL   prtdec   
50C7   E1                     POP   hl   
50C8   CD 89 08               CALL   printStr   
50CB   20 28 23 00            .CSTR   " (#"   
50CF   CD 25 08               CALL   prthex   
50D2   CD 89 08               CALL   printStr   
50D5   29 0D 0A 00            .CSTR   ")\r\n"   
50D9   76                     HALT      
50DA   00                     .CSTR      
50DB                EXPECTM_0_2511S43:      
50DB   E1                     POP   HL   
50DC                          ;*Macro unroll:  test "2 2 >=", TRUE
50DC   31 80 18               LD   SP,STACK   
50DF   CD AC 08               CALL   init   
50E2   CD 90 08               CALL   execStr   
50E5   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
50EC                          ;*Macro unroll:  expect "2 2 >=",TRUE
50EC   E1                     POP   HL   
50ED   E5                     PUSH   HL   
50EE   11 FF FF               LD   DE,TRUE   
50F1   B7                     OR   A   
50F2   ED 52                  SBC   HL,DE   
50F4   7D                     LD   A,L   
50F5   B4                     OR   H   
50F6   28 51                  JR   Z,expectM_0_2512S43   
50F8   CD 89 08               CALL   printStr   
50FB   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
5108   CD 89 08               CALL   printStr   
510B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
511A   21 FF FF               LD   HL,TRUE   
511D   CD DD 07               CALL   prtdec   
5120   CD 89 08               CALL   printStr   
5123   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5130   E1                     POP   hl   
5131   E5                     PUSH   hl   
5132   CD DD 07               CALL   prtdec   
5135   E1                     POP   hl   
5136   CD 89 08               CALL   printStr   
5139   20 28 23 00            .CSTR   " (#"   
513D   CD 25 08               CALL   prthex   
5140   CD 89 08               CALL   printStr   
5143   29 0D 0A 00            .CSTR   ")\r\n"   
5147   76                     HALT      
5148   00                     .CSTR      
5149                EXPECTM_0_2512S43:      
5149   E1                     POP   HL   
514A                          ;*Macro unroll:  test "() -2?", $0000
514A   31 80 18               LD   SP,STACK   
514D   CD AC 08               CALL   init   
5150   CD 90 08               CALL   execStr   
5153   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
515A                          ;*Macro unroll:  expect "() -2?",$0000
515A   E1                     POP   HL   
515B   E5                     PUSH   HL   
515C   11 00 00               LD   DE,$0000   
515F   B7                     OR   A   
5160   ED 52                  SBC   HL,DE   
5162   7D                     LD   A,L   
5163   B4                     OR   H   
5164   28 51                  JR   Z,expectM_0_2513S43   
5166   CD 89 08               CALL   printStr   
5169   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
5176   CD 89 08               CALL   printStr   
5179   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5188   21 00 00               LD   HL,$0000   
518B   CD DD 07               CALL   prtdec   
518E   CD 89 08               CALL   printStr   
5191   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
519E   E1                     POP   hl   
519F   E5                     PUSH   hl   
51A0   CD DD 07               CALL   prtdec   
51A3   E1                     POP   hl   
51A4   CD 89 08               CALL   printStr   
51A7   20 28 23 00            .CSTR   " (#"   
51AB   CD 25 08               CALL   prthex   
51AE   CD 89 08               CALL   printStr   
51B1   29 0D 0A 00            .CSTR   ")\r\n"   
51B5   76                     HALT      
51B6   00                     .CSTR      
51B7                EXPECTM_0_2513S43:      
51B7   E1                     POP   HL   
51B8                          ;*Macro unroll:  test "(a) -1?", $0001
51B8   31 80 18               LD   SP,STACK   
51BB   CD AC 08               CALL   init   
51BE   CD 90 08               CALL   execStr   
51C1   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
51C9                          ;*Macro unroll:  expect "(a) -1?",$0001
51C9   E1                     POP   HL   
51CA   E5                     PUSH   HL   
51CB   11 01 00               LD   DE,$0001   
51CE   B7                     OR   A   
51CF   ED 52                  SBC   HL,DE   
51D1   7D                     LD   A,L   
51D2   B4                     OR   H   
51D3   28 52                  JR   Z,expectM_0_2514S43   
51D5   CD 89 08               CALL   printStr   
51D8   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
51E6   CD 89 08               CALL   printStr   
51E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51F8   21 01 00               LD   HL,$0001   
51FB   CD DD 07               CALL   prtdec   
51FE   CD 89 08               CALL   printStr   
5201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
520E   E1                     POP   hl   
520F   E5                     PUSH   hl   
5210   CD DD 07               CALL   prtdec   
5213   E1                     POP   hl   
5214   CD 89 08               CALL   printStr   
5217   20 28 23 00            .CSTR   " (#"   
521B   CD 25 08               CALL   prthex   
521E   CD 89 08               CALL   printStr   
5221   29 0D 0A 00            .CSTR   ")\r\n"   
5225   76                     HALT      
5226   00                     .CSTR      
5227                EXPECTM_0_2514S43:      
5227   E1                     POP   HL   
5228                          ;*Macro unroll:  test "(a:) -1?", $0001
5228   31 80 18               LD   SP,STACK   
522B   CD AC 08               CALL   init   
522E   CD 90 08               CALL   execStr   
5231   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
523A                          ;*Macro unroll:  expect "(a:) -1?",$0001
523A   E1                     POP   HL   
523B   E5                     PUSH   HL   
523C   11 01 00               LD   DE,$0001   
523F   B7                     OR   A   
5240   ED 52                  SBC   HL,DE   
5242   7D                     LD   A,L   
5243   B4                     OR   H   
5244   28 53                  JR   Z,expectM_0_2515S43   
5246   CD 89 08               CALL   printStr   
5249   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
5258   CD 89 08               CALL   printStr   
525B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
526A   21 01 00               LD   HL,$0001   
526D   CD DD 07               CALL   prtdec   
5270   CD 89 08               CALL   printStr   
5273   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5280   E1                     POP   hl   
5281   E5                     PUSH   hl   
5282   CD DD 07               CALL   prtdec   
5285   E1                     POP   hl   
5286   CD 89 08               CALL   printStr   
5289   20 28 23 00            .CSTR   " (#"   
528D   CD 25 08               CALL   prthex   
5290   CD 89 08               CALL   printStr   
5293   29 0D 0A 00            .CSTR   ")\r\n"   
5297   76                     HALT      
5298   00                     .CSTR      
5299                EXPECTM_0_2515S43:      
5299   E1                     POP   HL   
529A                          ;*Macro unroll:  test "(a:b) -1?", $0102
529A   31 80 18               LD   SP,STACK   
529D   CD AC 08               CALL   init   
52A0   CD 90 08               CALL   execStr   
52A3   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
52AD                          ;*Macro unroll:  expect "(a:b) -1?",$0102
52AD   E1                     POP   HL   
52AE   E5                     PUSH   HL   
52AF   11 02 01               LD   DE,$0102   
52B2   B7                     OR   A   
52B3   ED 52                  SBC   HL,DE   
52B5   7D                     LD   A,L   
52B6   B4                     OR   H   
52B7   28 54                  JR   Z,expectM_0_2516S43   
52B9   CD 89 08               CALL   printStr   
52BC   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
52CC   CD 89 08               CALL   printStr   
52CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52DE   21 02 01               LD   HL,$0102   
52E1   CD DD 07               CALL   prtdec   
52E4   CD 89 08               CALL   printStr   
52E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52F4   E1                     POP   hl   
52F5   E5                     PUSH   hl   
52F6   CD DD 07               CALL   prtdec   
52F9   E1                     POP   hl   
52FA   CD 89 08               CALL   printStr   
52FD   20 28 23 00            .CSTR   " (#"   
5301   CD 25 08               CALL   prthex   
5304   CD 89 08               CALL   printStr   
5307   29 0D 0A 00            .CSTR   ")\r\n"   
530B   76                     HALT      
530C   00                     .CSTR      
530D                EXPECTM_0_2516S43:      
530D   E1                     POP   HL   
530E                          ;*Macro unroll:  test "(:b) -1?", $0101
530E   31 80 18               LD   SP,STACK   
5311   CD AC 08               CALL   init   
5314   CD 90 08               CALL   execStr   
5317   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
5320                          ;*Macro unroll:  expect "(:b) -1?",$0101
5320   E1                     POP   HL   
5321   E5                     PUSH   HL   
5322   11 01 01               LD   DE,$0101   
5325   B7                     OR   A   
5326   ED 52                  SBC   HL,DE   
5328   7D                     LD   A,L   
5329   B4                     OR   H   
532A   28 53                  JR   Z,expectM_0_2517S43   
532C   CD 89 08               CALL   printStr   
532F   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
533E   CD 89 08               CALL   printStr   
5341   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5350   21 01 01               LD   HL,$0101   
5353   CD DD 07               CALL   prtdec   
5356   CD 89 08               CALL   printStr   
5359   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5366   E1                     POP   hl   
5367   E5                     PUSH   hl   
5368   CD DD 07               CALL   prtdec   
536B   E1                     POP   hl   
536C   CD 89 08               CALL   printStr   
536F   20 28 23 00            .CSTR   " (#"   
5373   CD 25 08               CALL   prthex   
5376   CD 89 08               CALL   printStr   
5379   29 0D 0A 00            .CSTR   ")\r\n"   
537D   76                     HALT      
537E   00                     .CSTR      
537F                EXPECTM_0_2517S43:      
537F   E1                     POP   HL   
5380                          ;*Macro unroll:  test ":x 20 let 100 x set x", 100
5380   31 80 18               LD   SP,STACK   
5383   CD AC 08               CALL   init   
5386   CD 90 08               CALL   execStr   
5389   3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   ":x 20 let 100 x set x"   
539F                          ;*Macro unroll:  expect ":x 20 let 100 x set x",100
539F   E1                     POP   HL   
53A0   E5                     PUSH   HL   
53A1   11 64 00               LD   DE,100   
53A4   B7                     OR   A   
53A5   ED 52                  SBC   HL,DE   
53A7   7D                     LD   A,L   
53A8   B4                     OR   H   
53A9   28 60                  JR   Z,expectM_0_2518S43   
53AB   CD 89 08               CALL   printStr   
53AE   43 6F 64 65 3A 20 3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 20 let 100 x set x"   
53CA   CD 89 08               CALL   printStr   
53CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53DC   21 64 00               LD   HL,100   
53DF   CD DD 07               CALL   prtdec   
53E2   CD 89 08               CALL   printStr   
53E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53F2   E1                     POP   hl   
53F3   E5                     PUSH   hl   
53F4   CD DD 07               CALL   prtdec   
53F7   E1                     POP   hl   
53F8   CD 89 08               CALL   printStr   
53FB   20 28 23 00            .CSTR   " (#"   
53FF   CD 25 08               CALL   prthex   
5402   CD 89 08               CALL   printStr   
5405   29 0D 0A 00            .CSTR   ")\r\n"   
5409   76                     HALT      
540A   00                     .CSTR      
540B                EXPECTM_0_2518S43:      
540B   E1                     POP   HL   
540C                          ;*Macro unroll:  test "[10 20 30] 1?", 20
540C   31 80 18               LD   SP,STACK   
540F   CD AC 08               CALL   init   
5412   CD 90 08               CALL   execStr   
5415   5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "[10 20 30] 1?"   
5423                          ;*Macro unroll:  expect "[10 20 30] 1?",20
5423   E1                     POP   HL   
5424   E5                     PUSH   HL   
5425   11 14 00               LD   DE,20   
5428   B7                     OR   A   
5429   ED 52                  SBC   HL,DE   
542B   7D                     LD   A,L   
542C   B4                     OR   H   
542D   28 58                  JR   Z,expectM_0_2519S43   
542F   CD 89 08               CALL   printStr   
5432   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "Code: ","[10 20 30] 1?"   
5446   CD 89 08               CALL   printStr   
5449   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5458   21 14 00               LD   HL,20   
545B   CD DD 07               CALL   prtdec   
545E   CD 89 08               CALL   printStr   
5461   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
546E   E1                     POP   hl   
546F   E5                     PUSH   hl   
5470   CD DD 07               CALL   prtdec   
5473   E1                     POP   hl   
5474   CD 89 08               CALL   printStr   
5477   20 28 23 00            .CSTR   " (#"   
547B   CD 25 08               CALL   prthex   
547E   CD 89 08               CALL   printStr   
5481   29 0D 0A 00            .CSTR   ")\r\n"   
5485   76                     HALT      
5486   00                     .CSTR      
5487                EXPECTM_0_2519S43:      
5487   E1                     POP   HL   
5488                          ;*Macro unroll:  test ":x [10 20 30] let 50 x 1? set x 1?", 50
5488   31 80 18               LD   SP,STACK   
548B   CD AC 08               CALL   init   
548E   CD 90 08               CALL   execStr   
5491   3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   ":x [10 20 30] let 50 x 1? set x 1?"   
54B4                          ;*Macro unroll:  expect ":x [10 20 30] let 50 x 1? set x 1?",50
54B4   E1                     POP   HL   
54B5   E5                     PUSH   HL   
54B6   11 32 00               LD   DE,50   
54B9   B7                     OR   A   
54BA   ED 52                  SBC   HL,DE   
54BC   7D                     LD   A,L   
54BD   B4                     OR   H   
54BE   28 6D                  JR   Z,expectM_0_2520S43   
54C0   CD 89 08               CALL   printStr   
54C3   43 6F 64 65 3A 20 3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   "Code: ",":x [10 20 30] let 50 x 1? set x 1?"   
54EC   CD 89 08               CALL   printStr   
54EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54FE   21 32 00               LD   HL,50   
5501   CD DD 07               CALL   prtdec   
5504   CD 89 08               CALL   printStr   
5507   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5514   E1                     POP   hl   
5515   E5                     PUSH   hl   
5516   CD DD 07               CALL   prtdec   
5519   E1                     POP   hl   
551A   CD 89 08               CALL   printStr   
551D   20 28 23 00            .CSTR   " (#"   
5521   CD 25 08               CALL   prthex   
5524   CD 89 08               CALL   printStr   
5527   29 0D 0A 00            .CSTR   ")\r\n"   
552B   76                     HALT      
552C   00                     .CSTR      
552D                EXPECTM_0_2520S43:      
552D   E1                     POP   HL   
552E                          ;*Macro unroll:  test "bytes [1 2 3] 1?", 2
552E   31 80 18               LD   SP,STACK   
5531   CD AC 08               CALL   init   
5534   CD 90 08               CALL   execStr   
5537   62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "bytes [1 2 3] 1?"   
5548                          ;*Macro unroll:  expect "bytes [1 2 3] 1?",2
5548   E1                     POP   HL   
5549   E5                     PUSH   HL   
554A   11 02 00               LD   DE,2   
554D   B7                     OR   A   
554E   ED 52                  SBC   HL,DE   
5550   7D                     LD   A,L   
5551   B4                     OR   H   
5552   28 5B                  JR   Z,expectM_0_2521S43   
5554   CD 89 08               CALL   printStr   
5557   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "Code: ","bytes [1 2 3] 1?"   
556E   CD 89 08               CALL   printStr   
5571   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5580   21 02 00               LD   HL,2   
5583   CD DD 07               CALL   prtdec   
5586   CD 89 08               CALL   printStr   
5589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5596   E1                     POP   hl   
5597   E5                     PUSH   hl   
5598   CD DD 07               CALL   prtdec   
559B   E1                     POP   hl   
559C   CD 89 08               CALL   printStr   
559F   20 28 23 00            .CSTR   " (#"   
55A3   CD 25 08               CALL   prthex   
55A6   CD 89 08               CALL   printStr   
55A9   29 0D 0A 00            .CSTR   ")\r\n"   
55AD   76                     HALT      
55AE   00                     .CSTR      
55AF                EXPECTM_0_2521S43:      
55AF   E1                     POP   HL   
55B0                          ;*Macro unroll:  test "bytes :x [1 2 3] let x 1?", 2
55B0   31 80 18               LD   SP,STACK   
55B3   CD AC 08               CALL   init   
55B6   CD 90 08               CALL   execStr   
55B9   62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "bytes :x [1 2 3] let x 1?"   
55D3                          ;*Macro unroll:  expect "bytes :x [1 2 3] let x 1?",2
55D3   E1                     POP   HL   
55D4   E5                     PUSH   HL   
55D5   11 02 00               LD   DE,2   
55D8   B7                     OR   A   
55D9   ED 52                  SBC   HL,DE   
55DB   7D                     LD   A,L   
55DC   B4                     OR   H   
55DD   28 64                  JR   Z,expectM_0_2522S43   
55DF   CD 89 08               CALL   printStr   
55E2   43 6F 64 65 3A 20 62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "Code: ","bytes :x [1 2 3] let x 1?"   
5602   CD 89 08               CALL   printStr   
5605   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5614   21 02 00               LD   HL,2   
5617   CD DD 07               CALL   prtdec   
561A   CD 89 08               CALL   printStr   
561D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
562A   E1                     POP   hl   
562B   E5                     PUSH   hl   
562C   CD DD 07               CALL   prtdec   
562F   E1                     POP   hl   
5630   CD 89 08               CALL   printStr   
5633   20 28 23 00            .CSTR   " (#"   
5637   CD 25 08               CALL   prthex   
563A   CD 89 08               CALL   printStr   
563D   29 0D 0A 00            .CSTR   ")\r\n"   
5641   76                     HALT      
5642   00                     .CSTR      
5643                EXPECTM_0_2522S43:      
5643   E1                     POP   HL   
5644                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1?", 66
5644   31 80 18               LD   SP,STACK   
5647   CD AC 08               CALL   init   
564A   CD 90 08               CALL   execStr   
564D   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1?"   
5664                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1?",66
5664   E1                     POP   HL   
5665   E5                     PUSH   HL   
5666   11 42 00               LD   DE,66   
5669   B7                     OR   A   
566A   ED 52                  SBC   HL,DE   
566C   7D                     LD   A,L   
566D   B4                     OR   H   
566E   28 61                  JR   Z,expectM_0_2523S43   
5670   CD 89 08               CALL   printStr   
5673   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1?"   
5690   CD 89 08               CALL   printStr   
5693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56A2   21 42 00               LD   HL,66   
56A5   CD DD 07               CALL   prtdec   
56A8   CD 89 08               CALL   printStr   
56AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56B8   E1                     POP   hl   
56B9   E5                     PUSH   hl   
56BA   CD DD 07               CALL   prtdec   
56BD   E1                     POP   hl   
56BE   CD 89 08               CALL   printStr   
56C1   20 28 23 00            .CSTR   " (#"   
56C5   CD 25 08               CALL   prthex   
56C8   CD 89 08               CALL   printStr   
56CB   29 0D 0A 00            .CSTR   ")\r\n"   
56CF   76                     HALT      
56D0   00                     .CSTR      
56D1                EXPECTM_0_2523S43:      
56D1   E1                     POP   HL   
56D2                          ;*Macro unroll:  test ":x (a) {2} def 1 x", 2
56D2   31 80 18               LD   SP,STACK   
56D5   CD AC 08               CALL   init   
56D8   CD 90 08               CALL   execStr   
56DB   3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a) {2} def 1 x"   
56EE                          ;*Macro unroll:  expect ":x (a) {2} def 1 x",2
56EE   E1                     POP   HL   
56EF   E5                     PUSH   HL   
56F0   11 02 00               LD   DE,2   
56F3   B7                     OR   A   
56F4   ED 52                  SBC   HL,DE   
56F6   7D                     LD   A,L   
56F7   B4                     OR   H   
56F8   28 5D                  JR   Z,expectM_0_2524S43   
56FA   CD 89 08               CALL   printStr   
56FD   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a) {2} def 1 x"   
5716   CD 89 08               CALL   printStr   
5719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5728   21 02 00               LD   HL,2   
572B   CD DD 07               CALL   prtdec   
572E   CD 89 08               CALL   printStr   
5731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
573E   E1                     POP   hl   
573F   E5                     PUSH   hl   
5740   CD DD 07               CALL   prtdec   
5743   E1                     POP   hl   
5744   CD 89 08               CALL   printStr   
5747   20 28 23 00            .CSTR   " (#"   
574B   CD 25 08               CALL   prthex   
574E   CD 89 08               CALL   printStr   
5751   29 0D 0A 00            .CSTR   ")\r\n"   
5755   76                     HALT      
5756   00                     .CSTR      
5757                EXPECTM_0_2524S43:      
5757   E1                     POP   HL   
5758                          ;*Macro unroll:  test ":x (a) {$a} def 1 x", 1
5758   31 80 18               LD   SP,STACK   
575B   CD AC 08               CALL   init   
575E   CD 90 08               CALL   execStr   
5761   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a) {$a} def 1 x"   
5775                          ;*Macro unroll:  expect ":x (a) {$a} def 1 x",1
5775   E1                     POP   HL   
5776   E5                     PUSH   HL   
5777   11 01 00               LD   DE,1   
577A   B7                     OR   A   
577B   ED 52                  SBC   HL,DE   
577D   7D                     LD   A,L   
577E   B4                     OR   H   
577F   28 5E                  JR   Z,expectM_0_2525S43   
5781   CD 89 08               CALL   printStr   
5784   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 1 x"   
579E   CD 89 08               CALL   printStr   
57A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57B0   21 01 00               LD   HL,1   
57B3   CD DD 07               CALL   prtdec   
57B6   CD 89 08               CALL   printStr   
57B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57C6   E1                     POP   hl   
57C7   E5                     PUSH   hl   
57C8   CD DD 07               CALL   prtdec   
57CB   E1                     POP   hl   
57CC   CD 89 08               CALL   printStr   
57CF   20 28 23 00            .CSTR   " (#"   
57D3   CD 25 08               CALL   prthex   
57D6   CD 89 08               CALL   printStr   
57D9   29 0D 0A 00            .CSTR   ")\r\n"   
57DD   76                     HALT      
57DE   00                     .CSTR      
57DF                EXPECTM_0_2525S43:      
57DF   E1                     POP   HL   
57E0                          ;*Macro unroll:  test ":x (a) {$a} def 1 2 x", 1
57E0   31 80 18               LD   SP,STACK   
57E3   CD AC 08               CALL   init   
57E6   CD 90 08               CALL   execStr   
57E9   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (a) {$a} def 1 2 x"   
57FF                          ;*Macro unroll:  expect ":x (a) {$a} def 1 2 x",1
57FF   E1                     POP   HL   
5800   E5                     PUSH   HL   
5801   11 01 00               LD   DE,1   
5804   B7                     OR   A   
5805   ED 52                  SBC   HL,DE   
5807   7D                     LD   A,L   
5808   B4                     OR   H   
5809   28 60                  JR   Z,expectM_0_2526S43   
580B   CD 89 08               CALL   printStr   
580E   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 1 2 x"   
582A   CD 89 08               CALL   printStr   
582D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
583C   21 01 00               LD   HL,1   
583F   CD DD 07               CALL   prtdec   
5842   CD 89 08               CALL   printStr   
5845   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5852   E1                     POP   hl   
5853   E5                     PUSH   hl   
5854   CD DD 07               CALL   prtdec   
5857   E1                     POP   hl   
5858   CD 89 08               CALL   printStr   
585B   20 28 23 00            .CSTR   " (#"   
585F   CD 25 08               CALL   prthex   
5862   CD 89 08               CALL   printStr   
5865   29 0D 0A 00            .CSTR   ")\r\n"   
5869   76                     HALT      
586A   00                     .CSTR      
586B                EXPECTM_0_2526S43:      
586B   E1                     POP   HL   
586C                          ;*Macro unroll:  test ":x (ab) {$b} def 1 2 x", 2
586C   31 80 18               LD   SP,STACK   
586F   CD AC 08               CALL   init   
5872   CD 90 08               CALL   execStr   
5875   3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (ab) {$b} def 1 2 x"   
588C                          ;*Macro unroll:  expect ":x (ab) {$b} def 1 2 x",2
588C   E1                     POP   HL   
588D   E5                     PUSH   HL   
588E   11 02 00               LD   DE,2   
5891   B7                     OR   A   
5892   ED 52                  SBC   HL,DE   
5894   7D                     LD   A,L   
5895   B4                     OR   H   
5896   28 61                  JR   Z,expectM_0_2527S43   
5898   CD 89 08               CALL   printStr   
589B   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (ab) {$b} def 1 2 x"   
58B8   CD 89 08               CALL   printStr   
58BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58CA   21 02 00               LD   HL,2   
58CD   CD DD 07               CALL   prtdec   
58D0   CD 89 08               CALL   printStr   
58D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58E0   E1                     POP   hl   
58E1   E5                     PUSH   hl   
58E2   CD DD 07               CALL   prtdec   
58E5   E1                     POP   hl   
58E6   CD 89 08               CALL   printStr   
58E9   20 28 23 00            .CSTR   " (#"   
58ED   CD 25 08               CALL   prthex   
58F0   CD 89 08               CALL   printStr   
58F3   29 0D 0A 00            .CSTR   ")\r\n"   
58F7   76                     HALT      
58F8   00                     .CSTR      
58F9                EXPECTM_0_2527S43:      
58F9   E1                     POP   HL   
58FA                          ;*Macro unroll:  test ":x (ab) {$b $a} def 10 15 x -", 5
58FA   31 80 18               LD   SP,STACK   
58FD   CD AC 08               CALL   init   
5900   CD 90 08               CALL   execStr   
5903   3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   ":x (ab) {$b $a} def 10 15 x -"   
5921                          ;*Macro unroll:  expect ":x (ab) {$b $a} def 10 15 x -",5
5921   E1                     POP   HL   
5922   E5                     PUSH   HL   
5923   11 05 00               LD   DE,5   
5926   B7                     OR   A   
5927   ED 52                  SBC   HL,DE   
5929   7D                     LD   A,L   
592A   B4                     OR   H   
592B   28 68                  JR   Z,expectM_0_2528S43   
592D   CD 89 08               CALL   printStr   
5930   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   "Code: ",":x (ab) {$b $a} def 10 15 x -"   
5954   CD 89 08               CALL   printStr   
5957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5966   21 05 00               LD   HL,5   
5969   CD DD 07               CALL   prtdec   
596C   CD 89 08               CALL   printStr   
596F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
597C   E1                     POP   hl   
597D   E5                     PUSH   hl   
597E   CD DD 07               CALL   prtdec   
5981   E1                     POP   hl   
5982   CD 89 08               CALL   printStr   
5985   20 28 23 00            .CSTR   " (#"   
5989   CD 25 08               CALL   prthex   
598C   CD 89 08               CALL   printStr   
598F   29 0D 0A 00            .CSTR   ")\r\n"   
5993   76                     HALT      
5994   00                     .CSTR      
5995                EXPECTM_0_2528S43:      
5995   E1                     POP   HL   
5996                          ;*Macro unroll:  test ":x (a:b) {2} def 1 x", 2
5996   31 80 18               LD   SP,STACK   
5999   CD AC 08               CALL   init   
599C   CD 90 08               CALL   execStr   
599F   3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a:b) {2} def 1 x"   
59B4                          ;*Macro unroll:  expect ":x (a:b) {2} def 1 x",2
59B4   E1                     POP   HL   
59B5   E5                     PUSH   HL   
59B6   11 02 00               LD   DE,2   
59B9   B7                     OR   A   
59BA   ED 52                  SBC   HL,DE   
59BC   7D                     LD   A,L   
59BD   B4                     OR   H   
59BE   28 5F                  JR   Z,expectM_0_2529S43   
59C0   CD 89 08               CALL   printStr   
59C3   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a:b) {2} def 1 x"   
59DE   CD 89 08               CALL   printStr   
59E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59F0   21 02 00               LD   HL,2   
59F3   CD DD 07               CALL   prtdec   
59F6   CD 89 08               CALL   printStr   
59F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A06   E1                     POP   hl   
5A07   E5                     PUSH   hl   
5A08   CD DD 07               CALL   prtdec   
5A0B   E1                     POP   hl   
5A0C   CD 89 08               CALL   printStr   
5A0F   20 28 23 00            .CSTR   " (#"   
5A13   CD 25 08               CALL   prthex   
5A16   CD 89 08               CALL   printStr   
5A19   29 0D 0A 00            .CSTR   ")\r\n"   
5A1D   76                     HALT      
5A1E   00                     .CSTR      
5A1F                EXPECTM_0_2529S43:      
5A1F   E1                     POP   HL   
5A20                          ;*Macro unroll:  test ":x (:b) {100 $b set $b} def x", 100
5A20   31 80 18               LD   SP,STACK   
5A23   CD AC 08               CALL   init   
5A26   CD 90 08               CALL   execStr   
5A29   3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   ":x (:b) {100 $b set $b} def x"   
5A47                          ;*Macro unroll:  expect ":x (:b) {100 $b set $b} def x",100
5A47   E1                     POP   HL   
5A48   E5                     PUSH   HL   
5A49   11 64 00               LD   DE,100   
5A4C   B7                     OR   A   
5A4D   ED 52                  SBC   HL,DE   
5A4F   7D                     LD   A,L   
5A50   B4                     OR   H   
5A51   28 68                  JR   Z,expectM_0_2530S43   
5A53   CD 89 08               CALL   printStr   
5A56   43 6F 64 65 3A 20 3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x (:b) {100 $b set $b} def x"   
5A7A   CD 89 08               CALL   printStr   
5A7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A8C   21 64 00               LD   HL,100   
5A8F   CD DD 07               CALL   prtdec   
5A92   CD 89 08               CALL   printStr   
5A95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AA2   E1                     POP   hl   
5AA3   E5                     PUSH   hl   
5AA4   CD DD 07               CALL   prtdec   
5AA7   E1                     POP   hl   
5AA8   CD 89 08               CALL   printStr   
5AAB   20 28 23 00            .CSTR   " (#"   
5AAF   CD 25 08               CALL   prthex   
5AB2   CD 89 08               CALL   printStr   
5AB5   29 0D 0A 00            .CSTR   ")\r\n"   
5AB9   76                     HALT      
5ABA   00                     .CSTR      
5ABB                EXPECTM_0_2530S43:      
5ABB   E1                     POP   HL   
5ABC                          ;*Macro unroll:  test ":x (a:b) {1 $b set $b} def 2 x", 1
5ABC   31 80 18               LD   SP,STACK   
5ABF   CD AC 08               CALL   init   
5AC2   CD 90 08               CALL   execStr   
5AC5   3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {1 $b set $b} def 2 x"   
5AE4                          ;*Macro unroll:  expect ":x (a:b) {1 $b set $b} def 2 x",1
5AE4   E1                     POP   HL   
5AE5   E5                     PUSH   HL   
5AE6   11 01 00               LD   DE,1   
5AE9   B7                     OR   A   
5AEA   ED 52                  SBC   HL,DE   
5AEC   7D                     LD   A,L   
5AED   B4                     OR   H   
5AEE   28 69                  JR   Z,expectM_0_2531S43   
5AF0   CD 89 08               CALL   printStr   
5AF3   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {1 $b set $b} def 2 x"   
5B18   CD 89 08               CALL   printStr   
5B1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B2A   21 01 00               LD   HL,1   
5B2D   CD DD 07               CALL   prtdec   
5B30   CD 89 08               CALL   printStr   
5B33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B40   E1                     POP   hl   
5B41   E5                     PUSH   hl   
5B42   CD DD 07               CALL   prtdec   
5B45   E1                     POP   hl   
5B46   CD 89 08               CALL   printStr   
5B49   20 28 23 00            .CSTR   " (#"   
5B4D   CD 25 08               CALL   prthex   
5B50   CD 89 08               CALL   printStr   
5B53   29 0D 0A 00            .CSTR   ")\r\n"   
5B57   76                     HALT      
5B58   00                     .CSTR      
5B59                EXPECTM_0_2531S43:      
5B59   E1                     POP   HL   
5B5A                          ;*Macro unroll:  test ":x (a:b) {$a $b set $b} def 2 x", 2
5B5A   31 80 18               LD   SP,STACK   
5B5D   CD AC 08               CALL   init   
5B60   CD 90 08               CALL   execStr   
5B63   3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {$a $b set $b} def 2 x"   
5B83                          ;*Macro unroll:  expect ":x (a:b) {$a $b set $b} def 2 x",2
5B83   E1                     POP   HL   
5B84   E5                     PUSH   HL   
5B85   11 02 00               LD   DE,2   
5B88   B7                     OR   A   
5B89   ED 52                  SBC   HL,DE   
5B8B   7D                     LD   A,L   
5B8C   B4                     OR   H   
5B8D   28 6A                  JR   Z,expectM_0_2532S43   
5B8F   CD 89 08               CALL   printStr   
5B92   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {$a $b set $b} def 2 x"   
5BB8   CD 89 08               CALL   printStr   
5BBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BCA   21 02 00               LD   HL,2   
5BCD   CD DD 07               CALL   prtdec   
5BD0   CD 89 08               CALL   printStr   
5BD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5BE0   E1                     POP   hl   
5BE1   E5                     PUSH   hl   
5BE2   CD DD 07               CALL   prtdec   
5BE5   E1                     POP   hl   
5BE6   CD 89 08               CALL   printStr   
5BE9   20 28 23 00            .CSTR   " (#"   
5BED   CD 25 08               CALL   prthex   
5BF0   CD 89 08               CALL   printStr   
5BF3   29 0D 0A 00            .CSTR   ")\r\n"   
5BF7   76                     HALT      
5BF8   00                     .CSTR      
5BF9                EXPECTM_0_2532S43:      
5BF9   E1                     POP   HL   
5BFA                          ;*Macro unroll:  test "{1} exec", 1
5BFA   31 80 18               LD   SP,STACK   
5BFD   CD AC 08               CALL   init   
5C00   CD 90 08               CALL   execStr   
5C03   7B 31 7D 20 65 78 65 63 00 .CSTR   "{1} exec"   
5C0C                          ;*Macro unroll:  expect "{1} exec",1
5C0C   E1                     POP   HL   
5C0D   E5                     PUSH   HL   
5C0E   11 01 00               LD   DE,1   
5C11   B7                     OR   A   
5C12   ED 52                  SBC   HL,DE   
5C14   7D                     LD   A,L   
5C15   B4                     OR   H   
5C16   28 53                  JR   Z,expectM_0_2533S43   
5C18   CD 89 08               CALL   printStr   
5C1B   43 6F 64 65 3A 20 7B 31 7D 20 65 78 65 63 00 .CSTR   "Code: ","{1} exec"   
5C2A   CD 89 08               CALL   printStr   
5C2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C3C   21 01 00               LD   HL,1   
5C3F   CD DD 07               CALL   prtdec   
5C42   CD 89 08               CALL   printStr   
5C45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C52   E1                     POP   hl   
5C53   E5                     PUSH   hl   
5C54   CD DD 07               CALL   prtdec   
5C57   E1                     POP   hl   
5C58   CD 89 08               CALL   printStr   
5C5B   20 28 23 00            .CSTR   " (#"   
5C5F   CD 25 08               CALL   prthex   
5C62   CD 89 08               CALL   printStr   
5C65   29 0D 0A 00            .CSTR   ")\r\n"   
5C69   76                     HALT      
5C6A   00                     .CSTR      
5C6B                EXPECTM_0_2533S43:      
5C6B   E1                     POP   HL   
5C6C                          ;*Macro unroll:  test "{{{1} exec} exec} exec", 1
5C6C   31 80 18               LD   SP,STACK   
5C6F   CD AC 08               CALL   init   
5C72   CD 90 08               CALL   execStr   
5C75   7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{{1} exec} exec} exec"   
5C8C                          ;*Macro unroll:  expect "{{{1} exec} exec} exec",1
5C8C   E1                     POP   HL   
5C8D   E5                     PUSH   HL   
5C8E   11 01 00               LD   DE,1   
5C91   B7                     OR   A   
5C92   ED 52                  SBC   HL,DE   
5C94   7D                     LD   A,L   
5C95   B4                     OR   H   
5C96   28 61                  JR   Z,expectM_0_2534S43   
5C98   CD 89 08               CALL   printStr   
5C9B   43 6F 64 65 3A 20 7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{{1} exec} exec} exec"   
5CB8   CD 89 08               CALL   printStr   
5CBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5CCA   21 01 00               LD   HL,1   
5CCD   CD DD 07               CALL   prtdec   
5CD0   CD 89 08               CALL   printStr   
5CD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5CE0   E1                     POP   hl   
5CE1   E5                     PUSH   hl   
5CE2   CD DD 07               CALL   prtdec   
5CE5   E1                     POP   hl   
5CE6   CD 89 08               CALL   printStr   
5CE9   20 28 23 00            .CSTR   " (#"   
5CED   CD 25 08               CALL   prthex   
5CF0   CD 89 08               CALL   printStr   
5CF3   29 0D 0A 00            .CSTR   ")\r\n"   
5CF7   76                     HALT      
5CF8   00                     .CSTR      
5CF9                EXPECTM_0_2534S43:      
5CF9   E1                     POP   HL   
5CFA                          ;*Macro unroll:  test "5 (a) {$a} func call", 5
5CFA   31 80 18               LD   SP,STACK   
5CFD   CD AC 08               CALL   init   
5D00   CD 90 08               CALL   execStr   
5D03   35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "5 (a) {$a} func call"   
5D18                          ;*Macro unroll:  expect "5 (a) {$a} func call",5
5D18   E1                     POP   HL   
5D19   E5                     PUSH   HL   
5D1A   11 05 00               LD   DE,5   
5D1D   B7                     OR   A   
5D1E   ED 52                  SBC   HL,DE   
5D20   7D                     LD   A,L   
5D21   B4                     OR   H   
5D22   28 5F                  JR   Z,expectM_0_2535S43   
5D24   CD 89 08               CALL   printStr   
5D27   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","5 (a) {$a} func call"   
5D42   CD 89 08               CALL   printStr   
5D45   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D54   21 05 00               LD   HL,5   
5D57   CD DD 07               CALL   prtdec   
5D5A   CD 89 08               CALL   printStr   
5D5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D6A   E1                     POP   hl   
5D6B   E5                     PUSH   hl   
5D6C   CD DD 07               CALL   prtdec   
5D6F   E1                     POP   hl   
5D70   CD 89 08               CALL   printStr   
5D73   20 28 23 00            .CSTR   " (#"   
5D77   CD 25 08               CALL   prthex   
5D7A   CD 89 08               CALL   printStr   
5D7D   29 0D 0A 00            .CSTR   ")\r\n"   
5D81   76                     HALT      
5D82   00                     .CSTR      
5D83                EXPECTM_0_2535S43:      
5D83   E1                     POP   HL   
5D84                          ;*Macro unroll:  test "5 (a) {{1} exec} func call", 1
5D84   31 80 18               LD   SP,STACK   
5D87   CD AC 08               CALL   init   
5D8A   CD 90 08               CALL   execStr   
5D8D   35 20 28 61 29 20 7B 7B 31 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "5 (a) {{1} exec} func call"   
5DA8                          ;*Macro unroll:  expect "5 (a) {{1} exec} func call",1
5DA8   E1                     POP   HL   
5DA9   E5                     PUSH   HL   
5DAA   11 01 00               LD   DE,1   
5DAD   B7                     OR   A   
5DAE   ED 52                  SBC   HL,DE   
5DB0   7D                     LD   A,L   
5DB1   B4                     OR   H   
5DB2   28 65                  JR   Z,expectM_0_2536S43   
5DB4   CD 89 08               CALL   printStr   
5DB7   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 7B 31 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","5 (a) {{1} exec} func call"   
5DD8   CD 89 08               CALL   printStr   
5DDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5DEA   21 01 00               LD   HL,1   
5DED   CD DD 07               CALL   prtdec   
5DF0   CD 89 08               CALL   printStr   
5DF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E00   E1                     POP   hl   
5E01   E5                     PUSH   hl   
5E02   CD DD 07               CALL   prtdec   
5E05   E1                     POP   hl   
5E06   CD 89 08               CALL   printStr   
5E09   20 28 23 00            .CSTR   " (#"   
5E0D   CD 25 08               CALL   prthex   
5E10   CD 89 08               CALL   printStr   
5E13   29 0D 0A 00            .CSTR   ")\r\n"   
5E17   76                     HALT      
5E18   00                     .CSTR      
5E19                EXPECTM_0_2536S43:      
5E19   E1                     POP   HL   
5E1A                          ;*Macro unroll:  test "5 (a) {{$a} exec} func call", 5
5E1A   31 80 18               LD   SP,STACK   
5E1D   CD AC 08               CALL   init   
5E20   CD 90 08               CALL   execStr   
5E23   35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "5 (a) {{$a} exec} func call"   
5E3F                          ;*Macro unroll:  expect "5 (a) {{$a} exec} func call",5
5E3F   E1                     POP   HL   
5E40   E5                     PUSH   HL   
5E41   11 05 00               LD   DE,5   
5E44   B7                     OR   A   
5E45   ED 52                  SBC   HL,DE   
5E47   7D                     LD   A,L   
5E48   B4                     OR   H   
5E49   28 66                  JR   Z,expectM_0_2537S43   
5E4B   CD 89 08               CALL   printStr   
5E4E   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","5 (a) {{$a} exec} func call"   
5E70   CD 89 08               CALL   printStr   
5E73   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E82   21 05 00               LD   HL,5   
5E85   CD DD 07               CALL   prtdec   
5E88   CD 89 08               CALL   printStr   
5E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E98   E1                     POP   hl   
5E99   E5                     PUSH   hl   
5E9A   CD DD 07               CALL   prtdec   
5E9D   E1                     POP   hl   
5E9E   CD 89 08               CALL   printStr   
5EA1   20 28 23 00            .CSTR   " (#"   
5EA5   CD 25 08               CALL   prthex   
5EA8   CD 89 08               CALL   printStr   
5EAB   29 0D 0A 00            .CSTR   ")\r\n"   
5EAF   76                     HALT      
5EB0   00                     .CSTR      
5EB1                EXPECTM_0_2537S43:      
5EB1   E1                     POP   HL   
5EB2                          ;*Macro unroll:  test "5 (a) {{$a 1 +} exec} func call", 6
5EB2   31 80 18               LD   SP,STACK   
5EB5   CD AC 08               CALL   init   
5EB8   CD 90 08               CALL   execStr   
5EBB   35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "5 (a) {{$a 1 +} exec} func call"   
5EDB                          ;*Macro unroll:  expect "5 (a) {{$a 1 +} exec} func call",6
5EDB   E1                     POP   HL   
5EDC   E5                     PUSH   HL   
5EDD   11 06 00               LD   DE,6   
5EE0   B7                     OR   A   
5EE1   ED 52                  SBC   HL,DE   
5EE3   7D                     LD   A,L   
5EE4   B4                     OR   H   
5EE5   28 6A                  JR   Z,expectM_0_2538S43   
5EE7   CD 89 08               CALL   printStr   
5EEA   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","5 (a) {{$a 1 +} exec} func call"   
5F10   CD 89 08               CALL   printStr   
5F13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F22   21 06 00               LD   HL,6   
5F25   CD DD 07               CALL   prtdec   
5F28   CD 89 08               CALL   printStr   
5F2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F38   E1                     POP   hl   
5F39   E5                     PUSH   hl   
5F3A   CD DD 07               CALL   prtdec   
5F3D   E1                     POP   hl   
5F3E   CD 89 08               CALL   printStr   
5F41   20 28 23 00            .CSTR   " (#"   
5F45   CD 25 08               CALL   prthex   
5F48   CD 89 08               CALL   printStr   
5F4B   29 0D 0A 00            .CSTR   ")\r\n"   
5F4F   76                     HALT      
5F50   00                     .CSTR      
5F51                EXPECTM_0_2538S43:      
5F51   E1                     POP   HL   
5F52                          ;*Macro unroll:  test "10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
5F52   31 80 18               LD   SP,STACK   
5F55   CD AC 08               CALL   init   
5F58   CD 90 08               CALL   execStr   
5F5B   31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5F84                          ;*Macro unroll:  expect "10 20 (ab) {-1 {$a} {$b} ifte} func call",10
5F84   E1                     POP   HL   
5F85   E5                     PUSH   HL   
5F86   11 0A 00               LD   DE,10   
5F89   B7                     OR   A   
5F8A   ED 52                  SBC   HL,DE   
5F8C   7D                     LD   A,L   
5F8D   B4                     OR   H   
5F8E   28 73                  JR   Z,expectM_0_2539S43   
5F90   CD 89 08               CALL   printStr   
5F93   43 6F 64 65 3A 20 31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5FC2   CD 89 08               CALL   printStr   
5FC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5FD4   21 0A 00               LD   HL,10   
5FD7   CD DD 07               CALL   prtdec   
5FDA   CD 89 08               CALL   printStr   
5FDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5FEA   E1                     POP   hl   
5FEB   E5                     PUSH   hl   
5FEC   CD DD 07               CALL   prtdec   
5FEF   E1                     POP   hl   
5FF0   CD 89 08               CALL   printStr   
5FF3   20 28 23 00            .CSTR   " (#"   
5FF7   CD 25 08               CALL   prthex   
5FFA   CD 89 08               CALL   printStr   
5FFD   29 0D 0A 00            .CSTR   ")\r\n"   
6001   76                     HALT      
6002   00                     .CSTR      
6003                EXPECTM_0_2539S43:      
6003   E1                     POP   HL   
6004                          ;*Macro unroll:  test "10 20 (ab) {0 {$a} {$b} ifte} func call", 20
6004   31 80 18               LD   SP,STACK   
6007   CD AC 08               CALL   init   
600A   CD 90 08               CALL   execStr   
600D   31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "10 20 (ab) {0 {$a} {$b} ifte} func call"   
6035                          ;*Macro unroll:  expect "10 20 (ab) {0 {$a} {$b} ifte} func call",20
6035   E1                     POP   HL   
6036   E5                     PUSH   HL   
6037   11 14 00               LD   DE,20   
603A   B7                     OR   A   
603B   ED 52                  SBC   HL,DE   
603D   7D                     LD   A,L   
603E   B4                     OR   H   
603F   28 72                  JR   Z,expectM_0_2540S43   
6041   CD 89 08               CALL   printStr   
6044   43 6F 64 65 3A 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","10 20 (ab) {0 {$a} {$b} ifte} func call"   
6072   CD 89 08               CALL   printStr   
6075   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6084   21 14 00               LD   HL,20   
6087   CD DD 07               CALL   prtdec   
608A   CD 89 08               CALL   printStr   
608D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
609A   E1                     POP   hl   
609B   E5                     PUSH   hl   
609C   CD DD 07               CALL   prtdec   
609F   E1                     POP   hl   
60A0   CD 89 08               CALL   printStr   
60A3   20 28 23 00            .CSTR   " (#"   
60A7   CD 25 08               CALL   prthex   
60AA   CD 89 08               CALL   printStr   
60AD   29 0D 0A 00            .CSTR   ")\r\n"   
60B1   76                     HALT      
60B2   00                     .CSTR      
60B3                EXPECTM_0_2540S43:      
60B3   E1                     POP   HL   
60B4                             ; test "10 20 (ab) {0 [{$a} {$b}] switch} func call", 20
60B4                             ; 
60B4                             ; 
60B4                             ; 
60B4                             ; 
60B4                             ; 
60B4                             ; 
60B4                             ; 
60B4                             ; test ":x 1000 let x 10 set x", 10
60B4                             ; test ":x [100] { @1 } closure x", 100
60B4                             ; test ":x [100 200] { @2 } closure x", 200
60B4                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
60B4                             ; test ":x 'a' {$a} def 2 x", 2
60B4                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
60B4                             ; test ":x '' { 3 2 } def x + ", 5
60B4                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
60B4                             ; test "0 [{1}] switch", 1
60B4                             ; test "1 [{1} {2} {3}] switch", 2
60B4                             ; test "9 [{1} {5}] switch", 5
60B4                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
60B4                             ; test "bytes 'ABC' get", $41
60B4                             ; test "bytes [1 2 3] get", 1
60B4                             ; test ":xyz 123 const ; xyz", 123
60B4                             ; test ":x 1 const ; x", 1
60B4                             ; test ":x 'A' const x get", $41
60B4                             ; test ":x [1] const x get", 1
60B4                             ; test ":x [1 2 3] const x 2?", 3
60B4                             ; test "2 (1 2 +) *", 6
60B4                             ; test ":xyz 123 const ; xyz", 123
60B4                             ; test ":xyz 123 let ; xyz get", 123
60B4                             ; test "1 2 {$1 $2 +} call", 3
60B4                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
60B4                             ; test ":xyz {1} def :xyz addr call", 1
60B4                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
60B4                             ; test ":xyz {10} def :xyz addr call", 10
60B4                             ; test "'hello' hash", $7f54
60B4                             ; test ":hello", $7f54
60B4                             ; test "{{{1} exec} exec} exec", 1
60B4                             ; test "5 {{{$1} exec} exec} call", 5
60B4                             ; test "5 {$1} call", 5
60B4                             ; test "5 {{$1} exec} call", 5
60B4                             ; test "2 1 {{$1} call} call", 2
60B4                             ; test "2 1 {$2} call", 1
60B4                             ; test "2 1 {$1} call", 2
60B4                             ; test "2 1 {$2} call", 1
60B4                             ; test "2 4 {$2} call", 4
60B4                             ; test "{{1} call} call", 1
60B4                             ; test "5 {-1 {$1} if} call", 5
60B4                             ; test "0 {} loop", 0
60B4                             ; test "1 {1-} loop", $1a00
60B4                             ; test ":h {1} def :h addr call", 1
60B4                             ; ; call enter
60B4                             ; ;     .cstr "1 3",$22,"+"
60B4                             ; ; expect "1 3 DUP +", 6
60B4   CD 89 08               CALL   printStr   
60B7   44 6F 6E 65 21 00      .CSTR   "Done!"   
60BD   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 50 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0731 DEFINED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN Siena.asm
                    > USED AT LINE 1830 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 32 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
DC1:                0011 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1834 IN Siena.asm
DC2:                0012 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 55 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 60 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 72 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 74 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 108 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 211 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 213 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 216 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 219 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 222 IN Siena.asm
STRING_:            030C DEFINED AT LINE 225 IN Siena.asm
ARGLIST_:           030F DEFINED AT LINE 228 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 231 IN Siena.asm
DOT1:               031E DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 236 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 244 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 253 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 249 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 259 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 262 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 264 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 266 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 268 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 270 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 272 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 274 IN Siena.asm
AND_:               0354 DEFINED AT LINE 276 IN Siena.asm
AND1:               035B DEFINED AT LINE 284 IN Siena.asm
                    > USED AT LINE 297 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
OR_:                035F DEFINED AT LINE 289 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 299 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 301 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
INV_:               0371 DEFINED AT LINE 310 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 314 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 321 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 326 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 329 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 337 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 340 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
NOT_:               039A DEFINED AT LINE 346 IN Siena.asm
EQ_:                039F DEFINED AT LINE 350 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 352 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 356 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 361 IN Siena.asm
LT1:                03AA DEFINED AT LINE 364 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 372 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 383 IN Siena.asm
                    > USED AT LINE 387 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 391 IN Siena.asm
SHL:                03CF DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 408 IN Siena.asm
                    > USED AT LINE 411 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 410 IN Siena.asm
                    > USED AT LINE 407 IN Siena.asm
SHR:                03DF DEFINED AT LINE 418 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 425 IN Siena.asm
                    > USED AT LINE 429 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 424 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 434 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 443 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
NUM:                040E DEFINED AT LINE 457 IN Siena.asm
                    > USED AT LINE 214 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 463 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 465 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 483 IN Siena.asm
                    > USED AT LINE 468 IN Siena.asm
                    > USED AT LINE 470 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
NUM3:               043B DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 217 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 503 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
STRING:             045B DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 526 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 525 IN Siena.asm
ARGLIST:            047F DEFINED AT LINE 554 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
ARGLIST1:           0489 DEFINED AT LINE 561 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
ARGLIST2:           0495 DEFINED AT LINE 569 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
ARGLIST3:           049D DEFINED AT LINE 577 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
ARGLIST4:           04A0 DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 564 IN Siena.asm
ARGLIST5:           04A5 DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 609 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 604 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 610 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 614 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 618 IN Siena.asm
                    > USED AT LINE 622 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 643 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 646 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 652 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 655 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 659 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
PROP:               0536 DEFINED AT LINE 747 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
DOLET:              0538 DEFINED AT LINE 766 IN Siena.asm
DOLET2:             053C DEFINED AT LINE 769 IN Siena.asm
DOLET3:             053F DEFINED AT LINE 773 IN Siena.asm
INDEX:              0542 DEFINED AT LINE 777 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
INDEX1:             054B DEFINED AT LINE 784 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
INDEX2:             0557 DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 790 IN Siena.asm
SET:                055A DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
SET1:               0568 DEFINED AT LINE 808 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
IF:                 056A DEFINED AT LINE 813 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
IFTE:               056F DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
IFTE1:              0570 DEFINED AT LINE 821 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
IFTE2:              0579 DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
SWITCH:             057D DEFINED AT LINE 851 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
LOOP:               0587 DEFINED AT LINE 864 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
WORDS:              0589 DEFINED AT LINE 914 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
BYTES:              058E DEFINED AT LINE 917 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
BYTES1:             0591 DEFINED AT LINE 919 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
ARRAY:              0596 DEFINED AT LINE 923 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
ARRAYEND:           05B2 DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
ARRAYEND1:          05D3 DEFINED AT LINE 960 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
ARRAYEND2:          05E3 DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 958 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
ARRAYEND3:          05F6 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
HASH:               0611 DEFINED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
DEF:                061C DEFINED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
DEF1:               0623 DEFINED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
LET:                062C DEFINED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
LET1:               0648 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
LET2:               0650 DEFINED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
ADDR:               0653 DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
ADDR1:              065F DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
SYMBOL:             066A DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
SYMBOL0:            0672 DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
SYMBOL1:            0674 DEFINED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
SYMBOL2:            0684 DEFINED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
IDENT:              0692 DEFINED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
IDENT0:             0699 DEFINED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
IDENT1:             069B DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
IDENT2:             06AB DEFINED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
IDENT3:             06BF DEFINED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
FRAC:               06C0 DEFINED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
SQRT1:              06C6 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
ABS1:               06D3 DEFINED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
MOD:                06E0 DEFINED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
EQUALS:             06EC DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 354 IN Siena.asm
LESSTHANEQ:         06F4 DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
LESSTHAN:           06F9 DEFINED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
LESSTHAN1:          06FE DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
TRUE1:              0701 DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
FALSE1:             0707 DEFINED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
INPUT:              070D DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
OUTPUT:             0718 DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
KEY:                0721 DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
NEG:                072A DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
FILTER:             0731 DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
MAP:                0731 DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
HASHSTR:            0733 DEFINED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
HASHSTR1:           073A DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
HASHSTR2:           073F DEFINED AT LINE 1269 IN Siena.asm
DEFINEENTRY:        0750 DEFINED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
DEFINEENTRY0:       0755 DEFINED AT LINE 1292 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
DEFINEENTRY1:       0764 DEFINED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
DEFINEENTRY2:       076A DEFINED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
DEFINEENTRY3:       076C DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
LOOKUPENTRY:        0776 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
LOOKUPENTRY0:       077B DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
LOOKUPENTRY1:       078A DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
LOOKUPENTRY2:       0790 DEFINED AT LINE 1349 IN Siena.asm
LOOKUPENTRY3:       0792 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
DIVIDE:             079A DEFINED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
DIVIDE1:            079F DEFINED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
DIVIDE2:            07AC DEFINED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
DIVIDE3:            07AD DEFINED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
SQUAREROOT:         07B3 DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
SQUAREROOT1:        07B8 DEFINED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
SQUAREROOT4:        07D3 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
SQUAREROOT5:        07DA DEFINED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
PRTDEC:             07DD DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07EC DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
PRTDEC1:            080E DEFINED AT LINE 1447 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
PRTDEC2:            0810 DEFINED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
PRTDEC3:            0820 DEFINED AT LINE 1461 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
PRTDEC4:            0821 DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
PRTHEX:             0825 DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0830 DEFINED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
PRTHEX3:            0839 DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
PRTSTR0:            0844 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
PRTSTR:             0848 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
NESTING:            084D DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1795 IN Siena.asm
NESTING1A:          0858 DEFINED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
NESTING1:           085B DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
NESTING2:           086A DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
NESTING3:           086C DEFINED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
NESTING4:           0877 DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
PROMPT:             0879 DEFINED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
CRLF:               0882 DEFINED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1807 IN Siena.asm
PRINTSTR:           0889 DEFINED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 171
EXECSTR:            0890 DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
BRANCH:             0890 DEFINED AT LINE 1565 IN Siena.asm
DEFINE:             0894 DEFINED AT LINE 1570 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1697 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
INIT:               08AC DEFINED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              08C6 DEFINED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
START:              0A08 DEFINED AT LINE 1731 IN Siena.asm
INTERPRET:          0A1E DEFINED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1838 IN Siena.asm
INTERPRET2:         0A28 DEFINED AT LINE 1743 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
INTERPRET3:         0A30 DEFINED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
INTERPRET4:         0A36 DEFINED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
WAITCHAR:           0A3B DEFINED AT LINE 1762 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
MACRO:              0A4A DEFINED AT LINE 1772 IN Siena.asm
WAITCHAR1:          0A4C DEFINED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
WAITCHAR3:          0A5A DEFINED AT LINE 1798 IN Siena.asm
                    > USED AT LINE 1770 IN Siena.asm
WAITCHAR4:          0A6D DEFINED AT LINE 1812 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
NEXT:               0A75 DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 67 IN Siena.asm
                    > USED AT LINE 1822 IN Siena.asm
NEXT1:              0A84 DEFINED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1823 IN Siena.asm
ESCAPE_:            0A97 DEFINED AT LINE 1840 IN Siena.asm
                    > USED AT LINE 1831 IN Siena.asm
EXIT_:              0A98 DEFINED AT LINE 1843 IN Siena.asm
                    > USED AT LINE 1833 IN Siena.asm
LITERAL_:           0A9B DEFINED AT LINE 1847 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
ENTER_:             0AA4 DEFINED AT LINE 1857 IN Siena.asm
                    > USED AT LINE 1837 IN Siena.asm
EXEC:               0AAB DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
EXEC2:              0ACA DEFINED AT LINE 1885 IN Siena.asm
                    > USED AT LINE 1872 IN Siena.asm
CALL:               0ACC DEFINED AT LINE 1889 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
DOCALL:             0ACE DEFINED AT LINE 1895 IN Siena.asm
DOCALL1:            0AE2 DEFINED AT LINE 1914 IN Siena.asm
                    > USED AT LINE 1910 IN Siena.asm
DOCALL1A:           0AE8 DEFINED AT LINE 1918 IN Siena.asm
                    > USED AT LINE 1921 IN Siena.asm
DOCALL1C:           0AEC DEFINED AT LINE 1922 IN Siena.asm
                    > USED AT LINE 1916 IN Siena.asm
DOCALL2:            0AFC DEFINED AT LINE 1933 IN Siena.asm
                    > USED AT LINE 1899 IN Siena.asm
FUNC:               0AFE DEFINED AT LINE 1937 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
FUNC1:              0B16 DEFINED AT LINE 1958 IN Siena.asm
                    > USED AT LINE 1982 IN Siena.asm
                    > USED AT LINE 1985 IN Siena.asm
                    > USED AT LINE 1990 IN Siena.asm
                    > USED AT LINE 1994 IN Siena.asm
FUNC2:              0B3C DEFINED AT LINE 1983 IN Siena.asm
                    > USED AT LINE 1972 IN Siena.asm
                    > USED AT LINE 1974 IN Siena.asm
                    > USED AT LINE 1976 IN Siena.asm
FUNC3:              0B3F DEFINED AT LINE 1986 IN Siena.asm
                    > USED AT LINE 1979 IN Siena.asm
                    > USED AT LINE 1981 IN Siena.asm
FUNC4:              0B47 DEFINED AT LINE 1992 IN Siena.asm
                    > USED AT LINE 1965 IN Siena.asm
                    > USED AT LINE 1967 IN Siena.asm
                    > USED AT LINE 1969 IN Siena.asm
FUNC4A:             0B4A DEFINED AT LINE 1995 IN Siena.asm
                    > USED AT LINE 1991 IN Siena.asm
ARG:                0B56 DEFINED AT LINE 2008 IN Siena.asm
                    > USED AT LINE 220 IN Siena.asm
ARG0:               0B74 DEFINED AT LINE 2029 IN Siena.asm
                    > USED AT LINE 2035 IN Siena.asm
ARG0A:              0B7D DEFINED AT LINE 2037 IN Siena.asm
                    > USED AT LINE 2014 IN Siena.asm
                    > USED AT LINE 2019 IN Siena.asm
ARG1:               0B82 DEFINED AT LINE 2040 IN Siena.asm
                    > USED AT LINE 2033 IN Siena.asm
ARG1A:              0B8A DEFINED AT LINE 2047 IN Siena.asm
                    > USED AT LINE 2039 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1593 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 780 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1813 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 2043 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 1262 IN Siena.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1938 IN Siena.asm
                    > USED AT LINE 2000 IN Siena.asm
                    > USED AT LINE 2002 IN Siena.asm
TIB:                1900 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1747 IN Siena.asm
                    > USED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1814 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1599 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 41 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 68 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2472S43:  4063 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2473S43:  40C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2474S43:  412B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2475S43:  418F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2476S43:  41F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2477S43:  425D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2478S43:  42C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2479S43:  4329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2480S43:  4391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2481S43:  43FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2482S43:  4463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2483S43:  44CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2484S43:  4539 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2485S43:  45A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2486S43:  4613 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2487S43:  4683 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2488S43:  46EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2489S43:  4763 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2490S43:  47D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2491S43:  4845 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2492S43:  48B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2493S43:  491D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2494S43:  4989 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2495S43:  49F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2496S43:  4A69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2497S43:  4AD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2498S43:  4B4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2499S43:  4BBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2500S43:  4C35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2501S43:  4CA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2502S43:  4D0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2503S43:  4D79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2504S43:  4DE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2505S43:  4E51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2506S43:  4EBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2507S43:  4F29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2508S43:  4F95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2509S43:  5001 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2510S43:  506D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2511S43:  50DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2512S43:  5149 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2513S43:  51B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2514S43:  5227 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2515S43:  5299 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2516S43:  530D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2517S43:  537F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2518S43:  540B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2519S43:  5487 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2520S43:  552D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2521S43:  55AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2522S43:  5643 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2523S43:  56D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2524S43:  5757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2525S43:  57DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2526S43:  586B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2527S43:  58F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2528S43:  5995 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2529S43:  5A1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2530S43:  5ABB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2531S43:  5B59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2532S43:  5BF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2533S43:  5C6B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2534S43:  5CF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2535S43:  5D83 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2536S43:  5E19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2537S43:  5EB1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2538S43:  5F51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2539S43:  6003 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2540S43:  60B3 DEFINED AT LINE 34
                    > USED AT LINE 10
