0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 9A 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   D1                     DB   lsb(nop_)   ; SP
0221   9E                     DB   lsb(not_)   ; !
0222   D1                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D1                     DB   lsb(nop_)   ; %
0226   64                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   12                     DB   lsb(paren_)   ; (
0229   15                     DB   lsb(parenEnd_)   ; )
022A   93                     DB   lsb(mul_)   ; *
022B   86                     DB   lsb(add_)   ; +
022C   D1                     DB   lsb(nop_)   ; ,
022D   96                     DB   lsb(sub_)   ; -
022E   18                     DB   lsb(dot_)   ; .
022F   B9                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   61                     DB   lsb(symbol_)   ; :
023B   0F                     DB   lsb(clear_)   ; ;
023C   AC                     DB   lsb(lt_)   ; <
023D   A3                     DB   lsb(eq_)   ; =
023E   A8                     DB   lsb(gt_)   ; >
023F   42                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5E                     DB   lsb(ident_)   ; A
0242   5E                     DB   lsb(ident_)   ; B
0243   5E                     DB   lsb(ident_)   ; C
0244   5E                     DB   lsb(ident_)   ; D
0245   5E                     DB   lsb(ident_)   ; E
0246   5E                     DB   lsb(ident_)   ; F
0247   5E                     DB   lsb(ident_)   ; G
0248   5E                     DB   lsb(ident_)   ; h
0249   5E                     DB   lsb(ident_)   ; I
024A   5E                     DB   lsb(ident_)   ; J
024B   5E                     DB   lsb(ident_)   ; K
024C   5E                     DB   lsb(ident_)   ; L
024D   5E                     DB   lsb(ident_)   ; M
024E   5E                     DB   lsb(ident_)   ; N
024F   5E                     DB   lsb(ident_)   ; O
0250   5E                     DB   lsb(ident_)   ; p
0251   5E                     DB   lsb(ident_)   ; Q
0252   5E                     DB   lsb(ident_)   ; R
0253   5E                     DB   lsb(ident_)   ; S
0254   5E                     DB   lsb(ident_)   ; T
0255   5E                     DB   lsb(ident_)   ; U
0256   5E                     DB   lsb(ident_)   ; V
0257   5E                     DB   lsb(ident_)   ; W
0258   5E                     DB   lsb(ident_)   ; X
0259   5E                     DB   lsb(ident_)   ; Y
025A   5E                     DB   lsb(ident_)   ; Z
025B   58                     DB   lsb(array_)   ; [
025C   C8                     DB   lsb(comment_)   ; \
025D   5B                     DB   lsb(arrayEnd_)   ; ]
025E   78                     DB   lsb(xor_)   ; ^
025F   5E                     DB   lsb(ident_)   ; _
0260   55                     DB   lsb(char_)   ; `    	
0261   5E                     DB   lsb(ident_)   ; a
0262   5E                     DB   lsb(ident_)   ; b
0263   5E                     DB   lsb(ident_)   ; c
0264   5E                     DB   lsb(ident_)   ; d
0265   5E                     DB   lsb(ident_)   ; e
0266   5E                     DB   lsb(ident_)   ; f
0267   5E                     DB   lsb(ident_)   ; g
0268   5E                     DB   lsb(ident_)   ; h
0269   5E                     DB   lsb(ident_)   ; i
026A   5E                     DB   lsb(ident_)   ; j
026B   5E                     DB   lsb(ident_)   ; k
026C   5E                     DB   lsb(ident_)   ; l
026D   5E                     DB   lsb(ident_)   ; m
026E   5E                     DB   lsb(ident_)   ; n
026F   5E                     DB   lsb(ident_)   ; o
0270   5E                     DB   lsb(ident_)   ; p
0271   5E                     DB   lsb(ident_)   ; q
0272   5E                     DB   lsb(ident_)   ; r
0273   5E                     DB   lsb(ident_)   ; s
0274   5E                     DB   lsb(ident_)   ; t
0275   5E                     DB   lsb(ident_)   ; u
0276   5E                     DB   lsb(ident_)   ; v
0277   5E                     DB   lsb(ident_)   ; w
0278   5E                     DB   lsb(ident_)   ; x
0279   5E                     DB   lsb(ident_)   ; y
027A   5E                     DB   lsb(ident_)   ; z
027B   4F                     DB   lsb(block_)   ; {
027C   6F                     DB   lsb(or_)   ; |
027D   52                     DB   lsb(blockEnd_)   ; }
027E   81                     DB   lsb(inv_)   ; ~
027F   D1                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 12 04               JP   num   
0303                HEXNUM_:      
0303   C3 42 04               JP   hexnum   
0306                ARG_:        
0306   C3 F6 04               JP   arg   
0309                PROP_:       
0309   C3 14 05               JP   prop   
030C                STRING_:      
030C   C3 5F 04               JP   string   
030F                CLEAR_:      
030F   C3 A9 0B               JP   clear   
0312                PAREN_:      
0312   C3 8D 04               JP   paren   
0315                PARENEND_:      
0315   C3 9A 04               JP   parenEnd   
0318                DOT_:        
0318   E1                     POP   hl   
0319   03                     INC   bc   
031A   0A                     LD   a,(bc)   
031B   FE 68                  CP   "h"   
031D   20 05                  JR   nz,dot1   
031F   CD 17 09               CALL   prthex   
0322   18 17                  JR   dot4   
0324                DOT1:        
0324   FE 73                  CP   "s"   
0326   20 05                  JR   nz,dot2   
0328   CD 3A 09               CALL   prtstr   
032B   18 0E                  JR   dot4   
032D                DOT2:        
032D   FE 63                  CP   "c"   
032F   20 06                  JR   nz,dot3   
0331   7D                     LD   a,l   
0332   CD 85 00               CALL   putchar   
0335   18 04                  JR   dot4   
0337                DOT3:        
0337   0B                     DEC   bc   
0338   CD CF 08               CALL   prtdec   
033B                DOT4:        
033B   3E 20                  LD   a," "   
033D   CD 85 00               CALL   putchar   
0340   DD E9                  JP   (ix)   
0342                             ; addr index -- addr2
0342                INDEX_:      
0342   E1                     POP   hl   ; hl = index
0343   D1                     POP   de   ; de = addr
0344   3A 9A 18               LD   a,(vDataWidth)   
0347   3D                     DEC   a   
0348   28 01                  JR   z,index1   
034A   29                     ADD   hl,hl   ; if data width = 2 then double
034B                INDEX1:      
034B   19                     ADD   hl,de   ; add addr
034C   C3 31 05               JP   get1   
034F                BLOCK_:      
034F   C3 A9 04               JP   block   
0352                BLOCKEND_:      
0352   C3 E2 04               JP   blockend   
0355                CHAR_:       
0355   C3 78 04               JP   char   
0358                ARRAY_:      
0358   C3 2A 06               JP   array   
035B                ARRAYEND_:      
035B   C3 3C 06               JP   arrayEnd   
035E                IDENT_:      
035E   C3 89 07               JP   ident   
0361                SYMBOL_:      
0361   C3 62 07               JP   symbol   
0364                AND_:        
0364   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0365   E1                     POP   hl   
0366   7B                     LD   a,e   
0367   A5                     AND   l   
0368   6F                     LD   l,a   
0369   7A                     LD   a,d   
036A   A4                     AND   h   
036B                AND1:        
036B   67                     LD   h,a   
036C   E5                     PUSH   hl   
036D   DD E9                  JP   (ix)   
036F                OR_:         
036F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0370   E1                     POP   hl   
0371   7B                     LD   a,e   
0372   B5                     OR   l   
0373   6F                     LD   l,a   
0374   7A                     LD   a,d   
0375   B4                     OR   h   
0376   18 F3                  JR   and1   
0378                XOR_:        
0378   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0379                XOR1:        
0379   E1                     POP   hl   
037A   7B                     LD   a,e   
037B   AD                     XOR   l   
037C   6F                     LD   l,a   
037D   7A                     LD   a,d   
037E   AC                     XOR   h   
037F   18 EA                  JR   and1   
0381                INV_:        ; Bitwise INVert the top member of the stack
0381   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0384   18 F3                  JR   xor1   
0386                ADD_:        ; add the top 2 members of the stack
0386   D1                     POP   de   
0387   E1                     POP   hl   
0388   19                     ADD   hl,de   
0389   E5                     PUSH   hl   
038A   DD E9                  JP   (ix)   
038C                HDOT_:       ; print hexadecimal
038C   E1                     POP   hl   
038D   CD 17 09               CALL   prthex   
0390   C3 37 03               JP   dot3   
0393                MUL_:        
0393   C3 F6 03               JP   mul   
0396                SUB_:        ; Subtract the value 2nd on stack from top of stack
0396   D1                     POP   de   
0397   E1                     POP   hl   ; Entry point for INVert
0398                SUB2:        
0398   B7                     OR   a   ; Entry point for NEGate
0399   ED 52                  SBC   hl,de   
039B   E5                     PUSH   hl   
039C   DD E9                  JP   (ix)   
039E                NOT_:        ; logical invert, any non zero value
039E   21 00 00               LD   hl,0   ; is considered true
03A1   18 01                  JR   eq1   
03A3                EQ_:         
03A3   E1                     POP   hl   
03A4                EQ1:         
03A4   D1                     POP   de   
03A5   C3 E2 07               JP   equals   
03A8                GT_:         
03A8   D1                     POP   de   
03A9   E1                     POP   hl   
03AA   18 02                  JR   lt1   
03AC                LT_:         
03AC   E1                     POP   hl   
03AD   D1                     POP   de   
03AE                LT1:         
03AE   03                     INC   bc   
03AF   0A                     LD   a,(bc)   
03B0   FE 3D                  CP   "="   
03B2   CA EA 07               JP   z,lessthaneq   
03B5   0B                     DEC   bc   
03B6   C3 EF 07               JP   lessthan   
03B9                DIV_:        
03B9   D1                     POP   de   ; get first value
03BA   E1                     POP   hl   ; get 2nd value
03BB   C5                     PUSH   bc   ; preserve the IP
03BC   44 4D                  LD   bc,hl   
03BE   CD 8C 08               CALL   divide   
03C1   22 98 18               LD   (vFrac),hl   
03C4   C1                     POP   bc   
03C5   D5                     PUSH   de   ; push result
03C6   DD E9                  JP   (ix)   
03C8                COMMENT_:      
03C8   03                     INC   bc   ; point to next char
03C9   0A                     LD   a,(bc)   
03CA   FE 20                  CP   " "   ; terminate on any char less than SP
03CC   30 FA                  JR   nc,comment_   
03CE   0B                     DEC   bc   
03CF   DD E9                  JP   (ix)   
03D1                NOP_:        
03D1   DD E9                  JP   (ix)   
03D3                             ;*******************************************************************
03D3                             ; word operators
03D3                             ;*******************************************************************
03D3                             ; shl
03D3                             ; value count -- value2          shift left count places
03D3                SHL:         
03D3   50 59                  LD   de,bc   ; save IP
03D5   C1                     POP   bc   ; bc = count
03D6   41                     LD   b,c   ; b = loop counter
03D7   E1                     POP   hl   
03D8   04                     INC   b   ; test for counter=0 case
03D9   18 01                  JR   shl2   
03DB                SHL1:        
03DB   29                     ADD   hl,hl   ; left shift hl
03DC                SHL2:        
03DC   10 FD                  DJNZ   shl1   
03DE   E5                     PUSH   hl   
03DF   42 4B                  LD   bc,de   ; restore IP
03E1   DD E9                  JP   (ix)   
03E3                             ; shr
03E3                             ; value count -- value2          shift left count places
03E3                SHR:         
03E3   50 59                  LD   de,bc   ; save IP
03E5   C1                     POP   bc   ; bc = count
03E6   41                     LD   b,c   ; b = loop counter
03E7   E1                     POP   hl   
03E8   04                     INC   b   ; test for counter=0 case
03E9   18 04                  JR   shr2   
03EB                SHR1:        
03EB   CB 3C                  SRL   h   ; right shift hl
03ED   CB 1D                  RR   l   
03EF                SHR2:        
03EF   10 FA                  DJNZ   shr1   
03F1   E5                     PUSH   hl   
03F2   42 4B                  LD   bc,de   ; restore IP
03F4   DD E9                  JP   (ix)   
03F6                MUL:         ;=19
03F6   D1                     POP   de   ; get first value
03F7   E1                     POP   hl   
03F8   C5                     PUSH   bc   ; Preserve the IP
03F9   44                     LD   b,h   ; bc = 2nd value
03FA   4D                     LD   c,l   
03FB   21 00 00               LD   hl,0   
03FE   3E 10                  LD   a,16   
0400                MUL2:        
0400   29                     ADD   hl,hl   
0401   CB 13                  RL   e   
0403   CB 12                  RL   d   
0405   30 04                  JR   nc,$+6   
0407   09                     ADD   hl,bc   
0408   30 01                  JR   nc,$+3   
040A   13                     INC   de   
040B   3D                     DEC   a   
040C   20 F2                  JR   nz,mul2   
040E   C1                     POP   bc   ; Restore the IP
040F   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0410   DD E9                  JP   (ix)   
0412                NUM:         
0412   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0415   0A                     LD   a,(bc)   ; Get numeral or -
0416   FE 2D                  CP   "-"   
0418   20 01                  JR   nz,num0   
041A   03                     INC   bc   ; move to next char, no flags affected
041B                NUM0:        
041B   08                     EX   af,af'   ; save zero flag = 0 for later
041C                NUM1:        
041C   0A                     LD   a,(bc)   ; read digit
041D   D6 30                  SUB   "0"   ; less than 0?
041F   38 13                  JR   c,num2   ; not a digit, exit loop
0421   FE 0A                  CP   10   ; greater that 9?
0423   30 0F                  JR   nc,num2   ; not a digit, exit loop
0425   03                     INC   bc   ; inc IP
0426   54 5D                  LD   de,hl   ; multiply hl * 10
0428   29                     ADD   hl,hl   
0429   29                     ADD   hl,hl   
042A   19                     ADD   hl,de   
042B   29                     ADD   hl,hl   
042C   85                     ADD   a,l   ; add digit in a to hl
042D   6F                     LD   l,a   
042E   3E 00                  LD   a,0   
0430   8C                     ADC   a,h   
0431   67                     LD   h,a   
0432   18 E8                  JR   num1   
0434                NUM2:        
0434   0B                     DEC   bc   
0435   08                     EX   af,af'   ; restore zero flag
0436   20 07                  JR   nz,num3   
0438   EB                     EX   de,hl   ; negate the value of hl
0439   21 00 00               LD   hl,0   
043C   B7                     OR   a   ; jump to sub2
043D   ED 52                  SBC   hl,de   
043F                NUM3:        
043F   E5                     PUSH   hl   ; Put the number on the stack
0440   DD E9                  JP   (ix)   ; and process the next character
0442                HEXNUM:      ; 
0442   21 00 00               LD   hl,0   ; Clear hl to accept the number
0445                HEXNUM1:      
0445   03                     INC   bc   
0446   0A                     LD   a,(bc)   ; Get the character which is a numeral
0447   CB 77                  BIT   6,a   ; is it uppercase alpha?
0449   28 02                  JR   z,hexnum2   ; no a decimal
044B   D6 07                  SUB   7   ; sub 7  to make $a - $F
044D                HEXNUM2:      
044D   D6 30                  SUB   $30   ; Form decimal digit
044F   DA 34 04               JP   c,num2   
0452   FE 10                  CP   $0F+1   
0454   D2 34 04               JP   nc,num2   
0457   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0458   29                     ADD   hl,hl   ; 4X
0459   29                     ADD   hl,hl   ; 8X
045A   29                     ADD   hl,hl   ; 16X
045B   85                     ADD   a,l   ; add into bottom of hl
045C   6F                     LD   l,a   ; 
045D   18 E6                  JR   hexnum1   
045F                             ; 
045F                STRING:      
045F   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
0463   D5                     PUSH   de   ; save start of string
0464   03                     INC   bc   ; point to next char
0465   18 03                  JR   string2   
0467                STRING1:      
0467   12                     LD   (de),a   
0468   13                     INC   de   ; increase count
0469   03                     INC   bc   ; point to next char
046A                STRING2:      
046A   0A                     LD   a,(bc)   
046B   FE 27                  CP   "'"   ; ' is the string terminator
046D   20 F8                  JR   nz,string1   
046F   AF                     XOR   a   ; write NUL to terminate string
0470   12                     LD   (de),a   
0471   13                     INC   de   
0472   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0476   DD E9                  JP   (ix)   
0478                CHAR:        
0478   21 00 00               LD   hl,0   ; if `` is empty
047B                CHAR1:       
047B   03                     INC   bc   ; point to next char
047C   0A                     LD   a,(bc)   
047D   FE 60                  CP   "`"   ; ` is the string terminator
047F   28 09                  JR   z,char3   
0481   FE 5C                  CP   $5c   ; \ is the escape
0483   20 02                  JR   nz,char2   
0485   03                     INC   bc   
0486   0A                     LD   a,(bc)   
0487                CHAR2:       
0487   6F                     LD   l,a   
0488   18 F1                  JR   char1   
048A                CHAR3:       
048A   E5                     PUSH   hl   
048B   DD E9                  JP   (ix)   
048D                PAREN:       
048D   DD 21 93 04            LD   ix,paren2   
0491   18 16                  JR   block   
0493                PAREN2:      
0493   DD 21 8B 0B            LD   ix,next   
0497   C3 CC 0B               JP   exec   
049A                PARENEND:      
049A   E1                     POP   hl   ; hl = last result
049B   D1                     POP   de   
049C   C1                     POP   bc   
049D   C1                     POP   bc   
049E   E5                     PUSH   hl   
049F   FD 62                  LD   iyh,d   
04A1   FD 6B                  LD   iyl,e   
04A3   DD 21 8B 0B            LD   ix,next   
04A7   DD E9                  JP   (ix)   
04A9                BLOCK:       
04A9   03                     INC   bc   
04AA   C5                     PUSH   bc   ; return first opcode of block
04AB   16 01                  LD   d,1   ; nesting: count first parenthesis
04AD                BLOCK1:      ; Skip to end of definition
04AD   0A                     LD   a,(bc)   ; Get the next character
04AE   03                     INC   bc   ; Point to next character
04AF   FE 21                  CP   " " + 1   ; ignore whitespace
04B1   38 FA                  JR   c,block1   
04B3   FE 29                  CP   ")"   
04B5   28 25                  JR   z,block4   
04B7   FE 7D                  CP   "}"   
04B9   28 21                  JR   z,block4   
04BB   FE 5D                  CP   "]"   
04BD   28 1D                  JR   z,block4   
04BF   FE 28                  CP   "("   
04C1   28 13                  JR   z,block3   
04C3   FE 7B                  CP   "{"   
04C5   28 0F                  JR   z,block3   
04C7   FE 5B                  CP   "["   
04C9   28 0B                  JR   z,block3   
04CB   FE 27                  CP   "'"   
04CD   28 07                  JR   z,block3   
04CF   FE 60                  CP   "`"   
04D1   20 DA                  JR   nz,block1   
04D3                BLOCK2:      
04D3   14                     INC   d   
04D4   18 D7                  JR   block1   
04D6                BLOCK3:      
04D6   3E 80                  LD   a,$80   
04D8   AA                     XOR   d   
04D9   47                     LD   b,a   
04DA   18 D1                  JR   block1   
04DC                BLOCK4:      
04DC   15                     DEC   d   
04DD   20 CE                  JR   nz,block1   ; get the next element
04DF   0B                     DEC   bc   ; balanced, exit
04E0   DD E9                  JP   (ix)   
04E2                BLOCKEND:      
04E2   E1                     POP   hl   ; hl = last result
04E3   FD 54                  LD   d,iyh   ; de = BP
04E5   FD 5D                  LD   e,iyl   
04E7   EB                     EX   de,hl   ; hl = BP, de = result
04E8   F9                     LD   sp,hl   ; sp = BP
04E9   E1                     POP   hl   ; hl = old BP
04EA   C1                     POP   bc   ; pop SCP (discard)
04EB   C1                     POP   bc   ; bc = IP
04EC   F9                     LD   sp,hl   ; sp = old BP
04ED   FD 21 00 00            LD   iy,0   ; iy = sp
04F1   FD 39                  ADD   iy,sp   
04F3   D5                     PUSH   de   ; push result
04F4   DD E9                  JP   (ix)   
04F6                             ; $1..9
04F6                             ; returns value of arg
04F6                ARG:         
04F6   03                     INC   bc   ; get next char
04F7   0A                     LD   a,(bc)   
04F8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04FA   E6 07                  AND   $07   ; mask
04FC   87                     ADD   a,a   ; double
04FD   6F                     LD   l,a   ; hl = offset into args
04FE   26 00                  LD   h,0   
0500   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0503   FD 56 03               LD   d,(iy+3)   
0506   EB                     EX   de,hl   ; hl = SCP - offset
0507   B7                     OR   a   
0508   ED 52                  SBC   hl,de   
050A   2B                     DEC   hl   ; de = arg
050B   22 9E 18               LD   (vSetter),hl   ; store address in setter
050E   56                     LD   d,(hl)   
050F   2B                     DEC   hl   
0510   5E                     LD   e,(hl)   
0511   D5                     PUSH   de   ; push arg
0512   DD E9                  JP   (ix)   
0514                             ; @1..9
0514                             ; returns address of prop
0514                PROP:        
0514   03                     INC   bc   ; get next char
0515   0A                     LD   a,(bc)   
0516   D6 30                  SUB   "0"   ; treat as a digit, 1 based index
0518   E6 07                  AND   $07   ; mask
051A   87                     ADD   a,a   ; double
051B   D6 02                  SUB   2   
051D   6F                     LD   l,a   ; hl = offset into args
051E   26 00                  LD   h,0   
0520   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0523   FD 56 07               LD   d,(iy+7)   
0526   19                     ADD   hl,de   ; find address of prop in array
0527   22 9E 18               LD   (vSetter),hl   ; store address in setter
052A   56                     LD   d,(hl)   
052B   2B                     DEC   hl   
052C   5E                     LD   e,(hl)   
052D   D5                     PUSH   de   ; push prop value
052E   DD E9                  JP   (ix)   
0530                             ; addr -- value
0530                DOLET:       
0530                GET:         
0530   E1                     POP   hl   
0531                GET1:        
0531   22 9E 18               LD   (vSetter),hl   ; store address in setter
0534   16 00                  LD   d,0   
0536   5E                     LD   e,(hl)   
0537   3A 9A 18               LD   a,(vDataWidth)   
053A   3D                     DEC   a   
053B   28 02                  JR   z,get2   
053D   23                     INC   hl   
053E   56                     LD   d,(hl)   
053F                GET2:        
053F   D5                     PUSH   de   
0540   DD E9                  JP   (ix)   
0542                             ; newvalue -- oldvalue
0542                SET:         
0542   D1                     POP   de   ; new value
0543   E1                     POP   hl   ; discard last accessed value
0544   2A 9E 18               LD   hl,(vSetter)   
0547   7E                     LD   a,(hl)   ; save lsb of old value
0548   73                     LD   (hl),e   
0549   5F                     LD   e,a   
054A   3A 9A 18               LD   a,(vDataWidth)   
054D   3D                     DEC   a   
054E   28 04                  JR   z,set1   
0550   23                     INC   hl   
0551   7E                     LD   a,(hl)   ; save msb of old value
0552   72                     LD   (hl),d   
0553   57                     LD   d,a   
0554                SET1:        
0554   D5                     PUSH   de   ; return old value
0555   DD E9                  JP   (ix)   
0557                             ; ifte
0557                             ; condition then -- value
0557                IF:          
0557   11 00 00               LD   de,0   ; NUL pointer for else
055A   18 01                  JR   ifte1   
055C                             ; ifte
055C                             ; condition then else -- value
055C                IFTE:        
055C   D1                     POP   de   ; de = else
055D                IFTE1:       
055D   E1                     POP   hl   ; hl = then
055E   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
055F   23                     INC   hl   ; check for true
0560   7C                     LD   a,h   
0561   B5                     OR   l   
0562   E1                     POP   hl   ; hl = then
0563   28 01                  JR   z,ifte2   
0565   EB                     EX   de,hl   ; condition = false, hl = else
0566                IFTE2:       
0566   7C                     LD   a,h   ; check if hl is NUL
0567   B5                     OR   l   
0568   28 13                  JR   z,ifte3   
056A   C5                     PUSH   bc   ; push IP
056B   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
056E   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0571   D5                     PUSH   de   ; push SCP
0572   FD E5                  PUSH   iy   ; push BP
0574   FD 21 00 00            LD   iy,0   ; iy = sp
0578   FD 39                  ADD   iy,sp   
057A   44 4D                  LD   bc,hl   ; IP = then
057C   0B                     DEC   bc   
057D                IFTE3:       
057D   DD E9                  JP   (ix)   
057F                             ; switch
057F                             ; index array -- value
057F                SWITCH:      
057F   D1                     POP   de   ; de = array
0580   E1                     POP   hl   ; hl = index
0581   29                     ADD   hl,hl   ; indec *= 2
0582   19                     ADD   hl,de   ; add array[0]
0583   4E                     LD   c,(hl)   ; bc = case
0584   23                     INC   hl   
0585   46                     LD   b,(hl)   
0586   0B                     DEC   bc   
0587   DD E9                  JP   (ix)   
0589                             ; c b --
0589                             ; loops until c = 0
0589                LOOP:        
0589   D1                     POP   de   ; de = block                    c
058A   E1                     POP   hl   ; hl = condition
058B   D5                     PUSH   de   
058C   C5                     PUSH   bc   ; push IP
058D   42 4B                  LD   bc,de   ; bc = block
058F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0592   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0595   D5                     PUSH   de   ; push SCP
0596   FD E5                  PUSH   iy   ; push BP
0598   FD 21 00 00            LD   iy,0   ; iy = sp
059C   FD 39                  ADD   iy,sp   
059E                LOOP1:       
059E   7D                     LD   a,l   ; bc = block, hl = condition = zero?
059F   B4                     OR   h   
05A0   28 21                  JR   z,loop3   
05A2   11 B8 05               LD   de,loop2-1   ; IP return address
05A5   D5                     PUSH   de   
05A6   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
05A9   FD 56 03               LD   d,(iy+3)   
05AC   D5                     PUSH   de   ; 
05AD   FD E5                  PUSH   iy   ; push BP
05AF   FD 21 00 00            LD   iy,0   ; iy = sp
05B3   FD 39                  ADD   iy,sp   
05B5   E5                     PUSH   hl   ; push condition
05B6   0B                     DEC   bc   
05B7   DD E9                  JP   (ix)   
05B9                LOOP2:       
05B9   1B                     DB   ESC   ; escape from interpreter
05BA   FD 4E 06               LD   c,(iy+6)   ; bc = block
05BD   FD 46 07               LD   b,(iy+7)   
05C0   E1                     POP   hl   ; hl = condition
05C1   18 DB                  JR   loop1   
05C3                LOOP3:       
05C3   FD 54                  LD   d,iyh   ; de = BP
05C5   FD 5D                  LD   e,iyl   
05C7   EB                     EX   de,hl   ; hl = BP, de = result
05C8   F9                     LD   sp,hl   ; sp = BP
05C9   E1                     POP   hl   ; hl = old BP
05CA   C1                     POP   bc   ; pop SCP (discard)
05CB   C1                     POP   bc   ; bc = IP
05CC   F9                     LD   sp,hl   ; sp = old BP
05CD   FD 21 00 00            LD   iy,0   ; iy = sp
05D1   FD 39                  ADD   iy,sp   
05D3   DD 21 8B 0B            LD   ix,next   ; needed?
05D7   DD E9                  JP   (ix)   
05D9                CASE:        
05D9   E1                     POP   hl   ; get selector from stack
05DA   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05DB   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05DE   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05E1   D5                     PUSH   de   ; push SCP
05E2   FD E5                  PUSH   iy   ; push BP
05E4   FD 21 00 00            LD   iy,0   ; BP = SP
05E8   FD 39                  ADD   iy,sp   
05EA   E5                     PUSH   hl   ; push selector as first arg of new frame
05EB   DD E9                  JP   (ix)   
05ED                SELECT:      
05ED   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05F0   FD 6E FE               LD   l,(iy-2)   
05F3   23                     INC   hl   ; hl -= 1 index from second arg
05F4   29                     ADD   hl,hl   ; hl *= 2 word offset
05F5   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05F7   FD 5D                  LD   e,iyl   
05F9   EB                     EX   de,hl   
05FA   B7                     OR   a   ; hl = BP - offset
05FB   ED 52                  SBC   hl,de   
05FD   54 5D                  LD   de,hl   ; save arg ptr
05FF   2B                     DEC   hl   ; hl += 2
0600   2B                     DEC   hl   
0601   B7                     OR   a   ; arg ptr - stack pointer
0602   ED 72                  SBC   hl,sp   
0604   30 03                  JR   nc,case0   
0606   D1                     POP   de   ; pop last arg
0607   18 05                  JR   case1   
0609                CASE0:       
0609   EB                     EX   de,hl   
060A   2B                     DEC   hl   ; de = arg
060B   56                     LD   d,(hl)   
060C   2B                     DEC   hl   
060D   5E                     LD   e,(hl)   
060E                CASE1:       
060E   7A                     LD   a,d   ; is arg == NUL ? then skip
060F   B3                     OR   e   
0610   28 09                  JR   z,case2   
0612   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0615   FD 70 05               LD   (iy+5),b   
0618   42 4B                  LD   bc,de   ; IP = arg
061A   0B                     DEC   bc   
061B                CASE2:       
061B   DD E9                  JP   (ix)   
061D                WORDS:       
061D   21 02 00               LD   hl,2   
0620   18 03                  JR   bytes1   
0622                BYTES:       
0622   21 01 00               LD   hl,1   
0625                BYTES1:      
0625   22 9A 18               LD   (vDataWidth),hl   
0628   DD E9                  JP   (ix)   
062A                ARRAY:       
062A   C5                     PUSH   bc   ; create stack frame, push IP
062B   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
062E   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0631   D5                     PUSH   de   ; push SCP
0632   FD E5                  PUSH   iy   ; push BP
0634   FD 21 00 00            LD   iy,0   ; BP = SP
0638   FD 39                  ADD   iy,sp   
063A   DD E9                  JP   (ix)   
063C                ARRAYEND:      
063C   FD 54                  LD   d,iyh   ; de = BP
063E   FD 5D                  LD   e,iyl   
0640   DD 62                  LD   ixh,d   ; ix = BP
0642   DD 6B                  LD   ixl,e   
0644   62 6B                  LD   hl,de   ; hl = de
0646   B7                     OR   a   
0647   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0649   CB 3C                  SRL   h   
064B   CB 1D                  RR   l   
064D   EB                     EX   de,hl   ; de = count
064E   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0651   73                     LD   (hl),e   
0652   23                     INC   hl   
0653   72                     LD   (hl),d   
0654   23                     INC   hl   ; hl = array[0], de = count
0655   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
0658   FE 01                  CP   1   
065A   20 10                  JR   nz,arrayEnd2   
065C                ARRAYEND1:      ; byte
065C   DD 7E FE               LD   a,(ix-2)   
065F   77                     LD   (hl),a   
0660   23                     INC   hl   
0661   DD 2B                  DEC   ix   
0663   DD 2B                  DEC   ix   
0665   1B                     DEC   de   
0666   7B                     LD   a,e   
0667   B2                     OR   d   
0668   20 F2                  JR   nz,arrayEnd1   
066A   18 13                  JR   arrayEnd3   
066C                ARRAYEND2:      ; word
066C   DD 7E FE               LD   a,(ix-2)   
066F   77                     LD   (hl),a   
0670   23                     INC   hl   
0671   DD 7E FF               LD   a,(ix-1)   
0674   77                     LD   (hl),a   
0675   23                     INC   hl   
0676   DD 2B                  DEC   ix   
0678   DD 2B                  DEC   ix   
067A   1B                     DEC   de   
067B   7B                     LD   a,e   
067C   B2                     OR   d   
067D   20 ED                  JR   nz,arrayEnd2   
067F                ARRAYEND3:      
067F   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0681   FD 5D                  LD   e,iyl   
0683   EB                     EX   de,hl   ; hl = BP, de = end of array
0684   F9                     LD   sp,hl   ; sp = BP
0685   E1                     POP   hl   ; hl = old BP, de = end of array
0686   DD E1                  POP   ix   ; pop SCP (discard)
0688   DD E1                  POP   ix   ; pop IP (discard)
068A   EB                     EX   de,hl   
068B   FD 62                  LD   iyh,d   
068D   FD 6B                  LD   iyl,e   
068F   EB                     EX   de,hl   
0690                             ; ld sp,hl                    ; sp = old BP
0690                             ; ld iy,0                     ; iy = sp
0690                             ; add iy,sp
0690   DD 21 8B 0B            LD   ix,next   
0694   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0697   23                     INC   hl   
0698   23                     INC   hl   
0699   E5                     PUSH   hl   ; return array[0]
069A   EB                     EX   de,hl   ; hl = end of array, de = array[0]
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
069E   EB                     EX   de,hl   
069F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
06A2   73                     LD   (hl),e   ; array[-2] = size
06A3   23                     INC   hl   
06A4   72                     LD   (hl),d   
06A5   23                     INC   hl   
06A6   19                     ADD   hl,de   
06A7   22 A6 18               LD   (vHeapPtr),hl   
06AA   DD E9                  JP   (ix)   
06AC                             ; str -- num
06AC                HASH:        
06AC   E1                     POP   hl   
06AD   C5                     PUSH   bc   
06AE   44 4D                  LD   bc,hl   
06B0   CD 29 08               CALL   hashStr   
06B3   C1                     POP   bc   
06B4   E5                     PUSH   hl   
06B5   DD E9                  JP   (ix)   
06B7                             ; symbol addr --
06B7                DEF:         
06B7   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06B9   E3                     EX   (sp),hl   
06BA   EB                     EX   de,hl   
06BB   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap de = addr
06BE   36 CD                  LD   (hl),$cd   ; compile "call exec"
06C0   23                     INC   hl   
06C1   36 E6                  LD   (hl),lsb(call)   
06C3   23                     INC   hl   
06C4   36 0B                  LD   (hl),msb(call)   
06C6   23                     INC   hl   
06C7   06 01                  LD   b,1   ; b = nesting
06C9                DEF1:        
06C9   1A                     LD   a,(de)   
06CA   13                     INC   de   
06CB   77                     LD   (hl),a   
06CC   23                     INC   hl   
06CD   FE 29                  CP   ")"   
06CF   28 25                  JR   z,def4   
06D1   FE 7D                  CP   "}"   
06D3   28 21                  JR   z,def4   
06D5   FE 5D                  CP   "]"   
06D7   28 1D                  JR   z,def4   
06D9   FE 28                  CP   "("   
06DB   28 13                  JR   z,def3   
06DD   FE 7B                  CP   "{"   
06DF   28 0F                  JR   z,def3   
06E1   FE 5B                  CP   "["   
06E3   28 0B                  JR   z,def3   
06E5   FE 27                  CP   "'"   
06E7   28 07                  JR   z,def3   
06E9   FE 60                  CP   "`"   
06EB   20 DC                  JR   nz,def1   
06ED                DEF2:        
06ED   04                     INC   b   
06EE   18 D9                  JR   def1   
06F0                DEF3:        
06F0   3E 80                  LD   a,$80   
06F2   A8                     XOR   b   
06F3   47                     LD   b,a   
06F4   18 D3                  JR   def1   
06F6                DEF4:        
06F6   05                     DEC   b   
06F7   20 D0                  JR   nz,def1   ; get the next element
06F9   AF                     XOR   a   ; end with NUL ??? needed?
06FA   77                     LD   (hl),a   
06FB   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06FF   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0702   E1                     POP   hl   ; de = addr, hl = IP
0703   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0704   44 4D                  LD   bc,hl   ; bc = symbol
0706   CD 42 08               CALL   defineEntry   
0709   38 00                  JR   c,def5   
070B                             ; call error
070B                             ; .cstr "Def Collision"
070B                DEF5:        
070B   C1                     POP   bc   
070C   DD E9                  JP   (ix)   
070E                             ; symbol array block --
070E                CLOSURE:      
070E   E1                     POP   hl   ; hl = block
070F   D1                     POP   de   ; de = array
0710   C5                     PUSH   bc   ; (sp) = block, (sp+2) = IP, (sp+2) = symbol
0711   E5                     PUSH   hl   
0712   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr de = array
0715   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0717   23                     INC   hl   
0718   36 FB                  LD   (hl),lsb(doclosure)   
071A   23                     INC   hl   
071B   36 0B                  LD   (hl),msb(doclosure)   
071D   23                     INC   hl   
071E   73                     LD   (hl),e   ; compile array
071F   23                     INC   hl   
0720   72                     LD   (hl),d   
0721   23                     INC   hl   
0722   D1                     POP   de   ; de =  block, (sp) = IP, (sp+2) = symbol
0723   06 01                  LD   b,1   ; b = nesting
0725   18 A2                  JR   def1   
0727                             ; symbol value --
0727                LET:         
0727   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0729   E3                     EX   (sp),hl   
072A   EB                     EX   de,hl   
072B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
072E   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0730   23                     INC   hl   
0731   36 30                  LD   (hl),lsb(dolet)   
0733   23                     INC   hl   
0734   36 05                  LD   (hl),msb(dolet)   
0736   23                     INC   hl   
0737   73                     LD   (hl),e   
0738   23                     INC   hl   
0739   72                     LD   (hl),d   
073A   2B                     DEC   hl   
073B   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
073F   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0742   E1                     POP   hl   ; de = addr, hl = IP
0743   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0744   44 4D                  LD   bc,hl   ; bc = symbol
0746   CD 42 08               CALL   defineEntry   
0749   38 00                  JR   c,let2   
074B                             ; call error
074B                             ; .cstr "Let Collision"
074B                LET2:        
074B   C1                     POP   bc   
074C   DD E9                  JP   (ix)   
074E                             ; str -- addr
074E                ADDR:        
074E   E1                     POP   hl   ; hl = hash
074F   C5                     PUSH   bc   
0750   44 4D                  LD   bc,hl   
0752   CD 68 08               CALL   lookupEntry   
0755   38 03                  JR   c,addr1   
0757   21 00 00               LD   hl,0   
075A                             ; call printStr		
075A                             ; .cstr "Undefined"
075A                             ; jp interpret
075A                ADDR1:       
075A   C1                     POP   bc   
075B   11 03 00               LD   de,3   
075E   19                     ADD   hl,de   
075F   E5                     PUSH   hl   
0760   DD E9                  JP   (ix)   
0762                SYMBOL:      
0762   03                     INC   bc   
0763   11 00 1A               LD   de,PAD   
0766   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0768   18 02                  JR   symbol1   
076A                SYMBOL0:      ; copy to PAD area
076A   03                     INC   bc   ; characters that are part of the identifier
076B   13                     INC   de   
076C                SYMBOL1:      ; 0-9 A-Z a-z _
076C   0A                     LD   a,(bc)   
076D   12                     LD   (de),a   
076E   B7                     OR   a   
076F   28 0A                  JR   z,symbol2   
0771   6F                     LD   l,a   
0772   7E                     LD   a,(hl)   
0773   FE 5E                  CP   lsb(ident_)   
0775   28 F3                  JR   z,symbol0   
0777   FE 00                  CP   lsb(num_)   
0779   28 EF                  JR   z,symbol0   
077B                SYMBOL2:      
077B   0B                     DEC   bc   
077C   AF                     XOR   a   
077D   12                     LD   (de),a   ; terminate string with NUL
077E   C5                     PUSH   bc   
077F   01 00 1A               LD   bc,PAD   
0782   CD 29 08               CALL   hashStr   ; hl = hash
0785   C1                     POP   bc   
0786   E5                     PUSH   hl   
0787   DD E9                  JP   (ix)   
0789                IDENT:       
0789   11 00 1A               LD   de,PAD   
078C   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
078E   18 02                  JR   ident1   
0790                IDENT0:      ; copy to PAD area
0790   03                     INC   bc   ; characters that are part of the identifier
0791   13                     INC   de   
0792                IDENT1:      ; 0-9 A-Z a-z _
0792   0A                     LD   a,(bc)   
0793   12                     LD   (de),a   
0794   B7                     OR   a   
0795   28 0A                  JR   z,ident2   
0797   6F                     LD   l,a   
0798   7E                     LD   a,(hl)   
0799   FE 5E                  CP   lsb(ident_)   
079B   28 F3                  JR   z,ident0   
079D   FE 00                  CP   lsb(num_)   
079F   28 EF                  JR   z,ident0   
07A1                IDENT2:      
07A1   0B                     DEC   bc   
07A2   AF                     XOR   a   
07A3   12                     LD   (de),a   ; terminate string with NUL
07A4   C5                     PUSH   bc   
07A5   01 00 1A               LD   bc,PAD   
07A8   CD 29 08               CALL   hashStr   ; hl = hash
07AB   44 4D                  LD   bc,hl   
07AD   CD 68 08               CALL   lookupEntry   
07B0   C1                     POP   bc   
07B1   38 02                  JR   c,ident3   ; todo: no entry? print an error message
07B3   DD E9                  JP   (ix)   
07B5                IDENT3:      
07B5   E9                     JP   (hl)   
07B6                FRAC:        
07B6   2A 98 18               LD   hl,(vFrac)   
07B9   E5                     PUSH   hl   
07BA   DD E9                  JP   (ix)   
07BC                SQRT1:       
07BC   E1                     POP   hl   
07BD   C5                     PUSH   bc   
07BE   CD A5 08               CALL   squareRoot   
07C1   ED 43 98 18            LD   (vFrac),bc   
07C5   C1                     POP   bc   
07C6   D5                     PUSH   de   
07C7   DD E9                  JP   (ix)   
07C9                ABS1:        
07C9   E1                     POP   hl   
07CA   CB 7C                  BIT   7,h   
07CC   C8                     RET   z   
07CD   AF                     XOR   a   
07CE   95                     SUB   l   
07CF   6F                     LD   l,a   
07D0   9F                     SBC   a,a   
07D1   94                     SUB   h   
07D2   67                     LD   h,a   
07D3   E5                     PUSH   hl   
07D4   DD E9                  JP   (ix)   
07D6                MOD:         
07D6   D1                     POP   de   ; get first value
07D7   E1                     POP   hl   ; get 2nd value
07D8   C5                     PUSH   bc   ; preserve the IP
07D9   44 4D                  LD   bc,hl   
07DB   CD 8C 08               CALL   divide   
07DE   C1                     POP   bc   
07DF   E5                     PUSH   hl   ; push remainder
07E0   DD E9                  JP   (ix)   
07E2                             ; hl = value1, de = value2
07E2                             ; hl = result
07E2                EQUALS:      
07E2   B7                     OR   a   ; reset the carry flag
07E3   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07E5   28 10                  JR   z,true1   
07E7   C3 FD 07               JP   false1   
07EA                             ; hl = value1 de = value2
07EA                             ; hl = result
07EA                LESSTHANEQ:      
07EA   B7                     OR   a   
07EB   ED 52                  SBC   hl,de   
07ED   18 05                  JR   lessthan1   
07EF                             ; hl = value1 de = value2
07EF                             ; hl = result
07EF                LESSTHAN:      
07EF   B7                     OR   a   
07F0   ED 52                  SBC   hl,de   
07F2   28 09                  JR   z,false1   
07F4                LESSTHAN1:      
07F4   FA FD 07               JP   m,false1   
07F7                TRUE1:       
07F7   21 FF FF               LD   hl,TRUE   
07FA   E5                     PUSH   hl   
07FB   DD E9                  JP   (ix)   
07FD                FALSE1:      
07FD   21 00 00               LD   hl,FALSE   
0800   E5                     PUSH   hl   
0801   DD E9                  JP   (ix)   
0803                             ; Z80 port input
0803                             ; port -- value
0803                INPUT:       
0803   E1                     POP   hl   
0804   59                     LD   e,c   ; save IP
0805   4D                     LD   c,l   
0806   ED 68                  IN   l,(c)   
0808   26 00                  LD   h,0   
080A   4B                     LD   c,e   ; restore IP
080B   E5                     PUSH   hl   
080C   DD E9                  JP   (ix)   
080E                             ; Z80 port output
080E                             ; value port --
080E                OUTPUT:      
080E   E1                     POP   hl   
080F   59                     LD   e,c   ; save IP
0810   4D                     LD   c,l   
0811   E1                     POP   hl   
0812   ED 69                  OUT   (c),l   
0814   4B                     LD   c,e   ; restore IP
0815   DD E9                  JP   (ix)   
0817                KEY:         
0817   CD 81 00               CALL   getchar   
081A   26 00                  LD   h,0   
081C   6F                     LD   l,a   
081D   E5                     PUSH   hl   
081E   DD E9                  JP   (ix)   
0820                NEG:         
0820   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0823   D1                     POP   de   
0824   C3 98 03               JP   sub2   ; use the SUBtract routine
0827                FILTER:      
0827                MAP:         
0827                SCAN:        
0827   DD E9                  JP   (ix)   
0829                             ; -------------------------------------------------------------------------------
0829                             ; hash C-string
0829                             ; BC = str
0829                             ; HL = hash
0829                HASHSTR:      
0829   21 00 00               LD   hl,0   
082C                HASHSTR1:      
082C   0A                     LD   a,(bc)   ; load next char
082D   03                     INC   bc   
082E   FE 00                  CP   0   ; NUL?
0830   C8                     RET   z   
0831                HASHSTR2:      
0831   16 00                  LD   d,0   
0833   5F                     LD   e,a   
0834   19                     ADD   hl,de   
0835   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0837   29                     ADD   hl,hl   ; shift left
0838   19                     ADD   hl,de   ; add
0839   29                     ADD   hl,hl   ; shift left
083A   29                     ADD   hl,hl   ; shift left
083B   29                     ADD   hl,hl   ; shift left
083C   29                     ADD   hl,hl   ; shift left
083D   29                     ADD   hl,hl   ; shift left
083E   29                     ADD   hl,hl   ; shift left
083F   19                     ADD   hl,de   ; add
0840   18 EA                  JR   hashStr1   
0842                             ; add entry to hash slots and hash pointers
0842                             ; bc = hash (b = hi, c = lo), de = addr
0842                             ; sets carry if successful
0842                DEFINEENTRY:      
0842   CB 21                  SLA   c   ; lo = lo * 2
0844   69                     LD   l,c   ; lo1 = lo
0845   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0847                DEFINEENTRY0:      
0847   7E                     LD   a,(hl)   ; a = (lo1)
0848   FE FF                  CP   UNUSED   ; is it unused?
084A   28 12                  JR   z,defineEntry3   ; yes, add entry
084C   79                     LD   a,c   ; a = lo
084D   BE                     CP   (hl)   ; compare (lo1) with lo
084E   20 06                  JR   nz,defineEntry1   ; no match loop around
0850   2C                     INC   l   
0851   78                     LD   a,b   ; a = hi
0852   BE                     CP   (hl)   ; compare (lo1+1) with hi
0853   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0855   2D                     DEC   l   ; restore l
0856                DEFINEENTRY1:      
0856   2C                     INC   l   ; try next entry
0857   2C                     INC   l   
0858   79                     LD   a,c   ; compare lo and lo1
0859   BD                     CP   l   ; if equal then there's no space left, reject
085A   20 EB                  JR   nz,defineEntry0   
085C                DEFINEENTRY2:      
085C   B7                     OR   a   ; clear carry flag, failure
085D   C9                     RET      
085E                DEFINEENTRY3:      ; new entry
085E   71                     LD   (hl),c   ; (lo1) = hash lo
085F   23                     INC   hl   
0860   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0861   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0863   72                     LD   (hl),d   
0864   2B                     DEC   hl   
0865   73                     LD   (hl),e   ; (slot + 2) = address
0866   37                     SCF      ; set carry flag, success
0867   C9                     RET      
0868                             ; looks up hash and returns address
0868                             ; bc = hash
0868                             ; returns addr in hl, sets carry if successful
0868                LOOKUPENTRY:      
0868   CB 21                  SLA   c   ; lo = lo * 2
086A   69                     LD   l,c   ; lo1 = lo
086B   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
086D                LOOKUPENTRY0:      
086D   7E                     LD   a,(hl)   ; a = (hl), slot
086E   FE FF                  CP   UNUSED   ; is it unused?
0870   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0872   79                     LD   a,c   ; a = lo
0873   BE                     CP   (hl)   ; compare (lo1) with lo
0874   20 06                  JR   nz,lookupEntry1   ; no match loop around
0876   2C                     INC   l   
0877   78                     LD   a,b   ; a = hi
0878   BE                     CP   (hl)   ; compare (lo1+1) with hi
0879   28 09                  JR   z,lookupEntry3   
087B   2D                     DEC   l   
087C                LOOKUPENTRY1:      
087C   2C                     INC   l   
087D   2C                     INC   l   
087E   79                     LD   a,c   
087F   BD                     CP   l   ; no space left, reject
0880   20 EB                  JR   nz,lookupEntry0   
0882                LOOKUPENTRY2:      
0882   B7                     OR   a   ; clear carry flag, failure
0883   C9                     RET      
0884                LOOKUPENTRY3:      
0884   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0886   56                     LD   d,(hl)   
0887   2D                     DEC   l   ; restore l
0888   5E                     LD   e,(hl)   ; (slot + 2) = address
0889   EB                     EX   de,hl   
088A   37                     SCF      
088B   C9                     RET      
088C                             ; division subroutine.
088C                             ; bc: divisor, de: dividend, hl: remainder
088C                DIVIDE:      
088C   21 00 00               LD   hl,0   ; zero the remainder
088F   3E 10                  LD   a,16   ; loop counter
0891                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0891   CB 21                  SLA   c   
0893   CB 10                  RL   b   
0895   ED 6A                  ADC   hl,hl   
0897   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0899   38 03                  JR   c,divide2   
089B   0C                     INC   c   
089C   18 01                  JR   divide3   
089E                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
089E   19                     ADD   hl,de   
089F                DIVIDE3:      
089F   3D                     DEC   a   
08A0   20 EF                  JR   nz,divide1   
08A2   50 59                  LD   de,bc   ; result from bc to de
08A4   C9                     RET      
08A5                             ; squareroot
08A5                             ; Input: HL = value
08A5                             ; Result: DE = square root BC = remainder
08A5                SQUAREROOT:      
08A5   01 00 08               LD   bc,0800h   
08A8   59                     LD   e,c   
08A9   AF                     XOR   a   
08AA                SQUAREROOT1:      
08AA   29                     ADD   hl,hl   
08AB   CB 11                  RL   c   
08AD   ED 6A                  ADC   hl,hl   
08AF   CB 11                  RL   c   
08B1   30 02                  JR   nc,$+4   
08B3   CB C5                  SET   0,l   
08B5   7B                     LD   a,e   
08B6   87                     ADD   a,a   
08B7   5F                     LD   e,a   
08B8   87                     ADD   a,a   
08B9   CB 45                  BIT   0,l   
08BB   20 03                  JR   nz,$+5   
08BD   91                     SUB   c   
08BE   30 05                  JR   nc,squareRoot4   
08C0   79                     LD   a,c   
08C1   93                     SUB   e   
08C2   1C                     INC   e   
08C3   93                     SUB   e   
08C4   4F                     LD   c,a   
08C5                SQUAREROOT4:      
08C5   10 E3                  DJNZ   squareRoot1   
08C7   CB 45                  BIT   0,l   
08C9   28 01                  JR   z,squareRoot5   
08CB   04                     INC   b   
08CC                SQUAREROOT5:      
08CC   16 00                  LD   d,0   
08CE   C9                     RET      
08CF                PRTDEC:      
08CF   CB 7C                  BIT   7,h   
08D1   28 0B                  JR   z,prtdec0   
08D3   3E 2D                  LD   a,"-"   
08D5   CD 85 00               CALL   putchar   
08D8   AF                     XOR   a   
08D9   95                     SUB   l   
08DA   6F                     LD   l,a   
08DB   9F                     SBC   a,a   
08DC   94                     SUB   h   
08DD   67                     LD   h,a   
08DE                PRTDEC0:      
08DE   C5                     PUSH   bc   
08DF   0E 00                  LD   c,0   ; leading zeros flag = false
08E1   11 F0 D8               LD   de,-10000   
08E4   CD 00 09               CALL   prtdec1   
08E7   11 18 FC               LD   de,-1000   
08EA   CD 00 09               CALL   prtdec1   
08ED   11 9C FF               LD   de,-100   
08F0   CD 00 09               CALL   prtdec1   
08F3   1E F6                  LD   e,-10   
08F5   CD 00 09               CALL   prtdec1   
08F8   0C                     INC   c   ; flag = true for at least digit
08F9   1E FF                  LD   e,-1   
08FB   CD 00 09               CALL   prtdec1   
08FE   C1                     POP   bc   
08FF   C9                     RET      
0900                PRTDEC1:      
0900   06 2F                  LD   b,"0"-1   
0902                PRTDEC2:      
0902   04                     INC   b   
0903   19                     ADD   hl,de   
0904   38 FC                  JR   c,prtdec2   
0906   ED 52                  SBC   hl,de   
0908   3E 30                  LD   a,"0"   
090A   B8                     CP   b   
090B   20 05                  JR   nz,prtdec3   
090D   AF                     XOR   a   
090E   B1                     OR   c   
090F   C8                     RET   z   
0910   18 01                  JR   prtdec4   
0912                PRTDEC3:      
0912   0C                     INC   c   
0913                PRTDEC4:      
0913   78                     LD   a,b   
0914   C3 85 00               JP   putchar   
0917                PRTHEX:      ; display hl as a 16-bit number in hex.
0917   C5                     PUSH   bc   ; preserve the IP
0918   7C                     LD   a,h   
0919   CD 22 09               CALL   prthex2   
091C   7D                     LD   a,l   
091D   CD 22 09               CALL   prthex2   
0920   C1                     POP   bc   
0921   C9                     RET      
0922                PRTHEX2:      
0922   4F                     LD   c,a   
0923   1F                     RRA      
0924   1F                     RRA      
0925   1F                     RRA      
0926   1F                     RRA      
0927   CD 2B 09               CALL   prthex3   
092A   79                     LD   a,c   
092B                PRTHEX3:      
092B   E6 0F                  AND   0x0F   
092D   C6 90                  ADD   a,0x90   
092F   27                     DAA      
0930   CE 40                  ADC   a,0x40   
0932   27                     DAA      
0933   C3 85 00               JP   putchar   
0936                PRTSTR0:      
0936   CD 85 00               CALL   putchar   
0939   23                     INC   hl   
093A                PRTSTR:      
093A   7E                     LD   a,(hl)   
093B   B7                     OR   a   
093C   20 F8                  JR   nz,prtstr0   
093E   C9                     RET      
093F                             ; **************************************************************************
093F                             ; calculate nesting value
093F                             ; a is char to be tested,
093F                             ; e is the nesting value (initially 0)
093F                             ; e is increased by ( and [
093F                             ; e is decreased by ) and ]
093F                             ; e has its bit 7 toggled by `
093F                             ; limited to 127 levels
093F                             ; **************************************************************************
093F                NESTING:      
093F   FE 22                  CP   $22   ; quote char
0941   20 0A                  JR   nz,nesting1   
0943   CB 7B                  BIT   7,e   
0945   28 03                  JR   z,nesting1a   
0947   CB BB                  RES   7,e   
0949   C9                     RET      
094A                NESTING1A:      
094A   CB FB                  SET   7,e   
094C   C9                     RET      
094D                NESTING1:      
094D   CB 7B                  BIT   7,e   
094F   C0                     RET   nz   
0950   FE 7B                  CP   "{"   
0952   28 08                  JR   z,nesting2   
0954   FE 5B                  CP   "["   
0956   28 04                  JR   z,nesting2   
0958   FE 28                  CP   "("   
095A   20 02                  JR   nz,nesting3   
095C                NESTING2:      
095C   1C                     INC   e   
095D   C9                     RET      
095E                NESTING3:      
095E   FE 7D                  CP   "}"   
0960   28 07                  JR   z,nesting4   
0962   FE 5D                  CP   "]"   
0964   28 03                  JR   z,nesting4   
0966   FE 29                  CP   ")"   
0968   C0                     RET   nz   
0969                NESTING4:      
0969   1D                     DEC   e   
096A   C9                     RET      
096B                PROMPT:      
096B   CD 7B 09               CALL   printStr   
096E   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0973   C9                     RET      
0974                CRLF:        
0974   CD 7B 09               CALL   printStr   
0977   0D 0A 00               .CSTR   "\r\n"   
097A   C9                     RET      
097B                PRINTSTR:      
097B   E3                     EX   (sp),hl   ; swap			
097C   CD 3A 09               CALL   prtstr   
097F   23                     INC   hl   ; inc past NUL
0980   E3                     EX   (sp),hl   ; put it back	
0981   C9                     RET      
0982                DEFINE:      
0982   E1                     POP   hl   
0983   7E                     LD   a,(hl)   
0984   23                     INC   hl   
0985   44 4D                  LD   bc,hl   
0987   5F                     LD   e,a   
0988   16 00                  LD   d,0   
098A   19                     ADD   hl,de   
098B   5E                     LD   e,(hl)   
098C   23                     INC   hl   
098D   56                     LD   d,(hl)   
098E   23                     INC   hl   
098F   E5                     PUSH   hl   ; bc = str
0990   D5                     PUSH   de   
0991   CD 29 08               CALL   hashStr   ; hl = hash
0994   D1                     POP   de   
0995   44 4D                  LD   bc,hl   
0997   C3 42 08               JP   defineEntry   
099A                INIT:        
099A   DD 21 8B 0B            LD   ix,next   
099E   FD 21 80 18            LD   iy,STACK   
09A2   21 80 01               LD   hl,isysVars   
09A5   11 98 18               LD   de,sysVars   
09A8   01 10 00               LD   bc,8 * 2   
09AB   ED B0                  LDIR      
09AD   3E FF                  LD   a,UNUSED   
09AF   06 00                  LD   b,0   
09B1   21 00 1B               LD   hl,hashSlots   
09B4                INIT1:       
09B4   77                     LD   (hl),a   
09B5   23                     INC   hl   
09B6   10 FC                  DJNZ   init1   
09B8   CD 82 09               CALL   define   
09BB   04 61 62 73 00         .PSTR   "abs",0   
09C0   C9 07                  DW   abs1   
09C2   CD 82 09               CALL   define   
09C5   05 61 64 64 72 00      .PSTR   "addr",0   
09CB   4E 07                  DW   addr   
09CD   CD 82 09               CALL   define   
09D0   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09D7   22 06                  DW   bytes   
09D9   CD 82 09               CALL   define   
09DC   05 63 61 6C 6C 00      .PSTR   "call",0   
09E2   E6 0B                  DW   call   
09E4   CD 82 09               CALL   define   
09E7   05 63 61 73 65 00      .PSTR   "case",0   
09ED   D9 05                  DW   case   
09EF   CD 82 09               CALL   define   
09F2   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
09FB   0E 07                  DW   closure   
09FD   CD 82 09               CALL   define   
0A00   04 64 65 66 00         .PSTR   "def",0   
0A05   B7 06                  DW   def   
0A07   CD 82 09               CALL   define   
0A0A   05 65 78 65 63 00      .PSTR   "exec",0   
0A10   CC 0B                  DW   exec   
0A12   CD 82 09               CALL   define   
0A15   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A1C   00 00                  DW   false   
0A1E   CD 82 09               CALL   define   
0A21   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A29   27 08                  DW   filter   
0A2B   CD 82 09               CALL   define   
0A2E   05 66 72 61 63 00      .PSTR   "frac",0   
0A34   B6 07                  DW   frac   
0A36   CD 82 09               CALL   define   
0A39   04 67 65 74 00         .PSTR   "get",0   
0A3E   30 05                  DW   get   
0A40   CD 82 09               CALL   define   
0A43   05 68 61 73 68 00      .PSTR   "hash",0   
0A49   AC 06                  DW   hash   
0A4B   CD 82 09               CALL   define   
0A4E   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A55   03 08                  DW   input   
0A57   CD 82 09               CALL   define   
0A5A   03 69 66 00            .PSTR   "if",0   
0A5E   57 05                  DW   if   
0A60   CD 82 09               CALL   define   
0A63   05 69 66 74 65 00      .PSTR   "ifte",0   
0A69   5C 05                  DW   ifte   
0A6B   CD 82 09               CALL   define   
0A6E   04 6B 65 79 00         .PSTR   "key",0   
0A73   17 08                  DW   key   
0A75   CD 82 09               CALL   define   
0A78   04 6C 65 74 00         .PSTR   "let",0   
0A7D   27 07                  DW   let   
0A7F   CD 82 09               CALL   define   
0A82   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0A88   89 05                  DW   loop   
0A8A   CD 82 09               CALL   define   
0A8D   04 6D 61 70 00         .PSTR   "map",0   
0A92   27 08                  DW   map   
0A94   CD 82 09               CALL   define   
0A97   04 6D 6F 64 00         .PSTR   "mod",0   
0A9C   D6 07                  DW   mod   
0A9E   CD 82 09               CALL   define   
0AA1   04 6E 65 67 00         .PSTR   "neg",0   
0AA6   20 08                  DW   neg   
0AA8   CD 82 09               CALL   define   
0AAB   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0AB3   0E 08                  DW   output   
0AB5   CD 82 09               CALL   define   
0AB8   05 73 63 61 6E 00      .PSTR   "scan",0   
0ABE   01 00                  DW   scan   
0AC0   CD 82 09               CALL   define   
0AC3   07 73 65 6C 65 63 74 00 .PSTR   "select",0   
0ACB   ED 05                  DW   select   
0ACD   CD 82 09               CALL   define   
0AD0   04 73 65 74 00         .PSTR   "set",0   
0AD5   42 05                  DW   set   
0AD7   CD 82 09               CALL   define   
0ADA   04 73 68 6C 00         .PSTR   "shl",0   
0ADF   D3 03                  DW   shl   
0AE1   CD 82 09               CALL   define   
0AE4   04 73 68 72 00         .PSTR   "shr",0   
0AE9   E3 03                  DW   shr   
0AEB   CD 82 09               CALL   define   
0AEE   05 73 71 72 74 00      .PSTR   "sqrt",0   
0AF4   BC 07                  DW   sqrt1   
0AF6   CD 82 09               CALL   define   
0AF9   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0B01   7F 05                  DW   switch   
0B03   CD 82 09               CALL   define   
0B06   05 74 72 75 65 00      .PSTR   "true",0   
0B0C   FF FF                  DW   true   
0B0E   CD 82 09               CALL   define   
0B11   06 77 6F 72 64 73 00   .PSTR   "words",0   
0B18   1D 06                  DW   words   
0B1A   C9                     RET      
0B1B                START:       
0B1B   31 80 18               LD   sp,STACK   ; start of Siena
0B1E   CD 9A 09               CALL   init   ; setups
0B21   CD 7B 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B24   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0B31                INTERPRET:      
0B31   CD 6B 09               CALL   prompt   
0B34   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B37   ED 43 9C 18            LD   (vTIBPtr),bc   
0B3B                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B3B   1E 00                  LD   e,0   ; initilize nesting value
0B3D   C5                     PUSH   bc   ; save offset into TIB,
0B3E                             ; bc is also the count of chars in TIB
0B3E   21 00 19               LD   hl,TIB   ; hl is start of TIB
0B41   18 06                  JR   interpret4   
0B43                INTERPRET3:      
0B43   7E                     LD   a,(hl)   ; a = char in TIB
0B44   23                     INC   hl   ; inc pointer into TIB
0B45   0B                     DEC   bc   ; dec count of chars in TIB
0B46   CD 3F 09               CALL   nesting   ; update nesting value
0B49                INTERPRET4:      
0B49   79                     LD   a,c   ; is count zero?
0B4A   B0                     OR   b   
0B4B   20 F6                  JR   nz,interpret3   ; if not loop
0B4D   C1                     POP   bc   ; restore offset into TIB
0B4E                WAITCHAR:      
0B4E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B51   FE 20                  CP   $20   ; compare to space
0B53   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B55   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B57                             ; ???? NEEDED?
0B57   28 2A                  JR   z,waitchar4   
0B59   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B5B   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B5D                MACRO:       
0B5D                             ;  ld (vTIBPtr),bc
0B5D                             ;  ld hl,ctrlCodes
0B5D                             ;  add a,l			            ; look up key of macros
0B5D                             ;  ld l,a
0B5D                             ;  ld e,(hl)
0B5D                             ;  ld a,e
0B5D                             ;  or a
0B5D                             ;  jr z,macro1
0B5D                             ;  ld d,msb(macros)
0B5D                             ;  push de
0B5D                             ;  call call		            ; Siena exec_ operation and jump to it
0B5D                             ;  db DC1,0
0B5D                             ; macro1:
0B5D                             ;  ld bc,(vTIBPtr)
0B5D   18 DC                  JR   interpret2   
0B5F                WAITCHAR1:      
0B5F   21 00 19               LD   hl,TIB   
0B62   09                     ADD   hl,bc   
0B63   77                     LD   (hl),a   ; store the character in textbuf
0B64   03                     INC   bc   
0B65   CD 85 00               CALL   putchar   ; echo character to screen
0B68   CD 3F 09               CALL   nesting   
0B6B   18 E1                  JR   waitchar   ; wait for next character
0B6D                WAITCHAR3:      
0B6D   21 00 19               LD   hl,TIB   
0B70   09                     ADD   hl,bc   
0B71   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B73   23                     INC   hl   
0B74   36 0A                  LD   (hl),"\n"   
0B76   23                     INC   hl   
0B77   03                     INC   bc   
0B78   03                     INC   bc   
0B79   CD 74 09               CALL   crlf   ; echo character to screen
0B7C   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B7D   B7                     OR   a   
0B7E   20 CE                  JR   nz,waitchar   
0B80   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0B82   03                     INC   bc   
0B83                WAITCHAR4:      
0B83   ED 43 9C 18            LD   (vTIBPtr),bc   
0B87   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B8A                             ; we pressed enter
0B8A   0B                     DEC   bc   
0B8B                NEXT:        
0B8B   03                     INC   bc   ; Increment the IP
0B8C   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B8D                             ; bit 7,a                   ; is 15-bit opcode ?
0B8D                             ; jr nz,next3
0B8D   FE 20                  CP   " "   ; whitespace?
0B8F   28 FA                  JR   z,next   ; space? ignore
0B91   38 07                  JR   c,next1   
0B93   6F                     LD   l,a   ; index into table
0B94   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B96   6E                     LD   l,(hl)   ; get low jump address
0B97   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0B99   E9                     JP   (hl)   ; Jump to routine
0B9A                NEXT1:       
0B9A   FE 1B                  CP   ESC   ; escape from interpreter
0B9C   28 07                  JR   z,escape   
0B9E   FE 00                  CP   NUL   ; end of input string?
0BA0   28 15                  JR   z,exit   
0BA2                             ; cp ETX                      ; end of command line input text?
0BA2                             ; jr nz,next
0BA2                             ;     ld hl,-STACK               ; etx, is SP valid? (too many pops?)
0BA2                             ;     add hl,sp
0BA2                             ;     jr nc,next2
0BA2                             ;     ld sp,STACK                ; yes, reset stack
0BA2                             ; next2:
0BA2   C3 31 0B               JP   interpret   ; no, other whitespace, macros?
0BA5                             ; next3:
0BA5                             ;     ld h,a                    ; build address
0BA5                             ;     inc bc
0BA5                             ;     ld a,(bc)
0BA5                             ;     ld l,a
0BA5                             ;     add hl,hl
0BA5                             ;     jp (hl)
0BA5                ESCAPE:      
0BA5   60 69                  LD   hl,bc   ; address of code after escape opcode
0BA7   23                     INC   hl   
0BA8   E9                     JP   (hl)   
0BA9                             ; clear stack args
0BA9                CLEAR:       
0BA9   FD 54                  LD   d,iyh   ; de = BP
0BAB   FD 5D                  LD   e,iyl   
0BAD   EB                     EX   de,hl   ; hl = BP, de = result
0BAE   F9                     LD   sp,hl   ; sp = BP
0BAF   21 00 00               LD   hl,0   
0BB2   22 9A 18               LD   (vDataWidth),hl   
0BB5   DD E9                  JP   (ix)   
0BB7                EXIT:        
0BB7   50 59                  LD   de,bc   ; address of code after exit opcode
0BB9   13                     INC   de   
0BBA   D9                     EXX      
0BBB   C1                     POP   bc   ; bc = last result
0BBC   FD 54                  LD   d,iyh   ; de = BP
0BBE   FD 5D                  LD   e,iyl   
0BC0   EB                     EX   de,hl   ; hl = BP
0BC1   F9                     LD   sp,hl   ; sp = BP
0BC2   D9                     EXX      
0BC3   E1                     POP   hl   ; hl = old BP
0BC4   C1                     POP   bc   ; pop SCP (discard)
0BC5   C1                     POP   bc   ; bc = IP
0BC6   F9                     LD   sp,hl   ; sp = old BP
0BC7   D9                     EXX      
0BC8   C5                     PUSH   bc   ; push result
0BC9   D9                     EXX      
0BCA   EB                     EX   de,hl   
0BCB   E9                     JP   (hl)   
0BCC                             ; execute a block of code
0BCC                             ; uses parent scope
0BCC                EXEC:        ; execute code at pointer
0BCC   E1                     POP   hl   ; hl = pointer to code
0BCD   7C                     LD   a,h   ; skip if destination address is NUL
0BCE   B5                     OR   l   
0BCF   28 13                  JR   z,exec2   
0BD1   C5                     PUSH   bc   ; push IP
0BD2   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BD5   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BD8   D5                     PUSH   de   ; push SCP
0BD9   FD E5                  PUSH   iy   ; push BP
0BDB   FD 21 00 00            LD   iy,0   ; BP = SP
0BDF   FD 39                  ADD   iy,sp   
0BE1   44 4D                  LD   bc,hl   ; IP = pointer to code
0BE3   0B                     DEC   bc   ; dec to prepare for next routine
0BE4                EXEC2:       
0BE4   DD E9                  JP   (ix)   
0BE6                             ; call with args
0BE6                             ; creates a scope
0BE6                CALL:        ; execute code at pointer
0BE6   E1                     POP   hl   ; hl = pointer to code
0BE7                CALL1:       
0BE7   7C                     LD   a,h   ; skip if destination address is NUL
0BE8   B5                     OR   l   
0BE9   28 0E                  JR   z,call2   
0BEB   C5                     PUSH   bc   ; push IP
0BEC   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0BEE   FD E5                  PUSH   iy   ; push BP
0BF0   FD 21 00 00            LD   iy,0   ; BP = SP
0BF4   FD 39                  ADD   iy,sp   
0BF6   44 4D                  LD   bc,hl   ; IP = pointer to code
0BF8   0B                     DEC   bc   ; dec to prepare for next routine
0BF9                CALL2:       
0BF9   DD E9                  JP   (ix)   
0BFB                             ; call with args
0BFB                             ; pushes array, creates a scope
0BFB                DOCLOSURE:      
0BFB   E1                     POP   hl   
0BFC   5E                     LD   e,(hl)   ; load array and push
0BFD   23                     INC   hl   
0BFE   56                     LD   d,(hl)   
0BFF   23                     INC   hl   
0C00   D5                     PUSH   de   
0C01   C3 E7 0B               JP   call1   
0C04                             ; ; -- addr
0C04                             ; ; returns address of variable
0C04                             ; dolet:				            ; execute code at pointer
0C04                             ;     pop hl
0C04                             ;     ld (vSetter),hl             ; store address in setter
0C04                             ;     ld e,(hl)
0C04                             ;     inc hl
0C04                             ;     ld d,(hl)
0C04                             ;     push de
0C04                             ;     jp (ix)
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x 1000 let x 10 set x", 10
4000   31 80 18               LD   SP,STACK   
4003   CD 9A 09               CALL   init   
4006   CD CC 0B               CALL   exec   
4009   3A 78 20 31 30 30 30 20 6C 65 74 20 78 20 31 30 20 73 65 74 20 78 00 .CSTR   ":x 1000 let x 10 set x"   
4020                          ;*Macro unroll:  expect ":x 1000 let x 10 set x",10
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 0A 00               LD   DE,10   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   28 61                  JR   Z,expectM_0_2368S43   
402C   CD 7B 09               CALL   printStr   
402F   43 6F 64 65 3A 20 3A 78 20 31 30 30 30 20 6C 65 74 20 78 20 31 30 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 1000 let x 10 set x"   
404C   CD 7B 09               CALL   printStr   
404F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405E   21 0A 00               LD   HL,10   
4061   CD CF 08               CALL   prtdec   
4064   CD 7B 09               CALL   printStr   
4067   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4074   E1                     POP   hl   
4075   E5                     PUSH   hl   
4076   CD CF 08               CALL   prtdec   
4079   E1                     POP   hl   
407A   CD 7B 09               CALL   printStr   
407D   20 28 23 00            .CSTR   " (#"   
4081   CD 17 09               CALL   prthex   
4084   CD 7B 09               CALL   printStr   
4087   29 0D 0A 00            .CSTR   ")\r\n"   
408B   76                     HALT      
408C   00                     .CSTR      
408D                EXPECTM_0_2368S43:      
408D   E1                     POP   HL   
408E                             ; test ":x [100] { @1 } closure x", 100
408E                             ; test ":x [100 200] { @2 } closure x", 200
408E                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
408E                             ; test "0 [{1}] switch", 1
408E                             ; test "1 [{1} {2} {3}] switch", 2
408E                             ; test "9 [{1} {5}] switch", 5
408E                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
408E                             ; test "bytes 'ABC' get", $41
408E                             ; test "bytes [1 2 3] get", 1
408E                             ; test ":xyz 123 const ; xyz", 123
408E                             ; test ":x 1 const ; x", 1
408E                             ; test ":x 'A' const x get", $41
408E                             ; test ":x [1] const x get", 1
408E                             ; test ":x [1 2 3] const x 2? get", 3
408E                             ; test "2 (1 2 +) *", 6
408E                             ; test ":xyz 123 const ; xyz", 123
408E                             ; test ":xyz 123 let ; xyz get", 123
408E                             ; test "1 2 {$1 $2 +} call", 3
408E                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
408E                             ; test ":xyz {1} def :xyz addr call", 1
408E                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
408E                             ; test ":xyz {10} def :xyz addr exec", 10
408E                             ; test ":xyz {10} def :xyz addr call", 10
408E                             ; test "'hello' hash", $7f54
408E                             ; test ":hello", $7f54
408E                             ; test "bytes [1 2 3]", $1e02
408E                             ; test "bytes [1 2 3] 1? get", 2
408E                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
408E                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
408E                             ; test "words [1 2 3]", $1e02
408E                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
408E                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
408E                             ; test "words [10 20 30] 1 ? get", 10
408E                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
408E                             ; test "{{{1} exec} exec} exec", 1
408E                             ; test "5 {{{$1} exec} exec} call", 5
408E                             ; test "5 {$1} call", 5
408E                             ; test "5 {{$1} exec} call", 5
408E                             ; test "2 1 {{$1} call} call", 2
408E                             ; test "2 1 {$2} call", 1
408E                             ; test "2 1 {$1} call", 2
408E                             ; test "2 1 {$2} call", 1
408E                             ; test "2 4 {$2} call", 4
408E                             ; test "{{1} call} call", 1
408E                             ; test "5 {-1 {$1} if} call", 5
408E                             ; test "0 {} loop", 0
408E                             ; test "1 {1-} loop", $1a00
408E                             ; test "65 .c", 0
408E                             ; test "1 2 <", TRUE
408E                             ; test "2 2 <=", TRUE
408E                             ; test "2 1 <", FALSE
408E                             ; test "1 2 >", FALSE
408E                             ; test "2 2 >=", TRUE
408E                             ; test "2 1 >", TRUE
408E                             ; test "10 sqrt", 3
408E                             ; test "10 sqrt frac", 1
408E                             ; test "7 3 /", 2
408E                             ; test "7 3 / frac", 1
408E                             ; test "1 2 +", 3
408E                             ; test ":h {1} def :h addr call", 1
408E                             ; test "1 2 +", 3
408E                             ; test "4 1 2 +", 3
408E                             ; test "1", 1
408E                             ; test "2", 2
408E                             ; test "``", 0
408E                             ; test "`a`", $61
408E                             ; test "`\\``", $60
408E                             ; test "`b` 'cba' in", -1
408E                             ; test "`x` 'cba' in", 0
408E                             ; test "5 0 {1} if", 5
408E                             ; test "0 {1} {2} ifte", 2
408E                             ; test "5 -1 {1} if", 1
408E                             ; test "-1 {1} {2} ifte", 1
408E                             ; test "9 sw {1} {5} ca", 5
408E                             ; test "0 sw {1} ca", 1
408E                             ; test "1 sw {1} {2} {3} ca", 2
408E                             ; test "5 -1 {2} if", 2
408E                             ; test "5 0 {2} if", 5
408E                             ; test "5 0 {0 {2} if} if", 5
408E                             ; test "5 0 {-1 {2} if} if", 5
408E                             ; test "5 -1 {2} if", 2
408E                             ; test "5 -1 {-1 {2} if} if", 2
408E                             ; test "{1} ex", 1
408E                             ; test "'A' @", 65
408E                             ; test "1", 1
408E                             ; test "0", 0
408E                             ; test "10", 10
408E                             ; test "123", 123
408E                             ; test "$10", $10
408E                             ; test "$FF", $FF
408E                             ; test "2 3 =", 0
408E                             ; test "3 3 =", 1
408E                             ; test "2 3 <", 1
408E                             ; test "3 3 <", 0
408E                             ; test "3 3 >", 0
408E                             ; test "4 3 >", 1
408E                             ; test "1 2 +", 3
408E                             ; test "123 456 +", 123+456
408E                             ; test "64 128 +", 64+128
408E                             ; test "5 3 -", 2
408E                             ; test "3 5 &", 1
408E                             ; test "3 5 |", 7
408E                             ; test "2 3 *", 6
408E                             ; test "1 2 3 + *", 5
408E                             ; ; test "1 2 3 ' +", 3
408E                             ; ; test "1_ 2 +",1
408E                             ; ; test "1_ 1 +",0
408E                             ; ; call enter
408E                             ; ;     .cstr "1 3",$22,"+"
408E                             ; ; expect "1 3 DUP +", 6
408E                             ; ; test "5 2/'", 2
408E                             ; ; test "3 5$ -", 2
408E                             ; ; test "5 2/$ '", 1
408E                             ; ; test "2 3%++", 7
408E                             ; ; test "1 2 3~''", 2
408E                             ; ; test "1 2 3~+*", 8
408E                             ; ; test "2a!a@",2
408E                             ; ; test "3x! 1 x@+x! x@", 4
408E                             ; ; test "3x! 1_ x@+x! x@", 2
408E                             ; ; test "1{", 2
408E                             ; ; test "1}", 0
408E                             ; ; test "2}", 1
408E                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
408E                             ; ; test "{2} \\^", 2
408E                             ; ; test ":X1; X", 1
408E                             ; ; test ":A100;A", 100
408E                             ; ; test ":Aa!; 3A a@", 3
408E                             ; ; test ":Aa!;:Ba@;4AB", 4
408E                             ; ; test "[]$ '", 0
408E                             ; ; test "[3]$ '", 1
408E                             ; ; test "[3]'@", 3
408E                             ; ; test "[1 2 3]'@", 1
408E                             ; ; test "[1 2 3]'2+@", 2
408E                             ; ; test "\\h@[1]''\\h@$-", 2
408E                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
408E                             ; ; test "\\[]$ '", 0
408E                             ; ; test "\\[3]'\\@", 3
408E                             ; ; test "\\[3]$ '", 1
408E                             ; ; test "\\[1 2 3]'\\@", 1
408E                             ; ; test "\\[1 2 3]'1+\\@", 2
408E                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
408E                             ; ; test "\\h@\\[1]''\\h@$-", 1
408E                             ; ; test "\\`A`\\@",65
408E                             ; ; test "0 0{1+}", 0
408E                             ; ; test "0 1{1+}", 1
408E                             ; ; test "0 2{1+}", 2
408E                             ; ; test "0 1{0{1+}}", 0
408E                             ; ; test "0 1{1{1+}}", 1
408E                             ; ; test "0 2{1{1+}}", 2
408E                             ; ; test "0 2{2{1+}}", 4
408E                             ; ; test "0 1{\\i@+}", 0
408E                             ; ; test "0 2{\\i@+}", 1
408E                             ; ; test "0 3{\\i@+}", 3
408E                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
408E                             ; ; test "0t! 10{1 t@+t!} t@",10
408E                             ; ; test "0{100}{200}",200
408E                             ; ; test "1{100}{200}",100
408E                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
408E                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
408E                             ; ; test ":X10;\\0X", 10
408E                             ; ; test "2 \\1x! \\1x@", 2
408E   CD 7B 09               CALL   printStr   
4091   44 6F 6E 65 21 00      .CSTR   "Done!"   
4097   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0827 DEFINED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 237 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1809 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
CLEAR_:             030F DEFINED AT LINE 211 IN Siena.asm
PAREN_:             0312 DEFINED AT LINE 214 IN Siena.asm
PARENEND_:          0315 DEFINED AT LINE 217 IN Siena.asm
DOT_:               0318 DEFINED AT LINE 220 IN Siena.asm
DOT1:               0324 DEFINED AT LINE 228 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
DOT2:               032D DEFINED AT LINE 233 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
DOT3:               0337 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
DOT4:               033B DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
INDEX_:             0342 DEFINED AT LINE 248 IN Siena.asm
INDEX1:             034B DEFINED AT LINE 255 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
BLOCK_:             034F DEFINED AT LINE 259 IN Siena.asm
BLOCKEND_:          0352 DEFINED AT LINE 261 IN Siena.asm
CHAR_:              0355 DEFINED AT LINE 263 IN Siena.asm
ARRAY_:             0358 DEFINED AT LINE 265 IN Siena.asm
ARRAYEND_:          035B DEFINED AT LINE 267 IN Siena.asm
IDENT_:             035E DEFINED AT LINE 269 IN Siena.asm
SYMBOL_:            0361 DEFINED AT LINE 271 IN Siena.asm
AND_:               0364 DEFINED AT LINE 273 IN Siena.asm
AND1:               036B DEFINED AT LINE 281 IN Siena.asm
                    > USED AT LINE 294 IN Siena.asm
                    > USED AT LINE 305 IN Siena.asm
OR_:                036F DEFINED AT LINE 286 IN Siena.asm
XOR_:               0378 DEFINED AT LINE 296 IN Siena.asm
XOR1:               0379 DEFINED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
INV_:               0381 DEFINED AT LINE 307 IN Siena.asm
ADD_:               0386 DEFINED AT LINE 311 IN Siena.asm
HDOT_:              038C DEFINED AT LINE 318 IN Siena.asm
MUL_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB_:               0396 DEFINED AT LINE 326 IN Siena.asm
SUB2:               0398 DEFINED AT LINE 329 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
NOT_:               039E DEFINED AT LINE 335 IN Siena.asm
EQ_:                03A3 DEFINED AT LINE 339 IN Siena.asm
EQ1:                03A4 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
GT_:                03A8 DEFINED AT LINE 345 IN Siena.asm
LT_:                03AC DEFINED AT LINE 350 IN Siena.asm
LT1:                03AE DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
DIV_:               03B9 DEFINED AT LINE 361 IN Siena.asm
COMMENT_:           03C8 DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 376 IN Siena.asm
NOP_:               03D1 DEFINED AT LINE 380 IN Siena.asm
SHL:                03D3 DEFINED AT LINE 390 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
SHL1:               03DB DEFINED AT LINE 397 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
SHL2:               03DC DEFINED AT LINE 399 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
SHR:                03E3 DEFINED AT LINE 407 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
SHR1:               03EB DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
SHR2:               03EF DEFINED AT LINE 417 IN Siena.asm
                    > USED AT LINE 413 IN Siena.asm
MUL:                03F6 DEFINED AT LINE 423 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
MUL2:               0400 DEFINED AT LINE 432 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
NUM:                0412 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               041B DEFINED AT LINE 452 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
NUM1:               041C DEFINED AT LINE 454 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
NUM2:               0434 DEFINED AT LINE 472 IN Siena.asm
                    > USED AT LINE 457 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 494 IN Siena.asm
                    > USED AT LINE 496 IN Siena.asm
NUM3:               043F DEFINED AT LINE 480 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
HEXNUM:             0442 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            0445 DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
HEXNUM2:            044D DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
STRING:             045F DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0467 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
STRING2:            046A DEFINED AT LINE 514 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
CHAR:               0478 DEFINED AT LINE 524 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
CHAR1:              047B DEFINED AT LINE 526 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR2:              0487 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
CHAR3:              048A DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
PAREN:              048D DEFINED AT LINE 542 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
PAREN2:             0493 DEFINED AT LINE 545 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
PARENEND:           049A DEFINED AT LINE 549 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
BLOCK:              04A9 DEFINED AT LINE 560 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
BLOCK1:             04AD DEFINED AT LINE 564 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 590 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 598 IN Siena.asm
BLOCK2:             04D3 DEFINED AT LINE 588 IN Siena.asm
BLOCK3:             04D6 DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
BLOCK4:             04DC DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 573 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
BLOCKEND:           04E2 DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 262 IN Siena.asm
ARG:                04F6 DEFINED AT LINE 620 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0514 DEFINED AT LINE 643 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              0530 DEFINED AT LINE 663 IN Siena.asm
GET:                0530 DEFINED AT LINE 664 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
GET1:               0531 DEFINED AT LINE 666 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
GET2:               053F DEFINED AT LINE 675 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
SET:                0542 DEFINED AT LINE 680 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
SET1:               0554 DEFINED AT LINE 694 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
IF:                 0557 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
IFTE:               055C DEFINED AT LINE 706 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
IFTE1:              055D DEFINED AT LINE 708 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
IFTE2:              0566 DEFINED AT LINE 717 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
IFTE3:              057D DEFINED AT LINE 730 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
SWITCH:             057F DEFINED AT LINE 735 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
LOOP:               0589 DEFINED AT LINE 748 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
LOOP1:              059E DEFINED AT LINE 760 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
LOOP2:              05B9 DEFINED AT LINE 776 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
LOOP3:              05C3 DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
CASE:               05D9 DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
SELECT:             05ED DEFINED AT LINE 809 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
CASE0:              0609 DEFINED AT LINE 827 IN Siena.asm
                    > USED AT LINE 824 IN Siena.asm
CASE1:              060E DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
CASE2:              061B DEFINED AT LINE 841 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
WORDS:              061D DEFINED AT LINE 844 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
BYTES:              0622 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
BYTES1:             0625 DEFINED AT LINE 849 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
ARRAY:              062A DEFINED AT LINE 853 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
ARRAYEND:           063C DEFINED AT LINE 863 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
ARRAYEND1:          065C DEFINED AT LINE 886 IN Siena.asm
                    > USED AT LINE 897 IN Siena.asm
ARRAYEND2:          066C DEFINED AT LINE 900 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
ARRAYEND3:          067F DEFINED AT LINE 916 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
HASH:               06AC DEFINED AT LINE 957 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
DEF:                06B7 DEFINED AT LINE 967 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
DEF1:               06C9 DEFINED AT LINE 979 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
DEF2:               06ED DEFINED AT LINE 1003 IN Siena.asm
DEF3:               06F0 DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
DEF4:               06F6 DEFINED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
DEF5:               070B DEFINED AT LINE 1027 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
CLOSURE:            070E DEFINED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
LET:                0727 DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
LET2:               074B DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
ADDR:               074E DEFINED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
ADDR1:              075A DEFINED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
SYMBOL:             0762 DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
SYMBOL0:            076A DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
SYMBOL1:            076C DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1105 IN Siena.asm
SYMBOL2:            077B DEFINED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
IDENT:              0789 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
IDENT0:             0790 DEFINED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
IDENT1:             0792 DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
IDENT2:             07A1 DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
IDENT3:             07B5 DEFINED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
FRAC:               07B6 DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
SQRT1:              07BC DEFINED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
ABS1:               07C9 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
MOD:                07D6 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
EQUALS:             07E2 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 343 IN Siena.asm
LESSTHANEQ:         07EA DEFINED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
LESSTHAN:           07EF DEFINED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
LESSTHAN1:          07F4 DEFINED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
TRUE1:              07F7 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
FALSE1:             07FD DEFINED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
INPUT:              0803 DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
OUTPUT:             080E DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
KEY:                0817 DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
NEG:                0820 DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
FILTER:             0827 DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
MAP:                0827 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
HASHSTR:            0829 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
HASHSTR1:           082C DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
HASHSTR2:           0831 DEFINED AT LINE 1290 IN Siena.asm
DEFINEENTRY:        0842 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
DEFINEENTRY0:       0847 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
DEFINEENTRY1:       0856 DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
DEFINEENTRY2:       085C DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
DEFINEENTRY3:       085E DEFINED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
LOOKUPENTRY:        0868 DEFINED AT LINE 1348 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
LOOKUPENTRY0:       086D DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
LOOKUPENTRY1:       087C DEFINED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
LOOKUPENTRY2:       0882 DEFINED AT LINE 1370 IN Siena.asm
LOOKUPENTRY3:       0884 DEFINED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
DIVIDE:             088C DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
DIVIDE1:            0891 DEFINED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
DIVIDE2:            089E DEFINED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
DIVIDE3:            089F DEFINED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
SQUAREROOT:         08A5 DEFINED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
SQUAREROOT1:        08AA DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
SQUAREROOT4:        08C5 DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
SQUAREROOT5:        08CC DEFINED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
PRTDEC:             08CF DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            08DE DEFINED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
PRTDEC1:            0900 DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
PRTDEC2:            0902 DEFINED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
PRTDEC3:            0912 DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
PRTDEC4:            0913 DEFINED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
PRTHEX:             0917 DEFINED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0922 DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
PRTHEX3:            092B DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
PRTSTR0:            0936 DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
PRTSTR:             093A DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
NESTING:            093F DEFINED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
NESTING1A:          094A DEFINED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
NESTING1:           094D DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
NESTING2:           095C DEFINED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
NESTING3:           095E DEFINED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
NESTING4:           0969 DEFINED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
PROMPT:             096B DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1753 IN Siena.asm
CRLF:               0974 DEFINED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1822 IN Siena.asm
PRINTSTR:           097B DEFINED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 213
DEFINE:             0982 DEFINED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
INIT:               099A DEFINED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 40
INIT1:              09B4 DEFINED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
START:              0B1B DEFINED AT LINE 1746 IN Siena.asm
INTERPRET:          0B31 DEFINED AT LINE 1752 IN Siena.asm
                    > USED AT LINE 1860 IN Siena.asm
INTERPRET2:         0B3B DEFINED AT LINE 1758 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
INTERPRET3:         0B43 DEFINED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
INTERPRET4:         0B49 DEFINED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
WAITCHAR:           0B4E DEFINED AT LINE 1777 IN Siena.asm
                    > USED AT LINE 1811 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
MACRO:              0B5D DEFINED AT LINE 1787 IN Siena.asm
WAITCHAR1:          0B5F DEFINED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1780 IN Siena.asm
WAITCHAR3:          0B6D DEFINED AT LINE 1813 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
WAITCHAR4:          0B83 DEFINED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
NEXT:               0B8B DEFINED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 794 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1841 IN Siena.asm
NEXT1:              0B9A DEFINED AT LINE 1848 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
ESCAPE:             0BA5 DEFINED AT LINE 1869 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
CLEAR:              0BA9 DEFINED AT LINE 1875 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
EXIT:               0BB7 DEFINED AT LINE 1884 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
EXEC:               0BCC DEFINED AT LINE 1906 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0BE4 DEFINED AT LINE 1920 IN Siena.asm
                    > USED AT LINE 1910 IN Siena.asm
CALL:               0BE6 DEFINED AT LINE 1925 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
CALL1:              0BE7 DEFINED AT LINE 1927 IN Siena.asm
                    > USED AT LINE 1950 IN Siena.asm
CALL2:              0BF9 DEFINED AT LINE 1938 IN Siena.asm
                    > USED AT LINE 1930 IN Siena.asm
DOCLOSURE:          0BFB DEFINED AT LINE 1943 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1604 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1173 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 1881 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1830 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 667 IN Siena.asm
                    > USED AT LINE 683 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
                    > USED AT LINE 937 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1762 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1814 IN Siena.asm
                    > USED AT LINE 1831 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1610 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2368S43:  408D DEFINED AT LINE 34
                    > USED AT LINE 10
