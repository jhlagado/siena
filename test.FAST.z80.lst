0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD A7 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      ; still available " , ?
0220   E2                     DB   lsb(nop_)   ; SP
0221   58                     DB   lsb(store_)   ; !
0222   E2                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   3C                     DB   lsb(index_)   ; %
0226   7A                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(strDef_)   ; '
0228   65                     DB   lsb(block_)   ; (
0229   68                     DB   lsb(blockend_)   ; )
022A   A9                     DB   lsb(mul_)   ; *
022B   9C                     DB   lsb(add_)   ; +
022C   E2                     DB   lsb(nop_)   ; ,
022D   AC                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   CA                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   77                     DB   lsb(symbol_)   ; :
023B   D9                     DB   lsb(comment_)   ; ;
023C   BD                     DB   lsb(lt_)   ; <
023D   B4                     DB   lsb(eq_)   ; =
023E   B9                     DB   lsb(gt_)   ; >
023F   E2                     DB   lsb(nop_)   ; ?
0240   49                     DB   lsb(fetch_)   ; @
0241   74                     DB   lsb(ident_)   ; A
0242   74                     DB   lsb(ident_)   ; B
0243   74                     DB   lsb(ident_)   ; C
0244   74                     DB   lsb(ident_)   ; D
0245   74                     DB   lsb(ident_)   ; E
0246   74                     DB   lsb(ident_)   ; F
0247   74                     DB   lsb(ident_)   ; G
0248   74                     DB   lsb(ident_)   ; h
0249   74                     DB   lsb(ident_)   ; I
024A   74                     DB   lsb(ident_)   ; J
024B   74                     DB   lsb(ident_)   ; K
024C   74                     DB   lsb(ident_)   ; L
024D   74                     DB   lsb(ident_)   ; M
024E   74                     DB   lsb(ident_)   ; N
024F   74                     DB   lsb(ident_)   ; O
0250   74                     DB   lsb(ident_)   ; p
0251   74                     DB   lsb(ident_)   ; Q
0252   74                     DB   lsb(ident_)   ; R
0253   74                     DB   lsb(ident_)   ; S
0254   74                     DB   lsb(ident_)   ; T
0255   74                     DB   lsb(ident_)   ; U
0256   74                     DB   lsb(ident_)   ; V
0257   74                     DB   lsb(ident_)   ; W
0258   74                     DB   lsb(ident_)   ; X
0259   74                     DB   lsb(ident_)   ; Y
025A   74                     DB   lsb(ident_)   ; Z
025B   6E                     DB   lsb(array_)   ; [
025C   E2                     DB   lsb(nop_)   ; \
025D   71                     DB   lsb(arrayEnd_)   ; ]
025E   8E                     DB   lsb(xor_)   ; ^
025F   74                     DB   lsb(ident_)   ; _
0260   6B                     DB   lsb(char_)   ; `    	
0261   74                     DB   lsb(ident_)   ; a
0262   74                     DB   lsb(ident_)   ; b
0263   74                     DB   lsb(ident_)   ; c
0264   74                     DB   lsb(ident_)   ; d
0265   74                     DB   lsb(ident_)   ; e
0266   74                     DB   lsb(ident_)   ; f
0267   74                     DB   lsb(ident_)   ; g
0268   74                     DB   lsb(ident_)   ; h
0269   74                     DB   lsb(ident_)   ; i
026A   74                     DB   lsb(ident_)   ; j
026B   74                     DB   lsb(ident_)   ; k
026C   74                     DB   lsb(ident_)   ; l
026D   74                     DB   lsb(ident_)   ; m
026E   74                     DB   lsb(ident_)   ; n
026F   74                     DB   lsb(ident_)   ; o
0270   74                     DB   lsb(ident_)   ; p
0271   74                     DB   lsb(ident_)   ; q
0272   74                     DB   lsb(ident_)   ; r
0273   74                     DB   lsb(ident_)   ; s
0274   74                     DB   lsb(ident_)   ; t
0275   74                     DB   lsb(ident_)   ; u
0276   74                     DB   lsb(ident_)   ; v
0277   74                     DB   lsb(ident_)   ; w
0278   74                     DB   lsb(ident_)   ; x
0279   74                     DB   lsb(ident_)   ; y
027A   74                     DB   lsb(ident_)   ; z
027B   0C                     DB   lsb(lambda_)   ; {
027C   85                     DB   lsb(or_)   ; |
027D   0F                     DB   lsb(lambdaEnd_)   ; }
027E   97                     DB   lsb(inv_)   ; ~
027F   E2                     DB   lsb(nop_)   ; DEL	
0280                START:       
0280   31 00 1A               LD   sp,DSTACK   ; start of Siena
0283   CD A7 09               CALL   init   ; setups
0286   CD 88 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0289   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0296                INTERPRET:      
0296   CD 78 09               CALL   prompt   
0299   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
029C   ED 43 82 1B            LD   (vTIBPtr),bc   
02A0                INTERPRET2:      ; calc nesting (a macro might have changed it)
02A0   1E 00                  LD   e,0   ; initilize nesting value
02A2   C5                     PUSH   bc   ; save offset into TIB,
02A3                             ; bc is also the count of chars in TIB
02A3   21 00 18               LD   hl,TIB   ; hl is start of TIB
02A6   18 06                  JR   interpret4   
02A8                INTERPRET3:      
02A8   7E                     LD   a,(hl)   ; a = char in TIB
02A9   23                     INC   hl   ; inc pointer into TIB
02AA   0B                     DEC   bc   ; dec count of chars in TIB
02AB   CD 4C 09               CALL   nesting   ; update nesting value
02AE                INTERPRET4:      
02AE   79                     LD   a,c   ; is count zero?
02AF   B0                     OR   b   
02B0   20 F6                  JR   nz,interpret3   ; if not loop
02B2   C1                     POP   bc   ; restore offset into TIB
02B3                WAITCHAR:      
02B3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02B6   FE 20                  CP   $20   ; compare to space
02B8   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02BA   FE 00                  CP   $0   ; is it end of string? null end of string
02BC   28 2A                  JR   z,waitchar4   
02BE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02C0   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02C2                MACRO:       
02C2                             ;  ld (vTIBPtr),bc
02C2                             ;  ld hl,ctrlCodes
02C2                             ;  add a,l			            ; look up key of macros
02C2                             ;  ld l,a
02C2                             ;  ld e,(hl)
02C2                             ;  ld a,e
02C2                             ;  or a
02C2                             ;  jr z,macro1
02C2                             ;  ld d,msb(macros)
02C2                             ;  push de
02C2                             ;  call exec		            ; Siena exec_ operation and jump to it
02C2                             ;  .cstr "ca"
02C2                             ; macro1:
02C2                             ;  ld bc,(vTIBPtr)
02C2   18 DC                  JR   interpret2   
02C4                WAITCHAR1:      
02C4   21 00 18               LD   hl,TIB   
02C7   09                     ADD   hl,bc   
02C8   77                     LD   (hl),a   ; store the character in textbuf
02C9   03                     INC   bc   
02CA   CD 85 00               CALL   putchar   ; echo character to screen
02CD   CD 4C 09               CALL   nesting   
02D0   18 E1                  JR   waitchar   ; wait for next character
02D2                WAITCHAR3:      
02D2   21 00 18               LD   hl,TIB   
02D5   09                     ADD   hl,bc   
02D6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02D8   23                     INC   hl   
02D9   36 0A                  LD   (hl),"\n"   
02DB   23                     INC   hl   
02DC   03                     INC   bc   
02DD   03                     INC   bc   
02DE   CD 81 09               CALL   crlf   ; echo character to screen
02E1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02E2   B7                     OR   a   
02E3   20 CE                  JR   nz,waitchar   
02E5   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02E7   03                     INC   bc   
02E8                WAITCHAR4:      
02E8   ED 43 82 1B            LD   (vTIBPtr),bc   
02EC   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02EF   0B                     DEC   bc   
02F0                NEXT:        
02F0   03                     INC   bc   ; Increment the IP
02F1   0A                     LD   a,(bc)   ; Get the next character and dispatch
02F2   FE 21                  CP   " " + 1   ; whitespace?
02F4   38 07                  JR   c,next1   
02F6   6F                     LD   l,a   ; index into table
02F7   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
02F9   6E                     LD   l,(hl)   ; get low jump address
02FA   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
02FC   E9                     JP   (hl)   ; Jump to routine
02FD                NEXT1:       
02FD   FE 00                  CP   NULL   ; is it end of text?
02FF   28 0F                  JR   z,exit   
0301   FE 03                  CP   ENDTEXT   ; is it end of text?
0303   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0305                ETX:         
0305   21 00 E6               LD   hl,-DSTACK   
0308   39                     ADD   hl,sp   
0309   30 03                  JR   nc,etx1   
030B   31 00 1A               LD   sp,DSTACK   
030E                ETX1:        
030E   18 86                  JR   interpret   
0310                EXIT:        
0310   50 59                  LD   de,bc   ; address of code after exit opcode
0312   13                     INC   de   
0313   D9                     EXX      
0314   C1                     POP   bc   ; bc = last result
0315   FD 54                  LD   d,iyh   ; de = BP
0317   FD 5D                  LD   e,iyl   
0319   EB                     EX   de,hl   ; hl = BP
031A   F9                     LD   sp,hl   ; sp = BP
031B   D9                     EXX      
031C   E1                     POP   hl   ; hl = old BP
031D   C1                     POP   bc   ; pop SCP (discard)
031E   C1                     POP   bc   ; bc = IP
031F   F9                     LD   sp,hl   ; sp = old BP
0320   D9                     EXX      
0321   C5                     PUSH   bc   ; push result
0322   D9                     EXX      
0323   EB                     EX   de,hl   
0324   E9                     JP   (hl)   
0325                             ; **********************************************************************			
0325                             ; symbolic operators
0325                             ; **********************************************************************
0325                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 23 05               JP   num   
0403                HEXNUM_:      
0403   C3 53 05               JP   hexnum   
0406                ARG_:        
0406   C3 47 06               JP   arg   
0409                STRDEF_:      
0409   C3 70 05               JP   strDef   
040C                LAMBDA_:      
040C   C3 B3 05               JP   lambda   
040F                LAMBDAEND_:      
040F   C3 ED 05               JP   lambdaEnd   
0412                DOT_:        
0412   E1                     POP   hl   
0413   03                     INC   bc   
0414   0A                     LD   a,(bc)   
0415   FE 68                  CP   "h"   
0417   20 05                  JR   nz,dot1   
0419   CD 24 09               CALL   prthex   
041C   18 17                  JR   dot4   
041E                DOT1:        
041E   FE 73                  CP   "s"   
0420   20 05                  JR   nz,dot2   
0422   CD 47 09               CALL   prtstr   
0425   18 0E                  JR   dot4   
0427                DOT2:        
0427   FE 63                  CP   "c"   
0429   20 06                  JR   nz,dot3   
042B   7D                     LD   a,l   
042C   CD 85 00               CALL   putchar   
042F   18 04                  JR   dot4   
0431                DOT3:        
0431   0B                     DEC   bc   
0432   CD DC 08               CALL   prtdec   
0435                DOT4:        
0435   3E 20                  LD   a," "   
0437   CD 85 00               CALL   putchar   
043A   DD E9                  JP   (ix)   
043C                             ; addr index -- addr2
043C                INDEX_:      
043C   E1                     POP   hl   ; hl = index
043D   D1                     POP   de   ; de = addr
043E   3A 80 1B               LD   a,(vDataWidth)   
0441   3D                     DEC   a   
0442   28 01                  JR   z,index1   
0444   29                     ADD   hl,hl   ; if data width = 2 then double
0445                INDEX1:      
0445   19                     ADD   hl,de   ; add addr
0446   E5                     PUSH   hl   
0447   DD E9                  JP   (ix)   
0449                             ; addr -- value
0449                FETCH_:      
0449   E1                     POP   hl   
044A   16 00                  LD   d,0   
044C   5E                     LD   e,(hl)   
044D   3A 80 1B               LD   a,(vDataWidth)   
0450   3D                     DEC   a   
0451   28 02                  JR   z,fetch1   
0453   23                     INC   hl   
0454   56                     LD   d,(hl)   
0455                FETCH1:      
0455   D5                     PUSH   de   
0456   DD E9                  JP   (ix)   
0458                             ; value addr --
0458                STORE_:      
0458   E1                     POP   hl   
0459   D1                     POP   de   
045A   73                     LD   (hl),e   
045B   3A 80 1B               LD   a,(vDataWidth)   
045E   3D                     DEC   a   
045F   28 02                  JR   z,store1   
0461   23                     INC   hl   
0462   72                     LD   (hl),d   
0463                STORE1:      
0463   DD E9                  JP   (ix)   
0465                BLOCK_:      
0465   C3 01 06               JP   block   
0468                BLOCKEND_:      
0468   C3 33 06               JP   blockend   
046B                CHAR_:       
046B   C3 89 05               JP   char   
046E                ARRAY_:      
046E   C3 DB 06               JP   array   
0471                ARRAYEND_:      
0471   C3 ED 06               JP   arrayEnd   
0474                IDENT_:      
0474   C3 96 07               JP   ident   
0477                SYMBOL_:      
0477   C3 6F 07               JP   symbol   
047A                AND_:        
047A   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
047B   E1                     POP   hl   
047C   7B                     LD   a,e   
047D   A5                     AND   l   
047E   6F                     LD   l,a   
047F   7A                     LD   a,d   
0480   A4                     AND   h   
0481                AND1:        
0481   67                     LD   h,a   
0482   E5                     PUSH   hl   
0483   DD E9                  JP   (ix)   
0485                OR_:         
0485   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0486   E1                     POP   hl   
0487   7B                     LD   a,e   
0488   B5                     OR   l   
0489   6F                     LD   l,a   
048A   7A                     LD   a,d   
048B   B4                     OR   h   
048C   18 F3                  JR   and1   
048E                XOR_:        
048E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
048F                XOR1:        
048F   E1                     POP   hl   
0490   7B                     LD   a,e   
0491   AD                     XOR   l   
0492   6F                     LD   l,a   
0493   7A                     LD   a,d   
0494   AC                     XOR   h   
0495   18 EA                  JR   and1   
0497                INV_:        ; Bitwise INVert the top member of the stack
0497   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
049A   18 F3                  JR   xor1   
049C                ADD_:        ; add the top 2 members of the stack
049C   D1                     POP   de   
049D   E1                     POP   hl   
049E   19                     ADD   hl,de   
049F   E5                     PUSH   hl   
04A0   DD E9                  JP   (ix)   
04A2                HDOT_:       ; print hexadecimal
04A2   E1                     POP   hl   
04A3   CD 24 09               CALL   prthex   
04A6   C3 31 04               JP   dot3   
04A9                MUL_:        
04A9   C3 07 05               JP   mul   
04AC                SUB_:        ; Subtract the value 2nd on stack from top of stack
04AC   D1                     POP   de   
04AD   E1                     POP   hl   ; Entry point for INVert
04AE                SUB2:        
04AE   B7                     OR   a   ; Entry point for NEGate
04AF   ED 52                  SBC   hl,de   
04B1   E5                     PUSH   hl   
04B2   DD E9                  JP   (ix)   
04B4                EQ_:         
04B4   E1                     POP   hl   
04B5   D1                     POP   de   
04B6   C3 EF 07               JP   equals   
04B9                GT_:         
04B9   D1                     POP   de   
04BA   E1                     POP   hl   
04BB   18 02                  JR   lt1   
04BD                LT_:         
04BD   E1                     POP   hl   
04BE   D1                     POP   de   
04BF                LT1:         
04BF   03                     INC   bc   
04C0   0A                     LD   a,(bc)   
04C1   FE 3D                  CP   "="   
04C3   CA F7 07               JP   z,lessthaneq   
04C6   0B                     DEC   bc   
04C7   C3 FC 07               JP   lessthan   
04CA                DIV_:        
04CA   D1                     POP   de   ; get first value
04CB   E1                     POP   hl   ; get 2nd value
04CC   C5                     PUSH   bc   ; preserve the IP
04CD   44 4D                  LD   bc,hl   
04CF   CD 99 08               CALL   divide   
04D2   22 7E 1B               LD   (vFrac),hl   
04D5   C1                     POP   bc   
04D6   D5                     PUSH   de   ; push result
04D7   DD E9                  JP   (ix)   
04D9                COMMENT_:      
04D9   03                     INC   bc   ; point to next char
04DA   0A                     LD   a,(bc)   
04DB   FE 20                  CP   " "   ; terminate on any char less than SP
04DD   30 FA                  JR   nc,comment_   
04DF   0B                     DEC   bc   
04E0   DD E9                  JP   (ix)   
04E2                NOP_:        
04E2   DD E9                  JP   (ix)   
04E4                             ;*******************************************************************
04E4                             ; word operators
04E4                             ;*******************************************************************
04E4                             ; shl
04E4                             ; value count -- value2          shift left count places
04E4                SHL:         
04E4   50 59                  LD   de,bc   ; save IP
04E6   C1                     POP   bc   ; bc = count
04E7   41                     LD   b,c   ; b = loop counter
04E8   E1                     POP   hl   
04E9   04                     INC   b   ; test for counter=0 case
04EA   18 01                  JR   shl2   
04EC                SHL1:        
04EC   29                     ADD   hl,hl   ; left shift hl
04ED                SHL2:        
04ED   10 FD                  DJNZ   shl1   
04EF   E5                     PUSH   hl   
04F0   42 4B                  LD   bc,de   ; restore IP
04F2   DD E9                  JP   (ix)   
04F4                             ; shr
04F4                             ; value count -- value2          shift left count places
04F4                SHR:         
04F4   50 59                  LD   de,bc   ; save IP
04F6   C1                     POP   bc   ; bc = count
04F7   41                     LD   b,c   ; b = loop counter
04F8   E1                     POP   hl   
04F9   04                     INC   b   ; test for counter=0 case
04FA   18 04                  JR   shr2   
04FC                SHR1:        
04FC   CB 3C                  SRL   h   ; right shift hl
04FE   CB 1D                  RR   l   
0500                SHR2:        
0500   10 FA                  DJNZ   shr1   
0502   E5                     PUSH   hl   
0503   42 4B                  LD   bc,de   ; restore IP
0505   DD E9                  JP   (ix)   
0507                MUL:         ;=19
0507   D1                     POP   de   ; get first value
0508   E1                     POP   hl   
0509   C5                     PUSH   bc   ; Preserve the IP
050A   44                     LD   b,h   ; bc = 2nd value
050B   4D                     LD   c,l   
050C   21 00 00               LD   hl,0   
050F   3E 10                  LD   a,16   
0511                MUL2:        
0511   29                     ADD   hl,hl   
0512   CB 13                  RL   e   
0514   CB 12                  RL   d   
0516   30 04                  JR   nc,$+6   
0518   09                     ADD   hl,bc   
0519   30 01                  JR   nc,$+3   
051B   13                     INC   de   
051C   3D                     DEC   a   
051D   20 F2                  JR   nz,mul2   
051F   C1                     POP   bc   ; Restore the IP
0520   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0521   DD E9                  JP   (ix)   
0523                NUM:         
0523   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0526   0A                     LD   a,(bc)   ; Get numeral or -
0527   FE 2D                  CP   "-"   
0529   20 01                  JR   nz,num0   
052B   03                     INC   bc   ; move to next char, no flags affected
052C                NUM0:        
052C   08                     EX   af,af'   ; save zero flag = 0 for later
052D                NUM1:        
052D   0A                     LD   a,(bc)   ; read digit
052E   D6 30                  SUB   "0"   ; less than 0?
0530   38 13                  JR   c,num2   ; not a digit, exit loop
0532   FE 0A                  CP   10   ; greater that 9?
0534   30 0F                  JR   nc,num2   ; not a digit, exit loop
0536   03                     INC   bc   ; inc IP
0537   54 5D                  LD   de,hl   ; multiply hl * 10
0539   29                     ADD   hl,hl   
053A   29                     ADD   hl,hl   
053B   19                     ADD   hl,de   
053C   29                     ADD   hl,hl   
053D   85                     ADD   a,l   ; add digit in a to hl
053E   6F                     LD   l,a   
053F   3E 00                  LD   a,0   
0541   8C                     ADC   a,h   
0542   67                     LD   h,a   
0543   18 E8                  JR   num1   
0545                NUM2:        
0545   0B                     DEC   bc   
0546   08                     EX   af,af'   ; restore zero flag
0547   20 07                  JR   nz,num3   
0549   EB                     EX   de,hl   ; negate the value of hl
054A   21 00 00               LD   hl,0   
054D   B7                     OR   a   ; jump to sub2
054E   ED 52                  SBC   hl,de   
0550                NUM3:        
0550   E5                     PUSH   hl   ; Put the number on the stack
0551   DD E9                  JP   (ix)   ; and process the next character
0553                HEXNUM:      ; 
0553   21 00 00               LD   hl,0   ; Clear hl to accept the number
0556                HEXNUM1:      
0556   03                     INC   bc   
0557   0A                     LD   a,(bc)   ; Get the character which is a numeral
0558   CB 77                  BIT   6,a   ; is it uppercase alpha?
055A   28 02                  JR   z,hexnum2   ; no a decimal
055C   D6 07                  SUB   7   ; sub 7  to make $a - $F
055E                HEXNUM2:      
055E   D6 30                  SUB   $30   ; Form decimal digit
0560   DA 45 05               JP   c,num2   
0563   FE 10                  CP   $0F+1   
0565   D2 45 05               JP   nc,num2   
0568   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0569   29                     ADD   hl,hl   ; 4X
056A   29                     ADD   hl,hl   ; 8X
056B   29                     ADD   hl,hl   ; 16X
056C   85                     ADD   a,l   ; add into bottom of hl
056D   6F                     LD   l,a   ; 
056E   18 E6                  JR   hexnum1   
0570                             ; 
0570                STRDEF:      
0570   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0574   D5                     PUSH   de   ; save start of string
0575   03                     INC   bc   ; point to next char
0576   18 03                  JR   strDef2   
0578                STRDEF1:      
0578   12                     LD   (de),a   
0579   13                     INC   de   ; increase count
057A   03                     INC   bc   ; point to next char
057B                STRDEF2:      
057B   0A                     LD   a,(bc)   
057C   FE 27                  CP   "'"   ; ' is the string terminator
057E   20 F8                  JR   nz,strDef1   
0580   AF                     XOR   a   ; write null to terminate string
0581   12                     LD   (de),a   
0582   13                     INC   de   
0583   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0587   DD E9                  JP   (ix)   
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if `` is empty
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 60                  CP   "`"   ; ` is the string terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C                             ; dec bc
059C   DD E9                  JP   (ix)   
059E                EXEC:        ; execute lambda at pointer
059E   E1                     POP   hl   ; hl = pointer to lambda
059F                EXEC1:       
059F   7C                     LD   a,h   ; skip if destination address is null
05A0   B5                     OR   l   
05A1   28 0E                  JR   z,exec3   
05A3                EXEC2:       
05A3   C5                     PUSH   bc   ; push IP
05A4   FD E5                  PUSH   iy   ; push SCP (scope pointer)
05A6   FD E5                  PUSH   iy   ; push BP
05A8   FD 21 00 00            LD   iy,0   ; BP = SP
05AC   FD 39                  ADD   iy,sp   
05AE   44 4D                  LD   bc,hl   ; IP = pointer to lambda
05B0   0B                     DEC   bc   ; dec to prepare for next routine
05B1                EXEC3:       
05B1   DD E9                  JP   (ix)   
05B3                LAMBDA:      
05B3   03                     INC   bc   
05B4   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
05B7   E5                     PUSH   hl   
05B8   16 01                  LD   d,1   ; nesting: count first parenthesis
05BA                LAMBDA1:      ; Skip to end of definition
05BA   0A                     LD   a,(bc)   ; Get the next character
05BB   03                     INC   bc   ; Point to next character
05BC   77                     LD   (hl),a   
05BD   23                     INC   hl   
05BE   FE 27                  CP   "'"   
05C0   28 1C                  JR   z,lambda2   
05C2   FE 28                  CP   "("   
05C4   28 18                  JR   z,lambda2   
05C6   FE 29                  CP   ")"   
05C8   28 14                  JR   z,lambda2   
05CA   FE 7B                  CP   "{"   
05CC   28 10                  JR   z,lambda2   
05CE   FE 7D                  CP   "}"   ; Is it the end of the definition?
05D0   28 0C                  JR   z,lambda2   
05D2   FE 5B                  CP   "["   
05D4   28 08                  JR   z,lambda2   
05D6   FE 5D                  CP   "]"   
05D8   28 04                  JR   z,lambda2   
05DA   FE 60                  CP   "`"   
05DC   20 DC                  JR   nz,lambda1   
05DE                LAMBDA2:      
05DE   14                     INC   d   
05DF   CB 42                  BIT   0,d   ; balanced?
05E1   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
05E3   FE 7D                  CP   "}"   ; Is it the end of the definition?
05E5   20 D3                  JR   nz,lambda1   ; get the next element
05E7   0B                     DEC   bc   
05E8   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
05EB   DD E9                  JP   (ix)   
05ED                LAMBDAEND:      
05ED   E1                     POP   hl   ; hl = last result
05EE   FD 54                  LD   d,iyh   ; de = BP
05F0   FD 5D                  LD   e,iyl   
05F2   EB                     EX   de,hl   ; hl = BP, de = result
05F3   F9                     LD   sp,hl   ; sp = BP
05F4   E1                     POP   hl   ; hl = old BP
05F5   C1                     POP   bc   ; pop scope ptr (discard)
05F6   C1                     POP   bc   ; bc = IP
05F7   F9                     LD   sp,hl   ; sp = old BP
05F8   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
05FC   FD 39                  ADD   iy,sp   
05FE   D5                     PUSH   de   ; push result
05FF   DD E9                  JP   (ix)   
0601                BLOCK:       
0601   03                     INC   bc   
0602   C5                     PUSH   bc   ; return first opcode of block
0603   16 01                  LD   d,1   ; nesting: count first parenthesis
0605                BLOCK1:      ; Skip to end of definition
0605   0A                     LD   a,(bc)   ; Get the next character
0606   03                     INC   bc   ; Point to next character
0607   FE 27                  CP   "'"   
0609   28 1C                  JR   z,block2   
060B   FE 28                  CP   "("   
060D   28 18                  JR   z,block2   
060F   FE 29                  CP   ")"   
0611   28 14                  JR   z,block2   
0613   FE 7B                  CP   "{"   
0615   28 10                  JR   z,block2   
0617   FE 7D                  CP   "}"   
0619   28 0C                  JR   z,block2   
061B   FE 5B                  CP   "["   
061D   28 08                  JR   z,block2   
061F   FE 5D                  CP   "]"   
0621   28 04                  JR   z,block2   
0623   FE 60                  CP   "`"   
0625   20 DE                  JR   nz,block1   
0627                BLOCK2:      
0627   14                     INC   d   
0628   CB 42                  BIT   0,d   ; balanced?
062A   20 D9                  JR   nz,block1   ; not balanced, get the next element
062C   FE 29                  CP   ")"   ; Is it the end of the block?
062E   20 D5                  JR   nz,block1   ; get the next element
0630   0B                     DEC   bc   
0631   DD E9                  JP   (ix)   
0633                BLOCKEND:      
0633   E1                     POP   hl   ; hl = last result
0634   FD 54                  LD   d,iyh   ; de = BP
0636   FD 5D                  LD   e,iyl   
0638   EB                     EX   de,hl   ; hl = BP, de = result
0639   F9                     LD   sp,hl   ; sp = BP
063A   E1                     POP   hl   ; hl = old BP
063B   C1                     POP   bc   ; pop SCP (discard)
063C   C1                     POP   bc   ; bc = IP
063D   F9                     LD   sp,hl   ; sp = old BP
063E   FD 21 00 00            LD   iy,0   ; iy = sp
0642   FD 39                  ADD   iy,sp   
0644   D5                     PUSH   de   ; push result
0645   DD E9                  JP   (ix)   
0647                ARG:         
0647   03                     INC   bc   ; get next char
0648   0A                     LD   a,(bc)   
0649   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
064B   E6 07                  AND   $07   ; mask
064D   87                     ADD   a,a   ; double
064E   6F                     LD   l,a   ; hl = offset into args
064F   26 00                  LD   h,0   
0651   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0654   FD 56 03               LD   d,(iy+3)   
0657   EB                     EX   de,hl   ; hl = SCP - offset
0658   B7                     OR   a   
0659   ED 52                  SBC   hl,de   
065B   2B                     DEC   hl   ; de = arg
065C   56                     LD   d,(hl)   
065D   2B                     DEC   hl   
065E   5E                     LD   e,(hl)   
065F   D5                     PUSH   de   ; push arg
0660   DD E9                  JP   (ix)   
0662                             ; 
0662                             ; in:
0662                             ;  pop hl                      ; hl = string
0662                             ;  pop de                      ; de = char
0662                             ; in1:
0662                             ;  ld a,(hl)
0662                             ;  inc hl
0662                             ;  cp 0                        ; is end of string
0662                             ;  jr z,in2
0662                             ;  cp e
0662                             ;  jr nz,in1
0662                             ;  or a                        ; a is never 0, or a resets zero flag
0662                             ; in2:
0662                             ;  ld hl,0                     ; hl = result
0662                             ;  jr z,in3
0662                             ;  dec hl                      ; if nz de = $ffff
0662                             ; in3:
0662                             ;  push hl                     ; push result
0662                             ;  jp (ix)
0662                             ; newAdd2:
0662                             ;  push bc                     ; push IP
0662                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
0662                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
0662                             ;  push de                     ; push SCP
0662                             ;  push iy                     ; push base pointer
0662                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0662                             ;  add iy,sp                   ;
0662                             ;  ld d,(iy-1)
0662                             ;  ld e,(iy-2)
0662                             ;  ld h,(iy-3)
0662                             ;  ld l,(iy-4)
0662                             ;  add hl,de                   ; hl = hl + de
0662                             ;  ex de,hl                    ; de = result
0662                             ;  pop hl                      ; hl = old BP
0662                             ;  pop bc                      ; pop SCP (discard)
0662                             ;  pop bc                      ; bc = IP
0662                             ;  ld sp,hl                    ; sp = old BP
0662                             ;  ld iy,0
0662                             ;  add iy,sp
0662                             ;  push de                     ; push result
0662                             ;  jp (ix)
0662                IF:          
0662   11 00 00               LD   de,0   ; null pointer for else
0665   18 01                  JR   ifte1   
0667                IFTE:        
0667   D1                     POP   de   ; de = else
0668                IFTE1:       
0668   E1                     POP   hl   ; hl = then
0669   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
066A   23                     INC   hl   ; check for true
066B   7C                     LD   a,h   
066C   B5                     OR   l   
066D   E1                     POP   hl   ; hl = then
066E   28 01                  JR   z,ifte2   
0670   EB                     EX   de,hl   ; condition = false, hl = else
0671                IFTE2:       
0671   7C                     LD   a,h   ; check if hl is null
0672   B5                     OR   l   
0673   28 13                  JR   z,ifte3   
0675   C5                     PUSH   bc   ; push IP
0676   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0679   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
067C   D5                     PUSH   de   ; push SCP
067D   FD E5                  PUSH   iy   ; push BP
067F   FD 21 00 00            LD   iy,0   ; iy = sp
0683   FD 39                  ADD   iy,sp   
0685   44 4D                  LD   bc,hl   ; IP = then
0687   0B                     DEC   bc   
0688                IFTE3:       
0688   DD E9                  JP   (ix)   
068A                SWITCH:      
068A   E1                     POP   hl   ; get condition from stack
068B   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
068C   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
068F   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0692   D5                     PUSH   de   ; push SCP
0693   FD E5                  PUSH   iy   ; push BP
0695   FD 21 00 00            LD   iy,0   ; BP = SP
0699   FD 39                  ADD   iy,sp   
069B   E5                     PUSH   hl   ; push condition as first arg of new frame
069C   DD E9                  JP   (ix)   
069E                CASE:        
069E   FD 66 FF               LD   h,(iy-1)   ; hl = selector
06A1   FD 6E FE               LD   l,(iy-2)   
06A4   23                     INC   hl   ; hl -= 1 index from second arg
06A5   29                     ADD   hl,hl   ; hl *= 2 word offset
06A6   FD 54                  LD   d,iyh   ; hl = BP, de = offset
06A8   FD 5D                  LD   e,iyl   
06AA   EB                     EX   de,hl   
06AB   B7                     OR   a   ; hl = BP - offset
06AC   ED 52                  SBC   hl,de   
06AE   54 5D                  LD   de,hl   ; save arg ptr
06B0   2B                     DEC   hl   ; hl += 2
06B1   2B                     DEC   hl   
06B2   B7                     OR   a   ; arg ptr - stack pointer
06B3   ED 72                  SBC   hl,sp   
06B5   30 03                  JR   nc,case0   
06B7   D1                     POP   de   ; pop last arg
06B8   18 05                  JR   case1   
06BA                CASE0:       
06BA   EB                     EX   de,hl   
06BB   2B                     DEC   hl   ; de = arg
06BC   56                     LD   d,(hl)   
06BD   2B                     DEC   hl   
06BE   5E                     LD   e,(hl)   
06BF                CASE1:       
06BF   7A                     LD   a,d   ; is arg == null ? then skip
06C0   B3                     OR   e   
06C1   28 09                  JR   z,case2   
06C3   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
06C6   FD 70 05               LD   (iy+5),b   
06C9   42 4B                  LD   bc,de   ; IP = arg
06CB   0B                     DEC   bc   
06CC                CASE2:       
06CC   DD E9                  JP   (ix)   
06CE                WORDS:       
06CE   21 02 00               LD   hl,2   
06D1   18 03                  JR   bytes1   
06D3                BYTES:       
06D3   21 01 00               LD   hl,1   
06D6                BYTES1:      
06D6   22 80 1B               LD   (vDataWidth),hl   
06D9   DD E9                  JP   (ix)   
06DB                ARRAY:       
06DB   C5                     PUSH   bc   ; create stack frame, push IP
06DC   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
06DF   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
06E2   D5                     PUSH   de   ; push SCP
06E3   FD E5                  PUSH   iy   ; push BP
06E5   FD 21 00 00            LD   iy,0   ; BP = SP
06E9   FD 39                  ADD   iy,sp   
06EB   DD E9                  JP   (ix)   
06ED                ARRAYEND:      
06ED   FD 54                  LD   d,iyh   ; de = BP
06EF   FD 5D                  LD   e,iyl   
06F1   62 6B                  LD   hl,de   ; hl = de
06F3   B7                     OR   a   
06F4   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06F6   C5                     PUSH   bc   ; bc' = IP
06F7   D9                     EXX      
06F8   C1                     POP   bc   
06F9   D9                     EXX      
06FA   44 4D                  LD   bc,hl   ; bc = count
06FC   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
06FF   71                     LD   (hl),c   ; write count before array data
0700   23                     INC   hl   
0701   70                     LD   (hl),b   
0702   23                     INC   hl   
0703   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0704   D9                     EXX      
0705   E1                     POP   hl   ; hl' = ptr to array (index 0)
0706   D9                     EXX      
0707   3A 80 1B               LD   a,(vDataWidth)   
070A   FE 01                  CP   1   ; byte?
070C   20 0D                  JR   nz,arrayEnd2   
070E   EB                     EX   de,hl   
070F                ARRAYEND1:      
070F   1B                     DEC   de   
0710   1B                     DEC   de   
0711   1A                     LD   a,(de)   
0712   77                     LD   (hl),a   
0713   23                     INC   hl   
0714   0B                     DEC   bc   
0715   79                     LD   a,c   
0716   B0                     OR   b   
0717   28 12                  JR   z,arrayEnd3   
0719   18 F4                  JR   arrayEnd1   
071B                ARRAYEND2:      
071B   1B                     DEC   de   
071C   1A                     LD   a,(de)   
071D   08                     EX   af,af'   
071E   1B                     DEC   de   
071F   1A                     LD   a,(de)   
0720   77                     LD   (hl),a   
0721   23                     INC   hl   
0722   08                     EX   af,af'   
0723   1A                     LD   a,(de)   
0724   77                     LD   (hl),a   
0725   23                     INC   hl   
0726   0B                     DEC   bc   
0727   79                     LD   a,c   
0728   B0                     OR   b   
0729   20 F0                  JR   nz,arrayEnd2   
072B                ARRAYEND3:      
072B   FD 54                  LD   d,iyh   ; de = BP
072D   FD 5D                  LD   e,iyl   
072F   EB                     EX   de,hl   ; hl = BP, de = result
0730   F9                     LD   sp,hl   ; sp = BP
0731   E1                     POP   hl   ; hl = old BP
0732   C1                     POP   bc   ; pop SCP (discard)
0733   C1                     POP   bc   ; bc = IP
0734   F9                     LD   sp,hl   ; sp = old BP
0735   FD 21 00 00            LD   iy,0   ; iy = sp
0739   FD 39                  ADD   iy,sp   
073B   D9                     EXX      
073C   E5                     PUSH   hl   
073D   C5                     PUSH   bc   
073E   D9                     EXX      
073F   C1                     POP   bc   
0740   DD E9                  JP   (ix)   
0742                             ; str -- num
0742                HASH:        
0742   E1                     POP   hl   
0743   C5                     PUSH   bc   
0744   44 4D                  LD   bc,hl   
0746   CD 36 08               CALL   hashStr   
0749   C1                     POP   bc   
074A   E5                     PUSH   hl   
074B   DD E9                  JP   (ix)   
074D                             ; str addr -- bool
074D                DEF:         
074D   60 69                  LD   hl,bc   ; hl = IP
074F   D1                     POP   de   ; de = addr
0750   C1                     POP   bc   ; bc = hash
0751   E5                     PUSH   hl   
0752   CD 4F 08               CALL   defineEntry   
0755   21 00 00               LD   hl,0   ; if c return TRUE
0758   30 01                  JR   nc,def1   
075A   2B                     DEC   hl   
075B                DEF1:        
075B   C1                     POP   bc   
075C   E5                     PUSH   hl   
075D   DD E9                  JP   (ix)   
075F                             ; str -- addr
075F                ADDR:        
075F   E1                     POP   hl   ; hl = hash
0760   C5                     PUSH   bc   
0761   44 4D                  LD   bc,hl   
0763   CD 75 08               CALL   lookupEntry   
0766   38 03                  JR   c,addr1   
0768   21 00 00               LD   hl,0   
076B                ADDR1:       
076B   C1                     POP   bc   
076C   E5                     PUSH   hl   
076D   DD E9                  JP   (ix)   
076F                SYMBOL:      
076F   03                     INC   bc   
0770   11 00 1A               LD   de,PAD   
0773   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0775   18 02                  JR   symbol1   
0777                SYMBOL0:      ; copy to PAD area
0777   03                     INC   bc   ; characters that are part of the identifier
0778   13                     INC   de   
0779                SYMBOL1:      ; 0-9 A-Z a-z _
0779   0A                     LD   a,(bc)   
077A   12                     LD   (de),a   
077B   B7                     OR   a   
077C   28 0A                  JR   z,symbol2   
077E   6F                     LD   l,a   
077F   7E                     LD   a,(hl)   
0780   FE 74                  CP   lsb(ident_)   
0782   28 F3                  JR   z,symbol0   
0784   FE 00                  CP   lsb(num_)   
0786   28 EF                  JR   z,symbol0   
0788                SYMBOL2:      
0788   0B                     DEC   bc   
0789   AF                     XOR   a   
078A   12                     LD   (de),a   ; terminate string with null
078B   C5                     PUSH   bc   
078C   01 00 1A               LD   bc,PAD   
078F   CD 36 08               CALL   hashStr   ; hl = hash
0792   C1                     POP   bc   
0793   E5                     PUSH   hl   
0794   DD E9                  JP   (ix)   
0796                IDENT:       
0796   11 00 1A               LD   de,PAD   
0799   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
079B   18 02                  JR   ident1   
079D                IDENT0:      ; copy to PAD area
079D   03                     INC   bc   ; characters that are part of the identifier
079E   13                     INC   de   
079F                IDENT1:      ; 0-9 A-Z a-z _
079F   0A                     LD   a,(bc)   
07A0   12                     LD   (de),a   
07A1   B7                     OR   a   
07A2   28 0A                  JR   z,ident2   
07A4   6F                     LD   l,a   
07A5   7E                     LD   a,(hl)   
07A6   FE 74                  CP   lsb(ident_)   
07A8   28 F3                  JR   z,ident0   
07AA   FE 00                  CP   lsb(num_)   
07AC   28 EF                  JR   z,ident0   
07AE                IDENT2:      
07AE   0B                     DEC   bc   
07AF   AF                     XOR   a   
07B0   12                     LD   (de),a   ; terminate string with null
07B1   C5                     PUSH   bc   
07B2   01 00 1A               LD   bc,PAD   
07B5   CD 36 08               CALL   hashStr   ; hl = hash
07B8   44 4D                  LD   bc,hl   
07BA   CD 75 08               CALL   lookupEntry   
07BD   C1                     POP   bc   
07BE   38 02                  JR   c,ident3   ; todo: no entry? print an error message
07C0   DD E9                  JP   (ix)   
07C2                IDENT3:      
07C2   E9                     JP   (hl)   
07C3                FRAC:        
07C3   2A 7E 1B               LD   hl,(vFrac)   
07C6   E5                     PUSH   hl   
07C7   DD E9                  JP   (ix)   
07C9                SQRT1:       
07C9   E1                     POP   hl   
07CA   C5                     PUSH   bc   
07CB   CD B2 08               CALL   squareRoot   
07CE   ED 43 7E 1B            LD   (vFrac),bc   
07D2   C1                     POP   bc   
07D3   D5                     PUSH   de   
07D4   DD E9                  JP   (ix)   
07D6                ABS1:        
07D6   E1                     POP   hl   
07D7   CB 7C                  BIT   7,h   
07D9   C8                     RET   z   
07DA   AF                     XOR   a   
07DB   95                     SUB   l   
07DC   6F                     LD   l,a   
07DD   9F                     SBC   a,a   
07DE   94                     SUB   h   
07DF   67                     LD   h,a   
07E0   E5                     PUSH   hl   
07E1   DD E9                  JP   (ix)   
07E3                MOD:         
07E3   D1                     POP   de   ; get first value
07E4   E1                     POP   hl   ; get 2nd value
07E5   C5                     PUSH   bc   ; preserve the IP
07E6   44 4D                  LD   bc,hl   
07E8   CD 99 08               CALL   divide   
07EB   C1                     POP   bc   
07EC   E5                     PUSH   hl   ; push remainder
07ED   DD E9                  JP   (ix)   
07EF                             ; hl = value1, de = value2
07EF                             ; hl = result
07EF                EQUALS:      
07EF   B7                     OR   a   ; reset the carry flag
07F0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07F2   28 10                  JR   z,true1   
07F4   C3 0A 08               JP   false1   
07F7                             ; hl = value1 de = value2
07F7                             ; hl = result
07F7                LESSTHANEQ:      
07F7   B7                     OR   a   
07F8   ED 52                  SBC   hl,de   
07FA   18 05                  JR   lessthan1   
07FC                             ; hl = value1 de = value2
07FC                             ; hl = result
07FC                LESSTHAN:      
07FC   B7                     OR   a   
07FD   ED 52                  SBC   hl,de   
07FF   28 09                  JR   z,false1   
0801                LESSTHAN1:      
0801   FA 0A 08               JP   m,false1   
0804                TRUE1:       
0804   21 FF FF               LD   hl,TRUE   
0807   E5                     PUSH   hl   
0808   DD E9                  JP   (ix)   
080A                FALSE1:      
080A   21 00 00               LD   hl,FALSE   
080D   E5                     PUSH   hl   
080E   DD E9                  JP   (ix)   
0810                             ; Z80 port input
0810                             ; port -- value
0810                INPUT:       
0810   E1                     POP   hl   
0811   59                     LD   e,c   ; save IP
0812   4D                     LD   c,l   
0813   ED 68                  IN   l,(c)   
0815   26 00                  LD   h,0   
0817   4B                     LD   c,e   ; restore IP
0818   E5                     PUSH   hl   
0819   DD E9                  JP   (ix)   
081B                             ; Z80 port output
081B                             ; value port --
081B                OUTPUT:      
081B   E1                     POP   hl   
081C   59                     LD   e,c   ; save IP
081D   4D                     LD   c,l   
081E   E1                     POP   hl   
081F   ED 69                  OUT   (c),l   
0821   4B                     LD   c,e   ; restore IP
0822   DD E9                  JP   (ix)   
0824                KEY:         
0824   CD 81 00               CALL   getchar   
0827   26 00                  LD   h,0   
0829   6F                     LD   l,a   
082A   E5                     PUSH   hl   
082B   DD E9                  JP   (ix)   
082D                NEG:         
082D   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0830   D1                     POP   de   
0831   C3 AE 04               JP   sub2   ; use the SUBtract routine
0834                LET:         
0834                WHILE:       
0834                FILTER:      
0834                MAP:         
0834                SCAN:        
0834   DD E9                  JP   (ix)   
0836                             ; -------------------------------------------------------------------------------
0836                             ; hash C-string
0836                             ; BC = str
0836                             ; HL = hash
0836                HASHSTR:      
0836   21 00 00               LD   hl,0   
0839                HASHSTR1:      
0839   0A                     LD   a,(bc)   ; load next char
083A   03                     INC   bc   
083B   FE 00                  CP   0   ; null?
083D   C8                     RET   z   
083E                HASHSTR2:      
083E   16 00                  LD   d,0   
0840   5F                     LD   e,a   
0841   19                     ADD   hl,de   
0842   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0844   29                     ADD   hl,hl   ; shift left
0845   19                     ADD   hl,de   ; add
0846   29                     ADD   hl,hl   ; shift left
0847   29                     ADD   hl,hl   ; shift left
0848   29                     ADD   hl,hl   ; shift left
0849   29                     ADD   hl,hl   ; shift left
084A   29                     ADD   hl,hl   ; shift left
084B   29                     ADD   hl,hl   ; shift left
084C   19                     ADD   hl,de   ; add
084D   18 EA                  JR   hashStr1   
084F                             ; add entry to hash slots and hash pointers
084F                             ; bc = hash (b = hi, c = lo), de = addr
084F                             ; sets carry if successful
084F                DEFINEENTRY:      
084F   CB 21                  SLA   c   ; lo = lo * 2
0851   69                     LD   l,c   ; lo1 = lo
0852   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0854                DEFINEENTRY0:      
0854   7E                     LD   a,(hl)   ; a = (lo1)
0855   FE FF                  CP   UNUSED   ; is it unused?
0857   28 12                  JR   z,defineEntry3   ; yes, add entry
0859   79                     LD   a,c   ; a = lo
085A   BE                     CP   (hl)   ; compare (lo1) with lo
085B   20 06                  JR   nz,defineEntry1   ; no match loop around
085D   2C                     INC   l   
085E   78                     LD   a,b   ; a = hi
085F   BE                     CP   (hl)   ; compare (lo1+1) with hi
0860   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0862   2D                     DEC   l   ; restore l
0863                DEFINEENTRY1:      
0863   2C                     INC   l   ; try next entry
0864   2C                     INC   l   
0865   79                     LD   a,c   ; compare lo and lo1
0866   BD                     CP   l   ; if equal then there's no space left, reject
0867   20 EB                  JR   nz,defineEntry0   
0869                DEFINEENTRY2:      
0869   3F                     CCF      ; clear carry flag, failure
086A   C9                     RET      
086B                DEFINEENTRY3:      ; new entry
086B   71                     LD   (hl),c   ; (lo1) = hash lo
086C   23                     INC   hl   
086D   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
086E   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0870   72                     LD   (hl),d   
0871   2B                     DEC   hl   
0872   73                     LD   (hl),e   ; (slot + 2) = address
0873   37                     SCF      ; set carry flag, success
0874   C9                     RET      
0875                             ; looks up hash and returns address
0875                             ; bc = hash
0875                             ; returns addr in hl, sets carry if successful
0875                LOOKUPENTRY:      
0875   CB 21                  SLA   c   ; lo = lo * 2
0877   69                     LD   l,c   ; lo1 = lo
0878   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
087A                LOOKUPENTRY0:      
087A   7E                     LD   a,(hl)   ; a = (hl), slot
087B   FE FF                  CP   UNUSED   ; is it unused?
087D   28 EA                  JR   z,defineEntry2   ; yes, does not exist
087F   79                     LD   a,c   ; a = lo
0880   BE                     CP   (hl)   ; compare (lo1) with lo
0881   20 06                  JR   nz,lookupEntry1   ; no match loop around
0883   2C                     INC   l   
0884   78                     LD   a,b   ; a = hi
0885   BE                     CP   (hl)   ; compare (lo1+1) with hi
0886   28 09                  JR   z,lookupEntry3   
0888   2D                     DEC   l   
0889                LOOKUPENTRY1:      
0889   2C                     INC   l   
088A   2C                     INC   l   
088B   79                     LD   a,c   
088C   BD                     CP   l   ; no space left, reject
088D   20 EB                  JR   nz,lookupEntry0   
088F                LOOKUPENTRY2:      
088F   3F                     CCF      ; clear carry flag, failure
0890   C9                     RET      
0891                LOOKUPENTRY3:      
0891   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0893   56                     LD   d,(hl)   
0894   2D                     DEC   l   ; restore l
0895   5E                     LD   e,(hl)   ; (slot + 2) = address
0896   EB                     EX   de,hl   
0897   37                     SCF      
0898   C9                     RET      
0899                             ; division subroutine.
0899                             ; bc: divisor, de: dividend, hl: remainder
0899                DIVIDE:      
0899   21 00 00               LD   hl,0   ; zero the remainder
089C   3E 10                  LD   a,16   ; loop counter
089E                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
089E   CB 21                  SLA   c   
08A0   CB 10                  RL   b   
08A2   ED 6A                  ADC   hl,hl   
08A4   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08A6   38 03                  JR   c,divide2   
08A8   0C                     INC   c   
08A9   18 01                  JR   divide3   
08AB                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08AB   19                     ADD   hl,de   
08AC                DIVIDE3:      
08AC   3D                     DEC   a   
08AD   20 EF                  JR   nz,divide1   
08AF   50 59                  LD   de,bc   ; result from bc to de
08B1   C9                     RET      
08B2                             ; squareroot
08B2                             ; Input: HL = value
08B2                             ; Result: DE = square root BC = remainder
08B2                SQUAREROOT:      
08B2   01 00 08               LD   bc,0800h   
08B5   59                     LD   e,c   
08B6   AF                     XOR   a   
08B7                SQUAREROOT1:      
08B7   29                     ADD   hl,hl   
08B8   CB 11                  RL   c   
08BA   ED 6A                  ADC   hl,hl   
08BC   CB 11                  RL   c   
08BE   30 02                  JR   nc,$+4   
08C0   CB C5                  SET   0,l   
08C2   7B                     LD   a,e   
08C3   87                     ADD   a,a   
08C4   5F                     LD   e,a   
08C5   87                     ADD   a,a   
08C6   CB 45                  BIT   0,l   
08C8   20 03                  JR   nz,$+5   
08CA   91                     SUB   c   
08CB   30 05                  JR   nc,squareRoot4   
08CD   79                     LD   a,c   
08CE   93                     SUB   e   
08CF   1C                     INC   e   
08D0   93                     SUB   e   
08D1   4F                     LD   c,a   
08D2                SQUAREROOT4:      
08D2   10 E3                  DJNZ   squareRoot1   
08D4   CB 45                  BIT   0,l   
08D6   28 01                  JR   z,squareRoot5   
08D8   04                     INC   b   
08D9                SQUAREROOT5:      
08D9   16 00                  LD   d,0   
08DB   C9                     RET      
08DC                PRTDEC:      
08DC   CB 7C                  BIT   7,h   
08DE   28 0B                  JR   z,prtdec0   
08E0   3E 2D                  LD   a,"-"   
08E2   CD 85 00               CALL   putchar   
08E5   AF                     XOR   a   
08E6   95                     SUB   l   
08E7   6F                     LD   l,a   
08E8   9F                     SBC   a,a   
08E9   94                     SUB   h   
08EA   67                     LD   h,a   
08EB                PRTDEC0:      
08EB   C5                     PUSH   bc   
08EC   0E 00                  LD   c,0   ; leading zeros flag = false
08EE   11 F0 D8               LD   de,-10000   
08F1   CD 0D 09               CALL   prtdec1   
08F4   11 18 FC               LD   de,-1000   
08F7   CD 0D 09               CALL   prtdec1   
08FA   11 9C FF               LD   de,-100   
08FD   CD 0D 09               CALL   prtdec1   
0900   1E F6                  LD   e,-10   
0902   CD 0D 09               CALL   prtdec1   
0905   0C                     INC   c   ; flag = true for at least digit
0906   1E FF                  LD   e,-1   
0908   CD 0D 09               CALL   prtdec1   
090B   C1                     POP   bc   
090C   C9                     RET      
090D                PRTDEC1:      
090D   06 2F                  LD   b,"0"-1   
090F                PRTDEC2:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,prtdec2   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,prtdec3   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   prtdec4   
091F                PRTDEC3:      
091F   0C                     INC   c   
0920                PRTDEC4:      
0920   78                     LD   a,b   
0921   C3 85 00               JP   putchar   
0924                PRTHEX:      ; display hl as a 16-bit number in hex.
0924   C5                     PUSH   bc   ; preserve the IP
0925   7C                     LD   a,h   
0926   CD 2F 09               CALL   prthex2   
0929   7D                     LD   a,l   
092A   CD 2F 09               CALL   prthex2   
092D   C1                     POP   bc   
092E   C9                     RET      
092F                PRTHEX2:      
092F   4F                     LD   c,a   
0930   1F                     RRA      
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   CD 38 09               CALL   prthex3   
0937   79                     LD   a,c   
0938                PRTHEX3:      
0938   E6 0F                  AND   0x0F   
093A   C6 90                  ADD   a,0x90   
093C   27                     DAA      
093D   CE 40                  ADC   a,0x40   
093F   27                     DAA      
0940   C3 85 00               JP   putchar   
0943                PRTSTR0:      
0943   CD 85 00               CALL   putchar   
0946   23                     INC   hl   
0947                PRTSTR:      
0947   7E                     LD   a,(hl)   
0948   B7                     OR   a   
0949   20 F8                  JR   nz,prtstr0   
094B   C9                     RET      
094C                             ; **************************************************************************
094C                             ; calculate nesting value
094C                             ; a is char to be tested,
094C                             ; e is the nesting value (initially 0)
094C                             ; e is increased by ( and [
094C                             ; e is decreased by ) and ]
094C                             ; e has its bit 7 toggled by `
094C                             ; limited to 127 levels
094C                             ; **************************************************************************
094C                NESTING:      
094C   FE 22                  CP   $22   ; quote char
094E   20 0A                  JR   nz,nesting1   
0950   CB 7B                  BIT   7,e   
0952   28 03                  JR   z,nesting1a   
0954   CB BB                  RES   7,e   
0956   C9                     RET      
0957                NESTING1A:      
0957   CB FB                  SET   7,e   
0959   C9                     RET      
095A                NESTING1:      
095A   CB 7B                  BIT   7,e   
095C   C0                     RET   nz   
095D   FE 7B                  CP   "{"   
095F   28 08                  JR   z,nesting2   
0961   FE 5B                  CP   "["   
0963   28 04                  JR   z,nesting2   
0965   FE 28                  CP   "("   
0967   20 02                  JR   nz,nesting3   
0969                NESTING2:      
0969   1C                     INC   e   
096A   C9                     RET      
096B                NESTING3:      
096B   FE 7D                  CP   "}"   
096D   28 07                  JR   z,nesting4   
096F   FE 5D                  CP   "]"   
0971   28 03                  JR   z,nesting4   
0973   FE 29                  CP   ")"   
0975   C0                     RET   nz   
0976                NESTING4:      
0976   1D                     DEC   e   
0977   C9                     RET      
0978                PROMPT:      
0978   CD 88 09               CALL   printStr   
097B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0980   C9                     RET      
0981                CRLF:        
0981   CD 88 09               CALL   printStr   
0984   0D 0A 00               .CSTR   "\r\n"   
0987   C9                     RET      
0988                PRINTSTR:      
0988   E3                     EX   (sp),hl   ; swap			
0989   CD 47 09               CALL   prtstr   
098C   23                     INC   hl   ; inc past null
098D   E3                     EX   (sp),hl   ; put it back	
098E   C9                     RET      
098F                DEFINE:      
098F   E1                     POP   hl   
0990   7E                     LD   a,(hl)   
0991   23                     INC   hl   
0992   44 4D                  LD   bc,hl   
0994   5F                     LD   e,a   
0995   16 00                  LD   d,0   
0997   19                     ADD   hl,de   
0998   5E                     LD   e,(hl)   
0999   23                     INC   hl   
099A   56                     LD   d,(hl)   
099B   23                     INC   hl   
099C   E5                     PUSH   hl   ; bc = str
099D   D5                     PUSH   de   
099E   CD 36 08               CALL   hashStr   ; hl = hash
09A1   D1                     POP   de   
09A2   44 4D                  LD   bc,hl   
09A4   C3 4F 08               JP   defineEntry   
09A7                INIT:        
09A7   DD 21 F0 02            LD   ix,next   
09AB   FD 21 00 1A            LD   iy,DSTACK   
09AF   21 80 01               LD   hl,isysVars   
09B2   11 7E 1B               LD   de,sysVars   
09B5   01 10 00               LD   bc,8 * 2   
09B8   ED B0                  LDIR      
09BA   3E FF                  LD   a,UNUSED   
09BC   06 00                  LD   b,0   
09BE   21 00 1D               LD   hl,hashSlots   
09C1                INIT1:       
09C1   77                     LD   (hl),a   
09C2   23                     INC   hl   
09C3   10 FC                  DJNZ   init1   
09C5   CD 8F 09               CALL   define   
09C8   04 61 62 73 00         .PSTR   "abs",0   
09CD   D6 07                  DW   abs1   
09CF   CD 8F 09               CALL   define   
09D2   05 61 64 64 72 00      .PSTR   "addr",0   
09D8   5F 07                  DW   addr   
09DA   CD 8F 09               CALL   define   
09DD   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09E4   D3 06                  DW   bytes   
09E6   CD 8F 09               CALL   define   
09E9   05 63 61 73 65 00      .PSTR   "case",0   
09EF   9E 06                  DW   case   
09F1   CD 8F 09               CALL   define   
09F4   04 64 65 66 00         .PSTR   "def",0   
09F9   4D 07                  DW   def   
09FB   CD 8F 09               CALL   define   
09FE   05 65 78 65 63 00      .PSTR   "exec",0   
0A04   9E 05                  DW   exec   
0A06   CD 8F 09               CALL   define   
0A09   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A10   00 00                  DW   false   
0A12   CD 8F 09               CALL   define   
0A15   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A1D   34 08                  DW   filter   
0A1F   CD 8F 09               CALL   define   
0A22   05 66 72 61 63 00      .PSTR   "frac",0   
0A28   C3 07                  DW   frac   
0A2A   CD 8F 09               CALL   define   
0A2D   05 68 61 73 68 00      .PSTR   "hash",0   
0A33   42 07                  DW   hash   
0A35   CD 8F 09               CALL   define   
0A38   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A3F   10 08                  DW   input   
0A41   CD 8F 09               CALL   define   
0A44   03 69 66 00            .PSTR   "if",0   
0A48   62 06                  DW   if   
0A4A   CD 8F 09               CALL   define   
0A4D   05 69 66 74 65 00      .PSTR   "ifte",0   
0A53   67 06                  DW   ifte   
0A55   CD 8F 09               CALL   define   
0A58   04 6B 65 79 00         .PSTR   "key",0   
0A5D   24 08                  DW   key   
0A5F   CD 8F 09               CALL   define   
0A62   04 6C 65 74 00         .PSTR   "let",0   
0A67   34 08                  DW   let   
0A69   CD 8F 09               CALL   define   
0A6C   04 6D 61 70 00         .PSTR   "map",0   
0A71   34 08                  DW   map   
0A73   CD 8F 09               CALL   define   
0A76   04 6D 6F 64 00         .PSTR   "mod",0   
0A7B   E3 07                  DW   mod   
0A7D   CD 8F 09               CALL   define   
0A80   04 6E 65 67 00         .PSTR   "neg",0   
0A85   2D 08                  DW   neg   
0A87   CD 8F 09               CALL   define   
0A8A   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A92   1B 08                  DW   output   
0A94   CD 8F 09               CALL   define   
0A97   05 73 63 61 6E 00      .PSTR   "scan",0   
0A9D   01 00                  DW   scan   
0A9F   CD 8F 09               CALL   define   
0AA2   04 73 68 6C 00         .PSTR   "shl",0   
0AA7   E4 04                  DW   shl   
0AA9   CD 8F 09               CALL   define   
0AAC   04 73 68 72 00         .PSTR   "shr",0   
0AB1   F4 04                  DW   shr   
0AB3   CD 8F 09               CALL   define   
0AB6   05 73 71 72 74 00      .PSTR   "sqrt",0   
0ABC   C9 07                  DW   sqrt1   
0ABE   CD 8F 09               CALL   define   
0AC1   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0AC9   8A 06                  DW   switch   
0ACB   CD 8F 09               CALL   define   
0ACE   05 74 72 75 65 00      .PSTR   "true",0   
0AD4   FF FF                  DW   true   
0AD6   CD 8F 09               CALL   define   
0AD9   06 77 68 69 6C 65 00   .PSTR   "while",0   
0AE0   34 08                  DW   while   
0AE2   CD 8F 09               CALL   define   
0AE5   06 77 6F 72 64 73 00   .PSTR   "words",0   
0AEC   CE 06                  DW   words   
0AEE   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   21 00 00               LD   hl,0   
4003   11 01 00               LD   de,1   
4006   19                     ADD   hl,de   
4007   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
4009   29                     ADD   hl,hl   ; shift left
400A   19                     ADD   hl,de   ; add
400B   29                     ADD   hl,hl   ; shift left
400C   29                     ADD   hl,hl   ; shift left
400D   29                     ADD   hl,hl   ; shift left
400E   29                     ADD   hl,hl   ; shift left
400F   29                     ADD   hl,hl   ; shift left
4010   29                     ADD   hl,hl   ; shift left
4011   19                     ADD   hl,de   ; add
4012                             ; test "65 .c", 0
4012                             ; test "'hello' hash", $7f54
4012                             ; test ":hello", $7f54
4012                             ; test ":hello 2 def", TRUE
4012                             ; test ":hello 2 def :hello addr", 2
4012                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
4012                             ; test "1 2 <", TRUE
4012                             ; test "2 2 <=", TRUE
4012                             ; test "2 1 <", FALSE
4012                             ; test "1 2 >", FALSE
4012                             ; test "2 2 >=", TRUE
4012                             ; test "2 1 >", TRUE
4012                             ; test "10 sqrt", 3
4012                             ; test "10 sqrt frac", 1
4012                             ; test "7 3 /", 2
4012                             ; test "7 3 / frac", 1
4012                             ; test "1 2 +", 3
4012                             ; test ":h {1} def :h addr exec", 1
4012                             ; test "bytes [`A` `B` `C`]", 0
4012                             ; test "bytes [`A` `B` `C`] 1 get", "B"
4012                             ; test "bytes [`A` `B` `C`] 1 `Z` set 1 get", "Z"
4012                             ; test "words [10 20 30] 1 get", 10
4012                             ; test "words [10 20 30] 1 50 set 1 get", 50
4012                             ; test "1 2 +", 3
4012                             ; test "4 1 2 +", 3
4012                             ; test "1", 1
4012                             ; test "2", 2
4012                             ; test "``", 0
4012                             ; test "`a`", $61
4012                             ; test "`\\``", $60
4012                             ; test "`b` 'cba' in", -1
4012                             ; test "`x` 'cba' in", 0
4012                             ; test "5 0 (1) if", 5
4012                             ; test "0 (1) (2) ife", 2
4012                             ; test "5 -1 (1) if", 1
4012                             ; test "-1 (1) (2) ife", 1
4012                             ; test "9 sw (1) (5) ca", 5
4012                             ; test "0 sw (1) ca", 1
4012                             ; test "1 sw (1) (2) (3) ca", 2
4012                             ; test "5 -1 (2) if", 2
4012                             ; test "5 0 (2) if", 5
4012                             ; test "5 0 (0 (2) if) if", 5
4012                             ; test "5 0 (-1 (2) if) if", 5
4012                             ; test "5 -1 (2) if", 2
4012                             ; test "5 -1 (-1 (2) if) if", 2
4012                             ; test "(1) ex", 1
4012                             ; test "2 ($1) ex", 2
4012                             ; test "2 4 ($2) ex", 4
4012                             ; test "((1) ex) ex", 1
4012                             ; test "5 (-1 ($1) if) ex", 5
4012                             ; test "'A' @", 65
4012                             ; test "1", 1
4012                             ; test "0", 0
4012                             ; test "10", 10
4012                             ; test "123", 123
4012                             ; test "$10", $10
4012                             ; test "$FF", $FF
4012                             ; test "2 3 =", 0
4012                             ; test "3 3 =", 1
4012                             ; test "2 3 <", 1
4012                             ; test "3 3 <", 0
4012                             ; test "3 3 >", 0
4012                             ; test "4 3 >", 1
4012                             ; test "1 2 +", 3
4012                             ; test "123 456 +", 123+456
4012                             ; test "64 128 +", 64+128
4012                             ; test "5 3 -", 2
4012                             ; test "3 5 &", 1
4012                             ; test "3 5 |", 7
4012                             ; test "2 3 *", 6
4012                             ; test "1 2 3 + *", 5
4012                             ; ; test "1 2 3 ' +", 3
4012                             ; ; test "1_ 2 +",1
4012                             ; ; test "1_ 1 +",0
4012                             ; ; call enter
4012                             ; ;     .cstr "1 3",$22,"+"
4012                             ; ; expect "1 3 DUP +", 6
4012                             ; ; test "5 2/'", 2
4012                             ; ; test "3 5$ -", 2
4012                             ; ; test "5 2/$ '", 1
4012                             ; ; test "2 3%++", 7
4012                             ; ; test "1 2 3~''", 2
4012                             ; ; test "1 2 3~+*", 8
4012                             ; ; test "2a!a@",2
4012                             ; ; test "3x! 1 x@+x! x@", 4
4012                             ; ; test "3x! 1_ x@+x! x@", 2
4012                             ; ; test "1{", 2
4012                             ; ; test "1}", 0
4012                             ; ; test "2}", 1
4012                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4012                             ; ; test "(2) \\^", 2
4012                             ; ; test ":X1; X", 1
4012                             ; ; test ":A100;A", 100
4012                             ; ; test ":Aa!; 3A a@", 3
4012                             ; ; test ":Aa!;:Ba@;4AB", 4
4012                             ; ; test "[]$ '", 0
4012                             ; ; test "[3]$ '", 1
4012                             ; ; test "[3]'@", 3
4012                             ; ; test "[1 2 3]'@", 1
4012                             ; ; test "[1 2 3]'2+@", 2
4012                             ; ; test "\\h@[1]''\\h@$-", 2
4012                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4012                             ; ; test "\\[]$ '", 0
4012                             ; ; test "\\[3]'\\@", 3
4012                             ; ; test "\\[3]$ '", 1
4012                             ; ; test "\\[1 2 3]'\\@", 1
4012                             ; ; test "\\[1 2 3]'1+\\@", 2
4012                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4012                             ; ; test "\\h@\\[1]''\\h@$-", 1
4012                             ; ; test "\\`A`\\@",65
4012                             ; ; test "0 0(1+)", 0
4012                             ; ; test "0 1(1+)", 1
4012                             ; ; test "0 2(1+)", 2
4012                             ; ; test "0 1(0(1+))", 0
4012                             ; ; test "0 1(1(1+))", 1
4012                             ; ; test "0 2(1(1+))", 2
4012                             ; ; test "0 2(2(1+))", 4
4012                             ; ; test "0 1(\\i@+)", 0
4012                             ; ; test "0 2(\\i@+)", 1
4012                             ; ; test "0 3(\\i@+)", 3
4012                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4012                             ; ; test "0t! 10(1 t@+t!) t@",10
4012                             ; ; test "0(100)(200)",200
4012                             ; ; test "1(100)(200)",100
4012                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4012                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4012                             ; ; test ":X10;\\0X", 10
4012                             ; ; test "2 \\1x! \\1x@", 2
4012   CD 88 09               CALL   printStr   
4015   44 6F 6E 65 21 00      .CSTR   "Done!"   
401B   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0834 DEFINED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 220 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 286 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
START:              0280 DEFINED AT LINE 188 IN Siena.asm
INTERPRET:          0296 DEFINED AT LINE 194 IN Siena.asm
                    > USED AT LINE 296 IN Siena.asm
INTERPRET2:         02A0 DEFINED AT LINE 200 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
INTERPRET3:         02A8 DEFINED AT LINE 207 IN Siena.asm
                    > USED AT LINE 216 IN Siena.asm
INTERPRET4:         02AE DEFINED AT LINE 213 IN Siena.asm
                    > USED AT LINE 205 IN Siena.asm
WAITCHAR:           02B3 DEFINED AT LINE 219 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
MACRO:              02C2 DEFINED AT LINE 228 IN Siena.asm
WAITCHAR1:          02C4 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
WAITCHAR3:          02D2 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
WAITCHAR4:          02E8 DEFINED AT LINE 270 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
NEXT:               02F0 DEFINED AT LINE 275 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
NEXT1:              02FD DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
ETX:                0305 DEFINED AT LINE 290 IN Siena.asm
ETX1:               030E DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
EXIT:               0310 DEFINED AT LINE 298 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 323 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 325 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 327 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 329 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 331 IN Siena.asm
LAMBDA_:            040C DEFINED AT LINE 333 IN Siena.asm
LAMBDAEND_:         040F DEFINED AT LINE 335 IN Siena.asm
DOT_:               0412 DEFINED AT LINE 338 IN Siena.asm
DOT1:               041E DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 343 IN Siena.asm
DOT2:               0427 DEFINED AT LINE 351 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
DOT3:               0431 DEFINED AT LINE 357 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
DOT4:               0435 DEFINED AT LINE 360 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
                    > USED AT LINE 356 IN Siena.asm
INDEX_:             043C DEFINED AT LINE 366 IN Siena.asm
INDEX1:             0445 DEFINED AT LINE 373 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
FETCH_:             0449 DEFINED AT LINE 379 IN Siena.asm
FETCH1:             0455 DEFINED AT LINE 388 IN Siena.asm
                    > USED AT LINE 385 IN Siena.asm
STORE_:             0458 DEFINED AT LINE 393 IN Siena.asm
STORE1:             0463 DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
BLOCK_:             0465 DEFINED AT LINE 405 IN Siena.asm
BLOCKEND_:          0468 DEFINED AT LINE 407 IN Siena.asm
CHAR_:              046B DEFINED AT LINE 409 IN Siena.asm
ARRAY_:             046E DEFINED AT LINE 411 IN Siena.asm
ARRAYEND_:          0471 DEFINED AT LINE 413 IN Siena.asm
IDENT_:             0474 DEFINED AT LINE 415 IN Siena.asm
SYMBOL_:            0477 DEFINED AT LINE 417 IN Siena.asm
AND_:               047A DEFINED AT LINE 419 IN Siena.asm
AND1:               0481 DEFINED AT LINE 427 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
OR_:                0485 DEFINED AT LINE 432 IN Siena.asm
XOR_:               048E DEFINED AT LINE 442 IN Siena.asm
XOR1:               048F DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
INV_:               0497 DEFINED AT LINE 453 IN Siena.asm
ADD_:               049C DEFINED AT LINE 457 IN Siena.asm
HDOT_:              04A2 DEFINED AT LINE 464 IN Siena.asm
MUL_:               04A9 DEFINED AT LINE 469 IN Siena.asm
SUB_:               04AC DEFINED AT LINE 472 IN Siena.asm
SUB2:               04AE DEFINED AT LINE 475 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
EQ_:                04B4 DEFINED AT LINE 481 IN Siena.asm
GT_:                04B9 DEFINED AT LINE 485 IN Siena.asm
LT_:                04BD DEFINED AT LINE 489 IN Siena.asm
LT1:                04BF DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 488 IN Siena.asm
DIV_:               04CA DEFINED AT LINE 500 IN Siena.asm
COMMENT_:           04D9 DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
NOP_:               04E2 DEFINED AT LINE 519 IN Siena.asm
SHL:                04E4 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
SHL1:               04EC DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
SHL2:               04ED DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
SHR:                04F4 DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
SHR1:               04FC DEFINED AT LINE 553 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
SHR2:               0500 DEFINED AT LINE 556 IN Siena.asm
                    > USED AT LINE 552 IN Siena.asm
MUL:                0507 DEFINED AT LINE 562 IN Siena.asm
                    > USED AT LINE 470 IN Siena.asm
MUL2:               0511 DEFINED AT LINE 571 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
NUM:                0523 DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
NUM0:               052C DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
NUM1:               052D DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
NUM2:               0545 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 598 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
NUM3:               0550 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
HEXNUM:             0553 DEFINED AT LINE 623 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
HEXNUM1:            0556 DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
HEXNUM2:            055E DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
STRDEF:             0570 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
STRDEF1:            0578 DEFINED AT LINE 649 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
STRDEF2:            057B DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
CHAR:               0589 DEFINED AT LINE 663 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
CHAR1:              058C DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
CHAR2:              0598 DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 671 IN Siena.asm
CHAR3:              059B DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
EXEC:               059E DEFINED AT LINE 682 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
EXEC1:              059F DEFINED AT LINE 684 IN Siena.asm
EXEC2:              05A3 DEFINED AT LINE 688 IN Siena.asm
EXEC3:              05B1 DEFINED AT LINE 697 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
LAMBDA:             05B3 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
LAMBDA1:            05BA DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
LAMBDA2:            05DE DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
LAMBDAEND:          05ED DEFINED AT LINE 736 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
BLOCK:              0601 DEFINED AT LINE 751 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
BLOCK1:             0605 DEFINED AT LINE 755 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 779 IN Siena.asm
BLOCK2:             0627 DEFINED AT LINE 774 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
BLOCKEND:           0633 DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
ARG:                0647 DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
IF:                 0662 DEFINED AT LINE 865 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
IFTE:               0667 DEFINED AT LINE 868 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
IFTE1:              0668 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 867 IN Siena.asm
IFTE2:              0671 DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
IFTE3:              0688 DEFINED AT LINE 892 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
SWITCH:             068A DEFINED AT LINE 895 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
CASE:               069E DEFINED AT LINE 907 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
CASE0:              06BA DEFINED AT LINE 925 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
CASE1:              06BF DEFINED AT LINE 931 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
CASE2:              06CC DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
WORDS:              06CE DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
BYTES:              06D3 DEFINED AT LINE 945 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
BYTES1:             06D6 DEFINED AT LINE 947 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
ARRAY:              06DB DEFINED AT LINE 951 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
ARRAYEND:           06ED DEFINED AT LINE 961 IN Siena.asm
                    > USED AT LINE 414 IN Siena.asm
ARRAYEND1:          070F DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
ARRAYEND2:          071B DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
ARRAYEND3:          072B DEFINED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
HASH:               0742 DEFINED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
DEF:                074D DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
DEF1:               075B DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
ADDR:               075F DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
ADDR1:              076B DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
SYMBOL:             076F DEFINED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
SYMBOL0:            0777 DEFINED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
SYMBOL1:            0779 DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
SYMBOL2:            0788 DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
IDENT:              0796 DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 416 IN Siena.asm
IDENT0:             079D DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
IDENT1:             079F DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
IDENT2:             07AE DEFINED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
IDENT3:             07C2 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
FRAC:               07C3 DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
SQRT1:              07C9 DEFINED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
ABS1:               07D6 DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
MOD:                07E3 DEFINED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
EQUALS:             07EF DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 484 IN Siena.asm
LESSTHANEQ:         07F7 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 496 IN Siena.asm
LESSTHAN:           07FC DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
LESSTHAN1:          0801 DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
TRUE1:              0804 DEFINED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
FALSE1:             080A DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
INPUT:              0810 DEFINED AT LINE 1208 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
OUTPUT:             081B DEFINED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
KEY:                0824 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
NEG:                082D DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
LET:                0834 DEFINED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
WHILE:              0834 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
FILTER:             0834 DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
MAP:                0834 DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
HASHSTR:            0836 DEFINED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
HASHSTR1:           0839 DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
HASHSTR2:           083E DEFINED AT LINE 1262 IN Siena.asm
DEFINEENTRY:        084F DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
DEFINEENTRY0:       0854 DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
DEFINEENTRY1:       0863 DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
DEFINEENTRY2:       0869 DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
DEFINEENTRY3:       086B DEFINED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
LOOKUPENTRY:        0875 DEFINED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
LOOKUPENTRY0:       087A DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
LOOKUPENTRY1:       0889 DEFINED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
LOOKUPENTRY2:       088F DEFINED AT LINE 1342 IN Siena.asm
LOOKUPENTRY3:       0891 DEFINED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
DIVIDE:             0899 DEFINED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
DIVIDE1:            089E DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
DIVIDE2:            08AB DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
DIVIDE3:            08AC DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
SQUAREROOT:         08B2 DEFINED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
SQUAREROOT1:        08B7 DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
SQUAREROOT4:        08D2 DEFINED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
SQUAREROOT5:        08D9 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
PRTDEC:             08DC DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
PRTDEC0:            08EB DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
PRTDEC1:            090D DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
PRTDEC2:            090F DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
PRTDEC3:            091F DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
PRTDEC4:            0920 DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
PRTHEX:             0924 DEFINED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
                    > USED AT LINE 466 IN Siena.asm
PRTHEX2:            092F DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
PRTHEX3:            0938 DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
PRTSTR0:            0943 DEFINED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
PRTSTR:             0947 DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
NESTING:            094C DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 211 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
NESTING1A:          0957 DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
NESTING1:           095A DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
NESTING2:           0969 DEFINED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
NESTING3:           096B DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
NESTING4:           0976 DEFINED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
PROMPT:             0978 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
CRLF:               0981 DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
PRINTSTR:           0988 DEFINED AT LINE 1546 IN Siena.asm
                    > USED AT LINE 191 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 178
DEFINE:             098F DEFINED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
INIT:               09A7 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 190 IN Siena.asm
INIT1:              09C1 DEFINED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 204 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 189 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 294 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1576 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 369 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 198 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 1582 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
