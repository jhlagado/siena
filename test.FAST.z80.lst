0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 1A 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; oldIP                             -- saved interpreter ptr
00CC                             ; static                            -- static array
00CC                             ; SCP                               -- scope base ptr           --> arg0
00CC                             ; oldBP                             -- saved base ptr           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   D0                     DB   lsb(nop_)   ; SP
0221   9D                     DB   lsb(not_)   ; !
0222   D0                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D0                     DB   lsb(nop_)   ; %
0226   57                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   86                     DB   lsb(mul_)   ; *
022B   79                     DB   lsb(add_)   ; +
022C   D0                     DB   lsb(nop_)   ; ,
022D   89                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   B8                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   54                     DB   lsb(symbol_)   ; :
023B   D0                     DB   lsb(nop_)   ; ;
023C   AB                     DB   lsb(lt_)   ; <
023D   A2                     DB   lsb(eq_)   ; =
023E   A7                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   51                     DB   lsb(ident_)   ; A
0242   51                     DB   lsb(ident_)   ; B
0243   51                     DB   lsb(ident_)   ; C
0244   51                     DB   lsb(ident_)   ; D
0245   51                     DB   lsb(ident_)   ; E
0246   51                     DB   lsb(ident_)   ; F
0247   51                     DB   lsb(ident_)   ; G
0248   51                     DB   lsb(ident_)   ; h
0249   51                     DB   lsb(ident_)   ; I
024A   51                     DB   lsb(ident_)   ; J
024B   51                     DB   lsb(ident_)   ; K
024C   51                     DB   lsb(ident_)   ; L
024D   51                     DB   lsb(ident_)   ; M
024E   51                     DB   lsb(ident_)   ; N
024F   51                     DB   lsb(ident_)   ; O
0250   51                     DB   lsb(ident_)   ; p
0251   51                     DB   lsb(ident_)   ; Q
0252   51                     DB   lsb(ident_)   ; R
0253   51                     DB   lsb(ident_)   ; S
0254   51                     DB   lsb(ident_)   ; T
0255   51                     DB   lsb(ident_)   ; U
0256   51                     DB   lsb(ident_)   ; V
0257   51                     DB   lsb(ident_)   ; W
0258   51                     DB   lsb(ident_)   ; X
0259   51                     DB   lsb(ident_)   ; Y
025A   51                     DB   lsb(ident_)   ; Z
025B   4B                     DB   lsb(array_)   ; [
025C   C7                     DB   lsb(comment_)   ; \
025D   4E                     DB   lsb(arrayEnd_)   ; ]
025E   6B                     DB   lsb(xor_)   ; ^
025F   51                     DB   lsb(ident_)   ; _
0260   48                     DB   lsb(char_)   ; `    	
0261   51                     DB   lsb(ident_)   ; a
0262   51                     DB   lsb(ident_)   ; b
0263   51                     DB   lsb(ident_)   ; c
0264   51                     DB   lsb(ident_)   ; d
0265   51                     DB   lsb(ident_)   ; e
0266   51                     DB   lsb(ident_)   ; f
0267   51                     DB   lsb(ident_)   ; g
0268   51                     DB   lsb(ident_)   ; h
0269   51                     DB   lsb(ident_)   ; i
026A   51                     DB   lsb(ident_)   ; j
026B   51                     DB   lsb(ident_)   ; k
026C   51                     DB   lsb(ident_)   ; l
026D   51                     DB   lsb(ident_)   ; m
026E   51                     DB   lsb(ident_)   ; n
026F   51                     DB   lsb(ident_)   ; o
0270   51                     DB   lsb(ident_)   ; p
0271   51                     DB   lsb(ident_)   ; q
0272   51                     DB   lsb(ident_)   ; r
0273   51                     DB   lsb(ident_)   ; s
0274   51                     DB   lsb(ident_)   ; t
0275   51                     DB   lsb(ident_)   ; u
0276   51                     DB   lsb(ident_)   ; v
0277   51                     DB   lsb(ident_)   ; w
0278   51                     DB   lsb(ident_)   ; x
0279   51                     DB   lsb(ident_)   ; y
027A   51                     DB   lsb(ident_)   ; z
027B   42                     DB   lsb(block_)   ; {
027C   62                     DB   lsb(or_)   ; |
027D   45                     DB   lsb(blockEnd_)   ; }
027E   74                     DB   lsb(inv_)   ; ~
027F   D0                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 11 04               JP   num   
0303                HEXNUM_:      
0303   C3 41 04               JP   hexnum   
0306                ARG_:        
0306   C3 16 05               JP   arg   
0309                PROP_:       
0309   C3 4E 05               JP   prop   
030C                STRING_:      
030C   C3 5E 04               JP   string   
030F                PAREN_:      
030F   C3 97 04               JP   paren   
0312                PARENEND_:      
0312   C3 99 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD 97 08               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD BA 08               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 4F 08               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   C3 72 05               JP   index   
0342                BLOCK_:      
0342   C3 9B 04               JP   block   
0345                BLOCKEND_:      
0345   C3 D6 04               JP   blockend   
0348                CHAR_:       
0348   C3 82 04               JP   char   
034B                ARRAY_:      
034B   C3 B7 05               JP   array   
034E                ARRAYEND_:      
034E   C3 CD 05               JP   arrayEnd   
0351                IDENT_:      
0351   C3 08 07               JP   ident   
0354                SYMBOL_:      
0354   C3 E0 06               JP   symbol   
0357                AND_:        
0357   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0358   E1                     POP   hl   
0359   7B                     LD   a,e   
035A   A5                     AND   l   
035B   6F                     LD   l,a   
035C   7A                     LD   a,d   
035D   A4                     AND   h   
035E                AND1:        
035E   67                     LD   h,a   
035F   E5                     PUSH   hl   
0360   DD E9                  JP   (ix)   
0362                OR_:         
0362   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0363   E1                     POP   hl   
0364   7B                     LD   a,e   
0365   B5                     OR   l   
0366   6F                     LD   l,a   
0367   7A                     LD   a,d   
0368   B4                     OR   h   
0369   18 F3                  JR   and1   
036B                XOR_:        
036B   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
036C                XOR1:        
036C   E1                     POP   hl   
036D   7B                     LD   a,e   
036E   AD                     XOR   l   
036F   6F                     LD   l,a   
0370   7A                     LD   a,d   
0371   AC                     XOR   h   
0372   18 EA                  JR   and1   
0374                INV_:        ; Bitwise INVert the top member of the stack
0374   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0377   18 F3                  JR   xor1   
0379                ADD_:        ; add the top 2 members of the stack
0379   D1                     POP   de   
037A   E1                     POP   hl   
037B   19                     ADD   hl,de   
037C   E5                     PUSH   hl   
037D   DD E9                  JP   (ix)   
037F                HDOT_:       ; print hexadecimal
037F   E1                     POP   hl   
0380   CD 97 08               CALL   prthex   
0383   C3 34 03               JP   dot3   
0386                MUL_:        
0386   C3 F5 03               JP   mul   
0389                SUB_:        ; negative sign or subtract
0389   03                     INC   bc   ; check if sign of a number
038A   0A                     LD   a,(bc)   
038B   0B                     DEC   bc   
038C   FE 30                  CP   "0"   
038E   38 05                  JR   c,sub1   
0390   FE 3A                  CP   "9"+1   
0392   DA 00 03               JP   c,num_   
0395                SUB1:        ; Subtract the value 2nd on stack from top of stack
0395   D1                     POP   de   
0396   E1                     POP   hl   ; Entry point for INVert
0397                SUB2:        
0397   B7                     OR   a   ; Entry point for NEGate
0398   ED 52                  SBC   hl,de   
039A   E5                     PUSH   hl   
039B   DD E9                  JP   (ix)   
039D                NOT_:        ; logical invert, any non zero value
039D   21 00 00               LD   hl,0   ; is considered true
03A0   18 01                  JR   eq1   
03A2                EQ_:         
03A2   E1                     POP   hl   
03A3                EQ1:         
03A3   D1                     POP   de   
03A4   C3 62 07               JP   equals   
03A7                GT_:         
03A7   D1                     POP   de   
03A8   E1                     POP   hl   
03A9   18 02                  JR   lt1   
03AB                LT_:         
03AB   E1                     POP   hl   
03AC   D1                     POP   de   
03AD                LT1:         
03AD   03                     INC   bc   
03AE   0A                     LD   a,(bc)   
03AF   FE 3D                  CP   "="   
03B1   CA 6A 07               JP   z,lessthaneq   
03B4   0B                     DEC   bc   
03B5   C3 6F 07               JP   lessthan   
03B8                DIV_:        
03B8   D1                     POP   de   ; get first value
03B9   E1                     POP   hl   ; get 2nd value
03BA   C5                     PUSH   bc   ; preserve the IP
03BB   44 4D                  LD   bc,hl   
03BD   CD 0C 08               CALL   divide   
03C0   22 98 18               LD   (vFrac),hl   
03C3   C1                     POP   bc   
03C4   D5                     PUSH   de   ; push result
03C5   DD E9                  JP   (ix)   
03C7                COMMENT_:      
03C7   03                     INC   bc   ; point to next char
03C8   0A                     LD   a,(bc)   
03C9   FE 20                  CP   " "   ; terminate on any char less than SP
03CB   30 FA                  JR   nc,comment_   
03CD   0B                     DEC   bc   
03CE   DD E9                  JP   (ix)   
03D0                NOP_:        
03D0   DD E9                  JP   (ix)   
03D2                             ;*******************************************************************
03D2                             ; word operators
03D2                             ;*******************************************************************
03D2                             ; shl
03D2                             ; value count -- value2          shift left count places
03D2                SHL:         
03D2   50 59                  LD   de,bc   ; save IP
03D4   C1                     POP   bc   ; bc = count
03D5   41                     LD   b,c   ; b = loop counter
03D6   E1                     POP   hl   
03D7   04                     INC   b   ; test for counter=0 case
03D8   18 01                  JR   shl2   
03DA                SHL1:        
03DA   29                     ADD   hl,hl   ; left shift hl
03DB                SHL2:        
03DB   10 FD                  DJNZ   shl1   
03DD   E5                     PUSH   hl   
03DE   42 4B                  LD   bc,de   ; restore IP
03E0   DD E9                  JP   (ix)   
03E2                             ; shr
03E2                             ; value count -- value2          shift left count places
03E2                SHR:         
03E2   50 59                  LD   de,bc   ; save IP
03E4   C1                     POP   bc   ; bc = count
03E5   41                     LD   b,c   ; b = loop counter
03E6   E1                     POP   hl   
03E7   04                     INC   b   ; test for counter=0 case
03E8   18 04                  JR   shr2   
03EA                SHR1:        
03EA   CB 3C                  SRL   h   ; right shift hl
03EC   CB 1D                  RR   l   
03EE                SHR2:        
03EE   10 FA                  DJNZ   shr1   
03F0   E5                     PUSH   hl   
03F1   42 4B                  LD   bc,de   ; restore IP
03F3   DD E9                  JP   (ix)   
03F5                MUL:         ;=19
03F5   D1                     POP   de   ; get first value
03F6   E1                     POP   hl   
03F7   C5                     PUSH   bc   ; Preserve the IP
03F8   44                     LD   b,h   ; bc = 2nd value
03F9   4D                     LD   c,l   
03FA   21 00 00               LD   hl,0   
03FD   3E 10                  LD   a,16   
03FF                MUL2:        
03FF   29                     ADD   hl,hl   
0400   CB 13                  RL   e   
0402   CB 12                  RL   d   
0404   30 04                  JR   nc,$+6   
0406   09                     ADD   hl,bc   
0407   30 01                  JR   nc,$+3   
0409   13                     INC   de   
040A   3D                     DEC   a   
040B   20 F2                  JR   nz,mul2   
040D   C1                     POP   bc   ; Restore the IP
040E   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040F   DD E9                  JP   (ix)   
0411                NUM:         
0411   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0414   0A                     LD   a,(bc)   ; Get numeral or -
0415   FE 2D                  CP   "-"   
0417   20 01                  JR   nz,num0   
0419   03                     INC   bc   ; move to next char, no flags affected
041A                NUM0:        
041A   08                     EX   af,af'   ; save zero flag = 0 for later
041B                NUM1:        
041B   0A                     LD   a,(bc)   ; read digit
041C   D6 30                  SUB   "0"   ; less than 0?
041E   38 13                  JR   c,num2   ; not a digit, exit loop
0420   FE 0A                  CP   10   ; greater that 9?
0422   30 0F                  JR   nc,num2   ; not a digit, exit loop
0424   03                     INC   bc   ; inc IP
0425   54 5D                  LD   de,hl   ; multiply hl * 10
0427   29                     ADD   hl,hl   
0428   29                     ADD   hl,hl   
0429   19                     ADD   hl,de   
042A   29                     ADD   hl,hl   
042B   85                     ADD   a,l   ; add digit in a to hl
042C   6F                     LD   l,a   
042D   3E 00                  LD   a,0   
042F   8C                     ADC   a,h   
0430   67                     LD   h,a   
0431   18 E8                  JR   num1   
0433                NUM2:        
0433   0B                     DEC   bc   
0434   08                     EX   af,af'   ; restore zero flag
0435   20 07                  JR   nz,num3   
0437   EB                     EX   de,hl   ; negate the value of hl
0438   21 00 00               LD   hl,0   
043B   B7                     OR   a   ; jump to sub2
043C   ED 52                  SBC   hl,de   
043E                NUM3:        
043E   E5                     PUSH   hl   ; Put the number on the stack
043F   DD E9                  JP   (ix)   ; and process the next character
0441                HEXNUM:      ; 
0441   21 00 00               LD   hl,0   ; Clear hl to accept the number
0444                HEXNUM1:      
0444   03                     INC   bc   
0445   0A                     LD   a,(bc)   ; Get the character which is a numeral
0446   CB 77                  BIT   6,a   ; is it uppercase alpha?
0448   28 02                  JR   z,hexnum2   ; no a decimal
044A   D6 07                  SUB   7   ; sub 7  to make $a - $F
044C                HEXNUM2:      
044C   D6 30                  SUB   $30   ; Form decimal digit
044E   DA 33 04               JP   c,num2   
0451   FE 10                  CP   $0F+1   
0453   D2 33 04               JP   nc,num2   
0456   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0457   29                     ADD   hl,hl   ; 4X
0458   29                     ADD   hl,hl   ; 8X
0459   29                     ADD   hl,hl   ; 16X
045A   85                     ADD   a,l   ; add into bottom of hl
045B   6F                     LD   l,a   ; 
045C   18 E6                  JR   hexnum1   
045E                             ; string
045E                             ; -- ptr                        ; points to start of string chars,
045E                             ; length is stored at start - 2 bytes
045E                STRING:      
045E   2A A6 18               LD   hl,(vHeapPtr)   ; DE = heap ptr
0461   23                     INC   hl   ; skip length field to start
0462   23                     INC   hl   
0463   E5                     PUSH   hl   ; save start of string
0464   03                     INC   bc   ; point to next char
0465   18 03                  JR   string2   
0467                STRING1:      
0467   77                     LD   (hl),a   
0468   23                     INC   hl   ; increase count
0469   03                     INC   bc   ; point to next char
046A                STRING2:      
046A   0A                     LD   a,(bc)   
046B   FE 27                  CP   "'"   ; ' is the string terminator
046D   20 F8                  JR   nz,string1   
046F   AF                     XOR   a   ; write NUL to terminate string
0470   77                     LD   (hl),a   ; hl = end of string
0471   23                     INC   hl   
0472   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0475   2B                     DEC   hl   ; hl = end of string without terminator
0476   D1                     POP   de   ; de = start of string
0477   D5                     PUSH   de   ; return start of string
0478   B7                     OR   a   ; hl = length bytes, de = start of string
0479   ED 52                  SBC   hl,de   
047B   EB                     EX   de,hl   
047C   2B                     DEC   hl   ; write length bytes to length field at start - 2
047D   72                     LD   (hl),d   
047E   2B                     DEC   hl   
047F   73                     LD   (hl),e   
0480   DD E9                  JP   (ix)   
0482                CHAR:        
0482   21 00 00               LD   hl,0   ; if `` is empty
0485                CHAR1:       
0485   03                     INC   bc   ; point to next char
0486   0A                     LD   a,(bc)   
0487   FE 60                  CP   "`"   ; ` is the string terminator
0489   28 09                  JR   z,char3   
048B   FE 5C                  CP   $5c   ; \ is the escape
048D   20 02                  JR   nz,char2   
048F   03                     INC   bc   
0490   0A                     LD   a,(bc)   
0491                CHAR2:       
0491   6F                     LD   l,a   
0492   18 F1                  JR   char1   
0494                CHAR3:       
0494   E5                     PUSH   hl   
0495   DD E9                  JP   (ix)   
0497                PAREN:       
0497   DD E9                  JP   (ix)   
0499                             ;     ld ix,paren2
0499                             ;     jr block
0499                             ; paren2:
0499                             ;     ld ix,next
0499                             ;     jp exec
0499                PARENEND:      
0499   DD E9                  JP   (ix)   
049B                             ;     pop hl                      ; hl = last result
049B                             ;     pop de
049B                             ;     pop bc
049B                             ;     pop bc
049B                             ;     push hl
049B                             ;     ld iyh,d
049B                             ;     ld iyl,e
049B                             ;     ld ix,next
049B                             ;     jp (ix)
049B                BLOCK:       
049B   03                     INC   bc   
049C   C5                     PUSH   bc   ; return first opcode of block
049D   16 01                  LD   d,1   ; nesting: count first parenthesis
049F                BLOCK1:      ; Skip to end of definition
049F   0A                     LD   a,(bc)   ; Get the next character
04A0   03                     INC   bc   ; Point to next character
04A1   FE 21                  CP   " " + 1   ; ignore whitespace
04A3   38 FA                  JR   c,block1   
04A5   FE 29                  CP   ")"   
04A7   28 27                  JR   z,block4   
04A9   FE 7D                  CP   "}"   
04AB   28 23                  JR   z,block4   
04AD   FE 5D                  CP   "]"   
04AF   28 1F                  JR   z,block4   
04B1   FE 28                  CP   "("   
04B3   28 10                  JR   z,block2   
04B5   FE 7B                  CP   "{"   
04B7   28 0C                  JR   z,block2   
04B9   FE 5B                  CP   "["   
04BB   28 08                  JR   z,block2   
04BD   FE 27                  CP   "'"   
04BF   28 07                  JR   z,block3   
04C1   FE 60                  CP   "`"   
04C3   20 DA                  JR   nz,block1   
04C5                BLOCK2:      
04C5   14                     INC   d   
04C6   18 D7                  JR   block1   
04C8                BLOCK3:      
04C8   3E 80                  LD   a,$80   
04CA   AA                     XOR   d   
04CB   47                     LD   b,a   
04CC   20 D1                  JR   nz,block1   
04CE   18 03                  JR   block5   
04D0                BLOCK4:      
04D0   15                     DEC   d   
04D1   20 CC                  JR   nz,block1   ; get the next element
04D3                BLOCK5:      
04D3   0B                     DEC   bc   ; balanced, exit
04D4   DD E9                  JP   (ix)   
04D6                BLOCKEND:      
04D6   D9                     EXX      
04D7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04DA   FD 56 01               LD   d,(iy+1)   
04DD   FD 4E 06               LD   c,(iy+6)   ; bc = IP
04E0   FD 46 07               LD   b,(iy+7)   
04E3   D9                     EXX      
04E4   FD 54                  LD   d,iyh   ; hl = BP
04E6   FD 5D                  LD   e,iyl   
04E8   EB                     EX   de,hl   
04E9   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
04EC   FD 56 03               LD   d,(iy+3)   
04EF   EB                     EX   de,hl   
04F0   3E 04                  LD   a,4   ; a = 4
04F2   2B                     DEC   hl   ; hl = ptr to numargs
04F3   2B                     DEC   hl   
04F4   86                     ADD   a,(hl)   ; a += numargs
04F5   87                     ADD   a,a   ; a *= 2
04F6   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
04F8   B7                     OR   a   ; bc = BP - sp = count
04F9   ED 72                  SBC   hl,sp   
04FB   44 4D                  LD   bc,hl   
04FD   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
04FF   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
0500   6F                     LD   l,a   
0501   3E 00                  LD   a,0   
0503   8C                     ADC   a,h   
0504   67                     LD   h,a   
0505   EB                     EX   de,hl   
0506   1B                     DEC   de   ; de = firstArg-1
0507   2B                     DEC   hl   ; hl = BP-1
0508   ED B8                  LDDR      
050A   13                     INC   de   ; sp = new sp
050B   EB                     EX   de,hl   
050C   F9                     LD   sp,hl   
050D   D9                     EXX      
050E   D5                     PUSH   de   ; oldBP
050F   C5                     PUSH   bc   ; IP
0510   D9                     EXX      
0511   C1                     POP   bc   
0512   FD E1                  POP   iy   
0514   DD E9                  JP   (ix)   
0516                             ; index -- value
0516                             ; returns value of arg
0516                ARG:         
0516   03                     INC   bc   ; get next char
0517   0A                     LD   a,(bc)   
0518   C5                     PUSH   bc   ; save IP
0519   FD 5E 02               LD   e,(iy+2)   ; hl = arglist, numargs = arglist[-2]
051C   FD 56 03               LD   d,(iy+3)   
051F   EB                     EX   de,hl   
0520   2B                     DEC   hl   
0521   2B                     DEC   hl   
0522   46                     LD   b,(hl)   ; b = numargs
0523   23                     INC   hl   ; hl = arglist
0524   23                     INC   hl   
0525   48                     LD   c,b   ; offset = numargs * 2
0526   CB 21                  SLA   c   
0528                ARG0:        
0528   BE                     CP   (hl)   
0529   28 0B                  JR   z,arg1   
052B   23                     INC   hl   
052C   0D                     DEC   c   ; offset ++
052D   10 F9                  DJNZ   arg0   
052F   C1                     POP   bc   ; no match, restore IP
0530   21 00 00               LD   hl,0   ; return 0
0533   E5                     PUSH   hl   
0534   DD E9                  JP   (ix)   
0536                ARG1:        
0536   79                     LD   a,c   ; hl = (offset + 4) * 2
0537   C6 04                  ADD   a,4   
0539   6F                     LD   l,a   
053A   26 00                  LD   h,0   
053C   29                     ADD   hl,hl   
053D   C1                     POP   bc   ; restore IP
053E   FD 54                  LD   d,iyh   ; de = BP
0540   FD 5D                  LD   e,iyl   
0542   EB                     EX   de,hl   
0543   19                     ADD   hl,de   ; hl = BP + (offset + 4) * 2
0544   2B                     DEC   hl   ; de = arg
0545   22 9E 18               LD   (vPointer),hl   ; store address of arg in setter
0548   56                     LD   d,(hl)   
0549   2B                     DEC   hl   
054A   5E                     LD   e,(hl)   
054B   D5                     PUSH   de   ; push arg
054C   DD E9                  JP   (ix)   
054E                             ; @1..9
054E                             ; returns address of prop
054E                PROP:        
054E   03                     INC   bc   ; get next char
054F   0A                     LD   a,(bc)   
0550   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0552   E6 0F                  AND   $0F   ; mask
0554   87                     ADD   a,a   ; double
0555   6F                     LD   l,a   ; hl = offset into args
0556   26 00                  LD   h,0   
0558   FD 5E 06               LD   e,(iy+6)   ; de = closure array
055B   FD 56 07               LD   d,(iy+7)   
055E   19                     ADD   hl,de   ; find address of prop in array
055F   22 9E 18               LD   (vPointer),hl   ; store address in setter
0562   5E                     LD   e,(hl)   
0563   23                     INC   hl   
0564   56                     LD   d,(hl)   
0565   D5                     PUSH   de   ; push prop value
0566   DD E9                  JP   (ix)   
0568                             ; addr -- value
0568                DOLET:       
0568   E1                     POP   hl   
0569   22 9E 18               LD   (vPointer),hl   ; store address in setter
056C                DOLET2:      
056C   5E                     LD   e,(hl)   
056D   23                     INC   hl   
056E   56                     LD   d,(hl)   
056F                DOLET3:      
056F   D5                     PUSH   de   
0570   DD E9                  JP   (ix)   
0572                INDEX:       
0572   E1                     POP   hl   ; hl = index
0573   D1                     POP   de   ; de = addr
0574   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0577   3D                     DEC   a   
0578   28 01                  JR   z,index1   
057A   29                     ADD   hl,hl   ; if data width = 2 then double
057B                INDEX1:      
057B   19                     ADD   hl,de   ; add addr
057C   22 9E 18               LD   (vPointer),hl   ; store address in setter
057F   16 00                  LD   d,0   
0581   5E                     LD   e,(hl)   
0582   B7                     OR   a   ; check data width again
0583   28 02                  JR   z,index2   
0585   23                     INC   hl   
0586   56                     LD   d,(hl)   
0587                INDEX2:      
0587   D5                     PUSH   de   
0588   DD E9                  JP   (ix)   
058A                             ; newvalue --
058A                SET:         
058A   D1                     POP   de   ; new value
058B   E1                     POP   hl   ; discard last accessed value
058C   2A 9E 18               LD   hl,(vPointer)   
058F   73                     LD   (hl),e   
0590   3A 9A 18               LD   a,(vDataWidth)   
0593   3D                     DEC   a   
0594   28 02                  JR   z,set1   
0596   23                     INC   hl   
0597   72                     LD   (hl),d   
0598                SET1:        
0598   DD E9                  JP   (ix)   
059A                             ; ifte
059A                             ; condition then -- value
059A                IF:          
059A   DD E9                  JP   (ix)   
059C                             ; ld de,0                      ; NUL pointer for else
059C                             ; jr ifte1
059C                             ; ifte
059C                             ; condition then else -- value
059C                IFTE:        
059C   DD E9                  JP   (ix)   
059E                             ;     pop de                      ; de = else
059E                             ; ifte1:
059E                             ;     pop hl                      ; hl = then
059E                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
059E                             ;     inc hl                      ; check for true
059E                             ;     ld a,h
059E                             ;     or l
059E                             ;     pop hl                      ; hl = then
059E                             ;     jr z,ifte2
059E                             ;     ex de,hl                    ; condition = false, hl = else
059E                             ; ifte2:
059E                             ;     ld a,h                      ; check if hl is NUL
059E                             ;     or l
059E                             ;     jr z,ifte3
059E                             ;     push bc                     ; push IP
059E                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
059E                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
059E                             ;     push de                     ; push SCP
059E                             ;     push iy                     ; push BP
059E                             ;     ld iy,0                     ; iy = sp
059E                             ;     add iy,sp
059E                             ;     ld bc,hl                    ; IP = then
059E                             ;     dec bc
059E                             ; ifte3:
059E                             ;     jp (ix)
059E                             ; switch
059E                             ; index array -- value
059E                SWITCH:      
059E   D1                     POP   de   ; de = array
059F   E1                     POP   hl   ; hl = index
05A0   29                     ADD   hl,hl   ; indec *= 2
05A1   19                     ADD   hl,de   ; add array[0]
05A2   4E                     LD   c,(hl)   ; bc = case
05A3   23                     INC   hl   
05A4   46                     LD   b,(hl)   
05A5   0B                     DEC   bc   
05A6   DD E9                  JP   (ix)   
05A8                             ; c b --
05A8                             ; loops until c = 0
05A8                LOOP:        
05A8   DD E9                  JP   (ix)   
05AA                             ;     pop de                      ; de = block                    c
05AA                             ;     pop hl                      ; hl = condition
05AA                             ;     push de
05AA                             ;     push bc                     ; push IP
05AA                             ;     ld bc,de                    ; bc = block
05AA                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05AA                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05AA                             ;     push de                     ; push SCP
05AA                             ;     push iy                     ; push BP
05AA                             ;     ld iy,0                     ; iy = sp
05AA                             ;     add iy,sp
05AA                             ; loop1:
05AA                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05AA                             ;     or h
05AA                             ;     jr z,loop3
05AA                             ;     ld de,loop2-1               ; IP return address
05AA                             ;     push de
05AA                             ;     ld e,(iy+2)                 ; push parent SCP
05AA                             ;     ld d,(iy+3)
05AA                             ;     push de                     ;
05AA                             ;     push iy                     ; push BP
05AA                             ;     ld iy,0                     ; iy = sp
05AA                             ;     add iy,sp
05AA                             ;     push hl                     ; push condition
05AA                             ;     dec bc
05AA                             ;     jp (ix)
05AA                             ; loop2:
05AA                             ;     db ESC                      ; escape from interpreter
05AA                             ;     ld c,(iy+6)                 ; bc = block
05AA                             ;     ld b,(iy+7)
05AA                             ;     pop hl                      ; hl = condition
05AA                             ;     jr loop1
05AA                             ; loop3:
05AA                             ;     ld d,iyh                    ; de = BP
05AA                             ;     ld e,iyl
05AA                             ;     ex de,hl                    ; hl = BP, de = result
05AA                             ;     ld sp,hl                    ; sp = BP
05AA                             ;     pop hl                      ; hl = old BP
05AA                             ;     pop bc                      ; pop SCP (discard)
05AA                             ;     pop bc                      ; bc = IP
05AA                             ;     ld sp,hl                    ; sp = old BP
05AA                             ;     ld iy,0                     ; iy = sp
05AA                             ;     add iy,sp
05AA                             ;     ld ix,next                  ; needed?
05AA                             ;     jp (ix)
05AA                WORDS:       
05AA   21 02 00               LD   hl,2   
05AD   18 03                  JR   bytes1   
05AF                BYTES:       
05AF   21 01 00               LD   hl,1   
05B2                BYTES1:      
05B2   22 9A 18               LD   (vDataWidth),hl   
05B5   DD E9                  JP   (ix)   
05B7                ARRAY:       
05B7   11 00 00               LD   de,0   ; create stack frame
05BA   D5                     PUSH   de   ; push null for IP
05BB   D5                     PUSH   de   ; push null for static array
05BC   FD 5E 02               LD   e,(iy+2)   ; get and save arglist from parent stack frame
05BF   FD 56 03               LD   d,(iy+3)   ; 
05C2   D5                     PUSH   de   ; 
05C3   FD E5                  PUSH   iy   ; push BP
05C5   FD 21 00 00            LD   iy,0   ; BP = SP
05C9   FD 39                  ADD   iy,sp   
05CB   DD E9                  JP   (ix)   
05CD                ARRAYEND:      
05CD   FD 54                  LD   d,iyh   ; de = BP
05CF   FD 5D                  LD   e,iyl   
05D1   C5                     PUSH   bc   ; save IP
05D2   D9                     EXX      
05D3   C1                     POP   bc   
05D4   D9                     EXX      
05D5   62 6B                  LD   hl,de   ; hl = de = BP
05D7   B7                     OR   a   
05D8   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05DA   CB 3C                  SRL   h   ; 
05DC   CB 1D                  RR   l   
05DE   44 4D                  LD   bc,hl   ; bc = count
05E0   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05E3   71                     LD   (hl),c   ; write num items in length word
05E4   23                     INC   hl   
05E5   70                     LD   (hl),b   
05E6   23                     INC   hl   ; hl = array[0], bc = count
05E7                             ; de = BP, hl = array[0], bc = count
05E7   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05EA   FE 01                  CP   1   
05EC   20 10                  JR   nz,arrayEnd2   
05EE                ARRAYEND1:      ; byte
05EE   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F1   77                     LD   (hl),a   ; write a to array item
05F2   23                     INC   hl   ; move to next byte in array
05F3   FD 2B                  DEC   iy   ; move tho next word on stack
05F5   FD 2B                  DEC   iy   
05F7   0B                     DEC   bc   ; dec items count
05F8   79                     LD   a,c   ; if not zero loop
05F9   B0                     OR   b   
05FA   20 F2                  JR   nz,arrayEnd1   
05FC   18 13                  JR   arrayEnd3   
05FE                ARRAYEND2:      ; word
05FE   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0601   77                     LD   (hl),a   ; write lsb of array item
0602   23                     INC   hl   ; move to msb of array item
0603   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0606   77                     LD   (hl),a   ; write msb of array item
0607   23                     INC   hl   ; move to next word in array
0608   FD 2B                  DEC   iy   ; move to next word on stack
060A   FD 2B                  DEC   iy   
060C   0B                     DEC   bc   ; dec items count
060D   79                     LD   a,c   ; if not zero loop
060E   B0                     OR   b   
060F   20 ED                  JR   nz,arrayEnd2   
0611                ARRAYEND3:      
0611   EB                     EX   de,hl   ; de = end of array, hl = BP
0612   F9                     LD   sp,hl   ; sp = BP
0613   E1                     POP   hl   ; de = end of array, hl = old BP
0614   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0615   FD 62                  LD   iyh,d   
0617   FD 6B                  LD   iyl,e   
0619   D1                     POP   de   ; pop arglist (discard)
061A   D1                     POP   de   ; pop static array (discard)
061B   D1                     POP   de   ; pop IP (discard)
061C   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0620   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0623   D9                     EXX      ; restore IP
0624   C5                     PUSH   bc   
0625   D9                     EXX      
0626   C1                     POP   bc   
0627   13                     INC   de   ; de = array[0]
0628   13                     INC   de   
0629   D5                     PUSH   de   ; return array[0]
062A   DD E9                  JP   (ix)   
062C                             ; str -- num
062C                HASH:        
062C   E1                     POP   hl   
062D   C5                     PUSH   bc   
062E   44 4D                  LD   bc,hl   
0630   CD A9 07               CALL   hashStr   
0633   C1                     POP   bc   
0634   E5                     PUSH   hl   
0635   DD E9                  JP   (ix)   
0637                             ; arglist block -- ptr
0637                FUNC:        
0637   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
063A   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
063C   23                     INC   hl   
063D   36 05                  LD   (hl),lsb(doCall)   
063F   23                     INC   hl   
0640   36 0B                  LD   (hl),msb(doCall)   
0642   23                     INC   hl   
0643   11 00 00               LD   de,0   ; todo: move this to after arglist?
0646   73                     LD   (hl),e   ; compile array = 0
0647   23                     INC   hl   
0648   72                     LD   (hl),d   
0649   23                     INC   hl   
064A   D1                     POP   de   ; hl = heapPtr, de = block
064B   EB                     EX   de,hl   ; hl = heapPtr, de = arglist, (sp) = block
064C   E3                     EX   (sp),hl   
064D   EB                     EX   de,hl   
064E   73                     LD   (hl),e   ; compile arglist
064F   23                     INC   hl   
0650   72                     LD   (hl),d   
0651   23                     INC   hl   
0652   D1                     POP   de   ; de = block
0653   C5                     PUSH   bc   ; (sp) = IP
0654   06 01                  LD   b,1   ; b = nesting
0656                FUNC1:       
0656   1A                     LD   a,(de)   
0657   13                     INC   de   
0658   77                     LD   (hl),a   
0659   23                     INC   hl   
065A   FE 29                  CP   ")"   
065C   28 27                  JR   z,func4   
065E   FE 7D                  CP   "}"   
0660   28 23                  JR   z,func4   
0662   FE 5D                  CP   "]"   
0664   28 1F                  JR   z,func4   
0666   FE 28                  CP   "("   
0668   28 10                  JR   z,func2   
066A   FE 7B                  CP   "{"   
066C   28 0C                  JR   z,func2   
066E   FE 5B                  CP   "["   
0670   28 08                  JR   z,func2   
0672   FE 27                  CP   "'"   
0674   28 07                  JR   z,func3   
0676   FE 60                  CP   "`"   
0678   20 DC                  JR   nz,func1   
067A                FUNC2:       
067A   04                     INC   b   
067B   18 D9                  JR   func1   
067D                FUNC3:       
067D   3E 80                  LD   a,$80   
067F   A8                     XOR   b   
0680   47                     LD   b,a   
0681   20 D3                  JR   nz,func1   
0683   18 03                  JR   func4a   
0685                FUNC4:       
0685   05                     DEC   b   
0686   20 CE                  JR   nz,func1   ; get the next element
0688                FUNC4A:      
0688   C1                     POP   bc   ; de = defstart, hl = IP
0689   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
068D   D5                     PUSH   de   
068E   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0691   DD E9                  JP   (ix)   
0693                             ; symbol func --
0693                DEF:         
0693   DD 21 99 06            LD   ix,def1   
0697   18 9E                  JR   func   
0699                DEF1:        
0699   DD 21 E3 0A            LD   ix,next   
069D   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
069E   60 69                  LD   hl,bc   
06A0   18 1C                  JR   let1   
06A2                             ; symbol value --
06A2                LET:         
06A2   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06A4   E3                     EX   (sp),hl   
06A5   EB                     EX   de,hl   
06A6   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
06A9   36 CD                  LD   (hl),$cd   ; compile "call dolet"
06AB   23                     INC   hl   
06AC   36 68                  LD   (hl),lsb(dolet)   
06AE   23                     INC   hl   
06AF   36 05                  LD   (hl),msb(dolet)   
06B1   23                     INC   hl   
06B2   73                     LD   (hl),e   
06B3   23                     INC   hl   
06B4   72                     LD   (hl),d   
06B5   2B                     DEC   hl   
06B6   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06BA   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
06BD   E1                     POP   hl   ; de = addr, hl = IP
06BE                LET1:        
06BE   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06BF   44 4D                  LD   bc,hl   ; bc = symbol
06C1   CD C2 07               CALL   defineEntry   
06C4   38 00                  JR   c,let2   
06C6                             ; call error
06C6                             ; .cstr "Let Collision"
06C6                LET2:        
06C6   C1                     POP   bc   
06C7   DD E9                  JP   (ix)   
06C9                             ; symbol -- ptr
06C9                ADDR:        
06C9   E1                     POP   hl   ; hl = hash
06CA   C5                     PUSH   bc   
06CB   44 4D                  LD   bc,hl   
06CD   CD E8 07               CALL   lookupEntry   
06D0   38 03                  JR   c,addr1   
06D2   21 00 00               LD   hl,0   
06D5                             ; call printStr		
06D5                             ; .cstr "Undefined"
06D5                             ; jp interpret
06D5                ADDR1:       
06D5   C1                     POP   bc   
06D6   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
06D9   19                     ADD   hl,de   
06DA   22 9E 18               LD   (vPointer),hl   
06DD   E5                     PUSH   hl   
06DE   DD E9                  JP   (ix)   
06E0                SYMBOL:      
06E0   03                     INC   bc   
06E1   11 00 1A               LD   de,PAD   
06E4   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06E6   18 02                  JR   symbol1   
06E8                SYMBOL0:      ; copy to PAD area
06E8   03                     INC   bc   ; characters that are part of the identifier
06E9   13                     INC   de   
06EA                SYMBOL1:      ; 0-9 A-Z a-z _
06EA   0A                     LD   a,(bc)   
06EB   12                     LD   (de),a   
06EC   FE 21                  CP   " "+1   
06EE   38 0A                  JR   c,symbol2   
06F0   6F                     LD   l,a   
06F1   7E                     LD   a,(hl)   
06F2   FE 51                  CP   lsb(ident_)   
06F4   28 F2                  JR   z,symbol0   
06F6   FE 00                  CP   lsb(num_)   
06F8   28 EE                  JR   z,symbol0   
06FA                SYMBOL2:      
06FA   0B                     DEC   bc   
06FB   AF                     XOR   a   
06FC   12                     LD   (de),a   ; terminate string with NUL
06FD   C5                     PUSH   bc   
06FE   01 00 1A               LD   bc,PAD   
0701   CD A9 07               CALL   hashStr   ; hl = hash
0704   C1                     POP   bc   
0705   E5                     PUSH   hl   
0706   DD E9                  JP   (ix)   
0708                IDENT:       
0708   11 00 1A               LD   de,PAD   
070B   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
070D   18 02                  JR   ident1   
070F                IDENT0:      ; copy to PAD area
070F   03                     INC   bc   ; characters that are part of the identifier
0710   13                     INC   de   
0711                IDENT1:      ; 0-9 A-Z a-z _
0711   0A                     LD   a,(bc)   
0712   12                     LD   (de),a   
0713                             ; or a
0713                             ; jr z,ident2
0713   FE 21                  CP   " "+1   
0715   38 0A                  JR   c,ident2   
0717   6F                     LD   l,a   
0718   7E                     LD   a,(hl)   
0719   FE 51                  CP   lsb(ident_)   
071B   28 F2                  JR   z,ident0   
071D   FE 00                  CP   lsb(num_)   
071F   28 EE                  JR   z,ident0   
0721                IDENT2:      
0721   0B                     DEC   bc   
0722   AF                     XOR   a   
0723   12                     LD   (de),a   ; terminate string with NUL
0724   C5                     PUSH   bc   
0725   01 00 1A               LD   bc,PAD   
0728   CD A9 07               CALL   hashStr   ; hl = hash
072B   44 4D                  LD   bc,hl   
072D   CD E8 07               CALL   lookupEntry   
0730   C1                     POP   bc   
0731   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0733   DD E9                  JP   (ix)   
0735                IDENT3:      
0735   E9                     JP   (hl)   
0736                FRAC:        
0736   2A 98 18               LD   hl,(vFrac)   
0739   E5                     PUSH   hl   
073A   DD E9                  JP   (ix)   
073C                SQRT1:       
073C   E1                     POP   hl   
073D   C5                     PUSH   bc   
073E   CD 25 08               CALL   squareRoot   
0741   ED 43 98 18            LD   (vFrac),bc   
0745   C1                     POP   bc   
0746   D5                     PUSH   de   
0747   DD E9                  JP   (ix)   
0749                ABS1:        
0749   E1                     POP   hl   
074A   CB 7C                  BIT   7,h   
074C   C8                     RET   z   
074D   AF                     XOR   a   
074E   95                     SUB   l   
074F   6F                     LD   l,a   
0750   9F                     SBC   a,a   
0751   94                     SUB   h   
0752   67                     LD   h,a   
0753   E5                     PUSH   hl   
0754   DD E9                  JP   (ix)   
0756                MOD:         
0756   D1                     POP   de   ; get first value
0757   E1                     POP   hl   ; get 2nd value
0758   C5                     PUSH   bc   ; preserve the IP
0759   44 4D                  LD   bc,hl   
075B   CD 0C 08               CALL   divide   
075E   C1                     POP   bc   
075F   E5                     PUSH   hl   ; push remainder
0760   DD E9                  JP   (ix)   
0762                             ; hl = value1, de = value2
0762                             ; hl = result
0762                EQUALS:      
0762   B7                     OR   a   ; reset the carry flag
0763   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0765   28 10                  JR   z,true1   
0767   C3 7D 07               JP   false1   
076A                             ; hl = value1 de = value2
076A                             ; hl = result
076A                LESSTHANEQ:      
076A   B7                     OR   a   
076B   ED 52                  SBC   hl,de   
076D   18 05                  JR   lessthan1   
076F                             ; hl = value1 de = value2
076F                             ; hl = result
076F                LESSTHAN:      
076F   B7                     OR   a   
0770   ED 52                  SBC   hl,de   
0772   28 09                  JR   z,false1   
0774                LESSTHAN1:      
0774   FA 7D 07               JP   m,false1   
0777                TRUE1:       
0777   21 FF FF               LD   hl,TRUE   
077A   E5                     PUSH   hl   
077B   DD E9                  JP   (ix)   
077D                FALSE1:      
077D   21 00 00               LD   hl,FALSE   
0780   E5                     PUSH   hl   
0781   DD E9                  JP   (ix)   
0783                             ; Z80 port input
0783                             ; port -- value
0783                INPUT:       
0783   E1                     POP   hl   
0784   59                     LD   e,c   ; save IP
0785   4D                     LD   c,l   
0786   ED 68                  IN   l,(c)   
0788   26 00                  LD   h,0   
078A   4B                     LD   c,e   ; restore IP
078B   E5                     PUSH   hl   
078C   DD E9                  JP   (ix)   
078E                             ; Z80 port output
078E                             ; value port --
078E                OUTPUT:      
078E   E1                     POP   hl   
078F   59                     LD   e,c   ; save IP
0790   4D                     LD   c,l   
0791   E1                     POP   hl   
0792   ED 69                  OUT   (c),l   
0794   4B                     LD   c,e   ; restore IP
0795   DD E9                  JP   (ix)   
0797                KEY:         
0797   CD 81 00               CALL   getchar   
079A   26 00                  LD   h,0   
079C   6F                     LD   l,a   
079D   E5                     PUSH   hl   
079E   DD E9                  JP   (ix)   
07A0                NEG:         
07A0   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
07A3   D1                     POP   de   
07A4   C3 97 03               JP   sub2   ; use the SUBtract routine
07A7                FILTER:      
07A7                MAP:         
07A7                SCAN:        
07A7   DD E9                  JP   (ix)   
07A9                             ; -------------------------------------------------------------------------------
07A9                             ; hash C-string
07A9                             ; BC = str
07A9                             ; HL = hash
07A9                HASHSTR:      
07A9   21 00 00               LD   hl,0   
07AC                HASHSTR1:      
07AC   0A                     LD   a,(bc)   ; load next char
07AD   03                     INC   bc   
07AE   FE 00                  CP   0   ; NUL?
07B0   C8                     RET   z   
07B1                HASHSTR2:      
07B1   16 00                  LD   d,0   
07B3   5F                     LD   e,a   
07B4   19                     ADD   hl,de   
07B5   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
07B7   29                     ADD   hl,hl   ; shift left
07B8   19                     ADD   hl,de   ; add
07B9   29                     ADD   hl,hl   ; shift left
07BA   29                     ADD   hl,hl   ; shift left
07BB   29                     ADD   hl,hl   ; shift left
07BC   29                     ADD   hl,hl   ; shift left
07BD   29                     ADD   hl,hl   ; shift left
07BE   29                     ADD   hl,hl   ; shift left
07BF   19                     ADD   hl,de   ; add
07C0   18 EA                  JR   hashStr1   
07C2                             ; add entry to hash slots and hash pointers
07C2                             ; bc = hash (b = hi, c = lo), de = addr
07C2                             ; sets carry if successful
07C2                DEFINEENTRY:      
07C2   CB 21                  SLA   c   ; lo = lo * 2
07C4   69                     LD   l,c   ; lo1 = lo
07C5   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07C7                DEFINEENTRY0:      
07C7   7E                     LD   a,(hl)   ; a = (lo1)
07C8   FE FF                  CP   UNUSED   ; is it unused?
07CA   28 12                  JR   z,defineEntry3   ; yes, add entry
07CC   79                     LD   a,c   ; a = lo
07CD   BE                     CP   (hl)   ; compare (lo1) with lo
07CE   20 06                  JR   nz,defineEntry1   ; no match loop around
07D0   2C                     INC   l   
07D1   78                     LD   a,b   ; a = hi
07D2   BE                     CP   (hl)   ; compare (lo1+1) with hi
07D3   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
07D5   2D                     DEC   l   ; restore l
07D6                DEFINEENTRY1:      
07D6   2C                     INC   l   ; try next entry
07D7   2C                     INC   l   
07D8   79                     LD   a,c   ; compare lo and lo1
07D9   BD                     CP   l   ; if equal then there's no space left, reject
07DA   20 EB                  JR   nz,defineEntry0   
07DC                DEFINEENTRY2:      
07DC   B7                     OR   a   ; clear carry flag, failure
07DD   C9                     RET      
07DE                DEFINEENTRY3:      ; new entry
07DE   71                     LD   (hl),c   ; (lo1) = hash lo
07DF   23                     INC   hl   
07E0   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
07E1   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07E3   72                     LD   (hl),d   
07E4   2B                     DEC   hl   
07E5   73                     LD   (hl),e   ; (slot + 2) = address
07E6   37                     SCF      ; set carry flag, success
07E7   C9                     RET      
07E8                             ; looks up hash and returns address
07E8                             ; bc = hash
07E8                             ; returns addr in hl, sets carry if successful
07E8                LOOKUPENTRY:      
07E8   CB 21                  SLA   c   ; lo = lo * 2
07EA   69                     LD   l,c   ; lo1 = lo
07EB   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07ED                LOOKUPENTRY0:      
07ED   7E                     LD   a,(hl)   ; a = (hl), slot
07EE   FE FF                  CP   UNUSED   ; is it unused?
07F0   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07F2   79                     LD   a,c   ; a = lo
07F3   BE                     CP   (hl)   ; compare (lo1) with lo
07F4   20 06                  JR   nz,lookupEntry1   ; no match loop around
07F6   2C                     INC   l   
07F7   78                     LD   a,b   ; a = hi
07F8   BE                     CP   (hl)   ; compare (lo1+1) with hi
07F9   28 09                  JR   z,lookupEntry3   
07FB   2D                     DEC   l   
07FC                LOOKUPENTRY1:      
07FC   2C                     INC   l   
07FD   2C                     INC   l   
07FE   79                     LD   a,c   
07FF   BD                     CP   l   ; no space left, reject
0800   20 EB                  JR   nz,lookupEntry0   
0802                LOOKUPENTRY2:      
0802   B7                     OR   a   ; clear carry flag, failure
0803   C9                     RET      
0804                LOOKUPENTRY3:      
0804   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0806   56                     LD   d,(hl)   
0807   2D                     DEC   l   ; restore l
0808   5E                     LD   e,(hl)   ; (slot + 2) = address
0809   EB                     EX   de,hl   
080A   37                     SCF      
080B   C9                     RET      
080C                             ; division subroutine.
080C                             ; bc: divisor, de: dividend, hl: remainder
080C                DIVIDE:      
080C   21 00 00               LD   hl,0   ; zero the remainder
080F   3E 10                  LD   a,16   ; loop counter
0811                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0811   CB 21                  SLA   c   
0813   CB 10                  RL   b   
0815   ED 6A                  ADC   hl,hl   
0817   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0819   38 03                  JR   c,divide2   
081B   0C                     INC   c   
081C   18 01                  JR   divide3   
081E                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
081E   19                     ADD   hl,de   
081F                DIVIDE3:      
081F   3D                     DEC   a   
0820   20 EF                  JR   nz,divide1   
0822   50 59                  LD   de,bc   ; result from bc to de
0824   C9                     RET      
0825                             ; squareroot
0825                             ; Input: HL = value
0825                             ; Result: DE = square root BC = remainder
0825                SQUAREROOT:      
0825   01 00 08               LD   bc,0800h   
0828   59                     LD   e,c   
0829   AF                     XOR   a   
082A                SQUAREROOT1:      
082A   29                     ADD   hl,hl   
082B   CB 11                  RL   c   
082D   ED 6A                  ADC   hl,hl   
082F   CB 11                  RL   c   
0831   30 02                  JR   nc,$+4   
0833   CB C5                  SET   0,l   
0835   7B                     LD   a,e   
0836   87                     ADD   a,a   
0837   5F                     LD   e,a   
0838   87                     ADD   a,a   
0839   CB 45                  BIT   0,l   
083B   20 03                  JR   nz,$+5   
083D   91                     SUB   c   
083E   30 05                  JR   nc,squareRoot4   
0840   79                     LD   a,c   
0841   93                     SUB   e   
0842   1C                     INC   e   
0843   93                     SUB   e   
0844   4F                     LD   c,a   
0845                SQUAREROOT4:      
0845   10 E3                  DJNZ   squareRoot1   
0847   CB 45                  BIT   0,l   
0849   28 01                  JR   z,squareRoot5   
084B   04                     INC   b   
084C                SQUAREROOT5:      
084C   16 00                  LD   d,0   
084E   C9                     RET      
084F                PRTDEC:      
084F   CB 7C                  BIT   7,h   
0851   28 0B                  JR   z,prtdec0   
0853   3E 2D                  LD   a,"-"   
0855   CD 85 00               CALL   putchar   
0858   AF                     XOR   a   
0859   95                     SUB   l   
085A   6F                     LD   l,a   
085B   9F                     SBC   a,a   
085C   94                     SUB   h   
085D   67                     LD   h,a   
085E                PRTDEC0:      
085E   C5                     PUSH   bc   
085F   0E 00                  LD   c,0   ; leading zeros flag = false
0861   11 F0 D8               LD   de,-10000   
0864   CD 80 08               CALL   prtdec1   
0867   11 18 FC               LD   de,-1000   
086A   CD 80 08               CALL   prtdec1   
086D   11 9C FF               LD   de,-100   
0870   CD 80 08               CALL   prtdec1   
0873   1E F6                  LD   e,-10   
0875   CD 80 08               CALL   prtdec1   
0878   0C                     INC   c   ; flag = true for at least digit
0879   1E FF                  LD   e,-1   
087B   CD 80 08               CALL   prtdec1   
087E   C1                     POP   bc   
087F   C9                     RET      
0880                PRTDEC1:      
0880   06 2F                  LD   b,"0"-1   
0882                PRTDEC2:      
0882   04                     INC   b   
0883   19                     ADD   hl,de   
0884   38 FC                  JR   c,prtdec2   
0886   ED 52                  SBC   hl,de   
0888   3E 30                  LD   a,"0"   
088A   B8                     CP   b   
088B   20 05                  JR   nz,prtdec3   
088D   AF                     XOR   a   
088E   B1                     OR   c   
088F   C8                     RET   z   
0890   18 01                  JR   prtdec4   
0892                PRTDEC3:      
0892   0C                     INC   c   
0893                PRTDEC4:      
0893   78                     LD   a,b   
0894   C3 85 00               JP   putchar   
0897                PRTHEX:      ; display hl as a 16-bit number in hex.
0897   C5                     PUSH   bc   ; preserve the IP
0898   7C                     LD   a,h   
0899   CD A2 08               CALL   prthex2   
089C   7D                     LD   a,l   
089D   CD A2 08               CALL   prthex2   
08A0   C1                     POP   bc   
08A1   C9                     RET      
08A2                PRTHEX2:      
08A2   4F                     LD   c,a   
08A3   1F                     RRA      
08A4   1F                     RRA      
08A5   1F                     RRA      
08A6   1F                     RRA      
08A7   CD AB 08               CALL   prthex3   
08AA   79                     LD   a,c   
08AB                PRTHEX3:      
08AB   E6 0F                  AND   0x0F   
08AD   C6 90                  ADD   a,0x90   
08AF   27                     DAA      
08B0   CE 40                  ADC   a,0x40   
08B2   27                     DAA      
08B3   C3 85 00               JP   putchar   
08B6                PRTSTR0:      
08B6   CD 85 00               CALL   putchar   
08B9   23                     INC   hl   
08BA                PRTSTR:      
08BA   7E                     LD   a,(hl)   
08BB   B7                     OR   a   
08BC   20 F8                  JR   nz,prtstr0   
08BE   C9                     RET      
08BF                             ; **************************************************************************
08BF                             ; calculate nesting value
08BF                             ; a is char to be tested,
08BF                             ; e is the nesting value (initially 0)
08BF                             ; e is increased by ( and [
08BF                             ; e is decreased by ) and ]
08BF                             ; e has its bit 7 toggled by `
08BF                             ; limited to 127 levels
08BF                             ; **************************************************************************
08BF                NESTING:      
08BF   FE 22                  CP   $22   ; quote char
08C1   20 0A                  JR   nz,nesting1   
08C3   CB 7B                  BIT   7,e   
08C5   28 03                  JR   z,nesting1a   
08C7   CB BB                  RES   7,e   
08C9   C9                     RET      
08CA                NESTING1A:      
08CA   CB FB                  SET   7,e   
08CC   C9                     RET      
08CD                NESTING1:      
08CD   CB 7B                  BIT   7,e   
08CF   C0                     RET   nz   
08D0   FE 7B                  CP   "{"   
08D2   28 08                  JR   z,nesting2   
08D4   FE 5B                  CP   "["   
08D6   28 04                  JR   z,nesting2   
08D8   FE 28                  CP   "("   
08DA   20 02                  JR   nz,nesting3   
08DC                NESTING2:      
08DC   1C                     INC   e   
08DD   C9                     RET      
08DE                NESTING3:      
08DE   FE 7D                  CP   "}"   
08E0   28 07                  JR   z,nesting4   
08E2   FE 5D                  CP   "]"   
08E4   28 03                  JR   z,nesting4   
08E6   FE 29                  CP   ")"   
08E8   C0                     RET   nz   
08E9                NESTING4:      
08E9   1D                     DEC   e   
08EA   C9                     RET      
08EB                PROMPT:      
08EB   CD FB 08               CALL   printStr   
08EE   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08F3   C9                     RET      
08F4                CRLF:        
08F4   CD FB 08               CALL   printStr   
08F7   0D 0A 00               .CSTR   "\r\n"   
08FA   C9                     RET      
08FB                PRINTSTR:      
08FB   E3                     EX   (sp),hl   ; swap			
08FC   CD BA 08               CALL   prtstr   
08FF   23                     INC   hl   ; inc past NUL
0900   E3                     EX   (sp),hl   ; put it back	
0901   C9                     RET      
0902                DEFINE:      
0902   E1                     POP   hl   
0903   7E                     LD   a,(hl)   
0904   23                     INC   hl   
0905   44 4D                  LD   bc,hl   
0907   5F                     LD   e,a   
0908   16 00                  LD   d,0   
090A   19                     ADD   hl,de   
090B   5E                     LD   e,(hl)   
090C   23                     INC   hl   
090D   56                     LD   d,(hl)   
090E   23                     INC   hl   
090F   E5                     PUSH   hl   ; bc = str
0910   D5                     PUSH   de   
0911   CD A9 07               CALL   hashStr   ; hl = hash
0914   D1                     POP   de   
0915   44 4D                  LD   bc,hl   
0917   C3 C2 07               JP   defineEntry   
091A                INIT:        
091A   DD 21 E3 0A            LD   ix,next   
091E   FD 21 80 18            LD   iy,STACK   
0922   21 80 01               LD   hl,isysVars   
0925   11 98 18               LD   de,sysVars   
0928   01 10 00               LD   bc,8 * 2   
092B   ED B0                  LDIR      
092D   3E FF                  LD   a,UNUSED   
092F   06 00                  LD   b,0   
0931   21 00 1B               LD   hl,hashSlots   
0934                INIT1:       
0934   77                     LD   (hl),a   
0935   23                     INC   hl   
0936   10 FC                  DJNZ   init1   
0938   CD 02 09               CALL   define   
093B   04 61 62 73 00         .PSTR   "abs",0   
0940   49 07                  DW   abs1   
0942   CD 02 09               CALL   define   
0945   05 61 64 64 72 00      .PSTR   "addr",0   
094B   C9 06                  DW   addr   
094D   CD 02 09               CALL   define   
0950   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0957   AF 05                  DW   bytes   
0959   CD 02 09               CALL   define   
095C   05 63 61 6C 6C 00      .PSTR   "call",0   
0962   05 0B                  DW   call   
0964                             ; call define
0964                             ; .pstr "closure",0
0964                             ; dw closure
0964   CD 02 09               CALL   define   
0967   04 64 65 66 00         .PSTR   "def",0   
096C   93 06                  DW   def   
096E   CD 02 09               CALL   define   
0971   05 65 78 65 63 00      .PSTR   "exec",0   
0977   01 0B                  DW   exec   
0979   CD 02 09               CALL   define   
097C   06 66 61 6C 73 65 00   .PSTR   "false",0   
0983   00 00                  DW   false   
0985   CD 02 09               CALL   define   
0988   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0990   A7 07                  DW   filter   
0992   CD 02 09               CALL   define   
0995   05 66 72 61 63 00      .PSTR   "frac",0   
099B   36 07                  DW   frac   
099D   CD 02 09               CALL   define   
09A0   05 66 75 6E 63 00      .PSTR   "func",0   
09A6   37 06                  DW   func   
09A8                             ; call define
09A8                             ; .pstr "get",0
09A8                             ; dw get
09A8   CD 02 09               CALL   define   
09AB   05 68 61 73 68 00      .PSTR   "hash",0   
09B1   2C 06                  DW   hash   
09B3   CD 02 09               CALL   define   
09B6   06 69 6E 70 75 74 00   .PSTR   "input",0   
09BD   83 07                  DW   input   
09BF   CD 02 09               CALL   define   
09C2   03 69 66 00            .PSTR   "if",0   
09C6   9A 05                  DW   if   
09C8   CD 02 09               CALL   define   
09CB   05 69 66 74 65 00      .PSTR   "ifte",0   
09D1   9C 05                  DW   ifte   
09D3   CD 02 09               CALL   define   
09D6   04 6B 65 79 00         .PSTR   "key",0   
09DB   97 07                  DW   key   
09DD   CD 02 09               CALL   define   
09E0   04 6C 65 74 00         .PSTR   "let",0   
09E5   A2 06                  DW   let   
09E7   CD 02 09               CALL   define   
09EA   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09F0   A8 05                  DW   loop   
09F2   CD 02 09               CALL   define   
09F5   04 6D 61 70 00         .PSTR   "map",0   
09FA   A7 07                  DW   map   
09FC   CD 02 09               CALL   define   
09FF   04 6D 6F 64 00         .PSTR   "mod",0   
0A04   56 07                  DW   mod   
0A06   CD 02 09               CALL   define   
0A09   04 6E 65 67 00         .PSTR   "neg",0   
0A0E   A0 07                  DW   neg   
0A10   CD 02 09               CALL   define   
0A13   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A1B   8E 07                  DW   output   
0A1D   CD 02 09               CALL   define   
0A20   05 73 63 61 6E 00      .PSTR   "scan",0   
0A26   01 00                  DW   scan   
0A28   CD 02 09               CALL   define   
0A2B   04 73 65 74 00         .PSTR   "set",0   
0A30   8A 05                  DW   set   
0A32   CD 02 09               CALL   define   
0A35   04 73 68 6C 00         .PSTR   "shl",0   
0A3A   D2 03                  DW   shl   
0A3C   CD 02 09               CALL   define   
0A3F   04 73 68 72 00         .PSTR   "shr",0   
0A44   E2 03                  DW   shr   
0A46   CD 02 09               CALL   define   
0A49   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A4F   3C 07                  DW   sqrt1   
0A51   CD 02 09               CALL   define   
0A54   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A5C   9E 05                  DW   switch   
0A5E   CD 02 09               CALL   define   
0A61   05 74 72 75 65 00      .PSTR   "true",0   
0A67   FF FF                  DW   true   
0A69   CD 02 09               CALL   define   
0A6C   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A73   AA 05                  DW   words   
0A75   C9                     RET      
0A76                START:       
0A76   31 80 18               LD   sp,STACK   ; start of Siena
0A79   CD 1A 09               CALL   init   ; setups
0A7C   CD FB 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A7F   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A8C                INTERPRET:      
0A8C   CD EB 08               CALL   prompt   
0A8F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A92   ED 43 9C 18            LD   (vTIBPtr),bc   
0A96                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A96   1E 00                  LD   e,0   ; initilize nesting value
0A98   C5                     PUSH   bc   ; save offset into TIB,
0A99                             ; bc is also the count of chars in TIB
0A99   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A9C   18 06                  JR   interpret4   
0A9E                INTERPRET3:      
0A9E   7E                     LD   a,(hl)   ; a = char in TIB
0A9F   23                     INC   hl   ; inc pointer into TIB
0AA0   0B                     DEC   bc   ; dec count of chars in TIB
0AA1   CD BF 08               CALL   nesting   ; update nesting value
0AA4                INTERPRET4:      
0AA4   79                     LD   a,c   ; is count zero?
0AA5   B0                     OR   b   
0AA6   20 F6                  JR   nz,interpret3   ; if not loop
0AA8   C1                     POP   bc   ; restore offset into TIB
0AA9                WAITCHAR:      
0AA9   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0AAC   FE 20                  CP   $20   ; compare to space
0AAE   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0AB0   FE 00                  CP   $0   ; is it end of string? NUL end of string
0AB2                             ; ???? NEEDED?
0AB2   28 27                  JR   z,waitchar4   
0AB4   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0AB6   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0AB8                MACRO:       
0AB8                             ;  ld (vTIBPtr),bc
0AB8                             ;  ld hl,ctrlCodes
0AB8                             ;  add a,l			            ; look up key of macros
0AB8                             ;  ld l,a
0AB8                             ;  ld e,(hl)
0AB8                             ;  ld a,e
0AB8                             ;  or a
0AB8                             ;  jr z,macro1
0AB8                             ;  ld d,msb(macros)
0AB8                             ;  push de
0AB8                             ;  call call		            ; Siena exec_ operation and jump to it
0AB8                             ;  db DC1,0
0AB8                             ; macro1:
0AB8                             ;  ld bc,(vTIBPtr)
0AB8   18 DC                  JR   interpret2   
0ABA                WAITCHAR1:      
0ABA   21 00 19               LD   hl,TIB   
0ABD   09                     ADD   hl,bc   
0ABE   77                     LD   (hl),a   ; store the character in textbuf
0ABF   03                     INC   bc   
0AC0   CD 85 00               CALL   putchar   ; echo character to screen
0AC3   CD BF 08               CALL   nesting   
0AC6   18 E1                  JR   waitchar   ; wait for next character
0AC8                WAITCHAR3:      
0AC8   21 00 19               LD   hl,TIB   
0ACB   09                     ADD   hl,bc   
0ACC   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0ACE   23                     INC   hl   
0ACF   36 0A                  LD   (hl),"\n"   
0AD1   23                     INC   hl   
0AD2   03                     INC   bc   
0AD3   03                     INC   bc   
0AD4   CD F4 08               CALL   crlf   ; echo character to screen
0AD7   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0AD8   B7                     OR   a   
0AD9   20 CE                  JR   nz,waitchar   
0ADB                WAITCHAR4:      
0ADB   ED 43 9C 18            LD   (vTIBPtr),bc   
0ADF   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AE2                             ; we pressed enter
0AE2   0B                     DEC   bc   
0AE3                NEXT:        
0AE3   03                     INC   bc   ; Increment the IP
0AE4   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AE5   FE 20                  CP   " "   ; whitespace?
0AE7   28 FA                  JR   z,next   ; space? ignore
0AE9   38 07                  JR   c,next1   
0AEB   6F                     LD   l,a   ; index into table
0AEC   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AEE   6E                     LD   l,(hl)   ; get low jump address
0AEF   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AF1   E9                     JP   (hl)   ; Jump to routine
0AF2                NEXT1:       
0AF2   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0AF4   28 07                  JR   z,escape   
0AF6   FE 00                  CP   NUL   ; end of input string?
0AF8   28 04                  JR   z,exit   
0AFA   C3 8C 0A               JP   interpret   ; no, other whitespace, macros?
0AFD                ESCAPE:      
0AFD   03                     INC   bc   
0AFE                EXIT:        
0AFE   60 69                  LD   hl,bc   
0B00   E9                     JP   (hl)   
0B01                             ; execute a block of code
0B01                             ; uses parent scope
0B01                EXEC:        ; execute code at pointer
0B01   C1                     POP   bc   ; hl = pointer to code
0B02   0B                     DEC   bc   ; dec to prepare for next routine
0B03   DD E9                  JP   (ix)   
0B05                             ; call with args
0B05                             ; creates a scope
0B05                CALL:        
0B05                DOCALL:      ; execute code at pointer
0B05   E1                     POP   hl   ; hl = pointer to code
0B06   7C                     LD   a,h   ; skip if destination address is NUL
0B07   B5                     OR   l   
0B08   28 14                  JR   z,doCall2   
0B0A   C5                     PUSH   bc   ; push IP
0B0B   5E                     LD   e,(hl)   ; push static array
0B0C   23                     INC   hl   
0B0D   56                     LD   d,(hl)   
0B0E   23                     INC   hl   
0B0F   D5                     PUSH   de   
0B10   5E                     LD   e,(hl)   ; push arglist
0B11   23                     INC   hl   
0B12   56                     LD   d,(hl)   
0B13   D5                     PUSH   de   ; push arglist, hl = block-1
0B14   FD E5                  PUSH   iy   ; push BP
0B16   FD 21 00 00            LD   iy,0   ; BP = SP
0B1A   FD 39                  ADD   iy,sp   
0B1C   44 4D                  LD   bc,hl   ; IP = block-1, ready for NEXT
0B1E                DOCALL2:      
0B1E   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x 20 let x 100 set x", 100
4000                             ; test ":x 20 let x 100 set get", 100
4000                             ; test "#6000 0? 100 set get", 100
4000                             ; test "[10 20 30] 1?", 20
4000                             ; test ":x [10 20 30] let x 1? 50 set x 1?", 50
4000                             ; test "bytes [1 2 3] 1?", 2
4000                             ; test "bytes :x [1 2 3] let x 1?", 2
4000                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1?", 66
4000   31 80 18               LD   SP,STACK   
4003   CD 1A 09               CALL   init   
4006   CD 01 0B               CALL   exec   
4009   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1?"   
4020                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1?",66
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 42 00               LD   DE,66   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   28 61                  JR   Z,expectM_0_2341S43   
402C   CD FB 08               CALL   printStr   
402F   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1?"   
404C   CD FB 08               CALL   printStr   
404F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405E   21 42 00               LD   HL,66   
4061   CD 4F 08               CALL   prtdec   
4064   CD FB 08               CALL   printStr   
4067   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4074   E1                     POP   hl   
4075   E5                     PUSH   hl   
4076   CD 4F 08               CALL   prtdec   
4079   E1                     POP   hl   
407A   CD FB 08               CALL   printStr   
407D   20 28 23 00            .CSTR   " (#"   
4081   CD 97 08               CALL   prthex   
4084   CD FB 08               CALL   printStr   
4087   29 0D 0A 00            .CSTR   ")\r\n"   
408B   76                     HALT      
408C   00                     .CSTR      
408D                EXPECTM_0_2341S43:      
408D   E1                     POP   HL   
408E                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1? `Z` set 1?", 90
408E   31 80 18               LD   SP,STACK   
4091   CD 1A 09               CALL   init   
4094   CD 01 0B               CALL   exec   
4097   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 20 60 5A 60 20 73 65 74 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1? `Z` set 1?"   
40B9                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1? `Z` set 1?",90
40B9   E1                     POP   HL   
40BA   E5                     PUSH   HL   
40BB   11 5A 00               LD   DE,90   
40BE   B7                     OR   A   
40BF   ED 52                  SBC   HL,DE   
40C1   7D                     LD   A,L   
40C2   B4                     OR   H   
40C3   28 6C                  JR   Z,expectM_0_2342S43   
40C5   CD FB 08               CALL   printStr   
40C8   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 20 60 5A 60 20 73 65 74 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1? `Z` set 1?"   
40F0   CD FB 08               CALL   printStr   
40F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4102   21 5A 00               LD   HL,90   
4105   CD 4F 08               CALL   prtdec   
4108   CD FB 08               CALL   printStr   
410B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4118   E1                     POP   hl   
4119   E5                     PUSH   hl   
411A   CD 4F 08               CALL   prtdec   
411D   E1                     POP   hl   
411E   CD FB 08               CALL   printStr   
4121   20 28 23 00            .CSTR   " (#"   
4125   CD 97 08               CALL   prthex   
4128   CD FB 08               CALL   printStr   
412B   29 0D 0A 00            .CSTR   ")\r\n"   
412F   76                     HALT      
4130   00                     .CSTR      
4131                EXPECTM_0_2342S43:      
4131   E1                     POP   HL   
4132                             ; test ":x '' {1} def x", 1
4132                             ; test "1", 1
4132                             ; test "2", 2
4132                             ; test "1", 1
4132                             ; test "0", 0
4132                             ; test "10", 10
4132                             ; test "123", 123
4132                             ; test "-1",-1
4132                             ; test "``", 0
4132                             ; test "`a`", $61
4132                             ; test "`\\``", $60
4132                             ; test "#10", $10
4132                             ; test "#FF", $FF
4132                             ; test "-1 2 +",1
4132                             ; test "-1 1 +",0
4132                             ; test "1 2 +", 3
4132                             ; test "4 1 2 +", 3
4132                             ; test "1 2 +", 3
4132                             ; test "123 456 +", 123+456
4132                             ; test "64 128 +", 64+128
4132                             ; test "-1 -1 -",0
4132                             ; test "5 3 -", 2
4132                             ; test "3 5 &", 1
4132                             ; test "3 5 |", 7
4132                             ; test "2 3 *", 6
4132                             ; test "1 2 3 + *", 5
4132                             ; test "7 3 /", 2
4132                             ; test "7 3 / frac", 1
4132                             ; test "10 sqrt", 3
4132                             ; test "10 sqrt frac", 1
4132                             ; test "2 3 =", FALSE
4132                             ; test "3 3 =", TRUE
4132                             ; test "1 2 <", TRUE
4132                             ; test "2 1 <", FALSE
4132                             ; test "2 3 <", TRUE
4132                             ; test "3 3 <", FALSE
4132                             ; test "1 2 >", FALSE
4132                             ; test "2 1 >", TRUE
4132                             ; test "3 3 >", FALSE
4132                             ; test "4 3 >", TRUE
4132                             ; test "2 2 <=", TRUE
4132                             ; test "2 2 >=", TRUE
4132                             ; 
4132                             ; 
4132                             ; test ":x 1000 let x 10 set x", 10
4132                             ; test ":x [100] { @1 } closure x", 100
4132                             ; test ":x [100 200] { @2 } closure x", 200
4132                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4132                             ; test ":x 'a' {$a} def 2 x", 2
4132                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4132                             ; test ":x '' { 3 2 } def x + ", 5
4132                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4132                             ; test "0 [{1}] switch", 1
4132                             ; test "1 [{1} {2} {3}] switch", 2
4132                             ; test "9 [{1} {5}] switch", 5
4132                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4132                             ; test "bytes 'ABC' get", $41
4132                             ; test "bytes [1 2 3] get", 1
4132                             ; test ":xyz 123 const ; xyz", 123
4132                             ; test ":x 1 const ; x", 1
4132                             ; test ":x 'A' const x get", $41
4132                             ; test ":x [1] const x get", 1
4132                             ; test ":x [1 2 3] const x 2?", 3
4132                             ; test "2 (1 2 +) *", 6
4132                             ; test ":xyz 123 const ; xyz", 123
4132                             ; test ":xyz 123 let ; xyz get", 123
4132                             ; test "1 2 {$1 $2 +} call", 3
4132                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4132                             ; test ":xyz {1} def :xyz addr call", 1
4132                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4132                             ; test ":xyz {10} def :xyz addr exec", 10
4132                             ; test ":xyz {10} def :xyz addr call", 10
4132                             ; test "'hello' hash", $7f54
4132                             ; test ":hello", $7f54
4132                             ; test "{{{1} exec} exec} exec", 1
4132                             ; test "5 {{{$1} exec} exec} call", 5
4132                             ; test "5 {$1} call", 5
4132                             ; test "5 {{$1} exec} call", 5
4132                             ; test "2 1 {{$1} call} call", 2
4132                             ; test "2 1 {$2} call", 1
4132                             ; test "2 1 {$1} call", 2
4132                             ; test "2 1 {$2} call", 1
4132                             ; test "2 4 {$2} call", 4
4132                             ; test "{{1} call} call", 1
4132                             ; test "5 {-1 {$1} if} call", 5
4132                             ; test "0 {} loop", 0
4132                             ; test "1 {1-} loop", $1a00
4132                             ; test ":h {1} def :h addr call", 1
4132                             ; ; call enter
4132                             ; ;     .cstr "1 3",$22,"+"
4132                             ; ; expect "1 3 DUP +", 6
4132   CD FB 08               CALL   printStr   
4135   44 6F 6E 65 21 00      .CSTR   "Done!"   
413B   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07A7 DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1867 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1286 IN Siena.asm
                    > USED AT LINE 1800 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1831 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1869 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 229 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 232 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 235 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 243 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
DOT2:               032A DEFINED AT LINE 248 IN Siena.asm
                    > USED AT LINE 245 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 257 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 263 IN Siena.asm
BLOCK_:             0342 DEFINED AT LINE 266 IN Siena.asm
BLOCKEND_:          0345 DEFINED AT LINE 268 IN Siena.asm
CHAR_:              0348 DEFINED AT LINE 270 IN Siena.asm
ARRAY_:             034B DEFINED AT LINE 272 IN Siena.asm
ARRAYEND_:          034E DEFINED AT LINE 274 IN Siena.asm
IDENT_:             0351 DEFINED AT LINE 276 IN Siena.asm
SYMBOL_:            0354 DEFINED AT LINE 278 IN Siena.asm
AND_:               0357 DEFINED AT LINE 280 IN Siena.asm
AND1:               035E DEFINED AT LINE 288 IN Siena.asm
                    > USED AT LINE 301 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
OR_:                0362 DEFINED AT LINE 293 IN Siena.asm
XOR_:               036B DEFINED AT LINE 303 IN Siena.asm
XOR1:               036C DEFINED AT LINE 305 IN Siena.asm
                    > USED AT LINE 316 IN Siena.asm
INV_:               0374 DEFINED AT LINE 314 IN Siena.asm
ADD_:               0379 DEFINED AT LINE 318 IN Siena.asm
HDOT_:              037F DEFINED AT LINE 325 IN Siena.asm
MUL_:               0386 DEFINED AT LINE 330 IN Siena.asm
SUB_:               0389 DEFINED AT LINE 333 IN Siena.asm
SUB1:               0395 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
SUB2:               0397 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
NOT_:               039D DEFINED AT LINE 350 IN Siena.asm
EQ_:                03A2 DEFINED AT LINE 354 IN Siena.asm
EQ1:                03A3 DEFINED AT LINE 356 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
GT_:                03A7 DEFINED AT LINE 360 IN Siena.asm
LT_:                03AB DEFINED AT LINE 365 IN Siena.asm
LT1:                03AD DEFINED AT LINE 368 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
DIV_:               03B8 DEFINED AT LINE 376 IN Siena.asm
COMMENT_:           03C7 DEFINED AT LINE 387 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
NOP_:               03D0 DEFINED AT LINE 395 IN Siena.asm
SHL:                03D2 DEFINED AT LINE 405 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
SHL1:               03DA DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
SHL2:               03DB DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 411 IN Siena.asm
SHR:                03E2 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
SHR1:               03EA DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
SHR2:               03EE DEFINED AT LINE 432 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
MUL:                03F5 DEFINED AT LINE 438 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
MUL2:               03FF DEFINED AT LINE 447 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
NUM:                0411 DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               041A DEFINED AT LINE 467 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
NUM1:               041B DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
NUM2:               0433 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
                    > USED AT LINE 474 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
NUM3:               043E DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
HEXNUM:             0441 DEFINED AT LINE 499 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            0444 DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
HEXNUM2:            044C DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
STRING:             045E DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0467 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
STRING2:            046A DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
CHAR:               0482 DEFINED AT LINE 554 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
CHAR1:              0485 DEFINED AT LINE 556 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
CHAR2:              0491 DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
CHAR3:              0494 DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
PAREN:              0497 DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
PARENEND:           0499 DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
BLOCK:              049B DEFINED AT LINE 592 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
BLOCK1:             049F DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 600 IN Siena.asm
                    > USED AT LINE 619 IN Siena.asm
                    > USED AT LINE 622 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
BLOCK2:             04C5 DEFINED AT LINE 620 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
BLOCK3:             04C8 DEFINED AT LINE 623 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
BLOCK4:             04D0 DEFINED AT LINE 629 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
BLOCK5:             04D3 DEFINED AT LINE 632 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
BLOCKEND:           04D6 DEFINED AT LINE 636 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
ARG:                0516 DEFINED AT LINE 681 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
ARG0:               0528 DEFINED AT LINE 695 IN Siena.asm
                    > USED AT LINE 700 IN Siena.asm
ARG1:               0536 DEFINED AT LINE 706 IN Siena.asm
                    > USED AT LINE 697 IN Siena.asm
PROP:               054E DEFINED AT LINE 727 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              0568 DEFINED AT LINE 746 IN Siena.asm
DOLET2:             056C DEFINED AT LINE 749 IN Siena.asm
DOLET3:             056F DEFINED AT LINE 753 IN Siena.asm
INDEX:              0572 DEFINED AT LINE 757 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
INDEX1:             057B DEFINED AT LINE 764 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
INDEX2:             0587 DEFINED AT LINE 773 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
SET:                058A DEFINED AT LINE 778 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
SET1:               0598 DEFINED AT LINE 788 IN Siena.asm
                    > USED AT LINE 785 IN Siena.asm
IF:                 059A DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
IFTE:               059C DEFINED AT LINE 800 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
SWITCH:             059E DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
LOOP:               05A8 DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
WORDS:              05AA DEFINED AT LINE 893 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
BYTES:              05AF DEFINED AT LINE 896 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
BYTES1:             05B2 DEFINED AT LINE 898 IN Siena.asm
                    > USED AT LINE 895 IN Siena.asm
ARRAY:              05B7 DEFINED AT LINE 902 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
ARRAYEND:           05CD DEFINED AT LINE 914 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
ARRAYEND1:          05EE DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
ARRAYEND2:          05FE DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
ARRAYEND3:          0611 DEFINED AT LINE 963 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
HASH:               062C DEFINED AT LINE 985 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
FUNC:               0637 DEFINED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
FUNC1:              0656 DEFINED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
FUNC2:              067A DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
FUNC3:              067D DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
FUNC4:              0685 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
FUNC4A:             0688 DEFINED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
DEF:                0693 DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
DEF1:               0699 DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
LET:                06A2 DEFINED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
LET1:               06BE DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
LET2:               06C6 DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
ADDR:               06C9 DEFINED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
ADDR1:              06D5 DEFINED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
SYMBOL:             06E0 DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
SYMBOL0:            06E8 DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
SYMBOL1:            06EA DEFINED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
SYMBOL2:            06FA DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
IDENT:              0708 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
IDENT0:             070F DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
IDENT1:             0711 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
IDENT2:             0721 DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
IDENT3:             0735 DEFINED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1185 IN Siena.asm
FRAC:               0736 DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
SQRT1:              073C DEFINED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
ABS1:               0749 DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
MOD:                0756 DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
EQUALS:             0762 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LESSTHANEQ:         076A DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 372 IN Siena.asm
LESSTHAN:           076F DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
LESSTHAN1:          0774 DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
TRUE1:              0777 DEFINED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
FALSE1:             077D DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1250 IN Siena.asm
INPUT:              0783 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
OUTPUT:             078E DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
KEY:                0797 DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
NEG:                07A0 DEFINED AT LINE 1292 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
FILTER:             07A7 DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
MAP:                07A7 DEFINED AT LINE 1298 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
HASHSTR:            07A9 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
HASHSTR1:           07AC DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
HASHSTR2:           07B1 DEFINED AT LINE 1316 IN Siena.asm
DEFINEENTRY:        07C2 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
DEFINEENTRY0:       07C7 DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
DEFINEENTRY1:       07D6 DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
DEFINEENTRY2:       07DC DEFINED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
DEFINEENTRY3:       07DE DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
LOOKUPENTRY:        07E8 DEFINED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
LOOKUPENTRY0:       07ED DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
LOOKUPENTRY1:       07FC DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
LOOKUPENTRY2:       0802 DEFINED AT LINE 1396 IN Siena.asm
LOOKUPENTRY3:       0804 DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
DIVIDE:             080C DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
DIVIDE1:            0811 DEFINED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
DIVIDE2:            081E DEFINED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
DIVIDE3:            081F DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
SQUAREROOT:         0825 DEFINED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
SQUAREROOT1:        082A DEFINED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
SQUAREROOT4:        0845 DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
SQUAREROOT5:        084C DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1461 IN Siena.asm
PRTDEC:             084F DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            085E DEFINED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
PRTDEC1:            0880 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
PRTDEC2:            0882 DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
PRTDEC3:            0892 DEFINED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
PRTDEC4:            0893 DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
PRTHEX:             0897 DEFINED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08A2 DEFINED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
PRTHEX3:            08AB DEFINED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
PRTSTR0:            08B6 DEFINED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
PRTSTR:             08BA DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
NESTING:            08BF DEFINED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1791 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
NESTING1A:          08CA DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
NESTING1:           08CD DEFINED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
NESTING2:           08DC DEFINED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
NESTING3:           08DE DEFINED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
NESTING4:           08E9 DEFINED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
PROMPT:             08EB DEFINED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
CRLF:               08F4 DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1844 IN Siena.asm
PRINTSTR:           08FB DEFINED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 146
DEFINE:             0902 DEFINED AT LINE 1607 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
INIT:               091A DEFINED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              0934 DEFINED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
START:              0A76 DEFINED AT LINE 1768 IN Siena.asm
INTERPRET:          0A8C DEFINED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1871 IN Siena.asm
INTERPRET2:         0A96 DEFINED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
INTERPRET3:         0A9E DEFINED AT LINE 1787 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
INTERPRET4:         0AA4 DEFINED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
WAITCHAR:           0AA9 DEFINED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1833 IN Siena.asm
                    > USED AT LINE 1847 IN Siena.asm
MACRO:              0AB8 DEFINED AT LINE 1809 IN Siena.asm
WAITCHAR1:          0ABA DEFINED AT LINE 1826 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
WAITCHAR3:          0AC8 DEFINED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 1807 IN Siena.asm
WAITCHAR4:          0ADB DEFINED AT LINE 1849 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
NEXT:               0AE3 DEFINED AT LINE 1855 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
                    > USED AT LINE 1859 IN Siena.asm
NEXT1:              0AF2 DEFINED AT LINE 1866 IN Siena.asm
                    > USED AT LINE 1860 IN Siena.asm
ESCAPE:             0AFD DEFINED AT LINE 1873 IN Siena.asm
                    > USED AT LINE 1868 IN Siena.asm
EXIT:               0AFE DEFINED AT LINE 1875 IN Siena.asm
                    > USED AT LINE 1870 IN Siena.asm
EXEC:               0B01 DEFINED AT LINE 1881 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               0B05 DEFINED AT LINE 1888 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
DOCALL:             0B05 DEFINED AT LINE 1889 IN Siena.asm
DOCALL2:            0B1E DEFINED AT LINE 1911 IN Siena.asm
                    > USED AT LINE 1893 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1630 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 382 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1199 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 760 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
                    > USED AT LINE 899 IN Siena.asm
                    > USED AT LINE 933 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1778 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 927 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1827 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1180 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1636 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2341S43:  408D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2342S43:  4131 DEFINED AT LINE 34
                    > USED AT LINE 10
