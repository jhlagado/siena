0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 6F 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      
0220   B8                     DB   lsb(nop_)   ;    SP
0221   6E                     DB   lsb(inv_)   ;    !
0222   B8                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   B8                     DB   lsb(nop_)   ;    %
0226   51                     DB   lsb(and_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   3C                     DB   lsb(block_)   ;    (
0229   3F                     DB   lsb(blockend_)   ;    )
022A   80                     DB   lsb(mul_)   ;    *
022B   73                     DB   lsb(add_)   ;    +
022C   B8                     DB   lsb(nop_)   ;    ,
022D   83                     DB   lsb(sub_)   ;    -
022E   12                     DB   lsb(dot_)   ;    .
022F   A1                     DB   lsb(slash_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   4E                     DB   lsb(symbol_)   ;    :
023B   B8                     DB   lsb(nop_)   ;    ;
023C   94                     DB   lsb(lt_)   ;    <
023D   8B                     DB   lsb(eq_)   ;    =
023E   90                     DB   lsb(gt_)   ;    >
023F   B8                     DB   lsb(nop_)   ;    ?
0240   B8                     DB   lsb(nop_)   ;    @
0241   4B                     DB   lsb(ident_)   ;    A
0242   4B                     DB   lsb(ident_)   ;    B
0243   4B                     DB   lsb(ident_)   ;    C
0244   4B                     DB   lsb(ident_)   ;    D
0245   4B                     DB   lsb(ident_)   ;    E
0246   4B                     DB   lsb(ident_)   ;    F
0247   4B                     DB   lsb(ident_)   ;    G
0248   4B                     DB   lsb(ident_)   ;    h
0249   4B                     DB   lsb(ident_)   ;    I
024A   4B                     DB   lsb(ident_)   ;    J
024B   4B                     DB   lsb(ident_)   ;    K
024C   4B                     DB   lsb(ident_)   ;    L
024D   4B                     DB   lsb(ident_)   ;    M
024E   4B                     DB   lsb(ident_)   ;    N
024F   4B                     DB   lsb(ident_)   ;    O
0250   4B                     DB   lsb(ident_)   ;    p
0251   4B                     DB   lsb(ident_)   ;    Q
0252   4B                     DB   lsb(ident_)   ;    R
0253   4B                     DB   lsb(ident_)   ;    S
0254   4B                     DB   lsb(ident_)   ;    T
0255   4B                     DB   lsb(ident_)   ;    U
0256   4B                     DB   lsb(ident_)   ;    V
0257   4B                     DB   lsb(ident_)   ;    W
0258   4B                     DB   lsb(ident_)   ;    X
0259   4B                     DB   lsb(ident_)   ;    Y
025A   4B                     DB   lsb(ident_)   ;    Z
025B   45                     DB   lsb(array_)   ;    [
025C   B8                     DB   lsb(nop_)   ;    \
025D   48                     DB   lsb(arrayEnd_)   ;    ]
025E   65                     DB   lsb(xor_)   ;    ^
025F   4B                     DB   lsb(ident_)   ;    _
0260   42                     DB   lsb(char_)   ;    `    	
0261   4B                     DB   lsb(ident_)   ;    a
0262   4B                     DB   lsb(ident_)   ;    b
0263   4B                     DB   lsb(ident_)   ;    c
0264   4B                     DB   lsb(ident_)   ;    d
0265   4B                     DB   lsb(ident_)   ;    e
0266   4B                     DB   lsb(ident_)   ;    f
0267   4B                     DB   lsb(ident_)   ;    g
0268   4B                     DB   lsb(ident_)   ;    h
0269   4B                     DB   lsb(ident_)   ;    i
026A   4B                     DB   lsb(ident_)   ;    j
026B   4B                     DB   lsb(ident_)   ;    k
026C   4B                     DB   lsb(ident_)   ;    l
026D   4B                     DB   lsb(ident_)   ;    m
026E   4B                     DB   lsb(ident_)   ;    n
026F   4B                     DB   lsb(ident_)   ;    o
0270   4B                     DB   lsb(ident_)   ;    p
0271   4B                     DB   lsb(ident_)   ;    q
0272   4B                     DB   lsb(ident_)   ;    r
0273   4B                     DB   lsb(ident_)   ;    s
0274   4B                     DB   lsb(ident_)   ;    t
0275   4B                     DB   lsb(ident_)   ;    u
0276   4B                     DB   lsb(ident_)   ;    v
0277   4B                     DB   lsb(ident_)   ;    w
0278   4B                     DB   lsb(ident_)   ;    x
0279   4B                     DB   lsb(ident_)   ;    y
027A   4B                     DB   lsb(ident_)   ;    z
027B   0C                     DB   lsb(lambda_)   ;    {
027C   5C                     DB   lsb(or_)   ;    |
027D   0F                     DB   lsb(lambdaEnd_)   ;    }
027E   B8                     DB   lsb(nop_)   ;    ~
027F   B8                     DB   lsb(nop_)   ;    DEL	
0280                START:       
0280   31 00 1A               LD   sp,DSTACK   ; start of Siena
0283   CD 6F 09               CALL   init   ; setups
0286   CD 50 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0289   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0296                INTERPRET:      
0296   CD 40 09               CALL   prompt   
0299   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
029C   ED 43 82 1B            LD   (vTIBPtr),bc   
02A0                INTERPRET2:      ; calc nesting (a macro might have changed it)
02A0   1E 00                  LD   e,0   ; initilize nesting value
02A2   C5                     PUSH   bc   ; save offset into TIB,
02A3                             ; bc is also the count of chars in TIB
02A3   21 00 18               LD   hl,TIB   ; hl is start of TIB
02A6   18 06                  JR   interpret4   
02A8                INTERPRET3:      
02A8   7E                     LD   a,(hl)   ; a = char in TIB
02A9   23                     INC   hl   ; inc pointer into TIB
02AA   0B                     DEC   bc   ; dec count of chars in TIB
02AB   CD 14 09               CALL   nesting   ; update nesting value
02AE                INTERPRET4:      
02AE   79                     LD   a,c   ; is count zero?
02AF   B0                     OR   b   
02B0   20 F6                  JR   nz,interpret3   ; if not loop
02B2   C1                     POP   bc   ; restore offset into TIB
02B3                WAITCHAR:      
02B3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02B6   FE 20                  CP   $20   ; compare to space
02B8   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02BA   FE 00                  CP   $0   ; is it end of string? null end of string
02BC   28 2A                  JR   z,waitchar4   
02BE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02C0   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02C2                MACRO:       
02C2                             ;     ld (vTIBPtr),bc
02C2                             ;     ld hl,ctrlCodes
02C2                             ;     add a,l			            ; look up key of macros
02C2                             ;     ld l,a
02C2                             ;     ld e,(hl)
02C2                             ;     ld a,e
02C2                             ;     or a
02C2                             ;     jr z,macro1
02C2                             ;     ld d,msb(macros)
02C2                             ;     push de
02C2                             ;     call exec		            ; Siena exec_ operation and jump to it
02C2                             ;     .cstr "ca"
02C2                             ; macro1:
02C2                             ;     ld bc,(vTIBPtr)
02C2   18 DC                  JR   interpret2   
02C4                WAITCHAR1:      
02C4   21 00 18               LD   hl,TIB   
02C7   09                     ADD   hl,bc   
02C8   77                     LD   (hl),a   ; store the character in textbuf
02C9   03                     INC   bc   
02CA   CD 85 00               CALL   putchar   ; echo character to screen
02CD   CD 14 09               CALL   nesting   
02D0   18 E1                  JR   waitchar   ; wait for next character
02D2                WAITCHAR3:      
02D2   21 00 18               LD   hl,TIB   
02D5   09                     ADD   hl,bc   
02D6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02D8   23                     INC   hl   
02D9   36 0A                  LD   (hl),"\n"   
02DB   23                     INC   hl   
02DC   03                     INC   bc   
02DD   03                     INC   bc   
02DE   CD 49 09               CALL   crlf   ; echo character to screen
02E1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02E2   B7                     OR   a   
02E3   20 CE                  JR   nz,waitchar   
02E5   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02E7   03                     INC   bc   
02E8                WAITCHAR4:      
02E8   ED 43 82 1B            LD   (vTIBPtr),bc   
02EC   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02EF   0B                     DEC   bc   
02F0                NEXT:        
02F0   03                     INC   bc   ; Increment the IP
02F1   0A                     LD   a,(bc)   ; Get the next character and dispatch
02F2   FE 21                  CP   " " + 1   ; whitespace?
02F4   38 07                  JR   c,next1   
02F6   6F                     LD   l,a   ; index into table
02F7   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
02F9   6E                     LD   l,(hl)   ; get low jump address
02FA   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
02FC   E9                     JP   (hl)   ; Jump to routine
02FD                NEXT1:       
02FD   FE 00                  CP   NULL   ; is it end of text?
02FF   28 0F                  JR   z,exit   
0301   FE 03                  CP   ENDTEXT   ; is it end of text?
0303   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0305                ETX:         
0305   21 00 E6               LD   hl,-DSTACK   
0308   39                     ADD   hl,sp   
0309   30 03                  JR   nc,etx1   
030B   31 00 1A               LD   sp,DSTACK   
030E                ETX1:        
030E   18 86                  JR   interpret   
0310                EXIT:        
0310   50 59                  LD   de,bc   ; address of code after exit opcode
0312   13                     INC   de   
0313   D9                     EXX      
0314   C1                     POP   bc   ; bc = last result
0315   FD 54                  LD   d,iyh   ; de = BP
0317   FD 5D                  LD   e,iyl   
0319   EB                     EX   de,hl   ; hl = BP
031A   F9                     LD   sp,hl   ; sp = BP
031B   D9                     EXX      
031C   E1                     POP   hl   ; hl = old BP
031D   C1                     POP   bc   ; pop SCP (discard)
031E   C1                     POP   bc   ; bc = IP
031F   F9                     LD   sp,hl   ; sp = old BP
0320   D9                     EXX      
0321   C5                     PUSH   bc   ; push result
0322   D9                     EXX      
0323   EB                     EX   de,hl   
0324   E9                     JP   (hl)   
0325                             ; **********************************************************************			
0325                             ; symbolic operators
0325                             ; **********************************************************************
0325                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 F4 04               JP   num   
0403                HEXNUM_:      
0403   C3 24 05               JP   hexnum   
0406                ARG_:        
0406   C3 18 06               JP   arg   
0409                STRDEF_:      
0409   C3 41 05               JP   strDef   
040C                LAMBDA_:      
040C   C3 84 05               JP   lambda   
040F                LAMBDAEND_:      
040F   C3 BE 05               JP   lambdaEnd   
0412                DOT_:        
0412   E1                     POP   hl   
0413   03                     INC   bc   
0414   0A                     LD   a,(bc)   
0415   FE 68                  CP   "h"   
0417   20 05                  JR   nz,dot1   
0419   CD EC 08               CALL   prthex   
041C   18 17                  JR   dot4   
041E                DOT1:        
041E   FE 73                  CP   "s"   
0420   20 05                  JR   nz,dot2   
0422   CD 0F 09               CALL   prtstr   
0425   18 0E                  JR   dot4   
0427                DOT2:        
0427   FE 63                  CP   "c"   
0429   20 06                  JR   nz,dot3   
042B   7D                     LD   a,l   
042C   CD 85 00               CALL   putchar   
042F   18 04                  JR   dot4   
0431                DOT3:        
0431   0B                     DEC   bc   
0432   CD A4 08               CALL   prtdec   
0435                DOT4:        
0435   3E 20                  LD   a," "   
0437   CD 85 00               CALL   putchar   
043A   DD E9                  JP   (ix)   
043C                BLOCK_:      
043C   C3 D2 05               JP   block   
043F                BLOCKEND_:      
043F   C3 04 06               JP   blockend   
0442                CHAR_:       
0442   C3 5A 05               JP   char   
0445                ARRAY_:      
0445   C3 AC 06               JP   array   
0448                ARRAYEND_:      
0448   C3 BE 06               JP   arrayEnd   
044B                IDENT_:      
044B   C3 67 07               JP   ident   
044E                SYMBOL_:      
044E   C3 40 07               JP   symbol   
0451                AND_:        
0451   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0452   E1                     POP   hl   
0453   7B                     LD   a,e   
0454   A5                     AND   l   
0455   6F                     LD   l,a   
0456   7A                     LD   a,d   
0457   A4                     AND   h   
0458                AND1:        
0458   67                     LD   h,a   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                OR_:         
045C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
045D   E1                     POP   hl   
045E   7B                     LD   a,e   
045F   B5                     OR   l   
0460   6F                     LD   l,a   
0461   7A                     LD   a,d   
0462   B4                     OR   h   
0463   18 F3                  JR   and1   
0465                XOR_:        
0465   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0466                XOR1:        
0466   E1                     POP   hl   
0467   7B                     LD   a,e   
0468   AD                     XOR   l   
0469   6F                     LD   l,a   
046A   7A                     LD   a,d   
046B   AC                     XOR   h   
046C   18 EA                  JR   and1   
046E                INV_:        ; Bitwise INVert the top member of the stack
046E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0471   18 F3                  JR   xor1   
0473                ADD_:        ; add the top 2 members of the stack
0473   D1                     POP   de   
0474   E1                     POP   hl   
0475   19                     ADD   hl,de   
0476   E5                     PUSH   hl   
0477   DD E9                  JP   (ix)   
0479                HDOT_:       ; print hexadecimal
0479   E1                     POP   hl   
047A   CD EC 08               CALL   prthex   
047D   C3 31 04               JP   dot3   
0480                MUL_:        
0480   C3 D8 04               JP   mul   
0483                SUB_:        ; Subtract the value 2nd on stack from top of stack
0483   D1                     POP   de   
0484   E1                     POP   hl   ; Entry point for INVert
0485                SUB2:        
0485   B7                     OR   a   ; Entry point for NEGate
0486   ED 52                  SBC   hl,de   
0488   E5                     PUSH   hl   
0489   DD E9                  JP   (ix)   
048B                EQ_:         
048B   E1                     POP   hl   
048C   D1                     POP   de   
048D   C3 C0 07               JP   equals   
0490                GT_:         
0490   D1                     POP   de   
0491   E1                     POP   hl   
0492   18 02                  JR   lt1   
0494                LT_:         
0494   E1                     POP   hl   
0495   D1                     POP   de   
0496                LT1:         
0496   03                     INC   bc   
0497   0A                     LD   a,(bc)   
0498   FE 3D                  CP   "="   
049A   CA C8 07               JP   z,lessthaneq   
049D   0B                     DEC   bc   
049E   C3 CD 07               JP   lessthan   
04A1                SLASH_:      
04A1   03                     INC   bc   
04A2   0A                     LD   a,(bc)   
04A3   FE 2F                  CP   "/"   ; double / is a comment
04A5   CA E1 07               JP   z,comment   
04A8   0B                     DEC   bc   
04A9   D1                     POP   de   ; get first value
04AA   E1                     POP   hl   ; get 2nd value
04AB   C5                     PUSH   bc   ; preserve the IP
04AC   44 4D                  LD   bc,hl   
04AE   CD 61 08               CALL   divide   
04B1   22 7E 1B               LD   (vFrac),hl   
04B4   C1                     POP   bc   
04B5   D5                     PUSH   de   ; push result
04B6   DD E9                  JP   (ix)   
04B8                NOP_:        
04B8   DD E9                  JP   (ix)   
04BA                             ; -------------------------------------------------------------------------------
04BA                KEY:         
04BA   CD 81 00               CALL   getchar   
04BD   26 00                  LD   h,0   
04BF   6F                     LD   l,a   
04C0   E5                     PUSH   hl   
04C1   DD E9                  JP   (ix)   
04C3                             ; fetch:                         ; Fetch the value from the address placed on the top of the stack
04C3                             ;     pop hl
04C3                             ; fetch1:
04C3                             ;     ld e,(hl)
04C3                             ;     inc hl
04C3                             ;     ld d,(hl)
04C3                             ;     push de
04C3                             ;     jp (ix)
04C3                             ; cFetch:
04C3                             ;     pop hl
04C3                             ;     ld d,0
04C3                             ;     ld e,(hl)
04C3                             ;     push    de
04C3                             ;     jp (ix)
04C3                             ; store:                         ; Store the value at the address placed on the top of the stack
04C3                             ;     pop hl
04C3                             ;     pop de
04C3                             ;     ld (hl),e
04C3                             ;     inc hl
04C3                             ;     ld (hl),d
04C3                             ;     jp (ix)
04C3                             ; cStore:	
04C3                             ;     pop    hl
04C3                             ;     pop    de
04C3                             ;     ld     (hl),e
04C3                             ;     jp (ix)
04C3                NEG:         
04C3   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04C6   D1                     POP   de   
04C7   18 BC                  JR   sub2   ; use the SUBtract routine
04C9                             ; prompt:
04C9                             ;     call prompt
04C9                             ;     jp (ix)
04C9                             ; newln:
04C9                             ;     call crlf
04C9                             ;     jp (ix)
04C9                GET:         
04C9                SET1:        
04C9                LET:         
04C9                WHILE:       
04C9                FILTER:      
04C9                MAP:         
04C9                SCAN:        
04C9   DD E9                  JP   (ix)   
04CB                             ;*******************************************************************
04CB                             ; word operators
04CB                             ;*******************************************************************
04CB                SHL:         
04CB   E1                     POP   hl   ; Duplicate the top member of the stack
04CC   29                     ADD   hl,hl   
04CD   E5                     PUSH   hl   ; shift left fallthrough into add_
04CE   DD E9                  JP   (ix)   
04D0                SHR:         
04D0   E1                     POP   hl   ; Get the top member of the stack
04D1                SHR1:        
04D1   CB 3C                  SRL   h   
04D3   CB 1D                  RR   l   
04D5   E5                     PUSH   hl   
04D6   DD E9                  JP   (ix)   
04D8                MUL:         ;=19
04D8   D1                     POP   de   ; get first value
04D9   E1                     POP   hl   
04DA   C5                     PUSH   bc   ; Preserve the IP
04DB   44                     LD   b,h   ; bc = 2nd value
04DC   4D                     LD   c,l   
04DD   21 00 00               LD   hl,0   
04E0   3E 10                  LD   a,16   
04E2                MUL2:        
04E2   29                     ADD   hl,hl   
04E3   CB 13                  RL   e   
04E5   CB 12                  RL   d   
04E7   30 04                  JR   nc,$+6   
04E9   09                     ADD   hl,bc   
04EA   30 01                  JR   nc,$+3   
04EC   13                     INC   de   
04ED   3D                     DEC   a   
04EE   20 F2                  JR   nz,mul2   
04F0   C1                     POP   bc   ; Restore the IP
04F1   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
04F2   DD E9                  JP   (ix)   
04F4                NUM:         
04F4   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
04F7   0A                     LD   a,(bc)   ; Get numeral or -
04F8   FE 2D                  CP   "-"   
04FA   20 01                  JR   nz,num0   
04FC   03                     INC   bc   ; move to next char, no flags affected
04FD                NUM0:        
04FD   08                     EX   af,af'   ; save zero flag = 0 for later
04FE                NUM1:        
04FE   0A                     LD   a,(bc)   ; read digit
04FF   D6 30                  SUB   "0"   ; less than 0?
0501   38 13                  JR   c,num2   ; not a digit, exit loop
0503   FE 0A                  CP   10   ; greater that 9?
0505   30 0F                  JR   nc,num2   ; not a digit, exit loop
0507   03                     INC   bc   ; inc IP
0508   54 5D                  LD   de,hl   ; multiply hl * 10
050A   29                     ADD   hl,hl   
050B   29                     ADD   hl,hl   
050C   19                     ADD   hl,de   
050D   29                     ADD   hl,hl   
050E   85                     ADD   a,l   ; add digit in a to hl
050F   6F                     LD   l,a   
0510   3E 00                  LD   a,0   
0512   8C                     ADC   a,h   
0513   67                     LD   h,a   
0514   18 E8                  JR   num1   
0516                NUM2:        
0516   0B                     DEC   bc   
0517   08                     EX   af,af'   ; restore zero flag
0518   20 07                  JR   nz,num3   
051A   EB                     EX   de,hl   ; negate the value of hl
051B   21 00 00               LD   hl,0   
051E   B7                     OR   a   ; jump to sub2
051F   ED 52                  SBC   hl,de   
0521                NUM3:        
0521   E5                     PUSH   hl   ; Put the number on the stack
0522   DD E9                  JP   (ix)   ; and process the next character
0524                HEXNUM:      ; 
0524   21 00 00               LD   hl,0   ; Clear hl to accept the number
0527                HEXNUM1:      
0527   03                     INC   bc   
0528   0A                     LD   a,(bc)   ; Get the character which is a numeral
0529   CB 77                  BIT   6,a   ; is it uppercase alpha?
052B   28 02                  JR   z,hexnum2   ; no a decimal
052D   D6 07                  SUB   7   ; sub 7  to make $a - $F
052F                HEXNUM2:      
052F   D6 30                  SUB   $30   ; Form decimal digit
0531   DA 16 05               JP   c,num2   
0534   FE 10                  CP   $0F+1   
0536   D2 16 05               JP   nc,num2   
0539   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
053A   29                     ADD   hl,hl   ; 4X
053B   29                     ADD   hl,hl   ; 8X
053C   29                     ADD   hl,hl   ; 16X
053D   85                     ADD   a,l   ; add into bottom of hl
053E   6F                     LD   l,a   ; 
053F   18 E6                  JR   hexnum1   
0541                             ; 
0541                STRDEF:      
0541   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0545   D5                     PUSH   de   ; save start of string
0546   03                     INC   bc   ; point to next char
0547   18 03                  JR   strDef2   
0549                STRDEF1:      
0549   12                     LD   (de),a   
054A   13                     INC   de   ; increase count
054B   03                     INC   bc   ; point to next char
054C                STRDEF2:      
054C   0A                     LD   a,(bc)   
054D   FE 27                  CP   "'"   ; ' is the string terminator
054F   20 F8                  JR   nz,strDef1   
0551   AF                     XOR   a   ; write null to terminate string
0552   12                     LD   (de),a   
0553   13                     INC   de   
0554   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0558   DD E9                  JP   (ix)   
055A                CHAR:        
055A   21 00 00               LD   hl,0   ; if `` is empty
055D                CHAR1:       
055D   03                     INC   bc   ; point to next char
055E   0A                     LD   a,(bc)   
055F   FE 60                  CP   "`"   ; ` is the string terminator
0561   28 09                  JR   z,char3   
0563   FE 5C                  CP   $5c   ; \ is the escape
0565   20 02                  JR   nz,char2   
0567   03                     INC   bc   
0568   0A                     LD   a,(bc)   
0569                CHAR2:       
0569   6F                     LD   l,a   
056A   18 F1                  JR   char1   
056C                CHAR3:       
056C   E5                     PUSH   hl   
056D                             ; dec bc
056D   DD E9                  JP   (ix)   
056F                EXEC:        ; execute lambda at pointer
056F   E1                     POP   hl   ; hl = pointer to lambda
0570                EXEC1:       
0570   7C                     LD   a,h   ; skip if destination address is null
0571   B5                     OR   l   
0572   28 0E                  JR   z,exec3   
0574                EXEC2:       
0574   C5                     PUSH   bc   ; push IP
0575   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0577   FD E5                  PUSH   iy   ; push BP
0579   FD 21 00 00            LD   iy,0   ; BP = SP
057D   FD 39                  ADD   iy,sp   
057F   44 4D                  LD   bc,hl   ; IP = pointer to lambda
0581   0B                     DEC   bc   ; dec to prepare for next routine
0582                EXEC3:       
0582   DD E9                  JP   (ix)   
0584                LAMBDA:      
0584   03                     INC   bc   
0585   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
0588   E5                     PUSH   hl   
0589   16 01                  LD   d,1   ; nesting: count first parenthesis
058B                LAMBDA1:      ; Skip to end of definition
058B   0A                     LD   a,(bc)   ; Get the next character
058C   03                     INC   bc   ; Point to next character
058D   77                     LD   (hl),a   
058E   23                     INC   hl   
058F   FE 27                  CP   "'"   
0591   28 1C                  JR   z,lambda2   
0593   FE 28                  CP   "("   
0595   28 18                  JR   z,lambda2   
0597   FE 29                  CP   ")"   
0599   28 14                  JR   z,lambda2   
059B   FE 7B                  CP   "{"   
059D   28 10                  JR   z,lambda2   
059F   FE 7D                  CP   "}"   ; Is it the end of the definition?
05A1   28 0C                  JR   z,lambda2   
05A3   FE 5B                  CP   "["   
05A5   28 08                  JR   z,lambda2   
05A7   FE 5D                  CP   "]"   
05A9   28 04                  JR   z,lambda2   
05AB   FE 60                  CP   "`"   
05AD   20 DC                  JR   nz,lambda1   
05AF                LAMBDA2:      
05AF   14                     INC   d   
05B0   CB 42                  BIT   0,d   ; balanced?
05B2   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
05B4   FE 7D                  CP   "}"   ; Is it the end of the definition?
05B6   20 D3                  JR   nz,lambda1   ; get the next element
05B8   0B                     DEC   bc   
05B9   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
05BC   DD E9                  JP   (ix)   
05BE                LAMBDAEND:      
05BE   E1                     POP   hl   ; hl = last result
05BF   FD 54                  LD   d,iyh   ; de = BP
05C1   FD 5D                  LD   e,iyl   
05C3   EB                     EX   de,hl   ; hl = BP, de = result
05C4   F9                     LD   sp,hl   ; sp = BP
05C5   E1                     POP   hl   ; hl = old BP
05C6   C1                     POP   bc   ; pop scope ptr (discard)
05C7   C1                     POP   bc   ; bc = IP
05C8   F9                     LD   sp,hl   ; sp = old BP
05C9   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
05CD   FD 39                  ADD   iy,sp   
05CF   D5                     PUSH   de   ; push result
05D0   DD E9                  JP   (ix)   
05D2                BLOCK:       
05D2   03                     INC   bc   
05D3   C5                     PUSH   bc   ; return first opcode of block
05D4   16 01                  LD   d,1   ; nesting: count first parenthesis
05D6                BLOCK1:      ; Skip to end of definition
05D6   0A                     LD   a,(bc)   ; Get the next character
05D7   03                     INC   bc   ; Point to next character
05D8   FE 27                  CP   "'"   
05DA   28 1C                  JR   z,block2   
05DC   FE 28                  CP   "("   
05DE   28 18                  JR   z,block2   
05E0   FE 29                  CP   ")"   
05E2   28 14                  JR   z,block2   
05E4   FE 7B                  CP   "{"   
05E6   28 10                  JR   z,block2   
05E8   FE 7D                  CP   "}"   
05EA   28 0C                  JR   z,block2   
05EC   FE 5B                  CP   "["   
05EE   28 08                  JR   z,block2   
05F0   FE 5D                  CP   "]"   
05F2   28 04                  JR   z,block2   
05F4   FE 60                  CP   "`"   
05F6   20 DE                  JR   nz,block1   
05F8                BLOCK2:      
05F8   14                     INC   d   
05F9   CB 42                  BIT   0,d   ; balanced?
05FB   20 D9                  JR   nz,block1   ; not balanced, get the next element
05FD   FE 29                  CP   ")"   ; Is it the end of the block?
05FF   20 D5                  JR   nz,block1   ; get the next element
0601   0B                     DEC   bc   
0602   DD E9                  JP   (ix)   
0604                BLOCKEND:      
0604   E1                     POP   hl   ; hl = last result
0605   FD 54                  LD   d,iyh   ; de = BP
0607   FD 5D                  LD   e,iyl   
0609   EB                     EX   de,hl   ; hl = BP, de = result
060A   F9                     LD   sp,hl   ; sp = BP
060B   E1                     POP   hl   ; hl = old BP
060C   C1                     POP   bc   ; pop SCP (discard)
060D   C1                     POP   bc   ; bc = IP
060E   F9                     LD   sp,hl   ; sp = old BP
060F   FD 21 00 00            LD   iy,0   ; iy = sp
0613   FD 39                  ADD   iy,sp   
0615   D5                     PUSH   de   ; push result
0616   DD E9                  JP   (ix)   
0618                ARG:         
0618   03                     INC   bc   ; get next char
0619   0A                     LD   a,(bc)   
061A   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
061C   E6 07                  AND   $07   ; mask
061E   87                     ADD   a,a   ; double
061F   6F                     LD   l,a   ; hl = offset into args
0620   26 00                  LD   h,0   
0622   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0625   FD 56 03               LD   d,(iy+3)   
0628   EB                     EX   de,hl   ; hl = SCP - offset
0629   B7                     OR   a   
062A   ED 52                  SBC   hl,de   
062C   2B                     DEC   hl   ; de = arg
062D   56                     LD   d,(hl)   
062E   2B                     DEC   hl   
062F   5E                     LD   e,(hl)   
0630   D5                     PUSH   de   ; push arg
0631   DD E9                  JP   (ix)   
0633                             ; 
0633                             ; in:
0633                             ;     pop hl                      ; hl = string
0633                             ;     pop de                      ; de = char
0633                             ; in1:
0633                             ;     ld a,(hl)
0633                             ;     inc hl
0633                             ;     cp 0                        ; is end of string
0633                             ;     jr z,in2
0633                             ;     cp e
0633                             ;     jr nz,in1
0633                             ;     or a                        ; a is never 0, or a resets zero flag
0633                             ; in2:
0633                             ;     ld hl,0                     ; hl = result
0633                             ;     jr z,in3
0633                             ;     dec hl                      ; if nz de = $ffff
0633                             ; in3:
0633                             ;     push hl                     ; push result
0633                             ;     jp (ix)
0633                             ; newAdd2:
0633                             ;     push bc                     ; push IP
0633                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0633                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0633                             ;     push de                     ; push SCP
0633                             ;     push iy                     ; push base pointer
0633                             ;     ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0633                             ;     add iy,sp                   ;
0633                             ;     ld d,(iy-1)
0633                             ;     ld e,(iy-2)
0633                             ;     ld h,(iy-3)
0633                             ;     ld l,(iy-4)
0633                             ;     add hl,de                   ; hl = hl + de
0633                             ;     ex de,hl                    ; de = result
0633                             ;     pop hl                      ; hl = old BP
0633                             ;     pop bc                      ; pop SCP (discard)
0633                             ;     pop bc                      ; bc = IP
0633                             ;     ld sp,hl                    ; sp = old BP
0633                             ;     ld iy,0
0633                             ;     add iy,sp
0633                             ;     push de                     ; push result
0633                             ;     jp (ix)
0633                IF:          
0633   11 00 00               LD   de,0   ; null pointer for else
0636   18 01                  JR   ifte1   
0638                IFTE:        
0638   D1                     POP   de   ; de = else
0639                IFTE1:       
0639   E1                     POP   hl   ; hl = then
063A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
063B   23                     INC   hl   ; check for true
063C   7C                     LD   a,h   
063D   B5                     OR   l   
063E   E1                     POP   hl   ; hl = then
063F   28 01                  JR   z,ifte2   
0641   EB                     EX   de,hl   ; condition = false, hl = else
0642                IFTE2:       
0642   7C                     LD   a,h   ; check if hl is null
0643   B5                     OR   l   
0644   28 13                  JR   z,ifte3   
0646   C5                     PUSH   bc   ; push IP
0647   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
064A   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
064D   D5                     PUSH   de   ; push SCP
064E   FD E5                  PUSH   iy   ; push BP
0650   FD 21 00 00            LD   iy,0   ; iy = sp
0654   FD 39                  ADD   iy,sp   
0656   44 4D                  LD   bc,hl   ; IP = then
0658   0B                     DEC   bc   
0659                IFTE3:       
0659   DD E9                  JP   (ix)   
065B                SWITCH:      
065B   E1                     POP   hl   ; get condition from stack
065C   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
065D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0660   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0663   D5                     PUSH   de   ; push SCP
0664   FD E5                  PUSH   iy   ; push BP
0666   FD 21 00 00            LD   iy,0   ; BP = SP
066A   FD 39                  ADD   iy,sp   
066C   E5                     PUSH   hl   ; push condition as first arg of new frame
066D   DD E9                  JP   (ix)   
066F                CASE:        
066F   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0672   FD 6E FE               LD   l,(iy-2)   
0675   23                     INC   hl   ; hl -= 1 index from second arg
0676   29                     ADD   hl,hl   ; hl *= 2 word offset
0677   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0679   FD 5D                  LD   e,iyl   
067B   EB                     EX   de,hl   
067C   B7                     OR   a   ; hl = BP - offset
067D   ED 52                  SBC   hl,de   
067F   54 5D                  LD   de,hl   ; save arg ptr
0681   2B                     DEC   hl   ; hl += 2
0682   2B                     DEC   hl   
0683   B7                     OR   a   ; arg ptr - stack pointer
0684   ED 72                  SBC   hl,sp   
0686   30 03                  JR   nc,case0   
0688   D1                     POP   de   ; pop last arg
0689   18 05                  JR   case1   
068B                CASE0:       
068B   EB                     EX   de,hl   
068C   2B                     DEC   hl   ; de = arg
068D   56                     LD   d,(hl)   
068E   2B                     DEC   hl   
068F   5E                     LD   e,(hl)   
0690                CASE1:       
0690   7A                     LD   a,d   ; is arg == null ? then skip
0691   B3                     OR   e   
0692   28 09                  JR   z,case2   
0694   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0697   FD 70 05               LD   (iy+5),b   
069A   42 4B                  LD   bc,de   ; IP = arg
069C   0B                     DEC   bc   
069D                CASE2:       
069D   DD E9                  JP   (ix)   
069F                WORDS:       
069F   21 02 00               LD   hl,2   
06A2   18 03                  JR   bytes1   
06A4                BYTES:       
06A4   21 01 00               LD   hl,1   
06A7                BYTES1:      
06A7   22 80 1B               LD   (vDataWidth),hl   
06AA   DD E9                  JP   (ix)   
06AC                ARRAY:       
06AC   C5                     PUSH   bc   ; create stack frame, push IP
06AD   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
06B0   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
06B3   D5                     PUSH   de   ; push SCP
06B4   FD E5                  PUSH   iy   ; push BP
06B6   FD 21 00 00            LD   iy,0   ; BP = SP
06BA   FD 39                  ADD   iy,sp   
06BC   DD E9                  JP   (ix)   
06BE                ARRAYEND:      
06BE   FD 54                  LD   d,iyh   ; de = BP
06C0   FD 5D                  LD   e,iyl   
06C2   62 6B                  LD   hl,de   ; hl = de
06C4   B7                     OR   a   
06C5   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06C7   C5                     PUSH   bc   ; bc' = IP
06C8   D9                     EXX      
06C9   C1                     POP   bc   
06CA   D9                     EXX      
06CB   44 4D                  LD   bc,hl   ; bc = count
06CD   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
06D0   71                     LD   (hl),c   ; write count before array data
06D1   23                     INC   hl   
06D2   70                     LD   (hl),b   
06D3   23                     INC   hl   
06D4   E5                     PUSH   hl   ; hl = ptr to array (index 0)
06D5   D9                     EXX      
06D6   E1                     POP   hl   ; hl' = ptr to array (index 0)
06D7   D9                     EXX      
06D8   3A 80 1B               LD   a,(vDataWidth)   
06DB   FE 01                  CP   1   ; byte?
06DD   20 0D                  JR   nz,arrayEnd2   
06DF   EB                     EX   de,hl   
06E0                ARRAYEND1:      
06E0   1B                     DEC   de   
06E1   1B                     DEC   de   
06E2   1A                     LD   a,(de)   
06E3   77                     LD   (hl),a   
06E4   23                     INC   hl   
06E5   0B                     DEC   bc   
06E6   79                     LD   a,c   
06E7   B0                     OR   b   
06E8   28 12                  JR   z,arrayEnd3   
06EA   18 F4                  JR   arrayEnd1   
06EC                ARRAYEND2:      
06EC   1B                     DEC   de   
06ED   1A                     LD   a,(de)   
06EE   08                     EX   af,af'   
06EF   1B                     DEC   de   
06F0   1A                     LD   a,(de)   
06F1   77                     LD   (hl),a   
06F2   23                     INC   hl   
06F3   08                     EX   af,af'   
06F4   1A                     LD   a,(de)   
06F5   77                     LD   (hl),a   
06F6   23                     INC   hl   
06F7   0B                     DEC   bc   
06F8   79                     LD   a,c   
06F9   B0                     OR   b   
06FA   20 F0                  JR   nz,arrayEnd2   
06FC                ARRAYEND3:      
06FC   FD 54                  LD   d,iyh   ; de = BP
06FE   FD 5D                  LD   e,iyl   
0700   EB                     EX   de,hl   ; hl = BP, de = result
0701   F9                     LD   sp,hl   ; sp = BP
0702   E1                     POP   hl   ; hl = old BP
0703   C1                     POP   bc   ; pop SCP (discard)
0704   C1                     POP   bc   ; bc = IP
0705   F9                     LD   sp,hl   ; sp = old BP
0706   FD 21 00 00            LD   iy,0   ; iy = sp
070A   FD 39                  ADD   iy,sp   
070C   D9                     EXX      
070D   E5                     PUSH   hl   
070E   C5                     PUSH   bc   
070F   D9                     EXX      
0710   C1                     POP   bc   
0711   DD E9                  JP   (ix)   
0713                             ; str -- num
0713                HASH:        
0713   E1                     POP   hl   
0714   C5                     PUSH   bc   
0715   44 4D                  LD   bc,hl   
0717   CD FE 07               CALL   hashStr   
071A   C1                     POP   bc   
071B   E5                     PUSH   hl   
071C   DD E9                  JP   (ix)   
071E                             ; str addr -- bool
071E                DEF:         
071E   60 69                  LD   hl,bc   ; hl = IP
0720   D1                     POP   de   ; de = addr
0721   C1                     POP   bc   ; bc = hash
0722   E5                     PUSH   hl   
0723   CD 17 08               CALL   defineEntry   
0726   21 00 00               LD   hl,0   ; if c return TRUE
0729   30 01                  JR   nc,def1   
072B   2B                     DEC   hl   
072C                DEF1:        
072C   C1                     POP   bc   
072D   E5                     PUSH   hl   
072E   DD E9                  JP   (ix)   
0730                             ; str -- addr
0730                ADDR:        
0730   E1                     POP   hl   ; hl = hash
0731   C5                     PUSH   bc   
0732   44 4D                  LD   bc,hl   
0734   CD 3D 08               CALL   lookupEntry   
0737   38 03                  JR   c,addr1   
0739   21 00 00               LD   hl,0   
073C                ADDR1:       
073C   C1                     POP   bc   
073D   E5                     PUSH   hl   
073E   DD E9                  JP   (ix)   
0740                SYMBOL:      
0740   03                     INC   bc   
0741   11 00 1A               LD   de,PAD   
0744   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0746   18 02                  JR   symbol1   
0748                SYMBOL0:      ; copy to PAD area
0748   03                     INC   bc   ; characters that are part of the identifier
0749   13                     INC   de   
074A                SYMBOL1:      ; 0-9 A-Z a-z _
074A   0A                     LD   a,(bc)   
074B   12                     LD   (de),a   
074C   B7                     OR   a   
074D   28 0A                  JR   z,symbol2   
074F   6F                     LD   l,a   
0750   7E                     LD   a,(hl)   
0751   FE 4B                  CP   lsb(ident_)   
0753   28 F3                  JR   z,symbol0   
0755   FE 00                  CP   lsb(num_)   
0757   28 EF                  JR   z,symbol0   
0759                SYMBOL2:      
0759   0B                     DEC   bc   
075A   AF                     XOR   a   
075B   12                     LD   (de),a   ; terminate string with null
075C   C5                     PUSH   bc   
075D   01 00 1A               LD   bc,PAD   
0760   CD FE 07               CALL   hashStr   ; hl = hash
0763   C1                     POP   bc   
0764   E5                     PUSH   hl   
0765   DD E9                  JP   (ix)   
0767                IDENT:       
0767   11 00 1A               LD   de,PAD   
076A   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
076C   18 02                  JR   ident1   
076E                IDENT0:      ; copy to PAD area
076E   03                     INC   bc   ; characters that are part of the identifier
076F   13                     INC   de   
0770                IDENT1:      ; 0-9 A-Z a-z _
0770   0A                     LD   a,(bc)   
0771   12                     LD   (de),a   
0772   B7                     OR   a   
0773   28 0A                  JR   z,ident2   
0775   6F                     LD   l,a   
0776   7E                     LD   a,(hl)   
0777   FE 4B                  CP   lsb(ident_)   
0779   28 F3                  JR   z,ident0   
077B   FE 00                  CP   lsb(num_)   
077D   28 EF                  JR   z,ident0   
077F                IDENT2:      
077F   0B                     DEC   bc   
0780   AF                     XOR   a   
0781   12                     LD   (de),a   ; terminate string with null
0782   C5                     PUSH   bc   
0783   01 00 1A               LD   bc,PAD   
0786   CD FE 07               CALL   hashStr   ; hl = hash
0789   44 4D                  LD   bc,hl   
078B   CD 3D 08               CALL   lookupEntry   
078E   C1                     POP   bc   
078F   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0791   DD E9                  JP   (ix)   
0793                IDENT3:      
0793   E9                     JP   (hl)   
0794                FRAC:        
0794   2A 7E 1B               LD   hl,(vFrac)   
0797   E5                     PUSH   hl   
0798   DD E9                  JP   (ix)   
079A                SQRT1:       
079A   E1                     POP   hl   
079B   C5                     PUSH   bc   
079C   CD 7A 08               CALL   squareRoot   
079F   ED 43 7E 1B            LD   (vFrac),bc   
07A3   C1                     POP   bc   
07A4   D5                     PUSH   de   
07A5   DD E9                  JP   (ix)   
07A7                ABS1:        
07A7   E1                     POP   hl   
07A8   CB 7C                  BIT   7,h   
07AA   C8                     RET   z   
07AB   AF                     XOR   a   
07AC   95                     SUB   l   
07AD   6F                     LD   l,a   
07AE   9F                     SBC   a,a   
07AF   94                     SUB   h   
07B0   67                     LD   h,a   
07B1   E5                     PUSH   hl   
07B2   DD E9                  JP   (ix)   
07B4                MOD:         
07B4   D1                     POP   de   ; get first value
07B5   E1                     POP   hl   ; get 2nd value
07B6   C5                     PUSH   bc   ; preserve the IP
07B7   44 4D                  LD   bc,hl   
07B9   CD 61 08               CALL   divide   
07BC   C1                     POP   bc   
07BD   E5                     PUSH   hl   ; push remainder
07BE   DD E9                  JP   (ix)   
07C0                             ; hl = value1, de = value2
07C0                             ; hl = result
07C0                EQUALS:      
07C0   B7                     OR   a   ; reset the carry flag
07C1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07C3   28 10                  JR   z,true1   
07C5   C3 DB 07               JP   false1   
07C8                             ; hl = value1 de = value2
07C8                             ; hl = result
07C8                LESSTHANEQ:      
07C8   B7                     OR   a   
07C9   ED 52                  SBC   hl,de   
07CB   18 05                  JR   lessthan1   
07CD                             ; hl = value1 de = value2
07CD                             ; hl = result
07CD                LESSTHAN:      
07CD   B7                     OR   a   
07CE   ED 52                  SBC   hl,de   
07D0   28 09                  JR   z,false1   
07D2                LESSTHAN1:      
07D2   FA DB 07               JP   m,false1   
07D5                TRUE1:       
07D5   21 FF FF               LD   hl,TRUE   
07D8   E5                     PUSH   hl   
07D9   DD E9                  JP   (ix)   
07DB                FALSE1:      
07DB   21 00 00               LD   hl,FALSE   
07DE   E5                     PUSH   hl   
07DF   DD E9                  JP   (ix)   
07E1                COMMENT:      
07E1   03                     INC   bc   ; point to next char
07E2   0A                     LD   a,(bc)   
07E3   FE 20                  CP   " "   ; terminate on any char less than SP
07E5   30 FA                  JR   nc,comment   
07E7   0B                     DEC   bc   
07E8   DD E9                  JP   (ix)   
07EA                             ; Z80 port input
07EA                             ; port -- value
07EA                INPUT:       
07EA   E1                     POP   hl   
07EB   59                     LD   e,c   ; save IP
07EC   4D                     LD   c,l   
07ED   ED 68                  IN   l,(c)   
07EF   26 00                  LD   h,0   
07F1   4B                     LD   c,e   ; restore IP
07F2   E5                     PUSH   hl   
07F3   DD E9                  JP   (ix)   
07F5                             ; Z80 port output
07F5                             ; value port --
07F5                OUTPUT:      
07F5   E1                     POP   hl   
07F6   59                     LD   e,c   ; save IP
07F7   4D                     LD   c,l   
07F8   E1                     POP   hl   
07F9   ED 69                  OUT   (c),l   
07FB   4B                     LD   c,e   ; restore IP
07FC   DD E9                  JP   (ix)   
07FE                             ; -------------------------------------------------------------------------------
07FE                             ; hash C-string
07FE                             ; BC = str
07FE                             ; HL = hash
07FE                HASHSTR:      
07FE   21 00 00               LD   hl,0   
0801                HASHSTR1:      
0801   0A                     LD   a,(bc)   ; load next char
0802   03                     INC   bc   
0803   FE 00                  CP   0   ; null?
0805   C8                     RET   z   
0806                HASHSTR2:      
0806   16 00                  LD   d,0   
0808   5F                     LD   e,a   
0809   19                     ADD   hl,de   
080A   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
080C   29                     ADD   hl,hl   ; shift left
080D   19                     ADD   hl,de   ; add
080E   29                     ADD   hl,hl   ; shift left
080F   29                     ADD   hl,hl   ; shift left
0810   29                     ADD   hl,hl   ; shift left
0811   29                     ADD   hl,hl   ; shift left
0812   29                     ADD   hl,hl   ; shift left
0813   29                     ADD   hl,hl   ; shift left
0814   19                     ADD   hl,de   ; add
0815   18 EA                  JR   hashStr1   
0817                             ; add entry to hash slots and hash pointers
0817                             ; bc = hash (b = hi, c = lo), de = addr
0817                             ; sets carry if successful
0817                DEFINEENTRY:      
0817   CB 21                  SLA   c   ; lo = lo * 2
0819   69                     LD   l,c   ; lo1 = lo
081A   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
081C                DEFINEENTRY0:      
081C   7E                     LD   a,(hl)   ; a = (lo1)
081D   FE FF                  CP   UNUSED   ; is it unused?
081F   28 12                  JR   z,defineEntry3   ; yes, add entry
0821   79                     LD   a,c   ; a = lo
0822   BE                     CP   (hl)   ; compare (lo1) with lo
0823   20 06                  JR   nz,defineEntry1   ; no match loop around
0825   2C                     INC   l   
0826   78                     LD   a,b   ; a = hi
0827   BE                     CP   (hl)   ; compare (lo1+1) with hi
0828   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
082A   2D                     DEC   l   ; restore l
082B                DEFINEENTRY1:      
082B   2C                     INC   l   ; try next entry
082C   2C                     INC   l   
082D   79                     LD   a,c   ; compare lo and lo1
082E   BD                     CP   l   ; if equal then there's no space left, reject
082F   20 EB                  JR   nz,defineEntry0   
0831                DEFINEENTRY2:      
0831   3F                     CCF      ; clear carry flag, failure
0832   C9                     RET      
0833                DEFINEENTRY3:      ; new entry
0833   71                     LD   (hl),c   ; (lo1) = hash lo
0834   23                     INC   hl   
0835   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0836   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0838   72                     LD   (hl),d   
0839   2B                     DEC   hl   
083A   73                     LD   (hl),e   ; (slot + 2) = address
083B   37                     SCF      ; set carry flag, success
083C   C9                     RET      
083D                             ; looks up hash and returns address
083D                             ; bc = hash
083D                             ; returns addr in hl, sets carry if successful
083D                LOOKUPENTRY:      
083D   CB 21                  SLA   c   ; lo = lo * 2
083F   69                     LD   l,c   ; lo1 = lo
0840   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0842                LOOKUPENTRY0:      
0842   7E                     LD   a,(hl)   ; a = (hl), slot
0843   FE FF                  CP   UNUSED   ; is it unused?
0845   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0847   79                     LD   a,c   ; a = lo
0848   BE                     CP   (hl)   ; compare (lo1) with lo
0849   20 06                  JR   nz,lookupEntry1   ; no match loop around
084B   2C                     INC   l   
084C   78                     LD   a,b   ; a = hi
084D   BE                     CP   (hl)   ; compare (lo1+1) with hi
084E   28 09                  JR   z,lookupEntry3   
0850   2D                     DEC   l   
0851                LOOKUPENTRY1:      
0851   2C                     INC   l   
0852   2C                     INC   l   
0853   79                     LD   a,c   
0854   BD                     CP   l   ; no space left, reject
0855   20 EB                  JR   nz,lookupEntry0   
0857                LOOKUPENTRY2:      
0857   3F                     CCF      ; clear carry flag, failure
0858   C9                     RET      
0859                LOOKUPENTRY3:      
0859   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
085B   56                     LD   d,(hl)   
085C   2D                     DEC   l   ; restore l
085D   5E                     LD   e,(hl)   ; (slot + 2) = address
085E   EB                     EX   de,hl   
085F   37                     SCF      
0860   C9                     RET      
0861                             ; division subroutine.
0861                             ; bc: divisor, de: dividend, hl: remainder
0861                DIVIDE:      
0861   21 00 00               LD   hl,0   ; zero the remainder
0864   3E 10                  LD   a,16   ; loop counter
0866                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0866   CB 21                  SLA   c   
0868   CB 10                  RL   b   
086A   ED 6A                  ADC   hl,hl   
086C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
086E   38 03                  JR   c,divide2   
0870   0C                     INC   c   
0871   18 01                  JR   divide3   
0873                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0873   19                     ADD   hl,de   
0874                DIVIDE3:      
0874   3D                     DEC   a   
0875   20 EF                  JR   nz,divide1   
0877   50 59                  LD   de,bc   ; result from bc to de
0879   C9                     RET      
087A                             ; squareroot
087A                             ; Input: HL = value
087A                             ; Result: DE = square root BC = remainder
087A                SQUAREROOT:      
087A   01 00 08               LD   bc,0800h   
087D   59                     LD   e,c   
087E   AF                     XOR   a   
087F                SQUAREROOT1:      
087F   29                     ADD   hl,hl   
0880   CB 11                  RL   c   
0882   ED 6A                  ADC   hl,hl   
0884   CB 11                  RL   c   
0886   30 02                  JR   nc,$+4   
0888   CB C5                  SET   0,l   
088A   7B                     LD   a,e   
088B   87                     ADD   a,a   
088C   5F                     LD   e,a   
088D   87                     ADD   a,a   
088E   CB 45                  BIT   0,l   
0890   20 03                  JR   nz,$+5   
0892   91                     SUB   c   
0893   30 05                  JR   nc,squareRoot4   
0895   79                     LD   a,c   
0896   93                     SUB   e   
0897   1C                     INC   e   
0898   93                     SUB   e   
0899   4F                     LD   c,a   
089A                SQUAREROOT4:      
089A   10 E3                  DJNZ   squareRoot1   
089C   CB 45                  BIT   0,l   
089E   28 01                  JR   z,squareRoot5   
08A0   04                     INC   b   
08A1                SQUAREROOT5:      
08A1   16 00                  LD   d,0   
08A3   C9                     RET      
08A4                PRTDEC:      
08A4   CB 7C                  BIT   7,h   
08A6   28 0B                  JR   z,prtdec0   
08A8   3E 2D                  LD   a,"-"   
08AA   CD 85 00               CALL   putchar   
08AD   AF                     XOR   a   
08AE   95                     SUB   l   
08AF   6F                     LD   l,a   
08B0   9F                     SBC   a,a   
08B1   94                     SUB   h   
08B2   67                     LD   h,a   
08B3                PRTDEC0:      
08B3   C5                     PUSH   bc   
08B4   0E 00                  LD   c,0   ; leading zeros flag = false
08B6   11 F0 D8               LD   de,-10000   
08B9   CD D5 08               CALL   prtdec1   
08BC   11 18 FC               LD   de,-1000   
08BF   CD D5 08               CALL   prtdec1   
08C2   11 9C FF               LD   de,-100   
08C5   CD D5 08               CALL   prtdec1   
08C8   1E F6                  LD   e,-10   
08CA   CD D5 08               CALL   prtdec1   
08CD   0C                     INC   c   ; flag = true for at least digit
08CE   1E FF                  LD   e,-1   
08D0   CD D5 08               CALL   prtdec1   
08D3   C1                     POP   bc   
08D4   C9                     RET      
08D5                PRTDEC1:      
08D5   06 2F                  LD   b,"0"-1   
08D7                PRTDEC2:      
08D7   04                     INC   b   
08D8   19                     ADD   hl,de   
08D9   38 FC                  JR   c,prtdec2   
08DB   ED 52                  SBC   hl,de   
08DD   3E 30                  LD   a,"0"   
08DF   B8                     CP   b   
08E0   20 05                  JR   nz,prtdec3   
08E2   AF                     XOR   a   
08E3   B1                     OR   c   
08E4   C8                     RET   z   
08E5   18 01                  JR   prtdec4   
08E7                PRTDEC3:      
08E7   0C                     INC   c   
08E8                PRTDEC4:      
08E8   78                     LD   a,b   
08E9   C3 85 00               JP   putchar   
08EC                PRTHEX:      ; display hl as a 16-bit number in hex.
08EC   C5                     PUSH   bc   ; preserve the IP
08ED   7C                     LD   a,h   
08EE   CD F7 08               CALL   prthex2   
08F1   7D                     LD   a,l   
08F2   CD F7 08               CALL   prthex2   
08F5   C1                     POP   bc   
08F6   C9                     RET      
08F7                PRTHEX2:      
08F7   4F                     LD   c,a   
08F8   1F                     RRA      
08F9   1F                     RRA      
08FA   1F                     RRA      
08FB   1F                     RRA      
08FC   CD 00 09               CALL   prthex3   
08FF   79                     LD   a,c   
0900                PRTHEX3:      
0900   E6 0F                  AND   0x0F   
0902   C6 90                  ADD   a,0x90   
0904   27                     DAA      
0905   CE 40                  ADC   a,0x40   
0907   27                     DAA      
0908   C3 85 00               JP   putchar   
090B                PRTSTR0:      
090B   CD 85 00               CALL   putchar   
090E   23                     INC   hl   
090F                PRTSTR:      
090F   7E                     LD   a,(hl)   
0910   B7                     OR   a   
0911   20 F8                  JR   nz,prtstr0   
0913   C9                     RET      
0914                             ; **************************************************************************
0914                             ; calculate nesting value
0914                             ; a is char to be tested,
0914                             ; e is the nesting value (initially 0)
0914                             ; e is increased by ( and [
0914                             ; e is decreased by ) and ]
0914                             ; e has its bit 7 toggled by `
0914                             ; limited to 127 levels
0914                             ; **************************************************************************
0914                NESTING:      
0914   FE 22                  CP   $22   ; quote char
0916   20 0A                  JR   nz,nesting1   
0918   CB 7B                  BIT   7,e   
091A   28 03                  JR   z,nesting1a   
091C   CB BB                  RES   7,e   
091E   C9                     RET      
091F                NESTING1A:      
091F   CB FB                  SET   7,e   
0921   C9                     RET      
0922                NESTING1:      
0922   CB 7B                  BIT   7,e   
0924   C0                     RET   nz   
0925   FE 7B                  CP   "{"   
0927   28 08                  JR   z,nesting2   
0929   FE 5B                  CP   "["   
092B   28 04                  JR   z,nesting2   
092D   FE 28                  CP   "("   
092F   20 02                  JR   nz,nesting3   
0931                NESTING2:      
0931   1C                     INC   e   
0932   C9                     RET      
0933                NESTING3:      
0933   FE 7D                  CP   "}"   
0935   28 07                  JR   z,nesting4   
0937   FE 5D                  CP   "]"   
0939   28 03                  JR   z,nesting4   
093B   FE 29                  CP   ")"   
093D   C0                     RET   nz   
093E                NESTING4:      
093E   1D                     DEC   e   
093F   C9                     RET      
0940                PROMPT:      
0940   CD 50 09               CALL   printStr   
0943   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0948   C9                     RET      
0949                CRLF:        
0949   CD 50 09               CALL   printStr   
094C   0D 0A 00               .CSTR   "\r\n"   
094F   C9                     RET      
0950                PRINTSTR:      
0950   E3                     EX   (sp),hl   ; swap			
0951   CD 0F 09               CALL   prtstr   
0954   23                     INC   hl   ; inc past null
0955   E3                     EX   (sp),hl   ; put it back	
0956   C9                     RET      
0957                DEFINE:      
0957   E1                     POP   hl   
0958   7E                     LD   a,(hl)   
0959   23                     INC   hl   
095A   44 4D                  LD   bc,hl   
095C   5F                     LD   e,a   
095D   16 00                  LD   d,0   
095F   19                     ADD   hl,de   
0960   5E                     LD   e,(hl)   
0961   23                     INC   hl   
0962   56                     LD   d,(hl)   
0963   23                     INC   hl   
0964   E5                     PUSH   hl   ; bc = str
0965   D5                     PUSH   de   
0966   CD FE 07               CALL   hashStr   ; hl = hash
0969   D1                     POP   de   
096A   44 4D                  LD   bc,hl   
096C   C3 17 08               JP   defineEntry   
096F                INIT:        
096F   DD 21 F0 02            LD   ix,next   
0973   FD 21 00 1A            LD   iy,DSTACK   
0977   21 80 01               LD   hl,isysVars   
097A   11 7E 1B               LD   de,sysVars   
097D   01 10 00               LD   bc,8 * 2   
0980   ED B0                  LDIR      
0982   3E FF                  LD   a,UNUSED   
0984   06 00                  LD   b,0   
0986   21 00 1D               LD   hl,hashSlots   
0989                INIT1:       
0989   77                     LD   (hl),a   
098A   23                     INC   hl   
098B   10 FC                  DJNZ   init1   
098D   CD 57 09               CALL   define   
0990   04 61 62 73 00         .PSTR   "abs",0   
0995   A7 07                  DW   abs1   
0997   CD 57 09               CALL   define   
099A   05 61 64 64 72 00      .PSTR   "addr",0   
09A0   30 07                  DW   addr   
09A2   CD 57 09               CALL   define   
09A5   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09AC   A4 06                  DW   bytes   
09AE   CD 57 09               CALL   define   
09B1   05 63 61 73 65 00      .PSTR   "case",0   
09B7   6F 06                  DW   case   
09B9   CD 57 09               CALL   define   
09BC   04 64 65 66 00         .PSTR   "def",0   
09C1   1E 07                  DW   def   
09C3   CD 57 09               CALL   define   
09C6   05 65 78 65 63 00      .PSTR   "exec",0   
09CC   6F 05                  DW   exec   
09CE   CD 57 09               CALL   define   
09D1   06 66 61 6C 73 65 00   .PSTR   "false",0   
09D8   00 00                  DW   false   
09DA   CD 57 09               CALL   define   
09DD   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
09E5   C9 04                  DW   filter   
09E7   CD 57 09               CALL   define   
09EA   05 66 72 61 63 00      .PSTR   "frac",0   
09F0   94 07                  DW   frac   
09F2   CD 57 09               CALL   define   
09F5   04 67 65 74 00         .PSTR   "get",0   
09FA   C9 04                  DW   get   
09FC   CD 57 09               CALL   define   
09FF   05 68 61 73 68 00      .PSTR   "hash",0   
0A05   13 07                  DW   hash   
0A07   CD 57 09               CALL   define   
0A0A   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A11   EA 07                  DW   input   
0A13   CD 57 09               CALL   define   
0A16   03 69 66 00            .PSTR   "if",0   
0A1A   33 06                  DW   if   
0A1C   CD 57 09               CALL   define   
0A1F   05 69 66 74 65 00      .PSTR   "ifte",0   
0A25   38 06                  DW   ifte   
0A27   CD 57 09               CALL   define   
0A2A   04 6B 65 79 00         .PSTR   "key",0   
0A2F   BA 04                  DW   key   
0A31   CD 57 09               CALL   define   
0A34   04 6C 65 74 00         .PSTR   "let",0   
0A39   C9 04                  DW   let   
0A3B   CD 57 09               CALL   define   
0A3E   04 6D 61 70 00         .PSTR   "map",0   
0A43   C9 04                  DW   map   
0A45   CD 57 09               CALL   define   
0A48   04 6D 6F 64 00         .PSTR   "mod",0   
0A4D   B4 07                  DW   mod   
0A4F   CD 57 09               CALL   define   
0A52   04 6E 65 67 00         .PSTR   "neg",0   
0A57   C3 04                  DW   neg   
0A59   CD 57 09               CALL   define   
0A5C   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A64   F5 07                  DW   output   
0A66   CD 57 09               CALL   define   
0A69   05 73 63 61 6E 00      .PSTR   "scan",0   
0A6F   01 00                  DW   scan   
0A71   CD 57 09               CALL   define   
0A74   04 73 65 74 00         .PSTR   "set",0   
0A79   C9 04                  DW   set1   
0A7B   CD 57 09               CALL   define   
0A7E   04 73 68 6C 00         .PSTR   "shl",0   
0A83   CB 04                  DW   shl   
0A85   CD 57 09               CALL   define   
0A88   04 73 68 72 00         .PSTR   "shr",0   
0A8D   D0 04                  DW   shr   
0A8F   CD 57 09               CALL   define   
0A92   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A98   9A 07                  DW   sqrt1   
0A9A   CD 57 09               CALL   define   
0A9D   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0AA5   5B 06                  DW   switch   
0AA7   CD 57 09               CALL   define   
0AAA   05 74 72 75 65 00      .PSTR   "true",0   
0AB0   FF FF                  DW   true   
0AB2   CD 57 09               CALL   define   
0AB5   06 77 68 69 6C 65 00   .PSTR   "while",0   
0ABC   C9 04                  DW   while   
0ABE   CD 57 09               CALL   define   
0AC1   06 77 6F 72 64 73 00   .PSTR   "words",0   
0AC8   9F 06                  DW   words   
0ACA   C9                     RET      
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   21 00 00               LD   hl,0   
4003   11 01 00               LD   de,1   
4006   19                     ADD   hl,de   
4007   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
4009   29                     ADD   hl,hl   ; shift left
400A   19                     ADD   hl,de   ; add
400B   29                     ADD   hl,hl   ; shift left
400C   29                     ADD   hl,hl   ; shift left
400D   29                     ADD   hl,hl   ; shift left
400E   29                     ADD   hl,hl   ; shift left
400F   29                     ADD   hl,hl   ; shift left
4010   29                     ADD   hl,hl   ; shift left
4011   19                     ADD   hl,de   ; add
4012                             ; test "65 .c", 0
4012                             ; test "'hello' hash", $7f54
4012                             ; test ":hello", $7f54
4012                             ; test ":hello 2 def", TRUE
4012                             ; test ":hello 2 def :hello addr", 2
4012                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
4012                             ; test "1 2 <", TRUE
4012                             ; test "2 2 <=", TRUE
4012                             ; test "2 1 <", FALSE
4012                             ; test "1 2 >", FALSE
4012                             ; test "2 2 >=", TRUE
4012                             ; test "2 1 >", TRUE
4012                             ; test "10 sqrt", 3
4012                             ; test "10 sqrt frac", 1
4012                             ; test "7 3 /", 2
4012                             ; test "7 3 / frac", 1
4012                             ; test "1 2 +", 3
4012                             ; test ":h {1} def :h addr exec", 1
4012                             ; test "bytes [`A` `B` `C`]", 0
4012                             ; test "bytes [`A` `B` `C`] 1 get", "B"
4012                             ; test "bytes [`A` `B` `C`] 1 `Z` set 1 get", "Z"
4012                             ; test "words [10 20 30] 1 get", 10
4012                             ; test "words [10 20 30] 1 50 set 1 get", 50
4012                             ; test "1 2 +", 3
4012                             ; test "4 1 2 +", 3
4012                             ; test "1", 1
4012                             ; test "2", 2
4012                             ; test "``", 0
4012                             ; test "`a`", $61
4012                             ; test "`\\``", $60
4012                             ; test "`b` 'cba' in", -1
4012                             ; test "`x` 'cba' in", 0
4012                             ; test "5 0 (1) if", 5
4012                             ; test "0 (1) (2) ife", 2
4012                             ; test "5 -1 (1) if", 1
4012                             ; test "-1 (1) (2) ife", 1
4012                             ; test "9 sw (1) (5) ca", 5
4012                             ; test "0 sw (1) ca", 1
4012                             ; test "1 sw (1) (2) (3) ca", 2
4012                             ; test "5 -1 (2) if", 2
4012                             ; test "5 0 (2) if", 5
4012                             ; test "5 0 (0 (2) if) if", 5
4012                             ; test "5 0 (-1 (2) if) if", 5
4012                             ; test "5 -1 (2) if", 2
4012                             ; test "5 -1 (-1 (2) if) if", 2
4012                             ; test "(1) ex", 1
4012                             ; test "2 ($1) ex", 2
4012                             ; test "2 4 ($2) ex", 4
4012                             ; test "((1) ex) ex", 1
4012                             ; test "5 (-1 ($1) if) ex", 5
4012                             ; test "'A' @", 65
4012                             ; test "1", 1
4012                             ; test "0", 0
4012                             ; test "10", 10
4012                             ; test "123", 123
4012                             ; test "$10", $10
4012                             ; test "$FF", $FF
4012                             ; test "2 3 =", 0
4012                             ; test "3 3 =", 1
4012                             ; test "2 3 <", 1
4012                             ; test "3 3 <", 0
4012                             ; test "3 3 >", 0
4012                             ; test "4 3 >", 1
4012                             ; test "1 2 +", 3
4012                             ; test "123 456 +", 123+456
4012                             ; test "64 128 +", 64+128
4012                             ; test "5 3 -", 2
4012                             ; test "3 5 &", 1
4012                             ; test "3 5 |", 7
4012                             ; test "2 3 *", 6
4012                             ; test "1 2 3 + *", 5
4012                             ; ; test "1 2 3 ' +", 3
4012                             ; ; test "1_ 2 +",1
4012                             ; ; test "1_ 1 +",0
4012                             ; ; call enter
4012                             ; ;     .cstr "1 3",$22,"+"
4012                             ; ; expect "1 3 DUP +", 6
4012                             ; ; test "5 2/'", 2
4012                             ; ; test "3 5$ -", 2
4012                             ; ; test "5 2/$ '", 1
4012                             ; ; test "2 3%++", 7
4012                             ; ; test "1 2 3~''", 2
4012                             ; ; test "1 2 3~+*", 8
4012                             ; ; test "2a!a@",2
4012                             ; ; test "3x! 1 x@+x! x@", 4
4012                             ; ; test "3x! 1_ x@+x! x@", 2
4012                             ; ; test "1{", 2
4012                             ; ; test "1}", 0
4012                             ; ; test "2}", 1
4012                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4012                             ; ; test "(2) \\^", 2
4012                             ; ; test ":X1; X", 1
4012                             ; ; test ":A100;A", 100
4012                             ; ; test ":Aa!; 3A a@", 3
4012                             ; ; test ":Aa!;:Ba@;4AB", 4
4012                             ; ; test "[]$ '", 0
4012                             ; ; test "[3]$ '", 1
4012                             ; ; test "[3]'@", 3
4012                             ; ; test "[1 2 3]'@", 1
4012                             ; ; test "[1 2 3]'2+@", 2
4012                             ; ; test "\\h@[1]''\\h@$-", 2
4012                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4012                             ; ; test "\\[]$ '", 0
4012                             ; ; test "\\[3]'\\@", 3
4012                             ; ; test "\\[3]$ '", 1
4012                             ; ; test "\\[1 2 3]'\\@", 1
4012                             ; ; test "\\[1 2 3]'1+\\@", 2
4012                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4012                             ; ; test "\\h@\\[1]''\\h@$-", 1
4012                             ; ; test "\\`A`\\@",65
4012                             ; ; test "0 0(1+)", 0
4012                             ; ; test "0 1(1+)", 1
4012                             ; ; test "0 2(1+)", 2
4012                             ; ; test "0 1(0(1+))", 0
4012                             ; ; test "0 1(1(1+))", 1
4012                             ; ; test "0 2(1(1+))", 2
4012                             ; ; test "0 2(2(1+))", 4
4012                             ; ; test "0 1(\\i@+)", 0
4012                             ; ; test "0 2(\\i@+)", 1
4012                             ; ; test "0 3(\\i@+)", 3
4012                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4012                             ; ; test "0t! 10(1 t@+t!) t@",10
4012                             ; ; test "0(100)(200)",200
4012                             ; ; test "1(100)(200)",100
4012                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4012                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4012                             ; ; test ":X10;\\0X", 10
4012                             ; ; test "2 \\1x! \\1x@", 2
4012   CD 50 09               CALL   printStr   
4015   44 6F 6E 65 21 00      .CSTR   "Done!"   
401B   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               04C9 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 220 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 286 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
START:              0280 DEFINED AT LINE 188 IN Siena.asm
INTERPRET:          0296 DEFINED AT LINE 194 IN Siena.asm
                    > USED AT LINE 296 IN Siena.asm
INTERPRET2:         02A0 DEFINED AT LINE 200 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
INTERPRET3:         02A8 DEFINED AT LINE 207 IN Siena.asm
                    > USED AT LINE 216 IN Siena.asm
INTERPRET4:         02AE DEFINED AT LINE 213 IN Siena.asm
                    > USED AT LINE 205 IN Siena.asm
WAITCHAR:           02B3 DEFINED AT LINE 219 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
MACRO:              02C2 DEFINED AT LINE 228 IN Siena.asm
WAITCHAR1:          02C4 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
WAITCHAR3:          02D2 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
WAITCHAR4:          02E8 DEFINED AT LINE 270 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
NEXT:               02F0 DEFINED AT LINE 275 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
NEXT1:              02FD DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
ETX:                0305 DEFINED AT LINE 290 IN Siena.asm
ETX1:               030E DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
EXIT:               0310 DEFINED AT LINE 298 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 323 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 325 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 327 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 329 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 331 IN Siena.asm
LAMBDA_:            040C DEFINED AT LINE 333 IN Siena.asm
LAMBDAEND_:         040F DEFINED AT LINE 335 IN Siena.asm
DOT_:               0412 DEFINED AT LINE 338 IN Siena.asm
DOT1:               041E DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 343 IN Siena.asm
DOT2:               0427 DEFINED AT LINE 351 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
DOT3:               0431 DEFINED AT LINE 357 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
DOT4:               0435 DEFINED AT LINE 360 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
                    > USED AT LINE 356 IN Siena.asm
BLOCK_:             043C DEFINED AT LINE 365 IN Siena.asm
BLOCKEND_:          043F DEFINED AT LINE 367 IN Siena.asm
CHAR_:              0442 DEFINED AT LINE 369 IN Siena.asm
ARRAY_:             0445 DEFINED AT LINE 371 IN Siena.asm
ARRAYEND_:          0448 DEFINED AT LINE 373 IN Siena.asm
IDENT_:             044B DEFINED AT LINE 375 IN Siena.asm
SYMBOL_:            044E DEFINED AT LINE 377 IN Siena.asm
AND_:               0451 DEFINED AT LINE 379 IN Siena.asm
AND1:               0458 DEFINED AT LINE 387 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
                    > USED AT LINE 411 IN Siena.asm
OR_:                045C DEFINED AT LINE 392 IN Siena.asm
XOR_:               0465 DEFINED AT LINE 402 IN Siena.asm
XOR1:               0466 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
INV_:               046E DEFINED AT LINE 413 IN Siena.asm
ADD_:               0473 DEFINED AT LINE 417 IN Siena.asm
HDOT_:              0479 DEFINED AT LINE 424 IN Siena.asm
MUL_:               0480 DEFINED AT LINE 429 IN Siena.asm
SUB_:               0483 DEFINED AT LINE 432 IN Siena.asm
SUB2:               0485 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
EQ_:                048B DEFINED AT LINE 441 IN Siena.asm
GT_:                0490 DEFINED AT LINE 445 IN Siena.asm
LT_:                0494 DEFINED AT LINE 449 IN Siena.asm
LT1:                0496 DEFINED AT LINE 452 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
SLASH_:             04A1 DEFINED AT LINE 460 IN Siena.asm
NOP_:               04B8 DEFINED AT LINE 476 IN Siena.asm
KEY:                04BA DEFINED AT LINE 481 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
NEG:                04C3 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
GET:                04C9 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
SET1:               04C9 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
LET:                04C9 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
WHILE:              04C9 DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
FILTER:             04C9 DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
MAP:                04C9 DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
SHL:                04CB DEFINED AT LINE 548 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
SHR:                04D0 DEFINED AT LINE 554 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
SHR1:               04D1 DEFINED AT LINE 556 IN Siena.asm
MUL:                04D8 DEFINED AT LINE 562 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
MUL2:               04E2 DEFINED AT LINE 571 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
NUM:                04F4 DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
NUM0:               04FD DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
NUM1:               04FE DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
NUM2:               0516 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 598 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
NUM3:               0521 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
HEXNUM:             0524 DEFINED AT LINE 623 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
HEXNUM1:            0527 DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
HEXNUM2:            052F DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
STRDEF:             0541 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
STRDEF1:            0549 DEFINED AT LINE 649 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
STRDEF2:            054C DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
CHAR:               055A DEFINED AT LINE 663 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
CHAR1:              055D DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
CHAR2:              0569 DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 671 IN Siena.asm
CHAR3:              056C DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
EXEC:               056F DEFINED AT LINE 682 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
EXEC1:              0570 DEFINED AT LINE 684 IN Siena.asm
EXEC2:              0574 DEFINED AT LINE 688 IN Siena.asm
EXEC3:              0582 DEFINED AT LINE 697 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
LAMBDA:             0584 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
LAMBDA1:            058B DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
LAMBDA2:            05AF DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
LAMBDAEND:          05BE DEFINED AT LINE 736 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
BLOCK:              05D2 DEFINED AT LINE 751 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
BLOCK1:             05D6 DEFINED AT LINE 755 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 779 IN Siena.asm
BLOCK2:             05F8 DEFINED AT LINE 774 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
BLOCKEND:           0604 DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
ARG:                0618 DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
IF:                 0633 DEFINED AT LINE 865 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
IFTE:               0638 DEFINED AT LINE 868 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
IFTE1:              0639 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 867 IN Siena.asm
IFTE2:              0642 DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
IFTE3:              0659 DEFINED AT LINE 892 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
SWITCH:             065B DEFINED AT LINE 895 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
CASE:               066F DEFINED AT LINE 907 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
CASE0:              068B DEFINED AT LINE 925 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
CASE1:              0690 DEFINED AT LINE 931 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
CASE2:              069D DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
WORDS:              069F DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
BYTES:              06A4 DEFINED AT LINE 945 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
BYTES1:             06A7 DEFINED AT LINE 947 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
ARRAY:              06AC DEFINED AT LINE 951 IN Siena.asm
                    > USED AT LINE 372 IN Siena.asm
ARRAYEND:           06BE DEFINED AT LINE 961 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
ARRAYEND1:          06E0 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
ARRAYEND2:          06EC DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
ARRAYEND3:          06FC DEFINED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
HASH:               0713 DEFINED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
DEF:                071E DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
DEF1:               072C DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
ADDR:               0730 DEFINED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
ADDR1:              073C DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
SYMBOL:             0740 DEFINED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
SYMBOL0:            0748 DEFINED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
SYMBOL1:            074A DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
SYMBOL2:            0759 DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
IDENT:              0767 DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 376 IN Siena.asm
IDENT0:             076E DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
IDENT1:             0770 DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
IDENT2:             077F DEFINED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
IDENT3:             0793 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
FRAC:               0794 DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
SQRT1:              079A DEFINED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
ABS1:               07A7 DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
MOD:                07B4 DEFINED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
EQUALS:             07C0 DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
LESSTHANEQ:         07C8 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
LESSTHAN:           07CD DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
LESSTHAN1:          07D2 DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
TRUE1:              07D5 DEFINED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
FALSE1:             07DB DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
COMMENT:            07E1 DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
INPUT:              07EA DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
OUTPUT:             07F5 DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
HASHSTR:            07FE DEFINED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
HASHSTR1:           0801 DEFINED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
HASHSTR2:           0806 DEFINED AT LINE 1248 IN Siena.asm
DEFINEENTRY:        0817 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
DEFINEENTRY0:       081C DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
DEFINEENTRY1:       082B DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
DEFINEENTRY2:       0831 DEFINED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
DEFINEENTRY3:       0833 DEFINED AT LINE 1292 IN Siena.asm
                    > USED AT LINE 1274 IN Siena.asm
LOOKUPENTRY:        083D DEFINED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
LOOKUPENTRY0:       0842 DEFINED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
LOOKUPENTRY1:       0851 DEFINED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
LOOKUPENTRY2:       0857 DEFINED AT LINE 1328 IN Siena.asm
LOOKUPENTRY3:       0859 DEFINED AT LINE 1331 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
DIVIDE:             0861 DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 470 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
DIVIDE1:            0866 DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
DIVIDE2:            0873 DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
DIVIDE3:            0874 DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
SQUAREROOT:         087A DEFINED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
SQUAREROOT1:        087F DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
SQUAREROOT4:        089A DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
SQUAREROOT5:        08A1 DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
PRTDEC:             08A4 DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
PRTDEC0:            08B3 DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
PRTDEC1:            08D5 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
PRTDEC2:            08D7 DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
PRTDEC3:            08E7 DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
PRTDEC4:            08E8 DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
PRTHEX:             08EC DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
                    > USED AT LINE 426 IN Siena.asm
PRTHEX2:            08F7 DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
PRTHEX3:            0900 DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
PRTSTR0:            090B DEFINED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
PRTSTR:             090F DEFINED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
NESTING:            0914 DEFINED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 211 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
NESTING1A:          091F DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
NESTING1:           0922 DEFINED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
NESTING2:           0931 DEFINED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
NESTING3:           0933 DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
NESTING4:           093E DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
PROMPT:             0940 DEFINED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
CRLF:               0949 DEFINED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
PRINTSTR:           0950 DEFINED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 191 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 178
DEFINE:             0957 DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
INIT:               096F DEFINED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 190 IN Siena.asm
INIT1:              0989 DEFINED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 204 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 189 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 294 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1562 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 948 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 198 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 1568 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
