0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 83 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   B3                     DB   lsb(exit_)   ; NUL
0201   CB                     DB   lsb(nop_)   ; SOH
0202   CB                     DB   lsb(nop_)   ; STX
0203   B0                     DB   lsb(etx_)   ; ETX
0204   CB                     DB   lsb(nop_)   ; 
0205   CB                     DB   lsb(nop_)   ; 
0206   CB                     DB   lsb(nop_)   ; 
0207   CB                     DB   lsb(nop_)   ; 
0208   CB                     DB   lsb(nop_)   ; 
0209   CB                     DB   lsb(nop_)   ; 
020A   CB                     DB   lsb(nop_)   ; 
020B   CB                     DB   lsb(nop_)   ; 
020C   CB                     DB   lsb(nop_)   ; 
020D   CB                     DB   lsb(nop_)   ; 
020E   CB                     DB   lsb(nop_)   ; 
020F   CB                     DB   lsb(nop_)   ; 
0210   CB                     DB   lsb(nop_)   ; 
0211   CB                     DB   lsb(nop_)   ; 
0212   CB                     DB   lsb(nop_)   ; 
0213   CB                     DB   lsb(nop_)   ; 
0214   CB                     DB   lsb(nop_)   ; 
0215   CB                     DB   lsb(nop_)   ; 
0216   CB                     DB   lsb(nop_)   ; 
0217   CB                     DB   lsb(nop_)   ; 
0218   CB                     DB   lsb(nop_)   ; 
0219   CB                     DB   lsb(nop_)   ; 
021A   CB                     DB   lsb(nop_)   ; 
021B   CB                     DB   lsb(nop_)   ; 
021C   CB                     DB   lsb(nop_)   ; 
021D   CB                     DB   lsb(nop_)   ; 
021E   CB                     DB   lsb(nop_)   ; 
021F   CB                     DB   lsb(nop_)   ; 
0220   CB                     DB   lsb(nop_)   ; 
0221   CB                     DB   lsb(nop_)   ;    !
0222   CB                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   CB                     DB   lsb(nop_)   ;    %
0226   CB                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   21                     DB   lsb(block_)   ;    (
0229   24                     DB   lsb(blockend_)   ;    )
022A   CB                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   CB                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   15                     DB   lsb(dot_)   ;    .
022F   CB                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   CB                     DB   lsb(nop_)   ;    :
023B   CB                     DB   lsb(nop_)   ;    ;
023C   CB                     DB   lsb(nop_)   ;    <
023D   CB                     DB   lsb(nop_)   ;    =
023E   CB                     DB   lsb(nop_)   ;    >
023F   CB                     DB   lsb(nop_)   ;    ?
0240   B6                     DB   lsb(fetch_)   ;    @
0241   90                     DB   lsb(kall_)   ;    A
0242   90                     DB   lsb(kall_)   ;    B
0243   90                     DB   lsb(kall_)   ;    C
0244   90                     DB   lsb(kall_)   ;    D
0245   90                     DB   lsb(kall_)   ;    E
0246   90                     DB   lsb(kall_)   ;    F
0247   90                     DB   lsb(kall_)   ;    G
0248   90                     DB   lsb(kall_)   ;    h
0249   90                     DB   lsb(kall_)   ;    I
024A   90                     DB   lsb(kall_)   ;    J
024B   90                     DB   lsb(kall_)   ;    K
024C   90                     DB   lsb(kall_)   ;    L
024D   90                     DB   lsb(kall_)   ;    M
024E   90                     DB   lsb(kall_)   ;    N
024F   90                     DB   lsb(kall_)   ;    O
0250   90                     DB   lsb(kall_)   ;    p
0251   90                     DB   lsb(kall_)   ;    Q
0252   90                     DB   lsb(kall_)   ;    R
0253   90                     DB   lsb(kall_)   ;    S
0254   90                     DB   lsb(kall_)   ;    T
0255   90                     DB   lsb(kall_)   ;    U
0256   90                     DB   lsb(kall_)   ;    V
0257   90                     DB   lsb(kall_)   ;    W
0258   90                     DB   lsb(kall_)   ;    X
0259   90                     DB   lsb(kall_)   ;    Y
025A   90                     DB   lsb(kall_)   ;    Z
025B   2A                     DB   lsb(array_)   ;    [
025C   CB                     DB   lsb(nop_)   ;    \
025D   2D                     DB   lsb(arrayEnd_)   ;    ]
025E   CB                     DB   lsb(nop_)   ;    ^
025F   CB                     DB   lsb(nop_)   ;    _
0260   27                     DB   lsb(char_)   ;    `    	
0261   30                     DB   lsb(a_)   ;    a
0262   3C                     DB   lsb(var_)   ;    b
0263   33                     DB   lsb(c_)   ;    c
0264   36                     DB   lsb(d_)   ;    d
0265   39                     DB   lsb(e_)   ;    e
0266   3C                     DB   lsb(f_)   ;    f
0267   3F                     DB   lsb(g_)   ;    g
0268   3C                     DB   lsb(var_)   ;    h
0269   42                     DB   lsb(i_)   ;    i
026A   3C                     DB   lsb(var_)   ;    j
026B   45                     DB   lsb(k_)   ;    k
026C   48                     DB   lsb(l_)   ;    l
026D   4B                     DB   lsb(m_)   ;    m
026E   4B                     DB   lsb(m_)   ;    n
026F   51                     DB   lsb(o_)   ;    o
0270   54                     DB   lsb(p_)   ;    p
0271   3C                     DB   lsb(var_)   ;    q
0272   57                     DB   lsb(r_)   ;    r
0273   5A                     DB   lsb(s_)   ;    s
0274   3C                     DB   lsb(var_)   ;    t
0275   5D                     DB   lsb(u_)   ;    u
0276   3C                     DB   lsb(var_)   ;    v
0277   60                     DB   lsb(w_)   ;    w
0278   63                     DB   lsb(x_)   ;    x
0279   3C                     DB   lsb(var_)   ;    y
027A   3C                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   72                     DB   lsb(or_)   ;    |
027D   12                     DB   lsb(lambdaEnd_)   ;    }
027E   CB                     DB   lsb(nop_)   ;    ~
027F   CB                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                NESTINGSTR:      
0300   22 27 28 29 5B 5D 7B 7D 60 00 .CSTR   $22,"'()[]{}`"   
030A                ETX:         
030A   21 00 E6               LD   hl,-DSTACK   
030D   39                     ADD   hl,sp   
030E   30 03                  JR   nc,etx1   
0310   31 00 1A               LD   sp,DSTACK   
0313                ETX1:        
0313   18 16                  JR   interpret   
0315                START:       
0315   31 00 1A               LD   sp,DSTACK   ; start of Siena
0318   CD 83 08               CALL   init   ; setups
031B   CD A4 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
031E   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
032B                INTERPRET:      
032B   CD 9F 07               CALL   prompt   
032E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0331   ED 43 84 1B            LD   (vTIBPtr),bc   
0335                INTERPRET2:      ; calc nesting (a macro might have changed it)
0335   1E 00                  LD   e,0   ; initilize nesting value
0337   C5                     PUSH   bc   ; save offset into TIB,
0338                             ; bc is also the count of chars in TIB
0338   21 00 18               LD   hl,TIB   ; hl is start of TIB
033B   18 06                  JR   interpret4   
033D                INTERPRET3:      
033D   7E                     LD   a,(hl)   ; a = char in TIB
033E   23                     INC   hl   ; inc pointer into TIB
033F   0B                     DEC   bc   ; dec count of chars in TIB
0340   CD C9 08               CALL   nesting   ; update nesting value
0343                INTERPRET4:      
0343   79                     LD   a,c   ; is count zero?
0344   B0                     OR   b   
0345   20 F6                  JR   nz,interpret3   ; if not loop
0347   C1                     POP   bc   ; restore offset into TIB
0348                WAITCHAR:      
0348   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
034B   FE 20                  CP   $20   ; compare to space
034D   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
034F   FE 00                  CP   $0   ; is it end of string? null end of string
0351   28 45                  JR   z,waitchar4   
0353   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0355   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
0357                MACRO:       
0357   ED 43 84 1B            LD   (vTIBPtr),bc   
035B   21 80 1A               LD   hl,ctrlCodes   
035E   85                     ADD   a,l   ; look up key of macros
035F   6F                     LD   l,a   
0360   5E                     LD   e,(hl)   
0361   7B                     LD   a,e   
0362   B7                     OR   a   
0363   28 09                  JR   z,macro1   
0365   16 01                  LD   d,msb(macros)   
0367   D5                     PUSH   de   
0368   CD 25 09               CALL   exec   ; Siena exec_ operation and jump to it
036B   63 61 00               .CSTR   "ca"   
036E                MACRO1:      
036E   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0372   18 C1                  JR   interpret2   
0374                WAITCHAR1:      
0374   21 00 18               LD   hl,TIB   
0377   09                     ADD   hl,bc   
0378   77                     LD   (hl),a   ; store the character in textbuf
0379   03                     INC   bc   
037A   CD 85 00               CALL   putchar   ; echo character to screen
037D   CD C9 08               CALL   nesting   
0380   18 C6                  JR   waitchar   ; wait for next character
0382                WAITCHAR3:      
0382   21 00 18               LD   hl,TIB   
0385   09                     ADD   hl,bc   
0386   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0388   23                     INC   hl   
0389   36 0A                  LD   (hl),"\n"   
038B   23                     INC   hl   
038C   03                     INC   bc   
038D   03                     INC   bc   
038E   CD C7 07               CALL   crlf   ; echo character to screen
0391   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0392   B7                     OR   a   
0393   20 B3                  JR   nz,waitchar   
0395   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0397   03                     INC   bc   
0398                WAITCHAR4:      
0398   ED 43 84 1B            LD   (vTIBPtr),bc   
039C   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
039F   0B                     DEC   bc   
03A0                             ; ********************************************************************************
03A0                             ; 
03A0                             ; Dispatch Routine.
03A0                             ; 
03A0                             ; Get the next character and form a 1 byte jump address
03A0                             ; 
03A0                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
03A0                             ; jump to the selected function.
03A0                             ; 
03A0                             ; Individual handler routines will deal with each category:
03A0                             ; 
03A0                             ; 1. Detect characters a-z and jump to the User Command handler routine
03A0                             ; 
03A0                             ; 2. Detect characters a-z and jump to the variable handler routine
03A0                             ; 
03A0                             ; 3. All other characters are punctuation and cause a jump to the associated
03A0                             ; primitive code.
03A0                             ; 
03A0                             ; Instruction Pointer IP bc is incremented
03A0                             ; 
03A0                             ; *********************************************************************************
03A0                NEXT:        
03A0   03                     INC   bc   ;  Increment the IP
03A1   0A                     LD   a,(bc)   ;  Get the next character and dispatch
03A2   6F                     LD   l,a   ;  Index into table
03A3   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
03A5   6E                     LD   l,(hl)   ;  get low jump address
03A6   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
03A8   E9                     JP   (hl)   ;  Jump to routine
03A9                             ; **********************************************************************			
03A9                             ; Page 4 primitive routines
03A9                             ; **********************************************************************
03A9                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 CE 07               JP   num   
0403                HEXNUM_:      
0403   C3 FF 07               JP   hexnum   
0406                ARG_:        
0406   C3 D3 09               JP   arg   
0409                STRDEF_:      
0409   C3 F5 08               JP   strDef   
040C                NEWADD2_:      
040C   C3 1A 0A               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 3B 09               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 76 09               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD 1C 08               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   C3 A0 03               JP   next   
0421                BLOCK_:      
0421   C3 8B 09               JP   block   
0424                BLOCKEND_:      
0424   C3 BE 09               JP   blockend   
0427                CHAR_:       
0427   C3 0F 09               JP   char   
042A                ARRAY_:      
042A   C3 C5 0A               JP   array   
042D                ARRAYEND_:      
042D   C3 D8 0A               JP   arrayEnd   
0430                A_:          
0430   C3 5A 06               JP   a   
0433                C_:          
0433   C3 75 06               JP   c   
0436                D_:          
0436   C3 80 06               JP   d   
0439                E_:          
0439   C3 90 06               JP   e   
043C                F_:          
043C   C3 A0 06               JP   f   
043F                G_:          
043F   C3 AB 06               JP   g   
0442                I_:          
0442   C3 BB 06               JP   i   
0445                K_:          
0445   C3 DB 06               JP   k   
0448                L_:          
0448   C3 E9 06               JP   l   
044B                M_:          
044B   C3 F9 06               JP   m   
044E                N_:          
044E   C3 09 07               JP   n   
0451                O_:          
0451   C3 14 07               JP   o   
0454                P_:          
0454   C3 24 07               JP   p   
0457                R_:          
0457   C3 2F 07               JP   r   
045A                S_:          
045A   C3 3A 07               JP   s   
045D                U_:          
045D   C3 59 07               JP   u   
0460                W_:          
0460   C3 64 07               JP   w   
0463                X_:          
0463   C3 74 07               JP   x   
0466                AND_:        
0466   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0467   E1                     POP   hl   
0468   7B                     LD   a,e   
0469   A5                     AND   l   
046A   6F                     LD   l,a   
046B   7A                     LD   a,d   
046C   A4                     AND   h   
046D                AND1:        
046D   67                     LD   h,a   
046E   E5                     PUSH   hl   
046F   C3 A0 03               JP   next   
0472                OR_:         
0472   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0473   E1                     POP   hl   
0474   7B                     LD   a,e   
0475   B5                     OR   l   
0476   6F                     LD   l,a   
0477   7A                     LD   a,d   
0478   B4                     OR   h   
0479   18 F2                  JR   and1   
047B                XOR_:        
047B   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
047C                XOR1:        
047C   E1                     POP   hl   
047D   7B                     LD   a,e   
047E   AD                     XOR   l   
047F   6F                     LD   l,a   
0480   7A                     LD   a,d   
0481   AC                     XOR   h   
0482   18 E9                  JR   and1   
0484                INV_:        ; Bitwise INVert the top member of the stack
0484   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0487   18 F3                  JR   xor1   
0489                ADD_:        ; add the top 2 members of the stack
0489   D1                     POP   de   
048A   E1                     POP   hl   
048B   19                     ADD   hl,de   
048C   E5                     PUSH   hl   
048D   C3 A0 03               JP   next   
0490                KALL_:       
0490   0A                     LD   a,(bc)   
0491   CD B1 08               CALL   lookupRef1   
0494   5E                     LD   e,(hl)   
0495   23                     INC   hl   
0496   56                     LD   d,(hl)   
0497   C3 26 09               JP   exec1   
049A                HDOT_:       ; print hexadecimal
049A   E1                     POP   hl   
049B   CD 64 08               CALL   prthex   
049E   C3 19 04               JP   dot2   
04A1                DROP_:       ; Discard the top member of the stack
04A1   E1                     POP   hl   
04A2   C3 A0 03               JP   next   
04A5                UNDROP_:      
04A5   3B                     DEC   sp   
04A6   3B                     DEC   sp   
04A7   C3 A0 03               JP   next   
04AA                DUP_:        
04AA   E1                     POP   hl   ; Duplicate the top member of the stack
04AB   E5                     PUSH   hl   
04AC   E5                     PUSH   hl   
04AD   C3 A0 03               JP   next   
04B0                ETX_:        
04B0   C3 0A 03               JP   ETX   
04B3                EXIT_:       
04B3   C3 EF 09               JP   exit   
04B6                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B6   E1                     POP   hl   
04B7                FETCH1:      
04B7   5E                     LD   e,(hl)   
04B8   23                     INC   hl   
04B9   56                     LD   d,(hl)   
04BA   D5                     PUSH   de   
04BB   C3 A0 03               JP   next   
04BE                KEY_:        
04BE   CD 81 00               CALL   getchar   
04C1   26 00                  LD   h,0   
04C3   6F                     LD   l,a   
04C4   E5                     PUSH   hl   
04C5   C3 A0 03               JP   next   
04C8   C3 82 07     MUL_:     JP   mul   
04CB                NOP_:        
04CB   C3 A0 03               JP   next   ; hardwire white space to always exec_ to next (important for arrays)
04CE                OVER_:       
04CE   E1                     POP   hl   ; Duplicate 2nd element of the stack
04CF   D1                     POP   de   
04D0   D5                     PUSH   de   
04D1   E5                     PUSH   hl   
04D2   D5                     PUSH   de   ; and push it to top of stack
04D3   C3 A0 03               JP   next   
04D6                ROT_:        ; a b c -- b c a
04D6   D1                     POP   de   ; a b    de = c
04D7   E1                     POP   hl   ; a       hl = b
04D8   E3                     EX   (sp),hl   ; b       hl = a
04D9   D5                     PUSH   de   ; b c
04DA   E5                     PUSH   hl   ; b c a
04DB   C3 A0 03               JP   next   
04DE                             ;  Left shift { is multiply by 2		
04DE                SHL_:        
04DE   E1                     POP   hl   ; Duplicate the top member of the stack
04DF   29                     ADD   hl,hl   
04E0   E5                     PUSH   hl   ; shift left fallthrough into add_
04E1   C3 A0 03               JP   next   
04E4                             ;  Right shift } is a divide by 2		
04E4                SHR_:        
04E4   E1                     POP   hl   ; Get the top member of the stack
04E5                SHR1:        
04E5   CB 3C                  SRL   h   
04E7   CB 1D                  RR   l   
04E9   E5                     PUSH   hl   
04EA   C3 A0 03               JP   next   
04ED                STORE_:      ; Store the value at the address placed on the top of the stack
04ED   E1                     POP   hl   
04EE   D1                     POP   de   
04EF   73                     LD   (hl),e   
04F0   23                     INC   hl   
04F1   72                     LD   (hl),d   
04F2   C3 A0 03               JP   next   
04F5                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04F5   E1                     POP   hl   
04F6   E3                     EX   (sp),hl   
04F7   E5                     PUSH   hl   
04F8   C3 A0 03               JP   next   
04FB                NEG_:        
04FB   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04FE   D1                     POP   de   
04FF   18 02                  JR   sub2   ; use the SUBtract routine
0501                SUB_:        ; Subtract the value 2nd on stack from top of stack
0501   D1                     POP   de   
0502   E1                     POP   hl   ; Entry point for INVert
0503                SUB2:        
0503   B7                     OR   a   ; Entry point for NEGate
0504   ED 52                  SBC   hl,de   
0506   E5                     PUSH   hl   
0507   C3 A0 03               JP   next   
050A                EQ_:         
050A   E1                     POP   hl   
050B   D1                     POP   de   
050C   B7                     OR   a   ; reset the carry flag
050D   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
050F   28 15                  JR   z,true_   
0511                FALSE_:      
0511   21 00 00               LD   hl,0   
0514   E5                     PUSH   hl   
0515   C3 A0 03               JP   next   
0518                GT_:         
0518   D1                     POP   de   
0519   E1                     POP   hl   
051A   18 02                  JR   lt1   
051C                LT_:         
051C   E1                     POP   hl   
051D   D1                     POP   de   
051E                LT1:         
051E   B7                     OR   a   ; reset the carry flag
051F   ED 52                  SBC   hl,de   
0521   28 EE                  JR   z,false_   
0523   FA 11 05               JP   m,false_   
0526                TRUE_:       
0526   21 01 00               LD   hl,1   
0529   E5                     PUSH   hl   
052A   C3 A0 03               JP   next   
052D                GTE_:        
052D   D1                     POP   de   
052E   E1                     POP   hl   
052F   18 02                  JR   lte1   
0531                LTE_:        
0531   E1                     POP   hl   
0532   D1                     POP   de   
0533                LTE1:        
0533   B7                     OR   a   ; reset the carry flag
0534   ED 52                  SBC   hl,de   
0536   FA 11 05               JP   m,false_   
0539   C3 FF FF               JP   true   
053C                VAR_:        
053C   0A                     LD   a,(bc)   
053D   CD B7 08               CALL   lookupRef2   
0540   E5                     PUSH   hl   
0541   C3 A0 03               JP   next   
0544                DIV_:        
0544   18 04                  JR   div   
0546                             ;*******************************************************************
0546                             ; Page 5 primitive routines
0546                             ;*******************************************************************
0546                             ;falls through
0546   E5                     PUSH   hl   
0547   C3 A0 03               JP   next   
054A                             ; ********************************************************************
054A                             ; 16-bit division subroutine.
054A                             ; 
054A                             ; bc: divisor, de: dividend, hl: remainder
054A                             ; *********************************************************************
054A                             ; This divides de by bc, storing the result in de, remainder in hl
054A                             ; *********************************************************************
054A                             ; 1382 cycles
054A                             ; 35 bytes (reduced from 48)
054A                             ; 
054A                DIV:         ;=34
054A   D1                     POP   de   ; get first value
054B   E1                     POP   hl   ; get 2nd value
054C   C5                     PUSH   bc   ; Preserve the IP
054D   44                     LD   b,h   ; bc = 2nd value
054E   4D                     LD   c,l   
054F                             ; 
054F   21 00 00               LD   hl,0   ; Zero the remainder
0552   3E 10                  LD   a,16   ; Loop counter
0554                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0554   CB 21                  SLA   c   
0556   CB 10                  RL   b   
0558   ED 6A                  ADC   hl,hl   
055A   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
055C   38 03                  JR   c,div2   
055E   0C                     INC   c   
055F   18 01                  JR   div3   
0561                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
0561   19                     ADD   hl,de   
0562                DIV3:        
0562   3D                     DEC   a   
0563   20 EF                  JR   nz,div1   
0565   50                     LD   d,b   ; Result from bc to de
0566   59                     LD   e,c   
0567                DIV4:        
0567   C1                     POP   bc   ; Restore the IP
0568   D5                     PUSH   de   ; push Result
0569   E5                     PUSH   hl   ; push remainder
056A   C3 A0 03               JP   next   
056D                             ;=57
056D                             ; **************************************************************************
056D                             ; Page 6 Alt primitives
056D                             ; **************************************************************************
056D                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 A0 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 A0 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 A0 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 A0 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 A0 03               JP   next   
0623                             ; exec_:
0623                             ;     call exec1
0623                             ;     jp next
0623                             ; exec1:
0623                             ;     pop hl
0623                             ;     ex (sp),hl
0623                             ;     jp (hl)
0623                PROMPT_:      
0623   CD 9F 07               CALL   prompt   
0626   C3 A0 03               JP   next   
0629                INPORT_:      ; \<
0629   E1                     POP   hl   
062A   79                     LD   a,c   
062B   4D                     LD   c,l   
062C   ED 68                  IN   l,(c)   
062E   26 00                  LD   h,0   
0630   4F                     LD   c,a   
0631   E5                     PUSH   hl   
0632   C3 A0 03               JP   next   
0635                NEWLN_:      
0635   CD C7 07               CALL   crlf   
0638   C3 A0 03               JP   next   
063B                OUTPORT_:      
063B   E1                     POP   hl   
063C   59                     LD   e,c   
063D   4D                     LD   c,l   
063E   E1                     POP   hl   
063F   ED 69                  OUT   (c),l   
0641   4B                     LD   c,e   
0642   C3 A0 03               JP   next   
0645                PRTSTR_:      
0645                PRTSTR:      
0645   E1                     POP   hl   
0646   CD AC 07               CALL   putStr   
0649   C3 A0 03               JP   next   
064C                RPUSH_:      
064C   E1                     POP   hl   
064D   CD B1 07               CALL   rpush   
0650   C3 A0 03               JP   next   
0653                RPOP_:       
0653   CD BC 07               CALL   rpop   
0656   E5                     PUSH   hl   
0657   C3 A0 03               JP   next   
065A                             ; **************************************************************************
065A                             ; Page 6 primitive routines continued  (page 7)
065A                             ; **************************************************************************
065A                             ; falls through to following page
065A                A:           
065A   03                     INC   bc   
065B   0A                     LD   a,(bc)   
065C   FE 64                  CP   "d"   
065E   CA 89 04               JP   z,add_   
0661   FE 6E                  CP   "n"   
0663   CA 66 04               JP   z,and_   
0666   0B                     DEC   bc   
0667   C3 3C 05               JP   var_   
066A                B:           
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 79                  CP   "y"   
066E   CA BC 0A               JP   z,bytes   
0671   0B                     DEC   bc   
0672   C3 3C 05               JP   var_   
0675                C:           
0675   03                     INC   bc   
0676   0A                     LD   a,(bc)   
0677   FE 61                  CP   "a"   
0679   CA 85 0A               JP   z,case   
067C   0B                     DEC   bc   
067D   C3 3C 05               JP   var_   
0680                D:           
0680   03                     INC   bc   
0681   0A                     LD   a,(bc)   
0682   FE 65                  CP   "e"   
0684   CA 7F 07               JP   z,def_   
0687   FE 69                  CP   "i"   
0689   CA 44 05               JP   z,div_   
068C   0B                     DEC   bc   
068D   C3 3C 05               JP   var_   
0690                E:           
0690   03                     INC   bc   
0691   0A                     LD   a,(bc)   
0692   FE 78                  CP   "x"   
0694   CA 25 09               JP   z,exec   
0697   FE 71                  CP   "q"   
0699   CA 0A 05               JP   z,eq_   
069C   0B                     DEC   bc   
069D   C3 3C 05               JP   var_   
06A0                F:           
06A0   03                     INC   bc   
06A1   0A                     LD   a,(bc)   
06A2   FE 69                  CP   "i"   
06A4   CA 7F 07               JP   z,filter_   
06A7   0B                     DEC   bc   
06A8   C3 3C 05               JP   var_   
06AB                G:           
06AB   03                     INC   bc   
06AC   0A                     LD   a,(bc)   
06AD   FE 65                  CP   "e"   
06AF   CA 7F 07               JP   z,get_   
06B2   FE 74                  CP   "t"   
06B4   CA 18 05               JP   z,gt_   
06B7   0B                     DEC   bc   
06B8   C3 3C 05               JP   var_   
06BB                I:           
06BB   03                     INC   bc   
06BC   0A                     LD   a,(bc)   
06BD   FE 6E                  CP   "n"   
06BF   CA 04 0A               JP   z,in   
06C2   FE 76                  CP   "v"   
06C4   CA 84 04               JP   z,inv_   
06C7   FE 66                  CP   "f"   
06C9   C2 D7 06               JP   nz,i1   
06CC   03                     INC   bc   
06CD   0A                     LD   a,(bc)   
06CE   FE 65                  CP   "e"   
06D0   CA 4B 0A               JP   z,ife   
06D3   0B                     DEC   bc   
06D4   C3 46 0A               JP   if   
06D7                I1:          
06D7   0B                     DEC   bc   
06D8   C3 3C 05               JP   var_   
06DB                K:           
06DB   C3 74 07               JP   x   
06DE   03                     INC   bc   
06DF   0A                     LD   a,(bc)   
06E0   FE 65                  CP   "e"   
06E2   CA BE 04               JP   z,key_   
06E5   0B                     DEC   bc   
06E6   C3 3C 05               JP   var_   
06E9                L:           
06E9   03                     INC   bc   
06EA   0A                     LD   a,(bc)   
06EB   FE 65                  CP   "e"   
06ED   CA 7F 07               JP   z,let_   
06F0   FE 74                  CP   "t"   
06F2   CA 1C 05               JP   z,lt_   
06F5   0B                     DEC   bc   
06F6   C3 3C 05               JP   var_   
06F9                M:           
06F9   03                     INC   bc   
06FA   0A                     LD   a,(bc)   
06FB   FE 61                  CP   "a"   
06FD   CA 7F 07               JP   z,map_   
0700   FE 75                  CP   "u"   
0702   CA C8 04               JP   z,mul_   
0705   0B                     DEC   bc   
0706   C3 3C 05               JP   var_   
0709                N:           
0709   03                     INC   bc   
070A   0A                     LD   a,(bc)   
070B   FE 65                  CP   "e"   
070D   CA FB 04               JP   z,neg_   
0710   0B                     DEC   bc   
0711   C3 3C 05               JP   var_   
0714                O:           
0714   03                     INC   bc   
0715   0A                     LD   a,(bc)   
0716   FE 76                  CP   "v"   
0718   CA CE 04               JP   z,over_   
071B   FE 72                  CP   "r"   
071D   CA 72 04               JP   z,or_   
0720   0B                     DEC   bc   
0721   C3 3C 05               JP   var_   
0724                P:           
0724   03                     INC   bc   
0725   0A                     LD   a,(bc)   
0726   FE 72                  CP   "r"   
0728   CA 7F 07               JP   z,print_   
072B   0B                     DEC   bc   
072C   C3 3C 05               JP   var_   
072F                R:           
072F   03                     INC   bc   
0730   0A                     LD   a,(bc)   
0731   FE 6F                  CP   "o"   
0733   CA D6 04               JP   z,rot_   
0736   0B                     DEC   bc   
0737   C3 3C 05               JP   var_   
073A                S:           
073A   03                     INC   bc   
073B   0A                     LD   a,(bc)   
073C   FE 63                  CP   "c"   
073E   CA 7F 07               JP   z,scan_   
0741   FE 65                  CP   "e"   
0743                             ; jp nz,s1
0743                             ; inc bc
0743                             ; ld a,(bc)
0743                             ; cp "l"
0743                             ; jp z,select
0743                             ; cp "t"
0743   CA 7F 07               JP   z,set_   
0746                             ; dec bc
0746                             ; s1:
0746   FE 68                  CP   "h"   
0748   CA 7F 07               JP   z,shift_   
074B   FE 75                  CP   "u"   
074D   CA 01 05               JP   z,sub_   
0750   FE 77                  CP   "w"   
0752   CA 70 0A               JP   z,switch   
0755   0B                     DEC   bc   
0756   C3 3C 05               JP   var_   
0759                U:           
0759   03                     INC   bc   
075A   0A                     LD   a,(bc)   
075B   FE 6E                  CP   "n"   
075D   CA A5 04               JP   z,undrop_   
0760   0B                     DEC   bc   
0761   C3 3C 05               JP   var_   
0764                W:           
0764   03                     INC   bc   
0765   0A                     LD   a,(bc)   
0766   FE 68                  CP   "h"   
0768   CA 7F 07               JP   z,while_   
076B   FE 6F                  CP   "o"   
076D   CA B6 0A               JP   z,words   
0770   0B                     DEC   bc   
0771   C3 3C 05               JP   var_   
0774                X:           
0774   03                     INC   bc   
0775   0A                     LD   a,(bc)   
0776   FE 78                  CP   "x"   
0778   CA 7B 04               JP   z,xor_   
077B   0B                     DEC   bc   
077C   C3 3C 05               JP   var_   
077F                CLOSURE_:      
077F                DEF_:        
077F                FILTER_:      
077F                GET_:        
077F                IF_:         
077F                LET_:        
077F                MAP_:        
077F                PRINT_:      
077F                SCAN_:       
077F                SET_:        
077F                SHIFT_:      
077F                WHILE_:      
077F   C3 A0 03               JP   next   
0782                             ;*******************************************************************
0782                             ; Page 5 primitive routines continued
0782                             ;*******************************************************************
0782                             ; ********************************************************************
0782                             ; 16-bit multiply
0782                MUL:         ;=19
0782   D1                     POP   de   ; get first value
0783   E1                     POP   hl   
0784   C5                     PUSH   bc   ; Preserve the IP
0785   44                     LD   b,h   ; bc = 2nd value
0786   4D                     LD   c,l   
0787   21 00 00               LD   hl,0   
078A   3E 10                  LD   a,16   
078C                MUL2:        
078C   29                     ADD   hl,hl   
078D   CB 13                  RL   e   
078F   CB 12                  RL   d   
0791   30 04                  JR   nc,$+6   
0793   09                     ADD   hl,bc   
0794   30 01                  JR   nc,$+3   
0796   13                     INC   de   
0797   3D                     DEC   a   
0798   20 F2                  JR   nz,mul2   
079A   C1                     POP   bc   ; Restore the IP
079B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
079C   C3 A0 03               JP   next   
079F                             ;*******************************************************************
079F                             ; Subroutines
079F                             ;*******************************************************************
079F                PROMPT:      
079F   CD A4 08               CALL   printStr   
07A2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07A7   C9                     RET      
07A8                PUTSTR0:      
07A8   CD 85 00               CALL   putchar   
07AB   23                     INC   hl   
07AC                PUTSTR:      
07AC   7E                     LD   a,(hl)   
07AD   B7                     OR   a   
07AE   20 F8                  JR   nz,putStr0   
07B0   C9                     RET      
07B1                RPUSH:       
07B1   DD 2B                  DEC   ix   
07B3   DD 74 00               LD   (ix+0),h   
07B6   DD 2B                  DEC   ix   
07B8   DD 75 00               LD   (ix+0),l   
07BB   C9                     RET      
07BC                RPOP:        
07BC   DD 6E 00               LD   l,(ix+0)   
07BF   DD 23                  INC   ix   
07C1   DD 66 00               LD   h,(ix+0)   
07C4   DD 23                  INC   ix   
07C6                RPOP2:       
07C6   C9                     RET      
07C7                CRLF:        
07C7   CD A4 08               CALL   printStr   
07CA   0D 0A 00               .CSTR   "\r\n"   
07CD   C9                     RET      
07CE                             ;*******************************************************************
07CE                             ;*******************************************************************
07CE                NUM:         
07CE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07D1   0A                     LD   a,(bc)   ; Get numeral or -
07D2   FE 2D                  CP   "-"   
07D4   20 01                  JR   nz,num0   
07D6   03                     INC   bc   ; move to next char, no flags affected
07D7                NUM0:        
07D7   08                     EX   af,af'   ; save zero flag = 0 for later
07D8                NUM1:        
07D8   0A                     LD   a,(bc)   ; read digit
07D9   D6 30                  SUB   "0"   ; less than 0?
07DB   38 13                  JR   c,num2   ; not a digit, exit loop
07DD   FE 0A                  CP   10   ; greater that 9?
07DF   30 0F                  JR   nc,num2   ; not a digit, exit loop
07E1   03                     INC   bc   ; inc IP
07E2   54 5D                  LD   de,hl   ; multiply hl * 10
07E4   29                     ADD   hl,hl   
07E5   29                     ADD   hl,hl   
07E6   19                     ADD   hl,de   
07E7   29                     ADD   hl,hl   
07E8   85                     ADD   a,l   ; add digit in a to hl
07E9   6F                     LD   l,a   
07EA   3E 00                  LD   a,0   
07EC   8C                     ADC   a,h   
07ED   67                     LD   h,a   
07EE   18 E8                  JR   num1   
07F0                NUM2:        
07F0   0B                     DEC   bc   
07F1   08                     EX   af,af'   ; restore zero flag
07F2   20 07                  JR   nz,num3   
07F4   EB                     EX   de,hl   ; negate the value of hl
07F5   21 00 00               LD   hl,0   
07F8   B7                     OR   a   ; jump to sub2
07F9   ED 52                  SBC   hl,de   
07FB                NUM3:        
07FB   E5                     PUSH   hl   ; Put the number on the stack
07FC   C3 A0 03               JP   next   ; and process the next character
07FF                HEXNUM:      ; 
07FF   21 00 00               LD   hl,0   ; Clear hl to accept the number
0802                HEXNUM1:      
0802   03                     INC   bc   
0803   0A                     LD   a,(bc)   ; Get the character which is a numeral
0804   CB 77                  BIT   6,a   ; is it uppercase alpha?
0806   28 02                  JR   z,hexnum2   ; no a decimal
0808   D6 07                  SUB   7   ; sub 7  to make $a - $F
080A                HEXNUM2:      
080A   D6 30                  SUB   $30   ; Form decimal digit
080C   DA F0 07               JP   c,num2   
080F   FE 10                  CP   $0F+1   
0811   D2 F0 07               JP   nc,num2   
0814   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0815   29                     ADD   hl,hl   ; 4X
0816   29                     ADD   hl,hl   ; 8X
0817   29                     ADD   hl,hl   ; 16X
0818   85                     ADD   a,l   ; add into bottom of hl
0819   6F                     LD   l,a   ; 
081A   18 E6                  JR   hexnum1   
081C                PRTDEC:      ;=34 ; removes leading zeros
081C                             ; ld a,h
081C                             ; or l
081C                             ; ld a, "0"
081C                             ; jp z, putchar
081C   CB 7C                  BIT   7,h   
081E   28 0B                  JR   z,prtdec0   
0820   3E 2D                  LD   a,"-"   
0822   CD 85 00               CALL   putchar   
0825   AF                     XOR   a   
0826   95                     SUB   l   
0827   6F                     LD   l,a   
0828   9F                     SBC   a,a   
0829   94                     SUB   h   
082A   67                     LD   h,a   
082B                PRTDEC0:      
082B   C5                     PUSH   bc   
082C   0E 00                  LD   c,0   ; leading zeros flag = false
082E   11 F0 D8               LD   de,-10000   
0831   CD 4D 08               CALL   prtdec1   
0834   11 18 FC               LD   de,-1000   
0837   CD 4D 08               CALL   prtdec1   
083A   11 9C FF               LD   de,-100   
083D   CD 4D 08               CALL   prtdec1   
0840   1E F6                  LD   e,-10   
0842   CD 4D 08               CALL   prtdec1   
0845   0C                     INC   c   ; flag = true for at least digit
0846   1E FF                  LD   e,-1   
0848   CD 4D 08               CALL   prtdec1   
084B   C1                     POP   bc   
084C   C9                     RET      
084D                PRTDEC1:      
084D   06 2F                  LD   b,"0"-1   
084F                PRTDEC2:      
084F   04                     INC   b   
0850   19                     ADD   hl,de   
0851   38 FC                  JR   c,prtdec2   
0853   ED 52                  SBC   hl,de   
0855   3E 30                  LD   a,"0"   
0857   B8                     CP   b   
0858   20 05                  JR   nz,prtdec3   
085A   AF                     XOR   a   
085B   B1                     OR   c   
085C   C8                     RET   z   
085D   18 01                  JR   prtdec4   
085F                PRTDEC3:      
085F   0C                     INC   c   
0860                PRTDEC4:      
0860   78                     LD   a,b   
0861   C3 85 00               JP   putchar   
0864                             ; 
0864                PRTHEX:      
0864                             ; Display hl as a 16-bit number in hex.
0864   C5                     PUSH   bc   ; preserve the IP
0865   7C                     LD   a,h   
0866   CD 6F 08               CALL   prthex2   
0869   7D                     LD   a,l   
086A   CD 6F 08               CALL   prthex2   
086D   C1                     POP   bc   
086E   C9                     RET      
086F                PRTHEX2:      
086F   4F                     LD   c,a   
0870   1F                     RRA      
0871   1F                     RRA      
0872   1F                     RRA      
0873   1F                     RRA      
0874   CD 78 08               CALL   prthex3   
0877   79                     LD   a,c   
0878                PRTHEX3:      
0878   E6 0F                  AND   0x0F   
087A   C6 90                  ADD   a,0x90   
087C   27                     DAA      
087D   CE 40                  ADC   a,0x40   
087F   27                     DAA      
0880   C3 85 00               JP   putchar   
0883                INIT:        
0883   FD 21 00 1A            LD   iy,DSTACK   
0887   DD 21 80 19            LD   ix,RSTACK   
088B   21 80 01               LD   hl,ialtVars   
088E   11 80 1B               LD   de,altVars   
0891   01 10 00               LD   bc,8 * 2   
0894   ED B0                  LDIR      
0896   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
0899   54 5D                  LD   de,hl   
089B   13                     INC   de   
089C   36 00                  LD   (hl),0   
089E   01 68 00               LD   bc,DATASIZE   
08A1   ED B0                  LDIR      
08A3   C9                     RET      
08A4                PRINTSTR:      
08A4   E3                     EX   (sp),hl   ; swap			
08A5   CD AC 07               CALL   putStr   
08A8   23                     INC   hl   ; inc past null
08A9   E3                     EX   (sp),hl   ; put it back	
08AA   C9                     RET      
08AB                LOOKUPREF:      
08AB   16 00                  LD   d,0   
08AD                LOOKUPREF0:      
08AD   FE 61                  CP   "a"   
08AF   30 06                  JR   nc,lookupRef2   
08B1                LOOKUPREF1:      
08B1   D6 61                  SUB   "a"   
08B3   1E 00                  LD   e,0   
08B5   18 04                  JR   lookupRef3   
08B7                LOOKUPREF2:      
08B7   D6 61                  SUB   "a"   
08B9   1E 34                  LD   e,26*2   
08BB                LOOKUPREF3:      
08BB   87                     ADD   a,a   
08BC   83                     ADD   a,e   
08BD   21 C0 1B               LD   hl,DATA   
08C0   85                     ADD   a,l   
08C1   6F                     LD   l,a   
08C2   3E 00                  LD   a,0   
08C4   8C                     ADC   a,h   
08C5   67                     LD   h,a   
08C6   AF                     XOR   a   
08C7   B3                     OR   e   ; sets z flag if a-z
08C8   C9                     RET      
08C9                             ; **************************************************************************
08C9                             ; calculate nesting value
08C9                             ; a is char to be tested,
08C9                             ; e is the nesting value (initially 0)
08C9                             ; e is increased by ( and [
08C9                             ; e is decreased by ) and ]
08C9                             ; e has its bit 7 toggled by `
08C9                             ; limited to 127 levels
08C9                             ; **************************************************************************
08C9                NESTING:      
08C9   FE 22                  CP   $22   ; quote char
08CB   20 0A                  JR   nz,nesting1   
08CD   CB 7B                  BIT   7,e   
08CF   28 03                  JR   z,nesting1a   
08D1   CB BB                  RES   7,e   
08D3   C9                     RET      
08D4                NESTING1A:      
08D4   CB FB                  SET   7,e   
08D6   C9                     RET      
08D7                NESTING1:      
08D7   CB 7B                  BIT   7,e   
08D9   C0                     RET   nz   
08DA   FE 7B                  CP   "{"   
08DC   28 08                  JR   z,nesting2   
08DE   FE 5B                  CP   "["   
08E0   28 04                  JR   z,nesting2   
08E2   FE 28                  CP   "("   
08E4   20 02                  JR   nz,nesting3   
08E6                NESTING2:      
08E6   1C                     INC   e   
08E7   C9                     RET      
08E8                NESTING3:      
08E8   FE 7D                  CP   "}"   
08EA   28 07                  JR   z,nesting4   
08EC   FE 5D                  CP   "]"   
08EE   28 03                  JR   z,nesting4   
08F0   FE 29                  CP   ")"   
08F2   C0                     RET   nz   
08F3                NESTING4:      
08F3   1D                     DEC   e   
08F4   C9                     RET      
08F5                             ; 
08F5                STRDEF:      
08F5   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
08F9   D5                     PUSH   de   ; save start of string
08FA   03                     INC   bc   ; point to next char
08FB   18 03                  JR   strDef2   
08FD                STRDEF1:      
08FD   12                     LD   (de),a   
08FE   13                     INC   de   ; increase count
08FF   03                     INC   bc   ; point to next char
0900                STRDEF2:      
0900   0A                     LD   a,(bc)   
0901   FE 27                  CP   "'"   ; ' is the string terminator
0903   20 F8                  JR   nz,strDef1   
0905   AF                     XOR   a   ; write null to terminate string
0906   12                     LD   (de),a   
0907   13                     INC   de   
0908   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
090C   C3 A0 03               JP   next   
090F                CHAR:        
090F   21 00 00               LD   hl,0   ; if `` is empty
0912                CHAR1:       
0912   03                     INC   bc   ; point to next char
0913   0A                     LD   a,(bc)   
0914   FE 60                  CP   "`"   ; ` is the string terminator
0916   28 09                  JR   z,char3   
0918   FE 5C                  CP   $5c   ; \ is the escape
091A   20 02                  JR   nz,char2   
091C   03                     INC   bc   
091D   0A                     LD   a,(bc)   
091E                CHAR2:       
091E   6F                     LD   l,a   
091F   18 F1                  JR   char1   
0921                CHAR3:       
0921   E5                     PUSH   hl   
0922                             ; dec bc
0922   C3 A0 03               JP   next   
0925                EXEC:        ; execute lambda at pointer
0925   E1                     POP   hl   ; hl = pointer to lambda
0926                EXEC1:       
0926   7C                     LD   a,h   ; skip if destination address is null
0927   B5                     OR   l   
0928   28 0E                  JR   z,exec3   
092A                EXEC2:       
092A   C5                     PUSH   bc   ; push IP
092B   FD E5                  PUSH   iy   ; push SCP (scope pointer)
092D   FD E5                  PUSH   iy   ; push BP
092F   FD 21 00 00            LD   iy,0   ; BP = SP
0933   FD 39                  ADD   iy,sp   
0935   44 4D                  LD   bc,hl   ; IP = pointer to lambda
0937   0B                     DEC   bc   ; dec to prepare for next routine
0938                EXEC3:       
0938   C3 A0 03               JP   next   
093B                LAMBDA:      
093B   03                     INC   bc   
093C   2A 8E 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
093F   E5                     PUSH   hl   
0940   16 01                  LD   d,1   ; nesting: count first parenthesis
0942                LAMBDA1:      ; Skip to end of definition
0942   0A                     LD   a,(bc)   ; Get the next character
0943   03                     INC   bc   ; Point to next character
0944   77                     LD   (hl),a   
0945   23                     INC   hl   
0946   FE 27                  CP   "'"   
0948   28 1C                  JR   z,lambda2   
094A   FE 28                  CP   "("   
094C   28 18                  JR   z,lambda2   
094E   FE 29                  CP   ")"   
0950   28 14                  JR   z,lambda2   
0952   FE 7B                  CP   "{"   
0954   28 10                  JR   z,lambda2   
0956   FE 7D                  CP   "}"   ; Is it the end of the definition?
0958   28 0C                  JR   z,lambda2   
095A   FE 5B                  CP   "["   
095C   28 08                  JR   z,lambda2   
095E   FE 5D                  CP   "]"   
0960   28 04                  JR   z,lambda2   
0962   FE 60                  CP   "`"   
0964   20 DC                  JR   nz,lambda1   
0966                LAMBDA2:      
0966   14                     INC   d   
0967   CB 42                  BIT   0,d   ; balanced?
0969   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
096B   FE 7D                  CP   "}"   ; Is it the end of the definition?
096D   20 D3                  JR   nz,lambda1   ; get the next element
096F   0B                     DEC   bc   
0970   22 8E 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0973   C3 A0 03               JP   next   
0976                LAMBDAEND:      
0976   E1                     POP   hl   ; hl = last result
0977   FD 54                  LD   d,iyh   ; de = BP
0979   FD 5D                  LD   e,iyl   
097B   EB                     EX   de,hl   ; hl = BP, de = result
097C   F9                     LD   sp,hl   ; sp = BP
097D   E1                     POP   hl   ; hl = old BP
097E   C1                     POP   bc   ; pop scope ptr (discard)
097F   C1                     POP   bc   ; bc = IP
0980   F9                     LD   sp,hl   ; sp = old BP
0981   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0985   FD 39                  ADD   iy,sp   
0987   D5                     PUSH   de   ; push result
0988   C3 A0 03               JP   next   
098B                BLOCK:       
098B   03                     INC   bc   
098C   C5                     PUSH   bc   ; return first opcode of block
098D   16 01                  LD   d,1   ; nesting: count first parenthesis
098F                BLOCK1:      ; Skip to end of definition
098F   0A                     LD   a,(bc)   ; Get the next character
0990   03                     INC   bc   ; Point to next character
0991   FE 27                  CP   "'"   
0993   28 1C                  JR   z,block2   
0995   FE 28                  CP   "("   
0997   28 18                  JR   z,block2   
0999   FE 29                  CP   ")"   
099B   28 14                  JR   z,block2   
099D   FE 7B                  CP   "{"   
099F   28 10                  JR   z,block2   
09A1   FE 7D                  CP   "}"   
09A3   28 0C                  JR   z,block2   
09A5   FE 5B                  CP   "["   
09A7   28 08                  JR   z,block2   
09A9   FE 5D                  CP   "]"   
09AB   28 04                  JR   z,block2   
09AD   FE 60                  CP   "`"   
09AF   20 DE                  JR   nz,block1   
09B1                BLOCK2:      
09B1   14                     INC   d   
09B2   CB 42                  BIT   0,d   ; balanced?
09B4   20 D9                  JR   nz,block1   ; not balanced, get the next element
09B6   FE 29                  CP   ")"   ; Is it the end of the block?
09B8   20 D5                  JR   nz,block1   ; get the next element
09BA   0B                     DEC   bc   
09BB   C3 A0 03               JP   next   
09BE                BLOCKEND:      
09BE   E1                     POP   hl   ; hl = last result
09BF   FD 54                  LD   d,iyh   ; de = BP
09C1   FD 5D                  LD   e,iyl   
09C3   EB                     EX   de,hl   ; hl = BP, de = result
09C4   F9                     LD   sp,hl   ; sp = BP
09C5   E1                     POP   hl   ; hl = old BP
09C6   C1                     POP   bc   ; pop SCP (discard)
09C7   C1                     POP   bc   ; bc = IP
09C8   F9                     LD   sp,hl   ; sp = old BP
09C9   FD 21 00 00            LD   iy,0   ; iy = sp
09CD   FD 39                  ADD   iy,sp   
09CF   D5                     PUSH   de   ; push result
09D0   C3 A0 03               JP   next   
09D3                ARG:         
09D3   03                     INC   bc   ; get next char
09D4   0A                     LD   a,(bc)   
09D5   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09D7   E6 07                  AND   $07   ; mask
09D9   87                     ADD   a,a   ; double
09DA   6F                     LD   l,a   ; hl = offset into args
09DB   26 00                  LD   h,0   
09DD   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
09E0   FD 56 03               LD   d,(iy+3)   
09E3   EB                     EX   de,hl   ; hl = SCP - offset
09E4   B7                     OR   a   
09E5   ED 52                  SBC   hl,de   
09E7   2B                     DEC   hl   ; de = arg
09E8   56                     LD   d,(hl)   
09E9   2B                     DEC   hl   
09EA   5E                     LD   e,(hl)   
09EB   D5                     PUSH   de   ; push arg
09EC   C3 A0 03               JP   next   
09EF                             ; 
09EF                EXIT:        
09EF   50 59                  LD   de,bc   ; address of code after exit opcode
09F1   13                     INC   de   
09F2   D9                     EXX      
09F3   C1                     POP   bc   ; bc = last result
09F4   FD 54                  LD   d,iyh   ; de = BP
09F6   FD 5D                  LD   e,iyl   
09F8   EB                     EX   de,hl   ; hl = BP, de = result
09F9   F9                     LD   sp,hl   ; sp = BP
09FA   D9                     EXX      
09FB   E1                     POP   hl   ; hl = old BP
09FC   C1                     POP   bc   ; pop SCP (discard)
09FD   C1                     POP   bc   ; bc = IP
09FE   F9                     LD   sp,hl   ; sp = old BP
09FF   D9                     EXX      
0A00   C5                     PUSH   bc   ; push result
0A01   D9                     EXX      
0A02   EB                     EX   de,hl   
0A03   E9                     JP   (hl)   
0A04                IN:          
0A04   E1                     POP   hl   ; hl = string
0A05   D1                     POP   de   ; de = char
0A06                IN1:         
0A06   7E                     LD   a,(hl)   
0A07   23                     INC   hl   
0A08   FE 00                  CP   0   ; is end of string
0A0A   28 04                  JR   z,in2   
0A0C   BB                     CP   e   
0A0D   20 F7                  JR   nz,in1   
0A0F   B7                     OR   a   ; a is never 0, or a resets zero flag
0A10                IN2:         
0A10   21 00 00               LD   hl,0   ; hl = result
0A13   28 01                  JR   z,in3   
0A15   2B                     DEC   hl   ; if nz de = $ffff
0A16                IN3:         
0A16   E5                     PUSH   hl   ; push result
0A17   C3 A0 03               JP   next   
0A1A                NEWADD2:      
0A1A   C5                     PUSH   bc   ; push IP
0A1B   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A1E   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A21   D5                     PUSH   de   ; push SCP
0A22   FD E5                  PUSH   iy   ; push base pointer
0A24   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
0A28   FD 39                  ADD   iy,sp   ; 
0A2A   FD 56 FF               LD   d,(iy-1)   
0A2D   FD 5E FE               LD   e,(iy-2)   
0A30   FD 66 FD               LD   h,(iy-3)   
0A33   FD 6E FC               LD   l,(iy-4)   
0A36   19                     ADD   hl,de   ; hl = hl + de
0A37   EB                     EX   de,hl   ; de = result
0A38   E1                     POP   hl   ; hl = old BP
0A39   C1                     POP   bc   ; pop SCP (discard)
0A3A   C1                     POP   bc   ; bc = IP
0A3B   F9                     LD   sp,hl   ; sp = old BP
0A3C   FD 21 00 00            LD   iy,0   
0A40   FD 39                  ADD   iy,sp   
0A42   D5                     PUSH   de   ; push result
0A43   C3 A0 03               JP   next   
0A46                IF:          
0A46   11 00 00               LD   de,0   ; null pointer for else
0A49   18 01                  JR   ife1   
0A4B                IFE:         
0A4B   D1                     POP   de   ; de = else
0A4C                IFE1:        
0A4C   E1                     POP   hl   ; hl = then
0A4D   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A4E   23                     INC   hl   ; check for true
0A4F   7C                     LD   a,h   
0A50   B5                     OR   l   
0A51   E1                     POP   hl   ; hl = then
0A52   28 01                  JR   z,ife2   
0A54   EB                     EX   de,hl   ; condition = false, hl = else
0A55                IFE2:        
0A55   7C                     LD   a,h   ; check if hl is null
0A56   B5                     OR   l   
0A57   CA A0 03               JP   z,next   
0A5A   C5                     PUSH   bc   ; push IP
0A5B   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A5E   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A61   D5                     PUSH   de   ; push SCP
0A62   FD E5                  PUSH   iy   ; push BP
0A64   FD 21 00 00            LD   iy,0   ; iy = sp
0A68   FD 39                  ADD   iy,sp   
0A6A   44 4D                  LD   bc,hl   ; IP = then
0A6C   0B                     DEC   bc   
0A6D   C3 A0 03               JP   next   
0A70                SWITCH:      
0A70   E1                     POP   hl   ; get condition from stack
0A71   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0A72   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A75   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A78   D5                     PUSH   de   ; push SCP
0A79   FD E5                  PUSH   iy   ; push BP
0A7B   FD 21 00 00            LD   iy,0   ; BP = SP
0A7F   FD 39                  ADD   iy,sp   
0A81   E5                     PUSH   hl   ; push condition as first arg of new frame
0A82   C3 A0 03               JP   next   
0A85                CASE:        
0A85   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0A88   FD 6E FE               LD   l,(iy-2)   
0A8B   23                     INC   hl   ; hl -= 1 index from second arg
0A8C   29                     ADD   hl,hl   ; hl *= 2 word offset
0A8D   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0A8F   FD 5D                  LD   e,iyl   
0A91   EB                     EX   de,hl   
0A92   B7                     OR   a   ; hl = BP - offset
0A93   ED 52                  SBC   hl,de   
0A95   54 5D                  LD   de,hl   ; save arg ptr
0A97   2B                     DEC   hl   ; hl += 2
0A98   2B                     DEC   hl   
0A99   B7                     OR   a   ; arg ptr - stack pointer
0A9A   ED 72                  SBC   hl,sp   
0A9C   30 03                  JR   nc,case0   
0A9E   D1                     POP   de   ; pop last arg
0A9F   18 05                  JR   case1   
0AA1                CASE0:       
0AA1   EB                     EX   de,hl   
0AA2   2B                     DEC   hl   ; de = arg
0AA3   56                     LD   d,(hl)   
0AA4   2B                     DEC   hl   
0AA5   5E                     LD   e,(hl)   
0AA6                CASE1:       
0AA6   7A                     LD   a,d   ; is arg == null ? then skip
0AA7   B3                     OR   e   
0AA8   28 09                  JR   z,case2   
0AAA   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0AAD   FD 70 05               LD   (iy+5),b   
0AB0   42 4B                  LD   bc,de   ; IP = arg
0AB2   0B                     DEC   bc   
0AB3                CASE2:       
0AB3   C3 A0 03               JP   next   
0AB6                WORDS:       
0AB6   21 02 00               LD   hl,2   
0AB9   C3 BC 0A               JP   bytes   
0ABC                BYTES:       
0ABC   21 01 00               LD   hl,1   
0ABF                BYTES1:      
0ABF   22 82 1B               LD   (vDataWidth),hl   
0AC2   C3 A0 03               JP   next   
0AC5                ARRAY:       
0AC5   C5                     PUSH   bc   ; create stack frame, push IP
0AC6   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AC9   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0ACC   D5                     PUSH   de   ; push SCP
0ACD   FD E5                  PUSH   iy   ; push BP
0ACF   FD 21 00 00            LD   iy,0   ; BP = SP
0AD3   FD 39                  ADD   iy,sp   
0AD5   C3 A0 03               JP   next   
0AD8                ARRAYEND:      
0AD8   FD 54                  LD   d,iyh   ; de = BP
0ADA   FD 5D                  LD   e,iyl   
0ADC   62 6B                  LD   hl,de   ; hl = de
0ADE   B7                     OR   a   
0ADF   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0AE1   C5                     PUSH   bc   ; bc' = IP
0AE2   D9                     EXX      
0AE3   C1                     POP   bc   
0AE4   D9                     EXX      
0AE5   44 4D                  LD   bc,hl   ; bc = count
0AE7   2A 8E 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0AEA   71                     LD   (hl),c   ; write count before array data
0AEB   23                     INC   hl   
0AEC   70                     LD   (hl),b   
0AED   23                     INC   hl   
0AEE   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0AEF   D9                     EXX      
0AF0   E1                     POP   hl   ; hl' = ptr to array (index 0)
0AF1   D9                     EXX      
0AF2   3A 82 1B               LD   a,(vDataWidth)   
0AF5   FE 01                  CP   1   ; byte?
0AF7   20 0D                  JR   nz,arrayEnd2   
0AF9   EB                     EX   de,hl   
0AFA                ARRAYEND1:      
0AFA   1B                     DEC   de   
0AFB   1B                     DEC   de   
0AFC   1A                     LD   a,(de)   
0AFD   77                     LD   (hl),a   
0AFE   23                     INC   hl   
0AFF   0B                     DEC   bc   
0B00   79                     LD   a,c   
0B01   B0                     OR   b   
0B02   20 F6                  JR   nz,arrayEnd1   
0B04   18 10                  JR   arrayEnd4   
0B06                ARRAYEND2:      
0B06   1B                     DEC   de   
0B07   1A                     LD   a,(de)   
0B08   08                     EX   af,af'   
0B09   1B                     DEC   de   
0B0A   1A                     LD   a,(de)   
0B0B   77                     LD   (hl),a   
0B0C   23                     INC   hl   
0B0D   08                     EX   af,af'   
0B0E   1A                     LD   a,(de)   
0B0F   77                     LD   (hl),a   
0B10   23                     INC   hl   
0B11   0B                     DEC   bc   
0B12   79                     LD   a,c   
0B13   B0                     OR   b   
0B14   20 F0                  JR   nz,arrayEnd2   
0B16                ARRAYEND4:      
0B16   FD 54                  LD   d,iyh   ; de = BP
0B18   FD 5D                  LD   e,iyl   
0B1A   EB                     EX   de,hl   ; hl = BP, de = result
0B1B   F9                     LD   sp,hl   ; sp = BP
0B1C   E1                     POP   hl   ; hl = old BP
0B1D   C1                     POP   bc   ; pop SCP (discard)
0B1E   C1                     POP   bc   ; bc = IP
0B1F   F9                     LD   sp,hl   ; sp = old BP
0B20   FD 21 00 00            LD   iy,0   ; iy = sp
0B24   FD 39                  ADD   iy,sp   
0B26   D9                     EXX      
0B27   E5                     PUSH   hl   
0B28   C5                     PUSH   bc   
0B29   D9                     EXX      
0B2A   C1                     POP   bc   
0B2B   C3 A0 03               JP   next   
0B2E                             ; arrayEnd3:                      ; word
0B2E                             ;     add hl,hl
0B2E                             ;     add hl,de
0B2E                             ;     pop de
0B2E                             ;     cp 2
0B2E                             ;     ld (hl),d
0B2E                             ;     dec hl
0B2E                             ;     ld (hl),e
0B2E                             ;     dec hl
0B2E                             ;     dec bc
0B2E                             ;     ex af,af'
0B2E                             ;     ld a,c
0B2E                             ;     or b
0B2E                             ;     jr nz
0B2E                             ; add hl,sp
0B2E                             ; pop
0B2E                             ; cp 2
0B2E                             ; jr nz,
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                          DS   2   ; a
1B82                VDATAWIDTH:   DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "by [`A` `B` `C`]", 0
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 83 08               CALL   init   
4006   CD 25 09               CALL   exec   
4009   62 79 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 00 .CSTR   "by [`A` `B` `C`]"   
401A                          ;*Macro unroll:  expect "by [`A` `B` `C`]",0
401A   E1                     POP   HL   
401B   E5                     PUSH   HL   
401C   11 00 00               LD   DE,0   
401F   B7                     OR   A   
4020   ED 52                  SBC   HL,DE   
4022   7D                     LD   A,L   
4023   B4                     OR   H   
4024   28 5B                  JR   Z,expectM_0_2286S43   
4026   CD A4 08               CALL   printStr   
4029   43 6F 64 65 3A 20 62 79 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 00 .CSTR   "Code: ","by [`A` `B` `C`]"   
4040   CD A4 08               CALL   printStr   
4043   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4052   21 00 00               LD   HL,0   
4055   CD 1C 08               CALL   prtdec   
4058   CD A4 08               CALL   printStr   
405B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4068   E1                     POP   hl   
4069   E5                     PUSH   hl   
406A   CD 1C 08               CALL   prtdec   
406D   E1                     POP   hl   
406E   CD A4 08               CALL   printStr   
4071   20 28 23 00            .CSTR   " (#"   
4075   CD 64 08               CALL   prthex   
4078   CD A4 08               CALL   printStr   
407B   29 0D 0A 00            .CSTR   ")\r\n"   
407F   76                     HALT      
4080   00                     .CSTR      
4081                EXPECTM_0_2286S43:      
4081   E1                     POP   HL   
4082                             ; test "by [`A` `B` `C`] 1 ge", "B"
4082                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
4082                             ; test "wo [10 20 30] 1 ge", 10
4082                             ; test "wo [10 20 30] 1 50 set 1 get", 50
4082                             ; test "1 2 +", 3
4082                             ; test "4 1 2 +", 3
4082                             ; test "1", 1
4082                             ; test "2", 2
4082                             ; test "``", 0
4082                             ; test "`a`", $61
4082                             ; test "`\\``", $60
4082                             ; test "`b` 'cba' in", -1
4082                             ; test "`x` 'cba' in", 0
4082                             ; test "5 0 (1) if", 5
4082                             ; test "0 (1) (2) ife", 2
4082                             ; test "5 -1 (1) if", 1
4082                             ; test "-1 (1) (2) ife", 1
4082                             ; test "9 sw (1) (5) ca", 5
4082                             ; test "0 sw (1) ca", 1
4082                             ; test "1 sw (1) (2) (3) ca", 2
4082                             ; test "5 -1 (2) if", 2
4082                             ; test "5 0 (2) if", 5
4082                             ; test "5 0 (0 (2) if) if", 5
4082                             ; test "5 0 (-1 (2) if) if", 5
4082                             ; test "5 -1 (2) if", 2
4082                             ; test "5 -1 (-1 (2) if) if", 2
4082                             ; test "(1) ex", 1
4082                             ; test "2 ($1) ex", 2
4082                             ; test "2 4 ($2) ex", 4
4082                             ; test "((1) ex) ex", 1
4082                             ; test "5 (-1 ($1) if) ex", 5
4082                             ; test "'A' @", 65
4082                             ; test "1", 1
4082                             ; test "0", 0
4082                             ; test "10", 10
4082                             ; test "123", 123
4082                             ; test "$10", $10
4082                             ; test "$FF", $FF
4082                             ; test "2 3 =", 0
4082                             ; test "3 3 =", 1
4082                             ; test "2 3 <", 1
4082                             ; test "3 3 <", 0
4082                             ; test "3 3 >", 0
4082                             ; test "4 3 >", 1
4082                             ; test "1 2 +", 3
4082                             ; test "123 456 +", 123+456
4082                             ; test "64 128 +", 64+128
4082                             ; test "5 3 -", 2
4082                             ; test "3 5 &", 1
4082                             ; test "3 5 |", 7
4082                             ; test "2 3 *", 6
4082                             ; test "1 2 3 + *", 5
4082                             ; ; test "1 2 3 ' +", 3
4082                             ; ; test "1_ 2 +",1
4082                             ; ; test "1_ 1 +",0
4082                             ; ; call enter
4082                             ; ;     .cstr "1 3",$22,"+"
4082                             ; ; expect "1 3 DUP +", 6
4082                             ; ; test "5 2/'", 2
4082                             ; ; test "3 5$ -", 2
4082                             ; ; test "5 2/$ '", 1
4082                             ; ; test "2 3%++", 7
4082                             ; ; test "1 2 3~''", 2
4082                             ; ; test "1 2 3~+*", 8
4082                             ; ; test "2a!a@",2
4082                             ; ; test "3x! 1 x@+x! x@", 4
4082                             ; ; test "3x! 1_ x@+x! x@", 2
4082                             ; ; test "1{", 2
4082                             ; ; test "1}", 0
4082                             ; ; test "2}", 1
4082                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4082                             ; ; test "(2) \\^", 2
4082                             ; ; test ":X1; X", 1
4082                             ; ; test ":A100;A", 100
4082                             ; ; test ":Aa!; 3A a@", 3
4082                             ; ; test ":Aa!;:Ba@;4AB", 4
4082                             ; ; test "[]$ '", 0
4082                             ; ; test "[3]$ '", 1
4082                             ; ; test "[3]'@", 3
4082                             ; ; test "[1 2 3]'@", 1
4082                             ; ; test "[1 2 3]'2+@", 2
4082                             ; ; test "\\h@[1]''\\h@$-", 2
4082                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4082                             ; ; test "\\[]$ '", 0
4082                             ; ; test "\\[3]'\\@", 3
4082                             ; ; test "\\[3]$ '", 1
4082                             ; ; test "\\[1 2 3]'\\@", 1
4082                             ; ; test "\\[1 2 3]'1+\\@", 2
4082                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4082                             ; ; test "\\h@\\[1]''\\h@$-", 1
4082                             ; ; test "\\`A`\\@",65
4082                             ; ; test "0 0(1+)", 0
4082                             ; ; test "0 1(1+)", 1
4082                             ; ; test "0 2(1+)", 2
4082                             ; ; test "0 1(0(1+))", 0
4082                             ; ; test "0 1(1(1+))", 1
4082                             ; ; test "0 2(1(1+))", 2
4082                             ; ; test "0 2(2(1+))", 4
4082                             ; ; test "0 1(\\i@+)", 0
4082                             ; ; test "0 2(\\i@+)", 1
4082                             ; ; test "0 3(\\i@+)", 3
4082                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4082                             ; ; test "0t! 10(1 t@+t!) t@",10
4082                             ; ; test "0(100)(200)",200
4082                             ; ; test "1(100)(200)",100
4082                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4082                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4082                             ; ; test ":X10;\\0X", 10
4082                             ; ; test "2 \\1x! \\1x@", 2
4082   CD A4 08               CALL   printStr   
4085   44 6F 6E 65 21 00      .CSTR   "Done!"   
408B   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 351 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 713 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
NESTINGSTR:         0300 DEFINED AT LINE 308 IN Siena.asm
ETX:                030A DEFINED AT LINE 311 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
ETX1:               0313 DEFINED AT LINE 316 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
START:              0315 DEFINED AT LINE 319 IN Siena.asm
INTERPRET:          032B DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
INTERPRET2:         0335 DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
INTERPRET3:         033D DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
INTERPRET4:         0343 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
WAITCHAR:           0348 DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
MACRO:              0357 DEFINED AT LINE 359 IN Siena.asm
MACRO1:             036E DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
WAITCHAR1:          0374 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
WAITCHAR3:          0382 DEFINED AT LINE 385 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
WAITCHAR4:          0398 DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
NEXT:               03A0 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 555 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 619 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
                    > USED AT LINE 657 IN Siena.asm
                    > USED AT LINE 671 IN Siena.asm
                    > USED AT LINE 682 IN Siena.asm
                    > USED AT LINE 700 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
                    > USED AT LINE 779 IN Siena.asm
                    > USED AT LINE 790 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
                    > USED AT LINE 811 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
                    > USED AT LINE 840 IN Siena.asm
                    > USED AT LINE 844 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
                    > USED AT LINE 865 IN Siena.asm
                    > USED AT LINE 870 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1792 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 441 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 443 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 445 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 447 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 449 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 451 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 453 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 455 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 457 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
BLOCK_:             0421 DEFINED AT LINE 464 IN Siena.asm
BLOCKEND_:          0424 DEFINED AT LINE 466 IN Siena.asm
CHAR_:              0427 DEFINED AT LINE 468 IN Siena.asm
ARRAY_:             042A DEFINED AT LINE 470 IN Siena.asm
ARRAYEND_:          042D DEFINED AT LINE 472 IN Siena.asm
A_:                 0430 DEFINED AT LINE 474 IN Siena.asm
C_:                 0433 DEFINED AT LINE 476 IN Siena.asm
D_:                 0436 DEFINED AT LINE 478 IN Siena.asm
E_:                 0439 DEFINED AT LINE 480 IN Siena.asm
F_:                 043C DEFINED AT LINE 482 IN Siena.asm
G_:                 043F DEFINED AT LINE 484 IN Siena.asm
I_:                 0442 DEFINED AT LINE 486 IN Siena.asm
K_:                 0445 DEFINED AT LINE 488 IN Siena.asm
L_:                 0448 DEFINED AT LINE 490 IN Siena.asm
M_:                 044B DEFINED AT LINE 492 IN Siena.asm
N_:                 044E DEFINED AT LINE 494 IN Siena.asm
O_:                 0451 DEFINED AT LINE 496 IN Siena.asm
P_:                 0454 DEFINED AT LINE 498 IN Siena.asm
R_:                 0457 DEFINED AT LINE 500 IN Siena.asm
S_:                 045A DEFINED AT LINE 502 IN Siena.asm
U_:                 045D DEFINED AT LINE 504 IN Siena.asm
W_:                 0460 DEFINED AT LINE 506 IN Siena.asm
X_:                 0463 DEFINED AT LINE 508 IN Siena.asm
AND_:               0466 DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
AND1:               046D DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
OR_:                0472 DEFINED AT LINE 525 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
XOR_:               047B DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
XOR1:               047C DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 548 IN Siena.asm
INV_:               0484 DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
ADD_:               0489 DEFINED AT LINE 550 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
KALL_:              0490 DEFINED AT LINE 557 IN Siena.asm
HDOT_:              049A DEFINED AT LINE 565 IN Siena.asm
DROP_:              04A1 DEFINED AT LINE 570 IN Siena.asm
UNDROP_:            04A5 DEFINED AT LINE 574 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
DUP_:               04AA DEFINED AT LINE 579 IN Siena.asm
ETX_:               04B0 DEFINED AT LINE 584 IN Siena.asm
EXIT_:              04B3 DEFINED AT LINE 587 IN Siena.asm
FETCH_:             04B6 DEFINED AT LINE 590 IN Siena.asm
FETCH1:             04B7 DEFINED AT LINE 592 IN Siena.asm
KEY_:               04BE DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 964 IN Siena.asm
MUL_:               04C8 DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
NOP_:               04CB DEFINED AT LINE 609 IN Siena.asm
OVER_:              04CE DEFINED AT LINE 613 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
ROT_:               04D6 DEFINED AT LINE 621 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
SHL_:               04DE DEFINED AT LINE 630 IN Siena.asm
SHR_:               04E4 DEFINED AT LINE 637 IN Siena.asm
SHR1:               04E5 DEFINED AT LINE 639 IN Siena.asm
STORE_:             04ED DEFINED AT LINE 645 IN Siena.asm
SWAP_:              04F5 DEFINED AT LINE 653 IN Siena.asm
NEG_:               04FB DEFINED AT LINE 659 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
SUB_:               0501 DEFINED AT LINE 664 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
SUB2:               0503 DEFINED AT LINE 667 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
EQ_:                050A DEFINED AT LINE 673 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
FALSE_:             0511 DEFINED AT LINE 679 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
GT_:                0518 DEFINED AT LINE 684 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
LT_:                051C DEFINED AT LINE 689 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
LT1:                051E DEFINED AT LINE 692 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
TRUE_:              0526 DEFINED AT LINE 697 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
GTE_:               052D DEFINED AT LINE 702 IN Siena.asm
LTE_:               0531 DEFINED AT LINE 706 IN Siena.asm
LTE1:               0533 DEFINED AT LINE 709 IN Siena.asm
                    > USED AT LINE 705 IN Siena.asm
VAR_:               053C DEFINED AT LINE 716 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
                    > USED AT LINE 966 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
DIV_:               0544 DEFINED AT LINE 723 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
DIV:                054A DEFINED AT LINE 748 IN Siena.asm
                    > USED AT LINE 724 IN Siena.asm
DIV1:               0554 DEFINED AT LINE 758 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
DIV2:               0561 DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
DIV3:               0562 DEFINED AT LINE 769 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
DIV4:               0567 DEFINED AT LINE 774 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 787 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 789 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 792 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 799 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 807 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 813 IN Siena.asm
PROMPT_:            0623 DEFINED AT LINE 827 IN Siena.asm
INPORT_:            0629 DEFINED AT LINE 832 IN Siena.asm
NEWLN_:             0635 DEFINED AT LINE 842 IN Siena.asm
OUTPORT_:           063B DEFINED AT LINE 846 IN Siena.asm
PRTSTR_:            0645 DEFINED AT LINE 855 IN Siena.asm
PRTSTR:             0645 DEFINED AT LINE 856 IN Siena.asm
RPUSH_:             064C DEFINED AT LINE 862 IN Siena.asm
RPOP_:              0653 DEFINED AT LINE 867 IN Siena.asm
A:                  065A DEFINED AT LINE 876 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 516 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 878 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
                    > USED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
B:                  066A DEFINED AT LINE 886 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 346 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
                    > USED AT LINE 760 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
C:                  0675 DEFINED AT LINE 894 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 848 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
D:                  0680 DEFINED AT LINE 902 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 794 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
E:                  0690 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
                    > USED AT LINE 848 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
F:                  06A0 DEFINED AT LINE 922 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
G:                  06AB DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
I:                  06BB DEFINED AT LINE 940 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
I1:                 06D7 DEFINED AT LINE 955 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
K:                  06DB DEFINED AT LINE 959 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
L:                  06E9 DEFINED AT LINE 968 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 516 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 8
M:                  06F9 DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
N:                  0709 DEFINED AT LINE 988 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
O:                  0714 DEFINED AT LINE 996 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
P:                  0724 DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
R:                  072F DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
S:                  073A DEFINED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
U:                  0759 DEFINED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
W:                  0764 DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
X:                  0774 DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
CLOSURE_:           077F DEFINED AT LINE 1071 IN Siena.asm
DEF_:               077F DEFINED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
FILTER_:            077F DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
GET_:               077F DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
IF_:                077F DEFINED AT LINE 1075 IN Siena.asm
LET_:               077F DEFINED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
MAP_:               077F DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
PRINT_:             077F DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
SCAN_:              077F DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
SET_:               077F DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
SHIFT_:             077F DEFINED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1037 IN Siena.asm
WHILE_:             077F DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
MUL:                0782 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
MUL2:               078C DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
PROMPT:             079F DEFINED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
PUTSTR0:            07A8 DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
PUTSTR:             07AC DEFINED AT LINE 1128 IN Siena.asm
                    > USED AT LINE 858 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
RPUSH:              07B1 DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 864 IN Siena.asm
RPOP:               07BC DEFINED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
RPOP2:              07C6 DEFINED AT LINE 1146 IN Siena.asm
CRLF:               07C7 DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 843 IN Siena.asm
NUM:                07CE DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
NUM0:               07D7 DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
NUM1:               07D8 DEFINED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
NUM2:               07F0 DEFINED AT LINE 1184 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
NUM3:               07FB DEFINED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
HEXNUM:             07FF DEFINED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
HEXNUM1:            0802 DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
HEXNUM2:            080A DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
PRTDEC:             081C DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            082B DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
PRTDEC1:            084D DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
PRTDEC2:            084F DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1253 IN Siena.asm
PRTDEC3:            085F DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1257 IN Siena.asm
PRTDEC4:            0860 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
PRTHEX:             0864 DEFINED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            086F DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1274 IN Siena.asm
PRTHEX3:            0878 DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
INIT:               0883 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 40
PRINTSTR:           08A4 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 142
LOOKUPREF:          08AB DEFINED AT LINE 1316 IN Siena.asm
LOOKUPREF0:         08AD DEFINED AT LINE 1318 IN Siena.asm
LOOKUPREF1:         08B1 DEFINED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
LOOKUPREF2:         08B7 DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
LOOKUPREF3:         08BB DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
NESTING:            08C9 DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
NESTING1A:          08D4 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
NESTING1:           08D7 DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
NESTING2:           08E6 DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
NESTING3:           08E8 DEFINED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
NESTING4:           08F3 DEFINED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
STRDEF:             08F5 DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
STRDEF1:            08FD DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
STRDEF2:            0900 DEFINED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
CHAR:               090F DEFINED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
CHAR1:              0912 DEFINED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
CHAR2:              091E DEFINED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
CHAR3:              0921 DEFINED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
EXEC:               0925 DEFINED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              0926 DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
EXEC2:              092A DEFINED AT LINE 1429 IN Siena.asm
EXEC3:              0938 DEFINED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1428 IN Siena.asm
LAMBDA:             093B DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
LAMBDA1:            0942 DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
LAMBDA2:            0966 DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
LAMBDAEND:          0976 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
BLOCK:              098B DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
BLOCK1:             098F DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
BLOCK2:             09B1 DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
BLOCKEND:           09BE DEFINED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
ARG:                09D3 DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
EXIT:               09EF DEFINED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
IN:                 0A04 DEFINED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
IN1:                0A06 DEFINED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
IN2:                0A10 DEFINED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
IN3:                0A16 DEFINED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
NEWADD2:            0A1A DEFINED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
IF:                 0A46 DEFINED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 954 IN Siena.asm
IFE:                0A4B DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
IFE1:               0A4C DEFINED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
IFE2:               0A55 DEFINED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
SWITCH:             0A70 DEFINED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
CASE:               0A85 DEFINED AT LINE 1667 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
CASE0:              0AA1 DEFINED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
CASE1:              0AA6 DEFINED AT LINE 1691 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
CASE2:              0AB3 DEFINED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
WORDS:              0AB6 DEFINED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
BYTES:              0ABC DEFINED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
BYTES1:             0ABF DEFINED AT LINE 1708 IN Siena.asm
ARRAY:              0AC5 DEFINED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
ARRAYEND:           0AD8 DEFINED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
ARRAYEND1:          0AFA DEFINED AT LINE 1747 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
ARRAYEND2:          0B06 DEFINED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
ARRAYEND4:          0B16 DEFINED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1295 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 361 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1297 IN Siena.asm
VDATAWIDTH:         1B82 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1331 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2286S43:  4081 DEFINED AT LINE 34
                    > USED AT LINE 10
