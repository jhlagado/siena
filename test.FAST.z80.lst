0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD A7 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C0                     DB   lsb(nop_)   ; SP
0221   C0                     DB   lsb(nop_)   ; !
0222   C0                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C0                     DB   lsb(nop_)   ; %
0226   58                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   43                     DB   lsb(block_)   ; (
0229   46                     DB   lsb(blockend_)   ; )
022A   87                     DB   lsb(mul_)   ; *
022B   7A                     DB   lsb(add_)   ; +
022C   C0                     DB   lsb(nop_)   ; ,
022D   8A                     DB   lsb(sub_)   ; -
022E   0C                     DB   lsb(dot_)   ; .
022F   A8                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   55                     DB   lsb(symbol_)   ; :
023B   B7                     DB   lsb(comment_)   ; ;
023C   9B                     DB   lsb(lt_)   ; <
023D   92                     DB   lsb(eq_)   ; =
023E   97                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(index_)   ; ?
0240   C0                     DB   lsb(nop_)   ; @
0241   52                     DB   lsb(ident_)   ; A
0242   52                     DB   lsb(ident_)   ; B
0243   52                     DB   lsb(ident_)   ; C
0244   52                     DB   lsb(ident_)   ; D
0245   52                     DB   lsb(ident_)   ; E
0246   52                     DB   lsb(ident_)   ; F
0247   52                     DB   lsb(ident_)   ; G
0248   52                     DB   lsb(ident_)   ; h
0249   52                     DB   lsb(ident_)   ; I
024A   52                     DB   lsb(ident_)   ; J
024B   52                     DB   lsb(ident_)   ; K
024C   52                     DB   lsb(ident_)   ; L
024D   52                     DB   lsb(ident_)   ; M
024E   52                     DB   lsb(ident_)   ; N
024F   52                     DB   lsb(ident_)   ; O
0250   52                     DB   lsb(ident_)   ; p
0251   52                     DB   lsb(ident_)   ; Q
0252   52                     DB   lsb(ident_)   ; R
0253   52                     DB   lsb(ident_)   ; S
0254   52                     DB   lsb(ident_)   ; T
0255   52                     DB   lsb(ident_)   ; U
0256   52                     DB   lsb(ident_)   ; V
0257   52                     DB   lsb(ident_)   ; W
0258   52                     DB   lsb(ident_)   ; X
0259   52                     DB   lsb(ident_)   ; Y
025A   52                     DB   lsb(ident_)   ; Z
025B   4C                     DB   lsb(array_)   ; [
025C   C0                     DB   lsb(nop_)   ; \
025D   4F                     DB   lsb(arrayEnd_)   ; ]
025E   6C                     DB   lsb(xor_)   ; ^
025F   52                     DB   lsb(ident_)   ; _
0260   49                     DB   lsb(char_)   ; `    	
0261   52                     DB   lsb(ident_)   ; a
0262   52                     DB   lsb(ident_)   ; b
0263   52                     DB   lsb(ident_)   ; c
0264   52                     DB   lsb(ident_)   ; d
0265   52                     DB   lsb(ident_)   ; e
0266   52                     DB   lsb(ident_)   ; f
0267   52                     DB   lsb(ident_)   ; g
0268   52                     DB   lsb(ident_)   ; h
0269   52                     DB   lsb(ident_)   ; i
026A   52                     DB   lsb(ident_)   ; j
026B   52                     DB   lsb(ident_)   ; k
026C   52                     DB   lsb(ident_)   ; l
026D   52                     DB   lsb(ident_)   ; m
026E   52                     DB   lsb(ident_)   ; n
026F   52                     DB   lsb(ident_)   ; o
0270   52                     DB   lsb(ident_)   ; p
0271   52                     DB   lsb(ident_)   ; q
0272   52                     DB   lsb(ident_)   ; r
0273   52                     DB   lsb(ident_)   ; s
0274   52                     DB   lsb(ident_)   ; t
0275   52                     DB   lsb(ident_)   ; u
0276   52                     DB   lsb(ident_)   ; v
0277   52                     DB   lsb(ident_)   ; w
0278   52                     DB   lsb(ident_)   ; x
0279   52                     DB   lsb(ident_)   ; y
027A   52                     DB   lsb(ident_)   ; z
027B   C0                     DB   lsb(nop_)   ; {
027C   63                     DB   lsb(or_)   ; |
027D   C0                     DB   lsb(nop_)   ; }
027E   75                     DB   lsb(inv_)   ; ~
027F   C0                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 01 04               JP   num   
0303                HEXNUM_:      
0303   C3 31 04               JP   hexnum   
0306                ARG_:        
0306   C3 C4 04               JP   arg   
0309                STRING_:      
0309   C3 4E 04               JP   string   
030C                             ; lambda_:
030C                             ;     jp lambda
030C                             ; lambdaEnd_:
030C                             ;     jp lambdaEnd
030C                DOT_:        
030C   E1                     POP   hl   
030D   03                     INC   bc   
030E   0A                     LD   a,(bc)   
030F   FE 68                  CP   "h"   
0311   20 05                  JR   nz,dot1   
0313   CD 24 08               CALL   prthex   
0316   18 17                  JR   dot4   
0318                DOT1:        
0318   FE 73                  CP   "s"   
031A   20 05                  JR   nz,dot2   
031C   CD 47 08               CALL   prtstr   
031F   18 0E                  JR   dot4   
0321                DOT2:        
0321   FE 63                  CP   "c"   
0323   20 06                  JR   nz,dot3   
0325   7D                     LD   a,l   
0326   CD 85 00               CALL   putchar   
0329   18 04                  JR   dot4   
032B                DOT3:        
032B   0B                     DEC   bc   
032C   CD DC 07               CALL   prtdec   
032F                DOT4:        
032F   3E 20                  LD   a," "   
0331   CD 85 00               CALL   putchar   
0334   DD E9                  JP   (ix)   
0336                             ; addr index -- addr2
0336                INDEX_:      
0336   E1                     POP   hl   ; hl = index
0337   D1                     POP   de   ; de = addr
0338   3A 80 1B               LD   a,(vDataWidth)   
033B   3D                     DEC   a   
033C   28 01                  JR   z,index1   
033E   29                     ADD   hl,hl   ; if data width = 2 then double
033F                INDEX1:      
033F   19                     ADD   hl,de   ; add addr
0340   E5                     PUSH   hl   
0341   DD E9                  JP   (ix)   
0343                BLOCK_:      
0343   C3 7C 04               JP   block   
0346                BLOCKEND_:      
0346   C3 B0 04               JP   blockend   
0349                CHAR_:       
0349   C3 67 04               JP   char   
034C                ARRAY_:      
034C   C3 C4 05               JP   array   
034F                ARRAYEND_:      
034F   C3 D6 05               JP   arrayEnd   
0352                IDENT_:      
0352   C3 96 06               JP   ident   
0355                SYMBOL_:      
0355   C3 6F 06               JP   symbol   
0358                AND_:        
0358   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0359   E1                     POP   hl   
035A   7B                     LD   a,e   
035B   A5                     AND   l   
035C   6F                     LD   l,a   
035D   7A                     LD   a,d   
035E   A4                     AND   h   
035F                AND1:        
035F   67                     LD   h,a   
0360   E5                     PUSH   hl   
0361   DD E9                  JP   (ix)   
0363                OR_:         
0363   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0364   E1                     POP   hl   
0365   7B                     LD   a,e   
0366   B5                     OR   l   
0367   6F                     LD   l,a   
0368   7A                     LD   a,d   
0369   B4                     OR   h   
036A   18 F3                  JR   and1   
036C                XOR_:        
036C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
036D                XOR1:        
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   AD                     XOR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   AC                     XOR   h   
0373   18 EA                  JR   and1   
0375                INV_:        ; Bitwise INVert the top member of the stack
0375   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0378   18 F3                  JR   xor1   
037A                ADD_:        ; add the top 2 members of the stack
037A   D1                     POP   de   
037B   E1                     POP   hl   
037C   19                     ADD   hl,de   
037D   E5                     PUSH   hl   
037E   DD E9                  JP   (ix)   
0380                HDOT_:       ; print hexadecimal
0380   E1                     POP   hl   
0381   CD 24 08               CALL   prthex   
0384   C3 2B 03               JP   dot3   
0387                MUL_:        
0387   C3 E5 03               JP   mul   
038A                SUB_:        ; Subtract the value 2nd on stack from top of stack
038A   D1                     POP   de   
038B   E1                     POP   hl   ; Entry point for INVert
038C                SUB2:        
038C   B7                     OR   a   ; Entry point for NEGate
038D   ED 52                  SBC   hl,de   
038F   E5                     PUSH   hl   
0390   DD E9                  JP   (ix)   
0392                EQ_:         
0392   E1                     POP   hl   
0393   D1                     POP   de   
0394   C3 EF 06               JP   equals   
0397                GT_:         
0397   D1                     POP   de   
0398   E1                     POP   hl   
0399   18 02                  JR   lt1   
039B                LT_:         
039B   E1                     POP   hl   
039C   D1                     POP   de   
039D                LT1:         
039D   03                     INC   bc   
039E   0A                     LD   a,(bc)   
039F   FE 3D                  CP   "="   
03A1   CA F7 06               JP   z,lessthaneq   
03A4   0B                     DEC   bc   
03A5   C3 FC 06               JP   lessthan   
03A8                DIV_:        
03A8   D1                     POP   de   ; get first value
03A9   E1                     POP   hl   ; get 2nd value
03AA   C5                     PUSH   bc   ; preserve the IP
03AB   44 4D                  LD   bc,hl   
03AD   CD 99 07               CALL   divide   
03B0   22 7E 1B               LD   (vFrac),hl   
03B3   C1                     POP   bc   
03B4   D5                     PUSH   de   ; push result
03B5   DD E9                  JP   (ix)   
03B7                COMMENT_:      
03B7   03                     INC   bc   ; point to next char
03B8   0A                     LD   a,(bc)   
03B9   FE 20                  CP   " "   ; terminate on any char less than SP
03BB   30 FA                  JR   nc,comment_   
03BD   0B                     DEC   bc   
03BE   DD E9                  JP   (ix)   
03C0                NOP_:        
03C0   DD E9                  JP   (ix)   
03C2                             ;*******************************************************************
03C2                             ; word operators
03C2                             ;*******************************************************************
03C2                             ; shl
03C2                             ; value count -- value2          shift left count places
03C2                SHL:         
03C2   50 59                  LD   de,bc   ; save IP
03C4   C1                     POP   bc   ; bc = count
03C5   41                     LD   b,c   ; b = loop counter
03C6   E1                     POP   hl   
03C7   04                     INC   b   ; test for counter=0 case
03C8   18 01                  JR   shl2   
03CA                SHL1:        
03CA   29                     ADD   hl,hl   ; left shift hl
03CB                SHL2:        
03CB   10 FD                  DJNZ   shl1   
03CD   E5                     PUSH   hl   
03CE   42 4B                  LD   bc,de   ; restore IP
03D0   DD E9                  JP   (ix)   
03D2                             ; shr
03D2                             ; value count -- value2          shift left count places
03D2                SHR:         
03D2   50 59                  LD   de,bc   ; save IP
03D4   C1                     POP   bc   ; bc = count
03D5   41                     LD   b,c   ; b = loop counter
03D6   E1                     POP   hl   
03D7   04                     INC   b   ; test for counter=0 case
03D8   18 04                  JR   shr2   
03DA                SHR1:        
03DA   CB 3C                  SRL   h   ; right shift hl
03DC   CB 1D                  RR   l   
03DE                SHR2:        
03DE   10 FA                  DJNZ   shr1   
03E0   E5                     PUSH   hl   
03E1   42 4B                  LD   bc,de   ; restore IP
03E3   DD E9                  JP   (ix)   
03E5                MUL:         ;=19
03E5   D1                     POP   de   ; get first value
03E6   E1                     POP   hl   
03E7   C5                     PUSH   bc   ; Preserve the IP
03E8   44                     LD   b,h   ; bc = 2nd value
03E9   4D                     LD   c,l   
03EA   21 00 00               LD   hl,0   
03ED   3E 10                  LD   a,16   
03EF                MUL2:        
03EF   29                     ADD   hl,hl   
03F0   CB 13                  RL   e   
03F2   CB 12                  RL   d   
03F4   30 04                  JR   nc,$+6   
03F6   09                     ADD   hl,bc   
03F7   30 01                  JR   nc,$+3   
03F9   13                     INC   de   
03FA   3D                     DEC   a   
03FB   20 F2                  JR   nz,mul2   
03FD   C1                     POP   bc   ; Restore the IP
03FE   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
03FF   DD E9                  JP   (ix)   
0401                NUM:         
0401   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0404   0A                     LD   a,(bc)   ; Get numeral or -
0405   FE 2D                  CP   "-"   
0407   20 01                  JR   nz,num0   
0409   03                     INC   bc   ; move to next char, no flags affected
040A                NUM0:        
040A   08                     EX   af,af'   ; save zero flag = 0 for later
040B                NUM1:        
040B   0A                     LD   a,(bc)   ; read digit
040C   D6 30                  SUB   "0"   ; less than 0?
040E   38 13                  JR   c,num2   ; not a digit, exit loop
0410   FE 0A                  CP   10   ; greater that 9?
0412   30 0F                  JR   nc,num2   ; not a digit, exit loop
0414   03                     INC   bc   ; inc IP
0415   54 5D                  LD   de,hl   ; multiply hl * 10
0417   29                     ADD   hl,hl   
0418   29                     ADD   hl,hl   
0419   19                     ADD   hl,de   
041A   29                     ADD   hl,hl   
041B   85                     ADD   a,l   ; add digit in a to hl
041C   6F                     LD   l,a   
041D   3E 00                  LD   a,0   
041F   8C                     ADC   a,h   
0420   67                     LD   h,a   
0421   18 E8                  JR   num1   
0423                NUM2:        
0423   0B                     DEC   bc   
0424   08                     EX   af,af'   ; restore zero flag
0425   20 07                  JR   nz,num3   
0427   EB                     EX   de,hl   ; negate the value of hl
0428   21 00 00               LD   hl,0   
042B   B7                     OR   a   ; jump to sub2
042C   ED 52                  SBC   hl,de   
042E                NUM3:        
042E   E5                     PUSH   hl   ; Put the number on the stack
042F   DD E9                  JP   (ix)   ; and process the next character
0431                HEXNUM:      ; 
0431   21 00 00               LD   hl,0   ; Clear hl to accept the number
0434                HEXNUM1:      
0434   03                     INC   bc   
0435   0A                     LD   a,(bc)   ; Get the character which is a numeral
0436   CB 77                  BIT   6,a   ; is it uppercase alpha?
0438   28 02                  JR   z,hexnum2   ; no a decimal
043A   D6 07                  SUB   7   ; sub 7  to make $a - $F
043C                HEXNUM2:      
043C   D6 30                  SUB   $30   ; Form decimal digit
043E   DA 23 04               JP   c,num2   
0441   FE 10                  CP   $0F+1   
0443   D2 23 04               JP   nc,num2   
0446   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0447   29                     ADD   hl,hl   ; 4X
0448   29                     ADD   hl,hl   ; 8X
0449   29                     ADD   hl,hl   ; 16X
044A   85                     ADD   a,l   ; add into bottom of hl
044B   6F                     LD   l,a   ; 
044C   18 E6                  JR   hexnum1   
044E                             ; 
044E                STRING:      
044E   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0452   D5                     PUSH   de   ; save start of string
0453   03                     INC   bc   ; point to next char
0454   18 03                  JR   string2   
0456                STRING1:      
0456   12                     LD   (de),a   
0457   13                     INC   de   ; increase count
0458   03                     INC   bc   ; point to next char
0459                STRING2:      
0459   0A                     LD   a,(bc)   
045A   FE 27                  CP   "'"   ; ' is the string terminator
045C   20 F8                  JR   nz,string1   
045E   AF                     XOR   a   ; write NUL to terminate string
045F   12                     LD   (de),a   
0460   13                     INC   de   
0461   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0465   DD E9                  JP   (ix)   
0467                CHAR:        
0467   21 00 00               LD   hl,0   ; if `` is empty
046A                CHAR1:       
046A   03                     INC   bc   ; point to next char
046B   0A                     LD   a,(bc)   
046C   FE 60                  CP   "`"   ; ` is the string terminator
046E   28 09                  JR   z,char3   
0470   FE 5C                  CP   $5c   ; \ is the escape
0472   20 02                  JR   nz,char2   
0474   03                     INC   bc   
0475   0A                     LD   a,(bc)   
0476                CHAR2:       
0476   6F                     LD   l,a   
0477   18 F1                  JR   char1   
0479                CHAR3:       
0479   E5                     PUSH   hl   
047A                             ; dec bc
047A   DD E9                  JP   (ix)   
047C                             ; lambda:
047C                             ;     inc bc
047C                             ;     ld hl,(vHeapPtr)            ; start of lambda defintion
047C                             ;     push hl
047C                             ;     ld d,1                      ; nesting: count first parenthesis
047C                             ; lambda1:                        ; Skip to end of definition
047C                             ;     ld a,(bc)                   ; Get the next character
047C                             ;     inc bc                      ; Point to next character
047C                             ;     ld (hl),a
047C                             ;     inc hl
047C                             ;     cp "'"
047C                             ;     jr z,lambda2
047C                             ;     cp "("
047C                             ;     jr z,lambda2
047C                             ;     cp ")"
047C                             ;     jr z,lambda2
047C                             ;     cp "{"
047C                             ;     jr z,lambda2
047C                             ;     cp "}"                      ; Is it the end of the definition?
047C                             ;     jr z,lambda2
047C                             ;     cp "["
047C                             ;     jr z,lambda2
047C                             ;     cp "]"
047C                             ;     jr z,lambda2
047C                             ;     cp "`"
047C                             ;     jr nz,lambda1
047C                             ; lambda2:
047C                             ;     inc d
047C                             ;     bit 0,d                     ; balanced?
047C                             ;     jr nz, lambda1              ; not balanced, get the next element
047C                             ;     cp "}"                      ; Is it the end of the definition?
047C                             ;     jr nz, lambda1              ; get the next element
047C                             ;     dec bc
047C                             ;     ld (vHeapPtr),hl            ; bump heap ptr to after definiton
047C                             ;     jp (ix)
047C                             ; lambdaEnd:
047C                             ;     pop hl                      ; hl = last result
047C                             ;     ld d,iyh                    ; de = BP
047C                             ;     ld e,iyl
047C                             ;     ex de,hl                    ; hl = BP, de = result
047C                             ;     ld sp,hl                    ; sp = BP
047C                             ;     pop hl                      ; hl = old BP
047C                             ;     pop bc                      ; pop scope ptr (discard)
047C                             ;     pop bc                      ; bc = IP
047C                             ;     ld sp,hl                    ; sp = old BP
047C                             ;     ld iy,0                     ; iy = sp = old BP
047C                             ;     add iy,sp
047C                             ;     push de                     ; push result
047C                             ;     jp (ix)
047C                BLOCK:       
047C   03                     INC   bc   
047D   C5                     PUSH   bc   ; return first opcode of block
047E   16 01                  LD   d,1   ; nesting: count first parenthesis
0480                BLOCK1:      ; Skip to end of definition
0480   0A                     LD   a,(bc)   ; Get the next character
0481   03                     INC   bc   ; Point to next character
0482   FE 27                  CP   "'"   
0484   28 22                  JR   z,block4   
0486   FE 60                  CP   "`"   
0488   28 1E                  JR   z,block4   
048A   FE 28                  CP   "("   
048C   28 17                  JR   z,block3   
048E   FE 7B                  CP   "{"   
0490   28 13                  JR   z,block3   
0492   FE 5B                  CP   "["   
0494   28 0F                  JR   z,block3   
0496   FE 29                  CP   ")"   
0498   28 08                  JR   z,block2   
049A   FE 7D                  CP   "}"   
049C   28 04                  JR   z,block2   
049E   FE 5D                  CP   "]"   
04A0   20 DE                  JR   nz,block1   
04A2                BLOCK2:      
04A2   15                     DEC   d   
04A3   18 06                  JR   block5   
04A5                BLOCK3:      
04A5   14                     INC   d   
04A6   18 D8                  JR   block1   
04A8                BLOCK4:      
04A8   3E 80                  LD   a,$80   
04AA   82                     ADD   a,d   
04AB                BLOCK5:      
04AB   20 D3                  JR   nz,block1   ; get the next element
04AD   0B                     DEC   bc   ; balanced, exit
04AE   DD E9                  JP   (ix)   
04B0                BLOCKEND:      
04B0   E1                     POP   hl   ; hl = last result
04B1   FD 54                  LD   d,iyh   ; de = BP
04B3   FD 5D                  LD   e,iyl   
04B5   EB                     EX   de,hl   ; hl = BP, de = result
04B6   F9                     LD   sp,hl   ; sp = BP
04B7   E1                     POP   hl   ; hl = old BP
04B8   C1                     POP   bc   ; pop SCP (discard)
04B9   C1                     POP   bc   ; bc = IP
04BA   F9                     LD   sp,hl   ; sp = old BP
04BB   FD 21 00 00            LD   iy,0   ; iy = sp
04BF   FD 39                  ADD   iy,sp   
04C1   D5                     PUSH   de   ; push result
04C2   DD E9                  JP   (ix)   
04C4                ARG:         
04C4   03                     INC   bc   ; get next char
04C5   0A                     LD   a,(bc)   
04C6   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04C8   E6 07                  AND   $07   ; mask
04CA   87                     ADD   a,a   ; double
04CB   6F                     LD   l,a   ; hl = offset into args
04CC   26 00                  LD   h,0   
04CE   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04D1   FD 56 03               LD   d,(iy+3)   
04D4   EB                     EX   de,hl   ; hl = SCP - offset
04D5   B7                     OR   a   
04D6   ED 52                  SBC   hl,de   
04D8   2B                     DEC   hl   ; de = arg
04D9   56                     LD   d,(hl)   
04DA   2B                     DEC   hl   
04DB   5E                     LD   e,(hl)   
04DC   D5                     PUSH   de   ; push arg
04DD   DD E9                  JP   (ix)   
04DF                             ; addr -- value
04DF                GET:         
04DF   E1                     POP   hl   
04E0   16 00                  LD   d,0   
04E2   5E                     LD   e,(hl)   
04E3   3A 80 1B               LD   a,(vDataWidth)   
04E6   3D                     DEC   a   
04E7   28 02                  JR   z,get1   
04E9   23                     INC   hl   
04EA   56                     LD   d,(hl)   
04EB                GET1:        
04EB   D5                     PUSH   de   
04EC   DD E9                  JP   (ix)   
04EE                             ; addr value --
04EE                SET:         
04EE   D1                     POP   de   
04EF   E1                     POP   hl   
04F0   73                     LD   (hl),e   
04F1   3A 80 1B               LD   a,(vDataWidth)   
04F4   3D                     DEC   a   
04F5   28 02                  JR   z,set1   
04F7   23                     INC   hl   
04F8   72                     LD   (hl),d   
04F9                SET1:        
04F9   DD E9                  JP   (ix)   
04FB                             ; 
04FB                             ; in:
04FB                             ;  pop hl                      ; hl = string
04FB                             ;  pop de                      ; de = char
04FB                             ; in1:
04FB                             ;  ld a,(hl)
04FB                             ;  inc hl
04FB                             ;  cp 0                        ; is end of string
04FB                             ;  jr z,in2
04FB                             ;  cp e
04FB                             ;  jr nz,in1
04FB                             ;  or a                        ; a is never 0, or a resets zero flag
04FB                             ; in2:
04FB                             ;  ld hl,0                     ; hl = result
04FB                             ;  jr z,in3
04FB                             ;  dec hl                      ; if nz de = $ffff
04FB                             ; in3:
04FB                             ;  push hl                     ; push result
04FB                             ;  jp (ix)
04FB                             ; newAdd2:
04FB                             ;  push bc                     ; push IP
04FB                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
04FB                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
04FB                             ;  push de                     ; push SCP
04FB                             ;  push iy                     ; push base pointer
04FB                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
04FB                             ;  add iy,sp                   ;
04FB                             ;  ld d,(iy-1)
04FB                             ;  ld e,(iy-2)
04FB                             ;  ld h,(iy-3)
04FB                             ;  ld l,(iy-4)
04FB                             ;  add hl,de                   ; hl = hl + de
04FB                             ;  ex de,hl                    ; de = result
04FB                             ;  pop hl                      ; hl = old BP
04FB                             ;  pop bc                      ; pop SCP (discard)
04FB                             ;  pop bc                      ; bc = IP
04FB                             ;  ld sp,hl                    ; sp = old BP
04FB                             ;  ld iy,0
04FB                             ;  add iy,sp
04FB                             ;  push de                     ; push result
04FB                             ;  jp (ix)
04FB                IF:          
04FB   11 00 00               LD   de,0   ; NUL pointer for else
04FE   18 01                  JR   ifte1   
0500                IFTE:        
0500   D1                     POP   de   ; de = else
0501                IFTE1:       
0501   E1                     POP   hl   ; hl = then
0502   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0503   23                     INC   hl   ; check for true
0504   7C                     LD   a,h   
0505   B5                     OR   l   
0506   E1                     POP   hl   ; hl = then
0507   28 01                  JR   z,ifte2   
0509   EB                     EX   de,hl   ; condition = false, hl = else
050A                IFTE2:       
050A   7C                     LD   a,h   ; check if hl is NUL
050B   B5                     OR   l   
050C   28 13                  JR   z,ifte3   
050E   C5                     PUSH   bc   ; push IP
050F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0512   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0515   D5                     PUSH   de   ; push SCP
0516   FD E5                  PUSH   iy   ; push BP
0518   FD 21 00 00            LD   iy,0   ; iy = sp
051C   FD 39                  ADD   iy,sp   
051E   44 4D                  LD   bc,hl   ; IP = then
0520   0B                     DEC   bc   
0521                IFTE3:       
0521   DD E9                  JP   (ix)   
0523                             ; c b --
0523                             ; loops until c = 0
0523                LOOP:        
0523   D1                     POP   de   ; de = block                    c
0524   E1                     POP   hl   ; hl = condition
0525   D5                     PUSH   de   
0526   C5                     PUSH   bc   ; push IP
0527   42 4B                  LD   bc,de   ; bc = block
0529   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
052C   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
052F   D5                     PUSH   de   ; push SCP
0530   FD E5                  PUSH   iy   ; push BP
0532   FD 21 00 00            LD   iy,0   ; iy = sp
0536   FD 39                  ADD   iy,sp   
0538                LOOP1:       
0538   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0539   B4                     OR   h   
053A   28 21                  JR   z,loop3   
053C   11 52 05               LD   de,loop2-1   ; IP return address
053F   D5                     PUSH   de   
0540   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
0543   FD 56 03               LD   d,(iy+3)   
0546   D5                     PUSH   de   ; 
0547   FD E5                  PUSH   iy   ; push BP
0549   FD 21 00 00            LD   iy,0   ; iy = sp
054D   FD 39                  ADD   iy,sp   
054F   E5                     PUSH   hl   ; push condition
0550   0B                     DEC   bc   
0551   DD E9                  JP   (ix)   
0553                LOOP2:       
0553   1B                     DB   ESC   ; escape from interpreter
0554   FD 4E 06               LD   c,(iy+6)   ; bc = block
0557   FD 46 07               LD   b,(iy+7)   
055A   E1                     POP   hl   ; hl = condition
055B   18 DB                  JR   loop1   
055D                LOOP3:       
055D   FD 54                  LD   d,iyh   ; de = BP
055F   FD 5D                  LD   e,iyl   
0561   EB                     EX   de,hl   ; hl = BP, de = result
0562   F9                     LD   sp,hl   ; sp = BP
0563   E1                     POP   hl   ; hl = old BP
0564   C1                     POP   bc   ; pop SCP (discard)
0565   C1                     POP   bc   ; bc = IP
0566   F9                     LD   sp,hl   ; sp = old BP
0567   FD 21 00 00            LD   iy,0   ; iy = sp
056B   FD 39                  ADD   iy,sp   
056D   DD 21 7D 0A            LD   ix,next   
0571   DD E9                  JP   (ix)   
0573                             ; xxxblockend:
0573                             ;     pop hl                      ; hl = last result
0573                             ;     ld d,iyh                    ; de = BP
0573                             ;     ld e,iyl
0573                             ;     ex de,hl                    ; hl = BP, de = result
0573                             ;     ld sp,hl                    ; sp = BP
0573                             ;     pop hl                      ; hl = old BP
0573                             ;     pop bc                      ; pop SCP (discard)
0573                             ;     pop bc                      ; bc = IP
0573                             ;     ld sp,hl                    ; sp = old BP
0573                             ;     ld iy,0                     ; iy = sp
0573                             ;     add iy,sp
0573                             ;     push de                     ; push result
0573                             ;     jp (ix)
0573                SWITCH:      
0573   E1                     POP   hl   ; get selector from stack
0574   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0575   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0578   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
057B   D5                     PUSH   de   ; push SCP
057C   FD E5                  PUSH   iy   ; push BP
057E   FD 21 00 00            LD   iy,0   ; BP = SP
0582   FD 39                  ADD   iy,sp   
0584   E5                     PUSH   hl   ; push selector as first arg of new frame
0585   DD E9                  JP   (ix)   
0587                CASE:        
0587   FD 66 FF               LD   h,(iy-1)   ; hl = selector
058A   FD 6E FE               LD   l,(iy-2)   
058D   23                     INC   hl   ; hl -= 1 index from second arg
058E   29                     ADD   hl,hl   ; hl *= 2 word offset
058F   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0591   FD 5D                  LD   e,iyl   
0593   EB                     EX   de,hl   
0594   B7                     OR   a   ; hl = BP - offset
0595   ED 52                  SBC   hl,de   
0597   54 5D                  LD   de,hl   ; save arg ptr
0599   2B                     DEC   hl   ; hl += 2
059A   2B                     DEC   hl   
059B   B7                     OR   a   ; arg ptr - stack pointer
059C   ED 72                  SBC   hl,sp   
059E   30 03                  JR   nc,case0   
05A0   D1                     POP   de   ; pop last arg
05A1   18 05                  JR   case1   
05A3                CASE0:       
05A3   EB                     EX   de,hl   
05A4   2B                     DEC   hl   ; de = arg
05A5   56                     LD   d,(hl)   
05A6   2B                     DEC   hl   
05A7   5E                     LD   e,(hl)   
05A8                CASE1:       
05A8   7A                     LD   a,d   ; is arg == NUL ? then skip
05A9   B3                     OR   e   
05AA   28 09                  JR   z,case2   
05AC   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05AF   FD 70 05               LD   (iy+5),b   
05B2   42 4B                  LD   bc,de   ; IP = arg
05B4   0B                     DEC   bc   
05B5                CASE2:       
05B5   DD E9                  JP   (ix)   
05B7                WORDS:       
05B7   21 02 00               LD   hl,2   
05BA   18 03                  JR   bytes1   
05BC                BYTES:       
05BC   21 01 00               LD   hl,1   
05BF                BYTES1:      
05BF   22 80 1B               LD   (vDataWidth),hl   
05C2   DD E9                  JP   (ix)   
05C4                ARRAY:       
05C4   C5                     PUSH   bc   ; create stack frame, push IP
05C5   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05C8   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05CB   D5                     PUSH   de   ; push SCP
05CC   FD E5                  PUSH   iy   ; push BP
05CE   FD 21 00 00            LD   iy,0   ; BP = SP
05D2   FD 39                  ADD   iy,sp   
05D4   DD E9                  JP   (ix)   
05D6                ARRAYEND:      
05D6   FD 54                  LD   d,iyh   ; de = BP
05D8   FD 5D                  LD   e,iyl   
05DA   DD 62                  LD   ixh,d   ; ix = BP
05DC   DD 6B                  LD   ixl,e   
05DE   62 6B                  LD   hl,de   ; hl = de
05E0   B7                     OR   a   
05E1   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05E3   CB 3C                  SRL   h   
05E5   CB 1D                  RR   l   
05E7   EB                     EX   de,hl   ; de = count
05E8   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
05EB   73                     LD   (hl),e   
05EC   23                     INC   hl   
05ED   72                     LD   (hl),d   
05EE   23                     INC   hl   ; hl = array[0], de = count
05EF   3A 80 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
05F2   FE 01                  CP   1   
05F4   20 10                  JR   nz,arrayEnd2   
05F6                ARRAYEND1:      ; byte
05F6   DD 7E FE               LD   a,(ix-2)   
05F9   77                     LD   (hl),a   
05FA   23                     INC   hl   
05FB   DD 2B                  DEC   ix   
05FD   DD 2B                  DEC   ix   
05FF   1B                     DEC   de   
0600   7B                     LD   a,e   
0601   B2                     OR   d   
0602   20 F2                  JR   nz,arrayEnd1   
0604   18 13                  JR   arrayEnd3   
0606                ARRAYEND2:      ; word
0606   DD 7E FE               LD   a,(ix-2)   
0609   77                     LD   (hl),a   
060A   23                     INC   hl   
060B   DD 7E FF               LD   a,(ix-1)   
060E   77                     LD   (hl),a   
060F   23                     INC   hl   
0610   DD 2B                  DEC   ix   
0612   DD 2B                  DEC   ix   
0614   1B                     DEC   de   
0615   7B                     LD   a,e   
0616   B2                     OR   d   
0617   20 ED                  JR   nz,arrayEnd2   
0619                ARRAYEND3:      
0619   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
061B   FD 5D                  LD   e,iyl   
061D   EB                     EX   de,hl   ; hl = BP, de = end of array
061E   F9                     LD   sp,hl   ; sp = BP
061F   E1                     POP   hl   ; hl = old BP, de = end of array
0620   DD E1                  POP   ix   ; pop SCP (discard)
0622   DD E1                  POP   ix   ; pop IP (discard)
0624   F9                     LD   sp,hl   ; sp = old BP
0625   FD 21 00 00            LD   iy,0   ; iy = sp
0629   FD 39                  ADD   iy,sp   
062B   DD 21 7D 0A            LD   ix,next   
062F   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0632   23                     INC   hl   
0633   23                     INC   hl   
0634   E5                     PUSH   hl   ; return array[0]
0635   EB                     EX   de,hl   ; hl = end of array, de = array[0]
0636   B7                     OR   a   
0637   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0639   EB                     EX   de,hl   
063A   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
063D   73                     LD   (hl),e   ; array[-2] = size
063E   23                     INC   hl   
063F   72                     LD   (hl),d   
0640   DD E9                  JP   (ix)   
0642                             ; str -- num
0642                HASH:        
0642   E1                     POP   hl   
0643   C5                     PUSH   bc   
0644   44 4D                  LD   bc,hl   
0646   CD 36 07               CALL   hashStr   
0649   C1                     POP   bc   
064A   E5                     PUSH   hl   
064B   DD E9                  JP   (ix)   
064D                             ; str addr -- bool
064D                DEF:         
064D   60 69                  LD   hl,bc   ; hl = IP
064F   D1                     POP   de   ; de = addr
0650   C1                     POP   bc   ; bc = hash
0651   E5                     PUSH   hl   
0652   CD 4F 07               CALL   defineEntry   
0655   21 00 00               LD   hl,0   ; if c return TRUE
0658   30 01                  JR   nc,def1   
065A   2B                     DEC   hl   
065B                DEF1:        
065B   C1                     POP   bc   
065C   E5                     PUSH   hl   
065D   DD E9                  JP   (ix)   
065F                             ; str -- addr
065F                ADDR:        
065F   E1                     POP   hl   ; hl = hash
0660   C5                     PUSH   bc   
0661   44 4D                  LD   bc,hl   
0663   CD 75 07               CALL   lookupEntry   
0666   38 03                  JR   c,addr1   
0668   21 00 00               LD   hl,0   
066B                ADDR1:       
066B   C1                     POP   bc   
066C   E5                     PUSH   hl   
066D   DD E9                  JP   (ix)   
066F                SYMBOL:      
066F   03                     INC   bc   
0670   11 00 1A               LD   de,PAD   
0673   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0675   18 02                  JR   symbol1   
0677                SYMBOL0:      ; copy to PAD area
0677   03                     INC   bc   ; characters that are part of the identifier
0678   13                     INC   de   
0679                SYMBOL1:      ; 0-9 A-Z a-z _
0679   0A                     LD   a,(bc)   
067A   12                     LD   (de),a   
067B   B7                     OR   a   
067C   28 0A                  JR   z,symbol2   
067E   6F                     LD   l,a   
067F   7E                     LD   a,(hl)   
0680   FE 52                  CP   lsb(ident_)   
0682   28 F3                  JR   z,symbol0   
0684   FE 00                  CP   lsb(num_)   
0686   28 EF                  JR   z,symbol0   
0688                SYMBOL2:      
0688   0B                     DEC   bc   
0689   AF                     XOR   a   
068A   12                     LD   (de),a   ; terminate string with NUL
068B   C5                     PUSH   bc   
068C   01 00 1A               LD   bc,PAD   
068F   CD 36 07               CALL   hashStr   ; hl = hash
0692   C1                     POP   bc   
0693   E5                     PUSH   hl   
0694   DD E9                  JP   (ix)   
0696                IDENT:       
0696   11 00 1A               LD   de,PAD   
0699   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069B   18 02                  JR   ident1   
069D                IDENT0:      ; copy to PAD area
069D   03                     INC   bc   ; characters that are part of the identifier
069E   13                     INC   de   
069F                IDENT1:      ; 0-9 A-Z a-z _
069F   0A                     LD   a,(bc)   
06A0   12                     LD   (de),a   
06A1   B7                     OR   a   
06A2   28 0A                  JR   z,ident2   
06A4   6F                     LD   l,a   
06A5   7E                     LD   a,(hl)   
06A6   FE 52                  CP   lsb(ident_)   
06A8   28 F3                  JR   z,ident0   
06AA   FE 00                  CP   lsb(num_)   
06AC   28 EF                  JR   z,ident0   
06AE                IDENT2:      
06AE   0B                     DEC   bc   
06AF   AF                     XOR   a   
06B0   12                     LD   (de),a   ; terminate string with NUL
06B1   C5                     PUSH   bc   
06B2   01 00 1A               LD   bc,PAD   
06B5   CD 36 07               CALL   hashStr   ; hl = hash
06B8   44 4D                  LD   bc,hl   
06BA   CD 75 07               CALL   lookupEntry   
06BD   C1                     POP   bc   
06BE   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06C0   DD E9                  JP   (ix)   
06C2                IDENT3:      
06C2   E9                     JP   (hl)   
06C3                FRAC:        
06C3   2A 7E 1B               LD   hl,(vFrac)   
06C6   E5                     PUSH   hl   
06C7   DD E9                  JP   (ix)   
06C9                SQRT1:       
06C9   E1                     POP   hl   
06CA   C5                     PUSH   bc   
06CB   CD B2 07               CALL   squareRoot   
06CE   ED 43 7E 1B            LD   (vFrac),bc   
06D2   C1                     POP   bc   
06D3   D5                     PUSH   de   
06D4   DD E9                  JP   (ix)   
06D6                ABS1:        
06D6   E1                     POP   hl   
06D7   CB 7C                  BIT   7,h   
06D9   C8                     RET   z   
06DA   AF                     XOR   a   
06DB   95                     SUB   l   
06DC   6F                     LD   l,a   
06DD   9F                     SBC   a,a   
06DE   94                     SUB   h   
06DF   67                     LD   h,a   
06E0   E5                     PUSH   hl   
06E1   DD E9                  JP   (ix)   
06E3                MOD:         
06E3   D1                     POP   de   ; get first value
06E4   E1                     POP   hl   ; get 2nd value
06E5   C5                     PUSH   bc   ; preserve the IP
06E6   44 4D                  LD   bc,hl   
06E8   CD 99 07               CALL   divide   
06EB   C1                     POP   bc   
06EC   E5                     PUSH   hl   ; push remainder
06ED   DD E9                  JP   (ix)   
06EF                             ; hl = value1, de = value2
06EF                             ; hl = result
06EF                EQUALS:      
06EF   B7                     OR   a   ; reset the carry flag
06F0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06F2   28 10                  JR   z,true1   
06F4   C3 0A 07               JP   false1   
06F7                             ; hl = value1 de = value2
06F7                             ; hl = result
06F7                LESSTHANEQ:      
06F7   B7                     OR   a   
06F8   ED 52                  SBC   hl,de   
06FA   18 05                  JR   lessthan1   
06FC                             ; hl = value1 de = value2
06FC                             ; hl = result
06FC                LESSTHAN:      
06FC   B7                     OR   a   
06FD   ED 52                  SBC   hl,de   
06FF   28 09                  JR   z,false1   
0701                LESSTHAN1:      
0701   FA 0A 07               JP   m,false1   
0704                TRUE1:       
0704   21 FF FF               LD   hl,TRUE   
0707   E5                     PUSH   hl   
0708   DD E9                  JP   (ix)   
070A                FALSE1:      
070A   21 00 00               LD   hl,FALSE   
070D   E5                     PUSH   hl   
070E   DD E9                  JP   (ix)   
0710                             ; Z80 port input
0710                             ; port -- value
0710                INPUT:       
0710   E1                     POP   hl   
0711   59                     LD   e,c   ; save IP
0712   4D                     LD   c,l   
0713   ED 68                  IN   l,(c)   
0715   26 00                  LD   h,0   
0717   4B                     LD   c,e   ; restore IP
0718   E5                     PUSH   hl   
0719   DD E9                  JP   (ix)   
071B                             ; Z80 port output
071B                             ; value port --
071B                OUTPUT:      
071B   E1                     POP   hl   
071C   59                     LD   e,c   ; save IP
071D   4D                     LD   c,l   
071E   E1                     POP   hl   
071F   ED 69                  OUT   (c),l   
0721   4B                     LD   c,e   ; restore IP
0722   DD E9                  JP   (ix)   
0724                KEY:         
0724   CD 81 00               CALL   getchar   
0727   26 00                  LD   h,0   
0729   6F                     LD   l,a   
072A   E5                     PUSH   hl   
072B   DD E9                  JP   (ix)   
072D                NEG:         
072D   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0730   D1                     POP   de   
0731   C3 8C 03               JP   sub2   ; use the SUBtract routine
0734                LET:         
0734                FILTER:      
0734                MAP:         
0734                SCAN:        
0734   DD E9                  JP   (ix)   
0736                             ; -------------------------------------------------------------------------------
0736                             ; hash C-string
0736                             ; BC = str
0736                             ; HL = hash
0736                HASHSTR:      
0736   21 00 00               LD   hl,0   
0739                HASHSTR1:      
0739   0A                     LD   a,(bc)   ; load next char
073A   03                     INC   bc   
073B   FE 00                  CP   0   ; NUL?
073D   C8                     RET   z   
073E                HASHSTR2:      
073E   16 00                  LD   d,0   
0740   5F                     LD   e,a   
0741   19                     ADD   hl,de   
0742   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0744   29                     ADD   hl,hl   ; shift left
0745   19                     ADD   hl,de   ; add
0746   29                     ADD   hl,hl   ; shift left
0747   29                     ADD   hl,hl   ; shift left
0748   29                     ADD   hl,hl   ; shift left
0749   29                     ADD   hl,hl   ; shift left
074A   29                     ADD   hl,hl   ; shift left
074B   29                     ADD   hl,hl   ; shift left
074C   19                     ADD   hl,de   ; add
074D   18 EA                  JR   hashStr1   
074F                             ; add entry to hash slots and hash pointers
074F                             ; bc = hash (b = hi, c = lo), de = addr
074F                             ; sets carry if successful
074F                DEFINEENTRY:      
074F   CB 21                  SLA   c   ; lo = lo * 2
0751   69                     LD   l,c   ; lo1 = lo
0752   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0754                DEFINEENTRY0:      
0754   7E                     LD   a,(hl)   ; a = (lo1)
0755   FE FF                  CP   UNUSED   ; is it unused?
0757   28 12                  JR   z,defineEntry3   ; yes, add entry
0759   79                     LD   a,c   ; a = lo
075A   BE                     CP   (hl)   ; compare (lo1) with lo
075B   20 06                  JR   nz,defineEntry1   ; no match loop around
075D   2C                     INC   l   
075E   78                     LD   a,b   ; a = hi
075F   BE                     CP   (hl)   ; compare (lo1+1) with hi
0760   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0762   2D                     DEC   l   ; restore l
0763                DEFINEENTRY1:      
0763   2C                     INC   l   ; try next entry
0764   2C                     INC   l   
0765   79                     LD   a,c   ; compare lo and lo1
0766   BD                     CP   l   ; if equal then there's no space left, reject
0767   20 EB                  JR   nz,defineEntry0   
0769                DEFINEENTRY2:      
0769   3F                     CCF      ; clear carry flag, failure
076A   C9                     RET      
076B                DEFINEENTRY3:      ; new entry
076B   71                     LD   (hl),c   ; (lo1) = hash lo
076C   23                     INC   hl   
076D   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
076E   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0770   72                     LD   (hl),d   
0771   2B                     DEC   hl   
0772   73                     LD   (hl),e   ; (slot + 2) = address
0773   37                     SCF      ; set carry flag, success
0774   C9                     RET      
0775                             ; looks up hash and returns address
0775                             ; bc = hash
0775                             ; returns addr in hl, sets carry if successful
0775                LOOKUPENTRY:      
0775   CB 21                  SLA   c   ; lo = lo * 2
0777   69                     LD   l,c   ; lo1 = lo
0778   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077A                LOOKUPENTRY0:      
077A   7E                     LD   a,(hl)   ; a = (hl), slot
077B   FE FF                  CP   UNUSED   ; is it unused?
077D   28 EA                  JR   z,defineEntry2   ; yes, does not exist
077F   79                     LD   a,c   ; a = lo
0780   BE                     CP   (hl)   ; compare (lo1) with lo
0781   20 06                  JR   nz,lookupEntry1   ; no match loop around
0783   2C                     INC   l   
0784   78                     LD   a,b   ; a = hi
0785   BE                     CP   (hl)   ; compare (lo1+1) with hi
0786   28 09                  JR   z,lookupEntry3   
0788   2D                     DEC   l   
0789                LOOKUPENTRY1:      
0789   2C                     INC   l   
078A   2C                     INC   l   
078B   79                     LD   a,c   
078C   BD                     CP   l   ; no space left, reject
078D   20 EB                  JR   nz,lookupEntry0   
078F                LOOKUPENTRY2:      
078F   3F                     CCF      ; clear carry flag, failure
0790   C9                     RET      
0791                LOOKUPENTRY3:      
0791   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0793   56                     LD   d,(hl)   
0794   2D                     DEC   l   ; restore l
0795   5E                     LD   e,(hl)   ; (slot + 2) = address
0796   EB                     EX   de,hl   
0797   37                     SCF      
0798   C9                     RET      
0799                             ; division subroutine.
0799                             ; bc: divisor, de: dividend, hl: remainder
0799                DIVIDE:      
0799   21 00 00               LD   hl,0   ; zero the remainder
079C   3E 10                  LD   a,16   ; loop counter
079E                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
079E   CB 21                  SLA   c   
07A0   CB 10                  RL   b   
07A2   ED 6A                  ADC   hl,hl   
07A4   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07A6   38 03                  JR   c,divide2   
07A8   0C                     INC   c   
07A9   18 01                  JR   divide3   
07AB                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07AB   19                     ADD   hl,de   
07AC                DIVIDE3:      
07AC   3D                     DEC   a   
07AD   20 EF                  JR   nz,divide1   
07AF   50 59                  LD   de,bc   ; result from bc to de
07B1   C9                     RET      
07B2                             ; squareroot
07B2                             ; Input: HL = value
07B2                             ; Result: DE = square root BC = remainder
07B2                SQUAREROOT:      
07B2   01 00 08               LD   bc,0800h   
07B5   59                     LD   e,c   
07B6   AF                     XOR   a   
07B7                SQUAREROOT1:      
07B7   29                     ADD   hl,hl   
07B8   CB 11                  RL   c   
07BA   ED 6A                  ADC   hl,hl   
07BC   CB 11                  RL   c   
07BE   30 02                  JR   nc,$+4   
07C0   CB C5                  SET   0,l   
07C2   7B                     LD   a,e   
07C3   87                     ADD   a,a   
07C4   5F                     LD   e,a   
07C5   87                     ADD   a,a   
07C6   CB 45                  BIT   0,l   
07C8   20 03                  JR   nz,$+5   
07CA   91                     SUB   c   
07CB   30 05                  JR   nc,squareRoot4   
07CD   79                     LD   a,c   
07CE   93                     SUB   e   
07CF   1C                     INC   e   
07D0   93                     SUB   e   
07D1   4F                     LD   c,a   
07D2                SQUAREROOT4:      
07D2   10 E3                  DJNZ   squareRoot1   
07D4   CB 45                  BIT   0,l   
07D6   28 01                  JR   z,squareRoot5   
07D8   04                     INC   b   
07D9                SQUAREROOT5:      
07D9   16 00                  LD   d,0   
07DB   C9                     RET      
07DC                PRTDEC:      
07DC   CB 7C                  BIT   7,h   
07DE   28 0B                  JR   z,prtdec0   
07E0   3E 2D                  LD   a,"-"   
07E2   CD 85 00               CALL   putchar   
07E5   AF                     XOR   a   
07E6   95                     SUB   l   
07E7   6F                     LD   l,a   
07E8   9F                     SBC   a,a   
07E9   94                     SUB   h   
07EA   67                     LD   h,a   
07EB                PRTDEC0:      
07EB   C5                     PUSH   bc   
07EC   0E 00                  LD   c,0   ; leading zeros flag = false
07EE   11 F0 D8               LD   de,-10000   
07F1   CD 0D 08               CALL   prtdec1   
07F4   11 18 FC               LD   de,-1000   
07F7   CD 0D 08               CALL   prtdec1   
07FA   11 9C FF               LD   de,-100   
07FD   CD 0D 08               CALL   prtdec1   
0800   1E F6                  LD   e,-10   
0802   CD 0D 08               CALL   prtdec1   
0805   0C                     INC   c   ; flag = true for at least digit
0806   1E FF                  LD   e,-1   
0808   CD 0D 08               CALL   prtdec1   
080B   C1                     POP   bc   
080C   C9                     RET      
080D                PRTDEC1:      
080D   06 2F                  LD   b,"0"-1   
080F                PRTDEC2:      
080F   04                     INC   b   
0810   19                     ADD   hl,de   
0811   38 FC                  JR   c,prtdec2   
0813   ED 52                  SBC   hl,de   
0815   3E 30                  LD   a,"0"   
0817   B8                     CP   b   
0818   20 05                  JR   nz,prtdec3   
081A   AF                     XOR   a   
081B   B1                     OR   c   
081C   C8                     RET   z   
081D   18 01                  JR   prtdec4   
081F                PRTDEC3:      
081F   0C                     INC   c   
0820                PRTDEC4:      
0820   78                     LD   a,b   
0821   C3 85 00               JP   putchar   
0824                PRTHEX:      ; display hl as a 16-bit number in hex.
0824   C5                     PUSH   bc   ; preserve the IP
0825   7C                     LD   a,h   
0826   CD 2F 08               CALL   prthex2   
0829   7D                     LD   a,l   
082A   CD 2F 08               CALL   prthex2   
082D   C1                     POP   bc   
082E   C9                     RET      
082F                PRTHEX2:      
082F   4F                     LD   c,a   
0830   1F                     RRA      
0831   1F                     RRA      
0832   1F                     RRA      
0833   1F                     RRA      
0834   CD 38 08               CALL   prthex3   
0837   79                     LD   a,c   
0838                PRTHEX3:      
0838   E6 0F                  AND   0x0F   
083A   C6 90                  ADD   a,0x90   
083C   27                     DAA      
083D   CE 40                  ADC   a,0x40   
083F   27                     DAA      
0840   C3 85 00               JP   putchar   
0843                PRTSTR0:      
0843   CD 85 00               CALL   putchar   
0846   23                     INC   hl   
0847                PRTSTR:      
0847   7E                     LD   a,(hl)   
0848   B7                     OR   a   
0849   20 F8                  JR   nz,prtstr0   
084B   C9                     RET      
084C                             ; **************************************************************************
084C                             ; calculate nesting value
084C                             ; a is char to be tested,
084C                             ; e is the nesting value (initially 0)
084C                             ; e is increased by ( and [
084C                             ; e is decreased by ) and ]
084C                             ; e has its bit 7 toggled by `
084C                             ; limited to 127 levels
084C                             ; **************************************************************************
084C                NESTING:      
084C   FE 22                  CP   $22   ; quote char
084E   20 0A                  JR   nz,nesting1   
0850   CB 7B                  BIT   7,e   
0852   28 03                  JR   z,nesting1a   
0854   CB BB                  RES   7,e   
0856   C9                     RET      
0857                NESTING1A:      
0857   CB FB                  SET   7,e   
0859   C9                     RET      
085A                NESTING1:      
085A   CB 7B                  BIT   7,e   
085C   C0                     RET   nz   
085D   FE 7B                  CP   "{"   
085F   28 08                  JR   z,nesting2   
0861   FE 5B                  CP   "["   
0863   28 04                  JR   z,nesting2   
0865   FE 28                  CP   "("   
0867   20 02                  JR   nz,nesting3   
0869                NESTING2:      
0869   1C                     INC   e   
086A   C9                     RET      
086B                NESTING3:      
086B   FE 7D                  CP   "}"   
086D   28 07                  JR   z,nesting4   
086F   FE 5D                  CP   "]"   
0871   28 03                  JR   z,nesting4   
0873   FE 29                  CP   ")"   
0875   C0                     RET   nz   
0876                NESTING4:      
0876   1D                     DEC   e   
0877   C9                     RET      
0878                PROMPT:      
0878   CD 88 08               CALL   printStr   
087B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0880   C9                     RET      
0881                CRLF:        
0881   CD 88 08               CALL   printStr   
0884   0D 0A 00               .CSTR   "\r\n"   
0887   C9                     RET      
0888                PRINTSTR:      
0888   E3                     EX   (sp),hl   ; swap			
0889   CD 47 08               CALL   prtstr   
088C   23                     INC   hl   ; inc past NUL
088D   E3                     EX   (sp),hl   ; put it back	
088E   C9                     RET      
088F                DEFINE:      
088F   E1                     POP   hl   
0890   7E                     LD   a,(hl)   
0891   23                     INC   hl   
0892   44 4D                  LD   bc,hl   
0894   5F                     LD   e,a   
0895   16 00                  LD   d,0   
0897   19                     ADD   hl,de   
0898   5E                     LD   e,(hl)   
0899   23                     INC   hl   
089A   56                     LD   d,(hl)   
089B   23                     INC   hl   
089C   E5                     PUSH   hl   ; bc = str
089D   D5                     PUSH   de   
089E   CD 36 07               CALL   hashStr   ; hl = hash
08A1   D1                     POP   de   
08A2   44 4D                  LD   bc,hl   
08A4   C3 4F 07               JP   defineEntry   
08A7                INIT:        
08A7   DD 21 7D 0A            LD   ix,next   
08AB   FD 21 00 1A            LD   iy,DSTACK   
08AF   21 80 01               LD   hl,isysVars   
08B2   11 7E 1B               LD   de,sysVars   
08B5   01 10 00               LD   bc,8 * 2   
08B8   ED B0                  LDIR      
08BA   3E FF                  LD   a,UNUSED   
08BC   06 00                  LD   b,0   
08BE   21 00 1C               LD   hl,hashSlots   
08C1                INIT1:       
08C1   77                     LD   (hl),a   
08C2   23                     INC   hl   
08C3   10 FC                  DJNZ   init1   
08C5   CD 8F 08               CALL   define   
08C8   04 61 62 73 00         .PSTR   "abs",0   
08CD   D6 06                  DW   abs1   
08CF   CD 8F 08               CALL   define   
08D2   05 61 64 64 72 00      .PSTR   "addr",0   
08D8   5F 06                  DW   addr   
08DA   CD 8F 08               CALL   define   
08DD   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08E4   BC 05                  DW   bytes   
08E6   CD 8F 08               CALL   define   
08E9   05 63 61 6C 6C 00      .PSTR   "call",0   
08EF   B0 0A                  DW   call   
08F1   CD 8F 08               CALL   define   
08F4   05 63 61 73 65 00      .PSTR   "case",0   
08FA   87 05                  DW   case   
08FC   CD 8F 08               CALL   define   
08FF   04 64 65 66 00         .PSTR   "def",0   
0904   4D 06                  DW   def   
0906   CD 8F 08               CALL   define   
0909   05 65 78 65 63 00      .PSTR   "exec",0   
090F   C5 0A                  DW   exec   
0911   CD 8F 08               CALL   define   
0914   06 66 61 6C 73 65 00   .PSTR   "false",0   
091B   00 00                  DW   false   
091D   CD 8F 08               CALL   define   
0920   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0928   34 07                  DW   filter   
092A   CD 8F 08               CALL   define   
092D   05 66 72 61 63 00      .PSTR   "frac",0   
0933   C3 06                  DW   frac   
0935   CD 8F 08               CALL   define   
0938   04 67 65 74 00         .PSTR   "get",0   
093D   DF 04                  DW   get   
093F   CD 8F 08               CALL   define   
0942   05 68 61 73 68 00      .PSTR   "hash",0   
0948   42 06                  DW   hash   
094A   CD 8F 08               CALL   define   
094D   06 69 6E 70 75 74 00   .PSTR   "input",0   
0954   10 07                  DW   input   
0956   CD 8F 08               CALL   define   
0959   03 69 66 00            .PSTR   "if",0   
095D   FB 04                  DW   if   
095F   CD 8F 08               CALL   define   
0962   05 69 66 74 65 00      .PSTR   "ifte",0   
0968   00 05                  DW   ifte   
096A   CD 8F 08               CALL   define   
096D   04 6B 65 79 00         .PSTR   "key",0   
0972   24 07                  DW   key   
0974   CD 8F 08               CALL   define   
0977   04 6C 65 74 00         .PSTR   "let",0   
097C   34 07                  DW   let   
097E   CD 8F 08               CALL   define   
0981   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0987   23 05                  DW   loop   
0989   CD 8F 08               CALL   define   
098C   04 6D 61 70 00         .PSTR   "map",0   
0991   34 07                  DW   map   
0993   CD 8F 08               CALL   define   
0996   04 6D 6F 64 00         .PSTR   "mod",0   
099B   E3 06                  DW   mod   
099D   CD 8F 08               CALL   define   
09A0   04 6E 65 67 00         .PSTR   "neg",0   
09A5   2D 07                  DW   neg   
09A7   CD 8F 08               CALL   define   
09AA   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09B2   1B 07                  DW   output   
09B4   CD 8F 08               CALL   define   
09B7   05 73 63 61 6E 00      .PSTR   "scan",0   
09BD   01 00                  DW   scan   
09BF   CD 8F 08               CALL   define   
09C2   04 73 65 74 00         .PSTR   "set",0   
09C7   EE 04                  DW   set   
09C9   CD 8F 08               CALL   define   
09CC   04 73 68 6C 00         .PSTR   "shl",0   
09D1   C2 03                  DW   shl   
09D3   CD 8F 08               CALL   define   
09D6   04 73 68 72 00         .PSTR   "shr",0   
09DB   D2 03                  DW   shr   
09DD   CD 8F 08               CALL   define   
09E0   05 73 71 72 74 00      .PSTR   "sqrt",0   
09E6   C9 06                  DW   sqrt1   
09E8   CD 8F 08               CALL   define   
09EB   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09F3   73 05                  DW   switch   
09F5   CD 8F 08               CALL   define   
09F8   05 74 72 75 65 00      .PSTR   "true",0   
09FE   FF FF                  DW   true   
0A00   CD 8F 08               CALL   define   
0A03   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A0A   B7 05                  DW   words   
0A0C   C9                     RET      
0A0D                START:       
0A0D   31 00 1A               LD   sp,DSTACK   ; start of Siena
0A10   CD A7 08               CALL   init   ; setups
0A13   CD 88 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A16   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A23                INTERPRET:      
0A23   CD 78 08               CALL   prompt   
0A26   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A29   ED 43 82 1B            LD   (vTIBPtr),bc   
0A2D                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A2D   1E 00                  LD   e,0   ; initilize nesting value
0A2F   C5                     PUSH   bc   ; save offset into TIB,
0A30                             ; bc is also the count of chars in TIB
0A30   21 00 18               LD   hl,TIB   ; hl is start of TIB
0A33   18 06                  JR   interpret4   
0A35                INTERPRET3:      
0A35   7E                     LD   a,(hl)   ; a = char in TIB
0A36   23                     INC   hl   ; inc pointer into TIB
0A37   0B                     DEC   bc   ; dec count of chars in TIB
0A38   CD 4C 08               CALL   nesting   ; update nesting value
0A3B                INTERPRET4:      
0A3B   79                     LD   a,c   ; is count zero?
0A3C   B0                     OR   b   
0A3D   20 F6                  JR   nz,interpret3   ; if not loop
0A3F   C1                     POP   bc   ; restore offset into TIB
0A40                WAITCHAR:      
0A40   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A43   FE 20                  CP   $20   ; compare to space
0A45   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A47   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A49                             ; ???? NEEDED?
0A49   28 2A                  JR   z,waitchar4   
0A4B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A4D   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A4F                MACRO:       
0A4F                             ;  ld (vTIBPtr),bc
0A4F                             ;  ld hl,ctrlCodes
0A4F                             ;  add a,l			            ; look up key of macros
0A4F                             ;  ld l,a
0A4F                             ;  ld e,(hl)
0A4F                             ;  ld a,e
0A4F                             ;  or a
0A4F                             ;  jr z,macro1
0A4F                             ;  ld d,msb(macros)
0A4F                             ;  push de
0A4F                             ;  call call		            ; Siena exec_ operation and jump to it
0A4F                             ;  db DC1,0
0A4F                             ; macro1:
0A4F                             ;  ld bc,(vTIBPtr)
0A4F   18 DC                  JR   interpret2   
0A51                WAITCHAR1:      
0A51   21 00 18               LD   hl,TIB   
0A54   09                     ADD   hl,bc   
0A55   77                     LD   (hl),a   ; store the character in textbuf
0A56   03                     INC   bc   
0A57   CD 85 00               CALL   putchar   ; echo character to screen
0A5A   CD 4C 08               CALL   nesting   
0A5D   18 E1                  JR   waitchar   ; wait for next character
0A5F                WAITCHAR3:      
0A5F   21 00 18               LD   hl,TIB   
0A62   09                     ADD   hl,bc   
0A63   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A65   23                     INC   hl   
0A66   36 0A                  LD   (hl),"\n"   
0A68   23                     INC   hl   
0A69   03                     INC   bc   
0A6A   03                     INC   bc   
0A6B   CD 81 08               CALL   crlf   ; echo character to screen
0A6E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A6F   B7                     OR   a   
0A70   20 CE                  JR   nz,waitchar   
0A72   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A74   03                     INC   bc   
0A75                WAITCHAR4:      
0A75   ED 43 82 1B            LD   (vTIBPtr),bc   
0A79   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A7C                             ; we pressed enter
0A7C   0B                     DEC   bc   
0A7D                NEXT:        
0A7D   03                     INC   bc   ; Increment the IP
0A7E   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A7F                             ; bit 7,a                   ; is 15-bit opcode ?
0A7F                             ; jr nz,next3
0A7F   FE 20                  CP   " "   ; whitespace?
0A81   28 FA                  JR   z,next   ; space? ignore
0A83   38 07                  JR   c,next1   
0A85   6F                     LD   l,a   ; index into table
0A86   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A88   6E                     LD   l,(hl)   ; get low jump address
0A89   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A8B   E9                     JP   (hl)   ; Jump to routine
0A8C                NEXT1:       
0A8C   FE 1B                  CP   ESC   ; escape from interpreter
0A8E   28 07                  JR   z,escape   
0A90   FE 00                  CP   NUL   ; end of input string?
0A92   28 07                  JR   z,exit   
0A94                             ; cp ETX                      ; end of command line input text?
0A94                             ; jr nz,next
0A94                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0A94                             ;     add hl,sp
0A94                             ;     jr nc,next2
0A94                             ;     ld sp,DSTACK                ; yes, reset stack
0A94                             ; next2:
0A94   C3 23 0A               JP   interpret   ; no, other whitespace, macros?
0A97                             ; next3:
0A97                             ;     ld h,a                    ; build address
0A97                             ;     inc bc
0A97                             ;     ld a,(bc)
0A97                             ;     ld l,a
0A97                             ;     add hl,hl
0A97                             ;     jp (hl)
0A97                ESCAPE:      
0A97   60 69                  LD   hl,bc   ; address of code after escape opcode
0A99   23                     INC   hl   
0A9A   E9                     JP   (hl)   
0A9B                EXIT:        
0A9B   50 59                  LD   de,bc   ; address of code after exit opcode
0A9D   13                     INC   de   
0A9E   D9                     EXX      
0A9F   C1                     POP   bc   ; bc = last result
0AA0   FD 54                  LD   d,iyh   ; de = BP
0AA2   FD 5D                  LD   e,iyl   
0AA4   EB                     EX   de,hl   ; hl = BP
0AA5   F9                     LD   sp,hl   ; sp = BP
0AA6   D9                     EXX      
0AA7   E1                     POP   hl   ; hl = old BP
0AA8   C1                     POP   bc   ; pop SCP (discard)
0AA9   C1                     POP   bc   ; bc = IP
0AAA   F9                     LD   sp,hl   ; sp = old BP
0AAB   D9                     EXX      
0AAC   C5                     PUSH   bc   ; push result
0AAD   D9                     EXX      
0AAE   EB                     EX   de,hl   
0AAF   E9                     JP   (hl)   
0AB0                             ; call with args
0AB0                             ; creates a scope
0AB0                CALL:        ; execute code at pointer
0AB0   E1                     POP   hl   ; hl = pointer to code
0AB1   7C                     LD   a,h   ; skip if destination address is NUL
0AB2   B5                     OR   l   
0AB3   28 0E                  JR   z,call2   
0AB5   C5                     PUSH   bc   ; push IP
0AB6   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0AB8   FD E5                  PUSH   iy   ; push BP
0ABA   FD 21 00 00            LD   iy,0   ; BP = SP
0ABE   FD 39                  ADD   iy,sp   
0AC0   44 4D                  LD   bc,hl   ; IP = pointer to code
0AC2   0B                     DEC   bc   ; dec to prepare for next routine
0AC3                CALL2:       
0AC3   DD E9                  JP   (ix)   
0AC5                             ; execute a block of code
0AC5                             ; uses parent scope
0AC5                EXEC:        ; execute code at pointer
0AC5   E1                     POP   hl   ; hl = pointer to code
0AC6   7C                     LD   a,h   ; skip if destination address is NUL
0AC7   B5                     OR   l   
0AC8   28 13                  JR   z,exec2   
0ACA   C5                     PUSH   bc   ; push IP
0ACB   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0ACE   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AD1   D5                     PUSH   de   ; push SCP
0AD2   FD E5                  PUSH   iy   ; push BP
0AD4   FD 21 00 00            LD   iy,0   ; BP = SP
0AD8   FD 39                  ADD   iy,sp   
0ADA   44 4D                  LD   bc,hl   ; IP = pointer to code
0ADC   0B                     DEC   bc   ; dec to prepare for next routine
0ADD                EXEC2:       
0ADD   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        
1E00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "bytes [1 2 3]", $1e02
4000                             ; test "bytes [1 2 3] 1? get", 2
4000                          ;*Macro unroll:  test "bytes [1 2 3] 1? 100 set 1? get ", 2
4000   31 00 1A               LD   SP,DSTACK   
4003   CD A7 08               CALL   init   
4006   CD C5 0A               CALL   exec   
4009   62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 20 31 30 30 20 73 65 74 20 31 3F 20 67 65 74 20 00 .CSTR   "bytes [1 2 3] 1? 100 set 1? get "   
402A                          ;*Macro unroll:  expect "bytes [1 2 3] 1? 100 set 1? get ",2
402A   E1                     POP   HL   
402B   E5                     PUSH   HL   
402C   11 02 00               LD   DE,2   
402F   B7                     OR   A   
4030   ED 52                  SBC   HL,DE   
4032   7D                     LD   A,L   
4033   B4                     OR   H   
4034   28 6B                  JR   Z,expectM_0_2288S43   
4036   CD 88 08               CALL   printStr   
4039   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 20 31 30 30 20 73 65 74 20 31 3F 20 67 65 74 20 00 .CSTR   "Code: ","bytes [1 2 3] 1? 100 set 1? get "   
4060   CD 88 08               CALL   printStr   
4063   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4072   21 02 00               LD   HL,2   
4075   CD DC 07               CALL   prtdec   
4078   CD 88 08               CALL   printStr   
407B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4088   E1                     POP   hl   
4089   E5                     PUSH   hl   
408A   CD DC 07               CALL   prtdec   
408D   E1                     POP   hl   
408E   CD 88 08               CALL   printStr   
4091   20 28 23 00            .CSTR   " (#"   
4095   CD 24 08               CALL   prthex   
4098   CD 88 08               CALL   printStr   
409B   29 0D 0A 00            .CSTR   ")\r\n"   
409F   76                     HALT      
40A0   00                     .CSTR      
40A1                EXPECTM_0_2288S43:      
40A1   E1                     POP   HL   
40A2                             ; test "words [1 2 3]", $1e02
40A2                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
40A2                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
40A2                             ; test "words [10 20 30] 1 ? get", 10
40A2                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
40A2                             ; test "(((1) exec) exec) exec", 1
40A2                             ; test "5 ((($1) exec) exec) call", 5
40A2                             ; test "5 ($1) call", 5
40A2                             ; test "5 (($1) exec) call", 5
40A2                             ; test "2 1 {{$1} call} call", 2
40A2                             ; test "2 1 {$2} call", 1
40A2                             ; test "2 1 {$1} call", 2
40A2                             ; test "2 1 {$2} call", 1
40A2                             ; test "2 4 {$2} call", 4
40A2                             ; test "{{1} call} call", 1
40A2                             ; test "5 {-1 ($1) if} call", 5
40A2                             ; test "0 () loop", 0
40A2                             ; test "1 (1-) loop", $1a00
40A2                             ; test "65 .c", 0
40A2                             ; test "'hello' hash", $7f54
40A2                             ; test ":hello", $7f54
40A2                             ; test ":hello 2 def", TRUE
40A2                             ; test ":hello 2 def :hello addr", 2
40A2                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
40A2                             ; test "1 2 <", TRUE
40A2                             ; test "2 2 <=", TRUE
40A2                             ; test "2 1 <", FALSE
40A2                             ; test "1 2 >", FALSE
40A2                             ; test "2 2 >=", TRUE
40A2                             ; test "2 1 >", TRUE
40A2                             ; test "10 sqrt", 3
40A2                             ; test "10 sqrt frac", 1
40A2                             ; test "7 3 /", 2
40A2                             ; test "7 3 / frac", 1
40A2                             ; test "1 2 +", 3
40A2                             ; test ":h {1} def :h addr call", 1
40A2                             ; test "1 2 +", 3
40A2                             ; test "4 1 2 +", 3
40A2                             ; test "1", 1
40A2                             ; test "2", 2
40A2                             ; test "``", 0
40A2                             ; test "`a`", $61
40A2                             ; test "`\\``", $60
40A2                             ; test "`b` 'cba' in", -1
40A2                             ; test "`x` 'cba' in", 0
40A2                             ; test "5 0 (1) if", 5
40A2                             ; test "0 (1) (2) ife", 2
40A2                             ; test "5 -1 (1) if", 1
40A2                             ; test "-1 (1) (2) ife", 1
40A2                             ; test "9 sw (1) (5) ca", 5
40A2                             ; test "0 sw (1) ca", 1
40A2                             ; test "1 sw (1) (2) (3) ca", 2
40A2                             ; test "5 -1 (2) if", 2
40A2                             ; test "5 0 (2) if", 5
40A2                             ; test "5 0 (0 (2) if) if", 5
40A2                             ; test "5 0 (-1 (2) if) if", 5
40A2                             ; test "5 -1 (2) if", 2
40A2                             ; test "5 -1 (-1 (2) if) if", 2
40A2                             ; test "(1) ex", 1
40A2                             ; test "'A' @", 65
40A2                             ; test "1", 1
40A2                             ; test "0", 0
40A2                             ; test "10", 10
40A2                             ; test "123", 123
40A2                             ; test "$10", $10
40A2                             ; test "$FF", $FF
40A2                             ; test "2 3 =", 0
40A2                             ; test "3 3 =", 1
40A2                             ; test "2 3 <", 1
40A2                             ; test "3 3 <", 0
40A2                             ; test "3 3 >", 0
40A2                             ; test "4 3 >", 1
40A2                             ; test "1 2 +", 3
40A2                             ; test "123 456 +", 123+456
40A2                             ; test "64 128 +", 64+128
40A2                             ; test "5 3 -", 2
40A2                             ; test "3 5 &", 1
40A2                             ; test "3 5 |", 7
40A2                             ; test "2 3 *", 6
40A2                             ; test "1 2 3 + *", 5
40A2                             ; ; test "1 2 3 ' +", 3
40A2                             ; ; test "1_ 2 +",1
40A2                             ; ; test "1_ 1 +",0
40A2                             ; ; call enter
40A2                             ; ;     .cstr "1 3",$22,"+"
40A2                             ; ; expect "1 3 DUP +", 6
40A2                             ; ; test "5 2/'", 2
40A2                             ; ; test "3 5$ -", 2
40A2                             ; ; test "5 2/$ '", 1
40A2                             ; ; test "2 3%++", 7
40A2                             ; ; test "1 2 3~''", 2
40A2                             ; ; test "1 2 3~+*", 8
40A2                             ; ; test "2a!a@",2
40A2                             ; ; test "3x! 1 x@+x! x@", 4
40A2                             ; ; test "3x! 1_ x@+x! x@", 2
40A2                             ; ; test "1{", 2
40A2                             ; ; test "1}", 0
40A2                             ; ; test "2}", 1
40A2                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
40A2                             ; ; test "(2) \\^", 2
40A2                             ; ; test ":X1; X", 1
40A2                             ; ; test ":A100;A", 100
40A2                             ; ; test ":Aa!; 3A a@", 3
40A2                             ; ; test ":Aa!;:Ba@;4AB", 4
40A2                             ; ; test "[]$ '", 0
40A2                             ; ; test "[3]$ '", 1
40A2                             ; ; test "[3]'@", 3
40A2                             ; ; test "[1 2 3]'@", 1
40A2                             ; ; test "[1 2 3]'2+@", 2
40A2                             ; ; test "\\h@[1]''\\h@$-", 2
40A2                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
40A2                             ; ; test "\\[]$ '", 0
40A2                             ; ; test "\\[3]'\\@", 3
40A2                             ; ; test "\\[3]$ '", 1
40A2                             ; ; test "\\[1 2 3]'\\@", 1
40A2                             ; ; test "\\[1 2 3]'1+\\@", 2
40A2                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
40A2                             ; ; test "\\h@\\[1]''\\h@$-", 1
40A2                             ; ; test "\\`A`\\@",65
40A2                             ; ; test "0 0(1+)", 0
40A2                             ; ; test "0 1(1+)", 1
40A2                             ; ; test "0 2(1+)", 2
40A2                             ; ; test "0 1(0(1+))", 0
40A2                             ; ; test "0 1(1(1+))", 1
40A2                             ; ; test "0 2(1(1+))", 2
40A2                             ; ; test "0 2(2(1+))", 4
40A2                             ; ; test "0 1(\\i@+)", 0
40A2                             ; ; test "0 2(\\i@+)", 1
40A2                             ; ; test "0 3(\\i@+)", 3
40A2                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
40A2                             ; ; test "0t! 10(1 t@+t!) t@",10
40A2                             ; ; test "0(100)(200)",200
40A2                             ; ; test "1(100)(200)",100
40A2                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
40A2                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
40A2                             ; ; test ":X10;\\0X", 10
40A2                             ; ; test "2 \\1x! \\1x@", 2
40A2   CD 88 08               CALL   printStr   
40A5   44 6F 6E 65 21 00      .CSTR   "Done!"   
40AB   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0734 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 192 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 194 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 196 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 198 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 200 IN Siena.asm
DOT_:               030C DEFINED AT LINE 207 IN Siena.asm
DOT1:               0318 DEFINED AT LINE 215 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
DOT2:               0321 DEFINED AT LINE 220 IN Siena.asm
                    > USED AT LINE 217 IN Siena.asm
DOT3:               032B DEFINED AT LINE 226 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
DOT4:               032F DEFINED AT LINE 229 IN Siena.asm
                    > USED AT LINE 214 IN Siena.asm
                    > USED AT LINE 219 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
INDEX_:             0336 DEFINED AT LINE 235 IN Siena.asm
INDEX1:             033F DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
BLOCK_:             0343 DEFINED AT LINE 247 IN Siena.asm
BLOCKEND_:          0346 DEFINED AT LINE 249 IN Siena.asm
CHAR_:              0349 DEFINED AT LINE 251 IN Siena.asm
ARRAY_:             034C DEFINED AT LINE 253 IN Siena.asm
ARRAYEND_:          034F DEFINED AT LINE 255 IN Siena.asm
IDENT_:             0352 DEFINED AT LINE 257 IN Siena.asm
SYMBOL_:            0355 DEFINED AT LINE 259 IN Siena.asm
AND_:               0358 DEFINED AT LINE 261 IN Siena.asm
AND1:               035F DEFINED AT LINE 269 IN Siena.asm
                    > USED AT LINE 282 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
OR_:                0363 DEFINED AT LINE 274 IN Siena.asm
XOR_:               036C DEFINED AT LINE 284 IN Siena.asm
XOR1:               036D DEFINED AT LINE 286 IN Siena.asm
                    > USED AT LINE 297 IN Siena.asm
INV_:               0375 DEFINED AT LINE 295 IN Siena.asm
ADD_:               037A DEFINED AT LINE 299 IN Siena.asm
HDOT_:              0380 DEFINED AT LINE 306 IN Siena.asm
MUL_:               0387 DEFINED AT LINE 311 IN Siena.asm
SUB_:               038A DEFINED AT LINE 314 IN Siena.asm
SUB2:               038C DEFINED AT LINE 317 IN Siena.asm
                    > USED AT LINE 1173 IN Siena.asm
EQ_:                0392 DEFINED AT LINE 323 IN Siena.asm
GT_:                0397 DEFINED AT LINE 327 IN Siena.asm
LT_:                039B DEFINED AT LINE 331 IN Siena.asm
LT1:                039D DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
DIV_:               03A8 DEFINED AT LINE 342 IN Siena.asm
COMMENT_:           03B7 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
NOP_:               03C0 DEFINED AT LINE 361 IN Siena.asm
SHL:                03C2 DEFINED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
SHL1:               03CA DEFINED AT LINE 378 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
SHL2:               03CB DEFINED AT LINE 380 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
SHR:                03D2 DEFINED AT LINE 388 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
SHR1:               03DA DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
SHR2:               03DE DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
MUL:                03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
MUL2:               03EF DEFINED AT LINE 413 IN Siena.asm
                    > USED AT LINE 422 IN Siena.asm
NUM:                0401 DEFINED AT LINE 427 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
NUM0:               040A DEFINED AT LINE 433 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
NUM1:               040B DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
NUM2:               0423 DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 438 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
NUM3:               042E DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
HEXNUM:             0431 DEFINED AT LINE 465 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
HEXNUM1:            0434 DEFINED AT LINE 467 IN Siena.asm
                    > USED AT LINE 484 IN Siena.asm
HEXNUM2:            043C DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
STRING:             044E DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
STRING1:            0456 DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
STRING2:            0459 DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
CHAR:               0467 DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
CHAR1:              046A DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
CHAR2:              0476 DEFINED AT LINE 516 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
CHAR3:              0479 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
BLOCK:              047C DEFINED AT LINE 575 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
BLOCK1:             0480 DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
BLOCK2:             04A2 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
BLOCK3:             04A5 DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
BLOCK4:             04A8 DEFINED AT LINE 604 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
BLOCK5:             04AB DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 600 IN Siena.asm
BLOCKEND:           04B0 DEFINED AT LINE 612 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
ARG:                04C4 DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 199 IN Siena.asm
GET:                04DF DEFINED AT LINE 648 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
GET1:               04EB DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
SET:                04EE DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
SET1:               04F9 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
IF:                 04FB DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
IFTE:               0500 DEFINED AT LINE 724 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
IFTE1:              0501 DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
IFTE2:              050A DEFINED AT LINE 735 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
IFTE3:              0521 DEFINED AT LINE 748 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
LOOP:               0523 DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
LOOP1:              0538 DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
LOOP2:              0553 DEFINED AT LINE 781 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
LOOP3:              055D DEFINED AT LINE 788 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
SWITCH:             0573 DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
CASE:               0587 DEFINED AT LINE 829 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
CASE0:              05A3 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 844 IN Siena.asm
CASE1:              05A8 DEFINED AT LINE 853 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
CASE2:              05B5 DEFINED AT LINE 861 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
WORDS:              05B7 DEFINED AT LINE 864 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
BYTES:              05BC DEFINED AT LINE 867 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
BYTES1:             05BF DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
ARRAY:              05C4 DEFINED AT LINE 873 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
ARRAYEND:           05D6 DEFINED AT LINE 883 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
ARRAYEND1:          05F6 DEFINED AT LINE 906 IN Siena.asm
                    > USED AT LINE 917 IN Siena.asm
ARRAYEND2:          0606 DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
ARRAYEND3:          0619 DEFINED AT LINE 936 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
HASH:               0642 DEFINED AT LINE 968 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
DEF:                064D DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
DEF1:               065B DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
ADDR:               065F DEFINED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
ADDR1:              066B DEFINED AT LINE 1000 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
SYMBOL:             066F DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
SYMBOL0:            0677 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
SYMBOL1:            0679 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
SYMBOL2:            0688 DEFINED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
IDENT:              0696 DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 258 IN Siena.asm
IDENT0:             069D DEFINED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
IDENT1:             069F DEFINED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
IDENT2:             06AE DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
IDENT3:             06C2 DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
FRAC:               06C3 DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
SQRT1:              06C9 DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
ABS1:               06D6 DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
MOD:                06E3 DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
EQUALS:             06EF DEFINED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
LESSTHANEQ:         06F7 DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
LESSTHAN:           06FC DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
LESSTHAN1:          0701 DEFINED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
TRUE1:              0704 DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
FALSE1:             070A DEFINED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
INPUT:              0710 DEFINED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
OUTPUT:             071B DEFINED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
KEY:                0724 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
NEG:                072D DEFINED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
LET:                0734 DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
FILTER:             0734 DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
MAP:                0734 DEFINED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
HASHSTR:            0736 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
HASHSTR1:           0739 DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1209 IN Siena.asm
HASHSTR2:           073E DEFINED AT LINE 1195 IN Siena.asm
DEFINEENTRY:        074F DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
DEFINEENTRY0:       0754 DEFINED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
DEFINEENTRY1:       0763 DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
DEFINEENTRY2:       0769 DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
DEFINEENTRY3:       076B DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1221 IN Siena.asm
LOOKUPENTRY:        0775 DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
LOOKUPENTRY0:       077A DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1274 IN Siena.asm
LOOKUPENTRY1:       0789 DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
LOOKUPENTRY2:       078F DEFINED AT LINE 1275 IN Siena.asm
LOOKUPENTRY3:       0791 DEFINED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
DIVIDE:             0799 DEFINED AT LINE 1290 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
DIVIDE1:            079E DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
DIVIDE2:            07AB DEFINED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
DIVIDE3:            07AC DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1300 IN Siena.asm
SQUAREROOT:         07B2 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
SQUAREROOT1:        07B7 DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
SQUAREROOT4:        07D2 DEFINED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1331 IN Siena.asm
SQUAREROOT5:        07D9 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1340 IN Siena.asm
PRTDEC:             07DC DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07EB DEFINED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
PRTDEC1:            080D DEFINED AT LINE 1373 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
PRTDEC2:            080F DEFINED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
PRTDEC3:            081F DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1382 IN Siena.asm
PRTDEC4:            0820 DEFINED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
PRTHEX:             0824 DEFINED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            082F DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
PRTHEX3:            0838 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
PRTSTR0:            0843 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
PRTSTR:             0847 DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
NESTING:            084C DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
NESTING1A:          0857 DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
NESTING1:           085A DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
NESTING2:           0869 DEFINED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
NESTING3:           086B DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
NESTING4:           0876 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
PROMPT:             0878 DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
CRLF:               0881 DEFINED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
PRINTSTR:           0888 DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 183
DEFINE:             088F DEFINED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
INIT:               08A7 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08C1 DEFINED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
START:              0A0D DEFINED AT LINE 1643 IN Siena.asm
INTERPRET:          0A23 DEFINED AT LINE 1649 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
INTERPRET2:         0A2D DEFINED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
INTERPRET3:         0A35 DEFINED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
INTERPRET4:         0A3B DEFINED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
WAITCHAR:           0A40 DEFINED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
MACRO:              0A4F DEFINED AT LINE 1684 IN Siena.asm
WAITCHAR1:          0A51 DEFINED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
WAITCHAR3:          0A5F DEFINED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
WAITCHAR4:          0A75 DEFINED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
NEXT:               0A7D DEFINED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
NEXT1:              0A8C DEFINED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
ESCAPE:             0A97 DEFINED AT LINE 1766 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
EXIT:               0A9B DEFINED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
CALL:               0AB0 DEFINED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
CALL2:              0AC3 DEFINED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
EXEC:               0AC5 DEFINED AT LINE 1810 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0ADD DEFINED AT LINE 1824 IN Siena.asm
                    > USED AT LINE 1814 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1659 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1509 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 348 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 870 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 487 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
                    > USED AT LINE 951 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1515 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2288S43:  40A1 DEFINED AT LINE 34
                    > USED AT LINE 10
