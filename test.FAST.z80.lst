0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD D0 04               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                             ; ctrlCodes:
0200                             ;     DB lsb(EMPTY)               ; NUL ^@
0200                             ;     DB lsb(EMPTY)               ; SOH ^a  1
0200                             ;     DB lsb(EMPTY)               ; STX ^b  2
0200                             ;     DB lsb(EMPTY)               ; ETX ^c  3
0200                             ;     DB lsb(EMPTY)               ; EOT ^d  4
0200                             ;     DB lsb(EMPTY)               ; ENQ ^e  5
0200                             ;     DB lsb(EMPTY)               ; ACK ^F  6
0200                             ;     DB lsb(EMPTY)               ; BEL ^G  7
0200                             ;     DB lsb(EMPTY)               ; BS  ^h  8
0200                             ;     DB lsb(EMPTY)               ; TAB ^I  9
0200                             ;     DB lsb(EMPTY)               ; LF  ^J 10
0200                             ;     DB lsb(EMPTY)               ; VT  ^K 11
0200                             ;     DB lsb(EMPTY)               ; FF  ^l 12
0200                             ;     DB lsb(EMPTY)               ; CR  ^m 13
0200                             ;     DB lsb(EMPTY)               ; SO  ^N 14
0200                             ;     DB lsb(EMPTY)               ; SI  ^O 15
0200                             ;     DB lsb(EMPTY)               ; DLE ^p 16
0200                             ;     DB lsb(EMPTY)               ; ^Q
0200                             ;     DB lsb(EMPTY)               ; ^R
0200                             ;     DB lsb(EMPTY)               ; ^S
0200                             ;     DB lsb(EMPTY)               ; ^T
0200                             ;     DB lsb(EMPTY)               ; ^U
0200                             ;     DB lsb(EMPTY)               ; ^V
0200                             ;     DB lsb(EMPTY)               ; ^W
0200                             ;     DB lsb(EMPTY)               ; ^X
0200                             ;     DB lsb(EMPTY)               ; ^Y
0200                             ;     DB lsb(EMPTY)               ; ^Z
0200                             ;     DB lsb(EMPTY)               ; ^[
0200                             ;     DB lsb(EMPTY)               ; ^\
0200                             ;     DB lsb(EMPTY)               ; ^]
0200                             ;     DB lsb(EMPTY)               ; ^^
0200                             ;     DB lsb(EMPTY)               ; ^_
0200                OPCODES:      
0200   4F                     DB   lsb(inv_)   ;    !
0201   BD                     DB   lsb(nop_)   ;    "
0202   03                     DB   lsb(hexnum_)   ;    #
0203   06                     DB   lsb(arg_)   ;    $
0204   A2                     DB   lsb(mod_)   ;    %
0205   32                     DB   lsb(and_)   ;    &
0206   09                     DB   lsb(strDef_)   ;    '
0207   1D                     DB   lsb(block_)   ;    (
0208   20                     DB   lsb(blockend_)   ;    )
0209   67                     DB   lsb(mul_)   ;    *
020A   54                     DB   lsb(add_)   ;    +
020B   BD                     DB   lsb(nop_)   ;    ,
020C   6A                     DB   lsb(sub_)   ;    -
020D   12                     DB   lsb(dot_)   ;    .
020E   AE                     DB   lsb(div_)   ;    /	
020F   00                     DB   lsb(num_)   ;    0
0210   00                     DB   lsb(num_)   ;    1
0211   00                     DB   lsb(num_)   ;    2
0212   00                     DB   lsb(num_)   ;    3
0213   00                     DB   lsb(num_)   ;    4
0214   00                     DB   lsb(num_)   ;    5
0215   00                     DB   lsb(num_)   ;    6
0216   00                     DB   lsb(num_)   ;    7
0217   00                     DB   lsb(num_)   ;    8
0218   00                     DB   lsb(num_)   ;    9
0219   2F                     DB   lsb(symbol_)   ;    :
021A   BD                     DB   lsb(nop_)   ;    ;
021B   83                     DB   lsb(lt_)   ;    <
021C   72                     DB   lsb(eq_)   ;    =
021D   7F                     DB   lsb(gt_)   ;    >
021E   BD                     DB   lsb(nop_)   ;    ?
021F   BD                     DB   lsb(nop_)   ;    @
0220   2C                     DB   lsb(ident_)   ;    A
0221   2C                     DB   lsb(ident_)   ;    B
0222   2C                     DB   lsb(ident_)   ;    C
0223   2C                     DB   lsb(ident_)   ;    D
0224   2C                     DB   lsb(ident_)   ;    E
0225   2C                     DB   lsb(ident_)   ;    F
0226   2C                     DB   lsb(ident_)   ;    G
0227   2C                     DB   lsb(ident_)   ;    h
0228   2C                     DB   lsb(ident_)   ;    I
0229   2C                     DB   lsb(ident_)   ;    J
022A   2C                     DB   lsb(ident_)   ;    K
022B   2C                     DB   lsb(ident_)   ;    L
022C   2C                     DB   lsb(ident_)   ;    M
022D   2C                     DB   lsb(ident_)   ;    N
022E   2C                     DB   lsb(ident_)   ;    O
022F   2C                     DB   lsb(ident_)   ;    p
0230   2C                     DB   lsb(ident_)   ;    Q
0231   2C                     DB   lsb(ident_)   ;    R
0232   2C                     DB   lsb(ident_)   ;    S
0233   2C                     DB   lsb(ident_)   ;    T
0234   2C                     DB   lsb(ident_)   ;    U
0235   2C                     DB   lsb(ident_)   ;    V
0236   2C                     DB   lsb(ident_)   ;    W
0237   2C                     DB   lsb(ident_)   ;    X
0238   2C                     DB   lsb(ident_)   ;    Y
0239   2C                     DB   lsb(ident_)   ;    Z
023A   26                     DB   lsb(array_)   ;    [
023B   BD                     DB   lsb(nop_)   ;    \
023C   29                     DB   lsb(arrayEnd_)   ;    ]
023D   46                     DB   lsb(xor_)   ;    ^
023E   2C                     DB   lsb(ident_)   ;    _
023F   23                     DB   lsb(char_)   ;    `    	
0240   2C                     DB   lsb(ident_)   ;    a
0241   2C                     DB   lsb(ident_)   ;    b
0242   2C                     DB   lsb(ident_)   ;    c
0243   2C                     DB   lsb(ident_)   ;    d
0244   2C                     DB   lsb(ident_)   ;    e
0245   2C                     DB   lsb(ident_)   ;    f
0246   2C                     DB   lsb(ident_)   ;    g
0247   2C                     DB   lsb(ident_)   ;    h
0248   2C                     DB   lsb(ident_)   ;    i
0249   2C                     DB   lsb(ident_)   ;    j
024A   2C                     DB   lsb(ident_)   ;    k
024B   2C                     DB   lsb(ident_)   ;    l
024C   2C                     DB   lsb(ident_)   ;    m
024D   2C                     DB   lsb(ident_)   ;    n
024E   2C                     DB   lsb(ident_)   ;    o
024F   2C                     DB   lsb(ident_)   ;    p
0250   2C                     DB   lsb(ident_)   ;    q
0251   2C                     DB   lsb(ident_)   ;    r
0252   2C                     DB   lsb(ident_)   ;    s
0253   2C                     DB   lsb(ident_)   ;    t
0254   2C                     DB   lsb(ident_)   ;    u
0255   2C                     DB   lsb(ident_)   ;    v
0256   2C                     DB   lsb(ident_)   ;    w
0257   2C                     DB   lsb(ident_)   ;    x
0258   2C                     DB   lsb(ident_)   ;    y
0259   2C                     DB   lsb(ident_)   ;    z
025A   0C                     DB   lsb(lambda_)   ;    {
025B   3D                     DB   lsb(or_)   ;    |
025C   0F                     DB   lsb(lambdaEnd_)   ;    }
025D   BD                     DB   lsb(nop_)   ;    ~
025E   BD                     DB   lsb(nop_)   ;    DEL	
025F                START:       
025F   31 00 1A               LD   sp,DSTACK   ; start of Siena
0262   CD D0 04               CALL   init   ; setups
0265   CD 1B 0A               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0268   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0275                INTERPRET:      
0275   CD 4E 0A               CALL   prompt   
0278   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
027B   ED 43 82 1B            LD   (vTIBPtr),bc   
027F                INTERPRET2:      ; calc nesting (a macro might have changed it)
027F   1E 00                  LD   e,0   ; initilize nesting value
0281   C5                     PUSH   bc   ; save offset into TIB,
0282                             ; bc is also the count of chars in TIB
0282   21 00 18               LD   hl,TIB   ; hl is start of TIB
0285   18 06                  JR   interpret4   
0287                INTERPRET3:      
0287   7E                     LD   a,(hl)   ; a = char in TIB
0288   23                     INC   hl   ; inc pointer into TIB
0289   0B                     DEC   bc   ; dec count of chars in TIB
028A   CD 22 0A               CALL   nesting   ; update nesting value
028D                INTERPRET4:      
028D   79                     LD   a,c   ; is count zero?
028E   B0                     OR   b   
028F   20 F6                  JR   nz,interpret3   ; if not loop
0291   C1                     POP   bc   ; restore offset into TIB
0292                WAITCHAR:      
0292   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0295   FE 20                  CP   $20   ; compare to space
0297   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0299   FE 00                  CP   $0   ; is it end of string? null end of string
029B   28 2A                  JR   z,waitchar4   
029D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
029F   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02A1                MACRO:       
02A1                             ;     ld (vTIBPtr),bc
02A1                             ;     ld hl,ctrlCodes
02A1                             ;     add a,l			            ; look up key of macros
02A1                             ;     ld l,a
02A1                             ;     ld e,(hl)
02A1                             ;     ld a,e
02A1                             ;     or a
02A1                             ;     jr z,macro1
02A1                             ;     ld d,msb(macros)
02A1                             ;     push de
02A1                             ;     call exec		            ; Siena exec_ operation and jump to it
02A1                             ;     .cstr "ca"
02A1                             ; macro1:
02A1                             ;     ld bc,(vTIBPtr)
02A1   18 DC                  JR   interpret2   
02A3                WAITCHAR1:      
02A3   21 00 18               LD   hl,TIB   
02A6   09                     ADD   hl,bc   
02A7   77                     LD   (hl),a   ; store the character in textbuf
02A8   03                     INC   bc   
02A9   CD 85 00               CALL   putchar   ; echo character to screen
02AC   CD 22 0A               CALL   nesting   
02AF   18 E1                  JR   waitchar   ; wait for next character
02B1                WAITCHAR3:      
02B1   21 00 18               LD   hl,TIB   
02B4   09                     ADD   hl,bc   
02B5   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02B7   23                     INC   hl   
02B8   36 0A                  LD   (hl),"\n"   
02BA   23                     INC   hl   
02BB   03                     INC   bc   
02BC   03                     INC   bc   
02BD   CD 60 0A               CALL   crlf   ; echo character to screen
02C0   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02C1   B7                     OR   a   
02C2   20 CE                  JR   nz,waitchar   
02C4   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02C6   03                     INC   bc   
02C7                WAITCHAR4:      
02C7   ED 43 82 1B            LD   (vTIBPtr),bc   
02CB   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02CE   0B                     DEC   bc   
02CF                NEXT:        
02CF   03                     INC   bc   ; Increment the IP
02D0   0A                     LD   a,(bc)   ; Get the next character and dispatch
02D1   D6 21                  SUB   " " + 1   ; whitespace?
02D3   38 07                  JR   c,next1   
02D5   6F                     LD   l,a   ; index into table
02D6   26 02                  LD   h,msb(opcodes)   ; start address of jump table
02D8   6E                     LD   l,(hl)   ; get low jump address
02D9   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
02DB   E9                     JP   (hl)   ; Jump to routine
02DC                NEXT1:       
02DC   FE DF                  CP   NULL - (" " + 1)   ; is it end of text?
02DE   28 0F                  JR   z,exit   
02E0   FE E2                  CP   ENDTEXT - (" " + 1)   ; is it end of text?
02E2   20 EB                  JR   nz,next   ; no, other whitespace, ignore
02E4                ETX:         
02E4   21 00 E6               LD   hl,-DSTACK   
02E7   39                     ADD   hl,sp   
02E8   30 03                  JR   nc,etx1   
02EA   31 00 1A               LD   sp,DSTACK   
02ED                ETX1:        
02ED   18 86                  JR   interpret   
02EF                EXIT:        
02EF   50 59                  LD   de,bc   ; address of code after exit opcode
02F1   13                     INC   de   
02F2   D9                     EXX      
02F3   C1                     POP   bc   ; bc = last result
02F4   FD 54                  LD   d,iyh   ; de = BP
02F6   FD 5D                  LD   e,iyl   
02F8   EB                     EX   de,hl   ; hl = BP
02F9   F9                     LD   sp,hl   ; sp = BP
02FA   D9                     EXX      
02FB   E1                     POP   hl   ; hl = old BP
02FC   C1                     POP   bc   ; pop SCP (discard)
02FD   C1                     POP   bc   ; bc = IP
02FE   F9                     LD   sp,hl   ; sp = old BP
02FF   D9                     EXX      
0300   C5                     PUSH   bc   ; push result
0301   D9                     EXX      
0302   EB                     EX   de,hl   
0303   E9                     JP   (hl)   
0304                             ; **********************************************************************			
0304                             ; Page 4 primitive routines
0304                             ; **********************************************************************
0304                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 3B 06               JP   num   
0403                HEXNUM_:      
0403   C3 6B 06               JP   hexnum   
0406                ARG_:        
0406   C3 5F 07               JP   arg   
0409                STRDEF_:      
0409   C3 88 06               JP   strDef   
040C                LAMBDA_:      
040C   C3 CB 06               JP   lambda   
040F                LAMBDAEND_:      
040F   C3 05 07               JP   lambdaEnd   
0412                DOT_:        
0412   E1                     POP   hl   
0413   CD B4 09               CALL   prtdec   
0416                DOT2:        
0416   3E 20                  LD   a," "   
0418   CD 85 00               CALL   putchar   
041B   DD E9                  JP   (ix)   
041D                BLOCK_:      
041D   C3 19 07               JP   block   
0420                BLOCKEND_:      
0420   C3 4B 07               JP   blockend   
0423                CHAR_:       
0423   C3 A1 06               JP   char   
0426                ARRAY_:      
0426   C3 08 08               JP   array   
0429                ARRAYEND_:      
0429   C3 1A 08               JP   arrayEnd   
042C                IDENT_:      
042C   C3 C2 08               JP   ident   
042F                SYMBOL_:      
042F   C3 9C 08               JP   symbol   
0432                AND_:        
0432   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0433   E1                     POP   hl   
0434   7B                     LD   a,e   
0435   A5                     AND   l   
0436   6F                     LD   l,a   
0437   7A                     LD   a,d   
0438   A4                     AND   h   
0439                AND1:        
0439   67                     LD   h,a   
043A   E5                     PUSH   hl   
043B   DD E9                  JP   (ix)   
043D                OR_:         
043D   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
043E   E1                     POP   hl   
043F   7B                     LD   a,e   
0440   B5                     OR   l   
0441   6F                     LD   l,a   
0442   7A                     LD   a,d   
0443   B4                     OR   h   
0444   18 F3                  JR   and1   
0446                XOR_:        
0446   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0447                XOR1:        
0447   E1                     POP   hl   
0448   7B                     LD   a,e   
0449   AD                     XOR   l   
044A   6F                     LD   l,a   
044B   7A                     LD   a,d   
044C   AC                     XOR   h   
044D   18 EA                  JR   and1   
044F                INV_:        ; Bitwise INVert the top member of the stack
044F   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0452   18 F3                  JR   xor1   
0454                ADD_:        ; add the top 2 members of the stack
0454   D1                     POP   de   
0455   E1                     POP   hl   
0456   19                     ADD   hl,de   
0457   E5                     PUSH   hl   
0458   DD E9                  JP   (ix)   
045A                HDOT_:       ; print hexadecimal
045A   E1                     POP   hl   
045B   CD FC 09               CALL   prthex   
045E   C3 16 04               JP   dot2   
0461                ETX_:        
0461   C3 E4 02               JP   ETX   
0464                EXIT_:       
0464   C3 EF 02               JP   exit   
0467   C3 1F 06     MUL_:     JP   mul   
046A                SUB_:        ; Subtract the value 2nd on stack from top of stack
046A   D1                     POP   de   
046B   E1                     POP   hl   ; Entry point for INVert
046C                SUB2:        
046C   B7                     OR   a   ; Entry point for NEGate
046D   ED 52                  SBC   hl,de   
046F   E5                     PUSH   hl   
0470   DD E9                  JP   (ix)   
0472                EQ_:         
0472   E1                     POP   hl   
0473   D1                     POP   de   
0474   B7                     OR   a   ; reset the carry flag
0475   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0477   28 14                  JR   z,true_   
0479                FALSE_:      
0479   21 00 00               LD   hl,0   
047C   E5                     PUSH   hl   
047D   DD E9                  JP   (ix)   
047F                GT_:         
047F   D1                     POP   de   
0480   E1                     POP   hl   
0481   18 02                  JR   lt1   
0483                LT_:         
0483   E1                     POP   hl   
0484   D1                     POP   de   
0485                LT1:         
0485   B7                     OR   a   ; reset the carry flag
0486   ED 52                  SBC   hl,de   
0488   28 EF                  JR   z,false_   
048A   FA 79 04               JP   m,false_   
048D                TRUE_:       
048D   21 01 00               LD   hl,1   
0490   E5                     PUSH   hl   
0491   DD E9                  JP   (ix)   
0493                GTE_:        
0493   D1                     POP   de   
0494   E1                     POP   hl   
0495   18 02                  JR   lte1   
0497                LTE_:        
0497   E1                     POP   hl   
0498   D1                     POP   de   
0499                LTE1:        
0499   B7                     OR   a   ; reset the carry flag
049A   ED 52                  SBC   hl,de   
049C   FA 79 04               JP   m,false_   
049F   C3 FF FF               JP   true   
04A2                MOD_:        
04A2   D1                     POP   de   ; get first value
04A3   E1                     POP   hl   ; get 2nd value
04A4   C5                     PUSH   bc   ; preserve the IP
04A5   44 4D                  LD   bc,hl   
04A7   CD 71 09               CALL   divide   
04AA   C1                     POP   bc   
04AB   E5                     PUSH   hl   ; push remainder
04AC   DD E9                  JP   (ix)   
04AE                DIV_:        
04AE   D1                     POP   de   ; get first value
04AF   E1                     POP   hl   ; get 2nd value
04B0   C5                     PUSH   bc   ; preserve the IP
04B1   44 4D                  LD   bc,hl   
04B3   CD 71 09               CALL   divide   
04B6   22 7E 1B               LD   (vFrac),hl   
04B9   C1                     POP   bc   
04BA   D5                     PUSH   de   ; push result
04BB   DD E9                  JP   (ix)   
04BD                NOP_:        
04BD   DD E9                  JP   (ix)   
04BF                             ; -------------------------------------------------------------------------------
04BF                KEY:         
04BF   CD 81 00               CALL   getchar   
04C2   26 00                  LD   h,0   
04C4   6F                     LD   l,a   
04C5   E5                     PUSH   hl   
04C6   DD E9                  JP   (ix)   
04C8                             ; fetch:                         ; Fetch the value from the address placed on the top of the stack
04C8                             ;     pop hl
04C8                             ; fetch1:
04C8                             ;     ld e,(hl)
04C8                             ;     inc hl
04C8                             ;     ld d,(hl)
04C8                             ;     push de
04C8                             ;     jp (ix)
04C8                             ; store:                         ; Store the value at the address placed on the top of the stack
04C8                             ;     pop hl
04C8                             ;     pop de
04C8                             ;     ld (hl),e
04C8                             ;     inc hl
04C8                             ;     ld (hl),d
04C8                             ;     jp (ix)
04C8                             ; cFetch:
04C8                             ;     pop hl
04C8                             ;     ld d,0
04C8                             ;     ld e,(hl)
04C8                             ;     push    de
04C8                             ;     jp (ix)
04C8                             ; cStore:	
04C8                             ;     pop    hl
04C8                             ;     pop    de
04C8                             ;     ld     (hl),e
04C8                             ;     jp (ix)
04C8                NEG:         
04C8   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04CB   D1                     POP   de   
04CC   18 9E                  JR   sub2   ; use the SUBtract routine
04CE                             ; comment:
04CE                             ;     inc bc        ; point to next char
04CE                             ;     ld a,(bc)
04CE                             ;     cp "\r"       ; terminate at cr
04CE                             ;     jr nz,comment
04CE                             ;     dec bc
04CE                             ;     jp  next
04CE                             ; emit:
04CE                             ;     pop hl
04CE                             ;     ld a,l
04CE                             ;     call putchar
04CE                             ;     jp (ix)
04CE                             ; prompt:
04CE                             ;     call prompt
04CE                             ;     jp (ix)
04CE                             ; inPort:			    ; \<
04CE                             ;     pop hl
04CE                             ;     ld a,c
04CE                             ;     ld c,l
04CE                             ;     in l,(c)
04CE                             ;     ld h,0
04CE                             ;     ld c,a
04CE                             ;     push hl
04CE                             ;     jp (ix)
04CE                             ; newln:
04CE                             ;     call crlf
04CE                             ;     jp (ix)
04CE                             ; outPort:
04CE                             ;     pop hl
04CE                             ;     ld e,c
04CE                             ;     ld c,l
04CE                             ;     pop hl
04CE                             ;     out (c),l
04CE                             ;     ld c,e
04CE                             ;     jp (ix)
04CE                             ; prtstr:
04CE                             ;     pop hl
04CE                             ;     call putStr
04CE                             ;     jp (ix)
04CE                GET:         
04CE                SET1:        
04CE                LET:         
04CE                WHILE:       
04CE                FILTER:      
04CE                MAP:         
04CE                SCAN:        
04CE   DD E9                  JP   (ix)   
04D0                             ;*******************************************************************
04D0                             ; Subroutines
04D0                             ;*******************************************************************
04D0                INIT:        
04D0   DD 21 CF 02            LD   ix,next   
04D4   FD 21 00 1A            LD   iy,DSTACK   
04D8   21 80 01               LD   hl,isysVars   
04DB   11 7E 1B               LD   de,sysVars   
04DE   01 10 00               LD   bc,8 * 2   
04E1   ED B0                  LDIR      
04E3   3E FF                  LD   a,UNUSED   
04E5   06 00                  LD   b,0   
04E7   21 00 1D               LD   hl,hashSlots   
04EA                INIT1:       
04EA   77                     LD   (hl),a   
04EB   23                     INC   hl   
04EC   10 FC                  DJNZ   init1   
04EE   CD 67 0A               CALL   define   
04F1   04 61 62 73 00         .PSTR   "abs",0   
04F6   01 09                  DW   abs1   
04F8   CD 67 0A               CALL   define   
04FB   05 61 64 64 72 00      .PSTR   "addr",0   
0501   8C 08                  DW   addr   
0503   CD 67 0A               CALL   define   
0506   06 62 79 74 65 73 00   .PSTR   "bytes",0   
050D   00 08                  DW   bytes   
050F   CD 67 0A               CALL   define   
0512   05 63 61 73 65 00      .PSTR   "case",0   
0518   CB 07                  DW   case   
051A   CD 67 0A               CALL   define   
051D   04 64 65 66 00         .PSTR   "def",0   
0522   7A 08                  DW   def   
0524   CD 67 0A               CALL   define   
0527   05 65 78 65 63 00      .PSTR   "exec",0   
052D   B6 06                  DW   exec   
052F   CD 67 0A               CALL   define   
0532   06 66 61 6C 73 65 00   .PSTR   "false",0   
0539   79 04                  DW   false_   
053B   CD 67 0A               CALL   define   
053E   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0546   CE 04                  DW   filter   
0548   CD 67 0A               CALL   define   
054B   04 67 65 74 00         .PSTR   "get",0   
0550   CE 04                  DW   get   
0552   CD 67 0A               CALL   define   
0555   05 68 61 73 68 00      .PSTR   "hash",0   
055B   6F 08                  DW   hash   
055D   CD 67 0A               CALL   define   
0560   03 69 6E 00            .PSTR   "in",0   
0564   7A 07                  DW   in   
0566   CD 67 0A               CALL   define   
0569   03 69 66 00            .PSTR   "if",0   
056D   8F 07                  DW   if   
056F   CD 67 0A               CALL   define   
0572   05 69 66 74 65 00      .PSTR   "ifte",0   
0578   94 07                  DW   ifte   
057A   CD 67 0A               CALL   define   
057D   04 6B 65 79 00         .PSTR   "key",0   
0582   BF 04                  DW   key   
0584   CD 67 0A               CALL   define   
0587   04 6C 65 74 00         .PSTR   "let",0   
058C   CE 04                  DW   let   
058E   CD 67 0A               CALL   define   
0591   04 6D 61 70 00         .PSTR   "map",0   
0596   CE 04                  DW   map   
0598   CD 67 0A               CALL   define   
059B   04 6E 65 67 00         .PSTR   "neg",0   
05A0   C8 04                  DW   neg   
05A2   CD 67 0A               CALL   define   
05A5   05 66 72 61 63 00      .PSTR   "frac",0   
05AB   EE 08                  DW   frac   
05AD   CD 67 0A               CALL   define   
05B0   05 73 63 61 6E 00      .PSTR   "scan",0   
05B6   01 00                  DW   scan   
05B8   CD 67 0A               CALL   define   
05BB   04 73 65 74 00         .PSTR   "set",0   
05C0   CE 04                  DW   set1   
05C2   CD 67 0A               CALL   define   
05C5   04 73 68 6C 00         .PSTR   "shl",0   
05CA   12 06                  DW   shl   
05CC   CD 67 0A               CALL   define   
05CF   04 73 68 72 00         .PSTR   "shr",0   
05D4   17 06                  DW   shr   
05D6   CD 67 0A               CALL   define   
05D9   05 73 71 72 74 00      .PSTR   "sqrt",0   
05DF   F4 08                  DW   sqrt1   
05E1   CD 67 0A               CALL   define   
05E4   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
05EC   B7 07                  DW   switch   
05EE   CD 67 0A               CALL   define   
05F1   05 74 72 75 65 00      .PSTR   "true",0   
05F7   8D 04                  DW   true_   
05F9   CD 67 0A               CALL   define   
05FC   06 77 68 69 6C 65 00   .PSTR   "while",0   
0603   CE 04                  DW   while   
0605   CD 67 0A               CALL   define   
0608   06 77 6F 72 64 73 00   .PSTR   "words",0   
060F   FB 07                  DW   words   
0611   C9                     RET      
0612                SHL:         
0612   E1                     POP   hl   ; Duplicate the top member of the stack
0613   29                     ADD   hl,hl   
0614   E5                     PUSH   hl   ; shift left fallthrough into add_
0615   DD E9                  JP   (ix)   
0617                SHR:         
0617   E1                     POP   hl   ; Get the top member of the stack
0618                SHR1:        
0618   CB 3C                  SRL   h   
061A   CB 1D                  RR   l   
061C   E5                     PUSH   hl   
061D   DD E9                  JP   (ix)   
061F                MUL:         ;=19
061F   D1                     POP   de   ; get first value
0620   E1                     POP   hl   
0621   C5                     PUSH   bc   ; Preserve the IP
0622   44                     LD   b,h   ; bc = 2nd value
0623   4D                     LD   c,l   
0624   21 00 00               LD   hl,0   
0627   3E 10                  LD   a,16   
0629                MUL2:        
0629   29                     ADD   hl,hl   
062A   CB 13                  RL   e   
062C   CB 12                  RL   d   
062E   30 04                  JR   nc,$+6   
0630   09                     ADD   hl,bc   
0631   30 01                  JR   nc,$+3   
0633   13                     INC   de   
0634   3D                     DEC   a   
0635   20 F2                  JR   nz,mul2   
0637   C1                     POP   bc   ; Restore the IP
0638   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0639   DD E9                  JP   (ix)   
063B                NUM:         
063B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
063E   0A                     LD   a,(bc)   ; Get numeral or -
063F   FE 2D                  CP   "-"   
0641   20 01                  JR   nz,num0   
0643   03                     INC   bc   ; move to next char, no flags affected
0644                NUM0:        
0644   08                     EX   af,af'   ; save zero flag = 0 for later
0645                NUM1:        
0645   0A                     LD   a,(bc)   ; read digit
0646   D6 30                  SUB   "0"   ; less than 0?
0648   38 13                  JR   c,num2   ; not a digit, exit loop
064A   FE 0A                  CP   10   ; greater that 9?
064C   30 0F                  JR   nc,num2   ; not a digit, exit loop
064E   03                     INC   bc   ; inc IP
064F   54 5D                  LD   de,hl   ; multiply hl * 10
0651   29                     ADD   hl,hl   
0652   29                     ADD   hl,hl   
0653   19                     ADD   hl,de   
0654   29                     ADD   hl,hl   
0655   85                     ADD   a,l   ; add digit in a to hl
0656   6F                     LD   l,a   
0657   3E 00                  LD   a,0   
0659   8C                     ADC   a,h   
065A   67                     LD   h,a   
065B   18 E8                  JR   num1   
065D                NUM2:        
065D   0B                     DEC   bc   
065E   08                     EX   af,af'   ; restore zero flag
065F   20 07                  JR   nz,num3   
0661   EB                     EX   de,hl   ; negate the value of hl
0662   21 00 00               LD   hl,0   
0665   B7                     OR   a   ; jump to sub2
0666   ED 52                  SBC   hl,de   
0668                NUM3:        
0668   E5                     PUSH   hl   ; Put the number on the stack
0669   DD E9                  JP   (ix)   ; and process the next character
066B                HEXNUM:      ; 
066B   21 00 00               LD   hl,0   ; Clear hl to accept the number
066E                HEXNUM1:      
066E   03                     INC   bc   
066F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0670   CB 77                  BIT   6,a   ; is it uppercase alpha?
0672   28 02                  JR   z,hexnum2   ; no a decimal
0674   D6 07                  SUB   7   ; sub 7  to make $a - $F
0676                HEXNUM2:      
0676   D6 30                  SUB   $30   ; Form decimal digit
0678   DA 5D 06               JP   c,num2   
067B   FE 10                  CP   $0F+1   
067D   D2 5D 06               JP   nc,num2   
0680   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0681   29                     ADD   hl,hl   ; 4X
0682   29                     ADD   hl,hl   ; 8X
0683   29                     ADD   hl,hl   ; 16X
0684   85                     ADD   a,l   ; add into bottom of hl
0685   6F                     LD   l,a   ; 
0686   18 E6                  JR   hexnum1   
0688                             ; 
0688                STRDEF:      
0688   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
068C   D5                     PUSH   de   ; save start of string
068D   03                     INC   bc   ; point to next char
068E   18 03                  JR   strDef2   
0690                STRDEF1:      
0690   12                     LD   (de),a   
0691   13                     INC   de   ; increase count
0692   03                     INC   bc   ; point to next char
0693                STRDEF2:      
0693   0A                     LD   a,(bc)   
0694   FE 27                  CP   "'"   ; ' is the string terminator
0696   20 F8                  JR   nz,strDef1   
0698   AF                     XOR   a   ; write null to terminate string
0699   12                     LD   (de),a   
069A   13                     INC   de   
069B   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
069F   DD E9                  JP   (ix)   
06A1                CHAR:        
06A1   21 00 00               LD   hl,0   ; if `` is empty
06A4                CHAR1:       
06A4   03                     INC   bc   ; point to next char
06A5   0A                     LD   a,(bc)   
06A6   FE 60                  CP   "`"   ; ` is the string terminator
06A8   28 09                  JR   z,char3   
06AA   FE 5C                  CP   $5c   ; \ is the escape
06AC   20 02                  JR   nz,char2   
06AE   03                     INC   bc   
06AF   0A                     LD   a,(bc)   
06B0                CHAR2:       
06B0   6F                     LD   l,a   
06B1   18 F1                  JR   char1   
06B3                CHAR3:       
06B3   E5                     PUSH   hl   
06B4                             ; dec bc
06B4   DD E9                  JP   (ix)   
06B6                EXEC:        ; execute lambda at pointer
06B6   E1                     POP   hl   ; hl = pointer to lambda
06B7                EXEC1:       
06B7   7C                     LD   a,h   ; skip if destination address is null
06B8   B5                     OR   l   
06B9   28 0E                  JR   z,exec3   
06BB                EXEC2:       
06BB   C5                     PUSH   bc   ; push IP
06BC   FD E5                  PUSH   iy   ; push SCP (scope pointer)
06BE   FD E5                  PUSH   iy   ; push BP
06C0   FD 21 00 00            LD   iy,0   ; BP = SP
06C4   FD 39                  ADD   iy,sp   
06C6   44 4D                  LD   bc,hl   ; IP = pointer to lambda
06C8   0B                     DEC   bc   ; dec to prepare for next routine
06C9                EXEC3:       
06C9   DD E9                  JP   (ix)   
06CB                LAMBDA:      
06CB   03                     INC   bc   
06CC   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
06CF   E5                     PUSH   hl   
06D0   16 01                  LD   d,1   ; nesting: count first parenthesis
06D2                LAMBDA1:      ; Skip to end of definition
06D2   0A                     LD   a,(bc)   ; Get the next character
06D3   03                     INC   bc   ; Point to next character
06D4   77                     LD   (hl),a   
06D5   23                     INC   hl   
06D6   FE 27                  CP   "'"   
06D8   28 1C                  JR   z,lambda2   
06DA   FE 28                  CP   "("   
06DC   28 18                  JR   z,lambda2   
06DE   FE 29                  CP   ")"   
06E0   28 14                  JR   z,lambda2   
06E2   FE 7B                  CP   "{"   
06E4   28 10                  JR   z,lambda2   
06E6   FE 7D                  CP   "}"   ; Is it the end of the definition?
06E8   28 0C                  JR   z,lambda2   
06EA   FE 5B                  CP   "["   
06EC   28 08                  JR   z,lambda2   
06EE   FE 5D                  CP   "]"   
06F0   28 04                  JR   z,lambda2   
06F2   FE 60                  CP   "`"   
06F4   20 DC                  JR   nz,lambda1   
06F6                LAMBDA2:      
06F6   14                     INC   d   
06F7   CB 42                  BIT   0,d   ; balanced?
06F9   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
06FB   FE 7D                  CP   "}"   ; Is it the end of the definition?
06FD   20 D3                  JR   nz,lambda1   ; get the next element
06FF   0B                     DEC   bc   
0700   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0703   DD E9                  JP   (ix)   
0705                LAMBDAEND:      
0705   E1                     POP   hl   ; hl = last result
0706   FD 54                  LD   d,iyh   ; de = BP
0708   FD 5D                  LD   e,iyl   
070A   EB                     EX   de,hl   ; hl = BP, de = result
070B   F9                     LD   sp,hl   ; sp = BP
070C   E1                     POP   hl   ; hl = old BP
070D   C1                     POP   bc   ; pop scope ptr (discard)
070E   C1                     POP   bc   ; bc = IP
070F   F9                     LD   sp,hl   ; sp = old BP
0710   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
0714   FD 39                  ADD   iy,sp   
0716   D5                     PUSH   de   ; push result
0717   DD E9                  JP   (ix)   
0719                BLOCK:       
0719   03                     INC   bc   
071A   C5                     PUSH   bc   ; return first opcode of block
071B   16 01                  LD   d,1   ; nesting: count first parenthesis
071D                BLOCK1:      ; Skip to end of definition
071D   0A                     LD   a,(bc)   ; Get the next character
071E   03                     INC   bc   ; Point to next character
071F   FE 27                  CP   "'"   
0721   28 1C                  JR   z,block2   
0723   FE 28                  CP   "("   
0725   28 18                  JR   z,block2   
0727   FE 29                  CP   ")"   
0729   28 14                  JR   z,block2   
072B   FE 7B                  CP   "{"   
072D   28 10                  JR   z,block2   
072F   FE 7D                  CP   "}"   
0731   28 0C                  JR   z,block2   
0733   FE 5B                  CP   "["   
0735   28 08                  JR   z,block2   
0737   FE 5D                  CP   "]"   
0739   28 04                  JR   z,block2   
073B   FE 60                  CP   "`"   
073D   20 DE                  JR   nz,block1   
073F                BLOCK2:      
073F   14                     INC   d   
0740   CB 42                  BIT   0,d   ; balanced?
0742   20 D9                  JR   nz,block1   ; not balanced, get the next element
0744   FE 29                  CP   ")"   ; Is it the end of the block?
0746   20 D5                  JR   nz,block1   ; get the next element
0748   0B                     DEC   bc   
0749   DD E9                  JP   (ix)   
074B                BLOCKEND:      
074B   E1                     POP   hl   ; hl = last result
074C   FD 54                  LD   d,iyh   ; de = BP
074E   FD 5D                  LD   e,iyl   
0750   EB                     EX   de,hl   ; hl = BP, de = result
0751   F9                     LD   sp,hl   ; sp = BP
0752   E1                     POP   hl   ; hl = old BP
0753   C1                     POP   bc   ; pop SCP (discard)
0754   C1                     POP   bc   ; bc = IP
0755   F9                     LD   sp,hl   ; sp = old BP
0756   FD 21 00 00            LD   iy,0   ; iy = sp
075A   FD 39                  ADD   iy,sp   
075C   D5                     PUSH   de   ; push result
075D   DD E9                  JP   (ix)   
075F                ARG:         
075F   03                     INC   bc   ; get next char
0760   0A                     LD   a,(bc)   
0761   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0763   E6 07                  AND   $07   ; mask
0765   87                     ADD   a,a   ; double
0766   6F                     LD   l,a   ; hl = offset into args
0767   26 00                  LD   h,0   
0769   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
076C   FD 56 03               LD   d,(iy+3)   
076F   EB                     EX   de,hl   ; hl = SCP - offset
0770   B7                     OR   a   
0771   ED 52                  SBC   hl,de   
0773   2B                     DEC   hl   ; de = arg
0774   56                     LD   d,(hl)   
0775   2B                     DEC   hl   
0776   5E                     LD   e,(hl)   
0777   D5                     PUSH   de   ; push arg
0778   DD E9                  JP   (ix)   
077A                             ; 
077A                IN:          
077A   E1                     POP   hl   ; hl = string
077B   D1                     POP   de   ; de = char
077C                IN1:         
077C   7E                     LD   a,(hl)   
077D   23                     INC   hl   
077E   FE 00                  CP   0   ; is end of string
0780   28 04                  JR   z,in2   
0782   BB                     CP   e   
0783   20 F7                  JR   nz,in1   
0785   B7                     OR   a   ; a is never 0, or a resets zero flag
0786                IN2:         
0786   21 00 00               LD   hl,0   ; hl = result
0789   28 01                  JR   z,in3   
078B   2B                     DEC   hl   ; if nz de = $ffff
078C                IN3:         
078C   E5                     PUSH   hl   ; push result
078D   DD E9                  JP   (ix)   
078F                             ; newAdd2:
078F                             ;     push bc                     ; push IP
078F                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
078F                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
078F                             ;     push de                     ; push SCP
078F                             ;     push iy                     ; push base pointer
078F                             ;     ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
078F                             ;     add iy,sp                   ;
078F                             ;     ld d,(iy-1)
078F                             ;     ld e,(iy-2)
078F                             ;     ld h,(iy-3)
078F                             ;     ld l,(iy-4)
078F                             ;     add hl,de                   ; hl = hl + de
078F                             ;     ex de,hl                    ; de = result
078F                             ;     pop hl                      ; hl = old BP
078F                             ;     pop bc                      ; pop SCP (discard)
078F                             ;     pop bc                      ; bc = IP
078F                             ;     ld sp,hl                    ; sp = old BP
078F                             ;     ld iy,0
078F                             ;     add iy,sp
078F                             ;     push de                     ; push result
078F                             ;     jp (ix)
078F                IF:          
078F   11 00 00               LD   de,0   ; null pointer for else
0792   18 01                  JR   ifte1   
0794                IFTE:        
0794   D1                     POP   de   ; de = else
0795                IFTE1:       
0795   E1                     POP   hl   ; hl = then
0796   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0797   23                     INC   hl   ; check for true
0798   7C                     LD   a,h   
0799   B5                     OR   l   
079A   E1                     POP   hl   ; hl = then
079B   28 01                  JR   z,ifte2   
079D   EB                     EX   de,hl   ; condition = false, hl = else
079E                IFTE2:       
079E   7C                     LD   a,h   ; check if hl is null
079F   B5                     OR   l   
07A0   28 13                  JR   z,ifte3   
07A2   C5                     PUSH   bc   ; push IP
07A3   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
07A6   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
07A9   D5                     PUSH   de   ; push SCP
07AA   FD E5                  PUSH   iy   ; push BP
07AC   FD 21 00 00            LD   iy,0   ; iy = sp
07B0   FD 39                  ADD   iy,sp   
07B2   44 4D                  LD   bc,hl   ; IP = then
07B4   0B                     DEC   bc   
07B5                IFTE3:       
07B5   DD E9                  JP   (ix)   
07B7                SWITCH:      
07B7   E1                     POP   hl   ; get condition from stack
07B8   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
07B9   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
07BC   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
07BF   D5                     PUSH   de   ; push SCP
07C0   FD E5                  PUSH   iy   ; push BP
07C2   FD 21 00 00            LD   iy,0   ; BP = SP
07C6   FD 39                  ADD   iy,sp   
07C8   E5                     PUSH   hl   ; push condition as first arg of new frame
07C9   DD E9                  JP   (ix)   
07CB                CASE:        
07CB   FD 66 FF               LD   h,(iy-1)   ; hl = selector
07CE   FD 6E FE               LD   l,(iy-2)   
07D1   23                     INC   hl   ; hl -= 1 index from second arg
07D2   29                     ADD   hl,hl   ; hl *= 2 word offset
07D3   FD 54                  LD   d,iyh   ; hl = BP, de = offset
07D5   FD 5D                  LD   e,iyl   
07D7   EB                     EX   de,hl   
07D8   B7                     OR   a   ; hl = BP - offset
07D9   ED 52                  SBC   hl,de   
07DB   54 5D                  LD   de,hl   ; save arg ptr
07DD   2B                     DEC   hl   ; hl += 2
07DE   2B                     DEC   hl   
07DF   B7                     OR   a   ; arg ptr - stack pointer
07E0   ED 72                  SBC   hl,sp   
07E2   30 03                  JR   nc,case0   
07E4   D1                     POP   de   ; pop last arg
07E5   18 05                  JR   case1   
07E7                CASE0:       
07E7   EB                     EX   de,hl   
07E8   2B                     DEC   hl   ; de = arg
07E9   56                     LD   d,(hl)   
07EA   2B                     DEC   hl   
07EB   5E                     LD   e,(hl)   
07EC                CASE1:       
07EC   7A                     LD   a,d   ; is arg == null ? then skip
07ED   B3                     OR   e   
07EE   28 09                  JR   z,case2   
07F0   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
07F3   FD 70 05               LD   (iy+5),b   
07F6   42 4B                  LD   bc,de   ; IP = arg
07F8   0B                     DEC   bc   
07F9                CASE2:       
07F9   DD E9                  JP   (ix)   
07FB                WORDS:       
07FB   21 02 00               LD   hl,2   
07FE   18 03                  JR   bytes1   
0800                BYTES:       
0800   21 01 00               LD   hl,1   
0803                BYTES1:      
0803   22 80 1B               LD   (vDataWidth),hl   
0806   DD E9                  JP   (ix)   
0808                ARRAY:       
0808   C5                     PUSH   bc   ; create stack frame, push IP
0809   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
080C   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
080F   D5                     PUSH   de   ; push SCP
0810   FD E5                  PUSH   iy   ; push BP
0812   FD 21 00 00            LD   iy,0   ; BP = SP
0816   FD 39                  ADD   iy,sp   
0818   DD E9                  JP   (ix)   
081A                ARRAYEND:      
081A   FD 54                  LD   d,iyh   ; de = BP
081C   FD 5D                  LD   e,iyl   
081E   62 6B                  LD   hl,de   ; hl = de
0820   B7                     OR   a   
0821   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0823   C5                     PUSH   bc   ; bc' = IP
0824   D9                     EXX      
0825   C1                     POP   bc   
0826   D9                     EXX      
0827   44 4D                  LD   bc,hl   ; bc = count
0829   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
082C   71                     LD   (hl),c   ; write count before array data
082D   23                     INC   hl   
082E   70                     LD   (hl),b   
082F   23                     INC   hl   
0830   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0831   D9                     EXX      
0832   E1                     POP   hl   ; hl' = ptr to array (index 0)
0833   D9                     EXX      
0834   3A 80 1B               LD   a,(vDataWidth)   
0837   FE 01                  CP   1   ; byte?
0839   20 0D                  JR   nz,arrayEnd2   
083B   EB                     EX   de,hl   
083C                ARRAYEND1:      
083C   1B                     DEC   de   
083D   1B                     DEC   de   
083E   1A                     LD   a,(de)   
083F   77                     LD   (hl),a   
0840   23                     INC   hl   
0841   0B                     DEC   bc   
0842   79                     LD   a,c   
0843   B0                     OR   b   
0844   28 12                  JR   z,arrayEnd3   
0846   18 F4                  JR   arrayEnd1   
0848                ARRAYEND2:      
0848   1B                     DEC   de   
0849   1A                     LD   a,(de)   
084A   08                     EX   af,af'   
084B   1B                     DEC   de   
084C   1A                     LD   a,(de)   
084D   77                     LD   (hl),a   
084E   23                     INC   hl   
084F   08                     EX   af,af'   
0850   1A                     LD   a,(de)   
0851   77                     LD   (hl),a   
0852   23                     INC   hl   
0853   0B                     DEC   bc   
0854   79                     LD   a,c   
0855   B0                     OR   b   
0856   20 F0                  JR   nz,arrayEnd2   
0858                ARRAYEND3:      
0858   FD 54                  LD   d,iyh   ; de = BP
085A   FD 5D                  LD   e,iyl   
085C   EB                     EX   de,hl   ; hl = BP, de = result
085D   F9                     LD   sp,hl   ; sp = BP
085E   E1                     POP   hl   ; hl = old BP
085F   C1                     POP   bc   ; pop SCP (discard)
0860   C1                     POP   bc   ; bc = IP
0861   F9                     LD   sp,hl   ; sp = old BP
0862   FD 21 00 00            LD   iy,0   ; iy = sp
0866   FD 39                  ADD   iy,sp   
0868   D9                     EXX      
0869   E5                     PUSH   hl   
086A   C5                     PUSH   bc   
086B   D9                     EXX      
086C   C1                     POP   bc   
086D   DD E9                  JP   (ix)   
086F                             ; str -- num
086F                HASH:        
086F   E1                     POP   hl   
0870   C5                     PUSH   bc   
0871   44 4D                  LD   bc,hl   
0873   CD 0E 09               CALL   hashStr   
0876   C1                     POP   bc   
0877   E5                     PUSH   hl   
0878   DD E9                  JP   (ix)   
087A                             ; str addr -- bool
087A                DEF:         
087A   60 69                  LD   hl,bc   ; hl = IP
087C   D1                     POP   de   ; de = addr
087D   C1                     POP   bc   ; bc = hash
087E   E5                     PUSH   hl   
087F   CD 27 09               CALL   defineEntry   
0882   21 00 00               LD   hl,0   ; if c return TRUE
0885   30 01                  JR   nc,def1   
0887   2B                     DEC   hl   
0888                DEF1:        
0888   C1                     POP   bc   
0889   E5                     PUSH   hl   
088A   DD E9                  JP   (ix)   
088C                             ; str -- addr
088C                ADDR:        
088C   E1                     POP   hl   ; hl = hash
088D   C5                     PUSH   bc   
088E   44 4D                  LD   bc,hl   
0890   CD 4D 09               CALL   lookupEntry   
0893   38 03                  JR   c,addr1   
0895   21 00 00               LD   hl,0   
0898                ADDR1:       
0898   C1                     POP   bc   
0899   E5                     PUSH   hl   
089A   DD E9                  JP   (ix)   
089C                SYMBOL:      
089C   03                     INC   bc   
089D   11 00 1A               LD   de,PAD   
08A0   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
08A2   18 02                  JR   symbol1   
08A4                SYMBOL0:      ; copy to PAD area
08A4   03                     INC   bc   ; characters that are part of the identifier
08A5   13                     INC   de   
08A6                SYMBOL1:      ; 0-9 A-Z a-z _
08A6   0A                     LD   a,(bc)   
08A7   12                     LD   (de),a   
08A8   D6 21                  SUB   " " + 1   ; opcodes start above white space
08AA   6F                     LD   l,a   
08AB   7E                     LD   a,(hl)   
08AC   FE 2C                  CP   lsb(ident_)   
08AE   28 F4                  JR   z,symbol0   
08B0   FE 00                  CP   lsb(num_)   
08B2   28 F0                  JR   z,symbol0   
08B4   0B                     DEC   bc   
08B5   AF                     XOR   a   
08B6   12                     LD   (de),a   ; terminate string with null
08B7   C5                     PUSH   bc   
08B8   01 00 1A               LD   bc,PAD   
08BB   CD 0E 09               CALL   hashStr   ; hl = hash
08BE   C1                     POP   bc   
08BF   E5                     PUSH   hl   
08C0   DD E9                  JP   (ix)   
08C2                IDENT:       
08C2   11 00 1A               LD   de,PAD   
08C5   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
08C7   18 02                  JR   ident1   
08C9                IDENT0:      ; copy to PAD area
08C9   03                     INC   bc   ; characters that are part of the identifier
08CA   13                     INC   de   
08CB                IDENT1:      ; 0-9 A-Z a-z _
08CB   0A                     LD   a,(bc)   
08CC   12                     LD   (de),a   
08CD   D6 21                  SUB   " " + 1   ; opcodes start above white space
08CF   6F                     LD   l,a   
08D0   7E                     LD   a,(hl)   
08D1   FE 2C                  CP   lsb(ident_)   
08D3   28 F4                  JR   z,ident0   
08D5   FE 00                  CP   lsb(num_)   
08D7   28 F0                  JR   z,ident0   
08D9   0B                     DEC   bc   
08DA   AF                     XOR   a   
08DB   12                     LD   (de),a   ; terminate string with null
08DC   C5                     PUSH   bc   
08DD   01 00 1A               LD   bc,PAD   
08E0   CD 0E 09               CALL   hashStr   ; hl = hash
08E3   44 4D                  LD   bc,hl   
08E5   CD 4D 09               CALL   lookupEntry   
08E8   C1                     POP   bc   
08E9   38 02                  JR   c,ident3   ; todo: no entry? print an error message
08EB   DD E9                  JP   (ix)   
08ED                IDENT3:      
08ED   E9                     JP   (hl)   
08EE                FRAC:        
08EE   2A 7E 1B               LD   hl,(vFrac)   
08F1   E5                     PUSH   hl   
08F2   DD E9                  JP   (ix)   
08F4                SQRT1:       
08F4   E1                     POP   hl   
08F5   C5                     PUSH   bc   
08F6   CD 8A 09               CALL   squareRoot   
08F9   ED 43 7E 1B            LD   (vFrac),bc   
08FD   C1                     POP   bc   
08FE   D5                     PUSH   de   
08FF   DD E9                  JP   (ix)   
0901                ABS1:        
0901   E1                     POP   hl   
0902   CB 7C                  BIT   7,h   
0904   C8                     RET   z   
0905   AF                     XOR   a   
0906   95                     SUB   l   
0907   6F                     LD   l,a   
0908   9F                     SBC   a,a   
0909   94                     SUB   h   
090A   67                     LD   h,a   
090B   E5                     PUSH   hl   
090C   DD E9                  JP   (ix)   
090E                             ; ===============================================================================
090E                             ; 
090E                             ; hash C-string in BC, result in HL
090E                HASHSTR:      
090E   21 00 00               LD   hl,0   
0911                HASHSTR1:      
0911   0A                     LD   a,(bc)   ; load next char
0912   03                     INC   bc   
0913   FE 00                  CP   0   ; null?
0915   C8                     RET   z   
0916                HASHSTR2:      
0916   16 00                  LD   d,0   
0918   5F                     LD   e,a   
0919   19                     ADD   hl,de   
091A   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
091C   29                     ADD   hl,hl   ; shift left
091D   19                     ADD   hl,de   ; add
091E   29                     ADD   hl,hl   ; shift left
091F   29                     ADD   hl,hl   ; shift left
0920   29                     ADD   hl,hl   ; shift left
0921   29                     ADD   hl,hl   ; shift left
0922   29                     ADD   hl,hl   ; shift left
0923   29                     ADD   hl,hl   ; shift left
0924   19                     ADD   hl,de   ; add
0925   18 EA                  JR   hashStr1   
0927                             ; add entry to hash slots and hash pointers
0927                             ; bc = hash (b = hi, c = lo), de = addr
0927                             ; sets carry if successful
0927                DEFINEENTRY:      
0927   CB 21                  SLA   c   ; lo = lo * 2
0929   69                     LD   l,c   ; lo1 = lo
092A   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
092C                DEFINEENTRY0:      
092C   7E                     LD   a,(hl)   ; a = (lo1)
092D   FE FF                  CP   UNUSED   ; is it unused?
092F   28 12                  JR   z,defineEntry3   ; yes, add entry
0931   79                     LD   a,c   ; a = lo
0932   BE                     CP   (hl)   ; compare (lo1) with lo
0933   20 06                  JR   nz,defineEntry1   ; no match loop around
0935   2C                     INC   l   
0936   78                     LD   a,b   ; a = hi
0937   BE                     CP   (hl)   ; compare (lo1+1) with hi
0938   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
093A   2D                     DEC   l   ; restore l
093B                DEFINEENTRY1:      
093B   2C                     INC   l   ; try next entry
093C   2C                     INC   l   
093D   79                     LD   a,c   ; compare lo and lo1
093E   BD                     CP   l   ; if equal then there's no space left, reject
093F   20 EB                  JR   nz,defineEntry0   
0941                DEFINEENTRY2:      
0941   3F                     CCF      ; clear carry flag, failure
0942   C9                     RET      
0943                DEFINEENTRY3:      ; new entry
0943   71                     LD   (hl),c   ; (lo1) = hash lo
0944   23                     INC   hl   
0945   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0946   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0948   72                     LD   (hl),d   
0949   2B                     DEC   hl   
094A   73                     LD   (hl),e   ; (slot + 2) = address
094B   37                     SCF      ; set carry flag, success
094C   C9                     RET      
094D                             ; looks up hash and returns address
094D                             ; bc = hash
094D                             ; returns addr in hl, sets carry if successful
094D                LOOKUPENTRY:      
094D   CB 21                  SLA   c   ; lo = lo * 2
094F   69                     LD   l,c   ; lo1 = lo
0950   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0952                LOOKUPENTRY0:      
0952   7E                     LD   a,(hl)   ; a = (hl), slot
0953   FE FF                  CP   UNUSED   ; is it unused?
0955   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0957   79                     LD   a,c   ; a = lo
0958   BE                     CP   (hl)   ; compare (lo1) with lo
0959   20 06                  JR   nz,lookupEntry1   ; no match loop around
095B   2C                     INC   l   
095C   78                     LD   a,b   ; a = hi
095D   BE                     CP   (hl)   ; compare (lo1+1) with hi
095E   28 09                  JR   z,lookupEntry3   
0960   2D                     DEC   l   
0961                LOOKUPENTRY1:      
0961   2C                     INC   l   
0962   2C                     INC   l   
0963   79                     LD   a,c   
0964   BD                     CP   l   ; no space left, reject
0965   20 EB                  JR   nz,lookupEntry0   
0967                LOOKUPENTRY2:      
0967   3F                     CCF      ; clear carry flag, failure
0968   C9                     RET      
0969                LOOKUPENTRY3:      
0969   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
096B   56                     LD   d,(hl)   
096C   2D                     DEC   l   ; restore l
096D   5E                     LD   e,(hl)   ; (slot + 2) = address
096E   EB                     EX   de,hl   
096F   37                     SCF      
0970   C9                     RET      
0971                             ; division subroutine.
0971                             ; bc: divisor, de: dividend, hl: remainder
0971                DIVIDE:      
0971   21 00 00               LD   hl,0   ; zero the remainder
0974   3E 10                  LD   a,16   ; loop counter
0976                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0976   CB 21                  SLA   c   
0978   CB 10                  RL   b   
097A   ED 6A                  ADC   hl,hl   
097C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
097E   38 03                  JR   c,divide2   
0980   0C                     INC   c   
0981   18 01                  JR   divide3   
0983                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0983   19                     ADD   hl,de   
0984                DIVIDE3:      
0984   3D                     DEC   a   
0985   20 EF                  JR   nz,divide1   
0987   50 59                  LD   de,bc   ; result from bc to de
0989   C9                     RET      
098A                             ; squareroot
098A                             ; Input: HL = value
098A                             ; Result: DE = square root BC = remainder
098A                SQUAREROOT:      
098A   01 00 08               LD   bc,0800h   
098D   59                     LD   e,c   
098E   AF                     XOR   a   
098F                SQUAREROOT1:      
098F   29                     ADD   hl,hl   
0990   CB 11                  RL   c   
0992   ED 6A                  ADC   hl,hl   
0994   CB 11                  RL   c   
0996   30 02                  JR   nc,$+4   
0998   CB C5                  SET   0,l   
099A   7B                     LD   a,e   
099B   87                     ADD   a,a   
099C   5F                     LD   e,a   
099D   87                     ADD   a,a   
099E   CB 45                  BIT   0,l   
09A0   20 03                  JR   nz,$+5   
09A2   91                     SUB   c   
09A3   30 05                  JR   nc,squareRoot4   
09A5   79                     LD   a,c   
09A6   93                     SUB   e   
09A7   1C                     INC   e   
09A8   93                     SUB   e   
09A9   4F                     LD   c,a   
09AA                SQUAREROOT4:      
09AA   10 E3                  DJNZ   squareRoot1   
09AC   CB 45                  BIT   0,l   
09AE   28 01                  JR   z,squareRoot5   
09B0   04                     INC   b   
09B1                SQUAREROOT5:      
09B1   16 00                  LD   d,0   
09B3   C9                     RET      
09B4                PRTDEC:      
09B4   CB 7C                  BIT   7,h   
09B6   28 0B                  JR   z,prtdec0   
09B8   3E 2D                  LD   a,"-"   
09BA   CD 85 00               CALL   putchar   
09BD   AF                     XOR   a   
09BE   95                     SUB   l   
09BF   6F                     LD   l,a   
09C0   9F                     SBC   a,a   
09C1   94                     SUB   h   
09C2   67                     LD   h,a   
09C3                PRTDEC0:      
09C3   C5                     PUSH   bc   
09C4   0E 00                  LD   c,0   ; leading zeros flag = false
09C6   11 F0 D8               LD   de,-10000   
09C9   CD E5 09               CALL   prtdec1   
09CC   11 18 FC               LD   de,-1000   
09CF   CD E5 09               CALL   prtdec1   
09D2   11 9C FF               LD   de,-100   
09D5   CD E5 09               CALL   prtdec1   
09D8   1E F6                  LD   e,-10   
09DA   CD E5 09               CALL   prtdec1   
09DD   0C                     INC   c   ; flag = true for at least digit
09DE   1E FF                  LD   e,-1   
09E0   CD E5 09               CALL   prtdec1   
09E3   C1                     POP   bc   
09E4   C9                     RET      
09E5                PRTDEC1:      
09E5   06 2F                  LD   b,"0"-1   
09E7                PRTDEC2:      
09E7   04                     INC   b   
09E8   19                     ADD   hl,de   
09E9   38 FC                  JR   c,prtdec2   
09EB   ED 52                  SBC   hl,de   
09ED   3E 30                  LD   a,"0"   
09EF   B8                     CP   b   
09F0   20 05                  JR   nz,prtdec3   
09F2   AF                     XOR   a   
09F3   B1                     OR   c   
09F4   C8                     RET   z   
09F5   18 01                  JR   prtdec4   
09F7                PRTDEC3:      
09F7   0C                     INC   c   
09F8                PRTDEC4:      
09F8   78                     LD   a,b   
09F9   C3 85 00               JP   putchar   
09FC                PRTHEX:      ; display hl as a 16-bit number in hex.
09FC   C5                     PUSH   bc   ; preserve the IP
09FD   7C                     LD   a,h   
09FE   CD 07 0A               CALL   prthex2   
0A01   7D                     LD   a,l   
0A02   CD 07 0A               CALL   prthex2   
0A05   C1                     POP   bc   
0A06   C9                     RET      
0A07                PRTHEX2:      
0A07   4F                     LD   c,a   
0A08   1F                     RRA      
0A09   1F                     RRA      
0A0A   1F                     RRA      
0A0B   1F                     RRA      
0A0C   CD 10 0A               CALL   prthex3   
0A0F   79                     LD   a,c   
0A10                PRTHEX3:      
0A10   E6 0F                  AND   0x0F   
0A12   C6 90                  ADD   a,0x90   
0A14   27                     DAA      
0A15   CE 40                  ADC   a,0x40   
0A17   27                     DAA      
0A18   C3 85 00               JP   putchar   
0A1B                PRINTSTR:      
0A1B   E3                     EX   (sp),hl   ; swap			
0A1C   CD 5B 0A               CALL   putStr   
0A1F   23                     INC   hl   ; inc past null
0A20   E3                     EX   (sp),hl   ; put it back	
0A21   C9                     RET      
0A22                             ; **************************************************************************
0A22                             ; calculate nesting value
0A22                             ; a is char to be tested,
0A22                             ; e is the nesting value (initially 0)
0A22                             ; e is increased by ( and [
0A22                             ; e is decreased by ) and ]
0A22                             ; e has its bit 7 toggled by `
0A22                             ; limited to 127 levels
0A22                             ; **************************************************************************
0A22                NESTING:      
0A22   FE 22                  CP   $22   ; quote char
0A24   20 0A                  JR   nz,nesting1   
0A26   CB 7B                  BIT   7,e   
0A28   28 03                  JR   z,nesting1a   
0A2A   CB BB                  RES   7,e   
0A2C   C9                     RET      
0A2D                NESTING1A:      
0A2D   CB FB                  SET   7,e   
0A2F   C9                     RET      
0A30                NESTING1:      
0A30   CB 7B                  BIT   7,e   
0A32   C0                     RET   nz   
0A33   FE 7B                  CP   "{"   
0A35   28 08                  JR   z,nesting2   
0A37   FE 5B                  CP   "["   
0A39   28 04                  JR   z,nesting2   
0A3B   FE 28                  CP   "("   
0A3D   20 02                  JR   nz,nesting3   
0A3F                NESTING2:      
0A3F   1C                     INC   e   
0A40   C9                     RET      
0A41                NESTING3:      
0A41   FE 7D                  CP   "}"   
0A43   28 07                  JR   z,nesting4   
0A45   FE 5D                  CP   "]"   
0A47   28 03                  JR   z,nesting4   
0A49   FE 29                  CP   ")"   
0A4B   C0                     RET   nz   
0A4C                NESTING4:      
0A4C   1D                     DEC   e   
0A4D   C9                     RET      
0A4E                PROMPT:      
0A4E   CD 1B 0A               CALL   printStr   
0A51   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0A56   C9                     RET      
0A57                PUTSTR0:      
0A57   CD 85 00               CALL   putchar   
0A5A   23                     INC   hl   
0A5B                PUTSTR:      
0A5B   7E                     LD   a,(hl)   
0A5C   B7                     OR   a   
0A5D   20 F8                  JR   nz,putStr0   
0A5F   C9                     RET      
0A60                CRLF:        
0A60   CD 1B 0A               CALL   printStr   
0A63   0D 0A 00               .CSTR   "\r\n"   
0A66   C9                     RET      
0A67                DEFINE:      
0A67   E1                     POP   hl   
0A68   7E                     LD   a,(hl)   
0A69   23                     INC   hl   
0A6A   44 4D                  LD   bc,hl   
0A6C   5F                     LD   e,a   
0A6D   16 00                  LD   d,0   
0A6F   19                     ADD   hl,de   
0A70   5E                     LD   e,(hl)   
0A71   23                     INC   hl   
0A72   56                     LD   d,(hl)   
0A73   23                     INC   hl   
0A74   E5                     PUSH   hl   ; bc = str
0A75   D5                     PUSH   de   
0A76   CD 0E 09               CALL   hashStr   ; hl = hash
0A79   D1                     POP   de   
0A7A   44 4D                  LD   bc,hl   
0A7C   C3 27 09               JP   defineEntry   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000   21 00 00               LD   hl,0   
4003   11 01 00               LD   de,1   
4006   19                     ADD   hl,de   
4007   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
4009   29                     ADD   hl,hl   ; shift left
400A   19                     ADD   hl,de   ; add
400B   29                     ADD   hl,hl   ; shift left
400C   29                     ADD   hl,hl   ; shift left
400D   29                     ADD   hl,hl   ; shift left
400E   29                     ADD   hl,hl   ; shift left
400F   29                     ADD   hl,hl   ; shift left
4010   29                     ADD   hl,hl   ; shift left
4011   19                     ADD   hl,de   ; add
4012                          ;*Macro unroll:  test "'hello' hash", $7f54
4012   31 00 1A               LD   SP,DSTACK   
4015   CD D0 04               CALL   init   
4018   CD B6 06               CALL   exec   
401B   27 68 65 6C 6C 6F 27 20 68 61 73 68 00 .CSTR   "'hello' hash"   
4028                          ;*Macro unroll:  expect "'hello' hash",$7f54
4028   E1                     POP   HL   
4029   E5                     PUSH   HL   
402A   11 54 7F               LD   DE,$7f54   
402D   B7                     OR   A   
402E   ED 52                  SBC   HL,DE   
4030   7D                     LD   A,L   
4031   B4                     OR   H   
4032   28 57                  JR   Z,expectM_0_2144S43   
4034   CD 1B 0A               CALL   printStr   
4037   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 68 61 73 68 00 .CSTR   "Code: ","'hello' hash"   
404A   CD 1B 0A               CALL   printStr   
404D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405C   21 54 7F               LD   HL,$7f54   
405F   CD B4 09               CALL   prtdec   
4062   CD 1B 0A               CALL   printStr   
4065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4072   E1                     POP   hl   
4073   E5                     PUSH   hl   
4074   CD B4 09               CALL   prtdec   
4077   E1                     POP   hl   
4078   CD 1B 0A               CALL   printStr   
407B   20 28 23 00            .CSTR   " (#"   
407F   CD FC 09               CALL   prthex   
4082   CD 1B 0A               CALL   printStr   
4085   29 0D 0A 00            .CSTR   ")\r\n"   
4089   76                     HALT      
408A   00                     .CSTR      
408B                EXPECTM_0_2144S43:      
408B   E1                     POP   HL   
408C                             ; test ":hello", $7f54
408C                             ; test ":hello 2 def", TRUE
408C                             ; test ":hello 2 def :hello addr", 2
408C                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
408C                             ; test "10 sqrt", 3
408C                             ; test "10 sqrt frac", 1
408C                             ; test "7 3 /", 2
408C                             ; test "7 3 / frac", 1
408C                             ; test "1 2 +", 3
408C                             ; test ":h {1} def :h addr exec", 1
408C                             ; test "by [`A` `B` `C`]", 0
408C                             ; test "by [`A` `B` `C`] 1 ge", "B"
408C                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
408C                             ; test "wo [10 20 30] 1 ge", 10
408C                             ; test "wo [10 20 30] 1 50 set 1 get", 50
408C                             ; test "1 2 +", 3
408C                             ; test "4 1 2 +", 3
408C                             ; test "1", 1
408C                             ; test "2", 2
408C                             ; test "``", 0
408C                             ; test "`a`", $61
408C                             ; test "`\\``", $60
408C                             ; test "`b` 'cba' in", -1
408C                             ; test "`x` 'cba' in", 0
408C                             ; test "5 0 (1) if", 5
408C                             ; test "0 (1) (2) ife", 2
408C                             ; test "5 -1 (1) if", 1
408C                             ; test "-1 (1) (2) ife", 1
408C                             ; test "9 sw (1) (5) ca", 5
408C                             ; test "0 sw (1) ca", 1
408C                             ; test "1 sw (1) (2) (3) ca", 2
408C                             ; test "5 -1 (2) if", 2
408C                             ; test "5 0 (2) if", 5
408C                             ; test "5 0 (0 (2) if) if", 5
408C                             ; test "5 0 (-1 (2) if) if", 5
408C                             ; test "5 -1 (2) if", 2
408C                             ; test "5 -1 (-1 (2) if) if", 2
408C                             ; test "(1) ex", 1
408C                             ; test "2 ($1) ex", 2
408C                             ; test "2 4 ($2) ex", 4
408C                             ; test "((1) ex) ex", 1
408C                             ; test "5 (-1 ($1) if) ex", 5
408C                             ; test "'A' @", 65
408C                             ; test "1", 1
408C                             ; test "0", 0
408C                             ; test "10", 10
408C                             ; test "123", 123
408C                             ; test "$10", $10
408C                             ; test "$FF", $FF
408C                             ; test "2 3 =", 0
408C                             ; test "3 3 =", 1
408C                             ; test "2 3 <", 1
408C                             ; test "3 3 <", 0
408C                             ; test "3 3 >", 0
408C                             ; test "4 3 >", 1
408C                             ; test "1 2 +", 3
408C                             ; test "123 456 +", 123+456
408C                             ; test "64 128 +", 64+128
408C                             ; test "5 3 -", 2
408C                             ; test "3 5 &", 1
408C                             ; test "3 5 |", 7
408C                             ; test "2 3 *", 6
408C                             ; test "1 2 3 + *", 5
408C                             ; ; test "1 2 3 ' +", 3
408C                             ; ; test "1_ 2 +",1
408C                             ; ; test "1_ 1 +",0
408C                             ; ; call enter
408C                             ; ;     .cstr "1 3",$22,"+"
408C                             ; ; expect "1 3 DUP +", 6
408C                             ; ; test "5 2/'", 2
408C                             ; ; test "3 5$ -", 2
408C                             ; ; test "5 2/$ '", 1
408C                             ; ; test "2 3%++", 7
408C                             ; ; test "1 2 3~''", 2
408C                             ; ; test "1 2 3~+*", 8
408C                             ; ; test "2a!a@",2
408C                             ; ; test "3x! 1 x@+x! x@", 4
408C                             ; ; test "3x! 1_ x@+x! x@", 2
408C                             ; ; test "1{", 2
408C                             ; ; test "1}", 0
408C                             ; ; test "2}", 1
408C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
408C                             ; ; test "(2) \\^", 2
408C                             ; ; test ":X1; X", 1
408C                             ; ; test ":A100;A", 100
408C                             ; ; test ":Aa!; 3A a@", 3
408C                             ; ; test ":Aa!;:Ba@;4AB", 4
408C                             ; ; test "[]$ '", 0
408C                             ; ; test "[3]$ '", 1
408C                             ; ; test "[3]'@", 3
408C                             ; ; test "[1 2 3]'@", 1
408C                             ; ; test "[1 2 3]'2+@", 2
408C                             ; ; test "\\h@[1]''\\h@$-", 2
408C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
408C                             ; ; test "\\[]$ '", 0
408C                             ; ; test "\\[3]'\\@", 3
408C                             ; ; test "\\[3]$ '", 1
408C                             ; ; test "\\[1 2 3]'\\@", 1
408C                             ; ; test "\\[1 2 3]'1+\\@", 2
408C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
408C                             ; ; test "\\h@\\[1]''\\h@$-", 1
408C                             ; ; test "\\`A`\\@",65
408C                             ; ; test "0 0(1+)", 0
408C                             ; ; test "0 1(1+)", 1
408C                             ; ; test "0 2(1+)", 2
408C                             ; ; test "0 1(0(1+))", 0
408C                             ; ; test "0 1(1(1+))", 1
408C                             ; ; test "0 2(1(1+))", 2
408C                             ; ; test "0 2(2(1+))", 4
408C                             ; ; test "0 1(\\i@+)", 0
408C                             ; ; test "0 2(\\i@+)", 1
408C                             ; ; test "0 3(\\i@+)", 3
408C                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
408C                             ; ; test "0t! 10(1 t@+t!) t@",10
408C                             ; ; test "0(100)(200)",200
408C                             ; ; test "1(100)(200)",100
408C                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
408C                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
408C                             ; ; test ":X10;\\0X", 10
408C                             ; ; test "2 \\1x! \\1x@", 2
408C   CD 1B 0A               CALL   printStr   
408F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4095   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               04CE DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 684 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 216 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 281 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 86 IN Siena.asm
START:              025F DEFINED AT LINE 184 IN Siena.asm
INTERPRET:          0275 DEFINED AT LINE 190 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
INTERPRET2:         027F DEFINED AT LINE 196 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
INTERPRET3:         0287 DEFINED AT LINE 203 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
INTERPRET4:         028D DEFINED AT LINE 209 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
WAITCHAR:           0292 DEFINED AT LINE 215 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 262 IN Siena.asm
MACRO:              02A1 DEFINED AT LINE 224 IN Siena.asm
WAITCHAR1:          02A3 DEFINED AT LINE 241 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
WAITCHAR3:          02B1 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
WAITCHAR4:          02C7 DEFINED AT LINE 266 IN Siena.asm
                    > USED AT LINE 220 IN Siena.asm
NEXT:               02CF DEFINED AT LINE 270 IN Siena.asm
                    > USED AT LINE 284 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
NEXT1:              02DC DEFINED AT LINE 280 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
ETX:                02E4 DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 404 IN Siena.asm
ETX1:               02ED DEFINED AT LINE 290 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
EXIT:               02EF DEFINED AT LINE 293 IN Siena.asm
                    > USED AT LINE 282 IN Siena.asm
                    > USED AT LINE 407 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 318 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 320 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 322 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 324 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 326 IN Siena.asm
LAMBDA_:            040C DEFINED AT LINE 328 IN Siena.asm
LAMBDAEND_:         040F DEFINED AT LINE 330 IN Siena.asm
DOT_:               0412 DEFINED AT LINE 332 IN Siena.asm
DOT2:               0416 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
BLOCK_:             041D DEFINED AT LINE 339 IN Siena.asm
BLOCKEND_:          0420 DEFINED AT LINE 341 IN Siena.asm
CHAR_:              0423 DEFINED AT LINE 343 IN Siena.asm
ARRAY_:             0426 DEFINED AT LINE 345 IN Siena.asm
ARRAYEND_:          0429 DEFINED AT LINE 347 IN Siena.asm
IDENT_:             042C DEFINED AT LINE 349 IN Siena.asm
SYMBOL_:            042F DEFINED AT LINE 351 IN Siena.asm
AND_:               0432 DEFINED AT LINE 353 IN Siena.asm
AND1:               0439 DEFINED AT LINE 361 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
                    > USED AT LINE 385 IN Siena.asm
OR_:                043D DEFINED AT LINE 366 IN Siena.asm
XOR_:               0446 DEFINED AT LINE 376 IN Siena.asm
XOR1:               0447 DEFINED AT LINE 378 IN Siena.asm
                    > USED AT LINE 389 IN Siena.asm
INV_:               044F DEFINED AT LINE 387 IN Siena.asm
ADD_:               0454 DEFINED AT LINE 391 IN Siena.asm
HDOT_:              045A DEFINED AT LINE 398 IN Siena.asm
ETX_:               0461 DEFINED AT LINE 403 IN Siena.asm
EXIT_:              0464 DEFINED AT LINE 406 IN Siena.asm
MUL_:               0467 DEFINED AT LINE 409 IN Siena.asm
SUB_:               046A DEFINED AT LINE 411 IN Siena.asm
SUB2:               046C DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
EQ_:                0472 DEFINED AT LINE 420 IN Siena.asm
FALSE_:             0479 DEFINED AT LINE 427 IN Siena.asm
                    > USED AT LINE 443 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
GT_:                047F DEFINED AT LINE 432 IN Siena.asm
LT_:                0483 DEFINED AT LINE 437 IN Siena.asm
LT1:                0485 DEFINED AT LINE 440 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
TRUE_:              048D DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
GTE_:               0493 DEFINED AT LINE 451 IN Siena.asm
LTE_:               0497 DEFINED AT LINE 455 IN Siena.asm
LTE1:               0499 DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
MOD_:               04A2 DEFINED AT LINE 464 IN Siena.asm
DIV_:               04AE DEFINED AT LINE 474 IN Siena.asm
NOP_:               04BD DEFINED AT LINE 485 IN Siena.asm
KEY:                04BF DEFINED AT LINE 490 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
NEG:                04C8 DEFINED AT LINE 528 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
GET:                04CE DEFINED AT LINE 579 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
SET1:               04CE DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
LET:                04CE DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 668 IN Siena.asm
WHILE:              04CE DEFINED AT LINE 582 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
FILTER:             04CE DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
MAP:                04CE DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
INIT:               04D0 DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 186 IN Siena.asm
                    > USED AT LINE 40
INIT1:              04EA DEFINED AT LINE 605 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
SHL:                0612 DEFINED AT LINE 720 IN Siena.asm
                    > USED AT LINE 692 IN Siena.asm
SHR:                0617 DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
SHR1:               0618 DEFINED AT LINE 728 IN Siena.asm
MUL:                061F DEFINED AT LINE 734 IN Siena.asm
                    > USED AT LINE 409 IN Siena.asm
MUL2:               0629 DEFINED AT LINE 743 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
NUM:                063B DEFINED AT LINE 757 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
NUM0:               0644 DEFINED AT LINE 763 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
NUM1:               0645 DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
NUM2:               065D DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
                    > USED AT LINE 807 IN Siena.asm
NUM3:               0668 DEFINED AT LINE 791 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
HEXNUM:             066B DEFINED AT LINE 795 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
HEXNUM1:            066E DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
HEXNUM2:            0676 DEFINED AT LINE 803 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
STRDEF:             0688 DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
STRDEF1:            0690 DEFINED AT LINE 822 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
STRDEF2:            0693 DEFINED AT LINE 826 IN Siena.asm
                    > USED AT LINE 821 IN Siena.asm
CHAR:               06A1 DEFINED AT LINE 836 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
CHAR1:              06A4 DEFINED AT LINE 838 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
CHAR2:              06B0 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 844 IN Siena.asm
CHAR3:              06B3 DEFINED AT LINE 850 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
EXEC:               06B6 DEFINED AT LINE 855 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              06B7 DEFINED AT LINE 857 IN Siena.asm
EXEC2:              06BB DEFINED AT LINE 861 IN Siena.asm
EXEC3:              06C9 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
LAMBDA:             06CB DEFINED AT LINE 873 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
LAMBDA1:            06D2 DEFINED AT LINE 878 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
LAMBDA2:            06F6 DEFINED AT LINE 899 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
LAMBDAEND:          0705 DEFINED AT LINE 909 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
BLOCK:              0719 DEFINED AT LINE 924 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
BLOCK1:             071D DEFINED AT LINE 928 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
BLOCK2:             073F DEFINED AT LINE 947 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
BLOCKEND:           074B DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
ARG:                075F DEFINED AT LINE 971 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
IN:                 077A DEFINED AT LINE 991 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
IN1:                077C DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
IN2:                0786 DEFINED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
IN3:                078C DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
IF:                 078F DEFINED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
IFTE:               0794 DEFINED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
IFTE1:              0795 DEFINED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
IFTE2:              079E DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
IFTE3:              07B5 DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
SWITCH:             07B7 DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 704 IN Siena.asm
CASE:               07CB DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
CASE0:              07E7 DEFINED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
CASE1:              07EC DEFINED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
CASE2:              07F9 DEFINED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
WORDS:              07FB DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
BYTES:              0800 DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 620 IN Siena.asm
BYTES1:             0803 DEFINED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
ARRAY:              0808 DEFINED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
ARRAYEND:           081A DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
ARRAYEND1:          083C DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
ARRAYEND2:          0848 DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1186 IN Siena.asm
ARRAYEND3:          0858 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
HASH:               086F DEFINED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
DEF:                087A DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
DEF1:               0888 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
ADDR:               088C DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 616 IN Siena.asm
ADDR1:              0898 DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
SYMBOL:             089C DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
SYMBOL0:            08A4 DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
SYMBOL1:            08A6 DEFINED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
IDENT:              08C2 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
IDENT0:             08C9 DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1286 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
IDENT1:             08CB DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
IDENT3:             08ED DEFINED AT LINE 1300 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
FRAC:               08EE DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
SQRT1:              08F4 DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 700 IN Siena.asm
ABS1:               0901 DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
HASHSTR:            090E DEFINED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
HASHSTR1:           0911 DEFINED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
HASHSTR2:           0916 DEFINED AT LINE 1341 IN Siena.asm
DEFINEENTRY:        0927 DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
DEFINEENTRY0:       092C DEFINED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
DEFINEENTRY1:       093B DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
DEFINEENTRY2:       0941 DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
DEFINEENTRY3:       0943 DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
LOOKUPENTRY:        094D DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
LOOKUPENTRY0:       0952 DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
LOOKUPENTRY1:       0961 DEFINED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
LOOKUPENTRY2:       0967 DEFINED AT LINE 1421 IN Siena.asm
LOOKUPENTRY3:       0969 DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1413 IN Siena.asm
DIVIDE:             0971 DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
DIVIDE1:            0976 DEFINED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
DIVIDE2:            0983 DEFINED AT LINE 1447 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
DIVIDE3:            0984 DEFINED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
SQUAREROOT:         098A DEFINED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
SQUAREROOT1:        098F DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
SQUAREROOT4:        09AA DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
SQUAREROOT5:        09B1 DEFINED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
PRTDEC:             09B4 DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            09C3 DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
PRTDEC1:            09E5 DEFINED AT LINE 1519 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
PRTDEC2:            09E7 DEFINED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
PRTDEC3:            09F7 DEFINED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
PRTDEC4:            09F8 DEFINED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
PRTHEX:             09FC DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0A07 DEFINED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
PRTHEX3:            0A10 DEFINED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
PRINTSTR:           0A1B DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 187 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 170
NESTING:            0A22 DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 207 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
NESTING1A:          0A2D DEFINED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
NESTING1:           0A30 DEFINED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
NESTING2:           0A3F DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
NESTING3:           0A41 DEFINED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
NESTING4:           0A4C DEFINED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
PROMPT:             0A4E DEFINED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 191 IN Siena.asm
PUTSTR0:            0A57 DEFINED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
PUTSTR:             0A5B DEFINED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
CRLF:               0A60 DEFINED AT LINE 1627 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
DEFINE:             0A67 DEFINED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
                    > USED AT LINE 618 IN Siena.asm
                    > USED AT LINE 622 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
                    > USED AT LINE 658 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 682 IN Siena.asm
                    > USED AT LINE 686 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 200 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 185 IN Siena.asm
                    > USED AT LINE 286 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 598 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 480 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 194 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 818 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 604 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2144S43:  408B DEFINED AT LINE 34
                    > USED AT LINE 10
