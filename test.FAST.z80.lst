0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD D0 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C9                     DB   lsb(nop_)   ; SP
0221   C9                     DB   lsb(nop_)   ; !
0222   C9                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C9                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   C9                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   B1                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   0C                     DB   lsb(clear_)   ; ;
023C   A4                     DB   lsb(lt_)   ; <
023D   9B                     DB   lsb(eq_)   ; =
023E   A0                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   C9                     DB   lsb(nop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   C9                     DB   lsb(nop_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   C9                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0A 04               JP   num   
0303                HEXNUM_:      
0303   C3 3A 04               JP   hexnum   
0306                ARG_:        
0306   C3 ED 04               JP   arg   
0309                STRING_:      
0309   C3 57 04               JP   string   
030C                CLEAR_:      
030C   C3 C4 0A               JP   clear   
030F                PAREN_:      
030F   C3 85 04               JP   paren   
0312                PARENEND_:      
0312   C3 92 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD 4D 08               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 70 08               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 05 08               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 80 1B               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   E5                     PUSH   hl   
034A   DD E9                  JP   (ix)   
034C                BLOCK_:      
034C   C3 A1 04               JP   block   
034F                BLOCKEND_:      
034F   C3 D9 04               JP   blockend   
0352                CHAR_:       
0352   C3 70 04               JP   char   
0355                ARRAY_:      
0355   C3 F2 05               JP   array   
0358                ARRAYEND_:      
0358   C3 04 06               JP   arrayEnd   
035B                IDENT_:      
035B   C3 BF 06               JP   ident   
035E                SYMBOL_:      
035E   C3 98 06               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD 4D 08               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 EE 03               JP   mul   
0393                SUB_:        ; Subtract the value 2nd on stack from top of stack
0393   D1                     POP   de   
0394   E1                     POP   hl   ; Entry point for INVert
0395                SUB2:        
0395   B7                     OR   a   ; Entry point for NEGate
0396   ED 52                  SBC   hl,de   
0398   E5                     PUSH   hl   
0399   DD E9                  JP   (ix)   
039B                EQ_:         
039B   E1                     POP   hl   
039C   D1                     POP   de   
039D   C3 18 07               JP   equals   
03A0                GT_:         
03A0   D1                     POP   de   
03A1   E1                     POP   hl   
03A2   18 02                  JR   lt1   
03A4                LT_:         
03A4   E1                     POP   hl   
03A5   D1                     POP   de   
03A6                LT1:         
03A6   03                     INC   bc   
03A7   0A                     LD   a,(bc)   
03A8   FE 3D                  CP   "="   
03AA   CA 20 07               JP   z,lessthaneq   
03AD   0B                     DEC   bc   
03AE   C3 25 07               JP   lessthan   
03B1                DIV_:        
03B1   D1                     POP   de   ; get first value
03B2   E1                     POP   hl   ; get 2nd value
03B3   C5                     PUSH   bc   ; preserve the IP
03B4   44 4D                  LD   bc,hl   
03B6   CD C2 07               CALL   divide   
03B9   22 7E 1B               LD   (vFrac),hl   
03BC   C1                     POP   bc   
03BD   D5                     PUSH   de   ; push result
03BE   DD E9                  JP   (ix)   
03C0                COMMENT_:      
03C0   03                     INC   bc   ; point to next char
03C1   0A                     LD   a,(bc)   
03C2   FE 20                  CP   " "   ; terminate on any char less than SP
03C4   30 FA                  JR   nc,comment_   
03C6   0B                     DEC   bc   
03C7   DD E9                  JP   (ix)   
03C9                NOP_:        
03C9   DD E9                  JP   (ix)   
03CB                             ;*******************************************************************
03CB                             ; word operators
03CB                             ;*******************************************************************
03CB                             ; shl
03CB                             ; value count -- value2          shift left count places
03CB                SHL:         
03CB   50 59                  LD   de,bc   ; save IP
03CD   C1                     POP   bc   ; bc = count
03CE   41                     LD   b,c   ; b = loop counter
03CF   E1                     POP   hl   
03D0   04                     INC   b   ; test for counter=0 case
03D1   18 01                  JR   shl2   
03D3                SHL1:        
03D3   29                     ADD   hl,hl   ; left shift hl
03D4                SHL2:        
03D4   10 FD                  DJNZ   shl1   
03D6   E5                     PUSH   hl   
03D7   42 4B                  LD   bc,de   ; restore IP
03D9   DD E9                  JP   (ix)   
03DB                             ; shr
03DB                             ; value count -- value2          shift left count places
03DB                SHR:         
03DB   50 59                  LD   de,bc   ; save IP
03DD   C1                     POP   bc   ; bc = count
03DE   41                     LD   b,c   ; b = loop counter
03DF   E1                     POP   hl   
03E0   04                     INC   b   ; test for counter=0 case
03E1   18 04                  JR   shr2   
03E3                SHR1:        
03E3   CB 3C                  SRL   h   ; right shift hl
03E5   CB 1D                  RR   l   
03E7                SHR2:        
03E7   10 FA                  DJNZ   shr1   
03E9   E5                     PUSH   hl   
03EA   42 4B                  LD   bc,de   ; restore IP
03EC   DD E9                  JP   (ix)   
03EE                MUL:         ;=19
03EE   D1                     POP   de   ; get first value
03EF   E1                     POP   hl   
03F0   C5                     PUSH   bc   ; Preserve the IP
03F1   44                     LD   b,h   ; bc = 2nd value
03F2   4D                     LD   c,l   
03F3   21 00 00               LD   hl,0   
03F6   3E 10                  LD   a,16   
03F8                MUL2:        
03F8   29                     ADD   hl,hl   
03F9   CB 13                  RL   e   
03FB   CB 12                  RL   d   
03FD   30 04                  JR   nc,$+6   
03FF   09                     ADD   hl,bc   
0400   30 01                  JR   nc,$+3   
0402   13                     INC   de   
0403   3D                     DEC   a   
0404   20 F2                  JR   nz,mul2   
0406   C1                     POP   bc   ; Restore the IP
0407   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0408   DD E9                  JP   (ix)   
040A                NUM:         
040A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040D   0A                     LD   a,(bc)   ; Get numeral or -
040E   FE 2D                  CP   "-"   
0410   20 01                  JR   nz,num0   
0412   03                     INC   bc   ; move to next char, no flags affected
0413                NUM0:        
0413   08                     EX   af,af'   ; save zero flag = 0 for later
0414                NUM1:        
0414   0A                     LD   a,(bc)   ; read digit
0415   D6 30                  SUB   "0"   ; less than 0?
0417   38 13                  JR   c,num2   ; not a digit, exit loop
0419   FE 0A                  CP   10   ; greater that 9?
041B   30 0F                  JR   nc,num2   ; not a digit, exit loop
041D   03                     INC   bc   ; inc IP
041E   54 5D                  LD   de,hl   ; multiply hl * 10
0420   29                     ADD   hl,hl   
0421   29                     ADD   hl,hl   
0422   19                     ADD   hl,de   
0423   29                     ADD   hl,hl   
0424   85                     ADD   a,l   ; add digit in a to hl
0425   6F                     LD   l,a   
0426   3E 00                  LD   a,0   
0428   8C                     ADC   a,h   
0429   67                     LD   h,a   
042A   18 E8                  JR   num1   
042C                NUM2:        
042C   0B                     DEC   bc   
042D   08                     EX   af,af'   ; restore zero flag
042E   20 07                  JR   nz,num3   
0430   EB                     EX   de,hl   ; negate the value of hl
0431   21 00 00               LD   hl,0   
0434   B7                     OR   a   ; jump to sub2
0435   ED 52                  SBC   hl,de   
0437                NUM3:        
0437   E5                     PUSH   hl   ; Put the number on the stack
0438   DD E9                  JP   (ix)   ; and process the next character
043A                HEXNUM:      ; 
043A   21 00 00               LD   hl,0   ; Clear hl to accept the number
043D                HEXNUM1:      
043D   03                     INC   bc   
043E   0A                     LD   a,(bc)   ; Get the character which is a numeral
043F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0441   28 02                  JR   z,hexnum2   ; no a decimal
0443   D6 07                  SUB   7   ; sub 7  to make $a - $F
0445                HEXNUM2:      
0445   D6 30                  SUB   $30   ; Form decimal digit
0447   DA 2C 04               JP   c,num2   
044A   FE 10                  CP   $0F+1   
044C   D2 2C 04               JP   nc,num2   
044F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0450   29                     ADD   hl,hl   ; 4X
0451   29                     ADD   hl,hl   ; 8X
0452   29                     ADD   hl,hl   ; 16X
0453   85                     ADD   a,l   ; add into bottom of hl
0454   6F                     LD   l,a   ; 
0455   18 E6                  JR   hexnum1   
0457                             ; 
0457                STRING:      
0457   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
045B   D5                     PUSH   de   ; save start of string
045C   03                     INC   bc   ; point to next char
045D   18 03                  JR   string2   
045F                STRING1:      
045F   12                     LD   (de),a   
0460   13                     INC   de   ; increase count
0461   03                     INC   bc   ; point to next char
0462                STRING2:      
0462   0A                     LD   a,(bc)   
0463   FE 27                  CP   "'"   ; ' is the string terminator
0465   20 F8                  JR   nz,string1   
0467   AF                     XOR   a   ; write NUL to terminate string
0468   12                     LD   (de),a   
0469   13                     INC   de   
046A   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
046E   DD E9                  JP   (ix)   
0470                CHAR:        
0470   21 00 00               LD   hl,0   ; if `` is empty
0473                CHAR1:       
0473   03                     INC   bc   ; point to next char
0474   0A                     LD   a,(bc)   
0475   FE 60                  CP   "`"   ; ` is the string terminator
0477   28 09                  JR   z,char3   
0479   FE 5C                  CP   $5c   ; \ is the escape
047B   20 02                  JR   nz,char2   
047D   03                     INC   bc   
047E   0A                     LD   a,(bc)   
047F                CHAR2:       
047F   6F                     LD   l,a   
0480   18 F1                  JR   char1   
0482                CHAR3:       
0482   E5                     PUSH   hl   
0483   DD E9                  JP   (ix)   
0485                PAREN:       
0485   DD 21 8B 04            LD   ix,paren2   
0489   18 16                  JR   block   
048B                PAREN2:      
048B   DD 21 A6 0A            LD   ix,next   
048F   C3 F6 0A               JP   exec   
0492                PARENEND:      
0492   E1                     POP   hl   ; hl = last result
0493   D1                     POP   de   
0494   C1                     POP   bc   
0495   C1                     POP   bc   
0496   E5                     PUSH   hl   
0497   FD 62                  LD   iyh,d   
0499   FD 6B                  LD   iyl,e   
049B   DD 21 A6 0A            LD   ix,next   
049F   DD E9                  JP   (ix)   
04A1                BLOCK:       
04A1   03                     INC   bc   
04A2   C5                     PUSH   bc   ; return first opcode of block
04A3   16 01                  LD   d,1   ; nesting: count first parenthesis
04A5                BLOCK1:      ; Skip to end of definition
04A5   0A                     LD   a,(bc)   ; Get the next character
04A6   03                     INC   bc   ; Point to next character
04A7   FE 21                  CP   " " + 1   ; ignore whitespace
04A9   38 FA                  JR   c,block1   
04AB   FE 27                  CP   "'"   
04AD   28 22                  JR   z,block4   
04AF   FE 60                  CP   "`"   
04B1   28 1E                  JR   z,block4   
04B3   FE 28                  CP   "("   
04B5   28 17                  JR   z,block3   
04B7   FE 7B                  CP   "{"   
04B9   28 13                  JR   z,block3   
04BB   FE 5B                  CP   "["   
04BD   28 0F                  JR   z,block3   
04BF   FE 29                  CP   ")"   
04C1   28 08                  JR   z,block2   
04C3   FE 7D                  CP   "}"   
04C5   28 04                  JR   z,block2   
04C7   FE 5D                  CP   "]"   
04C9   20 DA                  JR   nz,block1   
04CB                BLOCK2:      
04CB   15                     DEC   d   
04CC   18 06                  JR   block5   
04CE                BLOCK3:      
04CE   14                     INC   d   
04CF   18 D4                  JR   block1   
04D1                BLOCK4:      
04D1   3E 80                  LD   a,$80   
04D3   82                     ADD   a,d   
04D4                BLOCK5:      
04D4   20 CF                  JR   nz,block1   ; get the next element
04D6   0B                     DEC   bc   ; balanced, exit
04D7   DD E9                  JP   (ix)   
04D9                BLOCKEND:      
04D9   E1                     POP   hl   ; hl = last result
04DA   FD 54                  LD   d,iyh   ; de = BP
04DC   FD 5D                  LD   e,iyl   
04DE   EB                     EX   de,hl   ; hl = BP, de = result
04DF   F9                     LD   sp,hl   ; sp = BP
04E0   E1                     POP   hl   ; hl = old BP
04E1   C1                     POP   bc   ; pop SCP (discard)
04E2   C1                     POP   bc   ; bc = IP
04E3   F9                     LD   sp,hl   ; sp = old BP
04E4   FD 21 00 00            LD   iy,0   ; iy = sp
04E8   FD 39                  ADD   iy,sp   
04EA   D5                     PUSH   de   ; push result
04EB   DD E9                  JP   (ix)   
04ED                ARG:         
04ED   03                     INC   bc   ; get next char
04EE   0A                     LD   a,(bc)   
04EF   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04F1   E6 07                  AND   $07   ; mask
04F3   87                     ADD   a,a   ; double
04F4   6F                     LD   l,a   ; hl = offset into args
04F5   26 00                  LD   h,0   
04F7   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04FA   FD 56 03               LD   d,(iy+3)   
04FD   EB                     EX   de,hl   ; hl = SCP - offset
04FE   B7                     OR   a   
04FF   ED 52                  SBC   hl,de   
0501   2B                     DEC   hl   ; de = arg
0502   56                     LD   d,(hl)   
0503   2B                     DEC   hl   
0504   5E                     LD   e,(hl)   
0505   D5                     PUSH   de   ; push arg
0506   DD E9                  JP   (ix)   
0508                             ; addr -- value
0508                GET:         
0508   E1                     POP   hl   
0509   16 00                  LD   d,0   
050B   5E                     LD   e,(hl)   
050C   3A 80 1B               LD   a,(vDataWidth)   
050F   3D                     DEC   a   
0510   28 02                  JR   z,get1   
0512   23                     INC   hl   
0513   56                     LD   d,(hl)   
0514                GET1:        
0514   D5                     PUSH   de   
0515   DD E9                  JP   (ix)   
0517                             ; addr value -- value0
0517                SET:         
0517   E1                     POP   hl   
0518   D1                     POP   de   
0519   7E                     LD   a,(hl)   
051A   73                     LD   (hl),e   
051B   5F                     LD   e,a   
051C   3A 80 1B               LD   a,(vDataWidth)   
051F   3D                     DEC   a   
0520   28 04                  JR   z,set1   
0522   23                     INC   hl   
0523   7E                     LD   a,(hl)   
0524   72                     LD   (hl),d   
0525   57                     LD   d,a   
0526                SET1:        
0526   D5                     PUSH   de   ; return old value
0527   DD E9                  JP   (ix)   
0529                             ; 
0529                             ; in:
0529                             ;  pop hl                      ; hl = string
0529                             ;  pop de                      ; de = char
0529                             ; in1:
0529                             ;  ld a,(hl)
0529                             ;  inc hl
0529                             ;  cp 0                        ; is end of string
0529                             ;  jr z,in2
0529                             ;  cp e
0529                             ;  jr nz,in1
0529                             ;  or a                        ; a is never 0, or a resets zero flag
0529                             ; in2:
0529                             ;  ld hl,0                     ; hl = result
0529                             ;  jr z,in3
0529                             ;  dec hl                      ; if nz de = $ffff
0529                             ; in3:
0529                             ;  push hl                     ; push result
0529                             ;  jp (ix)
0529                             ; newAdd2:
0529                             ;  push bc                     ; push IP
0529                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
0529                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
0529                             ;  push de                     ; push SCP
0529                             ;  push iy                     ; push base pointer
0529                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0529                             ;  add iy,sp                   ;
0529                             ;  ld d,(iy-1)
0529                             ;  ld e,(iy-2)
0529                             ;  ld h,(iy-3)
0529                             ;  ld l,(iy-4)
0529                             ;  add hl,de                   ; hl = hl + de
0529                             ;  ex de,hl                    ; de = result
0529                             ;  pop hl                      ; hl = old BP
0529                             ;  pop bc                      ; pop SCP (discard)
0529                             ;  pop bc                      ; bc = IP
0529                             ;  ld sp,hl                    ; sp = old BP
0529                             ;  ld iy,0
0529                             ;  add iy,sp
0529                             ;  push de                     ; push result
0529                             ;  jp (ix)
0529                IF:          
0529   11 00 00               LD   de,0   ; NUL pointer for else
052C   18 01                  JR   ifte1   
052E                IFTE:        
052E   D1                     POP   de   ; de = else
052F                IFTE1:       
052F   E1                     POP   hl   ; hl = then
0530   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0531   23                     INC   hl   ; check for true
0532   7C                     LD   a,h   
0533   B5                     OR   l   
0534   E1                     POP   hl   ; hl = then
0535   28 01                  JR   z,ifte2   
0537   EB                     EX   de,hl   ; condition = false, hl = else
0538                IFTE2:       
0538   7C                     LD   a,h   ; check if hl is NUL
0539   B5                     OR   l   
053A   28 13                  JR   z,ifte3   
053C   C5                     PUSH   bc   ; push IP
053D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0540   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0543   D5                     PUSH   de   ; push SCP
0544   FD E5                  PUSH   iy   ; push BP
0546   FD 21 00 00            LD   iy,0   ; iy = sp
054A   FD 39                  ADD   iy,sp   
054C   44 4D                  LD   bc,hl   ; IP = then
054E   0B                     DEC   bc   
054F                IFTE3:       
054F   DD E9                  JP   (ix)   
0551                             ; c b --
0551                             ; loops until c = 0
0551                LOOP:        
0551   D1                     POP   de   ; de = block                    c
0552   E1                     POP   hl   ; hl = condition
0553   D5                     PUSH   de   
0554   C5                     PUSH   bc   ; push IP
0555   42 4B                  LD   bc,de   ; bc = block
0557   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
055A   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
055D   D5                     PUSH   de   ; push SCP
055E   FD E5                  PUSH   iy   ; push BP
0560   FD 21 00 00            LD   iy,0   ; iy = sp
0564   FD 39                  ADD   iy,sp   
0566                LOOP1:       
0566   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0567   B4                     OR   h   
0568   28 21                  JR   z,loop3   
056A   11 80 05               LD   de,loop2-1   ; IP return address
056D   D5                     PUSH   de   
056E   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
0571   FD 56 03               LD   d,(iy+3)   
0574   D5                     PUSH   de   ; 
0575   FD E5                  PUSH   iy   ; push BP
0577   FD 21 00 00            LD   iy,0   ; iy = sp
057B   FD 39                  ADD   iy,sp   
057D   E5                     PUSH   hl   ; push condition
057E   0B                     DEC   bc   
057F   DD E9                  JP   (ix)   
0581                LOOP2:       
0581   1B                     DB   ESC   ; escape from interpreter
0582   FD 4E 06               LD   c,(iy+6)   ; bc = block
0585   FD 46 07               LD   b,(iy+7)   
0588   E1                     POP   hl   ; hl = condition
0589   18 DB                  JR   loop1   
058B                LOOP3:       
058B   FD 54                  LD   d,iyh   ; de = BP
058D   FD 5D                  LD   e,iyl   
058F   EB                     EX   de,hl   ; hl = BP, de = result
0590   F9                     LD   sp,hl   ; sp = BP
0591   E1                     POP   hl   ; hl = old BP
0592   C1                     POP   bc   ; pop SCP (discard)
0593   C1                     POP   bc   ; bc = IP
0594   F9                     LD   sp,hl   ; sp = old BP
0595   FD 21 00 00            LD   iy,0   ; iy = sp
0599   FD 39                  ADD   iy,sp   
059B   DD 21 A6 0A            LD   ix,next   
059F   DD E9                  JP   (ix)   
05A1                SWITCH:      
05A1   E1                     POP   hl   ; get selector from stack
05A2   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05A3   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05A6   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05A9   D5                     PUSH   de   ; push SCP
05AA   FD E5                  PUSH   iy   ; push BP
05AC   FD 21 00 00            LD   iy,0   ; BP = SP
05B0   FD 39                  ADD   iy,sp   
05B2   E5                     PUSH   hl   ; push selector as first arg of new frame
05B3   DD E9                  JP   (ix)   
05B5                CASE:        
05B5   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05B8   FD 6E FE               LD   l,(iy-2)   
05BB   23                     INC   hl   ; hl -= 1 index from second arg
05BC   29                     ADD   hl,hl   ; hl *= 2 word offset
05BD   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05BF   FD 5D                  LD   e,iyl   
05C1   EB                     EX   de,hl   
05C2   B7                     OR   a   ; hl = BP - offset
05C3   ED 52                  SBC   hl,de   
05C5   54 5D                  LD   de,hl   ; save arg ptr
05C7   2B                     DEC   hl   ; hl += 2
05C8   2B                     DEC   hl   
05C9   B7                     OR   a   ; arg ptr - stack pointer
05CA   ED 72                  SBC   hl,sp   
05CC   30 03                  JR   nc,case0   
05CE   D1                     POP   de   ; pop last arg
05CF   18 05                  JR   case1   
05D1                CASE0:       
05D1   EB                     EX   de,hl   
05D2   2B                     DEC   hl   ; de = arg
05D3   56                     LD   d,(hl)   
05D4   2B                     DEC   hl   
05D5   5E                     LD   e,(hl)   
05D6                CASE1:       
05D6   7A                     LD   a,d   ; is arg == NUL ? then skip
05D7   B3                     OR   e   
05D8   28 09                  JR   z,case2   
05DA   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05DD   FD 70 05               LD   (iy+5),b   
05E0   42 4B                  LD   bc,de   ; IP = arg
05E2   0B                     DEC   bc   
05E3                CASE2:       
05E3   DD E9                  JP   (ix)   
05E5                WORDS:       
05E5   21 02 00               LD   hl,2   
05E8   18 03                  JR   bytes1   
05EA                BYTES:       
05EA   21 01 00               LD   hl,1   
05ED                BYTES1:      
05ED   22 80 1B               LD   (vDataWidth),hl   
05F0   DD E9                  JP   (ix)   
05F2                ARRAY:       
05F2   C5                     PUSH   bc   ; create stack frame, push IP
05F3   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05F6   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05F9   D5                     PUSH   de   ; push SCP
05FA   FD E5                  PUSH   iy   ; push BP
05FC   FD 21 00 00            LD   iy,0   ; BP = SP
0600   FD 39                  ADD   iy,sp   
0602   DD E9                  JP   (ix)   
0604                ARRAYEND:      
0604   FD 54                  LD   d,iyh   ; de = BP
0606   FD 5D                  LD   e,iyl   
0608   DD 62                  LD   ixh,d   ; ix = BP
060A   DD 6B                  LD   ixl,e   
060C   62 6B                  LD   hl,de   ; hl = de
060E   B7                     OR   a   
060F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0611   CB 3C                  SRL   h   
0613   CB 1D                  RR   l   
0615   EB                     EX   de,hl   ; de = count
0616   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
0619   73                     LD   (hl),e   
061A   23                     INC   hl   
061B   72                     LD   (hl),d   
061C   23                     INC   hl   ; hl = array[0], de = count
061D   3A 80 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
0620   FE 01                  CP   1   
0622   20 10                  JR   nz,arrayEnd2   
0624                ARRAYEND1:      ; byte
0624   DD 7E FE               LD   a,(ix-2)   
0627   77                     LD   (hl),a   
0628   23                     INC   hl   
0629   DD 2B                  DEC   ix   
062B   DD 2B                  DEC   ix   
062D   1B                     DEC   de   
062E   7B                     LD   a,e   
062F   B2                     OR   d   
0630   20 F2                  JR   nz,arrayEnd1   
0632   18 13                  JR   arrayEnd3   
0634                ARRAYEND2:      ; word
0634   DD 7E FE               LD   a,(ix-2)   
0637   77                     LD   (hl),a   
0638   23                     INC   hl   
0639   DD 7E FF               LD   a,(ix-1)   
063C   77                     LD   (hl),a   
063D   23                     INC   hl   
063E   DD 2B                  DEC   ix   
0640   DD 2B                  DEC   ix   
0642   1B                     DEC   de   
0643   7B                     LD   a,e   
0644   B2                     OR   d   
0645   20 ED                  JR   nz,arrayEnd2   
0647                ARRAYEND3:      
0647   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0649   FD 5D                  LD   e,iyl   
064B   EB                     EX   de,hl   ; hl = BP, de = end of array
064C   F9                     LD   sp,hl   ; sp = BP
064D   E1                     POP   hl   ; hl = old BP, de = end of array
064E   DD E1                  POP   ix   ; pop SCP (discard)
0650   DD E1                  POP   ix   ; pop IP (discard)
0652   F9                     LD   sp,hl   ; sp = old BP
0653   FD 21 00 00            LD   iy,0   ; iy = sp
0657   FD 39                  ADD   iy,sp   
0659   DD 21 A6 0A            LD   ix,next   
065D   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0660   23                     INC   hl   
0661   23                     INC   hl   
0662   E5                     PUSH   hl   ; return array[0]
0663   EB                     EX   de,hl   ; hl = end of array, de = array[0]
0664   B7                     OR   a   
0665   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0667   EB                     EX   de,hl   
0668   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
066B   73                     LD   (hl),e   ; array[-2] = size
066C   23                     INC   hl   
066D   72                     LD   (hl),d   
066E   DD E9                  JP   (ix)   
0670                             ; str -- num
0670                HASH:        
0670   E1                     POP   hl   
0671   C5                     PUSH   bc   
0672   44 4D                  LD   bc,hl   
0674   CD 5F 07               CALL   hashStr   
0677   C1                     POP   bc   
0678   E5                     PUSH   hl   
0679   DD E9                  JP   (ix)   
067B                             ; str addr -- bool
067B                DEF:         
067B   60 69                  LD   hl,bc   ; hl = IP
067D   D1                     POP   de   ; de = addr
067E   C1                     POP   bc   ; bc = hash
067F   E5                     PUSH   hl   
0680   CD 78 07               CALL   defineEntry   
0683   38 00                  JR   c,def1   
0685                             ; call error
0685                             ; .cstr "Collision"
0685                DEF1:        
0685   C1                     POP   bc   
0686   DD E9                  JP   (ix)   
0688                             ; str -- addr
0688                ADDR:        
0688   E1                     POP   hl   ; hl = hash
0689   C5                     PUSH   bc   
068A   44 4D                  LD   bc,hl   
068C   CD 9E 07               CALL   lookupEntry   
068F   38 03                  JR   c,addr1   
0691   21 00 00               LD   hl,0   
0694                             ; call printStr		
0694                             ; .cstr "Undefined"
0694                             ; jp interpret
0694                ADDR1:       
0694   C1                     POP   bc   
0695   E5                     PUSH   hl   
0696   DD E9                  JP   (ix)   
0698                SYMBOL:      
0698   03                     INC   bc   
0699   11 00 1A               LD   de,PAD   
069C   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069E   18 02                  JR   symbol1   
06A0                SYMBOL0:      ; copy to PAD area
06A0   03                     INC   bc   ; characters that are part of the identifier
06A1   13                     INC   de   
06A2                SYMBOL1:      ; 0-9 A-Z a-z _
06A2   0A                     LD   a,(bc)   
06A3   12                     LD   (de),a   
06A4   B7                     OR   a   
06A5   28 0A                  JR   z,symbol2   
06A7   6F                     LD   l,a   
06A8   7E                     LD   a,(hl)   
06A9   FE 5B                  CP   lsb(ident_)   
06AB   28 F3                  JR   z,symbol0   
06AD   FE 00                  CP   lsb(num_)   
06AF   28 EF                  JR   z,symbol0   
06B1                SYMBOL2:      
06B1   0B                     DEC   bc   
06B2   AF                     XOR   a   
06B3   12                     LD   (de),a   ; terminate string with NUL
06B4   C5                     PUSH   bc   
06B5   01 00 1A               LD   bc,PAD   
06B8   CD 5F 07               CALL   hashStr   ; hl = hash
06BB   C1                     POP   bc   
06BC   E5                     PUSH   hl   
06BD   DD E9                  JP   (ix)   
06BF                IDENT:       
06BF   11 00 1A               LD   de,PAD   
06C2   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06C4   18 02                  JR   ident1   
06C6                IDENT0:      ; copy to PAD area
06C6   03                     INC   bc   ; characters that are part of the identifier
06C7   13                     INC   de   
06C8                IDENT1:      ; 0-9 A-Z a-z _
06C8   0A                     LD   a,(bc)   
06C9   12                     LD   (de),a   
06CA   B7                     OR   a   
06CB   28 0A                  JR   z,ident2   
06CD   6F                     LD   l,a   
06CE   7E                     LD   a,(hl)   
06CF   FE 5B                  CP   lsb(ident_)   
06D1   28 F3                  JR   z,ident0   
06D3   FE 00                  CP   lsb(num_)   
06D5   28 EF                  JR   z,ident0   
06D7                IDENT2:      
06D7   0B                     DEC   bc   
06D8   AF                     XOR   a   
06D9   12                     LD   (de),a   ; terminate string with NUL
06DA   C5                     PUSH   bc   
06DB   01 00 1A               LD   bc,PAD   
06DE   CD 5F 07               CALL   hashStr   ; hl = hash
06E1   44 4D                  LD   bc,hl   
06E3   CD 9E 07               CALL   lookupEntry   
06E6   C1                     POP   bc   
06E7   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06E9   DD E9                  JP   (ix)   
06EB                IDENT3:      
06EB   E9                     JP   (hl)   
06EC                FRAC:        
06EC   2A 7E 1B               LD   hl,(vFrac)   
06EF   E5                     PUSH   hl   
06F0   DD E9                  JP   (ix)   
06F2                SQRT1:       
06F2   E1                     POP   hl   
06F3   C5                     PUSH   bc   
06F4   CD DB 07               CALL   squareRoot   
06F7   ED 43 7E 1B            LD   (vFrac),bc   
06FB   C1                     POP   bc   
06FC   D5                     PUSH   de   
06FD   DD E9                  JP   (ix)   
06FF                ABS1:        
06FF   E1                     POP   hl   
0700   CB 7C                  BIT   7,h   
0702   C8                     RET   z   
0703   AF                     XOR   a   
0704   95                     SUB   l   
0705   6F                     LD   l,a   
0706   9F                     SBC   a,a   
0707   94                     SUB   h   
0708   67                     LD   h,a   
0709   E5                     PUSH   hl   
070A   DD E9                  JP   (ix)   
070C                MOD:         
070C   D1                     POP   de   ; get first value
070D   E1                     POP   hl   ; get 2nd value
070E   C5                     PUSH   bc   ; preserve the IP
070F   44 4D                  LD   bc,hl   
0711   CD C2 07               CALL   divide   
0714   C1                     POP   bc   
0715   E5                     PUSH   hl   ; push remainder
0716   DD E9                  JP   (ix)   
0718                             ; hl = value1, de = value2
0718                             ; hl = result
0718                EQUALS:      
0718   B7                     OR   a   ; reset the carry flag
0719   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
071B   28 10                  JR   z,true1   
071D   C3 33 07               JP   false1   
0720                             ; hl = value1 de = value2
0720                             ; hl = result
0720                LESSTHANEQ:      
0720   B7                     OR   a   
0721   ED 52                  SBC   hl,de   
0723   18 05                  JR   lessthan1   
0725                             ; hl = value1 de = value2
0725                             ; hl = result
0725                LESSTHAN:      
0725   B7                     OR   a   
0726   ED 52                  SBC   hl,de   
0728   28 09                  JR   z,false1   
072A                LESSTHAN1:      
072A   FA 33 07               JP   m,false1   
072D                TRUE1:       
072D   21 FF FF               LD   hl,TRUE   
0730   E5                     PUSH   hl   
0731   DD E9                  JP   (ix)   
0733                FALSE1:      
0733   21 00 00               LD   hl,FALSE   
0736   E5                     PUSH   hl   
0737   DD E9                  JP   (ix)   
0739                             ; Z80 port input
0739                             ; port -- value
0739                INPUT:       
0739   E1                     POP   hl   
073A   59                     LD   e,c   ; save IP
073B   4D                     LD   c,l   
073C   ED 68                  IN   l,(c)   
073E   26 00                  LD   h,0   
0740   4B                     LD   c,e   ; restore IP
0741   E5                     PUSH   hl   
0742   DD E9                  JP   (ix)   
0744                             ; Z80 port output
0744                             ; value port --
0744                OUTPUT:      
0744   E1                     POP   hl   
0745   59                     LD   e,c   ; save IP
0746   4D                     LD   c,l   
0747   E1                     POP   hl   
0748   ED 69                  OUT   (c),l   
074A   4B                     LD   c,e   ; restore IP
074B   DD E9                  JP   (ix)   
074D                KEY:         
074D   CD 81 00               CALL   getchar   
0750   26 00                  LD   h,0   
0752   6F                     LD   l,a   
0753   E5                     PUSH   hl   
0754   DD E9                  JP   (ix)   
0756                NEG:         
0756   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0759   D1                     POP   de   
075A   C3 95 03               JP   sub2   ; use the SUBtract routine
075D                LET:         
075D                FILTER:      
075D                MAP:         
075D                SCAN:        
075D   DD E9                  JP   (ix)   
075F                             ; -------------------------------------------------------------------------------
075F                             ; hash C-string
075F                             ; BC = str
075F                             ; HL = hash
075F                HASHSTR:      
075F   21 00 00               LD   hl,0   
0762                HASHSTR1:      
0762   0A                     LD   a,(bc)   ; load next char
0763   03                     INC   bc   
0764   FE 00                  CP   0   ; NUL?
0766   C8                     RET   z   
0767                HASHSTR2:      
0767   16 00                  LD   d,0   
0769   5F                     LD   e,a   
076A   19                     ADD   hl,de   
076B   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
076D   29                     ADD   hl,hl   ; shift left
076E   19                     ADD   hl,de   ; add
076F   29                     ADD   hl,hl   ; shift left
0770   29                     ADD   hl,hl   ; shift left
0771   29                     ADD   hl,hl   ; shift left
0772   29                     ADD   hl,hl   ; shift left
0773   29                     ADD   hl,hl   ; shift left
0774   29                     ADD   hl,hl   ; shift left
0775   19                     ADD   hl,de   ; add
0776   18 EA                  JR   hashStr1   
0778                             ; add entry to hash slots and hash pointers
0778                             ; bc = hash (b = hi, c = lo), de = addr
0778                             ; sets carry if successful
0778                DEFINEENTRY:      
0778   CB 21                  SLA   c   ; lo = lo * 2
077A   69                     LD   l,c   ; lo1 = lo
077B   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077D                DEFINEENTRY0:      
077D   7E                     LD   a,(hl)   ; a = (lo1)
077E   FE FF                  CP   UNUSED   ; is it unused?
0780   28 12                  JR   z,defineEntry3   ; yes, add entry
0782   79                     LD   a,c   ; a = lo
0783   BE                     CP   (hl)   ; compare (lo1) with lo
0784   20 06                  JR   nz,defineEntry1   ; no match loop around
0786   2C                     INC   l   
0787   78                     LD   a,b   ; a = hi
0788   BE                     CP   (hl)   ; compare (lo1+1) with hi
0789   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
078B   2D                     DEC   l   ; restore l
078C                DEFINEENTRY1:      
078C   2C                     INC   l   ; try next entry
078D   2C                     INC   l   
078E   79                     LD   a,c   ; compare lo and lo1
078F   BD                     CP   l   ; if equal then there's no space left, reject
0790   20 EB                  JR   nz,defineEntry0   
0792                DEFINEENTRY2:      
0792   B7                     OR   a   ; clear carry flag, failure
0793   C9                     RET      
0794                DEFINEENTRY3:      ; new entry
0794   71                     LD   (hl),c   ; (lo1) = hash lo
0795   23                     INC   hl   
0796   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0797   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0799   72                     LD   (hl),d   
079A   2B                     DEC   hl   
079B   73                     LD   (hl),e   ; (slot + 2) = address
079C   37                     SCF      ; set carry flag, success
079D   C9                     RET      
079E                             ; looks up hash and returns address
079E                             ; bc = hash
079E                             ; returns addr in hl, sets carry if successful
079E                LOOKUPENTRY:      
079E   CB 21                  SLA   c   ; lo = lo * 2
07A0   69                     LD   l,c   ; lo1 = lo
07A1   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07A3                LOOKUPENTRY0:      
07A3   7E                     LD   a,(hl)   ; a = (hl), slot
07A4   FE FF                  CP   UNUSED   ; is it unused?
07A6   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07A8   79                     LD   a,c   ; a = lo
07A9   BE                     CP   (hl)   ; compare (lo1) with lo
07AA   20 06                  JR   nz,lookupEntry1   ; no match loop around
07AC   2C                     INC   l   
07AD   78                     LD   a,b   ; a = hi
07AE   BE                     CP   (hl)   ; compare (lo1+1) with hi
07AF   28 09                  JR   z,lookupEntry3   
07B1   2D                     DEC   l   
07B2                LOOKUPENTRY1:      
07B2   2C                     INC   l   
07B3   2C                     INC   l   
07B4   79                     LD   a,c   
07B5   BD                     CP   l   ; no space left, reject
07B6   20 EB                  JR   nz,lookupEntry0   
07B8                LOOKUPENTRY2:      
07B8   B7                     OR   a   ; clear carry flag, failure
07B9   C9                     RET      
07BA                LOOKUPENTRY3:      
07BA   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07BC   56                     LD   d,(hl)   
07BD   2D                     DEC   l   ; restore l
07BE   5E                     LD   e,(hl)   ; (slot + 2) = address
07BF   EB                     EX   de,hl   
07C0   37                     SCF      
07C1   C9                     RET      
07C2                             ; division subroutine.
07C2                             ; bc: divisor, de: dividend, hl: remainder
07C2                DIVIDE:      
07C2   21 00 00               LD   hl,0   ; zero the remainder
07C5   3E 10                  LD   a,16   ; loop counter
07C7                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07C7   CB 21                  SLA   c   
07C9   CB 10                  RL   b   
07CB   ED 6A                  ADC   hl,hl   
07CD   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07CF   38 03                  JR   c,divide2   
07D1   0C                     INC   c   
07D2   18 01                  JR   divide3   
07D4                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D4   19                     ADD   hl,de   
07D5                DIVIDE3:      
07D5   3D                     DEC   a   
07D6   20 EF                  JR   nz,divide1   
07D8   50 59                  LD   de,bc   ; result from bc to de
07DA   C9                     RET      
07DB                             ; squareroot
07DB                             ; Input: HL = value
07DB                             ; Result: DE = square root BC = remainder
07DB                SQUAREROOT:      
07DB   01 00 08               LD   bc,0800h   
07DE   59                     LD   e,c   
07DF   AF                     XOR   a   
07E0                SQUAREROOT1:      
07E0   29                     ADD   hl,hl   
07E1   CB 11                  RL   c   
07E3   ED 6A                  ADC   hl,hl   
07E5   CB 11                  RL   c   
07E7   30 02                  JR   nc,$+4   
07E9   CB C5                  SET   0,l   
07EB   7B                     LD   a,e   
07EC   87                     ADD   a,a   
07ED   5F                     LD   e,a   
07EE   87                     ADD   a,a   
07EF   CB 45                  BIT   0,l   
07F1   20 03                  JR   nz,$+5   
07F3   91                     SUB   c   
07F4   30 05                  JR   nc,squareRoot4   
07F6   79                     LD   a,c   
07F7   93                     SUB   e   
07F8   1C                     INC   e   
07F9   93                     SUB   e   
07FA   4F                     LD   c,a   
07FB                SQUAREROOT4:      
07FB   10 E3                  DJNZ   squareRoot1   
07FD   CB 45                  BIT   0,l   
07FF   28 01                  JR   z,squareRoot5   
0801   04                     INC   b   
0802                SQUAREROOT5:      
0802   16 00                  LD   d,0   
0804   C9                     RET      
0805                PRTDEC:      
0805   CB 7C                  BIT   7,h   
0807   28 0B                  JR   z,prtdec0   
0809   3E 2D                  LD   a,"-"   
080B   CD 85 00               CALL   putchar   
080E   AF                     XOR   a   
080F   95                     SUB   l   
0810   6F                     LD   l,a   
0811   9F                     SBC   a,a   
0812   94                     SUB   h   
0813   67                     LD   h,a   
0814                PRTDEC0:      
0814   C5                     PUSH   bc   
0815   0E 00                  LD   c,0   ; leading zeros flag = false
0817   11 F0 D8               LD   de,-10000   
081A   CD 36 08               CALL   prtdec1   
081D   11 18 FC               LD   de,-1000   
0820   CD 36 08               CALL   prtdec1   
0823   11 9C FF               LD   de,-100   
0826   CD 36 08               CALL   prtdec1   
0829   1E F6                  LD   e,-10   
082B   CD 36 08               CALL   prtdec1   
082E   0C                     INC   c   ; flag = true for at least digit
082F   1E FF                  LD   e,-1   
0831   CD 36 08               CALL   prtdec1   
0834   C1                     POP   bc   
0835   C9                     RET      
0836                PRTDEC1:      
0836   06 2F                  LD   b,"0"-1   
0838                PRTDEC2:      
0838   04                     INC   b   
0839   19                     ADD   hl,de   
083A   38 FC                  JR   c,prtdec2   
083C   ED 52                  SBC   hl,de   
083E   3E 30                  LD   a,"0"   
0840   B8                     CP   b   
0841   20 05                  JR   nz,prtdec3   
0843   AF                     XOR   a   
0844   B1                     OR   c   
0845   C8                     RET   z   
0846   18 01                  JR   prtdec4   
0848                PRTDEC3:      
0848   0C                     INC   c   
0849                PRTDEC4:      
0849   78                     LD   a,b   
084A   C3 85 00               JP   putchar   
084D                PRTHEX:      ; display hl as a 16-bit number in hex.
084D   C5                     PUSH   bc   ; preserve the IP
084E   7C                     LD   a,h   
084F   CD 58 08               CALL   prthex2   
0852   7D                     LD   a,l   
0853   CD 58 08               CALL   prthex2   
0856   C1                     POP   bc   
0857   C9                     RET      
0858                PRTHEX2:      
0858   4F                     LD   c,a   
0859   1F                     RRA      
085A   1F                     RRA      
085B   1F                     RRA      
085C   1F                     RRA      
085D   CD 61 08               CALL   prthex3   
0860   79                     LD   a,c   
0861                PRTHEX3:      
0861   E6 0F                  AND   0x0F   
0863   C6 90                  ADD   a,0x90   
0865   27                     DAA      
0866   CE 40                  ADC   a,0x40   
0868   27                     DAA      
0869   C3 85 00               JP   putchar   
086C                PRTSTR0:      
086C   CD 85 00               CALL   putchar   
086F   23                     INC   hl   
0870                PRTSTR:      
0870   7E                     LD   a,(hl)   
0871   B7                     OR   a   
0872   20 F8                  JR   nz,prtstr0   
0874   C9                     RET      
0875                             ; **************************************************************************
0875                             ; calculate nesting value
0875                             ; a is char to be tested,
0875                             ; e is the nesting value (initially 0)
0875                             ; e is increased by ( and [
0875                             ; e is decreased by ) and ]
0875                             ; e has its bit 7 toggled by `
0875                             ; limited to 127 levels
0875                             ; **************************************************************************
0875                NESTING:      
0875   FE 22                  CP   $22   ; quote char
0877   20 0A                  JR   nz,nesting1   
0879   CB 7B                  BIT   7,e   
087B   28 03                  JR   z,nesting1a   
087D   CB BB                  RES   7,e   
087F   C9                     RET      
0880                NESTING1A:      
0880   CB FB                  SET   7,e   
0882   C9                     RET      
0883                NESTING1:      
0883   CB 7B                  BIT   7,e   
0885   C0                     RET   nz   
0886   FE 7B                  CP   "{"   
0888   28 08                  JR   z,nesting2   
088A   FE 5B                  CP   "["   
088C   28 04                  JR   z,nesting2   
088E   FE 28                  CP   "("   
0890   20 02                  JR   nz,nesting3   
0892                NESTING2:      
0892   1C                     INC   e   
0893   C9                     RET      
0894                NESTING3:      
0894   FE 7D                  CP   "}"   
0896   28 07                  JR   z,nesting4   
0898   FE 5D                  CP   "]"   
089A   28 03                  JR   z,nesting4   
089C   FE 29                  CP   ")"   
089E   C0                     RET   nz   
089F                NESTING4:      
089F   1D                     DEC   e   
08A0   C9                     RET      
08A1                PROMPT:      
08A1   CD B1 08               CALL   printStr   
08A4   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08A9   C9                     RET      
08AA                CRLF:        
08AA   CD B1 08               CALL   printStr   
08AD   0D 0A 00               .CSTR   "\r\n"   
08B0   C9                     RET      
08B1                PRINTSTR:      
08B1   E3                     EX   (sp),hl   ; swap			
08B2   CD 70 08               CALL   prtstr   
08B5   23                     INC   hl   ; inc past NUL
08B6   E3                     EX   (sp),hl   ; put it back	
08B7   C9                     RET      
08B8                DEFINE:      
08B8   E1                     POP   hl   
08B9   7E                     LD   a,(hl)   
08BA   23                     INC   hl   
08BB   44 4D                  LD   bc,hl   
08BD   5F                     LD   e,a   
08BE   16 00                  LD   d,0   
08C0   19                     ADD   hl,de   
08C1   5E                     LD   e,(hl)   
08C2   23                     INC   hl   
08C3   56                     LD   d,(hl)   
08C4   23                     INC   hl   
08C5   E5                     PUSH   hl   ; bc = str
08C6   D5                     PUSH   de   
08C7   CD 5F 07               CALL   hashStr   ; hl = hash
08CA   D1                     POP   de   
08CB   44 4D                  LD   bc,hl   
08CD   C3 78 07               JP   defineEntry   
08D0                INIT:        
08D0   DD 21 A6 0A            LD   ix,next   
08D4   FD 21 00 1A            LD   iy,DSTACK   
08D8   21 80 01               LD   hl,isysVars   
08DB   11 7E 1B               LD   de,sysVars   
08DE   01 10 00               LD   bc,8 * 2   
08E1   ED B0                  LDIR      
08E3   3E FF                  LD   a,UNUSED   
08E5   06 00                  LD   b,0   
08E7   21 00 1C               LD   hl,hashSlots   
08EA                INIT1:       
08EA   77                     LD   (hl),a   
08EB   23                     INC   hl   
08EC   10 FC                  DJNZ   init1   
08EE   CD B8 08               CALL   define   
08F1   04 61 62 73 00         .PSTR   "abs",0   
08F6   FF 06                  DW   abs1   
08F8   CD B8 08               CALL   define   
08FB   05 61 64 64 72 00      .PSTR   "addr",0   
0901   88 06                  DW   addr   
0903   CD B8 08               CALL   define   
0906   06 62 79 74 65 73 00   .PSTR   "bytes",0   
090D   EA 05                  DW   bytes   
090F   CD B8 08               CALL   define   
0912   05 63 61 6C 6C 00      .PSTR   "call",0   
0918   E1 0A                  DW   call   
091A   CD B8 08               CALL   define   
091D   05 63 61 73 65 00      .PSTR   "case",0   
0923   B5 05                  DW   case   
0925   CD B8 08               CALL   define   
0928   04 64 65 66 00         .PSTR   "def",0   
092D   7B 06                  DW   def   
092F   CD B8 08               CALL   define   
0932   05 65 78 65 63 00      .PSTR   "exec",0   
0938   F6 0A                  DW   exec   
093A   CD B8 08               CALL   define   
093D   06 66 61 6C 73 65 00   .PSTR   "false",0   
0944   00 00                  DW   false   
0946   CD B8 08               CALL   define   
0949   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0951   5D 07                  DW   filter   
0953   CD B8 08               CALL   define   
0956   05 66 72 61 63 00      .PSTR   "frac",0   
095C   EC 06                  DW   frac   
095E   CD B8 08               CALL   define   
0961   04 67 65 74 00         .PSTR   "get",0   
0966   08 05                  DW   get   
0968   CD B8 08               CALL   define   
096B   05 68 61 73 68 00      .PSTR   "hash",0   
0971   70 06                  DW   hash   
0973   CD B8 08               CALL   define   
0976   06 69 6E 70 75 74 00   .PSTR   "input",0   
097D   39 07                  DW   input   
097F   CD B8 08               CALL   define   
0982   03 69 66 00            .PSTR   "if",0   
0986   29 05                  DW   if   
0988   CD B8 08               CALL   define   
098B   05 69 66 74 65 00      .PSTR   "ifte",0   
0991   2E 05                  DW   ifte   
0993   CD B8 08               CALL   define   
0996   04 6B 65 79 00         .PSTR   "key",0   
099B   4D 07                  DW   key   
099D   CD B8 08               CALL   define   
09A0   04 6C 65 74 00         .PSTR   "let",0   
09A5   5D 07                  DW   let   
09A7   CD B8 08               CALL   define   
09AA   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09B0   51 05                  DW   loop   
09B2   CD B8 08               CALL   define   
09B5   04 6D 61 70 00         .PSTR   "map",0   
09BA   5D 07                  DW   map   
09BC   CD B8 08               CALL   define   
09BF   04 6D 6F 64 00         .PSTR   "mod",0   
09C4   0C 07                  DW   mod   
09C6   CD B8 08               CALL   define   
09C9   04 6E 65 67 00         .PSTR   "neg",0   
09CE   56 07                  DW   neg   
09D0   CD B8 08               CALL   define   
09D3   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09DB   44 07                  DW   output   
09DD   CD B8 08               CALL   define   
09E0   05 73 63 61 6E 00      .PSTR   "scan",0   
09E6   01 00                  DW   scan   
09E8   CD B8 08               CALL   define   
09EB   04 73 65 74 00         .PSTR   "set",0   
09F0   17 05                  DW   set   
09F2   CD B8 08               CALL   define   
09F5   04 73 68 6C 00         .PSTR   "shl",0   
09FA   CB 03                  DW   shl   
09FC   CD B8 08               CALL   define   
09FF   04 73 68 72 00         .PSTR   "shr",0   
0A04   DB 03                  DW   shr   
0A06   CD B8 08               CALL   define   
0A09   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A0F   F2 06                  DW   sqrt1   
0A11   CD B8 08               CALL   define   
0A14   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A1C   A1 05                  DW   switch   
0A1E   CD B8 08               CALL   define   
0A21   05 74 72 75 65 00      .PSTR   "true",0   
0A27   FF FF                  DW   true   
0A29   CD B8 08               CALL   define   
0A2C   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A33   E5 05                  DW   words   
0A35   C9                     RET      
0A36                START:       
0A36   31 00 1A               LD   sp,DSTACK   ; start of Siena
0A39   CD D0 08               CALL   init   ; setups
0A3C   CD B1 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A3F   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A4C                INTERPRET:      
0A4C   CD A1 08               CALL   prompt   
0A4F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A52   ED 43 82 1B            LD   (vTIBPtr),bc   
0A56                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A56   1E 00                  LD   e,0   ; initilize nesting value
0A58   C5                     PUSH   bc   ; save offset into TIB,
0A59                             ; bc is also the count of chars in TIB
0A59   21 00 18               LD   hl,TIB   ; hl is start of TIB
0A5C   18 06                  JR   interpret4   
0A5E                INTERPRET3:      
0A5E   7E                     LD   a,(hl)   ; a = char in TIB
0A5F   23                     INC   hl   ; inc pointer into TIB
0A60   0B                     DEC   bc   ; dec count of chars in TIB
0A61   CD 75 08               CALL   nesting   ; update nesting value
0A64                INTERPRET4:      
0A64   79                     LD   a,c   ; is count zero?
0A65   B0                     OR   b   
0A66   20 F6                  JR   nz,interpret3   ; if not loop
0A68   C1                     POP   bc   ; restore offset into TIB
0A69                WAITCHAR:      
0A69   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A6C   FE 20                  CP   $20   ; compare to space
0A6E   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A70   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A72                             ; ???? NEEDED?
0A72   28 2A                  JR   z,waitchar4   
0A74   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A76   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A78                MACRO:       
0A78                             ;  ld (vTIBPtr),bc
0A78                             ;  ld hl,ctrlCodes
0A78                             ;  add a,l			            ; look up key of macros
0A78                             ;  ld l,a
0A78                             ;  ld e,(hl)
0A78                             ;  ld a,e
0A78                             ;  or a
0A78                             ;  jr z,macro1
0A78                             ;  ld d,msb(macros)
0A78                             ;  push de
0A78                             ;  call call		            ; Siena exec_ operation and jump to it
0A78                             ;  db DC1,0
0A78                             ; macro1:
0A78                             ;  ld bc,(vTIBPtr)
0A78   18 DC                  JR   interpret2   
0A7A                WAITCHAR1:      
0A7A   21 00 18               LD   hl,TIB   
0A7D   09                     ADD   hl,bc   
0A7E   77                     LD   (hl),a   ; store the character in textbuf
0A7F   03                     INC   bc   
0A80   CD 85 00               CALL   putchar   ; echo character to screen
0A83   CD 75 08               CALL   nesting   
0A86   18 E1                  JR   waitchar   ; wait for next character
0A88                WAITCHAR3:      
0A88   21 00 18               LD   hl,TIB   
0A8B   09                     ADD   hl,bc   
0A8C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A8E   23                     INC   hl   
0A8F   36 0A                  LD   (hl),"\n"   
0A91   23                     INC   hl   
0A92   03                     INC   bc   
0A93   03                     INC   bc   
0A94   CD AA 08               CALL   crlf   ; echo character to screen
0A97   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A98   B7                     OR   a   
0A99   20 CE                  JR   nz,waitchar   
0A9B   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A9D   03                     INC   bc   
0A9E                WAITCHAR4:      
0A9E   ED 43 82 1B            LD   (vTIBPtr),bc   
0AA2   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AA5                             ; we pressed enter
0AA5   0B                     DEC   bc   
0AA6                NEXT:        
0AA6   03                     INC   bc   ; Increment the IP
0AA7   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AA8                             ; bit 7,a                   ; is 15-bit opcode ?
0AA8                             ; jr nz,next3
0AA8   FE 20                  CP   " "   ; whitespace?
0AAA   28 FA                  JR   z,next   ; space? ignore
0AAC   38 07                  JR   c,next1   
0AAE   6F                     LD   l,a   ; index into table
0AAF   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AB1   6E                     LD   l,(hl)   ; get low jump address
0AB2   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AB4   E9                     JP   (hl)   ; Jump to routine
0AB5                NEXT1:       
0AB5   FE 1B                  CP   ESC   ; escape from interpreter
0AB7   28 07                  JR   z,escape   
0AB9   FE 00                  CP   NUL   ; end of input string?
0ABB   28 0F                  JR   z,exit   
0ABD                             ; cp ETX                      ; end of command line input text?
0ABD                             ; jr nz,next
0ABD                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0ABD                             ;     add hl,sp
0ABD                             ;     jr nc,next2
0ABD                             ;     ld sp,DSTACK                ; yes, reset stack
0ABD                             ; next2:
0ABD   C3 4C 0A               JP   interpret   ; no, other whitespace, macros?
0AC0                             ; next3:
0AC0                             ;     ld h,a                    ; build address
0AC0                             ;     inc bc
0AC0                             ;     ld a,(bc)
0AC0                             ;     ld l,a
0AC0                             ;     add hl,hl
0AC0                             ;     jp (hl)
0AC0                ESCAPE:      
0AC0   60 69                  LD   hl,bc   ; address of code after escape opcode
0AC2   23                     INC   hl   
0AC3   E9                     JP   (hl)   
0AC4                             ; clear stack args
0AC4                CLEAR:       
0AC4   FD 54                  LD   d,iyh   ; de = BP
0AC6   FD 5D                  LD   e,iyl   
0AC8   EB                     EX   de,hl   ; hl = BP, de = result
0AC9   F9                     LD   sp,hl   ; sp = BP
0ACA   DD E9                  JP   (ix)   
0ACC                EXIT:        
0ACC   50 59                  LD   de,bc   ; address of code after exit opcode
0ACE   13                     INC   de   
0ACF   D9                     EXX      
0AD0   C1                     POP   bc   ; bc = last result
0AD1   FD 54                  LD   d,iyh   ; de = BP
0AD3   FD 5D                  LD   e,iyl   
0AD5   EB                     EX   de,hl   ; hl = BP
0AD6   F9                     LD   sp,hl   ; sp = BP
0AD7   D9                     EXX      
0AD8   E1                     POP   hl   ; hl = old BP
0AD9   C1                     POP   bc   ; pop SCP (discard)
0ADA   C1                     POP   bc   ; bc = IP
0ADB   F9                     LD   sp,hl   ; sp = old BP
0ADC   D9                     EXX      
0ADD   C5                     PUSH   bc   ; push result
0ADE   D9                     EXX      
0ADF   EB                     EX   de,hl   
0AE0   E9                     JP   (hl)   
0AE1                             ; call with args
0AE1                             ; creates a scope
0AE1                CALL:        ; execute code at pointer
0AE1   E1                     POP   hl   ; hl = pointer to code
0AE2   7C                     LD   a,h   ; skip if destination address is NUL
0AE3   B5                     OR   l   
0AE4   28 0E                  JR   z,call2   
0AE6   C5                     PUSH   bc   ; push IP
0AE7   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0AE9   FD E5                  PUSH   iy   ; push BP
0AEB   FD 21 00 00            LD   iy,0   ; BP = SP
0AEF   FD 39                  ADD   iy,sp   
0AF1   44 4D                  LD   bc,hl   ; IP = pointer to code
0AF3   0B                     DEC   bc   ; dec to prepare for next routine
0AF4                CALL2:       
0AF4   DD E9                  JP   (ix)   
0AF6                             ; execute a block of code
0AF6                             ; uses parent scope
0AF6                EXEC:        ; execute code at pointer
0AF6   E1                     POP   hl   ; hl = pointer to code
0AF7   7C                     LD   a,h   ; skip if destination address is NUL
0AF8   B5                     OR   l   
0AF9   28 13                  JR   z,exec2   
0AFB   C5                     PUSH   bc   ; push IP
0AFC   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AFF   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0B02   D5                     PUSH   de   ; push SCP
0B03   FD E5                  PUSH   iy   ; push BP
0B05   FD 21 00 00            LD   iy,0   ; BP = SP
0B09   FD 39                  ADD   iy,sp   
0B0B   44 4D                  LD   bc,hl   ; IP = pointer to code
0B0D   0B                     DEC   bc   ; dec to prepare for next routine
0B0E                EXEC2:       
0B0E   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        
1E00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "1 2 {$1 $2 +} call", 3
4000                             ; test ":xyz {1} def (:xyz addr) call", 1
4000                          ;*Macro unroll:  test ":xyz {$1 $2 +} def  1 2 (:xyz addr) call", 3
4000   31 00 1A               LD   SP,DSTACK   
4003   CD D0 08               CALL   init   
4006   CD F6 0A               CALL   exec   
4009   3A 78 79 7A 20 7B 24 31 20 24 32 20 2B 7D 20 64 65 66 20 20 31 20 32 20 28 3A 78 79 7A 20 61 64 64 72 29 20 63 61 6C 6C 00 .CSTR   ":xyz {$1 $2 +} def  1 2 (:xyz addr) call"   
4032                          ;*Macro unroll:  expect ":xyz {$1 $2 +} def  1 2 (:xyz addr) call",3
4032   E1                     POP   HL   
4033   E5                     PUSH   HL   
4034   11 03 00               LD   DE,3   
4037   B7                     OR   A   
4038   ED 52                  SBC   HL,DE   
403A   7D                     LD   A,L   
403B   B4                     OR   H   
403C   28 73                  JR   Z,expectM_0_2257S43   
403E   CD B1 08               CALL   printStr   
4041   43 6F 64 65 3A 20 3A 78 79 7A 20 7B 24 31 20 24 32 20 2B 7D 20 64 65 66 20 20 31 20 32 20 28 3A 78 79 7A 20 61 64 64 72 29 20 63 61 6C 6C 00 .CSTR   "Code: ",":xyz {$1 $2 +} def  1 2 (:xyz addr) call"   
4070   CD B1 08               CALL   printStr   
4073   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4082   21 03 00               LD   HL,3   
4085   CD 05 08               CALL   prtdec   
4088   CD B1 08               CALL   printStr   
408B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4098   E1                     POP   hl   
4099   E5                     PUSH   hl   
409A   CD 05 08               CALL   prtdec   
409D   E1                     POP   hl   
409E   CD B1 08               CALL   printStr   
40A1   20 28 23 00            .CSTR   " (#"   
40A5   CD 4D 08               CALL   prthex   
40A8   CD B1 08               CALL   printStr   
40AB   29 0D 0A 00            .CSTR   ")\r\n"   
40AF   76                     HALT      
40B0   00                     .CSTR      
40B1                EXPECTM_0_2257S43:      
40B1   E1                     POP   HL   
40B2                             ; test "2 (1 2 +) *", 6
40B2                             ; test ":xyz {10} def :xyz addr exec", 10
40B2                             ; test ":xyz {10} def :xyz addr call", 10
40B2                             ; test "'hello' hash", $7f54
40B2                             ; test ":hello", $7f54
40B2                             ; test ":hello 2 def", TRUE
40B2                             ; test ":hello 2 def :hello addr", 2
40B2                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
40B2                             ; test "bytes [1 2 3]", $1e02
40B2                             ; test "bytes [1 2 3] 1? get", 2
40B2                             ; test "bytes :xx [1 2 3] def :xx addr", 2
40B2                             ; test "words [1 2 3]", $1e02
40B2                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
40B2                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
40B2                             ; test "words [10 20 30] 1 ? get", 10
40B2                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
40B2                             ; test "{{{1} exec} exec} exec", 1
40B2                             ; test "5 {{{$1} exec} exec} call", 5
40B2                             ; test "5 {$1} call", 5
40B2                             ; test "5 {{$1} exec} call", 5
40B2                             ; test "2 1 {{$1} call} call", 2
40B2                             ; test "2 1 {$2} call", 1
40B2                             ; test "2 1 {$1} call", 2
40B2                             ; test "2 1 {$2} call", 1
40B2                             ; test "2 4 {$2} call", 4
40B2                             ; test "{{1} call} call", 1
40B2                             ; test "5 {-1 {$1} if} call", 5
40B2                             ; test "0 {} loop", 0
40B2                             ; test "1 {1-} loop", $1a00
40B2                             ; test "65 .c", 0
40B2                             ; test "1 2 <", TRUE
40B2                             ; test "2 2 <=", TRUE
40B2                             ; test "2 1 <", FALSE
40B2                             ; test "1 2 >", FALSE
40B2                             ; test "2 2 >=", TRUE
40B2                             ; test "2 1 >", TRUE
40B2                             ; test "10 sqrt", 3
40B2                             ; test "10 sqrt frac", 1
40B2                             ; test "7 3 /", 2
40B2                             ; test "7 3 / frac", 1
40B2                             ; test "1 2 +", 3
40B2                             ; test ":h {1} def :h addr call", 1
40B2                             ; test "1 2 +", 3
40B2                             ; test "4 1 2 +", 3
40B2                             ; test "1", 1
40B2                             ; test "2", 2
40B2                             ; test "``", 0
40B2                             ; test "`a`", $61
40B2                             ; test "`\\``", $60
40B2                             ; test "`b` 'cba' in", -1
40B2                             ; test "`x` 'cba' in", 0
40B2                             ; test "5 0 {1} if", 5
40B2                             ; test "0 {1} {2} ifte", 2
40B2                             ; test "5 -1 {1} if", 1
40B2                             ; test "-1 {1} {2} ifte", 1
40B2                             ; test "9 sw {1} {5} ca", 5
40B2                             ; test "0 sw {1} ca", 1
40B2                             ; test "1 sw {1} {2} {3} ca", 2
40B2                             ; test "5 -1 {2} if", 2
40B2                             ; test "5 0 {2} if", 5
40B2                             ; test "5 0 {0 {2} if} if", 5
40B2                             ; test "5 0 {-1 {2} if} if", 5
40B2                             ; test "5 -1 {2} if", 2
40B2                             ; test "5 -1 {-1 {2} if} if", 2
40B2                             ; test "{1} ex", 1
40B2                             ; test "'A' @", 65
40B2                             ; test "1", 1
40B2                             ; test "0", 0
40B2                             ; test "10", 10
40B2                             ; test "123", 123
40B2                             ; test "$10", $10
40B2                             ; test "$FF", $FF
40B2                             ; test "2 3 =", 0
40B2                             ; test "3 3 =", 1
40B2                             ; test "2 3 <", 1
40B2                             ; test "3 3 <", 0
40B2                             ; test "3 3 >", 0
40B2                             ; test "4 3 >", 1
40B2                             ; test "1 2 +", 3
40B2                             ; test "123 456 +", 123+456
40B2                             ; test "64 128 +", 64+128
40B2                             ; test "5 3 -", 2
40B2                             ; test "3 5 &", 1
40B2                             ; test "3 5 |", 7
40B2                             ; test "2 3 *", 6
40B2                             ; test "1 2 3 + *", 5
40B2                             ; ; test "1 2 3 ' +", 3
40B2                             ; ; test "1_ 2 +",1
40B2                             ; ; test "1_ 1 +",0
40B2                             ; ; call enter
40B2                             ; ;     .cstr "1 3",$22,"+"
40B2                             ; ; expect "1 3 DUP +", 6
40B2                             ; ; test "5 2/'", 2
40B2                             ; ; test "3 5$ -", 2
40B2                             ; ; test "5 2/$ '", 1
40B2                             ; ; test "2 3%++", 7
40B2                             ; ; test "1 2 3~''", 2
40B2                             ; ; test "1 2 3~+*", 8
40B2                             ; ; test "2a!a@",2
40B2                             ; ; test "3x! 1 x@+x! x@", 4
40B2                             ; ; test "3x! 1_ x@+x! x@", 2
40B2                             ; ; test "1{", 2
40B2                             ; ; test "1}", 0
40B2                             ; ; test "2}", 1
40B2                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
40B2                             ; ; test "{2} \\^", 2
40B2                             ; ; test ":X1; X", 1
40B2                             ; ; test ":A100;A", 100
40B2                             ; ; test ":Aa!; 3A a@", 3
40B2                             ; ; test ":Aa!;:Ba@;4AB", 4
40B2                             ; ; test "[]$ '", 0
40B2                             ; ; test "[3]$ '", 1
40B2                             ; ; test "[3]'@", 3
40B2                             ; ; test "[1 2 3]'@", 1
40B2                             ; ; test "[1 2 3]'2+@", 2
40B2                             ; ; test "\\h@[1]''\\h@$-", 2
40B2                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
40B2                             ; ; test "\\[]$ '", 0
40B2                             ; ; test "\\[3]'\\@", 3
40B2                             ; ; test "\\[3]$ '", 1
40B2                             ; ; test "\\[1 2 3]'\\@", 1
40B2                             ; ; test "\\[1 2 3]'1+\\@", 2
40B2                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
40B2                             ; ; test "\\h@\\[1]''\\h@$-", 1
40B2                             ; ; test "\\`A`\\@",65
40B2                             ; ; test "0 0{1+}", 0
40B2                             ; ; test "0 1{1+}", 1
40B2                             ; ; test "0 2{1+}", 2
40B2                             ; ; test "0 1{0{1+}}", 0
40B2                             ; ; test "0 1{1{1+}}", 1
40B2                             ; ; test "0 2{1{1+}}", 2
40B2                             ; ; test "0 2{2{1+}}", 4
40B2                             ; ; test "0 1{\\i@+}", 0
40B2                             ; ; test "0 2{\\i@+}", 1
40B2                             ; ; test "0 3{\\i@+}", 3
40B2                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
40B2                             ; ; test "0t! 10{1 t@+t!} t@",10
40B2                             ; ; test "0{100}{200}",200
40B2                             ; ; test "1{100}{200}",100
40B2                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
40B2                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
40B2                             ; ; test ":X10;\\0X", 10
40B2                             ; ; test "2 \\1x! \\1x@", 2
40B2   CD B1 08               CALL   printStr   
40B5   44 6F 6E 65 21 00      .CSTR   "Done!"   
40BB   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               075D DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 58 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 92 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 195 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 197 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 200 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 203 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 206 IN Siena.asm
CLEAR_:             030C DEFINED AT LINE 209 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 212 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 215 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 218 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 226 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
DOT2:               032A DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
                    > USED AT LINE 236 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 246 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 253 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 258 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 260 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 262 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 264 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 266 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 268 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 270 IN Siena.asm
AND_:               0361 DEFINED AT LINE 272 IN Siena.asm
AND1:               0368 DEFINED AT LINE 280 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
                    > USED AT LINE 304 IN Siena.asm
OR_:                036C DEFINED AT LINE 285 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 295 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 297 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
INV_:               037E DEFINED AT LINE 306 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 310 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 317 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 322 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 325 IN Siena.asm
SUB2:               0395 DEFINED AT LINE 328 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
EQ_:                039B DEFINED AT LINE 334 IN Siena.asm
GT_:                03A0 DEFINED AT LINE 338 IN Siena.asm
LT_:                03A4 DEFINED AT LINE 342 IN Siena.asm
LT1:                03A6 DEFINED AT LINE 345 IN Siena.asm
                    > USED AT LINE 341 IN Siena.asm
DIV_:               03B1 DEFINED AT LINE 353 IN Siena.asm
COMMENT_:           03C0 DEFINED AT LINE 364 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
NOP_:               03C9 DEFINED AT LINE 372 IN Siena.asm
SHL:                03CB DEFINED AT LINE 382 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
SHL1:               03D3 DEFINED AT LINE 389 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
SHL2:               03D4 DEFINED AT LINE 391 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
SHR:                03DB DEFINED AT LINE 399 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
SHR1:               03E3 DEFINED AT LINE 406 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
SHR2:               03E7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
MUL:                03EE DEFINED AT LINE 415 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
MUL2:               03F8 DEFINED AT LINE 424 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
NUM:                040A DEFINED AT LINE 438 IN Siena.asm
                    > USED AT LINE 198 IN Siena.asm
NUM0:               0413 DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 442 IN Siena.asm
NUM1:               0414 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
NUM2:               042C DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
                    > USED AT LINE 488 IN Siena.asm
NUM3:               0437 DEFINED AT LINE 472 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
HEXNUM:             043A DEFINED AT LINE 476 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
HEXNUM1:            043D DEFINED AT LINE 478 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
HEXNUM2:            0445 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
STRING:             0457 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 207 IN Siena.asm
STRING1:            045F DEFINED AT LINE 502 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
STRING2:            0462 DEFINED AT LINE 506 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
CHAR:               0470 DEFINED AT LINE 516 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
CHAR1:              0473 DEFINED AT LINE 518 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
CHAR2:              047F DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
CHAR3:              0482 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
PAREN:              0485 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
PAREN2:             048B DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PARENEND:           0492 DEFINED AT LINE 541 IN Siena.asm
                    > USED AT LINE 216 IN Siena.asm
BLOCK:              04A1 DEFINED AT LINE 552 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
BLOCK1:             04A5 DEFINED AT LINE 556 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
BLOCK2:             04CB DEFINED AT LINE 577 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
BLOCK3:             04CE DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
BLOCK4:             04D1 DEFINED AT LINE 583 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
                    > USED AT LINE 564 IN Siena.asm
BLOCK5:             04D4 DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
BLOCKEND:           04D9 DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
ARG:                04ED DEFINED AT LINE 606 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
GET:                0508 DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
GET1:               0514 DEFINED AT LINE 636 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
SET:                0517 DEFINED AT LINE 641 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
SET1:               0526 DEFINED AT LINE 654 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
IF:                 0529 DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
IFTE:               052E DEFINED AT LINE 708 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
IFTE1:              052F DEFINED AT LINE 710 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
IFTE2:              0538 DEFINED AT LINE 719 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
IFTE3:              054F DEFINED AT LINE 732 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
LOOP:               0551 DEFINED AT LINE 737 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
LOOP1:              0566 DEFINED AT LINE 749 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
LOOP2:              0581 DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
LOOP3:              058B DEFINED AT LINE 772 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
SWITCH:             05A1 DEFINED AT LINE 786 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
CASE:               05B5 DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
CASE0:              05D1 DEFINED AT LINE 816 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
CASE1:              05D6 DEFINED AT LINE 822 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
CASE2:              05E3 DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 825 IN Siena.asm
WORDS:              05E5 DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
BYTES:              05EA DEFINED AT LINE 836 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
BYTES1:             05ED DEFINED AT LINE 838 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
ARRAY:              05F2 DEFINED AT LINE 842 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
ARRAYEND:           0604 DEFINED AT LINE 852 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
ARRAYEND1:          0624 DEFINED AT LINE 875 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
ARRAYEND2:          0634 DEFINED AT LINE 889 IN Siena.asm
                    > USED AT LINE 873 IN Siena.asm
                    > USED AT LINE 903 IN Siena.asm
ARRAYEND3:          0647 DEFINED AT LINE 905 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
HASH:               0670 DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
DEF:                067B DEFINED AT LINE 947 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
DEF1:               0685 DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 953 IN Siena.asm
ADDR:               0688 DEFINED AT LINE 961 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
ADDR1:              0694 DEFINED AT LINE 971 IN Siena.asm
                    > USED AT LINE 966 IN Siena.asm
SYMBOL:             0698 DEFINED AT LINE 976 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
SYMBOL0:            06A0 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
SYMBOL1:            06A2 DEFINED AT LINE 984 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
SYMBOL2:            06B1 DEFINED AT LINE 995 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
IDENT:              06BF DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
IDENT0:             06C6 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
IDENT1:             06C8 DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
IDENT2:             06D7 DEFINED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
IDENT3:             06EB DEFINED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
FRAC:               06EC DEFINED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
SQRT1:              06F2 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
ABS1:               06FF DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
MOD:                070C DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
EQUALS:             0718 DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
LESSTHANEQ:         0720 DEFINED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
LESSTHAN:           0725 DEFINED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 351 IN Siena.asm
LESSTHAN1:          072A DEFINED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
TRUE1:              072D DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
FALSE1:             0733 DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
INPUT:              0739 DEFINED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
OUTPUT:             0744 DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
KEY:                074D DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
NEG:                0756 DEFINED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
LET:                075D DEFINED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
FILTER:             075D DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
MAP:                075D DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
HASHSTR:            075F DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 941 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
HASHSTR1:           0762 DEFINED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1180 IN Siena.asm
HASHSTR2:           0767 DEFINED AT LINE 1166 IN Siena.asm
DEFINEENTRY:        0778 DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
DEFINEENTRY0:       077D DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
DEFINEENTRY1:       078C DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
DEFINEENTRY2:       0792 DEFINED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
DEFINEENTRY3:       0794 DEFINED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
LOOKUPENTRY:        079E DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
LOOKUPENTRY0:       07A3 DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
LOOKUPENTRY1:       07B2 DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
LOOKUPENTRY2:       07B8 DEFINED AT LINE 1246 IN Siena.asm
LOOKUPENTRY3:       07BA DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
DIVIDE:             07C2 DEFINED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
DIVIDE1:            07C7 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
DIVIDE2:            07D4 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
DIVIDE3:            07D5 DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 1271 IN Siena.asm
SQUAREROOT:         07DB DEFINED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
SQUAREROOT1:        07E0 DEFINED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
SQUAREROOT4:        07FB DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
SQUAREROOT5:        0802 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
PRTDEC:             0805 DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0814 DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
PRTDEC1:            0836 DEFINED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
PRTDEC2:            0838 DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
PRTDEC3:            0848 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
PRTDEC4:            0849 DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
PRTHEX:             084D DEFINED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0858 DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
PRTHEX3:            0861 DEFINED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
PRTSTR0:            086C DEFINED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
PRTSTR:             0870 DEFINED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
NESTING:            0875 DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
NESTING1A:          0880 DEFINED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
NESTING1:           0883 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
NESTING2:           0892 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
NESTING3:           0894 DEFINED AT LINE 1429 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
NESTING4:           089F DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
PROMPT:             08A1 DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
CRLF:               08AA DEFINED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
PRINTSTR:           08B1 DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 191
DEFINE:             08B8 DEFINED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
INIT:               08D0 DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08EA DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
START:              0A36 DEFINED AT LINE 1614 IN Siena.asm
INTERPRET:          0A4C DEFINED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
INTERPRET2:         0A56 DEFINED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
INTERPRET3:         0A5E DEFINED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
INTERPRET4:         0A64 DEFINED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
WAITCHAR:           0A69 DEFINED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
MACRO:              0A78 DEFINED AT LINE 1655 IN Siena.asm
WAITCHAR1:          0A7A DEFINED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
WAITCHAR3:          0A88 DEFINED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
WAITCHAR4:          0A9E DEFINED AT LINE 1697 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
NEXT:               0AA6 DEFINED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 549 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
NEXT1:              0AB5 DEFINED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
ESCAPE:             0AC0 DEFINED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
CLEAR:              0AC4 DEFINED AT LINE 1743 IN Siena.asm
                    > USED AT LINE 210 IN Siena.asm
EXIT:               0ACC DEFINED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
CALL:               0AE1 DEFINED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
CALL2:              0AF4 DEFINED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
EXEC:               0AF6 DEFINED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0B0E DEFINED AT LINE 1803 IN Siena.asm
                    > USED AT LINE 1793 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1480 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
                    > USED AT LINE 839 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 498 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 865 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
                    > USED AT LINE 929 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1486 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2257S43:  40B1 DEFINED AT LINE 34
                    > USED AT LINE 10
