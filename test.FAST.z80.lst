0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 2F 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   DA                     DB   lsb(nop_)   ; SP
0221   A7                     DB   lsb(not_)   ; !
0222   DA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   DA                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   DA                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   C2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   DA                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   AC                     DB   lsb(eq_)   ; =
023E   B1                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   D1                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   DA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1B 04               JP   num   
0303                HEXNUM_:      
0303   C3 4B 04               JP   hexnum   
0306                ARG_:        
0306   C3 E8 04               JP   arg   
0309                PROP_:       
0309   C3 06 05               JP   prop   
030C                STRING_:      
030C   C3 68 04               JP   string   
030F                PAREN_:      
030F   C3 96 04               JP   paren   
0312                PARENEND_:      
0312   C3 98 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD AC 07               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD CF 07               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 64 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 09 05               JP   get1   
034C                BLOCK_:      
034C   C3 9A 04               JP   block   
034F                BLOCKEND_:      
034F   C3 D3 04               JP   blockend   
0352                CHAR_:       
0352   C3 81 04               JP   char   
0355                ARRAY_:      
0355   C3 4C 05               JP   array   
0358                ARRAYEND_:      
0358   C3 4E 05               JP   arrayEnd   
035B                IDENT_:      
035B   C3 1E 06               JP   ident   
035E                SYMBOL_:      
035E   C3 F7 05               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD AC 07               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 FF 03               JP   mul   
0393                SUB_:        ; negative sign or subtract
0393   03                     INC   bc   ; check if sign of a number
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 30                  CP   "0"   
0398   38 05                  JR   c,sub1   
039A   FE 3A                  CP   "9"+1   
039C   DA 00 03               JP   c,num_   
039F                SUB1:        ; Subtract the value 2nd on stack from top of stack
039F   D1                     POP   de   
03A0   E1                     POP   hl   ; Entry point for INVert
03A1                SUB2:        
03A1   B7                     OR   a   ; Entry point for NEGate
03A2   ED 52                  SBC   hl,de   
03A4   E5                     PUSH   hl   
03A5   DD E9                  JP   (ix)   
03A7                NOT_:        ; logical invert, any non zero value
03A7   21 00 00               LD   hl,0   ; is considered true
03AA   18 01                  JR   eq1   
03AC                EQ_:         
03AC   E1                     POP   hl   
03AD                EQ1:         
03AD   D1                     POP   de   
03AE   C3 77 06               JP   equals   
03B1                GT_:         
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 02                  JR   lt1   
03B5                LT_:         
03B5   E1                     POP   hl   
03B6   D1                     POP   de   
03B7                LT1:         
03B7   03                     INC   bc   
03B8   0A                     LD   a,(bc)   
03B9   FE 3D                  CP   "="   
03BB   CA 7F 06               JP   z,lessthaneq   
03BE   0B                     DEC   bc   
03BF   C3 84 06               JP   lessthan   
03C2                DIV_:        
03C2   D1                     POP   de   ; get first value
03C3   E1                     POP   hl   ; get 2nd value
03C4   C5                     PUSH   bc   ; preserve the IP
03C5   44 4D                  LD   bc,hl   
03C7   CD 21 07               CALL   divide   
03CA   22 98 18               LD   (vFrac),hl   
03CD   C1                     POP   bc   
03CE   D5                     PUSH   de   ; push result
03CF   DD E9                  JP   (ix)   
03D1                COMMENT_:      
03D1   03                     INC   bc   ; point to next char
03D2   0A                     LD   a,(bc)   
03D3   FE 20                  CP   " "   ; terminate on any char less than SP
03D5   30 FA                  JR   nc,comment_   
03D7   0B                     DEC   bc   
03D8   DD E9                  JP   (ix)   
03DA                NOP_:        
03DA   DD E9                  JP   (ix)   
03DC                             ;*******************************************************************
03DC                             ; word operators
03DC                             ;*******************************************************************
03DC                             ; shl
03DC                             ; value count -- value2          shift left count places
03DC                SHL:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 01                  JR   shl2   
03E4                SHL1:        
03E4   29                     ADD   hl,hl   ; left shift hl
03E5                SHL2:        
03E5   10 FD                  DJNZ   shl1   
03E7   E5                     PUSH   hl   
03E8   42 4B                  LD   bc,de   ; restore IP
03EA   DD E9                  JP   (ix)   
03EC                             ; shr
03EC                             ; value count -- value2          shift left count places
03EC                SHR:         
03EC   50 59                  LD   de,bc   ; save IP
03EE   C1                     POP   bc   ; bc = count
03EF   41                     LD   b,c   ; b = loop counter
03F0   E1                     POP   hl   
03F1   04                     INC   b   ; test for counter=0 case
03F2   18 04                  JR   shr2   
03F4                SHR1:        
03F4   CB 3C                  SRL   h   ; right shift hl
03F6   CB 1D                  RR   l   
03F8                SHR2:        
03F8   10 FA                  DJNZ   shr1   
03FA   E5                     PUSH   hl   
03FB   42 4B                  LD   bc,de   ; restore IP
03FD   DD E9                  JP   (ix)   
03FF                MUL:         ;=19
03FF   D1                     POP   de   ; get first value
0400   E1                     POP   hl   
0401   C5                     PUSH   bc   ; Preserve the IP
0402   44                     LD   b,h   ; bc = 2nd value
0403   4D                     LD   c,l   
0404   21 00 00               LD   hl,0   
0407   3E 10                  LD   a,16   
0409                MUL2:        
0409   29                     ADD   hl,hl   
040A   CB 13                  RL   e   
040C   CB 12                  RL   d   
040E   30 04                  JR   nc,$+6   
0410   09                     ADD   hl,bc   
0411   30 01                  JR   nc,$+3   
0413   13                     INC   de   
0414   3D                     DEC   a   
0415   20 F2                  JR   nz,mul2   
0417   C1                     POP   bc   ; Restore the IP
0418   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0419   DD E9                  JP   (ix)   
041B                NUM:         
041B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041E   0A                     LD   a,(bc)   ; Get numeral or -
041F   FE 2D                  CP   "-"   
0421   20 01                  JR   nz,num0   
0423   03                     INC   bc   ; move to next char, no flags affected
0424                NUM0:        
0424   08                     EX   af,af'   ; save zero flag = 0 for later
0425                NUM1:        
0425   0A                     LD   a,(bc)   ; read digit
0426   D6 30                  SUB   "0"   ; less than 0?
0428   38 13                  JR   c,num2   ; not a digit, exit loop
042A   FE 0A                  CP   10   ; greater that 9?
042C   30 0F                  JR   nc,num2   ; not a digit, exit loop
042E   03                     INC   bc   ; inc IP
042F   54 5D                  LD   de,hl   ; multiply hl * 10
0431   29                     ADD   hl,hl   
0432   29                     ADD   hl,hl   
0433   19                     ADD   hl,de   
0434   29                     ADD   hl,hl   
0435   85                     ADD   a,l   ; add digit in a to hl
0436   6F                     LD   l,a   
0437   3E 00                  LD   a,0   
0439   8C                     ADC   a,h   
043A   67                     LD   h,a   
043B   18 E8                  JR   num1   
043D                NUM2:        
043D   0B                     DEC   bc   
043E   08                     EX   af,af'   ; restore zero flag
043F   20 07                  JR   nz,num3   
0441   EB                     EX   de,hl   ; negate the value of hl
0442   21 00 00               LD   hl,0   
0445   B7                     OR   a   ; jump to sub2
0446   ED 52                  SBC   hl,de   
0448                NUM3:        
0448   E5                     PUSH   hl   ; Put the number on the stack
0449   DD E9                  JP   (ix)   ; and process the next character
044B                HEXNUM:      ; 
044B   21 00 00               LD   hl,0   ; Clear hl to accept the number
044E                HEXNUM1:      
044E   03                     INC   bc   
044F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0450   CB 77                  BIT   6,a   ; is it uppercase alpha?
0452   28 02                  JR   z,hexnum2   ; no a decimal
0454   D6 07                  SUB   7   ; sub 7  to make $a - $F
0456                HEXNUM2:      
0456   D6 30                  SUB   $30   ; Form decimal digit
0458   DA 3D 04               JP   c,num2   
045B   FE 10                  CP   $0F+1   
045D   D2 3D 04               JP   nc,num2   
0460   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0461   29                     ADD   hl,hl   ; 4X
0462   29                     ADD   hl,hl   ; 8X
0463   29                     ADD   hl,hl   ; 16X
0464   85                     ADD   a,l   ; add into bottom of hl
0465   6F                     LD   l,a   ; 
0466   18 E6                  JR   hexnum1   
0468                             ; 
0468                STRING:      
0468   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
046C   D5                     PUSH   de   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   12                     LD   (de),a   
0471   13                     INC   de   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   12                     LD   (de),a   
047A   13                     INC   de   
047B   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
047F   DD E9                  JP   (ix)   
0481                CHAR:        
0481   21 00 00               LD   hl,0   ; if `` is empty
0484                CHAR1:       
0484   03                     INC   bc   ; point to next char
0485   0A                     LD   a,(bc)   
0486   FE 60                  CP   "`"   ; ` is the string terminator
0488   28 09                  JR   z,char3   
048A   FE 5C                  CP   $5c   ; \ is the escape
048C   20 02                  JR   nz,char2   
048E   03                     INC   bc   
048F   0A                     LD   a,(bc)   
0490                CHAR2:       
0490   6F                     LD   l,a   
0491   18 F1                  JR   char1   
0493                CHAR3:       
0493   E5                     PUSH   hl   
0494   DD E9                  JP   (ix)   
0496                PAREN:       
0496   DD E9                  JP   (ix)   
0498                             ;     ld ix,paren2
0498                             ;     jr block
0498                             ; paren2:
0498                             ;     ld ix,next
0498                             ;     jp exec
0498                PARENEND:      
0498   DD E9                  JP   (ix)   
049A                             ;     pop hl                      ; hl = last result
049A                             ;     pop de
049A                             ;     pop bc
049A                             ;     pop bc
049A                             ;     push hl
049A                             ;     ld iyh,d
049A                             ;     ld iyl,e
049A                             ;     ld ix,next
049A                             ;     jp (ix)
049A                BLOCK:       
049A   03                     INC   bc   
049B   C5                     PUSH   bc   ; return first opcode of block
049C   16 01                  LD   d,1   ; nesting: count first parenthesis
049E                BLOCK1:      ; Skip to end of definition
049E   0A                     LD   a,(bc)   ; Get the next character
049F   03                     INC   bc   ; Point to next character
04A0   FE 21                  CP   " " + 1   ; ignore whitespace
04A2   38 FA                  JR   c,block1   
04A4   FE 29                  CP   ")"   
04A6   28 25                  JR   z,block4   
04A8   FE 7D                  CP   "}"   
04AA   28 21                  JR   z,block4   
04AC   FE 5D                  CP   "]"   
04AE   28 1D                  JR   z,block4   
04B0   FE 28                  CP   "("   
04B2   28 13                  JR   z,block3   
04B4   FE 7B                  CP   "{"   
04B6   28 0F                  JR   z,block3   
04B8   FE 5B                  CP   "["   
04BA   28 0B                  JR   z,block3   
04BC   FE 27                  CP   "'"   
04BE   28 07                  JR   z,block3   
04C0   FE 60                  CP   "`"   
04C2   20 DA                  JR   nz,block1   
04C4                BLOCK2:      
04C4   14                     INC   d   
04C5   18 D7                  JR   block1   
04C7                BLOCK3:      
04C7   3E 80                  LD   a,$80   
04C9   AA                     XOR   d   
04CA   47                     LD   b,a   
04CB   18 D1                  JR   block1   
04CD                BLOCK4:      
04CD   15                     DEC   d   
04CE   20 CE                  JR   nz,block1   ; get the next element
04D0   0B                     DEC   bc   ; balanced, exit
04D1   DD E9                  JP   (ix)   
04D3                BLOCKEND:      
04D3   E1                     POP   hl   ; hl = last result
04D4   FD 54                  LD   d,iyh   ; de = BP
04D6   FD 5D                  LD   e,iyl   
04D8   EB                     EX   de,hl   ; hl = BP, de = result
04D9   F9                     LD   sp,hl   ; sp = BP
04DA   E1                     POP   hl   ; hl = old BP
04DB   C1                     POP   bc   ; pop SCP (discard)
04DC   C1                     POP   bc   ; pop array (discard)
04DD   C1                     POP   bc   ; bc = IP
04DE   F9                     LD   sp,hl   ; sp = old BP
04DF   FD 21 00 00            LD   iy,0   ; iy = sp
04E3   FD 39                  ADD   iy,sp   
04E5   D5                     PUSH   de   ; push result
04E6   DD E9                  JP   (ix)   
04E8                             ; $1..9
04E8                             ; returns value of arg
04E8                ARG:         
04E8   03                     INC   bc   ; get next char
04E9   0A                     LD   a,(bc)   
04EA   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04EC   E6 0F                  AND   $0F   ; mask
04EE   87                     ADD   a,a   ; double
04EF   6F                     LD   l,a   ; hl = offset into args
04F0   26 00                  LD   h,0   
04F2   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04F5   FD 56 03               LD   d,(iy+3)   
04F8   EB                     EX   de,hl   ; hl = SCP - offset
04F9   B7                     OR   a   
04FA   ED 52                  SBC   hl,de   
04FC   2B                     DEC   hl   ; de = arg
04FD   56                     LD   d,(hl)   
04FE   2B                     DEC   hl   
04FF   5E                     LD   e,(hl)   
0500   D5                     PUSH   de   ; push arg
0501   22 9E 18               LD   (vSetter),hl   ; store address in setter
0504   DD E9                  JP   (ix)   
0506                             ; @1..9
0506                             ; returns address of prop
0506                PROP:        
0506                             ;     inc bc                      ; get next char
0506                             ;     ld a,(bc)
0506                             ;     sub "1"                     ; treat as a digit, 1 based index
0506                             ;     and $0F                     ; mask
0506                             ;     add a,a                     ; double
0506                             ;     ld l,a                      ; hl = offset into args
0506                             ;     ld h,0
0506                             ;     ld e,(iy+6)                 ; de = closure array
0506                             ;     ld d,(iy+7)
0506                             ;     add hl,de                   ; find address of prop in array
0506                             ;     ld (vSetter),hl             ; store address in setter
0506                             ;     ld e,(hl)
0506                             ;     inc hl
0506                             ;     ld d,(hl)
0506                             ;     push de                     ; push prop value
0506   DD E9                  JP   (ix)   
0508                             ; addr -- value
0508                DOLET:       
0508                GET:         
0508   E1                     POP   hl   
0509                GET1:        
0509   22 9E 18               LD   (vSetter),hl   ; store address in setter
050C   16 00                  LD   d,0   
050E   5E                     LD   e,(hl)   
050F   3A 9A 18               LD   a,(vDataWidth)   
0512   3D                     DEC   a   
0513   28 02                  JR   z,get2   
0515   23                     INC   hl   
0516   56                     LD   d,(hl)   
0517                GET2:        
0517   D5                     PUSH   de   
0518   DD E9                  JP   (ix)   
051A                             ; newvalue -- oldvalue
051A                SET:         
051A   D1                     POP   de   ; new value
051B   E1                     POP   hl   ; discard last accessed value
051C   2A 9E 18               LD   hl,(vSetter)   
051F   7E                     LD   a,(hl)   ; save lsb of old value
0520   73                     LD   (hl),e   
0521   5F                     LD   e,a   
0522   3A 9A 18               LD   a,(vDataWidth)   
0525   3D                     DEC   a   
0526   28 04                  JR   z,set1   
0528   23                     INC   hl   
0529   7E                     LD   a,(hl)   ; save msb of old value
052A   72                     LD   (hl),d   
052B   57                     LD   d,a   
052C                SET1:        
052C   D5                     PUSH   de   ; return old value
052D   DD E9                  JP   (ix)   
052F                             ; ifte
052F                             ; condition then -- value
052F                IF:          
052F   DD E9                  JP   (ix)   
0531                             ; ld de,0                      ; NUL pointer for else
0531                             ; jr ifte1
0531                             ; ifte
0531                             ; condition then else -- value
0531                IFTE:        
0531   DD E9                  JP   (ix)   
0533                             ;     pop de                      ; de = else
0533                             ; ifte1:
0533                             ;     pop hl                      ; hl = then
0533                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
0533                             ;     inc hl                      ; check for true
0533                             ;     ld a,h
0533                             ;     or l
0533                             ;     pop hl                      ; hl = then
0533                             ;     jr z,ifte2
0533                             ;     ex de,hl                    ; condition = false, hl = else
0533                             ; ifte2:
0533                             ;     ld a,h                      ; check if hl is NUL
0533                             ;     or l
0533                             ;     jr z,ifte3
0533                             ;     push bc                     ; push IP
0533                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0533                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0533                             ;     push de                     ; push SCP
0533                             ;     push iy                     ; push BP
0533                             ;     ld iy,0                     ; iy = sp
0533                             ;     add iy,sp
0533                             ;     ld bc,hl                    ; IP = then
0533                             ;     dec bc
0533                             ; ifte3:
0533                             ;     jp (ix)
0533                             ; switch
0533                             ; index array -- value
0533                SWITCH:      
0533   D1                     POP   de   ; de = array
0534   E1                     POP   hl   ; hl = index
0535   29                     ADD   hl,hl   ; indec *= 2
0536   19                     ADD   hl,de   ; add array[0]
0537   4E                     LD   c,(hl)   ; bc = case
0538   23                     INC   hl   
0539   46                     LD   b,(hl)   
053A   0B                     DEC   bc   
053B   DD E9                  JP   (ix)   
053D                             ; c b --
053D                             ; loops until c = 0
053D                LOOP:        
053D   DD E9                  JP   (ix)   
053F                             ;     pop de                      ; de = block                    c
053F                             ;     pop hl                      ; hl = condition
053F                             ;     push de
053F                             ;     push bc                     ; push IP
053F                             ;     ld bc,de                    ; bc = block
053F                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
053F                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
053F                             ;     push de                     ; push SCP
053F                             ;     push iy                     ; push BP
053F                             ;     ld iy,0                     ; iy = sp
053F                             ;     add iy,sp
053F                             ; loop1:
053F                             ;     ld a,l                      ; bc = block, hl = condition = zero?
053F                             ;     or h
053F                             ;     jr z,loop3
053F                             ;     ld de,loop2-1               ; IP return address
053F                             ;     push de
053F                             ;     ld e,(iy+2)                 ; push parent SCP
053F                             ;     ld d,(iy+3)
053F                             ;     push de                     ;
053F                             ;     push iy                     ; push BP
053F                             ;     ld iy,0                     ; iy = sp
053F                             ;     add iy,sp
053F                             ;     push hl                     ; push condition
053F                             ;     dec bc
053F                             ;     jp (ix)
053F                             ; loop2:
053F                             ;     db ESC                      ; escape from interpreter
053F                             ;     ld c,(iy+6)                 ; bc = block
053F                             ;     ld b,(iy+7)
053F                             ;     pop hl                      ; hl = condition
053F                             ;     jr loop1
053F                             ; loop3:
053F                             ;     ld d,iyh                    ; de = BP
053F                             ;     ld e,iyl
053F                             ;     ex de,hl                    ; hl = BP, de = result
053F                             ;     ld sp,hl                    ; sp = BP
053F                             ;     pop hl                      ; hl = old BP
053F                             ;     pop bc                      ; pop SCP (discard)
053F                             ;     pop bc                      ; bc = IP
053F                             ;     ld sp,hl                    ; sp = old BP
053F                             ;     ld iy,0                     ; iy = sp
053F                             ;     add iy,sp
053F                             ;     ld ix,next                  ; needed?
053F                             ;     jp (ix)
053F                WORDS:       
053F   21 02 00               LD   hl,2   
0542   18 03                  JR   bytes1   
0544                BYTES:       
0544   21 01 00               LD   hl,1   
0547                BYTES1:      
0547   22 9A 18               LD   (vDataWidth),hl   
054A   DD E9                  JP   (ix)   
054C                ARRAY:       
054C   DD E9                  JP   (ix)   
054E                             ;     push bc                     ; create stack frame, push IP
054E                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
054E                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
054E                             ;     push de                     ; push SCP
054E                             ;     push iy                     ; push BP
054E                             ;     ld iy,0                     ; BP = SP
054E                             ;     add iy,sp
054E                             ;     jp (ix)
054E                ARRAYEND:      
054E   DD E9                  JP   (ix)   
0550                             ;     ld d,iyh                    ; de = BP
0550                             ;     ld e,iyl
0550                             ;     ld ixh,d                    ; ix = BP
0550                             ;     ld ixl,e
0550                             ;     ld hl,de                    ; hl = de
0550                             ;     or a
0550                             ;     sbc hl,sp                   ; hl = array count (items on stack)
0550                             ;     srl h
0550                             ;     rr l
0550                             ;     ex de,hl                    ; de = count
0550                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0550                             ;     ld (hl),e
0550                             ;     inc hl
0550                             ;     ld (hl),d
0550                             ;     inc hl                      ; hl = array[0], de = count
0550                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
0550                             ;     cp 1
0550                             ;     jr nz, arrayEnd2
0550                             ; arrayEnd1:                      ; byte
0550                             ;     ld a,(ix-2)
0550                             ;     ld (hl),a
0550                             ;     inc hl
0550                             ;     dec ix
0550                             ;     dec ix
0550                             ;     dec de
0550                             ;     ld a,e
0550                             ;     or d
0550                             ;     jr nz,arrayEnd1
0550                             ;     jr arrayEnd3
0550                             ; arrayEnd2:                      ; word
0550                             ;     ld a,(ix-2)
0550                             ;     ld (hl),a
0550                             ;     inc hl
0550                             ;     ld a,(ix-1)
0550                             ;     ld (hl),a
0550                             ;     inc hl
0550                             ;     dec ix
0550                             ;     dec ix
0550                             ;     dec de
0550                             ;     ld a,e
0550                             ;     or d
0550                             ;     jr nz,arrayEnd2
0550                             ; arrayEnd3:
0550                             ;     ld d,iyh                    ; de = BP, hl = end of array
0550                             ;     ld e,iyl
0550                             ;     ex de,hl                    ; hl = BP, de = end of array
0550                             ;     ld sp,hl                    ; sp = BP
0550                             ;     pop hl                      ; hl = old BP, de = end of array
0550                             ;     pop ix                      ; pop SCP (discard)
0550                             ;     pop ix                      ; pop IP (discard)
0550                             ;     ex de,hl
0550                             ;     ld iyh,d
0550                             ;     ld iyl,e
0550                             ;     ex de,hl
0550                             ;     ; ld sp,hl                    ; sp = old BP
0550                             ;     ; ld iy,0                     ; iy = sp
0550                             ;     ; add iy,sp
0550                             ;     ld ix,next
0550                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
0550                             ;     inc hl
0550                             ;     inc hl
0550                             ;     push hl                     ; return array[0]
0550                             ;     ex de,hl                    ; hl = end of array, de = array[0]
0550                             ;     or a
0550                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
0550                             ;     ex de,hl
0550                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0550                             ;     ld (hl),e                   ; array[-2] = size
0550                             ;     inc hl
0550                             ;     ld (hl),d
0550                             ;     inc hl
0550                             ;     add hl,de
0550                             ;     ld (vHeapPtr),hl
0550                             ;     jp (ix)
0550                             ; str -- num
0550                HASH:        
0550   E1                     POP   hl   
0551   C5                     PUSH   bc   
0552   44 4D                  LD   bc,hl   
0554   CD BE 06               CALL   hashStr   
0557   C1                     POP   bc   
0558   E5                     PUSH   hl   
0559   DD E9                  JP   (ix)   
055B                             ; symbol block arity --
055B                DEF:         
055B   21 00 00               LD   hl,0   ; array = 0
055E   E5                     PUSH   hl   ; falls through
055F                             ; symbol block arity array --
055F                CLOSURE:      
055F                DEF0:        
055F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0562   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0564   23                     INC   hl   
0565   36 56                  LD   (hl),lsb(call)   
0567   23                     INC   hl   
0568   36 0A                  LD   (hl),msb(call)   
056A   23                     INC   hl   
056B   D1                     POP   de   ; pop array
056C   73                     LD   (hl),e   ; compile array
056D   23                     INC   hl   
056E   72                     LD   (hl),d   
056F   23                     INC   hl   
0570   D1                     POP   de   
0571   73                     LD   (hl),e   ; compile arity
0572   23                     INC   hl   
0573   72                     LD   (hl),d   
0574   23                     INC   hl   
0575   D1                     POP   de   ; de = block
0576   C5                     PUSH   bc   ; (sp) = IP (sp+2) = symbol
0577   06 01                  LD   b,1   ; b = nesting
0579                DEF1:        
0579   1A                     LD   a,(de)   
057A   13                     INC   de   
057B   77                     LD   (hl),a   
057C   23                     INC   hl   
057D   FE 29                  CP   ")"   
057F   28 25                  JR   z,def4   
0581   FE 7D                  CP   "}"   
0583   28 21                  JR   z,def4   
0585   FE 5D                  CP   "]"   
0587   28 1D                  JR   z,def4   
0589   FE 28                  CP   "("   
058B   28 13                  JR   z,def3   
058D   FE 7B                  CP   "{"   
058F   28 0F                  JR   z,def3   
0591   FE 5B                  CP   "["   
0593   28 0B                  JR   z,def3   
0595   FE 27                  CP   "'"   
0597   28 07                  JR   z,def3   
0599   FE 60                  CP   "`"   
059B   20 DC                  JR   nz,def1   
059D                DEF2:        
059D   04                     INC   b   
059E   18 D9                  JR   def1   
05A0                DEF3:        
05A0   3E 80                  LD   a,$80   
05A2   A8                     XOR   b   
05A3   47                     LD   b,a   
05A4   18 D3                  JR   def1   
05A6                DEF4:        
05A6   05                     DEC   b   
05A7   20 D0                  JR   nz,def1   ; get the next element
05A9                             ; xor a                       ; end with NUL ??? needed?
05A9                             ; ld (hl),a
05A9   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
05AD   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
05B0   E1                     POP   hl   ; de = defstart, hl = IP
05B1   E3                     EX   (sp),hl   ; hl = symbol, de = defstart, (sp) = IP
05B2   44 4D                  LD   bc,hl   ; bc = symbol
05B4   CD D7 06               CALL   defineEntry   
05B7   38 00                  JR   c,def5   
05B9                             ; call error
05B9                             ; .cstr "Def Collision"
05B9                DEF5:        
05B9   C1                     POP   bc   ; bc = IP
05BA   DD E9                  JP   (ix)   
05BC                             ; symbol value --
05BC                LET:         
05BC   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
05BE   E3                     EX   (sp),hl   
05BF   EB                     EX   de,hl   
05C0   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
05C3   36 CD                  LD   (hl),$cd   ; compile "call dolet"
05C5   23                     INC   hl   
05C6   36 08                  LD   (hl),lsb(dolet)   
05C8   23                     INC   hl   
05C9   36 05                  LD   (hl),msb(dolet)   
05CB   23                     INC   hl   
05CC   73                     LD   (hl),e   
05CD   23                     INC   hl   
05CE   72                     LD   (hl),d   
05CF   2B                     DEC   hl   
05D0   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
05D4   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
05D7   E1                     POP   hl   ; de = addr, hl = IP
05D8   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
05D9   44 4D                  LD   bc,hl   ; bc = symbol
05DB   CD D7 06               CALL   defineEntry   
05DE   38 00                  JR   c,let2   
05E0                             ; call error
05E0                             ; .cstr "Let Collision"
05E0                LET2:        
05E0   C1                     POP   bc   
05E1   DD E9                  JP   (ix)   
05E3                             ; str -- addr
05E3                ADDR:        
05E3   E1                     POP   hl   ; hl = hash
05E4   C5                     PUSH   bc   
05E5   44 4D                  LD   bc,hl   
05E7   CD FD 06               CALL   lookupEntry   
05EA   38 03                  JR   c,addr1   
05EC   21 00 00               LD   hl,0   
05EF                             ; call printStr		
05EF                             ; .cstr "Undefined"
05EF                             ; jp interpret
05EF                ADDR1:       
05EF   C1                     POP   bc   
05F0   11 03 00               LD   de,3   
05F3   19                     ADD   hl,de   
05F4   E5                     PUSH   hl   
05F5   DD E9                  JP   (ix)   
05F7                SYMBOL:      
05F7   03                     INC   bc   
05F8   11 00 1A               LD   de,PAD   
05FB   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
05FD   18 02                  JR   symbol1   
05FF                SYMBOL0:      ; copy to PAD area
05FF   03                     INC   bc   ; characters that are part of the identifier
0600   13                     INC   de   
0601                SYMBOL1:      ; 0-9 A-Z a-z _
0601   0A                     LD   a,(bc)   
0602   12                     LD   (de),a   
0603   B7                     OR   a   
0604   28 0A                  JR   z,symbol2   
0606   6F                     LD   l,a   
0607   7E                     LD   a,(hl)   
0608   FE 5B                  CP   lsb(ident_)   
060A   28 F3                  JR   z,symbol0   
060C   FE 00                  CP   lsb(num_)   
060E   28 EF                  JR   z,symbol0   
0610                SYMBOL2:      
0610   0B                     DEC   bc   
0611   AF                     XOR   a   
0612   12                     LD   (de),a   ; terminate string with NUL
0613   C5                     PUSH   bc   
0614   01 00 1A               LD   bc,PAD   
0617   CD BE 06               CALL   hashStr   ; hl = hash
061A   C1                     POP   bc   
061B   E5                     PUSH   hl   
061C   DD E9                  JP   (ix)   
061E                IDENT:       
061E   11 00 1A               LD   de,PAD   
0621   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0623   18 02                  JR   ident1   
0625                IDENT0:      ; copy to PAD area
0625   03                     INC   bc   ; characters that are part of the identifier
0626   13                     INC   de   
0627                IDENT1:      ; 0-9 A-Z a-z _
0627   0A                     LD   a,(bc)   
0628   12                     LD   (de),a   
0629   B7                     OR   a   
062A   28 0A                  JR   z,ident2   
062C   6F                     LD   l,a   
062D   7E                     LD   a,(hl)   
062E   FE 5B                  CP   lsb(ident_)   
0630   28 F3                  JR   z,ident0   
0632   FE 00                  CP   lsb(num_)   
0634   28 EF                  JR   z,ident0   
0636                IDENT2:      
0636   0B                     DEC   bc   
0637   AF                     XOR   a   
0638   12                     LD   (de),a   ; terminate string with NUL
0639   C5                     PUSH   bc   
063A   01 00 1A               LD   bc,PAD   
063D   CD BE 06               CALL   hashStr   ; hl = hash
0640   44 4D                  LD   bc,hl   
0642   CD FD 06               CALL   lookupEntry   
0645   C1                     POP   bc   
0646   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0648   DD E9                  JP   (ix)   
064A                IDENT3:      
064A   E9                     JP   (hl)   
064B                FRAC:        
064B   2A 98 18               LD   hl,(vFrac)   
064E   E5                     PUSH   hl   
064F   DD E9                  JP   (ix)   
0651                SQRT1:       
0651   E1                     POP   hl   
0652   C5                     PUSH   bc   
0653   CD 3A 07               CALL   squareRoot   
0656   ED 43 98 18            LD   (vFrac),bc   
065A   C1                     POP   bc   
065B   D5                     PUSH   de   
065C   DD E9                  JP   (ix)   
065E                ABS1:        
065E   E1                     POP   hl   
065F   CB 7C                  BIT   7,h   
0661   C8                     RET   z   
0662   AF                     XOR   a   
0663   95                     SUB   l   
0664   6F                     LD   l,a   
0665   9F                     SBC   a,a   
0666   94                     SUB   h   
0667   67                     LD   h,a   
0668   E5                     PUSH   hl   
0669   DD E9                  JP   (ix)   
066B                MOD:         
066B   D1                     POP   de   ; get first value
066C   E1                     POP   hl   ; get 2nd value
066D   C5                     PUSH   bc   ; preserve the IP
066E   44 4D                  LD   bc,hl   
0670   CD 21 07               CALL   divide   
0673   C1                     POP   bc   
0674   E5                     PUSH   hl   ; push remainder
0675   DD E9                  JP   (ix)   
0677                             ; hl = value1, de = value2
0677                             ; hl = result
0677                EQUALS:      
0677   B7                     OR   a   ; reset the carry flag
0678   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
067A   28 10                  JR   z,true1   
067C   C3 92 06               JP   false1   
067F                             ; hl = value1 de = value2
067F                             ; hl = result
067F                LESSTHANEQ:      
067F   B7                     OR   a   
0680   ED 52                  SBC   hl,de   
0682   18 05                  JR   lessthan1   
0684                             ; hl = value1 de = value2
0684                             ; hl = result
0684                LESSTHAN:      
0684   B7                     OR   a   
0685   ED 52                  SBC   hl,de   
0687   28 09                  JR   z,false1   
0689                LESSTHAN1:      
0689   FA 92 06               JP   m,false1   
068C                TRUE1:       
068C   21 FF FF               LD   hl,TRUE   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                FALSE1:      
0692   21 00 00               LD   hl,FALSE   
0695   E5                     PUSH   hl   
0696   DD E9                  JP   (ix)   
0698                             ; Z80 port input
0698                             ; port -- value
0698                INPUT:       
0698   E1                     POP   hl   
0699   59                     LD   e,c   ; save IP
069A   4D                     LD   c,l   
069B   ED 68                  IN   l,(c)   
069D   26 00                  LD   h,0   
069F   4B                     LD   c,e   ; restore IP
06A0   E5                     PUSH   hl   
06A1   DD E9                  JP   (ix)   
06A3                             ; Z80 port output
06A3                             ; value port --
06A3                OUTPUT:      
06A3   E1                     POP   hl   
06A4   59                     LD   e,c   ; save IP
06A5   4D                     LD   c,l   
06A6   E1                     POP   hl   
06A7   ED 69                  OUT   (c),l   
06A9   4B                     LD   c,e   ; restore IP
06AA   DD E9                  JP   (ix)   
06AC                KEY:         
06AC   CD 81 00               CALL   getchar   
06AF   26 00                  LD   h,0   
06B1   6F                     LD   l,a   
06B2   E5                     PUSH   hl   
06B3   DD E9                  JP   (ix)   
06B5                NEG:         
06B5   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
06B8   D1                     POP   de   
06B9   C3 A1 03               JP   sub2   ; use the SUBtract routine
06BC                FILTER:      
06BC                MAP:         
06BC                SCAN:        
06BC   DD E9                  JP   (ix)   
06BE                             ; -------------------------------------------------------------------------------
06BE                             ; hash C-string
06BE                             ; BC = str
06BE                             ; HL = hash
06BE                HASHSTR:      
06BE   21 00 00               LD   hl,0   
06C1                HASHSTR1:      
06C1   0A                     LD   a,(bc)   ; load next char
06C2   03                     INC   bc   
06C3   FE 00                  CP   0   ; NUL?
06C5   C8                     RET   z   
06C6                HASHSTR2:      
06C6   16 00                  LD   d,0   
06C8   5F                     LD   e,a   
06C9   19                     ADD   hl,de   
06CA   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
06CC   29                     ADD   hl,hl   ; shift left
06CD   19                     ADD   hl,de   ; add
06CE   29                     ADD   hl,hl   ; shift left
06CF   29                     ADD   hl,hl   ; shift left
06D0   29                     ADD   hl,hl   ; shift left
06D1   29                     ADD   hl,hl   ; shift left
06D2   29                     ADD   hl,hl   ; shift left
06D3   29                     ADD   hl,hl   ; shift left
06D4   19                     ADD   hl,de   ; add
06D5   18 EA                  JR   hashStr1   
06D7                             ; add entry to hash slots and hash pointers
06D7                             ; bc = hash (b = hi, c = lo), de = addr
06D7                             ; sets carry if successful
06D7                DEFINEENTRY:      
06D7   CB 21                  SLA   c   ; lo = lo * 2
06D9   69                     LD   l,c   ; lo1 = lo
06DA   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
06DC                DEFINEENTRY0:      
06DC   7E                     LD   a,(hl)   ; a = (lo1)
06DD   FE FF                  CP   UNUSED   ; is it unused?
06DF   28 12                  JR   z,defineEntry3   ; yes, add entry
06E1   79                     LD   a,c   ; a = lo
06E2   BE                     CP   (hl)   ; compare (lo1) with lo
06E3   20 06                  JR   nz,defineEntry1   ; no match loop around
06E5   2C                     INC   l   
06E6   78                     LD   a,b   ; a = hi
06E7   BE                     CP   (hl)   ; compare (lo1+1) with hi
06E8   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
06EA   2D                     DEC   l   ; restore l
06EB                DEFINEENTRY1:      
06EB   2C                     INC   l   ; try next entry
06EC   2C                     INC   l   
06ED   79                     LD   a,c   ; compare lo and lo1
06EE   BD                     CP   l   ; if equal then there's no space left, reject
06EF   20 EB                  JR   nz,defineEntry0   
06F1                DEFINEENTRY2:      
06F1   B7                     OR   a   ; clear carry flag, failure
06F2   C9                     RET      
06F3                DEFINEENTRY3:      ; new entry
06F3   71                     LD   (hl),c   ; (lo1) = hash lo
06F4   23                     INC   hl   
06F5   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
06F6   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
06F8   72                     LD   (hl),d   
06F9   2B                     DEC   hl   
06FA   73                     LD   (hl),e   ; (slot + 2) = address
06FB   37                     SCF      ; set carry flag, success
06FC   C9                     RET      
06FD                             ; looks up hash and returns address
06FD                             ; bc = hash
06FD                             ; returns addr in hl, sets carry if successful
06FD                LOOKUPENTRY:      
06FD   CB 21                  SLA   c   ; lo = lo * 2
06FF   69                     LD   l,c   ; lo1 = lo
0700   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0702                LOOKUPENTRY0:      
0702   7E                     LD   a,(hl)   ; a = (hl), slot
0703   FE FF                  CP   UNUSED   ; is it unused?
0705   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0707   79                     LD   a,c   ; a = lo
0708   BE                     CP   (hl)   ; compare (lo1) with lo
0709   20 06                  JR   nz,lookupEntry1   ; no match loop around
070B   2C                     INC   l   
070C   78                     LD   a,b   ; a = hi
070D   BE                     CP   (hl)   ; compare (lo1+1) with hi
070E   28 09                  JR   z,lookupEntry3   
0710   2D                     DEC   l   
0711                LOOKUPENTRY1:      
0711   2C                     INC   l   
0712   2C                     INC   l   
0713   79                     LD   a,c   
0714   BD                     CP   l   ; no space left, reject
0715   20 EB                  JR   nz,lookupEntry0   
0717                LOOKUPENTRY2:      
0717   B7                     OR   a   ; clear carry flag, failure
0718   C9                     RET      
0719                LOOKUPENTRY3:      
0719   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
071B   56                     LD   d,(hl)   
071C   2D                     DEC   l   ; restore l
071D   5E                     LD   e,(hl)   ; (slot + 2) = address
071E   EB                     EX   de,hl   
071F   37                     SCF      
0720   C9                     RET      
0721                             ; division subroutine.
0721                             ; bc: divisor, de: dividend, hl: remainder
0721                DIVIDE:      
0721   21 00 00               LD   hl,0   ; zero the remainder
0724   3E 10                  LD   a,16   ; loop counter
0726                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0726   CB 21                  SLA   c   
0728   CB 10                  RL   b   
072A   ED 6A                  ADC   hl,hl   
072C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
072E   38 03                  JR   c,divide2   
0730   0C                     INC   c   
0731   18 01                  JR   divide3   
0733                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0733   19                     ADD   hl,de   
0734                DIVIDE3:      
0734   3D                     DEC   a   
0735   20 EF                  JR   nz,divide1   
0737   50 59                  LD   de,bc   ; result from bc to de
0739   C9                     RET      
073A                             ; squareroot
073A                             ; Input: HL = value
073A                             ; Result: DE = square root BC = remainder
073A                SQUAREROOT:      
073A   01 00 08               LD   bc,0800h   
073D   59                     LD   e,c   
073E   AF                     XOR   a   
073F                SQUAREROOT1:      
073F   29                     ADD   hl,hl   
0740   CB 11                  RL   c   
0742   ED 6A                  ADC   hl,hl   
0744   CB 11                  RL   c   
0746   30 02                  JR   nc,$+4   
0748   CB C5                  SET   0,l   
074A   7B                     LD   a,e   
074B   87                     ADD   a,a   
074C   5F                     LD   e,a   
074D   87                     ADD   a,a   
074E   CB 45                  BIT   0,l   
0750   20 03                  JR   nz,$+5   
0752   91                     SUB   c   
0753   30 05                  JR   nc,squareRoot4   
0755   79                     LD   a,c   
0756   93                     SUB   e   
0757   1C                     INC   e   
0758   93                     SUB   e   
0759   4F                     LD   c,a   
075A                SQUAREROOT4:      
075A   10 E3                  DJNZ   squareRoot1   
075C   CB 45                  BIT   0,l   
075E   28 01                  JR   z,squareRoot5   
0760   04                     INC   b   
0761                SQUAREROOT5:      
0761   16 00                  LD   d,0   
0763   C9                     RET      
0764                PRTDEC:      
0764   CB 7C                  BIT   7,h   
0766   28 0B                  JR   z,prtdec0   
0768   3E 2D                  LD   a,"-"   
076A   CD 85 00               CALL   putchar   
076D   AF                     XOR   a   
076E   95                     SUB   l   
076F   6F                     LD   l,a   
0770   9F                     SBC   a,a   
0771   94                     SUB   h   
0772   67                     LD   h,a   
0773                PRTDEC0:      
0773   C5                     PUSH   bc   
0774   0E 00                  LD   c,0   ; leading zeros flag = false
0776   11 F0 D8               LD   de,-10000   
0779   CD 95 07               CALL   prtdec1   
077C   11 18 FC               LD   de,-1000   
077F   CD 95 07               CALL   prtdec1   
0782   11 9C FF               LD   de,-100   
0785   CD 95 07               CALL   prtdec1   
0788   1E F6                  LD   e,-10   
078A   CD 95 07               CALL   prtdec1   
078D   0C                     INC   c   ; flag = true for at least digit
078E   1E FF                  LD   e,-1   
0790   CD 95 07               CALL   prtdec1   
0793   C1                     POP   bc   
0794   C9                     RET      
0795                PRTDEC1:      
0795   06 2F                  LD   b,"0"-1   
0797                PRTDEC2:      
0797   04                     INC   b   
0798   19                     ADD   hl,de   
0799   38 FC                  JR   c,prtdec2   
079B   ED 52                  SBC   hl,de   
079D   3E 30                  LD   a,"0"   
079F   B8                     CP   b   
07A0   20 05                  JR   nz,prtdec3   
07A2   AF                     XOR   a   
07A3   B1                     OR   c   
07A4   C8                     RET   z   
07A5   18 01                  JR   prtdec4   
07A7                PRTDEC3:      
07A7   0C                     INC   c   
07A8                PRTDEC4:      
07A8   78                     LD   a,b   
07A9   C3 85 00               JP   putchar   
07AC                PRTHEX:      ; display hl as a 16-bit number in hex.
07AC   C5                     PUSH   bc   ; preserve the IP
07AD   7C                     LD   a,h   
07AE   CD B7 07               CALL   prthex2   
07B1   7D                     LD   a,l   
07B2   CD B7 07               CALL   prthex2   
07B5   C1                     POP   bc   
07B6   C9                     RET      
07B7                PRTHEX2:      
07B7   4F                     LD   c,a   
07B8   1F                     RRA      
07B9   1F                     RRA      
07BA   1F                     RRA      
07BB   1F                     RRA      
07BC   CD C0 07               CALL   prthex3   
07BF   79                     LD   a,c   
07C0                PRTHEX3:      
07C0   E6 0F                  AND   0x0F   
07C2   C6 90                  ADD   a,0x90   
07C4   27                     DAA      
07C5   CE 40                  ADC   a,0x40   
07C7   27                     DAA      
07C8   C3 85 00               JP   putchar   
07CB                PRTSTR0:      
07CB   CD 85 00               CALL   putchar   
07CE   23                     INC   hl   
07CF                PRTSTR:      
07CF   7E                     LD   a,(hl)   
07D0   B7                     OR   a   
07D1   20 F8                  JR   nz,prtstr0   
07D3   C9                     RET      
07D4                             ; **************************************************************************
07D4                             ; calculate nesting value
07D4                             ; a is char to be tested,
07D4                             ; e is the nesting value (initially 0)
07D4                             ; e is increased by ( and [
07D4                             ; e is decreased by ) and ]
07D4                             ; e has its bit 7 toggled by `
07D4                             ; limited to 127 levels
07D4                             ; **************************************************************************
07D4                NESTING:      
07D4   FE 22                  CP   $22   ; quote char
07D6   20 0A                  JR   nz,nesting1   
07D8   CB 7B                  BIT   7,e   
07DA   28 03                  JR   z,nesting1a   
07DC   CB BB                  RES   7,e   
07DE   C9                     RET      
07DF                NESTING1A:      
07DF   CB FB                  SET   7,e   
07E1   C9                     RET      
07E2                NESTING1:      
07E2   CB 7B                  BIT   7,e   
07E4   C0                     RET   nz   
07E5   FE 7B                  CP   "{"   
07E7   28 08                  JR   z,nesting2   
07E9   FE 5B                  CP   "["   
07EB   28 04                  JR   z,nesting2   
07ED   FE 28                  CP   "("   
07EF   20 02                  JR   nz,nesting3   
07F1                NESTING2:      
07F1   1C                     INC   e   
07F2   C9                     RET      
07F3                NESTING3:      
07F3   FE 7D                  CP   "}"   
07F5   28 07                  JR   z,nesting4   
07F7   FE 5D                  CP   "]"   
07F9   28 03                  JR   z,nesting4   
07FB   FE 29                  CP   ")"   
07FD   C0                     RET   nz   
07FE                NESTING4:      
07FE   1D                     DEC   e   
07FF   C9                     RET      
0800                PROMPT:      
0800   CD 10 08               CALL   printStr   
0803   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0808   C9                     RET      
0809                CRLF:        
0809   CD 10 08               CALL   printStr   
080C   0D 0A 00               .CSTR   "\r\n"   
080F   C9                     RET      
0810                PRINTSTR:      
0810   E3                     EX   (sp),hl   ; swap			
0811   CD CF 07               CALL   prtstr   
0814   23                     INC   hl   ; inc past NUL
0815   E3                     EX   (sp),hl   ; put it back	
0816   C9                     RET      
0817                DEFINE:      
0817   E1                     POP   hl   
0818   7E                     LD   a,(hl)   
0819   23                     INC   hl   
081A   44 4D                  LD   bc,hl   
081C   5F                     LD   e,a   
081D   16 00                  LD   d,0   
081F   19                     ADD   hl,de   
0820   5E                     LD   e,(hl)   
0821   23                     INC   hl   
0822   56                     LD   d,(hl)   
0823   23                     INC   hl   
0824   E5                     PUSH   hl   ; bc = str
0825   D5                     PUSH   de   
0826   CD BE 06               CALL   hashStr   ; hl = hash
0829   D1                     POP   de   
082A   44 4D                  LD   bc,hl   
082C   C3 D7 06               JP   defineEntry   
082F                INIT:        
082F   DD 21 08 0A            LD   ix,next   
0833   FD 21 80 18            LD   iy,STACK   
0837   21 80 01               LD   hl,isysVars   
083A   11 98 18               LD   de,sysVars   
083D   01 10 00               LD   bc,8 * 2   
0840   ED B0                  LDIR      
0842   3E FF                  LD   a,UNUSED   
0844   06 00                  LD   b,0   
0846   21 00 1B               LD   hl,hashSlots   
0849                INIT1:       
0849   77                     LD   (hl),a   
084A   23                     INC   hl   
084B   10 FC                  DJNZ   init1   
084D   CD 17 08               CALL   define   
0850   04 61 62 73 00         .PSTR   "abs",0   
0855   5E 06                  DW   abs1   
0857   CD 17 08               CALL   define   
085A   05 61 64 64 72 00      .PSTR   "addr",0   
0860   E3 05                  DW   addr   
0862   CD 17 08               CALL   define   
0865   06 62 79 74 65 73 00   .PSTR   "bytes",0   
086C   44 05                  DW   bytes   
086E   CD 17 08               CALL   define   
0871   05 63 61 6C 6C 00      .PSTR   "call",0   
0877   56 0A                  DW   call   
0879   CD 17 08               CALL   define   
087C   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0885   5F 05                  DW   closure   
0887   CD 17 08               CALL   define   
088A   04 64 65 66 00         .PSTR   "def",0   
088F   5B 05                  DW   def   
0891   CD 17 08               CALL   define   
0894   05 65 78 65 63 00      .PSTR   "exec",0   
089A   3D 0A                  DW   exec   
089C   CD 17 08               CALL   define   
089F   06 66 61 6C 73 65 00   .PSTR   "false",0   
08A6   00 00                  DW   false   
08A8   CD 17 08               CALL   define   
08AB   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
08B3   BC 06                  DW   filter   
08B5   CD 17 08               CALL   define   
08B8   05 66 72 61 63 00      .PSTR   "frac",0   
08BE   4B 06                  DW   frac   
08C0   CD 17 08               CALL   define   
08C3   04 67 65 74 00         .PSTR   "get",0   
08C8   08 05                  DW   get   
08CA   CD 17 08               CALL   define   
08CD   05 68 61 73 68 00      .PSTR   "hash",0   
08D3   50 05                  DW   hash   
08D5   CD 17 08               CALL   define   
08D8   06 69 6E 70 75 74 00   .PSTR   "input",0   
08DF   98 06                  DW   input   
08E1   CD 17 08               CALL   define   
08E4   03 69 66 00            .PSTR   "if",0   
08E8   2F 05                  DW   if   
08EA   CD 17 08               CALL   define   
08ED   05 69 66 74 65 00      .PSTR   "ifte",0   
08F3   31 05                  DW   ifte   
08F5   CD 17 08               CALL   define   
08F8   04 6B 65 79 00         .PSTR   "key",0   
08FD   AC 06                  DW   key   
08FF   CD 17 08               CALL   define   
0902   04 6C 65 74 00         .PSTR   "let",0   
0907   BC 05                  DW   let   
0909   CD 17 08               CALL   define   
090C   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0912   3D 05                  DW   loop   
0914   CD 17 08               CALL   define   
0917   04 6D 61 70 00         .PSTR   "map",0   
091C   BC 06                  DW   map   
091E   CD 17 08               CALL   define   
0921   04 6D 6F 64 00         .PSTR   "mod",0   
0926   6B 06                  DW   mod   
0928   CD 17 08               CALL   define   
092B   04 6E 65 67 00         .PSTR   "neg",0   
0930   B5 06                  DW   neg   
0932   CD 17 08               CALL   define   
0935   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
093D   A3 06                  DW   output   
093F   CD 17 08               CALL   define   
0942   05 73 63 61 6E 00      .PSTR   "scan",0   
0948   01 00                  DW   scan   
094A   CD 17 08               CALL   define   
094D   04 73 65 74 00         .PSTR   "set",0   
0952   1A 05                  DW   set   
0954   CD 17 08               CALL   define   
0957   04 73 68 6C 00         .PSTR   "shl",0   
095C   DC 03                  DW   shl   
095E   CD 17 08               CALL   define   
0961   04 73 68 72 00         .PSTR   "shr",0   
0966   EC 03                  DW   shr   
0968   CD 17 08               CALL   define   
096B   05 73 71 72 74 00      .PSTR   "sqrt",0   
0971   51 06                  DW   sqrt1   
0973   CD 17 08               CALL   define   
0976   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
097E   33 05                  DW   switch   
0980   CD 17 08               CALL   define   
0983   05 74 72 75 65 00      .PSTR   "true",0   
0989   FF FF                  DW   true   
098B   CD 17 08               CALL   define   
098E   06 77 6F 72 64 73 00   .PSTR   "words",0   
0995   3F 05                  DW   words   
0997   C9                     RET      
0998                START:       
0998   31 80 18               LD   sp,STACK   ; start of Siena
099B   CD 2F 08               CALL   init   ; setups
099E   CD 10 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09A1   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
09AE                INTERPRET:      
09AE   CD 00 08               CALL   prompt   
09B1   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09B4   ED 43 9C 18            LD   (vTIBPtr),bc   
09B8                INTERPRET2:      ; calc nesting (a macro might have changed it)
09B8   1E 00                  LD   e,0   ; initilize nesting value
09BA   C5                     PUSH   bc   ; save offset into TIB,
09BB                             ; bc is also the count of chars in TIB
09BB   21 00 19               LD   hl,TIB   ; hl is start of TIB
09BE   18 06                  JR   interpret4   
09C0                INTERPRET3:      
09C0   7E                     LD   a,(hl)   ; a = char in TIB
09C1   23                     INC   hl   ; inc pointer into TIB
09C2   0B                     DEC   bc   ; dec count of chars in TIB
09C3   CD D4 07               CALL   nesting   ; update nesting value
09C6                INTERPRET4:      
09C6   79                     LD   a,c   ; is count zero?
09C7   B0                     OR   b   
09C8   20 F6                  JR   nz,interpret3   ; if not loop
09CA   C1                     POP   bc   ; restore offset into TIB
09CB                WAITCHAR:      
09CB   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09CE   FE 20                  CP   $20   ; compare to space
09D0   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
09D2   FE 00                  CP   $0   ; is it end of string? NUL end of string
09D4                             ; ???? NEEDED?
09D4   28 2A                  JR   z,waitchar4   
09D6   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09D8   28 10                  JR   z,waitchar3   ; if anything else its macro/control
09DA                MACRO:       
09DA                             ;  ld (vTIBPtr),bc
09DA                             ;  ld hl,ctrlCodes
09DA                             ;  add a,l			            ; look up key of macros
09DA                             ;  ld l,a
09DA                             ;  ld e,(hl)
09DA                             ;  ld a,e
09DA                             ;  or a
09DA                             ;  jr z,macro1
09DA                             ;  ld d,msb(macros)
09DA                             ;  push de
09DA                             ;  call call		            ; Siena exec_ operation and jump to it
09DA                             ;  db DC1,0
09DA                             ; macro1:
09DA                             ;  ld bc,(vTIBPtr)
09DA   18 DC                  JR   interpret2   
09DC                WAITCHAR1:      
09DC   21 00 19               LD   hl,TIB   
09DF   09                     ADD   hl,bc   
09E0   77                     LD   (hl),a   ; store the character in textbuf
09E1   03                     INC   bc   
09E2   CD 85 00               CALL   putchar   ; echo character to screen
09E5   CD D4 07               CALL   nesting   
09E8   18 E1                  JR   waitchar   ; wait for next character
09EA                WAITCHAR3:      
09EA   21 00 19               LD   hl,TIB   
09ED   09                     ADD   hl,bc   
09EE   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09F0   23                     INC   hl   
09F1   36 0A                  LD   (hl),"\n"   
09F3   23                     INC   hl   
09F4   03                     INC   bc   
09F5   03                     INC   bc   
09F6   CD 09 08               CALL   crlf   ; echo character to screen
09F9   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09FA   B7                     OR   a   
09FB   20 CE                  JR   nz,waitchar   
09FD   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
09FF   03                     INC   bc   
0A00                WAITCHAR4:      
0A00   ED 43 9C 18            LD   (vTIBPtr),bc   
0A04   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A07                             ; we pressed enter
0A07   0B                     DEC   bc   
0A08                NEXT:        
0A08   03                     INC   bc   ; Increment the IP
0A09   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A0A   FE 20                  CP   " "   ; whitespace?
0A0C   28 FA                  JR   z,next   ; space? ignore
0A0E   38 07                  JR   c,next1   
0A10   6F                     LD   l,a   ; index into table
0A11   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A13   6E                     LD   l,(hl)   ; get low jump address
0A14   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A16   E9                     JP   (hl)   ; Jump to routine
0A17                NEXT1:       
0A17   FE 1B                  CP   ESC   ; escape from interpreter
0A19   28 07                  JR   z,escape   
0A1B   FE 00                  CP   NUL   ; end of input string?
0A1D   28 07                  JR   z,exit   
0A1F   C3 AE 09               JP   interpret   ; no, other whitespace, macros?
0A22                ESCAPE:      
0A22   60 69                  LD   hl,bc   ; address of code after escape opcode
0A24   23                     INC   hl   
0A25   E9                     JP   (hl)   
0A26                EXIT:        
0A26   50 59                  LD   de,bc   ; address of code after exit opcode
0A28   13                     INC   de   
0A29   D9                     EXX      
0A2A   C1                     POP   bc   ; bc = last result
0A2B   E1                     POP   hl   ; pop array (discard)
0A2C   FD 54                  LD   d,iyh   ; de = BP
0A2E   FD 5D                  LD   e,iyl   
0A30   EB                     EX   de,hl   ; hl = BP
0A31   F9                     LD   sp,hl   ; sp = BP
0A32   D9                     EXX      
0A33   E1                     POP   hl   ; hl = old BP
0A34   C1                     POP   bc   ; pop SCP (discard)
0A35   C1                     POP   bc   ; pop array (discard)
0A36   C1                     POP   bc   ; bc = IP
0A37   F9                     LD   sp,hl   ; sp = old BP
0A38   D9                     EXX      
0A39   C5                     PUSH   bc   ; push result
0A3A   D9                     EXX      
0A3B   EB                     EX   de,hl   
0A3C   E9                     JP   (hl)   
0A3D                             ; execute a block of code
0A3D                             ; uses parent scope
0A3D                EXEC:        ; execute code at pointer
0A3D   E1                     POP   hl   ; hl = pointer to code
0A3E   7C                     LD   a,h   ; skip if destination address is NUL
0A3F   B5                     OR   l   
0A40   28 12                  JR   z,exec2   
0A42   C5                     PUSH   bc   ; push IP
0A43   11 00 00               LD   de,0   
0A46   D5                     PUSH   de   ; array = 0
0A47   FD E5                  PUSH   iy   ; push SCP
0A49   FD E5                  PUSH   iy   ; push BP
0A4B   FD 21 00 00            LD   iy,0   ; BP = SP
0A4F   FD 39                  ADD   iy,sp   
0A51   44 4D                  LD   bc,hl   ; IP = pointer to code
0A53   0B                     DEC   bc   ; dec to prepare for next routine
0A54                EXEC2:       
0A54   DD E9                  JP   (ix)   
0A56                             ; call with args
0A56                             ; pushes array, creates a scope
0A56                             ; doclosure:
0A56                             ;     pop hl
0A56                             ;     ld e,(hl)                   ; load array and push
0A56                             ;     inc hl
0A56                             ;     ld d,(hl)
0A56                             ;     inc hl
0A56                             ;     push de
0A56                             ;     jp call1
0A56                             ; call with args
0A56                             ; creates a scope
0A56                CALL:        ; execute code at pointer
0A56   E1                     POP   hl   ; hl = pointer to code
0A57                CALL1:       
0A57   7C                     LD   a,h   ; skip if destination address is NUL
0A58   B5                     OR   l   
0A59   28 1B                  JR   z,call2   
0A5B   C5                     PUSH   bc   ; push IP
0A5C   5E                     LD   e,(hl)   ; de = array
0A5D   23                     INC   hl   
0A5E   56                     LD   d,(hl)   
0A5F   23                     INC   hl   
0A60   D5                     PUSH   de   ; push array
0A61   5E                     LD   e,(hl)   ; de = arity
0A62   23                     INC   hl   
0A63   56                     LD   d,(hl)   ; hl = block-1
0A64   EB                     EX   de,hl   ; hl = arity, de = block-1
0A65   29                     ADD   hl,hl   ; hl = arity * 2 bytes
0A66   01 04 00               LD   bc,4   ; hl = arity * 2 - 4 bytes (ip,array)
0A69   09                     ADD   hl,bc   
0A6A   39                     ADD   hl,sp   ; hl = pointer to first arg
0A6B   E5                     PUSH   hl   ; push hl
0A6C   FD E5                  PUSH   iy   ; push BP
0A6E   FD 21 00 00            LD   iy,0   ; BP = SP
0A72   FD 39                  ADD   iy,sp   
0A74   42 4B                  LD   bc,de   ; IP = block-1, ready for NEXT
0A76                CALL2:       
0A76   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x {1} 0 def x", 1
4000                             ; test ":x {$1} 1 def 2 x", 2
4000                          ;*Macro unroll:  test ":x {$1 3 set $1} 1 def 2 x", 3
4000   31 80 18               LD   SP,STACK   
4003   CD 2F 08               CALL   init   
4006   CD 3D 0A               CALL   exec   
4009   3A 78 20 7B 24 31 20 33 20 73 65 74 20 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   ":x {$1 3 set $1} 1 def 2 x"   
4024                          ;*Macro unroll:  expect ":x {$1 3 set $1} 1 def 2 x",3
4024   E1                     POP   HL   
4025   E5                     PUSH   HL   
4026   11 03 00               LD   DE,3   
4029   B7                     OR   A   
402A   ED 52                  SBC   HL,DE   
402C   7D                     LD   A,L   
402D   B4                     OR   H   
402E   28 65                  JR   Z,expectM_0_2304S43   
4030   CD 10 08               CALL   printStr   
4033   43 6F 64 65 3A 20 3A 78 20 7B 24 31 20 33 20 73 65 74 20 24 31 7D 20 31 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x {$1 3 set $1} 1 def 2 x"   
4054   CD 10 08               CALL   printStr   
4057   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4066   21 03 00               LD   HL,3   
4069   CD 64 07               CALL   prtdec   
406C   CD 10 08               CALL   printStr   
406F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407C   E1                     POP   hl   
407D   E5                     PUSH   hl   
407E   CD 64 07               CALL   prtdec   
4081   E1                     POP   hl   
4082   CD 10 08               CALL   printStr   
4085   20 28 23 00            .CSTR   " (#"   
4089   CD AC 07               CALL   prthex   
408C   CD 10 08               CALL   printStr   
408F   29 0D 0A 00            .CSTR   ")\r\n"   
4093   76                     HALT      
4094   00                     .CSTR      
4095                EXPECTM_0_2304S43:      
4095   E1                     POP   HL   
4096                             ; test "-1",-1
4096                             ; test "-1 2 +",1
4096                             ; test "-1 1 +",0
4096                             ; test "-1 -1 -",0
4096                             ; test "1 2 +", 3
4096                             ; test "4 1 2 +", 3
4096                             ; test "1", 1
4096                             ; test "2", 2
4096                             ; test "``", 0
4096                             ; test "`a`", $61
4096                             ; test "`\\``", $60
4096                             ; test "1", 1
4096                             ; test "0", 0
4096                             ; test "10", 10
4096                             ; test "123", 123
4096                             ; test "#10", $10
4096                             ; test "#FF", $FF
4096                             ; test "2 3 =", FALSE
4096                             ; test "3 3 =", TRUE
4096                             ; test "2 3 <", TRUE
4096                             ; test "3 3 <", FALSE
4096                             ; test "3 3 >", FALSE
4096                             ; test "4 3 >", TRUE
4096                             ; test "1 2 +", 3
4096                             ; test "123 456 +", 123+456
4096                             ; test "64 128 +", 64+128
4096                             ; test "5 3 -", 2
4096                             ; test "3 5 &", 1
4096                             ; test "3 5 |", 7
4096                             ; test "2 3 *", 6
4096                             ; test "1 2 3 + *", 5
4096                             ; test ":x 1000 let x 10 set x", 10
4096                             ; test ":x [100] { @1 } closure x", 100
4096                             ; test ":x [100 200] { @2 } closure x", 200
4096                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4096                             ; test "0 [{1}] switch", 1
4096                             ; test "1 [{1} {2} {3}] switch", 2
4096                             ; test "9 [{1} {5}] switch", 5
4096                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4096                             ; test "bytes 'ABC' get", $41
4096                             ; test "bytes [1 2 3] get", 1
4096                             ; test ":xyz 123 const ; xyz", 123
4096                             ; test ":x 1 const ; x", 1
4096                             ; test ":x 'A' const x get", $41
4096                             ; test ":x [1] const x get", 1
4096                             ; test ":x [1 2 3] const x 2? get", 3
4096                             ; test "2 (1 2 +) *", 6
4096                             ; test ":xyz 123 const ; xyz", 123
4096                             ; test ":xyz 123 let ; xyz get", 123
4096                             ; test "1 2 {$1 $2 +} call", 3
4096                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4096                             ; test ":xyz {1} def :xyz addr call", 1
4096                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4096                             ; test ":xyz {10} def :xyz addr exec", 10
4096                             ; test ":xyz {10} def :xyz addr call", 10
4096                             ; test "'hello' hash", $7f54
4096                             ; test ":hello", $7f54
4096                             ; test "bytes [1 2 3]", $1e02
4096                             ; test "bytes [1 2 3] 1? get", 2
4096                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4096                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4096                             ; test "words [1 2 3]", $1e02
4096                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4096                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4096                             ; test "words [10 20 30] 1 ? get", 10
4096                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4096                             ; test "{{{1} exec} exec} exec", 1
4096                             ; test "5 {{{$1} exec} exec} call", 5
4096                             ; test "5 {$1} call", 5
4096                             ; test "5 {{$1} exec} call", 5
4096                             ; test "2 1 {{$1} call} call", 2
4096                             ; test "2 1 {$2} call", 1
4096                             ; test "2 1 {$1} call", 2
4096                             ; test "2 1 {$2} call", 1
4096                             ; test "2 4 {$2} call", 4
4096                             ; test "{{1} call} call", 1
4096                             ; test "5 {-1 {$1} if} call", 5
4096                             ; test "0 {} loop", 0
4096                             ; test "1 {1-} loop", $1a00
4096                          ;*Macro unroll:  test "1 2 <", TRUE
4096   31 80 18               LD   SP,STACK   
4099   CD 2F 08               CALL   init   
409C   CD 3D 0A               CALL   exec   
409F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
40A5                          ;*Macro unroll:  expect "1 2 <",TRUE
40A5   E1                     POP   HL   
40A6   E5                     PUSH   HL   
40A7   11 FF FF               LD   DE,TRUE   
40AA   B7                     OR   A   
40AB   ED 52                  SBC   HL,DE   
40AD   7D                     LD   A,L   
40AE   B4                     OR   H   
40AF   28 50                  JR   Z,expectM_0_2384S43   
40B1   CD 10 08               CALL   printStr   
40B4   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
40C0   CD 10 08               CALL   printStr   
40C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D2   21 FF FF               LD   HL,TRUE   
40D5   CD 64 07               CALL   prtdec   
40D8   CD 10 08               CALL   printStr   
40DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E8   E1                     POP   hl   
40E9   E5                     PUSH   hl   
40EA   CD 64 07               CALL   prtdec   
40ED   E1                     POP   hl   
40EE   CD 10 08               CALL   printStr   
40F1   20 28 23 00            .CSTR   " (#"   
40F5   CD AC 07               CALL   prthex   
40F8   CD 10 08               CALL   printStr   
40FB   29 0D 0A 00            .CSTR   ")\r\n"   
40FF   76                     HALT      
4100   00                     .CSTR      
4101                EXPECTM_0_2384S43:      
4101   E1                     POP   HL   
4102                          ;*Macro unroll:  test "2 2 <=", TRUE
4102   31 80 18               LD   SP,STACK   
4105   CD 2F 08               CALL   init   
4108   CD 3D 0A               CALL   exec   
410B   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
4112                          ;*Macro unroll:  expect "2 2 <=",TRUE
4112   E1                     POP   HL   
4113   E5                     PUSH   HL   
4114   11 FF FF               LD   DE,TRUE   
4117   B7                     OR   A   
4118   ED 52                  SBC   HL,DE   
411A   7D                     LD   A,L   
411B   B4                     OR   H   
411C   28 51                  JR   Z,expectM_0_2385S43   
411E   CD 10 08               CALL   printStr   
4121   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
412E   CD 10 08               CALL   printStr   
4131   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4140   21 FF FF               LD   HL,TRUE   
4143   CD 64 07               CALL   prtdec   
4146   CD 10 08               CALL   printStr   
4149   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4156   E1                     POP   hl   
4157   E5                     PUSH   hl   
4158   CD 64 07               CALL   prtdec   
415B   E1                     POP   hl   
415C   CD 10 08               CALL   printStr   
415F   20 28 23 00            .CSTR   " (#"   
4163   CD AC 07               CALL   prthex   
4166   CD 10 08               CALL   printStr   
4169   29 0D 0A 00            .CSTR   ")\r\n"   
416D   76                     HALT      
416E   00                     .CSTR      
416F                EXPECTM_0_2385S43:      
416F   E1                     POP   HL   
4170                          ;*Macro unroll:  test "2 1 <", FALSE
4170   31 80 18               LD   SP,STACK   
4173   CD 2F 08               CALL   init   
4176   CD 3D 0A               CALL   exec   
4179   32 20 31 20 3C 00      .CSTR   "2 1 <"   
417F                          ;*Macro unroll:  expect "2 1 <",FALSE
417F   E1                     POP   HL   
4180   E5                     PUSH   HL   
4181   11 00 00               LD   DE,FALSE   
4184   B7                     OR   A   
4185   ED 52                  SBC   HL,DE   
4187   7D                     LD   A,L   
4188   B4                     OR   H   
4189   28 50                  JR   Z,expectM_0_2386S43   
418B   CD 10 08               CALL   printStr   
418E   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
419A   CD 10 08               CALL   printStr   
419D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41AC   21 00 00               LD   HL,FALSE   
41AF   CD 64 07               CALL   prtdec   
41B2   CD 10 08               CALL   printStr   
41B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C2   E1                     POP   hl   
41C3   E5                     PUSH   hl   
41C4   CD 64 07               CALL   prtdec   
41C7   E1                     POP   hl   
41C8   CD 10 08               CALL   printStr   
41CB   20 28 23 00            .CSTR   " (#"   
41CF   CD AC 07               CALL   prthex   
41D2   CD 10 08               CALL   printStr   
41D5   29 0D 0A 00            .CSTR   ")\r\n"   
41D9   76                     HALT      
41DA   00                     .CSTR      
41DB                EXPECTM_0_2386S43:      
41DB   E1                     POP   HL   
41DC                          ;*Macro unroll:  test "1 2 >", FALSE
41DC   31 80 18               LD   SP,STACK   
41DF   CD 2F 08               CALL   init   
41E2   CD 3D 0A               CALL   exec   
41E5   31 20 32 20 3E 00      .CSTR   "1 2 >"   
41EB                          ;*Macro unroll:  expect "1 2 >",FALSE
41EB   E1                     POP   HL   
41EC   E5                     PUSH   HL   
41ED   11 00 00               LD   DE,FALSE   
41F0   B7                     OR   A   
41F1   ED 52                  SBC   HL,DE   
41F3   7D                     LD   A,L   
41F4   B4                     OR   H   
41F5   28 50                  JR   Z,expectM_0_2387S43   
41F7   CD 10 08               CALL   printStr   
41FA   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4206   CD 10 08               CALL   printStr   
4209   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4218   21 00 00               LD   HL,FALSE   
421B   CD 64 07               CALL   prtdec   
421E   CD 10 08               CALL   printStr   
4221   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
422E   E1                     POP   hl   
422F   E5                     PUSH   hl   
4230   CD 64 07               CALL   prtdec   
4233   E1                     POP   hl   
4234   CD 10 08               CALL   printStr   
4237   20 28 23 00            .CSTR   " (#"   
423B   CD AC 07               CALL   prthex   
423E   CD 10 08               CALL   printStr   
4241   29 0D 0A 00            .CSTR   ")\r\n"   
4245   76                     HALT      
4246   00                     .CSTR      
4247                EXPECTM_0_2387S43:      
4247   E1                     POP   HL   
4248                          ;*Macro unroll:  test "2 2 >=", TRUE
4248   31 80 18               LD   SP,STACK   
424B   CD 2F 08               CALL   init   
424E   CD 3D 0A               CALL   exec   
4251   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
4258                          ;*Macro unroll:  expect "2 2 >=",TRUE
4258   E1                     POP   HL   
4259   E5                     PUSH   HL   
425A   11 FF FF               LD   DE,TRUE   
425D   B7                     OR   A   
425E   ED 52                  SBC   HL,DE   
4260   7D                     LD   A,L   
4261   B4                     OR   H   
4262   28 51                  JR   Z,expectM_0_2388S43   
4264   CD 10 08               CALL   printStr   
4267   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
4274   CD 10 08               CALL   printStr   
4277   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4286   21 FF FF               LD   HL,TRUE   
4289   CD 64 07               CALL   prtdec   
428C   CD 10 08               CALL   printStr   
428F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
429C   E1                     POP   hl   
429D   E5                     PUSH   hl   
429E   CD 64 07               CALL   prtdec   
42A1   E1                     POP   hl   
42A2   CD 10 08               CALL   printStr   
42A5   20 28 23 00            .CSTR   " (#"   
42A9   CD AC 07               CALL   prthex   
42AC   CD 10 08               CALL   printStr   
42AF   29 0D 0A 00            .CSTR   ")\r\n"   
42B3   76                     HALT      
42B4   00                     .CSTR      
42B5                EXPECTM_0_2388S43:      
42B5   E1                     POP   HL   
42B6                          ;*Macro unroll:  test "2 1 >", TRUE
42B6   31 80 18               LD   SP,STACK   
42B9   CD 2F 08               CALL   init   
42BC   CD 3D 0A               CALL   exec   
42BF   32 20 31 20 3E 00      .CSTR   "2 1 >"   
42C5                          ;*Macro unroll:  expect "2 1 >",TRUE
42C5   E1                     POP   HL   
42C6   E5                     PUSH   HL   
42C7   11 FF FF               LD   DE,TRUE   
42CA   B7                     OR   A   
42CB   ED 52                  SBC   HL,DE   
42CD   7D                     LD   A,L   
42CE   B4                     OR   H   
42CF   28 50                  JR   Z,expectM_0_2389S43   
42D1   CD 10 08               CALL   printStr   
42D4   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
42E0   CD 10 08               CALL   printStr   
42E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42F2   21 FF FF               LD   HL,TRUE   
42F5   CD 64 07               CALL   prtdec   
42F8   CD 10 08               CALL   printStr   
42FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4308   E1                     POP   hl   
4309   E5                     PUSH   hl   
430A   CD 64 07               CALL   prtdec   
430D   E1                     POP   hl   
430E   CD 10 08               CALL   printStr   
4311   20 28 23 00            .CSTR   " (#"   
4315   CD AC 07               CALL   prthex   
4318   CD 10 08               CALL   printStr   
431B   29 0D 0A 00            .CSTR   ")\r\n"   
431F   76                     HALT      
4320   00                     .CSTR      
4321                EXPECTM_0_2389S43:      
4321   E1                     POP   HL   
4322                          ;*Macro unroll:  test "10 sqrt", 3
4322   31 80 18               LD   SP,STACK   
4325   CD 2F 08               CALL   init   
4328   CD 3D 0A               CALL   exec   
432B   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
4333                          ;*Macro unroll:  expect "10 sqrt",3
4333   E1                     POP   HL   
4334   E5                     PUSH   HL   
4335   11 03 00               LD   DE,3   
4338   B7                     OR   A   
4339   ED 52                  SBC   HL,DE   
433B   7D                     LD   A,L   
433C   B4                     OR   H   
433D   28 52                  JR   Z,expectM_0_2390S43   
433F   CD 10 08               CALL   printStr   
4342   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
4350   CD 10 08               CALL   printStr   
4353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4362   21 03 00               LD   HL,3   
4365   CD 64 07               CALL   prtdec   
4368   CD 10 08               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   CD 64 07               CALL   prtdec   
437D   E1                     POP   hl   
437E   CD 10 08               CALL   printStr   
4381   20 28 23 00            .CSTR   " (#"   
4385   CD AC 07               CALL   prthex   
4388   CD 10 08               CALL   printStr   
438B   29 0D 0A 00            .CSTR   ")\r\n"   
438F   76                     HALT      
4390   00                     .CSTR      
4391                EXPECTM_0_2390S43:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "10 sqrt frac", 1
4392   31 80 18               LD   SP,STACK   
4395   CD 2F 08               CALL   init   
4398   CD 3D 0A               CALL   exec   
439B   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
43A8                          ;*Macro unroll:  expect "10 sqrt frac",1
43A8   E1                     POP   HL   
43A9   E5                     PUSH   HL   
43AA   11 01 00               LD   DE,1   
43AD   B7                     OR   A   
43AE   ED 52                  SBC   HL,DE   
43B0   7D                     LD   A,L   
43B1   B4                     OR   H   
43B2   28 57                  JR   Z,expectM_0_2391S43   
43B4   CD 10 08               CALL   printStr   
43B7   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
43CA   CD 10 08               CALL   printStr   
43CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DC   21 01 00               LD   HL,1   
43DF   CD 64 07               CALL   prtdec   
43E2   CD 10 08               CALL   printStr   
43E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43F2   E1                     POP   hl   
43F3   E5                     PUSH   hl   
43F4   CD 64 07               CALL   prtdec   
43F7   E1                     POP   hl   
43F8   CD 10 08               CALL   printStr   
43FB   20 28 23 00            .CSTR   " (#"   
43FF   CD AC 07               CALL   prthex   
4402   CD 10 08               CALL   printStr   
4405   29 0D 0A 00            .CSTR   ")\r\n"   
4409   76                     HALT      
440A   00                     .CSTR      
440B                EXPECTM_0_2391S43:      
440B   E1                     POP   HL   
440C                          ;*Macro unroll:  test "7 3 /", 2
440C   31 80 18               LD   SP,STACK   
440F   CD 2F 08               CALL   init   
4412   CD 3D 0A               CALL   exec   
4415   37 20 33 20 2F 00      .CSTR   "7 3 /"   
441B                          ;*Macro unroll:  expect "7 3 /",2
441B   E1                     POP   HL   
441C   E5                     PUSH   HL   
441D   11 02 00               LD   DE,2   
4420   B7                     OR   A   
4421   ED 52                  SBC   HL,DE   
4423   7D                     LD   A,L   
4424   B4                     OR   H   
4425   28 50                  JR   Z,expectM_0_2392S43   
4427   CD 10 08               CALL   printStr   
442A   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4436   CD 10 08               CALL   printStr   
4439   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4448   21 02 00               LD   HL,2   
444B   CD 64 07               CALL   prtdec   
444E   CD 10 08               CALL   printStr   
4451   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
445E   E1                     POP   hl   
445F   E5                     PUSH   hl   
4460   CD 64 07               CALL   prtdec   
4463   E1                     POP   hl   
4464   CD 10 08               CALL   printStr   
4467   20 28 23 00            .CSTR   " (#"   
446B   CD AC 07               CALL   prthex   
446E   CD 10 08               CALL   printStr   
4471   29 0D 0A 00            .CSTR   ")\r\n"   
4475   76                     HALT      
4476   00                     .CSTR      
4477                EXPECTM_0_2392S43:      
4477   E1                     POP   HL   
4478                          ;*Macro unroll:  test "7 3 / frac", 1
4478   31 80 18               LD   SP,STACK   
447B   CD 2F 08               CALL   init   
447E   CD 3D 0A               CALL   exec   
4481   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
448C                          ;*Macro unroll:  expect "7 3 / frac",1
448C   E1                     POP   HL   
448D   E5                     PUSH   HL   
448E   11 01 00               LD   DE,1   
4491   B7                     OR   A   
4492   ED 52                  SBC   HL,DE   
4494   7D                     LD   A,L   
4495   B4                     OR   H   
4496   28 55                  JR   Z,expectM_0_2393S43   
4498   CD 10 08               CALL   printStr   
449B   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
44AC   CD 10 08               CALL   printStr   
44AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44BE   21 01 00               LD   HL,1   
44C1   CD 64 07               CALL   prtdec   
44C4   CD 10 08               CALL   printStr   
44C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D4   E1                     POP   hl   
44D5   E5                     PUSH   hl   
44D6   CD 64 07               CALL   prtdec   
44D9   E1                     POP   hl   
44DA   CD 10 08               CALL   printStr   
44DD   20 28 23 00            .CSTR   " (#"   
44E1   CD AC 07               CALL   prthex   
44E4   CD 10 08               CALL   printStr   
44E7   29 0D 0A 00            .CSTR   ")\r\n"   
44EB   76                     HALT      
44EC   00                     .CSTR      
44ED                EXPECTM_0_2393S43:      
44ED   E1                     POP   HL   
44EE                          ;*Macro unroll:  test "1 2 +", 3
44EE   31 80 18               LD   SP,STACK   
44F1   CD 2F 08               CALL   init   
44F4   CD 3D 0A               CALL   exec   
44F7   31 20 32 20 2B 00      .CSTR   "1 2 +"   
44FD                          ;*Macro unroll:  expect "1 2 +",3
44FD   E1                     POP   HL   
44FE   E5                     PUSH   HL   
44FF   11 03 00               LD   DE,3   
4502   B7                     OR   A   
4503   ED 52                  SBC   HL,DE   
4505   7D                     LD   A,L   
4506   B4                     OR   H   
4507   28 50                  JR   Z,expectM_0_2394S43   
4509   CD 10 08               CALL   printStr   
450C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
4518   CD 10 08               CALL   printStr   
451B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
452A   21 03 00               LD   HL,3   
452D   CD 64 07               CALL   prtdec   
4530   CD 10 08               CALL   printStr   
4533   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4540   E1                     POP   hl   
4541   E5                     PUSH   hl   
4542   CD 64 07               CALL   prtdec   
4545   E1                     POP   hl   
4546   CD 10 08               CALL   printStr   
4549   20 28 23 00            .CSTR   " (#"   
454D   CD AC 07               CALL   prthex   
4550   CD 10 08               CALL   printStr   
4553   29 0D 0A 00            .CSTR   ")\r\n"   
4557   76                     HALT      
4558   00                     .CSTR      
4559                EXPECTM_0_2394S43:      
4559   E1                     POP   HL   
455A                             ; test ":h {1} def :h addr call", 1
455A                             ; ; call enter
455A                             ; ;     .cstr "1 3",$22,"+"
455A                             ; ; expect "1 3 DUP +", 6
455A   CD 10 08               CALL   printStr   
455D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4563   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06BC DEFINED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1799 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1778 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 256 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 258 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 260 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 262 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 264 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 266 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 268 IN Siena.asm
AND_:               0361 DEFINED AT LINE 270 IN Siena.asm
AND1:               0368 DEFINED AT LINE 278 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 302 IN Siena.asm
OR_:                036C DEFINED AT LINE 283 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 293 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
INV_:               037E DEFINED AT LINE 304 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 308 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 315 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 320 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB1:               039F DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
SUB2:               03A1 DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
NOT_:               03A7 DEFINED AT LINE 340 IN Siena.asm
EQ_:                03AC DEFINED AT LINE 344 IN Siena.asm
EQ1:                03AD DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
GT_:                03B1 DEFINED AT LINE 350 IN Siena.asm
LT_:                03B5 DEFINED AT LINE 355 IN Siena.asm
LT1:                03B7 DEFINED AT LINE 358 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
DIV_:               03C2 DEFINED AT LINE 366 IN Siena.asm
COMMENT_:           03D1 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
NOP_:               03DA DEFINED AT LINE 385 IN Siena.asm
SHL:                03DC DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
SHL1:               03E4 DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
SHL2:               03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHR:                03EC DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
SHR1:               03F4 DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
SHR2:               03F8 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
MUL:                03FF DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
MUL2:               0409 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
NUM:                041B DEFINED AT LINE 451 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0424 DEFINED AT LINE 457 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
NUM1:               0425 DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
NUM2:               043D DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
NUM3:               0448 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
HEXNUM:             044B DEFINED AT LINE 489 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            044E DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
HEXNUM2:            0456 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
STRING:             0468 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
STRING2:            0473 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
CHAR:               0481 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
CHAR1:              0484 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
CHAR2:              0490 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR3:              0493 DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PAREN:              0496 DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PARENEND:           0498 DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              049A DEFINED AT LINE 567 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
BLOCK1:             049E DEFINED AT LINE 571 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 594 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
BLOCK2:             04C4 DEFINED AT LINE 595 IN Siena.asm
BLOCK3:             04C7 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 592 IN Siena.asm
BLOCK4:             04CD DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
BLOCKEND:           04D3 DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
ARG:                04E8 DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0506 DEFINED AT LINE 650 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              0508 DEFINED AT LINE 669 IN Siena.asm
GET:                0508 DEFINED AT LINE 670 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
GET1:               0509 DEFINED AT LINE 672 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
GET2:               0517 DEFINED AT LINE 681 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
SET:                051A DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
SET1:               052C DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
IF:                 052F DEFINED AT LINE 706 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
IFTE:               0531 DEFINED AT LINE 713 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
SWITCH:             0533 DEFINED AT LINE 743 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
LOOP:               053D DEFINED AT LINE 756 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
WORDS:              053F DEFINED AT LINE 806 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
BYTES:              0544 DEFINED AT LINE 809 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
BYTES1:             0547 DEFINED AT LINE 811 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
ARRAY:              054C DEFINED AT LINE 815 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARRAYEND:           054E DEFINED AT LINE 826 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
HASH:               0550 DEFINED AT LINE 921 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
DEF:                055B DEFINED AT LINE 931 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
CLOSURE:            055F DEFINED AT LINE 936 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
DEF0:               055F DEFINED AT LINE 937 IN Siena.asm
DEF1:               0579 DEFINED AT LINE 960 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
DEF2:               059D DEFINED AT LINE 984 IN Siena.asm
DEF3:               05A0 DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
DEF4:               05A6 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
DEF5:               05B9 DEFINED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
LET:                05BC DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
LET2:               05E0 DEFINED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
ADDR:               05E3 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
ADDR1:              05EF DEFINED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
SYMBOL:             05F7 DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
SYMBOL0:            05FF DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
SYMBOL1:            0601 DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
SYMBOL2:            0610 DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
IDENT:              061E DEFINED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
IDENT0:             0625 DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
IDENT1:             0627 DEFINED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
IDENT2:             0636 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
IDENT3:             064A DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
FRAC:               064B DEFINED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
SQRT1:              0651 DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
ABS1:               065E DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
MOD:                066B DEFINED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
EQUALS:             0677 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHANEQ:         067F DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
LESSTHAN:           0684 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
LESSTHAN1:          0689 DEFINED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
TRUE1:              068C DEFINED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
FALSE1:             0692 DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
INPUT:              0698 DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
OUTPUT:             06A3 DEFINED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
KEY:                06AC DEFINED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
NEG:                06B5 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
FILTER:             06BC DEFINED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
MAP:                06BC DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
HASHSTR:            06BE DEFINED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 925 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
HASHSTR1:           06C1 DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1264 IN Siena.asm
HASHSTR2:           06C6 DEFINED AT LINE 1250 IN Siena.asm
DEFINEENTRY:        06D7 DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
DEFINEENTRY0:       06DC DEFINED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1290 IN Siena.asm
DEFINEENTRY1:       06EB DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
DEFINEENTRY2:       06F1 DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
DEFINEENTRY3:       06F3 DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
LOOKUPENTRY:        06FD DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
LOOKUPENTRY0:       0702 DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
LOOKUPENTRY1:       0711 DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
LOOKUPENTRY2:       0717 DEFINED AT LINE 1330 IN Siena.asm
LOOKUPENTRY3:       0719 DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
DIVIDE:             0721 DEFINED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
DIVIDE1:            0726 DEFINED AT LINE 1348 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
DIVIDE2:            0733 DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
DIVIDE3:            0734 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
SQUAREROOT:         073A DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
SQUAREROOT1:        073F DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
SQUAREROOT4:        075A DEFINED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
SQUAREROOT5:        0761 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
PRTDEC:             0764 DEFINED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0773 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
PRTDEC1:            0795 DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
PRTDEC2:            0797 DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
PRTDEC3:            07A7 DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
PRTDEC4:            07A8 DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
PRTHEX:             07AC DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            07B7 DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
PRTHEX3:            07C0 DEFINED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
PRTSTR0:            07CB DEFINED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
PRTSTR:             07CF DEFINED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
NESTING:            07D4 DEFINED AT LINE 1491 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
NESTING1A:          07DF DEFINED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
NESTING1:           07E2 DEFINED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
NESTING2:           07F1 DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
NESTING3:           07F3 DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
NESTING4:           07FE DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
PROMPT:             0800 DEFINED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
CRLF:               0809 DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
PRINTSTR:           0810 DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 140
DEFINE:             0817 DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
INIT:               082F DEFINED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              0849 DEFINED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
START:              0998 DEFINED AT LINE 1698 IN Siena.asm
INTERPRET:          09AE DEFINED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
INTERPRET2:         09B8 DEFINED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
INTERPRET3:         09C0 DEFINED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
INTERPRET4:         09C6 DEFINED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
WAITCHAR:           09CB DEFINED AT LINE 1729 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
MACRO:              09DA DEFINED AT LINE 1739 IN Siena.asm
WAITCHAR1:          09DC DEFINED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
WAITCHAR3:          09EA DEFINED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
WAITCHAR4:          0A00 DEFINED AT LINE 1781 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
NEXT:               0A08 DEFINED AT LINE 1787 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1791 IN Siena.asm
NEXT1:              0A17 DEFINED AT LINE 1798 IN Siena.asm
                    > USED AT LINE 1792 IN Siena.asm
ESCAPE:             0A22 DEFINED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1800 IN Siena.asm
EXIT:               0A26 DEFINED AT LINE 1810 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
EXEC:               0A3D DEFINED AT LINE 1834 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0A54 DEFINED AT LINE 1848 IN Siena.asm
                    > USED AT LINE 1838 IN Siena.asm
CALL:               0A56 DEFINED AT LINE 1864 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
CALL1:              0A57 DEFINED AT LINE 1866 IN Siena.asm
CALL2:              0A76 DEFINED AT LINE 1893 IN Siena.asm
                    > USED AT LINE 1869 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1564 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 372 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 812 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 673 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1570 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2304S43:  4095 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2384S43:  4101 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2385S43:  416F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2386S43:  41DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2387S43:  4247 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2388S43:  42B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2389S43:  4321 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2390S43:  4391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2391S43:  440B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2392S43:  4477 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2393S43:  44ED DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2394S43:  4559 DEFINED AT LINE 34
                    > USED AT LINE 10
