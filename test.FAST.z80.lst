0000                             ; .engine mycomputer
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 POP HL
0000                 PUSH HL
0000                 LD DE,val1
0000                 OR A
0000                 SBC HL,DE
0000                 LD A,L
0000                 OR H
0000                 JR Z,expect%%M
0000                 CALL prtstr
0000                 .cstr msg1,"\r\nActual: "
0000                 CALL prtdec
0000                 CALL prtstr
0000                 .cstr "\r\nExpected: "
0000                 LD HL,val1
0000                 CALL prtdec
0000                 HALT
0000                 .cstr
0000                expect%%M:
0000                 POP HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 LD SP,DSTACK
0000                 CALL init
0000                 CALL enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 76 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   1   ; not FF, for Siena
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Siena)
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   AC                     DB   lsb(exit_)   ; NUL
0201   C4                     DB   lsb(nop_)   ; SOH
0202   C4                     DB   lsb(nop_)   ; STX
0203   A9                     DB   lsb(etx_)   ; ETX
0204   C4                     DB   lsb(nop_)   ; 
0205   C4                     DB   lsb(nop_)   ; 
0206   C4                     DB   lsb(nop_)   ; 
0207   C4                     DB   lsb(nop_)   ; 
0208   C4                     DB   lsb(nop_)   ; 
0209   C4                     DB   lsb(nop_)   ; 
020A   C4                     DB   lsb(nop_)   ; 
020B   C4                     DB   lsb(nop_)   ; 
020C   C4                     DB   lsb(nop_)   ; 
020D   C4                     DB   lsb(nop_)   ; 
020E   C4                     DB   lsb(nop_)   ; 
020F   C4                     DB   lsb(nop_)   ; 
0210   C4                     DB   lsb(nop_)   ; 
0211   C4                     DB   lsb(nop_)   ; 
0212   C4                     DB   lsb(nop_)   ; 
0213   C4                     DB   lsb(nop_)   ; 
0214   C4                     DB   lsb(nop_)   ; 
0215   C4                     DB   lsb(nop_)   ; 
0216   C4                     DB   lsb(nop_)   ; 
0217   C4                     DB   lsb(nop_)   ; 
0218   C4                     DB   lsb(nop_)   ; 
0219   C4                     DB   lsb(nop_)   ; 
021A   C4                     DB   lsb(nop_)   ; 
021B   C4                     DB   lsb(nop_)   ; 
021C   C4                     DB   lsb(nop_)   ; 
021D   C4                     DB   lsb(nop_)   ; 
021E   C4                     DB   lsb(nop_)   ; 
021F   C4                     DB   lsb(nop_)   ; 
0220   C4                     DB   lsb(nop_)   ; 
0221   C4                     DB   lsb(nop_)   ;    !
0222   C4                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C4                     DB   lsb(nop_)   ;    %
0226   C4                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   24                     DB   lsb(block_)   ;    (
0229   27                     DB   lsb(blockend_)   ;    )
022A   C4                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C4                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   18                     DB   lsb(dot_)   ;    .
022F   C4                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C4                     DB   lsb(nop_)   ;    :
023B   C4                     DB   lsb(nop_)   ;    ;
023C   C4                     DB   lsb(nop_)   ;    <
023D   C4                     DB   lsb(nop_)   ;    =
023E   C4                     DB   lsb(nop_)   ;    >
023F   C4                     DB   lsb(nop_)   ;    ?
0240   AF                     DB   lsb(fetch_)   ;    @
0241   8A                     DB   lsb(call_)   ;    A
0242   8A                     DB   lsb(call_)   ;    B
0243   8A                     DB   lsb(call_)   ;    C
0244   8A                     DB   lsb(call_)   ;    D
0245   8A                     DB   lsb(call_)   ;    E
0246   8A                     DB   lsb(call_)   ;    F
0247   8A                     DB   lsb(call_)   ;    G
0248   8A                     DB   lsb(call_)   ;    h
0249   8A                     DB   lsb(call_)   ;    I
024A   8A                     DB   lsb(call_)   ;    J
024B   8A                     DB   lsb(call_)   ;    K
024C   8A                     DB   lsb(call_)   ;    L
024D   8A                     DB   lsb(call_)   ;    M
024E   8A                     DB   lsb(call_)   ;    N
024F   8A                     DB   lsb(call_)   ;    O
0250   8A                     DB   lsb(call_)   ;    p
0251   8A                     DB   lsb(call_)   ;    Q
0252   8A                     DB   lsb(call_)   ;    R
0253   8A                     DB   lsb(call_)   ;    S
0254   8A                     DB   lsb(call_)   ;    T
0255   8A                     DB   lsb(call_)   ;    U
0256   8A                     DB   lsb(call_)   ;    V
0257   8A                     DB   lsb(call_)   ;    W
0258   8A                     DB   lsb(call_)   ;    X
0259   8A                     DB   lsb(call_)   ;    Y
025A   8A                     DB   lsb(call_)   ;    Z
025B   C4                     DB   lsb(nop_)   ;    [
025C   C4                     DB   lsb(nop_)   ;    \
025D   C4                     DB   lsb(nop_)   ;    ]
025E   C4                     DB   lsb(nop_)   ;    ^
025F   C4                     DB   lsb(nop_)   ;    _
0260   C4                     DB   lsb(nop_)   ;    `    	
0261   2A                     DB   lsb(a_)   ;    a
0262   35                     DB   lsb(var_)   ;    b
0263   2D                     DB   lsb(c_)   ;    c
0264   30                     DB   lsb(d_)   ;    d
0265   33                     DB   lsb(e_)   ;    e
0266   36                     DB   lsb(f_)   ;    f
0267   39                     DB   lsb(g_)   ;    g
0268   35                     DB   lsb(var_)   ;    h
0269   3C                     DB   lsb(i_)   ;    i
026A   35                     DB   lsb(var_)   ;    j
026B   3F                     DB   lsb(k_)   ;    k
026C   42                     DB   lsb(l_)   ;    l
026D   45                     DB   lsb(m_)   ;    m
026E   45                     DB   lsb(m_)   ;    n
026F   4B                     DB   lsb(o_)   ;    o
0270   4E                     DB   lsb(p_)   ;    p
0271   35                     DB   lsb(var_)   ;    q
0272   51                     DB   lsb(r_)   ;    r
0273   54                     DB   lsb(s_)   ;    s
0274   35                     DB   lsb(var_)   ;    t
0275   57                     DB   lsb(u_)   ;    u
0276   35                     DB   lsb(var_)   ;    v
0277   5A                     DB   lsb(w_)   ;    w
0278   5D                     DB   lsb(x_)   ;    x
0279   35                     DB   lsb(var_)   ;    y
027A   35                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   6C                     DB   lsb(or_)   ;    |
027D   15                     DB   lsb(return_)   ;    }
027E   C4                     DB   lsb(nop_)   ;    ~
027F   C4                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                ETX:         
0300   21 00 E6               LD   hl,-DSTACK   
0303   39                     ADD   hl,sp   
0304   30 03                  JR   nc,etx1   
0306   31 00 1A               LD   sp,DSTACK   
0309                ETX1:        
0309   18 16                  JR   interpret   
030B                START:       
030B   31 00 1A               LD   sp,DSTACK   ; start of Siena
030E   CD 76 08               CALL   init   ; setups
0311   CD 97 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0314   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0321                INTERPRET:      
0321   CD 97 07               CALL   prompt   
0324   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0327   ED 43 84 1B            LD   (vTIBPtr),bc   
032B                INTERPRET2:      ; calc nesting (a macro might have changed it)
032B   1E 00                  LD   e,0   ; initilize nesting value
032D   C5                     PUSH   bc   ; save offset into TIB,
032E                             ; bc is also the count of chars in TIB
032E   21 00 18               LD   hl,TIB   ; hl is start of TIB
0331   18 06                  JR   interpret4   
0333                INTERPRET3:      
0333   7E                     LD   a,(hl)   ; a = char in TIB
0334   23                     INC   hl   ; inc pointer into TIB
0335   0B                     DEC   bc   ; dec count of chars in TIB
0336   CD BC 08               CALL   nesting   ; update nesting value
0339                INTERPRET4:      
0339   79                     LD   a,c   ; is count zero?
033A   B0                     OR   b   
033B   20 F6                  JR   nz,interpret3   ; if not loop
033D   C1                     POP   bc   ; restore offset into TIB
033E                WAITCHAR:      
033E   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0341   FE 20                  CP   $20   ; compare to space
0343   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0345   FE 00                  CP   $0   ; is it end of string? null end of string
0347   28 45                  JR   z,waitchar4   
0349   FE 0D                  CP   "\r"   ; carriage return? ascii 13
034B   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
034D                MACRO:       
034D   ED 43 84 1B            LD   (vTIBPtr),bc   
0351   21 80 1A               LD   hl,ctrlCodes   
0354   85                     ADD   a,l   ; look up key of macros
0355   6F                     LD   l,a   
0356   5E                     LD   e,(hl)   
0357   7B                     LD   a,e   
0358   B7                     OR   a   
0359   28 09                  JR   z,macro1   
035B   16 01                  LD   d,msb(macros)   
035D   D5                     PUSH   de   
035E   CD BB 09               CALL   enter   ; Siena go operation and jump to it
0361   67 6F 00               .CSTR   "go"   
0364                MACRO1:      
0364   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0368   18 C1                  JR   interpret2   
036A                WAITCHAR1:      
036A   21 00 18               LD   hl,TIB   
036D   09                     ADD   hl,bc   
036E   77                     LD   (hl),a   ; store the character in textbuf
036F   03                     INC   bc   
0370   CD 85 00               CALL   putchar   ; echo character to screen
0373   CD BC 08               CALL   nesting   
0376   18 C6                  JR   waitchar   ; wait for next character
0378                WAITCHAR3:      
0378   21 00 18               LD   hl,TIB   
037B   09                     ADD   hl,bc   
037C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
037E   23                     INC   hl   
037F   36 0A                  LD   (hl),"\n"   
0381   23                     INC   hl   
0382   03                     INC   bc   
0383   03                     INC   bc   
0384   CD BF 07               CALL   crlf   ; echo character to screen
0387   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0388   B7                     OR   a   
0389   20 B3                  JR   nz,waitchar   
038B   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
038D   03                     INC   bc   
038E                WAITCHAR4:      
038E   ED 43 84 1B            LD   (vTIBPtr),bc   
0392   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0395   0B                     DEC   bc   
0396                             ; ********************************************************************************
0396                             ; 
0396                             ; Dispatch Routine.
0396                             ; 
0396                             ; Get the next character and form a 1 byte jump address
0396                             ; 
0396                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
0396                             ; jump to the selected function.
0396                             ; 
0396                             ; Individual handler routines will deal with each category:
0396                             ; 
0396                             ; 1. Detect characters a-z and jump to the User Command handler routine
0396                             ; 
0396                             ; 2. Detect characters a-z and jump to the variable handler routine
0396                             ; 
0396                             ; 3. All other characters are punctuation and cause a jump to the associated
0396                             ; primitive code.
0396                             ; 
0396                             ; Instruction Pointer IP bc is incremented
0396                             ; 
0396                             ; *********************************************************************************
0396                NEXT:        
0396   03                     INC   bc   ;  Increment the IP
0397   0A                     LD   a,(bc)   ;  Get the next character and dispatch
0398   6F                     LD   l,a   ;  Index into table
0399   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
039B   6E                     LD   l,(hl)   ;  get low jump address
039C   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
039E   E9                     JP   (hl)   ;  Jump to routine
039F                             ; **********************************************************************			
039F                             ; Page 4 primitive routines
039F                             ; **********************************************************************
039F                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 C6 07               JP   num   
0403                HEXNUM_:      
0403   C3 F2 07               JP   hexnum   
0406                ARG_:        
0406   C3 00 09               JP   arg   
0409                STRDEF_:      
0409   C3 1A 09               JP   strDef   
040C                NEWADD2_:      
040C   C3 34 09               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 66 09               JP   lambda   
0412                GO_:         
0412   C3 52 09               JP   go   
0415                RETURN_:      
0415   C3 7C 09               JP   return   
0418                DOT_:        
0418   E1                     POP   hl   
0419   CD 0F 08               CALL   prtdec   
041C                DOT2:        
041C   3E 20                  LD   a," "   
041E   CD 85 00               CALL   putchar   
0421   C3 96 03               JP   next   
0424                BLOCK_:      
0424   C3 8A 09               JP   block   
0427                BLOCKEND_:      
0427   C3 AD 09               JP   blockend   
042A                A_:          
042A   C3 63 06               JP   a   
042D                C_:          
042D   C3 73 06               JP   c   
0430                D_:          
0430   C3 83 06               JP   d   
0433                E_:          
0433   C3 9D 06               JP   e   
0436                F_:          
0436   C3 A8 06               JP   f   
0439                G_:          
0439   C3 B3 06               JP   g   
043C                I_:          
043C   C3 C8 06               JP   i   
043F                K_:          
043F   C3 D8 06               JP   k   
0442                L_:          
0442   C3 E6 06               JP   l   
0445                M_:          
0445   C3 F6 06               JP   m   
0448                N_:          
0448   C3 06 07               JP   n   
044B                O_:          
044B   C3 11 07               JP   o   
044E                P_:          
044E   C3 21 07               JP   p   
0451                R_:          
0451   C3 2C 07               JP   r   
0454                S_:          
0454   C3 37 07               JP   s   
0457                U_:          
0457   C3 56 07               JP   u   
045A                W_:          
045A   C3 61 07               JP   w   
045D                X_:          
045D   C3 6C 07               JP   x   
0460                AND_:        
0460   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0461   E1                     POP   hl   
0462   7B                     LD   a,e   
0463   A5                     AND   l   
0464   6F                     LD   l,a   
0465   7A                     LD   a,d   
0466   A4                     AND   h   
0467                AND1:        
0467   67                     LD   h,a   
0468   E5                     PUSH   hl   
0469   C3 96 03               JP   next   
046C                OR_:         
046C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
046D   E1                     POP   hl   
046E   7B                     LD   a,e   
046F   B5                     OR   l   
0470   6F                     LD   l,a   
0471   7A                     LD   a,d   
0472   B4                     OR   h   
0473   18 F2                  JR   and1   
0475                XOR_:        
0475   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0476                XOR1:        
0476   E1                     POP   hl   
0477   7B                     LD   a,e   
0478   AD                     XOR   l   
0479   6F                     LD   l,a   
047A   7A                     LD   a,d   
047B   AC                     XOR   h   
047C   18 E9                  JR   and1   
047E                INV_:        ; Bitwise INVert the top member of the stack
047E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0481   18 F3                  JR   xor1   
0483                ADD_:        ; add the top 2 members of the stack
0483   D1                     POP   de   
0484   E1                     POP   hl   
0485   19                     ADD   hl,de   
0486   E5                     PUSH   hl   
0487   C3 96 03               JP   next   
048A                CALL_:       
048A   0A                     LD   a,(bc)   
048B   CD A4 08               CALL   lookupRef1   
048E   5E                     LD   e,(hl)   
048F   23                     INC   hl   
0490   56                     LD   d,(hl)   
0491   C3 53 09               JP   go1   
0494                HDOT_:       ; print hexadecimal
0494   E1                     POP   hl   
0495   CD 57 08               CALL   prthex   
0498   18 82                  JR   dot2   
049A                DROP_:       ; Discard the top member of the stack
049A   E1                     POP   hl   
049B   C3 96 03               JP   next   
049E                UNDROP_:      
049E   3B                     DEC   sp   
049F   3B                     DEC   sp   
04A0   C3 96 03               JP   next   
04A3                DUP_:        
04A3   E1                     POP   hl   ; Duplicate the top member of the stack
04A4   E5                     PUSH   hl   
04A5   E5                     PUSH   hl   
04A6   C3 96 03               JP   next   
04A9                ETX_:        
04A9   C3 00 03               JP   ETX   
04AC                EXIT_:       
04AC   C3 BE 09               JP   exit   
04AF                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04AF   E1                     POP   hl   
04B0                FETCH1:      
04B0   5E                     LD   e,(hl)   
04B1   23                     INC   hl   
04B2   56                     LD   d,(hl)   
04B3   D5                     PUSH   de   
04B4   C3 96 03               JP   next   
04B7                KEY_:        
04B7   CD 81 00               CALL   getchar   
04BA   26 00                  LD   h,0   
04BC   6F                     LD   l,a   
04BD   E5                     PUSH   hl   
04BE   C3 96 03               JP   next   
04C1   C3 7A 07     MUL_:     JP   mul   
04C4                NOP_:        
04C4   C3 96 03               JP   next   ; hardwire white space to always go to next (important for arrays)
04C7                OVER_:       
04C7   E1                     POP   hl   ; Duplicate 2nd element of the stack
04C8   D1                     POP   de   
04C9   D5                     PUSH   de   
04CA   E5                     PUSH   hl   
04CB   D5                     PUSH   de   ; and push it to top of stack
04CC   C3 96 03               JP   next   
04CF                ROT_:        ; a b c -- b c a
04CF   D1                     POP   de   ; a b    de = c
04D0   E1                     POP   hl   ; a       hl = b
04D1   E3                     EX   (sp),hl   ; b       hl = a
04D2   D5                     PUSH   de   ; b c
04D3   E5                     PUSH   hl   ; b c a
04D4   C3 96 03               JP   next   
04D7                             ;  Left shift { is multiply by 2		
04D7                SHL_:        
04D7   E1                     POP   hl   ; Duplicate the top member of the stack
04D8   29                     ADD   hl,hl   
04D9   E5                     PUSH   hl   ; shift left fallthrough into add_
04DA   C3 96 03               JP   next   
04DD                             ;  Right shift } is a divide by 2		
04DD                SHR_:        
04DD   E1                     POP   hl   ; Get the top member of the stack
04DE                SHR1:        
04DE   CB 3C                  SRL   h   
04E0   CB 1D                  RR   l   
04E2   E5                     PUSH   hl   
04E3   C3 96 03               JP   next   
04E6                STORE_:      ; Store the value at the address placed on the top of the stack
04E6   E1                     POP   hl   
04E7   D1                     POP   de   
04E8   73                     LD   (hl),e   
04E9   23                     INC   hl   
04EA   72                     LD   (hl),d   
04EB   C3 96 03               JP   next   
04EE                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04EE   E1                     POP   hl   
04EF   E3                     EX   (sp),hl   
04F0   E5                     PUSH   hl   
04F1   C3 96 03               JP   next   
04F4                NEG_:        
04F4   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04F7   D1                     POP   de   
04F8   18 02                  JR   sub2   ; use the SUBtract routine
04FA                SUB_:        ; Subtract the value 2nd on stack from top of stack
04FA   D1                     POP   de   
04FB   E1                     POP   hl   ; Entry point for INVert
04FC                SUB2:        
04FC   B7                     OR   a   ; Entry point for NEGate
04FD   ED 52                  SBC   hl,de   
04FF   E5                     PUSH   hl   
0500   C3 96 03               JP   next   
0503                EQ_:         
0503   E1                     POP   hl   
0504   D1                     POP   de   
0505   B7                     OR   a   ; reset the carry flag
0506   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0508   28 15                  JR   z,true_   
050A                FALSE_:      
050A   21 00 00               LD   hl,0   
050D   E5                     PUSH   hl   
050E   C3 96 03               JP   next   
0511                GT_:         
0511   D1                     POP   de   
0512   E1                     POP   hl   
0513   18 02                  JR   lt1   
0515                LT_:         
0515   E1                     POP   hl   
0516   D1                     POP   de   
0517                LT1:         
0517   B7                     OR   a   ; reset the carry flag
0518   ED 52                  SBC   hl,de   
051A   28 EE                  JR   z,false_   
051C   FA 0A 05               JP   m,false_   
051F                TRUE_:       
051F   21 01 00               LD   hl,1   
0522   E5                     PUSH   hl   
0523   C3 96 03               JP   next   
0526                GTE_:        
0526   D1                     POP   de   
0527   E1                     POP   hl   
0528   18 02                  JR   lte1   
052A                LTE_:        
052A   E1                     POP   hl   
052B   D1                     POP   de   
052C                LTE1:        
052C   B7                     OR   a   ; reset the carry flag
052D   ED 52                  SBC   hl,de   
052F   FA 0A 05               JP   m,false_   
0532   C3 01 00               JP   true   
0535                VAR_:        
0535   0A                     LD   a,(bc)   
0536   CD AA 08               CALL   lookupRef2   
0539   E5                     PUSH   hl   
053A   C3 96 03               JP   next   
053D                DIV_:        
053D   18 04                  JR   div   
053F                             ;*******************************************************************
053F                             ; Page 5 primitive routines
053F                             ;*******************************************************************
053F                             ;falls through
053F   E5                     PUSH   hl   
0540   C3 96 03               JP   next   
0543                             ; ********************************************************************
0543                             ; 16-bit division subroutine.
0543                             ; 
0543                             ; bc: divisor, de: dividend, hl: remainder
0543                             ; *********************************************************************
0543                             ; This divides de by bc, storing the result in de, remainder in hl
0543                             ; *********************************************************************
0543                             ; 1382 cycles
0543                             ; 35 bytes (reduced from 48)
0543                             ; 
0543                DIV:         ;=34
0543   D1                     POP   de   ; get first value
0544   E1                     POP   hl   ; get 2nd value
0545   C5                     PUSH   bc   ; Preserve the IP
0546   44                     LD   b,h   ; bc = 2nd value
0547   4D                     LD   c,l   
0548                             ; 
0548   21 00 00               LD   hl,0   ; Zero the remainder
054B   3E 10                  LD   a,16   ; Loop counter
054D                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
054D   CB 21                  SLA   c   
054F   CB 10                  RL   b   
0551   ED 6A                  ADC   hl,hl   
0553   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0555   38 03                  JR   c,div2   
0557   0C                     INC   c   
0558   18 01                  JR   div3   
055A                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
055A   19                     ADD   hl,de   
055B                DIV3:        
055B   3D                     DEC   a   
055C   20 EF                  JR   nz,div1   
055E   50                     LD   d,b   ; Result from bc to de
055F   59                     LD   e,c   
0560                DIV4:        
0560   C1                     POP   bc   ; Restore the IP
0561   D5                     PUSH   de   ; push Result
0562   E5                     PUSH   hl   ; push remainder
0563   C3 96 03               JP   next   
0566                             ;=57
0566                             ; **************************************************************************
0566                             ; Page 6 Alt primitives
0566                             ; **************************************************************************
0566                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 96 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 96 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 96 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 96 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 96 03               JP   next   
0623                EXEC_:       
0623   CD 29 06               CALL   exec1   
0626   C3 96 03               JP   next   
0629                EXEC1:       
0629   E1                     POP   hl   
062A   E3                     EX   (sp),hl   
062B   E9                     JP   (hl)   
062C                PROMPT_:      
062C   CD 97 07               CALL   prompt   
062F   C3 96 03               JP   next   
0632                INPORT_:      ; \<
0632   E1                     POP   hl   
0633   79                     LD   a,c   
0634   4D                     LD   c,l   
0635   ED 68                  IN   l,(c)   
0637   26 00                  LD   h,0   
0639   4F                     LD   c,a   
063A   E5                     PUSH   hl   
063B   C3 96 03               JP   next   
063E                NEWLN_:      
063E   CD BF 07               CALL   crlf   
0641   C3 96 03               JP   next   
0644                OUTPORT_:      
0644   E1                     POP   hl   
0645   59                     LD   e,c   
0646   4D                     LD   c,l   
0647   E1                     POP   hl   
0648   ED 69                  OUT   (c),l   
064A   4B                     LD   c,e   
064B   C3 96 03               JP   next   
064E                PRTSTR_:      
064E                PRTSTR:      
064E   E1                     POP   hl   
064F   CD A4 07               CALL   putStr   
0652   C3 96 03               JP   next   
0655                RPUSH_:      
0655   E1                     POP   hl   
0656   CD A9 07               CALL   rpush   
0659   C3 96 03               JP   next   
065C                RPOP_:       
065C   CD B4 07               CALL   rpop   
065F   E5                     PUSH   hl   
0660   C3 96 03               JP   next   
0663                             ; **************************************************************************
0663                             ; Page 6 primitive routines continued  (page 7)
0663                             ; **************************************************************************
0663                             ; falls through to following page
0663                A:           
0663   03                     INC   bc   
0664   0A                     LD   a,(bc)   
0665   FE 64                  CP   "d"   
0667   CA 83 04               JP   z,add_   
066A   FE 6E                  CP   "n"   
066C   CA 60 04               JP   z,and_   
066F   0B                     DEC   bc   
0670   C3 35 05               JP   var_   
0673                C:           
0673   03                     INC   bc   
0674   0A                     LD   a,(bc)   
0675   FE 61                  CP   "a"   
0677   CA 77 07               JP   z,case_   
067A   FE 6C                  CP   "l"   
067C   CA 77 07               JP   z,closure_   
067F   0B                     DEC   bc   
0680   C3 35 05               JP   var_   
0683                D:           
0683   03                     INC   bc   
0684   0A                     LD   a,(bc)   
0685   FE 65                  CP   "e"   
0687   CA 77 07               JP   z,def_   
068A   FE 69                  CP   "i"   
068C   CA 3D 05               JP   z,div_   
068F   FE 72                  CP   "r"   
0691   CA 9A 04               JP   z,drop_   
0694   FE 75                  CP   "u"   
0696   CA A3 04               JP   z,dup_   
0699   0B                     DEC   bc   
069A   C3 35 05               JP   var_   
069D                E:           
069D   03                     INC   bc   
069E   0A                     LD   a,(bc)   
069F   FE 71                  CP   "q"   
06A1   CA 03 05               JP   z,eq_   
06A4   0B                     DEC   bc   
06A5   C3 35 05               JP   var_   
06A8                F:           
06A8   03                     INC   bc   
06A9   0A                     LD   a,(bc)   
06AA   FE 69                  CP   "i"   
06AC   CA 77 07               JP   z,filter_   
06AF   0B                     DEC   bc   
06B0   C3 35 05               JP   var_   
06B3                G:           
06B3   03                     INC   bc   
06B4   0A                     LD   a,(bc)   
06B5   FE 65                  CP   "e"   
06B7   CA 77 07               JP   z,get_   
06BA   FE 6F                  CP   "o"   
06BC   CA 12 04               JP   z,go_   
06BF   FE 74                  CP   "t"   
06C1   CA 11 05               JP   z,gt_   
06C4   0B                     DEC   bc   
06C5   C3 35 05               JP   var_   
06C8                I:           
06C8   03                     INC   bc   
06C9   0A                     LD   a,(bc)   
06CA   FE 66                  CP   "f"   
06CC   CA 77 07               JP   z,if_   
06CF   FE 6E                  CP   "n"   
06D1   CA 7E 04               JP   z,inv_   
06D4   0B                     DEC   bc   
06D5   C3 35 05               JP   var_   
06D8                K:           
06D8   C3 6C 07               JP   x   
06DB   03                     INC   bc   
06DC   0A                     LD   a,(bc)   
06DD   FE 65                  CP   "e"   
06DF   CA B7 04               JP   z,key_   
06E2   0B                     DEC   bc   
06E3   C3 35 05               JP   var_   
06E6                L:           
06E6   03                     INC   bc   
06E7   0A                     LD   a,(bc)   
06E8   FE 65                  CP   "e"   
06EA   CA 77 07               JP   z,let_   
06ED   FE 74                  CP   "t"   
06EF   CA 15 05               JP   z,lt_   
06F2   0B                     DEC   bc   
06F3   C3 35 05               JP   var_   
06F6                M:           
06F6   03                     INC   bc   
06F7   0A                     LD   a,(bc)   
06F8   FE 61                  CP   "a"   
06FA   CA 77 07               JP   z,map_   
06FD   FE 75                  CP   "u"   
06FF   CA C1 04               JP   z,mul_   
0702   0B                     DEC   bc   
0703   C3 35 05               JP   var_   
0706                N:           
0706   03                     INC   bc   
0707   0A                     LD   a,(bc)   
0708   FE 65                  CP   "e"   
070A   CA F4 04               JP   z,neg_   
070D   0B                     DEC   bc   
070E   C3 35 05               JP   var_   
0711                O:           
0711   03                     INC   bc   
0712   0A                     LD   a,(bc)   
0713   FE 76                  CP   "v"   
0715   CA C7 04               JP   z,over_   
0718   FE 72                  CP   "r"   
071A   CA 6C 04               JP   z,or_   
071D   0B                     DEC   bc   
071E   C3 35 05               JP   var_   
0721                P:           
0721   03                     INC   bc   
0722   0A                     LD   a,(bc)   
0723   FE 72                  CP   "r"   
0725   CA 77 07               JP   z,print_   
0728   0B                     DEC   bc   
0729   C3 35 05               JP   var_   
072C                R:           
072C   03                     INC   bc   
072D   0A                     LD   a,(bc)   
072E   FE 6F                  CP   "o"   
0730   CA CF 04               JP   z,rot_   
0733   0B                     DEC   bc   
0734   C3 35 05               JP   var_   
0737                S:           
0737   03                     INC   bc   
0738   0A                     LD   a,(bc)   
0739   FE 63                  CP   "c"   
073B   CA 77 07               JP   z,scan_   
073E   FE 65                  CP   "e"   
0740   CA 77 07               JP   z,set_   
0743   FE 68                  CP   "h"   
0745   CA 77 07               JP   z,shift_   
0748   FE 75                  CP   "u"   
074A   CA FA 04               JP   z,sub_   
074D   FE 77                  CP   "w"   
074F   CA EE 04               JP   z,swap_   
0752   0B                     DEC   bc   
0753   C3 35 05               JP   var_   
0756                U:           
0756   03                     INC   bc   
0757   0A                     LD   a,(bc)   
0758   FE 6E                  CP   "n"   
075A   CA 9E 04               JP   z,undrop_   
075D   0B                     DEC   bc   
075E   C3 35 05               JP   var_   
0761                W:           
0761   03                     INC   bc   
0762   0A                     LD   a,(bc)   
0763   FE 68                  CP   "h"   
0765   CA 77 07               JP   z,while_   
0768   0B                     DEC   bc   
0769   C3 35 05               JP   var_   
076C                X:           
076C   03                     INC   bc   
076D   0A                     LD   a,(bc)   
076E   FE 78                  CP   "x"   
0770   CA 75 04               JP   z,xor_   
0773   0B                     DEC   bc   
0774   C3 35 05               JP   var_   
0777                CASE_:       
0777                CLOSURE_:      
0777                DEF_:        
0777                FILTER_:      
0777                GET_:        
0777                IF_:         
0777                LET_:        
0777                MAP_:        
0777                PRINT_:      
0777                SCAN_:       
0777                SET_:        
0777                SHIFT_:      
0777                WHILE_:      
0777   C3 96 03               JP   next   
077A                             ;*******************************************************************
077A                             ; Page 5 primitive routines continued
077A                             ;*******************************************************************
077A                             ; ********************************************************************
077A                             ; 16-bit multiply
077A                MUL:         ;=19
077A   D1                     POP   de   ; get first value
077B   E1                     POP   hl   
077C   C5                     PUSH   bc   ; Preserve the IP
077D   44                     LD   b,h   ; bc = 2nd value
077E   4D                     LD   c,l   
077F   21 00 00               LD   hl,0   
0782   3E 10                  LD   a,16   
0784                MUL2:        
0784   29                     ADD   hl,hl   
0785   CB 13                  RL   e   
0787   CB 12                  RL   d   
0789   30 04                  JR   nc,$+6   
078B   09                     ADD   hl,bc   
078C   30 01                  JR   nc,$+3   
078E   13                     INC   de   
078F   3D                     DEC   a   
0790   20 F2                  JR   nz,mul2   
0792   C1                     POP   bc   ; Restore the IP
0793   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0794   C3 96 03               JP   next   
0797                             ;*******************************************************************
0797                             ; Subroutines
0797                             ;*******************************************************************
0797                PROMPT:      
0797   CD 97 08               CALL   printStr   
079A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
079F   C9                     RET      
07A0                PUTSTR0:      
07A0   CD 85 00               CALL   putchar   
07A3   23                     INC   hl   
07A4                PUTSTR:      
07A4   7E                     LD   a,(hl)   
07A5   B7                     OR   a   
07A6   20 F8                  JR   nz,putStr0   
07A8   C9                     RET      
07A9                RPUSH:       
07A9   DD 2B                  DEC   ix   
07AB   DD 74 00               LD   (ix+0),h   
07AE   DD 2B                  DEC   ix   
07B0   DD 75 00               LD   (ix+0),l   
07B3   C9                     RET      
07B4                RPOP:        
07B4   DD 6E 00               LD   l,(ix+0)   
07B7   DD 23                  INC   ix   
07B9   DD 66 00               LD   h,(ix+0)   
07BC   DD 23                  INC   ix   
07BE                RPOP2:       
07BE   C9                     RET      
07BF                CRLF:        
07BF   CD 97 08               CALL   printStr   
07C2   0D 0A 00               .CSTR   "\r\n"   
07C5   C9                     RET      
07C6                             ;*******************************************************************
07C6                             ;*******************************************************************
07C6                NUM:         
07C6   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C9   0A                     LD   a,(bc)   ; Get numeral or -
07CA   FE 2D                  CP   "-"   
07CC   20 01                  JR   nz,num0   
07CE   03                     INC   bc   ; no flags are affected
07CF                NUM0:        
07CF   08                     EX   af,af'   ; save zero flag = 0 for later
07D0                NUM1:        
07D0   0A                     LD   a,(bc)   
07D1   D6 30                  SUB   30h   
07D3   38 0E                  JR   c,num2   ; not a number, exit loop
07D5   03                     INC   bc   
07D6   54                     LD   d,h   
07D7   5D                     LD   e,l   
07D8   29                     ADD   hl,hl   
07D9   29                     ADD   hl,hl   
07DA   19                     ADD   hl,de   
07DB   29                     ADD   hl,hl   
07DC   85                     ADD   a,l   
07DD   6F                     LD   l,a   
07DE   30 F0                  JR   nc,num1   
07E0   24                     INC   h   
07E1   18 ED                  JR   num1   
07E3                NUM2:        
07E3   0B                     DEC   bc   
07E4   08                     EX   af,af'   ; restore zero flag
07E5   20 07                  JR   nz,num3   
07E7   EB                     EX   de,hl   ; negate the value of hl
07E8   21 00 00               LD   hl,0   
07EB   B7                     OR   a   ; jump to sub2
07EC   ED 52                  SBC   hl,de   
07EE                NUM3:        
07EE   E5                     PUSH   hl   ; Put the number on the stack
07EF   C3 96 03               JP   next   ; and process the next character
07F2                HEXNUM:      ; 
07F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
07F5                HEXNUM1:      
07F5   03                     INC   bc   
07F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
07F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
07F9   28 02                  JR   z,hexnum2   ; no a decimal
07FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
07FD                HEXNUM2:      
07FD   D6 30                  SUB   $30   ; Form decimal digit
07FF   DA E3 07               JP   c,num2   
0802   FE 10                  CP   $0F+1   
0804   D2 E3 07               JP   nc,num2   
0807   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0808   29                     ADD   hl,hl   ; 4X
0809   29                     ADD   hl,hl   ; 8X
080A   29                     ADD   hl,hl   ; 16X
080B   85                     ADD   a,l   ; add into bottom of hl
080C   6F                     LD   l,a   ; 
080D   18 E6                  JR   hexnum1   
080F                PRTDEC:      ;=34 ; removes leading zeros
080F                             ; ld a,h
080F                             ; or l
080F                             ; ld a, "0"
080F                             ; jp z, putchar
080F   CB 7C                  BIT   7,h   
0811   28 0B                  JR   z,prtdec0   
0813   3E 2D                  LD   a,"-"   
0815   CD 85 00               CALL   putchar   
0818   AF                     XOR   a   
0819   95                     SUB   l   
081A   6F                     LD   l,a   
081B   9F                     SBC   a,a   
081C   94                     SUB   h   
081D   67                     LD   h,a   
081E                PRTDEC0:      
081E   C5                     PUSH   bc   
081F   0E 00                  LD   c,0   ; leading zeros flag = false
0821   11 F0 D8               LD   de,-10000   
0824   CD 40 08               CALL   prtdec1   
0827   11 18 FC               LD   de,-1000   
082A   CD 40 08               CALL   prtdec1   
082D   11 9C FF               LD   de,-100   
0830   CD 40 08               CALL   prtdec1   
0833   1E F6                  LD   e,-10   
0835   CD 40 08               CALL   prtdec1   
0838   0C                     INC   c   ; flag = true for at least digit
0839   1E FF                  LD   e,-1   
083B   CD 40 08               CALL   prtdec1   
083E   C1                     POP   bc   
083F   C9                     RET      
0840                PRTDEC1:      
0840   06 2F                  LD   b,"0"-1   
0842                PRTDEC2:      
0842   04                     INC   b   
0843   19                     ADD   hl,de   
0844   38 FC                  JR   c,prtdec2   
0846   ED 52                  SBC   hl,de   
0848   3E 30                  LD   a,"0"   
084A   B8                     CP   b   
084B   20 05                  JR   nz,prtdec3   
084D   AF                     XOR   a   
084E   B1                     OR   c   
084F   C8                     RET   z   
0850   18 01                  JR   prtdec4   
0852                PRTDEC3:      
0852   0C                     INC   c   
0853                PRTDEC4:      
0853   78                     LD   a,b   
0854   C3 85 00               JP   putchar   
0857                             ; 
0857                PRTHEX:      
0857                             ; Display hl as a 16-bit number in hex.
0857   C5                     PUSH   bc   ; preserve the IP
0858   7C                     LD   a,h   
0859   CD 62 08               CALL   prthex2   
085C   7D                     LD   a,l   
085D   CD 62 08               CALL   prthex2   
0860   C1                     POP   bc   
0861   C9                     RET      
0862                PRTHEX2:      
0862   4F                     LD   c,a   
0863   1F                     RRA      
0864   1F                     RRA      
0865   1F                     RRA      
0866   1F                     RRA      
0867   CD 6B 08               CALL   prthex3   
086A   79                     LD   a,c   
086B                PRTHEX3:      
086B   E6 0F                  AND   0x0F   
086D   C6 90                  ADD   a,0x90   
086F   27                     DAA      
0870   CE 40                  ADC   a,0x40   
0872   27                     DAA      
0873   C3 85 00               JP   putchar   
0876                INIT:        
0876   FD 21 00 1A            LD   iy,DSTACK   
087A   DD 21 80 19            LD   ix,RSTACK   
087E   21 80 01               LD   hl,ialtVars   
0881   11 80 1B               LD   de,altVars   
0884   01 10 00               LD   bc,8 * 2   
0887   ED B0                  LDIR      
0889   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
088C   54 5D                  LD   de,hl   
088E   13                     INC   de   
088F   36 00                  LD   (hl),0   
0891   01 68 00               LD   bc,DATASIZE   
0894   ED B0                  LDIR      
0896   C9                     RET      
0897                PRINTSTR:      
0897   E3                     EX   (sp),hl   ; swap			
0898   CD A4 07               CALL   putStr   
089B   23                     INC   hl   ; inc past null
089C   E3                     EX   (sp),hl   ; put it back	
089D   C9                     RET      
089E                LOOKUPREF:      
089E   16 00                  LD   d,0   
08A0                LOOKUPREF0:      
08A0   FE 61                  CP   "a"   
08A2   30 06                  JR   nc,lookupRef2   
08A4                LOOKUPREF1:      
08A4   D6 61                  SUB   "a"   
08A6   1E 00                  LD   e,0   
08A8   18 04                  JR   lookupRef3   
08AA                LOOKUPREF2:      
08AA   D6 61                  SUB   "a"   
08AC   1E 34                  LD   e,26*2   
08AE                LOOKUPREF3:      
08AE   87                     ADD   a,a   
08AF   83                     ADD   a,e   
08B0   21 C0 1B               LD   hl,DATA   
08B3   85                     ADD   a,l   
08B4   6F                     LD   l,a   
08B5   3E 00                  LD   a,0   
08B7   8C                     ADC   a,h   
08B8   67                     LD   h,a   
08B9   AF                     XOR   a   
08BA   B3                     OR   e   ; sets z flag if a-z
08BB   C9                     RET      
08BC                             ; **************************************************************************
08BC                             ; calculate nesting value
08BC                             ; a is char to be tested,
08BC                             ; e is the nesting value (initially 0)
08BC                             ; e is increased by ( and [
08BC                             ; e is decreased by ) and ]
08BC                             ; e has its bit 7 toggled by `
08BC                             ; limited to 127 levels
08BC                             ; **************************************************************************
08BC                NESTING:      
08BC   FE 22                  CP   $22   ; quote char
08BE   20 0A                  JR   nz,nesting1   
08C0   CB 7B                  BIT   7,e   
08C2   28 03                  JR   z,nesting1a   
08C4   CB BB                  RES   7,e   
08C6   C9                     RET      
08C7                NESTING1A:      
08C7   CB FB                  SET   7,e   
08C9   C9                     RET      
08CA                NESTING1:      
08CA   CB 7B                  BIT   7,e   
08CC   C0                     RET   nz   
08CD   FE 7B                  CP   "{"   
08CF   28 08                  JR   z,nesting2   
08D1   FE 5B                  CP   "["   
08D3   28 04                  JR   z,nesting2   
08D5   FE 28                  CP   "("   
08D7   20 02                  JR   nz,nesting3   
08D9                NESTING2:      
08D9   1C                     INC   e   
08DA   C9                     RET      
08DB                NESTING3:      
08DB   FE 7D                  CP   "}"   
08DD   28 07                  JR   z,nesting4   
08DF   FE 5D                  CP   "]"   
08E1   28 03                  JR   z,nesting4   
08E3   FE 29                  CP   ")"   
08E5   C0                     RET   nz   
08E6                NESTING4:      
08E6   1D                     DEC   e   
08E7   C9                     RET      
08E8                             ; contains
08E8                             ; search string for e
08E8                             ; set zero flag if true
08E8                CONTAINS:      
08E8   E1                     POP   hl   ; hl = address of string
08E9   E5                     PUSH   hl   ; save copy of hl
08EA   7E                     LD   a,(hl)   ; a = length
08EB   3C                     INC   a   ; add length + 1 to string address
08EC   85                     ADD   a,l   
08ED   6F                     LD   l,a   
08EE   3E 00                  LD   a,0   
08F0   8C                     ADC   a,h   
08F1   67                     LD   h,a   
08F2   E3                     EX   (sp),hl   ; hl = start of string (sp) = address after string
08F3   C5                     PUSH   bc   ; save IP
08F4   46                     LD   b,(hl)   ; length of string
08F5   23                     INC   hl   
08F6                CONTAINS1:      
08F6   7E                     LD   a,(hl)   
08F7   BB                     CP   e   
08F8   28 04                  JR   z,contains3   
08FA   23                     INC   hl   
08FB   10 F9                  DJNZ   contains1   
08FD   04                     INC   b   ; z =0
08FE                CONTAINS3:      
08FE   C1                     POP   bc   ; restore bc
08FF   C9                     RET      ; jump to address after string
0900                             ; 
0900                ARG:         
0900   03                     INC   bc   ; get next char
0901   0A                     LD   a,(bc)   
0902   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0904   E6 07                  AND   $07   ; mask
0906   87                     ADD   a,a   ; double
0907   6F                     LD   l,a   
0908   26 00                  LD   h,0   
090A   FD 5D                  LD   e,iyl   
090C   FD 54                  LD   d,iyh   
090E   EB                     EX   de,hl   
090F   B7                     OR   a   
0910   ED 52                  SBC   hl,de   
0912   2B                     DEC   hl   
0913   56                     LD   d,(hl)   
0914   2B                     DEC   hl   
0915   5E                     LD   e,(hl)   
0916   D5                     PUSH   de   
0917   C3 96 03               JP   next   
091A                             ; 
091A                STRDEF:      
091A   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
091E   D5                     PUSH   de   ; save start of string
091F   03                     INC   bc   ; point to next char
0920   18 03                  JR   strDef2   
0922                STRDEF1:      
0922   12                     LD   (de),a   
0923   13                     INC   de   ; increase count
0924   03                     INC   bc   ; point to next char
0925                STRDEF2:      
0925   0A                     LD   a,(bc)   
0926   FE 27                  CP   "'"   ; ' is the string terminator
0928   20 F8                  JR   nz,strDef1   
092A   AF                     XOR   a   ; write null to terminate string
092B   12                     LD   (de),a   
092C   13                     INC   de   
092D   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0931   C3 96 03               JP   next   
0934                NEWADD2:      
0934   C5                     PUSH   bc   ; push IP
0935   FD 56 FF               LD   d,(iy-1)   
0938   FD 5E FE               LD   e,(iy-2)   
093B   FD 66 FD               LD   h,(iy-3)   
093E   FD 6E FC               LD   l,(iy-4)   
0941   FD E5                  PUSH   iy   ; push base pointer
0943   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
0947   FD 39                  ADD   iy,sp   
0949   19                     ADD   hl,de   ; hl = hl + de
094A   EB                     EX   de,hl   ; de = result
094B   E1                     POP   hl   ; hl = old BP
094C   C1                     POP   bc   ; bc = IP
094D   F9                     LD   sp,hl   ; sp = old BP
094E   D5                     PUSH   de   ; push result
094F   C3 96 03               JP   next   
0952                GO:          ; execute Siena lambda at pointer
0952   D1                     POP   de   ; de = pointer to lambda
0953                GO1:         
0953   7A                     LD   a,d   ; skip if destination address is null
0954   B3                     OR   e   
0955   28 0C                  JR   z,go2   
0957   C5                     PUSH   bc   ; save IP
0958   FD E5                  PUSH   iy   ; push base pointer
095A   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
095E   FD 39                  ADD   iy,sp   
0960   42 4B                  LD   bc,de   ; IP = pointer to lambda
0962   0B                     DEC   bc   ; dec to prepare for next routine
0963                GO2:         
0963   C3 96 03               JP   next   
0966                LAMBDA:      
0966   03                     INC   bc   
0967   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; start of lambda defintion
096B   D5                     PUSH   de   
096C                LAMBDA1:      ; Skip to end of definition
096C   0A                     LD   a,(bc)   ; Get the next character
096D   03                     INC   bc   ; Point to next character
096E   12                     LD   (de),a   
096F   13                     INC   de   
0970   FE 7D                  CP   "}"   ; Is it the end of the definition?
0972   20 F8                  JR   nz,lambda1   ; get the next element
0974   0B                     DEC   bc   
0975   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0979   C3 96 03               JP   next   
097C                RETURN:      
097C   E1                     POP   hl   ; hl = last result
097D   FD 54                  LD   d,iyh   ; de = BP
097F   FD 5D                  LD   e,iyl   
0981   EB                     EX   de,hl   ; hl = BP, de = result
0982   F9                     LD   sp,hl   ; sp = BP
0983   E1                     POP   hl   ; hl = old BP
0984   C1                     POP   bc   ; bc = IP
0985   F9                     LD   sp,hl   ; sp = old BP
0986   D5                     PUSH   de   ; push result
0987   C3 96 03               JP   next   
098A                BLOCK:       
098A   03                     INC   bc   
098B   C5                     PUSH   bc   ; return first opcode of block
098C   16 01                  LD   d,1   ; nesting: count first parenthesis
098E                BLOCK1:      ; Skip to end of definition
098E   0A                     LD   a,(bc)   ; Get the next character
098F   03                     INC   bc   ; Point to next character
0990   5F                     LD   e,a   
0991   CD E8 08               CALL   contains   
0994   09 22 27 60 7B 7D 28 29 5B 5D .PSTR   $22,"'`{}()[]"   
099E   20 01                  JR   nz,block2   
09A0   14                     INC   d   
09A1                BLOCK2:      
09A1   FE 29                  CP   ")"   
09A3   20 E9                  JR   nz,block1   
09A5   CB 42                  BIT   0,d   
09A7   20 E5                  JR   nz,block1   ; get the next element
09A9   0B                     DEC   bc   
09AA   C3 96 03               JP   next   
09AD                BLOCKEND:      
09AD   E1                     POP   hl   ; hl = last result
09AE   FD 54                  LD   d,iyh   ; de = BP
09B0   FD 5D                  LD   e,iyl   
09B2   EB                     EX   de,hl   ; hl = BP, de = result
09B3   F9                     LD   sp,hl   ; sp = BP
09B4   E1                     POP   hl   ; hl = old BP
09B5   C1                     POP   bc   ; bc = IP
09B6   F9                     LD   sp,hl   ; sp = old BP
09B7   D5                     PUSH   de   ; push result
09B8   C3 96 03               JP   next   
09BB                ENTER:       
09BB   C3 52 09               JP   go   
09BE                EXIT:        
09BE   50 59                  LD   de,bc   ; address of code after exit opcode
09C0   13                     INC   de   
09C1   D9                     EXX      
09C2   C1                     POP   bc   ; bc = last result
09C3   FD 54                  LD   d,iyh   ; de = BP
09C5   FD 5D                  LD   e,iyl   
09C7   EB                     EX   de,hl   ; hl = BP, de = result
09C8   F9                     LD   sp,hl   ; sp = BP
09C9   D9                     EXX      
09CA   E1                     POP   hl   ; hl = old BP
09CB   C1                     POP   bc   ; bc = IP
09CC   F9                     LD   sp,hl   ; sp = old BP
09CD   D9                     EXX      
09CE   C5                     PUSH   bc   ; push result
09CF   D9                     EXX      
09D0   EB                     EX   de,hl   
09D1   E9                     JP   (hl)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                             ; 
4000                          .ORG   $4000   
4000                             ; 
4000                TESTSSTART:      
4000                             ; 
4000   1E 5D                  LD   e,"]"   
4002   CD E8 08               CALL   contains   
4005   09 22 27 60 7B 7D 28 29 5B 5D .PSTR   $22,"'`{}()[]"   
400F   28 01                  JR   z,found   
4011   76                     HALT      
4012                FOUND:       
4012   76                     HALT      
4013                             ; 
4013                             ; test "1", 1
4013                          ;*Macro unroll:  test "{1}go", 1
4013   31 00 1A               LD   SP,DSTACK   
4016   CD 76 08               CALL   init   
4019   CD BB 09               CALL   enter   
401C   7B 31 7D 67 6F 00      .CSTR   "{1}go"   
4022                          ;*Macro unroll:  expect "{1}go",1
4022   E1                     POP   HL   
4023   E5                     PUSH   HL   
4024   11 01 00               LD   DE,1   
4027   B7                     OR   A   
4028   ED 52                  SBC   HL,DE   
402A   7D                     LD   A,L   
402B   B4                     OR   H   
402C   28 2E                  JR   Z,expectM_0_2034S31   
402E   CD 4E 06               CALL   prtstr   
4031   7B 31 7D 67 6F 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "{1}go","\r\nActual: "   
4041   CD 0F 08               CALL   prtdec   
4044   CD 4E 06               CALL   prtstr   
4047   0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\nExpected: "   
4054   21 01 00               LD   HL,1   
4057   CD 0F 08               CALL   prtdec   
405A   76                     HALT      
405B   00                     .CSTR      
405C                EXPECTM_0_2034S31:      
405C   E1                     POP   HL   
405D                             ; test "1 2 +", 3
405D                             ; 
405D                             ; test "'A' @", 65
405D                             ; test "10 $1", 10
405D                             ; test "10 20 $1", 10
405D                             ; test "10 20 $2", 20
405D                             ; test "10 20 30 $3", 30
405D                             ; 
405D                             ; test "1", 1
405D                             ; test "0", 0
405D                             ; test "10", 10
405D                             ; test "123", 123
405D                             ; test "$10", $10
405D                             ; test "$FF", $FF
405D                             ; test "2 3 =", 0
405D                             ; test "3 3 =", 1
405D                             ; test "2 3 <", 1
405D                             ; test "3 3 <", 0
405D                             ; test "3 3 >", 0
405D                             ; test "4 3 >", 1
405D                             ; test "1 2 +", 3
405D                             ; test "123 456 +", 123+456
405D                             ; test "64 128 +", 64+128
405D                             ; test "5 3 -", 2
405D                             ; test "3 5 &", 1
405D                             ; test "3 5 |", 7
405D                             ; test "2 3 *", 6
405D                             ; test "1 2 3 + *", 5
405D                             ; 
405D                             ; ; test "1 2 3 ' +", 3
405D                             ; ; test "1_ 2 +",1
405D                             ; ; test "1_ 1 +",0
405D                             ; ; call enter
405D                             ; ;     .cstr "1 3",$22,"+"
405D                             ; ; expect "1 3 DUP +", 6
405D                             ; 
405D                             ; ; test "5 2/'", 2
405D                             ; ; test "3 5$ -", 2
405D                             ; ; test "5 2/$ '", 1
405D                             ; ; test "2 3%++", 7
405D                             ; ; test "1 2 3~''", 2
405D                             ; ; test "1 2 3~+*", 8
405D                             ; ; test "2a!a@",2
405D                             ; ; test "3x! 1 x@+x! x@", 4
405D                             ; ; test "3x! 1_ x@+x! x@", 2
405D                             ; 
405D                             ; 
405D                             ; 
405D                             ; ; test "1{", 2
405D                             ; ; test "1}", 0
405D                             ; ; test "2}", 1
405D                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
405D                             ; ; test "(2) \\^", 2
405D                             ; ; test ":X1; X", 1
405D                             ; ; test ":A100;A", 100
405D                             ; ; test ":Aa!; 3A a@", 3
405D                             ; ; test ":Aa!;:Ba@;4AB", 4
405D                             ; ; test "[]$ '", 0
405D                             ; ; test "[3]$ '", 1
405D                             ; ; test "[3]'@", 3
405D                             ; ; test "[1 2 3]'@", 1
405D                             ; ; test "[1 2 3]'2+@", 2
405D                             ; ; test "\\h@[1]''\\h@$-", 2
405D                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
405D                             ; ; test "\\[]$ '", 0
405D                             ; ; test "\\[3]'\\@", 3
405D                             ; ; test "\\[3]$ '", 1
405D                             ; ; test "\\[1 2 3]'\\@", 1
405D                             ; ; test "\\[1 2 3]'1+\\@", 2
405D                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
405D                             ; ; test "\\h@\\[1]''\\h@$-", 1
405D                             ; ; test "\\`A`\\@",65
405D                             ; ; test "0 0(1+)", 0
405D                             ; ; test "0 1(1+)", 1
405D                             ; ; test "0 2(1+)", 2
405D                             ; ; test "0 1(0(1+))", 0
405D                             ; ; test "0 1(1(1+))", 1
405D                             ; ; test "0 2(1(1+))", 2
405D                             ; ; test "0 2(2(1+))", 4
405D                             ; ; test "0 1(\\i@+)", 0
405D                             ; ; test "0 2(\\i@+)", 1
405D                             ; ; test "0 3(\\i@+)", 3
405D                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
405D                             ; ; test "0t! 10(1 t@+t!) t@",10
405D                             ; ; test "0(100)(200)",200
405D                             ; ; test "1(100)(200)",100
405D                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
405D                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
405D                             ; ; test ":X10;\\0X", 10
405D                             ; ; test "2 \\1x! \\1x@", 2
405D                             ; 
405D   CD 97 08               CALL   printStr   
4060   44 6F 6E 65 21 00      .CSTR   "Done!"   
4066   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 348 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1199 IN Siena.asm
                    > USED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
ETX:                0300 DEFINED AT LINE 308 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
ETX1:               0309 DEFINED AT LINE 313 IN Siena.asm
                    > USED AT LINE 311 IN Siena.asm
START:              030B DEFINED AT LINE 316 IN Siena.asm
INTERPRET:          0321 DEFINED AT LINE 322 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
INTERPRET2:         032B DEFINED AT LINE 328 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
INTERPRET3:         0333 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
INTERPRET4:         0339 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 333 IN Siena.asm
WAITCHAR:           033E DEFINED AT LINE 347 IN Siena.asm
                    > USED AT LINE 380 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
MACRO:              034D DEFINED AT LINE 356 IN Siena.asm
MACRO1:             0364 DEFINED AT LINE 369 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
WAITCHAR1:          036A DEFINED AT LINE 373 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
WAITCHAR3:          0378 DEFINED AT LINE 382 IN Siena.asm
                    > USED AT LINE 354 IN Siena.asm
WAITCHAR4:          038E DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
NEXT:               0396 DEFINED AT LINE 425 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 516 IN Siena.asm
                    > USED AT LINE 549 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
                    > USED AT LINE 604 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
                    > USED AT LINE 621 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 637 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
                    > USED AT LINE 665 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
                    > USED AT LINE 727 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
                    > USED AT LINE 784 IN Siena.asm
                    > USED AT LINE 791 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
                    > USED AT LINE 811 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 823 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
                    > USED AT LINE 864 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 438 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 440 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 442 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 444 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 446 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 448 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 450 IN Siena.asm
GO_:                0412 DEFINED AT LINE 452 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
RETURN_:            0415 DEFINED AT LINE 454 IN Siena.asm
DOT_:               0418 DEFINED AT LINE 457 IN Siena.asm
DOT2:               041C DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
BLOCK_:             0424 DEFINED AT LINE 464 IN Siena.asm
BLOCKEND_:          0427 DEFINED AT LINE 466 IN Siena.asm
A_:                 042A DEFINED AT LINE 468 IN Siena.asm
C_:                 042D DEFINED AT LINE 470 IN Siena.asm
D_:                 0430 DEFINED AT LINE 472 IN Siena.asm
E_:                 0433 DEFINED AT LINE 474 IN Siena.asm
F_:                 0436 DEFINED AT LINE 476 IN Siena.asm
G_:                 0439 DEFINED AT LINE 478 IN Siena.asm
I_:                 043C DEFINED AT LINE 480 IN Siena.asm
K_:                 043F DEFINED AT LINE 482 IN Siena.asm
L_:                 0442 DEFINED AT LINE 484 IN Siena.asm
M_:                 0445 DEFINED AT LINE 486 IN Siena.asm
N_:                 0448 DEFINED AT LINE 488 IN Siena.asm
O_:                 044B DEFINED AT LINE 490 IN Siena.asm
P_:                 044E DEFINED AT LINE 492 IN Siena.asm
R_:                 0451 DEFINED AT LINE 494 IN Siena.asm
S_:                 0454 DEFINED AT LINE 496 IN Siena.asm
U_:                 0457 DEFINED AT LINE 498 IN Siena.asm
W_:                 045A DEFINED AT LINE 500 IN Siena.asm
X_:                 045D DEFINED AT LINE 502 IN Siena.asm
AND_:               0460 DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
AND1:               0467 DEFINED AT LINE 513 IN Siena.asm
                    > USED AT LINE 527 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
OR_:                046C DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
XOR_:               0475 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
XOR1:               0476 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
INV_:               047E DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
ADD_:               0483 DEFINED AT LINE 544 IN Siena.asm
                    > USED AT LINE 874 IN Siena.asm
CALL_:              048A DEFINED AT LINE 551 IN Siena.asm
HDOT_:              0494 DEFINED AT LINE 559 IN Siena.asm
DROP_:              049A DEFINED AT LINE 564 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
UNDROP_:            049E DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
DUP_:               04A3 DEFINED AT LINE 573 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
ETX_:               04A9 DEFINED AT LINE 578 IN Siena.asm
EXIT_:              04AC DEFINED AT LINE 581 IN Siena.asm
FETCH_:             04AF DEFINED AT LINE 584 IN Siena.asm
FETCH1:             04B0 DEFINED AT LINE 586 IN Siena.asm
KEY_:               04B7 DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
MUL_:               04C1 DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 967 IN Siena.asm
NOP_:               04C4 DEFINED AT LINE 603 IN Siena.asm
OVER_:              04C7 DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
ROT_:               04CF DEFINED AT LINE 615 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
SHL_:               04D7 DEFINED AT LINE 624 IN Siena.asm
SHR_:               04DD DEFINED AT LINE 631 IN Siena.asm
SHR1:               04DE DEFINED AT LINE 633 IN Siena.asm
STORE_:             04E6 DEFINED AT LINE 639 IN Siena.asm
SWAP_:              04EE DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
NEG_:               04F4 DEFINED AT LINE 653 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
SUB_:               04FA DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 1014 IN Siena.asm
SUB2:               04FC DEFINED AT LINE 661 IN Siena.asm
                    > USED AT LINE 656 IN Siena.asm
EQ_:                0503 DEFINED AT LINE 667 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
FALSE_:             050A DEFINED AT LINE 673 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
GT_:                0511 DEFINED AT LINE 678 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
LT_:                0515 DEFINED AT LINE 683 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
LT1:                0517 DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 681 IN Siena.asm
TRUE_:              051F DEFINED AT LINE 691 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
GTE_:               0526 DEFINED AT LINE 696 IN Siena.asm
LTE_:               052A DEFINED AT LINE 700 IN Siena.asm
LTE1:               052C DEFINED AT LINE 703 IN Siena.asm
                    > USED AT LINE 699 IN Siena.asm
VAR_:               0535 DEFINED AT LINE 710 IN Siena.asm
                    > USED AT LINE 878 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 930 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
DIV_:               053D DEFINED AT LINE 717 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
DIV:                0543 DEFINED AT LINE 742 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
DIV1:               054D DEFINED AT LINE 752 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
DIV2:               055A DEFINED AT LINE 761 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
DIV3:               055B DEFINED AT LINE 763 IN Siena.asm
                    > USED AT LINE 760 IN Siena.asm
DIV4:               0560 DEFINED AT LINE 768 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 781 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 783 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 786 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 797 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 801 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 807 IN Siena.asm
EXEC_:              0623 DEFINED AT LINE 813 IN Siena.asm
EXEC1:              0629 DEFINED AT LINE 816 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
PROMPT_:            062C DEFINED AT LINE 821 IN Siena.asm
INPORT_:            0632 DEFINED AT LINE 826 IN Siena.asm
NEWLN_:             063E DEFINED AT LINE 836 IN Siena.asm
OUTPORT_:           0644 DEFINED AT LINE 840 IN Siena.asm
PRTSTR_:            064E DEFINED AT LINE 849 IN Siena.asm
PRTSTR:             064E DEFINED AT LINE 850 IN Siena.asm
                    > USED AT LINE 11
                    > USED AT LINE 15
RPUSH_:             0655 DEFINED AT LINE 856 IN Siena.asm
RPOP_:              065C DEFINED AT LINE 861 IN Siena.asm
A:                  0663 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 336 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 376 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
                    > USED AT LINE 393 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 525 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
                    > USED AT LINE 552 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 704 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 750 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 872 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 945 IN Siena.asm
                    > USED AT LINE 953 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
                    > USED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 7
C:                  0673 DEFINED AT LINE 880 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 843 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
D:                  0683 DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 525 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
                    > USED AT LINE 1429 IN Siena.asm
                    > USED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
E:                  069D DEFINED AT LINE 904 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 361 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
                    > USED AT LINE 554 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 789 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
                    > USED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 19
F:                  06A8 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
G:                  06B3 DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
I:                  06C8 DEFINED AT LINE 932 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
K:                  06D8 DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
L:                  06E6 DEFINED AT LINE 951 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
                    > USED AT LINE 523 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
                    > USED AT LINE 843 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 7
M:                  06F6 DEFINED AT LINE 961 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
N:                  0706 DEFINED AT LINE 971 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
O:                  0711 DEFINED AT LINE 979 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
P:                  0721 DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
R:                  072C DEFINED AT LINE 996 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
S:                  0737 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
U:                  0756 DEFINED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
W:                  0761 DEFINED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
X:                  076C DEFINED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
                    > USED AT LINE 943 IN Siena.asm
CASE_:              0777 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
CLOSURE_:           0777 DEFINED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
DEF_:               0777 DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
FILTER_:            0777 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
GET_:               0777 DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
IF_:                0777 DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
LET_:               0777 DEFINED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 955 IN Siena.asm
MAP_:               0777 DEFINED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
PRINT_:             0777 DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
SCAN_:              0777 DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
SET_:               0777 DEFINED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
SHIFT_:             0777 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
WHILE_:             0777 DEFINED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
MUL:                077A DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
MUL2:               0784 DEFINED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
PROMPT:             0797 DEFINED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
                    > USED AT LINE 822 IN Siena.asm
PUTSTR0:            07A0 DEFINED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1105 IN Siena.asm
PUTSTR:             07A4 DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 1285 IN Siena.asm
RPUSH:              07A9 DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 858 IN Siena.asm
RPOP:               07B4 DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 862 IN Siena.asm
RPOP2:              07BE DEFINED AT LINE 1120 IN Siena.asm
CRLF:               07BF DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
NUM:                07C6 DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
NUM0:               07CF DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
NUM1:               07D0 DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
NUM2:               07E3 DEFINED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
NUM3:               07EE DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
HEXNUM:             07F2 DEFINED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 443 IN Siena.asm
HEXNUM1:            07F5 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
HEXNUM2:            07FD DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
PRTDEC:             080F DEFINED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 13
                    > USED AT LINE 18
PRTDEC0:            081E DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
PRTDEC1:            0840 DEFINED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
PRTDEC2:            0842 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
PRTDEC3:            0852 DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
PRTDEC4:            0853 DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
PRTHEX:             0857 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
PRTHEX2:            0862 DEFINED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
PRTHEX3:            086B DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1257 IN Siena.asm
INIT:               0876 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 318 IN Siena.asm
                    > USED AT LINE 28
PRINTSTR:           0897 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 120
LOOKUPREF:          089E DEFINED AT LINE 1290 IN Siena.asm
LOOKUPREF0:         08A0 DEFINED AT LINE 1292 IN Siena.asm
LOOKUPREF1:         08A4 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
LOOKUPREF2:         08AA DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
LOOKUPREF3:         08AE DEFINED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
NESTING:            08BC DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
NESTING1A:          08C7 DEFINED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
NESTING1:           08CA DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
NESTING2:           08D9 DEFINED AT LINE 1344 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
NESTING3:           08DB DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
NESTING4:           08E6 DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
CONTAINS:           08E8 DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 20
CONTAINS1:          08F6 DEFINED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
CONTAINS3:          08FE DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
ARG:                0900 DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 445 IN Siena.asm
STRDEF:             091A DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 447 IN Siena.asm
STRDEF1:            0922 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
STRDEF2:            0925 DEFINED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
NEWADD2:            0934 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
GO:                 0952 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
GO1:                0953 DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
GO2:                0963 DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
LAMBDA:             0966 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
LAMBDA1:            096C DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
RETURN:             097C DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
BLOCK:              098A DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
BLOCK1:             098E DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
BLOCK2:             09A1 DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
BLOCKEND:           09AD DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
ENTER:              09BB DEFINED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 29
EXIT:               09BE DEFINED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1269 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 40 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 27
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 358 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1271 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 17
                    > USED AT LINE 10
FOUND:              4012 DEFINED AT LINE 24
                    > USED AT LINE 22
EXPECTM_0_2034S31:  405C DEFINED AT LINE 22
                    > USED AT LINE 9
