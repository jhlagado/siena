0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 7F 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C9                     DB   lsb(nop_)   ; SP
0221   C9                     DB   lsb(nop_)   ; !
0222   C9                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C9                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   C9                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   B1                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   0C                     DB   lsb(clear_)   ; ;
023C   A4                     DB   lsb(lt_)   ; <
023D   9B                     DB   lsb(eq_)   ; =
023E   A0                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   C9                     DB   lsb(nop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   C9                     DB   lsb(nop_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   C9                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0A 04               JP   num   
0303                HEXNUM_:      
0303   C3 3A 04               JP   hexnum   
0306                ARG_:        
0306   C3 EE 04               JP   arg   
0309                STRING_:      
0309   C3 57 04               JP   string   
030C                CLEAR_:      
030C   C3 8C 0B               JP   clear   
030F                PAREN_:      
030F   C3 85 04               JP   paren   
0312                PARENEND_:      
0312   C3 92 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD FC 08               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 1F 09               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD B4 08               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   E5                     PUSH   hl   
034A   DD E9                  JP   (ix)   
034C                BLOCK_:      
034C   C3 A1 04               JP   block   
034F                BLOCKEND_:      
034F   C3 DA 04               JP   blockend   
0352                CHAR_:       
0352   C3 70 04               JP   char   
0355                ARRAY_:      
0355   C3 FD 05               JP   array   
0358                ARRAYEND_:      
0358   C3 0F 06               JP   arrayEnd   
035B                IDENT_:      
035B   C3 6E 07               JP   ident   
035E                SYMBOL_:      
035E   C3 47 07               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD FC 08               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 EE 03               JP   mul   
0393                SUB_:        ; Subtract the value 2nd on stack from top of stack
0393   D1                     POP   de   
0394   E1                     POP   hl   ; Entry point for INVert
0395                SUB2:        
0395   B7                     OR   a   ; Entry point for NEGate
0396   ED 52                  SBC   hl,de   
0398   E5                     PUSH   hl   
0399   DD E9                  JP   (ix)   
039B                EQ_:         
039B   E1                     POP   hl   
039C   D1                     POP   de   
039D   C3 C7 07               JP   equals   
03A0                GT_:         
03A0   D1                     POP   de   
03A1   E1                     POP   hl   
03A2   18 02                  JR   lt1   
03A4                LT_:         
03A4   E1                     POP   hl   
03A5   D1                     POP   de   
03A6                LT1:         
03A6   03                     INC   bc   
03A7   0A                     LD   a,(bc)   
03A8   FE 3D                  CP   "="   
03AA   CA CF 07               JP   z,lessthaneq   
03AD   0B                     DEC   bc   
03AE   C3 D4 07               JP   lessthan   
03B1                DIV_:        
03B1   D1                     POP   de   ; get first value
03B2   E1                     POP   hl   ; get 2nd value
03B3   C5                     PUSH   bc   ; preserve the IP
03B4   44 4D                  LD   bc,hl   
03B6   CD 71 08               CALL   divide   
03B9   22 98 18               LD   (vFrac),hl   
03BC   C1                     POP   bc   
03BD   D5                     PUSH   de   ; push result
03BE   DD E9                  JP   (ix)   
03C0                COMMENT_:      
03C0   03                     INC   bc   ; point to next char
03C1   0A                     LD   a,(bc)   
03C2   FE 20                  CP   " "   ; terminate on any char less than SP
03C4   30 FA                  JR   nc,comment_   
03C6   0B                     DEC   bc   
03C7   DD E9                  JP   (ix)   
03C9                NOP_:        
03C9   DD E9                  JP   (ix)   
03CB                             ;*******************************************************************
03CB                             ; word operators
03CB                             ;*******************************************************************
03CB                             ; shl
03CB                             ; value count -- value2          shift left count places
03CB                SHL:         
03CB   50 59                  LD   de,bc   ; save IP
03CD   C1                     POP   bc   ; bc = count
03CE   41                     LD   b,c   ; b = loop counter
03CF   E1                     POP   hl   
03D0   04                     INC   b   ; test for counter=0 case
03D1   18 01                  JR   shl2   
03D3                SHL1:        
03D3   29                     ADD   hl,hl   ; left shift hl
03D4                SHL2:        
03D4   10 FD                  DJNZ   shl1   
03D6   E5                     PUSH   hl   
03D7   42 4B                  LD   bc,de   ; restore IP
03D9   DD E9                  JP   (ix)   
03DB                             ; shr
03DB                             ; value count -- value2          shift left count places
03DB                SHR:         
03DB   50 59                  LD   de,bc   ; save IP
03DD   C1                     POP   bc   ; bc = count
03DE   41                     LD   b,c   ; b = loop counter
03DF   E1                     POP   hl   
03E0   04                     INC   b   ; test for counter=0 case
03E1   18 04                  JR   shr2   
03E3                SHR1:        
03E3   CB 3C                  SRL   h   ; right shift hl
03E5   CB 1D                  RR   l   
03E7                SHR2:        
03E7   10 FA                  DJNZ   shr1   
03E9   E5                     PUSH   hl   
03EA   42 4B                  LD   bc,de   ; restore IP
03EC   DD E9                  JP   (ix)   
03EE                MUL:         ;=19
03EE   D1                     POP   de   ; get first value
03EF   E1                     POP   hl   
03F0   C5                     PUSH   bc   ; Preserve the IP
03F1   44                     LD   b,h   ; bc = 2nd value
03F2   4D                     LD   c,l   
03F3   21 00 00               LD   hl,0   
03F6   3E 10                  LD   a,16   
03F8                MUL2:        
03F8   29                     ADD   hl,hl   
03F9   CB 13                  RL   e   
03FB   CB 12                  RL   d   
03FD   30 04                  JR   nc,$+6   
03FF   09                     ADD   hl,bc   
0400   30 01                  JR   nc,$+3   
0402   13                     INC   de   
0403   3D                     DEC   a   
0404   20 F2                  JR   nz,mul2   
0406   C1                     POP   bc   ; Restore the IP
0407   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0408   DD E9                  JP   (ix)   
040A                NUM:         
040A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040D   0A                     LD   a,(bc)   ; Get numeral or -
040E   FE 2D                  CP   "-"   
0410   20 01                  JR   nz,num0   
0412   03                     INC   bc   ; move to next char, no flags affected
0413                NUM0:        
0413   08                     EX   af,af'   ; save zero flag = 0 for later
0414                NUM1:        
0414   0A                     LD   a,(bc)   ; read digit
0415   D6 30                  SUB   "0"   ; less than 0?
0417   38 13                  JR   c,num2   ; not a digit, exit loop
0419   FE 0A                  CP   10   ; greater that 9?
041B   30 0F                  JR   nc,num2   ; not a digit, exit loop
041D   03                     INC   bc   ; inc IP
041E   54 5D                  LD   de,hl   ; multiply hl * 10
0420   29                     ADD   hl,hl   
0421   29                     ADD   hl,hl   
0422   19                     ADD   hl,de   
0423   29                     ADD   hl,hl   
0424   85                     ADD   a,l   ; add digit in a to hl
0425   6F                     LD   l,a   
0426   3E 00                  LD   a,0   
0428   8C                     ADC   a,h   
0429   67                     LD   h,a   
042A   18 E8                  JR   num1   
042C                NUM2:        
042C   0B                     DEC   bc   
042D   08                     EX   af,af'   ; restore zero flag
042E   20 07                  JR   nz,num3   
0430   EB                     EX   de,hl   ; negate the value of hl
0431   21 00 00               LD   hl,0   
0434   B7                     OR   a   ; jump to sub2
0435   ED 52                  SBC   hl,de   
0437                NUM3:        
0437   E5                     PUSH   hl   ; Put the number on the stack
0438   DD E9                  JP   (ix)   ; and process the next character
043A                HEXNUM:      ; 
043A   21 00 00               LD   hl,0   ; Clear hl to accept the number
043D                HEXNUM1:      
043D   03                     INC   bc   
043E   0A                     LD   a,(bc)   ; Get the character which is a numeral
043F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0441   28 02                  JR   z,hexnum2   ; no a decimal
0443   D6 07                  SUB   7   ; sub 7  to make $a - $F
0445                HEXNUM2:      
0445   D6 30                  SUB   $30   ; Form decimal digit
0447   DA 2C 04               JP   c,num2   
044A   FE 10                  CP   $0F+1   
044C   D2 2C 04               JP   nc,num2   
044F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0450   29                     ADD   hl,hl   ; 4X
0451   29                     ADD   hl,hl   ; 8X
0452   29                     ADD   hl,hl   ; 16X
0453   85                     ADD   a,l   ; add into bottom of hl
0454   6F                     LD   l,a   ; 
0455   18 E6                  JR   hexnum1   
0457                             ; 
0457                STRING:      
0457   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
045B   D5                     PUSH   de   ; save start of string
045C   03                     INC   bc   ; point to next char
045D   18 03                  JR   string2   
045F                STRING1:      
045F   12                     LD   (de),a   
0460   13                     INC   de   ; increase count
0461   03                     INC   bc   ; point to next char
0462                STRING2:      
0462   0A                     LD   a,(bc)   
0463   FE 27                  CP   "'"   ; ' is the string terminator
0465   20 F8                  JR   nz,string1   
0467   AF                     XOR   a   ; write NUL to terminate string
0468   12                     LD   (de),a   
0469   13                     INC   de   
046A   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
046E   DD E9                  JP   (ix)   
0470                CHAR:        
0470   21 00 00               LD   hl,0   ; if `` is empty
0473                CHAR1:       
0473   03                     INC   bc   ; point to next char
0474   0A                     LD   a,(bc)   
0475   FE 60                  CP   "`"   ; ` is the string terminator
0477   28 09                  JR   z,char3   
0479   FE 5C                  CP   $5c   ; \ is the escape
047B   20 02                  JR   nz,char2   
047D   03                     INC   bc   
047E   0A                     LD   a,(bc)   
047F                CHAR2:       
047F   6F                     LD   l,a   
0480   18 F1                  JR   char1   
0482                CHAR3:       
0482   E5                     PUSH   hl   
0483   DD E9                  JP   (ix)   
0485                PAREN:       
0485   DD 21 8B 04            LD   ix,paren2   
0489   18 16                  JR   block   
048B                PAREN2:      
048B   DD 21 6E 0B            LD   ix,next   
048F   C3 C4 0B               JP   exec   
0492                PARENEND:      
0492   E1                     POP   hl   ; hl = last result
0493   D1                     POP   de   
0494   C1                     POP   bc   
0495   C1                     POP   bc   
0496   E5                     PUSH   hl   
0497   FD 62                  LD   iyh,d   
0499   FD 6B                  LD   iyl,e   
049B   DD 21 6E 0B            LD   ix,next   
049F   DD E9                  JP   (ix)   
04A1                BLOCK:       
04A1   03                     INC   bc   
04A2   C5                     PUSH   bc   ; return first opcode of block
04A3   16 01                  LD   d,1   ; nesting: count first parenthesis
04A5                BLOCK1:      ; Skip to end of definition
04A5   0A                     LD   a,(bc)   ; Get the next character
04A6   03                     INC   bc   ; Point to next character
04A7   FE 21                  CP   " " + 1   ; ignore whitespace
04A9   38 FA                  JR   c,block1   
04AB   FE 29                  CP   ")"   
04AD   28 25                  JR   z,block4   
04AF   FE 7D                  CP   "}"   
04B1   28 21                  JR   z,block4   
04B3   FE 5D                  CP   "]"   
04B5   28 1D                  JR   z,block4   
04B7   FE 28                  CP   "("   
04B9   28 13                  JR   z,block3   
04BB   FE 7B                  CP   "{"   
04BD   28 0F                  JR   z,block3   
04BF   FE 5B                  CP   "["   
04C1   28 0B                  JR   z,block3   
04C3   FE 27                  CP   "'"   
04C5   28 07                  JR   z,block3   
04C7   FE 60                  CP   "`"   
04C9   20 DA                  JR   nz,block1   
04CB                BLOCK2:      
04CB   14                     INC   d   
04CC   18 D7                  JR   block1   
04CE                BLOCK3:      
04CE   3E 80                  LD   a,$80   
04D0   AA                     XOR   d   
04D1   47                     LD   b,a   
04D2   18 D1                  JR   block1   
04D4                BLOCK4:      
04D4   15                     DEC   d   
04D5   20 CE                  JR   nz,block1   ; get the next element
04D7   0B                     DEC   bc   ; balanced, exit
04D8   DD E9                  JP   (ix)   
04DA                BLOCKEND:      
04DA   E1                     POP   hl   ; hl = last result
04DB   FD 54                  LD   d,iyh   ; de = BP
04DD   FD 5D                  LD   e,iyl   
04DF   EB                     EX   de,hl   ; hl = BP, de = result
04E0   F9                     LD   sp,hl   ; sp = BP
04E1   E1                     POP   hl   ; hl = old BP
04E2   C1                     POP   bc   ; pop SCP (discard)
04E3   C1                     POP   bc   ; bc = IP
04E4   F9                     LD   sp,hl   ; sp = old BP
04E5   FD 21 00 00            LD   iy,0   ; iy = sp
04E9   FD 39                  ADD   iy,sp   
04EB   D5                     PUSH   de   ; push result
04EC   DD E9                  JP   (ix)   
04EE                ARG:         
04EE   03                     INC   bc   ; get next char
04EF   0A                     LD   a,(bc)   
04F0   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04F2   E6 07                  AND   $07   ; mask
04F4   87                     ADD   a,a   ; double
04F5   6F                     LD   l,a   ; hl = offset into args
04F6   26 00                  LD   h,0   
04F8   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04FB   FD 56 03               LD   d,(iy+3)   
04FE   EB                     EX   de,hl   ; hl = SCP - offset
04FF   B7                     OR   a   
0500   ED 52                  SBC   hl,de   
0502   2B                     DEC   hl   ; de = arg
0503   56                     LD   d,(hl)   
0504   2B                     DEC   hl   
0505   5E                     LD   e,(hl)   
0506   D5                     PUSH   de   ; push arg
0507   DD E9                  JP   (ix)   
0509                             ; addr -- value
0509                GET:         
0509   E1                     POP   hl   
050A   16 00                  LD   d,0   
050C   5E                     LD   e,(hl)   
050D   3A 9A 18               LD   a,(vDataWidth)   
0510   3D                     DEC   a   
0511   28 02                  JR   z,get1   
0513   23                     INC   hl   
0514   56                     LD   d,(hl)   
0515                GET1:        
0515   D5                     PUSH   de   
0516   DD E9                  JP   (ix)   
0518                             ; addr value -- value0
0518                SET:         
0518   E1                     POP   hl   
0519   D1                     POP   de   
051A   7E                     LD   a,(hl)   
051B   73                     LD   (hl),e   
051C   5F                     LD   e,a   
051D   3A 9A 18               LD   a,(vDataWidth)   
0520   3D                     DEC   a   
0521   28 04                  JR   z,set1   
0523   23                     INC   hl   
0524   7E                     LD   a,(hl)   
0525   72                     LD   (hl),d   
0526   57                     LD   d,a   
0527                SET1:        
0527   D5                     PUSH   de   ; return old value
0528   DD E9                  JP   (ix)   
052A                             ; 
052A                             ; in:
052A                             ;  pop hl                      ; hl = string
052A                             ;  pop de                      ; de = char
052A                             ; in1:
052A                             ;  ld a,(hl)
052A                             ;  inc hl
052A                             ;  cp 0                        ; is end of string
052A                             ;  jr z,in2
052A                             ;  cp e
052A                             ;  jr nz,in1
052A                             ;  or a                        ; a is never 0, or a resets zero flag
052A                             ; in2:
052A                             ;  ld hl,0                     ; hl = result
052A                             ;  jr z,in3
052A                             ;  dec hl                      ; if nz de = $ffff
052A                             ; in3:
052A                             ;  push hl                     ; push result
052A                             ;  jp (ix)
052A                             ; newAdd2:
052A                             ;  push bc                     ; push IP
052A                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
052A                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
052A                             ;  push de                     ; push SCP
052A                             ;  push iy                     ; push base pointer
052A                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
052A                             ;  add iy,sp                   ;
052A                             ;  ld d,(iy-1)
052A                             ;  ld e,(iy-2)
052A                             ;  ld h,(iy-3)
052A                             ;  ld l,(iy-4)
052A                             ;  add hl,de                   ; hl = hl + de
052A                             ;  ex de,hl                    ; de = result
052A                             ;  pop hl                      ; hl = old BP
052A                             ;  pop bc                      ; pop SCP (discard)
052A                             ;  pop bc                      ; bc = IP
052A                             ;  ld sp,hl                    ; sp = old BP
052A                             ;  ld iy,0
052A                             ;  add iy,sp
052A                             ;  push de                     ; push result
052A                             ;  jp (ix)
052A                             ; ifte
052A                             ; condition then -- value
052A                IF:          
052A   11 00 00               LD   de,0   ; NUL pointer for else
052D   18 01                  JR   ifte1   
052F                             ; ifte
052F                             ; condition then else -- value
052F                IFTE:        
052F   D1                     POP   de   ; de = else
0530                IFTE1:       
0530   E1                     POP   hl   ; hl = then
0531   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0532   23                     INC   hl   ; check for true
0533   7C                     LD   a,h   
0534   B5                     OR   l   
0535   E1                     POP   hl   ; hl = then
0536   28 01                  JR   z,ifte2   
0538   EB                     EX   de,hl   ; condition = false, hl = else
0539                IFTE2:       
0539   7C                     LD   a,h   ; check if hl is NUL
053A   B5                     OR   l   
053B   28 13                  JR   z,ifte3   
053D   C5                     PUSH   bc   ; push IP
053E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0541   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0544   D5                     PUSH   de   ; push SCP
0545   FD E5                  PUSH   iy   ; push BP
0547   FD 21 00 00            LD   iy,0   ; iy = sp
054B   FD 39                  ADD   iy,sp   
054D   44 4D                  LD   bc,hl   ; IP = then
054F   0B                     DEC   bc   
0550                IFTE3:       
0550   DD E9                  JP   (ix)   
0552                             ; switch
0552                             ; index array -- value
0552                SWITCH:      
0552   D1                     POP   de   ; de = array
0553   E1                     POP   hl   ; hl = index
0554   29                     ADD   hl,hl   ; indec *= 2
0555   19                     ADD   hl,de   ; add array[0]
0556   4E                     LD   c,(hl)   ; bc = case
0557   23                     INC   hl   
0558   46                     LD   b,(hl)   
0559   0B                     DEC   bc   
055A   DD E9                  JP   (ix)   
055C                             ; c b --
055C                             ; loops until c = 0
055C                LOOP:        
055C   D1                     POP   de   ; de = block                    c
055D   E1                     POP   hl   ; hl = condition
055E   D5                     PUSH   de   
055F   C5                     PUSH   bc   ; push IP
0560   42 4B                  LD   bc,de   ; bc = block
0562   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0565   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0568   D5                     PUSH   de   ; push SCP
0569   FD E5                  PUSH   iy   ; push BP
056B   FD 21 00 00            LD   iy,0   ; iy = sp
056F   FD 39                  ADD   iy,sp   
0571                LOOP1:       
0571   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0572   B4                     OR   h   
0573   28 21                  JR   z,loop3   
0575   11 8B 05               LD   de,loop2-1   ; IP return address
0578   D5                     PUSH   de   
0579   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
057C   FD 56 03               LD   d,(iy+3)   
057F   D5                     PUSH   de   ; 
0580   FD E5                  PUSH   iy   ; push BP
0582   FD 21 00 00            LD   iy,0   ; iy = sp
0586   FD 39                  ADD   iy,sp   
0588   E5                     PUSH   hl   ; push condition
0589   0B                     DEC   bc   
058A   DD E9                  JP   (ix)   
058C                LOOP2:       
058C   1B                     DB   ESC   ; escape from interpreter
058D   FD 4E 06               LD   c,(iy+6)   ; bc = block
0590   FD 46 07               LD   b,(iy+7)   
0593   E1                     POP   hl   ; hl = condition
0594   18 DB                  JR   loop1   
0596                LOOP3:       
0596   FD 54                  LD   d,iyh   ; de = BP
0598   FD 5D                  LD   e,iyl   
059A   EB                     EX   de,hl   ; hl = BP, de = result
059B   F9                     LD   sp,hl   ; sp = BP
059C   E1                     POP   hl   ; hl = old BP
059D   C1                     POP   bc   ; pop SCP (discard)
059E   C1                     POP   bc   ; bc = IP
059F   F9                     LD   sp,hl   ; sp = old BP
05A0   FD 21 00 00            LD   iy,0   ; iy = sp
05A4   FD 39                  ADD   iy,sp   
05A6   DD 21 6E 0B            LD   ix,next   ; needed?
05AA   DD E9                  JP   (ix)   
05AC                CASE:        
05AC   E1                     POP   hl   ; get selector from stack
05AD   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05AE   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05B1   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05B4   D5                     PUSH   de   ; push SCP
05B5   FD E5                  PUSH   iy   ; push BP
05B7   FD 21 00 00            LD   iy,0   ; BP = SP
05BB   FD 39                  ADD   iy,sp   
05BD   E5                     PUSH   hl   ; push selector as first arg of new frame
05BE   DD E9                  JP   (ix)   
05C0                SELECT:      
05C0   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05C3   FD 6E FE               LD   l,(iy-2)   
05C6   23                     INC   hl   ; hl -= 1 index from second arg
05C7   29                     ADD   hl,hl   ; hl *= 2 word offset
05C8   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05CA   FD 5D                  LD   e,iyl   
05CC   EB                     EX   de,hl   
05CD   B7                     OR   a   ; hl = BP - offset
05CE   ED 52                  SBC   hl,de   
05D0   54 5D                  LD   de,hl   ; save arg ptr
05D2   2B                     DEC   hl   ; hl += 2
05D3   2B                     DEC   hl   
05D4   B7                     OR   a   ; arg ptr - stack pointer
05D5   ED 72                  SBC   hl,sp   
05D7   30 03                  JR   nc,case0   
05D9   D1                     POP   de   ; pop last arg
05DA   18 05                  JR   case1   
05DC                CASE0:       
05DC   EB                     EX   de,hl   
05DD   2B                     DEC   hl   ; de = arg
05DE   56                     LD   d,(hl)   
05DF   2B                     DEC   hl   
05E0   5E                     LD   e,(hl)   
05E1                CASE1:       
05E1   7A                     LD   a,d   ; is arg == NUL ? then skip
05E2   B3                     OR   e   
05E3   28 09                  JR   z,case2   
05E5   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05E8   FD 70 05               LD   (iy+5),b   
05EB   42 4B                  LD   bc,de   ; IP = arg
05ED   0B                     DEC   bc   
05EE                CASE2:       
05EE   DD E9                  JP   (ix)   
05F0                WORDS:       
05F0   21 02 00               LD   hl,2   
05F3   18 03                  JR   bytes1   
05F5                BYTES:       
05F5   21 01 00               LD   hl,1   
05F8                BYTES1:      
05F8   22 9A 18               LD   (vDataWidth),hl   
05FB   DD E9                  JP   (ix)   
05FD                ARRAY:       
05FD   C5                     PUSH   bc   ; create stack frame, push IP
05FE   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0601   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0604   D5                     PUSH   de   ; push SCP
0605   FD E5                  PUSH   iy   ; push BP
0607   FD 21 00 00            LD   iy,0   ; BP = SP
060B   FD 39                  ADD   iy,sp   
060D   DD E9                  JP   (ix)   
060F                ARRAYEND:      
060F   FD 54                  LD   d,iyh   ; de = BP
0611   FD 5D                  LD   e,iyl   
0613   DD 62                  LD   ixh,d   ; ix = BP
0615   DD 6B                  LD   ixl,e   
0617   62 6B                  LD   hl,de   ; hl = de
0619   B7                     OR   a   
061A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
061C   CB 3C                  SRL   h   
061E   CB 1D                  RR   l   
0620   EB                     EX   de,hl   ; de = count
0621   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0624   73                     LD   (hl),e   
0625   23                     INC   hl   
0626   72                     LD   (hl),d   
0627   23                     INC   hl   ; hl = array[0], de = count
0628   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
062B   FE 01                  CP   1   
062D   20 10                  JR   nz,arrayEnd2   
062F                ARRAYEND1:      ; byte
062F   DD 7E FE               LD   a,(ix-2)   
0632   77                     LD   (hl),a   
0633   23                     INC   hl   
0634   DD 2B                  DEC   ix   
0636   DD 2B                  DEC   ix   
0638   1B                     DEC   de   
0639   7B                     LD   a,e   
063A   B2                     OR   d   
063B   20 F2                  JR   nz,arrayEnd1   
063D   18 13                  JR   arrayEnd3   
063F                ARRAYEND2:      ; word
063F   DD 7E FE               LD   a,(ix-2)   
0642   77                     LD   (hl),a   
0643   23                     INC   hl   
0644   DD 7E FF               LD   a,(ix-1)   
0647   77                     LD   (hl),a   
0648   23                     INC   hl   
0649   DD 2B                  DEC   ix   
064B   DD 2B                  DEC   ix   
064D   1B                     DEC   de   
064E   7B                     LD   a,e   
064F   B2                     OR   d   
0650   20 ED                  JR   nz,arrayEnd2   
0652                ARRAYEND3:      
0652   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0654   FD 5D                  LD   e,iyl   
0656   EB                     EX   de,hl   ; hl = BP, de = end of array
0657   F9                     LD   sp,hl   ; sp = BP
0658   E1                     POP   hl   ; hl = old BP, de = end of array
0659   DD E1                  POP   ix   ; pop SCP (discard)
065B   DD E1                  POP   ix   ; pop IP (discard)
065D   EB                     EX   de,hl   
065E   FD 62                  LD   iyh,d   
0660   FD 6B                  LD   iyl,e   
0662   EB                     EX   de,hl   
0663                             ; ld sp,hl                    ; sp = old BP
0663                             ; ld iy,0                     ; iy = sp
0663                             ; add iy,sp
0663   DD 21 6E 0B            LD   ix,next   
0667   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
066A   23                     INC   hl   
066B   23                     INC   hl   
066C   E5                     PUSH   hl   ; return array[0]
066D   EB                     EX   de,hl   ; hl = end of array, de = array[0]
066E   B7                     OR   a   
066F   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0671   EB                     EX   de,hl   
0672   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0675   73                     LD   (hl),e   ; array[-2] = size
0676   23                     INC   hl   
0677   72                     LD   (hl),d   
0678   23                     INC   hl   
0679   19                     ADD   hl,de   
067A   22 A6 18               LD   (vHeapPtr),hl   
067D   DD E9                  JP   (ix)   
067F                             ; str -- num
067F                HASH:        
067F   E1                     POP   hl   
0680   C5                     PUSH   bc   
0681   44 4D                  LD   bc,hl   
0683   CD 0E 08               CALL   hashStr   
0686   C1                     POP   bc   
0687   E5                     PUSH   hl   
0688   DD E9                  JP   (ix)   
068A                             ; symbol addr --
068A                DEF:         
068A   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
068C   E3                     EX   (sp),hl   
068D   EB                     EX   de,hl   
068E   06 01                  LD   b,1   ; b = nesting
0690   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0693   36 CD                  LD   (hl),$cd   ; compile "call exec"
0695   23                     INC   hl   
0696   36 AF                  LD   (hl),lsb(call)   
0698   23                     INC   hl   
0699   36 0B                  LD   (hl),msb(call)   
069B   23                     INC   hl   
069C                DEF1:        
069C   1A                     LD   a,(de)   
069D   13                     INC   de   
069E   77                     LD   (hl),a   
069F   23                     INC   hl   
06A0   FE 29                  CP   ")"   
06A2   28 25                  JR   z,def4   
06A4   FE 7D                  CP   "}"   
06A6   28 21                  JR   z,def4   
06A8   FE 5D                  CP   "]"   
06AA   28 1D                  JR   z,def4   
06AC   FE 28                  CP   "("   
06AE   28 13                  JR   z,def3   
06B0   FE 7B                  CP   "{"   
06B2   28 0F                  JR   z,def3   
06B4   FE 5B                  CP   "["   
06B6   28 0B                  JR   z,def3   
06B8   FE 27                  CP   "'"   
06BA   28 07                  JR   z,def3   
06BC   FE 60                  CP   "`"   
06BE   20 DC                  JR   nz,def1   
06C0                DEF2:        
06C0   04                     INC   b   
06C1   18 D9                  JR   def1   
06C3                DEF3:        
06C3   3E 80                  LD   a,$80   
06C5   A8                     XOR   b   
06C6   47                     LD   b,a   
06C7   18 D3                  JR   def1   
06C9                DEF4:        
06C9   05                     DEC   b   
06CA   20 D0                  JR   nz,def1   ; get the next element
06CC   AF                     XOR   a   ; end with NUL ??? needed?
06CD   77                     LD   (hl),a   
06CE   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of defintion
06D2   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
06D5   E1                     POP   hl   ; de = addr, hl = IP
06D6   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06D7   44 4D                  LD   bc,hl   ; bc = symbol
06D9   CD 27 08               CALL   defineEntry   
06DC   38 00                  JR   c,def5   
06DE                             ; call error
06DE                             ; .cstr "Def Collision"
06DE                DEF5:        
06DE   C1                     POP   bc   
06DF   DD E9                  JP   (ix)   
06E1                             ; symbol value --
06E1                LET:         
06E1   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06E3   E3                     EX   (sp),hl   
06E4   EB                     EX   de,hl   
06E5   06 01                  LD   b,1   ; b = nesting
06E7   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
06EA   36 CD                  LD   (hl),$cd   ; compile "call dovar"
06EC   23                     INC   hl   
06ED   36 DE                  LD   (hl),lsb(dovar)   
06EF   23                     INC   hl   
06F0   36 0B                  LD   (hl),msb(dovar)   
06F2   23                     INC   hl   
06F3                LET1:        
06F3   73                     LD   (hl),e   
06F4   23                     INC   hl   
06F5   72                     LD   (hl),d   
06F6   2B                     DEC   hl   
06F7   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of defintion
06FB   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
06FE   E1                     POP   hl   ; de = addr, hl = IP
06FF   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0700   44 4D                  LD   bc,hl   ; bc = symbol
0702   CD 27 08               CALL   defineEntry   
0705   38 00                  JR   c,let2   
0707                             ; call error
0707                             ; .cstr "Let Collision"
0707                LET2:        
0707   C1                     POP   bc   
0708   DD E9                  JP   (ix)   
070A                             ; symbol value --
070A                CONST:       
070A   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
070C   E3                     EX   (sp),hl   
070D   EB                     EX   de,hl   
070E   06 01                  LD   b,1   ; b = nesting
0710   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0713   36 CD                  LD   (hl),$cd   ; compile "call doconst"
0715   23                     INC   hl   
0716   36 E0                  LD   (hl),lsb(doconst)   
0718   23                     INC   hl   
0719   36 0B                  LD   (hl),msb(doconst)   
071B   23                     INC   hl   
071C                CONST1:      
071C   73                     LD   (hl),e   
071D   23                     INC   hl   
071E   72                     LD   (hl),d   
071F   23                     INC   hl   
0720   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of defintion
0724   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
0727   E1                     POP   hl   ; de = addr, hl = IP
0728   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0729   44 4D                  LD   bc,hl   ; bc = symbol
072B   CD 27 08               CALL   defineEntry   
072E   38 00                  JR   c,const2   
0730                             ; call error
0730                             ; .cstr "Const Collision"
0730                CONST2:      
0730   C1                     POP   bc   
0731   DD E9                  JP   (ix)   
0733                             ; str -- addr
0733                ADDR:        
0733   E1                     POP   hl   ; hl = hash
0734   C5                     PUSH   bc   
0735   44 4D                  LD   bc,hl   
0737   CD 4D 08               CALL   lookupEntry   
073A   38 03                  JR   c,addr1   
073C   21 00 00               LD   hl,0   
073F                             ; call printStr		
073F                             ; .cstr "Undefined"
073F                             ; jp interpret
073F                ADDR1:       
073F   C1                     POP   bc   
0740   11 03 00               LD   de,3   
0743   19                     ADD   hl,de   
0744   E5                     PUSH   hl   
0745   DD E9                  JP   (ix)   
0747                SYMBOL:      
0747   03                     INC   bc   
0748   11 00 1A               LD   de,PAD   
074B   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
074D   18 02                  JR   symbol1   
074F                SYMBOL0:      ; copy to PAD area
074F   03                     INC   bc   ; characters that are part of the identifier
0750   13                     INC   de   
0751                SYMBOL1:      ; 0-9 A-Z a-z _
0751   0A                     LD   a,(bc)   
0752   12                     LD   (de),a   
0753   B7                     OR   a   
0754   28 0A                  JR   z,symbol2   
0756   6F                     LD   l,a   
0757   7E                     LD   a,(hl)   
0758   FE 5B                  CP   lsb(ident_)   
075A   28 F3                  JR   z,symbol0   
075C   FE 00                  CP   lsb(num_)   
075E   28 EF                  JR   z,symbol0   
0760                SYMBOL2:      
0760   0B                     DEC   bc   
0761   AF                     XOR   a   
0762   12                     LD   (de),a   ; terminate string with NUL
0763   C5                     PUSH   bc   
0764   01 00 1A               LD   bc,PAD   
0767   CD 0E 08               CALL   hashStr   ; hl = hash
076A   C1                     POP   bc   
076B   E5                     PUSH   hl   
076C   DD E9                  JP   (ix)   
076E                IDENT:       
076E   11 00 1A               LD   de,PAD   
0771   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0773   18 02                  JR   ident1   
0775                IDENT0:      ; copy to PAD area
0775   03                     INC   bc   ; characters that are part of the identifier
0776   13                     INC   de   
0777                IDENT1:      ; 0-9 A-Z a-z _
0777   0A                     LD   a,(bc)   
0778   12                     LD   (de),a   
0779   B7                     OR   a   
077A   28 0A                  JR   z,ident2   
077C   6F                     LD   l,a   
077D   7E                     LD   a,(hl)   
077E   FE 5B                  CP   lsb(ident_)   
0780   28 F3                  JR   z,ident0   
0782   FE 00                  CP   lsb(num_)   
0784   28 EF                  JR   z,ident0   
0786                IDENT2:      
0786   0B                     DEC   bc   
0787   AF                     XOR   a   
0788   12                     LD   (de),a   ; terminate string with NUL
0789   C5                     PUSH   bc   
078A   01 00 1A               LD   bc,PAD   
078D   CD 0E 08               CALL   hashStr   ; hl = hash
0790   44 4D                  LD   bc,hl   
0792   CD 4D 08               CALL   lookupEntry   
0795   C1                     POP   bc   
0796   38 02                  JR   c,ident3   ; todo: no entry? print an error message
0798   DD E9                  JP   (ix)   
079A                IDENT3:      
079A   E9                     JP   (hl)   
079B                FRAC:        
079B   2A 98 18               LD   hl,(vFrac)   
079E   E5                     PUSH   hl   
079F   DD E9                  JP   (ix)   
07A1                SQRT1:       
07A1   E1                     POP   hl   
07A2   C5                     PUSH   bc   
07A3   CD 8A 08               CALL   squareRoot   
07A6   ED 43 98 18            LD   (vFrac),bc   
07AA   C1                     POP   bc   
07AB   D5                     PUSH   de   
07AC   DD E9                  JP   (ix)   
07AE                ABS1:        
07AE   E1                     POP   hl   
07AF   CB 7C                  BIT   7,h   
07B1   C8                     RET   z   
07B2   AF                     XOR   a   
07B3   95                     SUB   l   
07B4   6F                     LD   l,a   
07B5   9F                     SBC   a,a   
07B6   94                     SUB   h   
07B7   67                     LD   h,a   
07B8   E5                     PUSH   hl   
07B9   DD E9                  JP   (ix)   
07BB                MOD:         
07BB   D1                     POP   de   ; get first value
07BC   E1                     POP   hl   ; get 2nd value
07BD   C5                     PUSH   bc   ; preserve the IP
07BE   44 4D                  LD   bc,hl   
07C0   CD 71 08               CALL   divide   
07C3   C1                     POP   bc   
07C4   E5                     PUSH   hl   ; push remainder
07C5   DD E9                  JP   (ix)   
07C7                             ; hl = value1, de = value2
07C7                             ; hl = result
07C7                EQUALS:      
07C7   B7                     OR   a   ; reset the carry flag
07C8   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07CA   28 10                  JR   z,true1   
07CC   C3 E2 07               JP   false1   
07CF                             ; hl = value1 de = value2
07CF                             ; hl = result
07CF                LESSTHANEQ:      
07CF   B7                     OR   a   
07D0   ED 52                  SBC   hl,de   
07D2   18 05                  JR   lessthan1   
07D4                             ; hl = value1 de = value2
07D4                             ; hl = result
07D4                LESSTHAN:      
07D4   B7                     OR   a   
07D5   ED 52                  SBC   hl,de   
07D7   28 09                  JR   z,false1   
07D9                LESSTHAN1:      
07D9   FA E2 07               JP   m,false1   
07DC                TRUE1:       
07DC   21 FF FF               LD   hl,TRUE   
07DF   E5                     PUSH   hl   
07E0   DD E9                  JP   (ix)   
07E2                FALSE1:      
07E2   21 00 00               LD   hl,FALSE   
07E5   E5                     PUSH   hl   
07E6   DD E9                  JP   (ix)   
07E8                             ; Z80 port input
07E8                             ; port -- value
07E8                INPUT:       
07E8   E1                     POP   hl   
07E9   59                     LD   e,c   ; save IP
07EA   4D                     LD   c,l   
07EB   ED 68                  IN   l,(c)   
07ED   26 00                  LD   h,0   
07EF   4B                     LD   c,e   ; restore IP
07F0   E5                     PUSH   hl   
07F1   DD E9                  JP   (ix)   
07F3                             ; Z80 port output
07F3                             ; value port --
07F3                OUTPUT:      
07F3   E1                     POP   hl   
07F4   59                     LD   e,c   ; save IP
07F5   4D                     LD   c,l   
07F6   E1                     POP   hl   
07F7   ED 69                  OUT   (c),l   
07F9   4B                     LD   c,e   ; restore IP
07FA   DD E9                  JP   (ix)   
07FC                KEY:         
07FC   CD 81 00               CALL   getchar   
07FF   26 00                  LD   h,0   
0801   6F                     LD   l,a   
0802   E5                     PUSH   hl   
0803   DD E9                  JP   (ix)   
0805                NEG:         
0805   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0808   D1                     POP   de   
0809   C3 95 03               JP   sub2   ; use the SUBtract routine
080C                FILTER:      
080C                MAP:         
080C                SCAN:        
080C   DD E9                  JP   (ix)   
080E                             ; -------------------------------------------------------------------------------
080E                             ; hash C-string
080E                             ; BC = str
080E                             ; HL = hash
080E                HASHSTR:      
080E   21 00 00               LD   hl,0   
0811                HASHSTR1:      
0811   0A                     LD   a,(bc)   ; load next char
0812   03                     INC   bc   
0813   FE 00                  CP   0   ; NUL?
0815   C8                     RET   z   
0816                HASHSTR2:      
0816   16 00                  LD   d,0   
0818   5F                     LD   e,a   
0819   19                     ADD   hl,de   
081A   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
081C   29                     ADD   hl,hl   ; shift left
081D   19                     ADD   hl,de   ; add
081E   29                     ADD   hl,hl   ; shift left
081F   29                     ADD   hl,hl   ; shift left
0820   29                     ADD   hl,hl   ; shift left
0821   29                     ADD   hl,hl   ; shift left
0822   29                     ADD   hl,hl   ; shift left
0823   29                     ADD   hl,hl   ; shift left
0824   19                     ADD   hl,de   ; add
0825   18 EA                  JR   hashStr1   
0827                             ; add entry to hash slots and hash pointers
0827                             ; bc = hash (b = hi, c = lo), de = addr
0827                             ; sets carry if successful
0827                DEFINEENTRY:      
0827   CB 21                  SLA   c   ; lo = lo * 2
0829   69                     LD   l,c   ; lo1 = lo
082A   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
082C                DEFINEENTRY0:      
082C   7E                     LD   a,(hl)   ; a = (lo1)
082D   FE FF                  CP   UNUSED   ; is it unused?
082F   28 12                  JR   z,defineEntry3   ; yes, add entry
0831   79                     LD   a,c   ; a = lo
0832   BE                     CP   (hl)   ; compare (lo1) with lo
0833   20 06                  JR   nz,defineEntry1   ; no match loop around
0835   2C                     INC   l   
0836   78                     LD   a,b   ; a = hi
0837   BE                     CP   (hl)   ; compare (lo1+1) with hi
0838   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
083A   2D                     DEC   l   ; restore l
083B                DEFINEENTRY1:      
083B   2C                     INC   l   ; try next entry
083C   2C                     INC   l   
083D   79                     LD   a,c   ; compare lo and lo1
083E   BD                     CP   l   ; if equal then there's no space left, reject
083F   20 EB                  JR   nz,defineEntry0   
0841                DEFINEENTRY2:      
0841   B7                     OR   a   ; clear carry flag, failure
0842   C9                     RET      
0843                DEFINEENTRY3:      ; new entry
0843   71                     LD   (hl),c   ; (lo1) = hash lo
0844   23                     INC   hl   
0845   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0846   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0848   72                     LD   (hl),d   
0849   2B                     DEC   hl   
084A   73                     LD   (hl),e   ; (slot + 2) = address
084B   37                     SCF      ; set carry flag, success
084C   C9                     RET      
084D                             ; looks up hash and returns address
084D                             ; bc = hash
084D                             ; returns addr in hl, sets carry if successful
084D                LOOKUPENTRY:      
084D   CB 21                  SLA   c   ; lo = lo * 2
084F   69                     LD   l,c   ; lo1 = lo
0850   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0852                LOOKUPENTRY0:      
0852   7E                     LD   a,(hl)   ; a = (hl), slot
0853   FE FF                  CP   UNUSED   ; is it unused?
0855   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0857   79                     LD   a,c   ; a = lo
0858   BE                     CP   (hl)   ; compare (lo1) with lo
0859   20 06                  JR   nz,lookupEntry1   ; no match loop around
085B   2C                     INC   l   
085C   78                     LD   a,b   ; a = hi
085D   BE                     CP   (hl)   ; compare (lo1+1) with hi
085E   28 09                  JR   z,lookupEntry3   
0860   2D                     DEC   l   
0861                LOOKUPENTRY1:      
0861   2C                     INC   l   
0862   2C                     INC   l   
0863   79                     LD   a,c   
0864   BD                     CP   l   ; no space left, reject
0865   20 EB                  JR   nz,lookupEntry0   
0867                LOOKUPENTRY2:      
0867   B7                     OR   a   ; clear carry flag, failure
0868   C9                     RET      
0869                LOOKUPENTRY3:      
0869   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
086B   56                     LD   d,(hl)   
086C   2D                     DEC   l   ; restore l
086D   5E                     LD   e,(hl)   ; (slot + 2) = address
086E   EB                     EX   de,hl   
086F   37                     SCF      
0870   C9                     RET      
0871                             ; division subroutine.
0871                             ; bc: divisor, de: dividend, hl: remainder
0871                DIVIDE:      
0871   21 00 00               LD   hl,0   ; zero the remainder
0874   3E 10                  LD   a,16   ; loop counter
0876                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0876   CB 21                  SLA   c   
0878   CB 10                  RL   b   
087A   ED 6A                  ADC   hl,hl   
087C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
087E   38 03                  JR   c,divide2   
0880   0C                     INC   c   
0881   18 01                  JR   divide3   
0883                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0883   19                     ADD   hl,de   
0884                DIVIDE3:      
0884   3D                     DEC   a   
0885   20 EF                  JR   nz,divide1   
0887   50 59                  LD   de,bc   ; result from bc to de
0889   C9                     RET      
088A                             ; squareroot
088A                             ; Input: HL = value
088A                             ; Result: DE = square root BC = remainder
088A                SQUAREROOT:      
088A   01 00 08               LD   bc,0800h   
088D   59                     LD   e,c   
088E   AF                     XOR   a   
088F                SQUAREROOT1:      
088F   29                     ADD   hl,hl   
0890   CB 11                  RL   c   
0892   ED 6A                  ADC   hl,hl   
0894   CB 11                  RL   c   
0896   30 02                  JR   nc,$+4   
0898   CB C5                  SET   0,l   
089A   7B                     LD   a,e   
089B   87                     ADD   a,a   
089C   5F                     LD   e,a   
089D   87                     ADD   a,a   
089E   CB 45                  BIT   0,l   
08A0   20 03                  JR   nz,$+5   
08A2   91                     SUB   c   
08A3   30 05                  JR   nc,squareRoot4   
08A5   79                     LD   a,c   
08A6   93                     SUB   e   
08A7   1C                     INC   e   
08A8   93                     SUB   e   
08A9   4F                     LD   c,a   
08AA                SQUAREROOT4:      
08AA   10 E3                  DJNZ   squareRoot1   
08AC   CB 45                  BIT   0,l   
08AE   28 01                  JR   z,squareRoot5   
08B0   04                     INC   b   
08B1                SQUAREROOT5:      
08B1   16 00                  LD   d,0   
08B3   C9                     RET      
08B4                PRTDEC:      
08B4   CB 7C                  BIT   7,h   
08B6   28 0B                  JR   z,prtdec0   
08B8   3E 2D                  LD   a,"-"   
08BA   CD 85 00               CALL   putchar   
08BD   AF                     XOR   a   
08BE   95                     SUB   l   
08BF   6F                     LD   l,a   
08C0   9F                     SBC   a,a   
08C1   94                     SUB   h   
08C2   67                     LD   h,a   
08C3                PRTDEC0:      
08C3   C5                     PUSH   bc   
08C4   0E 00                  LD   c,0   ; leading zeros flag = false
08C6   11 F0 D8               LD   de,-10000   
08C9   CD E5 08               CALL   prtdec1   
08CC   11 18 FC               LD   de,-1000   
08CF   CD E5 08               CALL   prtdec1   
08D2   11 9C FF               LD   de,-100   
08D5   CD E5 08               CALL   prtdec1   
08D8   1E F6                  LD   e,-10   
08DA   CD E5 08               CALL   prtdec1   
08DD   0C                     INC   c   ; flag = true for at least digit
08DE   1E FF                  LD   e,-1   
08E0   CD E5 08               CALL   prtdec1   
08E3   C1                     POP   bc   
08E4   C9                     RET      
08E5                PRTDEC1:      
08E5   06 2F                  LD   b,"0"-1   
08E7                PRTDEC2:      
08E7   04                     INC   b   
08E8   19                     ADD   hl,de   
08E9   38 FC                  JR   c,prtdec2   
08EB   ED 52                  SBC   hl,de   
08ED   3E 30                  LD   a,"0"   
08EF   B8                     CP   b   
08F0   20 05                  JR   nz,prtdec3   
08F2   AF                     XOR   a   
08F3   B1                     OR   c   
08F4   C8                     RET   z   
08F5   18 01                  JR   prtdec4   
08F7                PRTDEC3:      
08F7   0C                     INC   c   
08F8                PRTDEC4:      
08F8   78                     LD   a,b   
08F9   C3 85 00               JP   putchar   
08FC                PRTHEX:      ; display hl as a 16-bit number in hex.
08FC   C5                     PUSH   bc   ; preserve the IP
08FD   7C                     LD   a,h   
08FE   CD 07 09               CALL   prthex2   
0901   7D                     LD   a,l   
0902   CD 07 09               CALL   prthex2   
0905   C1                     POP   bc   
0906   C9                     RET      
0907                PRTHEX2:      
0907   4F                     LD   c,a   
0908   1F                     RRA      
0909   1F                     RRA      
090A   1F                     RRA      
090B   1F                     RRA      
090C   CD 10 09               CALL   prthex3   
090F   79                     LD   a,c   
0910                PRTHEX3:      
0910   E6 0F                  AND   0x0F   
0912   C6 90                  ADD   a,0x90   
0914   27                     DAA      
0915   CE 40                  ADC   a,0x40   
0917   27                     DAA      
0918   C3 85 00               JP   putchar   
091B                PRTSTR0:      
091B   CD 85 00               CALL   putchar   
091E   23                     INC   hl   
091F                PRTSTR:      
091F   7E                     LD   a,(hl)   
0920   B7                     OR   a   
0921   20 F8                  JR   nz,prtstr0   
0923   C9                     RET      
0924                             ; **************************************************************************
0924                             ; calculate nesting value
0924                             ; a is char to be tested,
0924                             ; e is the nesting value (initially 0)
0924                             ; e is increased by ( and [
0924                             ; e is decreased by ) and ]
0924                             ; e has its bit 7 toggled by `
0924                             ; limited to 127 levels
0924                             ; **************************************************************************
0924                NESTING:      
0924   FE 22                  CP   $22   ; quote char
0926   20 0A                  JR   nz,nesting1   
0928   CB 7B                  BIT   7,e   
092A   28 03                  JR   z,nesting1a   
092C   CB BB                  RES   7,e   
092E   C9                     RET      
092F                NESTING1A:      
092F   CB FB                  SET   7,e   
0931   C9                     RET      
0932                NESTING1:      
0932   CB 7B                  BIT   7,e   
0934   C0                     RET   nz   
0935   FE 7B                  CP   "{"   
0937   28 08                  JR   z,nesting2   
0939   FE 5B                  CP   "["   
093B   28 04                  JR   z,nesting2   
093D   FE 28                  CP   "("   
093F   20 02                  JR   nz,nesting3   
0941                NESTING2:      
0941   1C                     INC   e   
0942   C9                     RET      
0943                NESTING3:      
0943   FE 7D                  CP   "}"   
0945   28 07                  JR   z,nesting4   
0947   FE 5D                  CP   "]"   
0949   28 03                  JR   z,nesting4   
094B   FE 29                  CP   ")"   
094D   C0                     RET   nz   
094E                NESTING4:      
094E   1D                     DEC   e   
094F   C9                     RET      
0950                PROMPT:      
0950   CD 60 09               CALL   printStr   
0953   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0958   C9                     RET      
0959                CRLF:        
0959   CD 60 09               CALL   printStr   
095C   0D 0A 00               .CSTR   "\r\n"   
095F   C9                     RET      
0960                PRINTSTR:      
0960   E3                     EX   (sp),hl   ; swap			
0961   CD 1F 09               CALL   prtstr   
0964   23                     INC   hl   ; inc past NUL
0965   E3                     EX   (sp),hl   ; put it back	
0966   C9                     RET      
0967                DEFINE:      
0967   E1                     POP   hl   
0968   7E                     LD   a,(hl)   
0969   23                     INC   hl   
096A   44 4D                  LD   bc,hl   
096C   5F                     LD   e,a   
096D   16 00                  LD   d,0   
096F   19                     ADD   hl,de   
0970   5E                     LD   e,(hl)   
0971   23                     INC   hl   
0972   56                     LD   d,(hl)   
0973   23                     INC   hl   
0974   E5                     PUSH   hl   ; bc = str
0975   D5                     PUSH   de   
0976   CD 0E 08               CALL   hashStr   ; hl = hash
0979   D1                     POP   de   
097A   44 4D                  LD   bc,hl   
097C   C3 27 08               JP   defineEntry   
097F                INIT:        
097F   DD 21 6E 0B            LD   ix,next   
0983   FD 21 80 18            LD   iy,STACK   
0987   21 80 01               LD   hl,isysVars   
098A   11 98 18               LD   de,sysVars   
098D   01 10 00               LD   bc,8 * 2   
0990   ED B0                  LDIR      
0992   3E FF                  LD   a,UNUSED   
0994   06 00                  LD   b,0   
0996   21 00 1B               LD   hl,hashSlots   
0999                INIT1:       
0999   77                     LD   (hl),a   
099A   23                     INC   hl   
099B   10 FC                  DJNZ   init1   
099D   CD 67 09               CALL   define   
09A0   04 61 62 73 00         .PSTR   "abs",0   
09A5   AE 07                  DW   abs1   
09A7   CD 67 09               CALL   define   
09AA   05 61 64 64 72 00      .PSTR   "addr",0   
09B0   33 07                  DW   addr   
09B2   CD 67 09               CALL   define   
09B5   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09BC   F5 05                  DW   bytes   
09BE   CD 67 09               CALL   define   
09C1   05 63 61 6C 6C 00      .PSTR   "call",0   
09C7   AF 0B                  DW   call   
09C9   CD 67 09               CALL   define   
09CC   05 63 61 73 65 00      .PSTR   "case",0   
09D2   AC 05                  DW   case   
09D4   CD 67 09               CALL   define   
09D7   06 63 6F 6E 73 74 00   .PSTR   "const",0   
09DE   0A 07                  DW   const   
09E0   CD 67 09               CALL   define   
09E3   04 64 65 66 00         .PSTR   "def",0   
09E8   8A 06                  DW   def   
09EA   CD 67 09               CALL   define   
09ED   05 65 78 65 63 00      .PSTR   "exec",0   
09F3   C4 0B                  DW   exec   
09F5   CD 67 09               CALL   define   
09F8   06 66 61 6C 73 65 00   .PSTR   "false",0   
09FF   00 00                  DW   false   
0A01   CD 67 09               CALL   define   
0A04   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A0C   0C 08                  DW   filter   
0A0E   CD 67 09               CALL   define   
0A11   05 66 72 61 63 00      .PSTR   "frac",0   
0A17   9B 07                  DW   frac   
0A19   CD 67 09               CALL   define   
0A1C   04 67 65 74 00         .PSTR   "get",0   
0A21   09 05                  DW   get   
0A23   CD 67 09               CALL   define   
0A26   05 68 61 73 68 00      .PSTR   "hash",0   
0A2C   7F 06                  DW   hash   
0A2E   CD 67 09               CALL   define   
0A31   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A38   E8 07                  DW   input   
0A3A   CD 67 09               CALL   define   
0A3D   03 69 66 00            .PSTR   "if",0   
0A41   2A 05                  DW   if   
0A43   CD 67 09               CALL   define   
0A46   05 69 66 74 65 00      .PSTR   "ifte",0   
0A4C   2F 05                  DW   ifte   
0A4E   CD 67 09               CALL   define   
0A51   04 6B 65 79 00         .PSTR   "key",0   
0A56   FC 07                  DW   key   
0A58   CD 67 09               CALL   define   
0A5B   04 6C 65 74 00         .PSTR   "let",0   
0A60   E1 06                  DW   let   
0A62   CD 67 09               CALL   define   
0A65   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0A6B   5C 05                  DW   loop   
0A6D   CD 67 09               CALL   define   
0A70   04 6D 61 70 00         .PSTR   "map",0   
0A75   0C 08                  DW   map   
0A77   CD 67 09               CALL   define   
0A7A   04 6D 6F 64 00         .PSTR   "mod",0   
0A7F   BB 07                  DW   mod   
0A81   CD 67 09               CALL   define   
0A84   04 6E 65 67 00         .PSTR   "neg",0   
0A89   05 08                  DW   neg   
0A8B   CD 67 09               CALL   define   
0A8E   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A96   F3 07                  DW   output   
0A98   CD 67 09               CALL   define   
0A9B   05 73 63 61 6E 00      .PSTR   "scan",0   
0AA1   01 00                  DW   scan   
0AA3   CD 67 09               CALL   define   
0AA6   07 73 65 6C 65 63 74 00 .PSTR   "select",0   
0AAE   C0 05                  DW   select   
0AB0   CD 67 09               CALL   define   
0AB3   04 73 65 74 00         .PSTR   "set",0   
0AB8   18 05                  DW   set   
0ABA   CD 67 09               CALL   define   
0ABD   04 73 68 6C 00         .PSTR   "shl",0   
0AC2   CB 03                  DW   shl   
0AC4   CD 67 09               CALL   define   
0AC7   04 73 68 72 00         .PSTR   "shr",0   
0ACC   DB 03                  DW   shr   
0ACE   CD 67 09               CALL   define   
0AD1   05 73 71 72 74 00      .PSTR   "sqrt",0   
0AD7   A1 07                  DW   sqrt1   
0AD9   CD 67 09               CALL   define   
0ADC   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0AE4   52 05                  DW   switch   
0AE6   CD 67 09               CALL   define   
0AE9   05 74 72 75 65 00      .PSTR   "true",0   
0AEF   FF FF                  DW   true   
0AF1   CD 67 09               CALL   define   
0AF4   06 77 6F 72 64 73 00   .PSTR   "words",0   
0AFB   F0 05                  DW   words   
0AFD   C9                     RET      
0AFE                START:       
0AFE   31 80 18               LD   sp,STACK   ; start of Siena
0B01   CD 7F 09               CALL   init   ; setups
0B04   CD 60 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B07   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0B14                INTERPRET:      
0B14   CD 50 09               CALL   prompt   
0B17   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B1A   ED 43 9C 18            LD   (vTIBPtr),bc   
0B1E                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B1E   1E 00                  LD   e,0   ; initilize nesting value
0B20   C5                     PUSH   bc   ; save offset into TIB,
0B21                             ; bc is also the count of chars in TIB
0B21   21 00 19               LD   hl,TIB   ; hl is start of TIB
0B24   18 06                  JR   interpret4   
0B26                INTERPRET3:      
0B26   7E                     LD   a,(hl)   ; a = char in TIB
0B27   23                     INC   hl   ; inc pointer into TIB
0B28   0B                     DEC   bc   ; dec count of chars in TIB
0B29   CD 24 09               CALL   nesting   ; update nesting value
0B2C                INTERPRET4:      
0B2C   79                     LD   a,c   ; is count zero?
0B2D   B0                     OR   b   
0B2E   20 F6                  JR   nz,interpret3   ; if not loop
0B30   C1                     POP   bc   ; restore offset into TIB
0B31                WAITCHAR:      
0B31   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B34   FE 20                  CP   $20   ; compare to space
0B36   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B38   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B3A                             ; ???? NEEDED?
0B3A   28 2A                  JR   z,waitchar4   
0B3C   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B3E   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B40                MACRO:       
0B40                             ;  ld (vTIBPtr),bc
0B40                             ;  ld hl,ctrlCodes
0B40                             ;  add a,l			            ; look up key of macros
0B40                             ;  ld l,a
0B40                             ;  ld e,(hl)
0B40                             ;  ld a,e
0B40                             ;  or a
0B40                             ;  jr z,macro1
0B40                             ;  ld d,msb(macros)
0B40                             ;  push de
0B40                             ;  call call		            ; Siena exec_ operation and jump to it
0B40                             ;  db DC1,0
0B40                             ; macro1:
0B40                             ;  ld bc,(vTIBPtr)
0B40   18 DC                  JR   interpret2   
0B42                WAITCHAR1:      
0B42   21 00 19               LD   hl,TIB   
0B45   09                     ADD   hl,bc   
0B46   77                     LD   (hl),a   ; store the character in textbuf
0B47   03                     INC   bc   
0B48   CD 85 00               CALL   putchar   ; echo character to screen
0B4B   CD 24 09               CALL   nesting   
0B4E   18 E1                  JR   waitchar   ; wait for next character
0B50                WAITCHAR3:      
0B50   21 00 19               LD   hl,TIB   
0B53   09                     ADD   hl,bc   
0B54   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B56   23                     INC   hl   
0B57   36 0A                  LD   (hl),"\n"   
0B59   23                     INC   hl   
0B5A   03                     INC   bc   
0B5B   03                     INC   bc   
0B5C   CD 59 09               CALL   crlf   ; echo character to screen
0B5F   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B60   B7                     OR   a   
0B61   20 CE                  JR   nz,waitchar   
0B63   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0B65   03                     INC   bc   
0B66                WAITCHAR4:      
0B66   ED 43 9C 18            LD   (vTIBPtr),bc   
0B6A   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B6D                             ; we pressed enter
0B6D   0B                     DEC   bc   
0B6E                NEXT:        
0B6E   03                     INC   bc   ; Increment the IP
0B6F   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B70                             ; bit 7,a                   ; is 15-bit opcode ?
0B70                             ; jr nz,next3
0B70   FE 20                  CP   " "   ; whitespace?
0B72   28 FA                  JR   z,next   ; space? ignore
0B74   38 07                  JR   c,next1   
0B76   6F                     LD   l,a   ; index into table
0B77   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B79   6E                     LD   l,(hl)   ; get low jump address
0B7A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0B7C   E9                     JP   (hl)   ; Jump to routine
0B7D                NEXT1:       
0B7D   FE 1B                  CP   ESC   ; escape from interpreter
0B7F   28 07                  JR   z,escape   
0B81   FE 00                  CP   NUL   ; end of input string?
0B83   28 15                  JR   z,exit   
0B85                             ; cp ETX                      ; end of command line input text?
0B85                             ; jr nz,next
0B85                             ;     ld hl,-STACK               ; etx, is SP valid? (too many pops?)
0B85                             ;     add hl,sp
0B85                             ;     jr nc,next2
0B85                             ;     ld sp,STACK                ; yes, reset stack
0B85                             ; next2:
0B85   C3 14 0B               JP   interpret   ; no, other whitespace, macros?
0B88                             ; next3:
0B88                             ;     ld h,a                    ; build address
0B88                             ;     inc bc
0B88                             ;     ld a,(bc)
0B88                             ;     ld l,a
0B88                             ;     add hl,hl
0B88                             ;     jp (hl)
0B88                ESCAPE:      
0B88   60 69                  LD   hl,bc   ; address of code after escape opcode
0B8A   23                     INC   hl   
0B8B   E9                     JP   (hl)   
0B8C                             ; clear stack args
0B8C                CLEAR:       
0B8C   FD 54                  LD   d,iyh   ; de = BP
0B8E   FD 5D                  LD   e,iyl   
0B90   EB                     EX   de,hl   ; hl = BP, de = result
0B91   F9                     LD   sp,hl   ; sp = BP
0B92   21 00 00               LD   hl,0   
0B95   22 9A 18               LD   (vDataWidth),hl   
0B98   DD E9                  JP   (ix)   
0B9A                EXIT:        
0B9A   50 59                  LD   de,bc   ; address of code after exit opcode
0B9C   13                     INC   de   
0B9D   D9                     EXX      
0B9E   C1                     POP   bc   ; bc = last result
0B9F   FD 54                  LD   d,iyh   ; de = BP
0BA1   FD 5D                  LD   e,iyl   
0BA3   EB                     EX   de,hl   ; hl = BP
0BA4   F9                     LD   sp,hl   ; sp = BP
0BA5   D9                     EXX      
0BA6   E1                     POP   hl   ; hl = old BP
0BA7   C1                     POP   bc   ; pop SCP (discard)
0BA8   C1                     POP   bc   ; bc = IP
0BA9   F9                     LD   sp,hl   ; sp = old BP
0BAA   D9                     EXX      
0BAB   C5                     PUSH   bc   ; push result
0BAC   D9                     EXX      
0BAD   EB                     EX   de,hl   
0BAE   E9                     JP   (hl)   
0BAF                             ; call with args
0BAF                             ; creates a scope
0BAF                CALL:        ; execute code at pointer
0BAF   E1                     POP   hl   ; hl = pointer to code
0BB0   7C                     LD   a,h   ; skip if destination address is NUL
0BB1   B5                     OR   l   
0BB2   28 0E                  JR   z,call2   
0BB4   C5                     PUSH   bc   ; push IP
0BB5   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0BB7   FD E5                  PUSH   iy   ; push BP
0BB9   FD 21 00 00            LD   iy,0   ; BP = SP
0BBD   FD 39                  ADD   iy,sp   
0BBF   44 4D                  LD   bc,hl   ; IP = pointer to code
0BC1   0B                     DEC   bc   ; dec to prepare for next routine
0BC2                CALL2:       
0BC2   DD E9                  JP   (ix)   
0BC4                             ; execute a block of code
0BC4                             ; uses parent scope
0BC4                EXEC:        ; execute code at pointer
0BC4   E1                     POP   hl   ; hl = pointer to code
0BC5   7C                     LD   a,h   ; skip if destination address is NUL
0BC6   B5                     OR   l   
0BC7   28 13                  JR   z,exec2   
0BC9   C5                     PUSH   bc   ; push IP
0BCA   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BCD   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BD0   D5                     PUSH   de   ; push SCP
0BD1   FD E5                  PUSH   iy   ; push BP
0BD3   FD 21 00 00            LD   iy,0   ; BP = SP
0BD7   FD 39                  ADD   iy,sp   
0BD9   44 4D                  LD   bc,hl   ; IP = pointer to code
0BDB   0B                     DEC   bc   ; dec to prepare for next routine
0BDC                EXEC2:       
0BDC   DD E9                  JP   (ix)   
0BDE                             ; -- addr
0BDE                             ; returns address of variable
0BDE                DOVAR:       ; execute code at pointer
0BDE   DD E9                  JP   (ix)   
0BE0                             ; -- value
0BE0                             ; returns address of variable
0BE0                DOCONST:      ; execute code at pointer
0BE0   E1                     POP   hl   
0BE1   5E                     LD   e,(hl)   
0BE2   23                     INC   hl   
0BE3   56                     LD   d,(hl)   
0BE4   D5                     PUSH   de   
0BE5   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                          DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "0 [{1}] switch", 1
4000   31 80 18               LD   SP,STACK   
4003   CD 7F 09               CALL   init   
4006   CD C4 0B               CALL   exec   
4009   30 20 5B 7B 31 7D 5D 20 73 77 69 74 63 68 00 .CSTR   "0 [{1}] switch"   
4018                          ;*Macro unroll:  expect "0 [{1}] switch",1
4018   E1                     POP   HL   
4019   E5                     PUSH   HL   
401A   11 01 00               LD   DE,1   
401D   B7                     OR   A   
401E   ED 52                  SBC   HL,DE   
4020   7D                     LD   A,L   
4021   B4                     OR   H   
4022   28 59                  JR   Z,expectM_0_2381S43   
4024   CD 60 09               CALL   printStr   
4027   43 6F 64 65 3A 20 30 20 5B 7B 31 7D 5D 20 73 77 69 74 63 68 00 .CSTR   "Code: ","0 [{1}] switch"   
403C   CD 60 09               CALL   printStr   
403F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404E   21 01 00               LD   HL,1   
4051   CD B4 08               CALL   prtdec   
4054   CD 60 09               CALL   printStr   
4057   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4064   E1                     POP   hl   
4065   E5                     PUSH   hl   
4066   CD B4 08               CALL   prtdec   
4069   E1                     POP   hl   
406A   CD 60 09               CALL   printStr   
406D   20 28 23 00            .CSTR   " (#"   
4071   CD FC 08               CALL   prthex   
4074   CD 60 09               CALL   printStr   
4077   29 0D 0A 00            .CSTR   ")\r\n"   
407B   76                     HALT      
407C   00                     .CSTR      
407D                EXPECTM_0_2381S43:      
407D   E1                     POP   HL   
407E                             ; test "1 [{1} {2} {3}] switch", 2
407E                             ; test "9 [{1} {5}] switch", 5
407E                             ; test ":add1 { $1 0? get $2 +} [1] closure 3 add1", 4
407E                             ; test "bytes 'ABC' get", $41
407E                             ; test "bytes [1 2 3] get", 1
407E                             ; test ":xyz 123 const ; xyz", 123
407E                             ; test ":x 1 const ; x", 1
407E                             ; test ":x 'A' const x get", $41
407E                             ; test ":x [1] const x get", 1
407E                             ; test ":x [1 2 3] const x 2? get", 3
407E                             ; test "2 (1 2 +) *", 6
407E                             ; test ":xyz 123 const ; xyz", 123
407E                             ; test ":xyz 123 let ; xyz get", 123
407E                             ; test "1 2 {$1 $2 +} call", 3
407E                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
407E                             ; test ":xyz {1} def :xyz addr call", 1
407E                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
407E                             ; test ":xyz {10} def :xyz addr exec", 10
407E                             ; test ":xyz {10} def :xyz addr call", 10
407E                             ; test "'hello' hash", $7f54
407E                             ; test ":hello", $7f54
407E                             ; test "bytes [1 2 3]", $1e02
407E                             ; test "bytes [1 2 3] 1? get", 2
407E                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
407E                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
407E                             ; test "words [1 2 3]", $1e02
407E                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
407E                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
407E                             ; test "words [10 20 30] 1 ? get", 10
407E                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
407E                             ; test "{{{1} exec} exec} exec", 1
407E                             ; test "5 {{{$1} exec} exec} call", 5
407E                             ; test "5 {$1} call", 5
407E                             ; test "5 {{$1} exec} call", 5
407E                             ; test "2 1 {{$1} call} call", 2
407E                             ; test "2 1 {$2} call", 1
407E                             ; test "2 1 {$1} call", 2
407E                             ; test "2 1 {$2} call", 1
407E                             ; test "2 4 {$2} call", 4
407E                             ; test "{{1} call} call", 1
407E                             ; test "5 {-1 {$1} if} call", 5
407E                             ; test "0 {} loop", 0
407E                             ; test "1 {1-} loop", $1a00
407E                             ; test "65 .c", 0
407E                             ; test "1 2 <", TRUE
407E                             ; test "2 2 <=", TRUE
407E                             ; test "2 1 <", FALSE
407E                             ; test "1 2 >", FALSE
407E                             ; test "2 2 >=", TRUE
407E                             ; test "2 1 >", TRUE
407E                             ; test "10 sqrt", 3
407E                             ; test "10 sqrt frac", 1
407E                             ; test "7 3 /", 2
407E                             ; test "7 3 / frac", 1
407E                             ; test "1 2 +", 3
407E                             ; test ":h {1} def :h addr call", 1
407E                             ; test "1 2 +", 3
407E                             ; test "4 1 2 +", 3
407E                             ; test "1", 1
407E                             ; test "2", 2
407E                             ; test "``", 0
407E                             ; test "`a`", $61
407E                             ; test "`\\``", $60
407E                             ; test "`b` 'cba' in", -1
407E                             ; test "`x` 'cba' in", 0
407E                             ; test "5 0 {1} if", 5
407E                             ; test "0 {1} {2} ifte", 2
407E                             ; test "5 -1 {1} if", 1
407E                             ; test "-1 {1} {2} ifte", 1
407E                             ; test "9 sw {1} {5} ca", 5
407E                             ; test "0 sw {1} ca", 1
407E                             ; test "1 sw {1} {2} {3} ca", 2
407E                             ; test "5 -1 {2} if", 2
407E                             ; test "5 0 {2} if", 5
407E                             ; test "5 0 {0 {2} if} if", 5
407E                             ; test "5 0 {-1 {2} if} if", 5
407E                             ; test "5 -1 {2} if", 2
407E                             ; test "5 -1 {-1 {2} if} if", 2
407E                             ; test "{1} ex", 1
407E                             ; test "'A' @", 65
407E                             ; test "1", 1
407E                             ; test "0", 0
407E                             ; test "10", 10
407E                             ; test "123", 123
407E                             ; test "$10", $10
407E                             ; test "$FF", $FF
407E                             ; test "2 3 =", 0
407E                             ; test "3 3 =", 1
407E                             ; test "2 3 <", 1
407E                             ; test "3 3 <", 0
407E                             ; test "3 3 >", 0
407E                             ; test "4 3 >", 1
407E                             ; test "1 2 +", 3
407E                             ; test "123 456 +", 123+456
407E                             ; test "64 128 +", 64+128
407E                             ; test "5 3 -", 2
407E                             ; test "3 5 &", 1
407E                             ; test "3 5 |", 7
407E                             ; test "2 3 *", 6
407E                             ; test "1 2 3 + *", 5
407E                             ; ; test "1 2 3 ' +", 3
407E                             ; ; test "1_ 2 +",1
407E                             ; ; test "1_ 1 +",0
407E                             ; ; call enter
407E                             ; ;     .cstr "1 3",$22,"+"
407E                             ; ; expect "1 3 DUP +", 6
407E                             ; ; test "5 2/'", 2
407E                             ; ; test "3 5$ -", 2
407E                             ; ; test "5 2/$ '", 1
407E                             ; ; test "2 3%++", 7
407E                             ; ; test "1 2 3~''", 2
407E                             ; ; test "1 2 3~+*", 8
407E                             ; ; test "2a!a@",2
407E                             ; ; test "3x! 1 x@+x! x@", 4
407E                             ; ; test "3x! 1_ x@+x! x@", 2
407E                             ; ; test "1{", 2
407E                             ; ; test "1}", 0
407E                             ; ; test "2}", 1
407E                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
407E                             ; ; test "{2} \\^", 2
407E                             ; ; test ":X1; X", 1
407E                             ; ; test ":A100;A", 100
407E                             ; ; test ":Aa!; 3A a@", 3
407E                             ; ; test ":Aa!;:Ba@;4AB", 4
407E                             ; ; test "[]$ '", 0
407E                             ; ; test "[3]$ '", 1
407E                             ; ; test "[3]'@", 3
407E                             ; ; test "[1 2 3]'@", 1
407E                             ; ; test "[1 2 3]'2+@", 2
407E                             ; ; test "\\h@[1]''\\h@$-", 2
407E                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
407E                             ; ; test "\\[]$ '", 0
407E                             ; ; test "\\[3]'\\@", 3
407E                             ; ; test "\\[3]$ '", 1
407E                             ; ; test "\\[1 2 3]'\\@", 1
407E                             ; ; test "\\[1 2 3]'1+\\@", 2
407E                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
407E                             ; ; test "\\h@\\[1]''\\h@$-", 1
407E                             ; ; test "\\`A`\\@",65
407E                             ; ; test "0 0{1+}", 0
407E                             ; ; test "0 1{1+}", 1
407E                             ; ; test "0 2{1+}", 2
407E                             ; ; test "0 1{0{1+}}", 0
407E                             ; ; test "0 1{1{1+}}", 1
407E                             ; ; test "0 2{1{1+}}", 2
407E                             ; ; test "0 2{2{1+}}", 4
407E                             ; ; test "0 1{\\i@+}", 0
407E                             ; ; test "0 2{\\i@+}", 1
407E                             ; ; test "0 3{\\i@+}", 3
407E                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
407E                             ; ; test "0t! 10{1 t@+t!} t@",10
407E                             ; ; test "0{100}{200}",200
407E                             ; ; test "1{100}{200}",100
407E                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
407E                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
407E                             ; ; test ":X10;\\0X", 10
407E                             ; ; test "2 \\1x! \\1x@", 2
407E   CD 60 09               CALL   printStr   
4081   44 6F 6E 65 21 00      .CSTR   "Done!"   
4087   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               080C DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
                    > USED AT LINE 1873 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1802 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1833 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 205 IN Siena.asm
CLEAR_:             030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 257 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 259 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 261 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 263 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 265 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 267 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 269 IN Siena.asm
AND_:               0361 DEFINED AT LINE 271 IN Siena.asm
AND1:               0368 DEFINED AT LINE 279 IN Siena.asm
                    > USED AT LINE 292 IN Siena.asm
                    > USED AT LINE 303 IN Siena.asm
OR_:                036C DEFINED AT LINE 284 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 294 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 296 IN Siena.asm
                    > USED AT LINE 307 IN Siena.asm
INV_:               037E DEFINED AT LINE 305 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 309 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 316 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 321 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 324 IN Siena.asm
SUB2:               0395 DEFINED AT LINE 327 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
EQ_:                039B DEFINED AT LINE 333 IN Siena.asm
GT_:                03A0 DEFINED AT LINE 337 IN Siena.asm
LT_:                03A4 DEFINED AT LINE 341 IN Siena.asm
LT1:                03A6 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
DIV_:               03B1 DEFINED AT LINE 352 IN Siena.asm
COMMENT_:           03C0 DEFINED AT LINE 363 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
NOP_:               03C9 DEFINED AT LINE 371 IN Siena.asm
SHL:                03CB DEFINED AT LINE 381 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
SHL1:               03D3 DEFINED AT LINE 388 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
SHL2:               03D4 DEFINED AT LINE 390 IN Siena.asm
                    > USED AT LINE 387 IN Siena.asm
SHR:                03DB DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
SHR1:               03E3 DEFINED AT LINE 405 IN Siena.asm
                    > USED AT LINE 409 IN Siena.asm
SHR2:               03E7 DEFINED AT LINE 408 IN Siena.asm
                    > USED AT LINE 404 IN Siena.asm
MUL:                03EE DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
MUL2:               03F8 DEFINED AT LINE 423 IN Siena.asm
                    > USED AT LINE 432 IN Siena.asm
NUM:                040A DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0413 DEFINED AT LINE 443 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
NUM1:               0414 DEFINED AT LINE 445 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM2:               042C DEFINED AT LINE 463 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
NUM3:               0437 DEFINED AT LINE 471 IN Siena.asm
                    > USED AT LINE 466 IN Siena.asm
HEXNUM:             043A DEFINED AT LINE 475 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            043D DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 494 IN Siena.asm
HEXNUM2:            0445 DEFINED AT LINE 483 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
STRING:             0457 DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
STRING1:            045F DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
STRING2:            0462 DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
CHAR:               0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 262 IN Siena.asm
CHAR1:              0473 DEFINED AT LINE 517 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
CHAR2:              047F DEFINED AT LINE 526 IN Siena.asm
                    > USED AT LINE 523 IN Siena.asm
CHAR3:              0482 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 521 IN Siena.asm
PAREN:              0485 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PAREN2:             048B DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
PARENEND:           0492 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              04A1 DEFINED AT LINE 551 IN Siena.asm
                    > USED AT LINE 258 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
BLOCK1:             04A5 DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
BLOCK2:             04CB DEFINED AT LINE 579 IN Siena.asm
BLOCK3:             04CE DEFINED AT LINE 582 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 573 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
BLOCK4:             04D4 DEFINED AT LINE 587 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
                    > USED AT LINE 564 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
BLOCKEND:           04DA DEFINED AT LINE 594 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
ARG:                04EE DEFINED AT LINE 609 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
GET:                0509 DEFINED AT LINE 630 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
GET1:               0515 DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
SET:                0518 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
SET1:               0527 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 652 IN Siena.asm
IF:                 052A DEFINED AT LINE 710 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
IFTE:               052F DEFINED AT LINE 716 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
IFTE1:              0530 DEFINED AT LINE 718 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
IFTE2:              0539 DEFINED AT LINE 727 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
IFTE3:              0550 DEFINED AT LINE 740 IN Siena.asm
                    > USED AT LINE 730 IN Siena.asm
SWITCH:             0552 DEFINED AT LINE 745 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
LOOP:               055C DEFINED AT LINE 758 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
LOOP1:              0571 DEFINED AT LINE 770 IN Siena.asm
                    > USED AT LINE 791 IN Siena.asm
LOOP2:              058C DEFINED AT LINE 786 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
LOOP3:              0596 DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
CASE:               05AC DEFINED AT LINE 807 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
SELECT:             05C0 DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
CASE0:              05DC DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
CASE1:              05E1 DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
CASE2:              05EE DEFINED AT LINE 851 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
WORDS:              05F0 DEFINED AT LINE 854 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
BYTES:              05F5 DEFINED AT LINE 857 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
BYTES1:             05F8 DEFINED AT LINE 859 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
ARRAY:              05FD DEFINED AT LINE 863 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
ARRAYEND:           060F DEFINED AT LINE 873 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
ARRAYEND1:          062F DEFINED AT LINE 896 IN Siena.asm
                    > USED AT LINE 907 IN Siena.asm
ARRAYEND2:          063F DEFINED AT LINE 910 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
ARRAYEND3:          0652 DEFINED AT LINE 926 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
HASH:               067F DEFINED AT LINE 967 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
DEF:                068A DEFINED AT LINE 977 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
DEF1:               069C DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
DEF2:               06C0 DEFINED AT LINE 1013 IN Siena.asm
DEF3:               06C3 DEFINED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
DEF4:               06C9 DEFINED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1000 IN Siena.asm
DEF5:               06DE DEFINED AT LINE 1037 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
LET:                06E1 DEFINED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
LET1:               06F3 DEFINED AT LINE 1054 IN Siena.asm
LET2:               0707 DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
CONST:              070A DEFINED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
CONST1:             071C DEFINED AT LINE 1087 IN Siena.asm
CONST2:             0730 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
ADDR:               0733 DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
ADDR1:              073F DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
SYMBOL:             0747 DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
SYMBOL0:            074F DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
SYMBOL1:            0751 DEFINED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
SYMBOL2:            0760 DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1137 IN Siena.asm
IDENT:              076E DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
IDENT0:             0775 DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
IDENT1:             0777 DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
IDENT2:             0786 DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
IDENT3:             079A DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
FRAC:               079B DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
SQRT1:              07A1 DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
ABS1:               07AE DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
MOD:                07BB DEFINED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
EQUALS:             07C7 DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
LESSTHANEQ:         07CF DEFINED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHAN:           07D4 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
LESSTHAN1:          07D9 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
TRUE1:              07DC DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
FALSE1:             07E2 DEFINED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
INPUT:              07E8 DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
OUTPUT:             07F3 DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
KEY:                07FC DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
NEG:                0805 DEFINED AT LINE 1290 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
FILTER:             080C DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
MAP:                080C DEFINED AT LINE 1296 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
HASHSTR:            080E DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
HASHSTR1:           0811 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
HASHSTR2:           0816 DEFINED AT LINE 1314 IN Siena.asm
DEFINEENTRY:        0827 DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
DEFINEENTRY0:       082C DEFINED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
DEFINEENTRY1:       083B DEFINED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
DEFINEENTRY2:       0841 DEFINED AT LINE 1355 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
DEFINEENTRY3:       0843 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1340 IN Siena.asm
LOOKUPENTRY:        084D DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
LOOKUPENTRY0:       0852 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
LOOKUPENTRY1:       0861 DEFINED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1382 IN Siena.asm
LOOKUPENTRY2:       0867 DEFINED AT LINE 1394 IN Siena.asm
LOOKUPENTRY3:       0869 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
DIVIDE:             0871 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
DIVIDE1:            0876 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
DIVIDE2:            0883 DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
DIVIDE3:            0884 DEFINED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
SQUAREROOT:         088A DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
SQUAREROOT1:        088F DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
SQUAREROOT4:        08AA DEFINED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
SQUAREROOT5:        08B1 DEFINED AT LINE 1461 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
PRTDEC:             08B4 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            08C3 DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
PRTDEC1:            08E5 DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
PRTDEC2:            08E7 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
PRTDEC3:            08F7 DEFINED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
PRTDEC4:            08F8 DEFINED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
PRTHEX:             08FC DEFINED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0907 DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
PRTHEX3:            0910 DEFINED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
PRTSTR0:            091B DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
PRTSTR:             091F DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
NESTING:            0924 DEFINED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1834 IN Siena.asm
NESTING1A:          092F DEFINED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
NESTING1:           0932 DEFINED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
NESTING2:           0941 DEFINED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
NESTING3:           0943 DEFINED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
NESTING4:           094E DEFINED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
PROMPT:             0950 DEFINED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
CRLF:               0959 DEFINED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1846 IN Siena.asm
PRINTSTR:           0960 DEFINED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 207
DEFINE:             0967 DEFINED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
INIT:               097F DEFINED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 40
INIT1:              0999 DEFINED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
START:              0AFE DEFINED AT LINE 1770 IN Siena.asm
INTERPRET:          0B14 DEFINED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1884 IN Siena.asm
INTERPRET2:         0B1E DEFINED AT LINE 1782 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
INTERPRET3:         0B26 DEFINED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1798 IN Siena.asm
INTERPRET4:         0B2C DEFINED AT LINE 1795 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
WAITCHAR:           0B31 DEFINED AT LINE 1801 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
MACRO:              0B40 DEFINED AT LINE 1811 IN Siena.asm
WAITCHAR1:          0B42 DEFINED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
WAITCHAR3:          0B50 DEFINED AT LINE 1837 IN Siena.asm
                    > USED AT LINE 1809 IN Siena.asm
WAITCHAR4:          0B66 DEFINED AT LINE 1853 IN Siena.asm
                    > USED AT LINE 1807 IN Siena.asm
NEXT:               0B6E DEFINED AT LINE 1859 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 548 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
                    > USED AT LINE 945 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1865 IN Siena.asm
NEXT1:              0B7D DEFINED AT LINE 1872 IN Siena.asm
                    > USED AT LINE 1866 IN Siena.asm
ESCAPE:             0B88 DEFINED AT LINE 1893 IN Siena.asm
                    > USED AT LINE 1874 IN Siena.asm
CLEAR:              0B8C DEFINED AT LINE 1899 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
EXIT:               0B9A DEFINED AT LINE 1908 IN Siena.asm
                    > USED AT LINE 1876 IN Siena.asm
CALL:               0BAF DEFINED AT LINE 1930 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
CALL2:              0BC2 DEFINED AT LINE 1942 IN Siena.asm
                    > USED AT LINE 1934 IN Siena.asm
EXEC:               0BC4 DEFINED AT LINE 1947 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0BDC DEFINED AT LINE 1961 IN Siena.asm
                    > USED AT LINE 1951 IN Siena.asm
DOVAR:              0BDE DEFINED AT LINE 1966 IN Siena.asm
DOCONST:            0BE0 DEFINED AT LINE 1971 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1628 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 358 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 1905 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1854 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 497 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1094 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1786 IN Siena.asm
                    > USED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1634 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2381S43:  407D DEFINED AT LINE 34
                    > USED AT LINE 10
