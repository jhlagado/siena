0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD CA 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                          -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   93 0A                  DW   next   ; g nNext
018E   00 1D                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available " % , ; DEL
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 8A 0B               JP   arg   
0309                PROP_:       
0309   C3 54 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARG_LIST_:      
030F   C3 7F 04               JP   arg_list   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 43 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 66 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD FB 07               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 60 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 B4 05               JP   array   
034B                ARRAYEND_:      
034B   C3 D0 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 B0 06               JP   ident   
0351                SYMBOL_:      
0351   C3 88 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 43 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 0A 07               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 12 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 17 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD B8 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ; arg_list - parses input (ab:c)
047F                             ; names after the : represent uninitialised locals
047F                             ; return values are the state of the stack after the block ends
047F                ARG_LIST:      
047F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arg_list
0488   03                     INC   bc   ; point to next char
0489                ARG_LIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arg_list terminator
048C   28 12                  JR   z,arg_list4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arg_list2   
0492   14                     INC   d   ; non zero value local count acts as flag
0493   20 08                  JR   nz,arg_list3   
0495                ARG_LIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arg_list3   
049C   14                     INC   d   ; if d > 0 increase local count
049D                ARG_LIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arg_list1   
04A0                ARG_LIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arg_list5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARG_LIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arg_list
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050D   FD 46 07               LD   b,(iy+7)   
0510   D9                     EXX      
0511   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0514   FD 56 03               LD   d,(iy+3)   
0517   EB                     EX   de,hl   
0518   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
051B   FD 56 01               LD   d,(iy+1)   
051E                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
051E   13                     INC   de   ; for carry flag <=
051F   B7                     OR   a   
0520   ED 52                  SBC   hl,de   
0522   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0524   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0526   FD 5D                  LD   e,iyl   
0528   21 08 00               LD   hl,8   
052B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
052C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
052D   18 0C                  JR   blockend2   
052F                BLOCKEND1:      ; same scope
052F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0532   FD 56 03               LD   d,(iy+3)   
0535   EB                     EX   de,hl   
0536   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0538   FD 5D                  LD   e,iyl   
053A   EB                     EX   de,hl   
053B                BLOCKEND2:      
053B   44 4D                  LD   bc,hl   ; bc = hl = BP
053D   B7                     OR   a   ; hl = BP - SP = count
053E   ED 72                  SBC   hl,sp   
0540   C5                     PUSH   bc   ; bc = count, hl = BP
0541   44 4D                  LD   bc,hl   
0543   E1                     POP   hl   
0544   2B                     DEC   hl   ; hl = BP-1
0545   1B                     DEC   de   ; de = args*-1
0546   ED B8                  LDDR      
0548   13                     INC   de   ; hl = new tos
0549   EB                     EX   de,hl   
054A   F9                     LD   sp,hl   ; sp = new tos
054B   D9                     EXX      ; bc = IP, iy = oldBP
054C   D5                     PUSH   de   
054D   C5                     PUSH   bc   
054E   D9                     EXX      
054F   C1                     POP   bc   
0550   FD E1                  POP   iy   
0552   DD E9                  JP   (ix)   
0554                             ; blockend:
0554                             ;     exx
0554                             ;     ld e,(iy+0)                 ; de = oldBP
0554                             ;     ld d,(iy+1)
0554                             ;     ld c,(iy+6)                 ; bc = IP
0554                             ;     ld b,(iy+7)
0554                             ;     exx
0554                             ;     ld d,iyh                    ; hl = BP
0554                             ;     ld e,iyl
0554                             ;     ex de,hl
0554                             ;     ld e,(iy+4)                 ; de = BP, hl = arg_list*
0554                             ;     ld d,(iy+5)
0554                             ;     ex de,hl
0554                             ;     ld bc,0                     ; bc = 0, b = num locals = 0, c = num args = 0
0554                             ;     ld a,l                      ; arg_list* == null skip
0554                             ;     or h
0554                             ;     jr z,blockend2
0554                             ;     dec hl                      ; b = (num locals) * 2
0554                             ;     ld b,(hl)
0554                             ;     sla b
0554                             ;     dec hl
0554                             ;     ld c,(hl)                   ; c = (num args) * 2
0554                             ;     sla c
0554                             ; blockend2:
0554                             ;     ld a,8                      ; a = header size in bytes
0554                             ;     add a,c                     ; a = offset to args*
0554                             ;     ld l,a                      ; de = bp, hl = offset to args*
0554                             ;     ld h,0
0554                             ;     add hl,de                   ; de = args*, hl = bp,
0554                             ;     ex de,hl
0554                             ;     push hl                     ; save bp
0554                             ;     or a                        ; bc = count
0554                             ;     sbc hl,sp
0554                             ;     ld bc,hl
0554                             ;     dec bc                      ; bc -= 2 remove space used to save BP
0554                             ;     dec bc
0554                             ;     pop hl                      ; hl = bp
0554                             ;     dec de                      ; de = args*-1
0554                             ;     dec hl                      ; hl = BP-1
0554                             ;     lddr
0554                             ;     inc de                      ; hl = new tos
0554                             ;     ex de,hl
0554                             ;     ld sp,hl                    ; sp = new tos
0554                             ;     exx                         ; bc = IP, iy = oldBP
0554                             ;     push de
0554                             ;     push bc
0554                             ;     exx
0554                             ;     pop bc
0554                             ;     pop iy
0554                             ;     jp (ix)
0554                             ; @1..9
0554                             ; returns address of prop
0554                PROP:        
0554                             ; inc bc                      ; get next char
0554                             ; ld a,(bc)
0554                             ; sub "1"                     ; treat as a digit, 1 based index
0554                             ; and $0F                     ; mask
0554                             ; add a,a                     ; double
0554                             ; ld l,a                      ; hl = offset into args
0554                             ; ld h,0
0554                             ; ld e,(iy+6)                 ; de = closure array
0554                             ; ld d,(iy+7)
0554                             ; add hl,de                   ; find address of prop in array
0554                             ; ld (vPointer),hl             ; store address in setter
0554                             ; ld e,(hl)
0554                             ; inc hl
0554                             ; ld d,(hl)
0554                             ; push de                     ; push prop value
0554   DD E9                  JP   (ix)   
0556                             ; addr -- value
0556                DOLET:       
0556   E1                     POP   hl   
0557   22 9E 18               LD   (vPointer),hl   ; store address in setter
055A                DOLET2:      
055A   5E                     LD   e,(hl)   
055B   23                     INC   hl   
055C   56                     LD   d,(hl)   
055D                DOLET3:      
055D   D5                     PUSH   de   
055E   DD E9                  JP   (ix)   
0560                INDEX:       
0560   E1                     POP   hl   ; hl = index
0561   D1                     POP   de   ; de = addr
0562   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0565   3D                     DEC   a   
0566   28 01                  JR   z,index1   
0568   29                     ADD   hl,hl   ; if data width = 2 then double
0569                INDEX1:      
0569   19                     ADD   hl,de   ; add addr
056A   22 9E 18               LD   (vPointer),hl   ; store address in setter
056D   16 00                  LD   d,0   
056F   5E                     LD   e,(hl)   
0570   B7                     OR   a   ; check data width again
0571   28 02                  JR   z,index2   
0573   23                     INC   hl   
0574   56                     LD   d,(hl)   
0575                INDEX2:      
0575   D5                     PUSH   de   
0576   DD E9                  JP   (ix)   
0578                             ; newvalue --
0578                SET:         
0578   E1                     POP   hl   ; discard last accessed value
0579   D1                     POP   de   ; new value
057A   2A 9E 18               LD   hl,(vPointer)   
057D   73                     LD   (hl),e   
057E   3A 9A 18               LD   a,(vDataWidth)   
0581   3D                     DEC   a   
0582   28 02                  JR   z,set1   
0584   23                     INC   hl   
0585   72                     LD   (hl),d   
0586                SET1:        
0586   DD E9                  JP   (ix)   
0588                             ; if
0588                             ; condition then -- value
0588                IF:          
0588   11 00 00               LD   de,0   ; NUL pointer for else
058B   18 01                  JR   ifte1   
058D                             ; ifte
058D                             ; condition then else -- value
058D                IFTE:        
058D   D1                     POP   de   ; de = else
058E                IFTE1:       
058E   E1                     POP   hl   ; hl = then
058F   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0590   23                     INC   hl   ; check for true
0591   7C                     LD   a,h   
0592   B5                     OR   l   
0593   E1                     POP   hl   ; hl = then
0594   28 01                  JR   z,ifte2   
0596   EB                     EX   de,hl   ; condition = false, hl = else
0597                IFTE2:       
0597   E5                     PUSH   hl   
0598   C3 CB 0A               JP   exec   
059B                             ;     ld a,h                      ; check if hl is NUL
059B                             ;     or l
059B                             ;     jr z,ifte3
059B                             ;     push bc                     ; push IP
059B                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
059B                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
059B                             ;     push de                     ; push ScopeBP
059B                             ;     push iy                     ; push BP
059B                             ;     ld iy,0                     ; iy = sp
059B                             ;     add iy,sp
059B                             ;     ld bc,hl                    ; IP = then
059B                             ;     dec bc
059B                             ; ifte3:
059B                             ;     jp (ix)
059B                             ; switch
059B                             ; index array -- value
059B                SWITCH:      
059B   D1                     POP   de   ; de = array
059C   E1                     POP   hl   ; hl = index
059D   29                     ADD   hl,hl   ; indec *= 2
059E   19                     ADD   hl,de   ; add array[0]
059F   4E                     LD   c,(hl)   ; bc = case
05A0   23                     INC   hl   
05A1   46                     LD   b,(hl)   
05A2   0B                     DEC   bc   
05A3   DD E9                  JP   (ix)   
05A5                             ; c b --
05A5                             ; loops until c = 0
05A5                LOOP:        
05A5   DD E9                  JP   (ix)   
05A7                             ;     pop de                      ; de = block                    c
05A7                             ;     pop hl                      ; hl = condition
05A7                             ;     push de
05A7                             ;     push bc                     ; push IP
05A7                             ;     ld bc,de                    ; bc = block
05A7                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05A7                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05A7                             ;     push de                     ; push ScopeBP
05A7                             ;     push iy                     ; push BP
05A7                             ;     ld iy,0                     ; iy = sp
05A7                             ;     add iy,sp
05A7                             ; loop1:
05A7                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05A7                             ;     or h
05A7                             ;     jr z,loop3
05A7                             ;     ld de,loop2-1               ; IP return address
05A7                             ;     push de
05A7                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05A7                             ;     ld d,(iy+3)
05A7                             ;     push de                     ;
05A7                             ;     push iy                     ; push BP
05A7                             ;     ld iy,0                     ; iy = sp
05A7                             ;     add iy,sp
05A7                             ;     push hl                     ; push condition
05A7                             ;     dec bc
05A7                             ;     jp (ix)
05A7                             ; loop2:
05A7                             ;     db ESC                      ; escape from interpreter
05A7                             ;     ld c,(iy+6)                 ; bc = block
05A7                             ;     ld b,(iy+7)
05A7                             ;     pop hl                      ; hl = condition
05A7                             ;     jr loop1
05A7                             ; loop3:
05A7                             ;     ld d,iyh                    ; de = BP
05A7                             ;     ld e,iyl
05A7                             ;     ex de,hl                    ; hl = BP, de = result
05A7                             ;     ld sp,hl                    ; sp = BP
05A7                             ;     pop hl                      ; hl = old BP
05A7                             ;     pop bc                      ; pop ScopeBP (discard)
05A7                             ;     pop bc                      ; bc = IP
05A7                             ;     ld sp,hl                    ; sp = old BP
05A7                             ;     ld iy,0                     ; iy = sp
05A7                             ;     add iy,sp
05A7                             ;     ld ix,(vNext)                  ; needed?
05A7                             ;     jp (ix)
05A7                WORDS:       
05A7   21 02 00               LD   hl,2   
05AA   18 03                  JR   bytes1   
05AC                BYTES:       
05AC   21 01 00               LD   hl,1   
05AF                BYTES1:      
05AF   22 9A 18               LD   (vDataWidth),hl   
05B2   DD E9                  JP   (ix)   
05B4                ARRAY:       
05B4   11 00 00               LD   de,0   ; create stack frame
05B7   D5                     PUSH   de   ; push null for IP
05B8   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05BB   FD 56 05               LD   d,(iy+5)   ; 
05BE   D5                     PUSH   de   ; 
05BF   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05C2   FD 56 03               LD   d,(iy+3)   ; 
05C5   D5                     PUSH   de   ; 
05C6   FD E5                  PUSH   iy   ; push BP
05C8   FD 21 00 00            LD   iy,0   ; BP = SP
05CC   FD 39                  ADD   iy,sp   
05CE   DD E9                  JP   (ix)   
05D0                ARRAYEND:      
05D0   FD 54                  LD   d,iyh   ; de = BP
05D2   FD 5D                  LD   e,iyl   
05D4   C5                     PUSH   bc   ; save IP
05D5   D9                     EXX      
05D6   C1                     POP   bc   
05D7   D9                     EXX      
05D8   62 6B                  LD   hl,de   ; hl = de = BP
05DA   B7                     OR   a   
05DB   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05DD   CB 3C                  SRL   h   ; 
05DF   CB 1D                  RR   l   
05E1   44 4D                  LD   bc,hl   ; bc = count
05E3   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05E6   71                     LD   (hl),c   ; write num items in length word
05E7   23                     INC   hl   
05E8   70                     LD   (hl),b   
05E9   23                     INC   hl   ; hl = array[0], bc = count
05EA                             ; de = BP, hl = array[0], bc = count
05EA   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05ED   FE 01                  CP   1   
05EF   20 10                  JR   nz,arrayEnd2   
05F1                ARRAYEND1:      ; byte
05F1   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F4   77                     LD   (hl),a   ; write a to array item
05F5   23                     INC   hl   ; move to next byte in array
05F6   FD 2B                  DEC   iy   ; move tho next word on stack
05F8   FD 2B                  DEC   iy   
05FA   0B                     DEC   bc   ; dec items count
05FB   79                     LD   a,c   ; if not zero loop
05FC   B0                     OR   b   
05FD   20 F2                  JR   nz,arrayEnd1   
05FF   18 13                  JR   arrayEnd3   
0601                ARRAYEND2:      ; word
0601   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0604   77                     LD   (hl),a   ; write lsb of array item
0605   23                     INC   hl   ; move to msb of array item
0606   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0609   77                     LD   (hl),a   ; write msb of array item
060A   23                     INC   hl   ; move to next word in array
060B   FD 2B                  DEC   iy   ; move to next word on stack
060D   FD 2B                  DEC   iy   
060F   0B                     DEC   bc   ; dec items count
0610   79                     LD   a,c   ; if not zero loop
0611   B0                     OR   b   
0612   20 ED                  JR   nz,arrayEnd2   
0614                ARRAYEND3:      
0614   EB                     EX   de,hl   ; de = end of array, hl = BP
0615   F9                     LD   sp,hl   ; sp = BP
0616   E1                     POP   hl   ; de = end of array, hl = old BP
0617   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0618   FD 62                  LD   iyh,d   
061A   FD 6B                  LD   iyl,e   
061C   D1                     POP   de   ; pop arg_list (discard)
061D   D1                     POP   de   ; pop ScopeBP (discard)
061E   D1                     POP   de   ; pop IP (discard)
061F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0623   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0626   D9                     EXX      ; restore IP
0627   C5                     PUSH   bc   
0628   D9                     EXX      
0629   C1                     POP   bc   
062A   13                     INC   de   ; de = array[0]
062B   13                     INC   de   
062C   D5                     PUSH   de   ; return array[0]
062D   DD E9                  JP   (ix)   
062F                             ; str -- num
062F                HASH:        
062F   E1                     POP   hl   
0630   C5                     PUSH   bc   
0631   44 4D                  LD   bc,hl   
0633   CD 51 07               CALL   hashStr   
0636   C1                     POP   bc   
0637   E5                     PUSH   hl   
0638   DD E9                  JP   (ix)   
063A                             ; symbol func --
063A                DEF:         
063A   DD 21 41 06            LD   ix,def1   
063E   C3 32 0B               JP   func   
0641                DEF1:        
0641   DD 2A A4 18            LD   ix,(vNext)   
0645   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0646   60 69                  LD   hl,bc   
0648   18 1C                  JR   let1   
064A                             ; symbol value --
064A                LET:         
064A   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
064C   E3                     EX   (sp),hl   
064D   EB                     EX   de,hl   
064E   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0651   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0653   23                     INC   hl   
0654   36 56                  LD   (hl),lsb(dolet)   
0656   23                     INC   hl   
0657   36 05                  LD   (hl),msb(dolet)   
0659   23                     INC   hl   
065A   73                     LD   (hl),e   
065B   23                     INC   hl   
065C   72                     LD   (hl),d   
065D   2B                     DEC   hl   
065E   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0662   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0665   E1                     POP   hl   ; de = addr, hl = IP
0666                LET1:        
0666   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0667   44 4D                  LD   bc,hl   ; bc = symbol
0669   CD 6E 07               CALL   defineEntry   
066C   38 00                  JR   c,let2   
066E                             ; call error
066E                             ; .cstr "Let Collision"
066E                LET2:        
066E   C1                     POP   bc   
066F   DD E9                  JP   (ix)   
0671                             ; symbol -- ptr
0671                ADDR:        
0671   E1                     POP   hl   ; hl = hash
0672   C5                     PUSH   bc   
0673   44 4D                  LD   bc,hl   
0675   CD 94 07               CALL   lookupEntry   
0678   38 03                  JR   c,addr1   
067A   21 00 00               LD   hl,0   
067D                             ; call printStr		
067D                             ; .cstr "Undefined"
067D                             ; jp interpret
067D                ADDR1:       
067D   C1                     POP   bc   
067E   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0681   19                     ADD   hl,de   
0682   22 9E 18               LD   (vPointer),hl   
0685   E5                     PUSH   hl   
0686   DD E9                  JP   (ix)   
0688                SYMBOL:      
0688   03                     INC   bc   
0689   11 00 1A               LD   de,PAD   
068C   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
068E   18 02                  JR   symbol1   
0690                SYMBOL0:      ; copy to PAD area
0690   03                     INC   bc   ; characters that are part of the identifier
0691   13                     INC   de   
0692                SYMBOL1:      ; 0-9 A-Z a-z _
0692   0A                     LD   a,(bc)   
0693   12                     LD   (de),a   
0694   FE 21                  CP   " "+1   
0696   38 0A                  JR   c,symbol2   
0698   6F                     LD   l,a   
0699   7E                     LD   a,(hl)   
069A   FE 4E                  CP   lsb(ident_)   
069C   28 F2                  JR   z,symbol0   
069E   FE 00                  CP   lsb(num_)   
06A0   28 EE                  JR   z,symbol0   
06A2                SYMBOL2:      
06A2   0B                     DEC   bc   
06A3   AF                     XOR   a   
06A4   12                     LD   (de),a   ; terminate string with NUL
06A5   C5                     PUSH   bc   
06A6   01 00 1A               LD   bc,PAD   
06A9   CD 51 07               CALL   hashStr   ; hl = hash
06AC   C1                     POP   bc   
06AD   E5                     PUSH   hl   
06AE   DD E9                  JP   (ix)   
06B0                IDENT:       
06B0   11 00 1A               LD   de,PAD   
06B3   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06B5   18 02                  JR   ident1   
06B7                IDENT0:      ; copy to PAD area
06B7   03                     INC   bc   ; characters that are part of the identifier
06B8   13                     INC   de   
06B9                IDENT1:      ; 0-9 A-Z a-z _
06B9   0A                     LD   a,(bc)   
06BA   12                     LD   (de),a   
06BB                             ; or a
06BB                             ; jr z,ident2
06BB   FE 21                  CP   " "+1   
06BD   38 0A                  JR   c,ident2   
06BF   6F                     LD   l,a   
06C0   7E                     LD   a,(hl)   
06C1   FE 4E                  CP   lsb(ident_)   
06C3   28 F2                  JR   z,ident0   
06C5   FE 00                  CP   lsb(num_)   
06C7   28 EE                  JR   z,ident0   
06C9                IDENT2:      
06C9   0B                     DEC   bc   
06CA   AF                     XOR   a   
06CB   12                     LD   (de),a   ; terminate string with NUL
06CC   C5                     PUSH   bc   
06CD   01 00 1A               LD   bc,PAD   
06D0   CD 51 07               CALL   hashStr   ; hl = hash
06D3   44 4D                  LD   bc,hl   
06D5   CD 94 07               CALL   lookupEntry   
06D8   C1                     POP   bc   
06D9   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06DB   DD E9                  JP   (ix)   
06DD                IDENT3:      
06DD   E9                     JP   (hl)   
06DE                FRAC:        
06DE   2A 98 18               LD   hl,(vFrac)   
06E1   E5                     PUSH   hl   
06E2   DD E9                  JP   (ix)   
06E4                SQRT1:       
06E4   E1                     POP   hl   
06E5   C5                     PUSH   bc   
06E6   CD D1 07               CALL   squareRoot   
06E9   ED 43 98 18            LD   (vFrac),bc   
06ED   C1                     POP   bc   
06EE   D5                     PUSH   de   
06EF   DD E9                  JP   (ix)   
06F1                ABS1:        
06F1   E1                     POP   hl   
06F2   CB 7C                  BIT   7,h   
06F4   C8                     RET   z   
06F5   AF                     XOR   a   
06F6   95                     SUB   l   
06F7   6F                     LD   l,a   
06F8   9F                     SBC   a,a   
06F9   94                     SUB   h   
06FA   67                     LD   h,a   
06FB   E5                     PUSH   hl   
06FC   DD E9                  JP   (ix)   
06FE                MOD:         
06FE   D1                     POP   de   ; get first value
06FF   E1                     POP   hl   ; get 2nd value
0700   C5                     PUSH   bc   ; preserve the IP
0701   44 4D                  LD   bc,hl   
0703   CD B8 07               CALL   divide   
0706   C1                     POP   bc   
0707   E5                     PUSH   hl   ; push remainder
0708   DD E9                  JP   (ix)   
070A                             ; hl = value1, de = value2
070A                             ; hl = result
070A                EQUALS:      
070A   B7                     OR   a   ; reset the carry flag
070B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
070D   28 10                  JR   z,true1   
070F   C3 25 07               JP   false1   
0712                             ; hl = value1 de = value2
0712                             ; hl = result
0712                LESSTHANEQ:      
0712   B7                     OR   a   
0713   ED 52                  SBC   hl,de   
0715   18 05                  JR   lessthan1   
0717                             ; hl = value1 de = value2
0717                             ; hl = result
0717                LESSTHAN:      
0717   B7                     OR   a   
0718   ED 52                  SBC   hl,de   
071A   28 09                  JR   z,false1   
071C                LESSTHAN1:      
071C   FA 25 07               JP   m,false1   
071F                TRUE1:       
071F   21 FF FF               LD   hl,TRUE   
0722   E5                     PUSH   hl   
0723   DD E9                  JP   (ix)   
0725                FALSE1:      
0725   21 00 00               LD   hl,FALSE   
0728   E5                     PUSH   hl   
0729   DD E9                  JP   (ix)   
072B                             ; Z80 port input
072B                             ; port -- value
072B                INPUT:       
072B   E1                     POP   hl   
072C   59                     LD   e,c   ; save IP
072D   4D                     LD   c,l   
072E   ED 68                  IN   l,(c)   
0730   26 00                  LD   h,0   
0732   4B                     LD   c,e   ; restore IP
0733   E5                     PUSH   hl   
0734   DD E9                  JP   (ix)   
0736                             ; Z80 port output
0736                             ; value port --
0736                OUTPUT:      
0736   E1                     POP   hl   
0737   59                     LD   e,c   ; save IP
0738   4D                     LD   c,l   
0739   E1                     POP   hl   
073A   ED 69                  OUT   (c),l   
073C   4B                     LD   c,e   ; restore IP
073D   DD E9                  JP   (ix)   
073F                KEY:         
073F   CD 81 00               CALL   getchar   
0742   26 00                  LD   h,0   
0744   6F                     LD   l,a   
0745   E5                     PUSH   hl   
0746   DD E9                  JP   (ix)   
0748                NEG:         
0748   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
074B   D1                     POP   de   
074C   C3 94 03               JP   sub2   ; use the SUBtract routine
074F                FILTER:      
074F                MAP:         
074F                SCAN:        
074F   DD E9                  JP   (ix)   
0751                             ; -------------------------------------------------------------------------------
0751                             ; hash C-string
0751                             ; BC = str
0751                             ; HL = hash
0751                HASHSTR:      
0751   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
0755   21 00 00               LD   hl,0   
0758                HASHSTR1:      
0758   0A                     LD   a,(bc)   ; load next char
0759   03                     INC   bc   
075A   FE 00                  CP   0   ; NUL?
075C   C8                     RET   z   
075D                HASHSTR2:      
075D   16 00                  LD   d,0   
075F   5F                     LD   e,a   
0760   19                     ADD   hl,de   
0761   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0763   29                     ADD   hl,hl   ; shift left
0764   19                     ADD   hl,de   ; add
0765   29                     ADD   hl,hl   ; shift left
0766   29                     ADD   hl,hl   ; shift left
0767   29                     ADD   hl,hl   ; shift left
0768   29                     ADD   hl,hl   ; shift left
0769   29                     ADD   hl,hl   ; shift left
076A   29                     ADD   hl,hl   ; shift left
076B   19                     ADD   hl,de   ; add
076C   18 EA                  JR   hashStr1   
076E                             ; add entry to hash slots and hash pointers
076E                             ; bc = hash (b = hi, c = lo), de = addr
076E                             ; sets carry if successful
076E                DEFINEENTRY:      
076E   CB 21                  SLA   c   ; lo = lo * 2
0770   69                     LD   l,c   ; lo1 = lo
0771   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0773                DEFINEENTRY0:      
0773   7E                     LD   a,(hl)   ; a = (lo1)
0774   FE FF                  CP   UNUSED   ; is it unused?
0776   28 12                  JR   z,defineEntry3   ; yes, add entry
0778   79                     LD   a,c   ; a = lo
0779   BE                     CP   (hl)   ; compare (lo1) with lo
077A   20 06                  JR   nz,defineEntry1   ; no match loop around
077C   2C                     INC   l   
077D   78                     LD   a,b   ; a = hi
077E   BE                     CP   (hl)   ; compare (lo1+1) with hi
077F   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0781   2D                     DEC   l   ; restore l
0782                DEFINEENTRY1:      
0782   2C                     INC   l   ; try next entry
0783   2C                     INC   l   
0784   79                     LD   a,c   ; compare lo and lo1
0785   BD                     CP   l   ; if equal then there's no space left, reject
0786   20 EB                  JR   nz,defineEntry0   
0788                DEFINEENTRY2:      
0788   B7                     OR   a   ; clear carry flag, failure
0789   C9                     RET      
078A                DEFINEENTRY3:      ; new entry
078A   71                     LD   (hl),c   ; (lo1) = hash lo
078B   23                     INC   hl   
078C   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
078D   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
078F   72                     LD   (hl),d   
0790   2B                     DEC   hl   
0791   73                     LD   (hl),e   ; (slot + 2) = address
0792   37                     SCF      ; set carry flag, success
0793   C9                     RET      
0794                             ; looks up hash and returns address
0794                             ; bc = hash
0794                             ; returns addr in hl, sets carry if successful
0794                LOOKUPENTRY:      
0794   CB 21                  SLA   c   ; lo = lo * 2
0796   69                     LD   l,c   ; lo1 = lo
0797   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0799                LOOKUPENTRY0:      
0799   7E                     LD   a,(hl)   ; a = (hl), slot
079A   FE FF                  CP   UNUSED   ; is it unused?
079C   28 EA                  JR   z,defineEntry2   ; yes, does not exist
079E   79                     LD   a,c   ; a = lo
079F   BE                     CP   (hl)   ; compare (lo1) with lo
07A0   20 06                  JR   nz,lookupEntry1   ; no match loop around
07A2   2C                     INC   l   
07A3   78                     LD   a,b   ; a = hi
07A4   BE                     CP   (hl)   ; compare (lo1+1) with hi
07A5   28 09                  JR   z,lookupEntry3   
07A7   2D                     DEC   l   
07A8                LOOKUPENTRY1:      
07A8   2C                     INC   l   
07A9   2C                     INC   l   
07AA   79                     LD   a,c   
07AB   BD                     CP   l   ; no space left, reject
07AC   20 EB                  JR   nz,lookupEntry0   
07AE                LOOKUPENTRY2:      
07AE   B7                     OR   a   ; clear carry flag, failure
07AF   C9                     RET      
07B0                LOOKUPENTRY3:      
07B0   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07B2   56                     LD   d,(hl)   
07B3   2D                     DEC   l   ; restore l
07B4   5E                     LD   e,(hl)   ; (slot + 2) = address
07B5   EB                     EX   de,hl   
07B6   37                     SCF      
07B7   C9                     RET      
07B8                             ; division subroutine.
07B8                             ; bc: divisor, de: dividend, hl: remainder
07B8                DIVIDE:      
07B8   21 00 00               LD   hl,0   ; zero the remainder
07BB   3E 10                  LD   a,16   ; loop counter
07BD                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07BD   CB 21                  SLA   c   
07BF   CB 10                  RL   b   
07C1   ED 6A                  ADC   hl,hl   
07C3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07C5   38 03                  JR   c,divide2   
07C7   0C                     INC   c   
07C8   18 01                  JR   divide3   
07CA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07CA   19                     ADD   hl,de   
07CB                DIVIDE3:      
07CB   3D                     DEC   a   
07CC   20 EF                  JR   nz,divide1   
07CE   50 59                  LD   de,bc   ; result from bc to de
07D0   C9                     RET      
07D1                             ; squareroot
07D1                             ; Input: HL = value
07D1                             ; Result: DE = square root BC = remainder
07D1                SQUAREROOT:      
07D1   01 00 08               LD   bc,0800h   
07D4   59                     LD   e,c   
07D5   AF                     XOR   a   
07D6                SQUAREROOT1:      
07D6   29                     ADD   hl,hl   
07D7   CB 11                  RL   c   
07D9   ED 6A                  ADC   hl,hl   
07DB   CB 11                  RL   c   
07DD   30 02                  JR   nc,$+4   
07DF   CB C5                  SET   0,l   
07E1   7B                     LD   a,e   
07E2   87                     ADD   a,a   
07E3   5F                     LD   e,a   
07E4   87                     ADD   a,a   
07E5   CB 45                  BIT   0,l   
07E7   20 03                  JR   nz,$+5   
07E9   91                     SUB   c   
07EA   30 05                  JR   nc,squareRoot4   
07EC   79                     LD   a,c   
07ED   93                     SUB   e   
07EE   1C                     INC   e   
07EF   93                     SUB   e   
07F0   4F                     LD   c,a   
07F1                SQUAREROOT4:      
07F1   10 E3                  DJNZ   squareRoot1   
07F3   CB 45                  BIT   0,l   
07F5   28 01                  JR   z,squareRoot5   
07F7   04                     INC   b   
07F8                SQUAREROOT5:      
07F8   16 00                  LD   d,0   
07FA   C9                     RET      
07FB                PRTDEC:      
07FB   CB 7C                  BIT   7,h   
07FD   28 0B                  JR   z,prtdec0   
07FF   3E 2D                  LD   a,"-"   
0801   CD 85 00               CALL   putchar   
0804   AF                     XOR   a   
0805   95                     SUB   l   
0806   6F                     LD   l,a   
0807   9F                     SBC   a,a   
0808   94                     SUB   h   
0809   67                     LD   h,a   
080A                PRTDEC0:      
080A   C5                     PUSH   bc   
080B   0E 00                  LD   c,0   ; leading zeros flag = false
080D   11 F0 D8               LD   de,-10000   
0810   CD 2C 08               CALL   prtdec1   
0813   11 18 FC               LD   de,-1000   
0816   CD 2C 08               CALL   prtdec1   
0819   11 9C FF               LD   de,-100   
081C   CD 2C 08               CALL   prtdec1   
081F   1E F6                  LD   e,-10   
0821   CD 2C 08               CALL   prtdec1   
0824   0C                     INC   c   ; flag = true for at least digit
0825   1E FF                  LD   e,-1   
0827   CD 2C 08               CALL   prtdec1   
082A   C1                     POP   bc   
082B   C9                     RET      
082C                PRTDEC1:      
082C   06 2F                  LD   b,"0"-1   
082E                PRTDEC2:      
082E   04                     INC   b   
082F   19                     ADD   hl,de   
0830   38 FC                  JR   c,prtdec2   
0832   ED 52                  SBC   hl,de   
0834   3E 30                  LD   a,"0"   
0836   B8                     CP   b   
0837   20 05                  JR   nz,prtdec3   
0839   AF                     XOR   a   
083A   B1                     OR   c   
083B   C8                     RET   z   
083C   18 01                  JR   prtdec4   
083E                PRTDEC3:      
083E   0C                     INC   c   
083F                PRTDEC4:      
083F   78                     LD   a,b   
0840   C3 85 00               JP   putchar   
0843                PRTHEX:      ; display hl as a 16-bit number in hex.
0843   C5                     PUSH   bc   ; preserve the IP
0844   7C                     LD   a,h   
0845   CD 4E 08               CALL   prthex2   
0848   7D                     LD   a,l   
0849   CD 4E 08               CALL   prthex2   
084C   C1                     POP   bc   
084D   C9                     RET      
084E                PRTHEX2:      
084E   4F                     LD   c,a   
084F   1F                     RRA      
0850   1F                     RRA      
0851   1F                     RRA      
0852   1F                     RRA      
0853   CD 57 08               CALL   prthex3   
0856   79                     LD   a,c   
0857                PRTHEX3:      
0857   E6 0F                  AND   0x0F   
0859   C6 90                  ADD   a,0x90   
085B   27                     DAA      
085C   CE 40                  ADC   a,0x40   
085E   27                     DAA      
085F   C3 85 00               JP   putchar   
0862                PRTSTR0:      
0862   CD 85 00               CALL   putchar   
0865   23                     INC   hl   
0866                PRTSTR:      
0866   7E                     LD   a,(hl)   
0867   B7                     OR   a   
0868   20 F8                  JR   nz,prtstr0   
086A   C9                     RET      
086B                             ; **************************************************************************
086B                             ; calculate nesting value
086B                             ; a is char to be tested,
086B                             ; e is the nesting value (initially 0)
086B                             ; e is increased by ( and [
086B                             ; e is decreased by ) and ]
086B                             ; e has its bit 7 toggled by `
086B                             ; limited to 127 levels
086B                             ; **************************************************************************
086B                NESTING:      
086B   FE 22                  CP   $22   ; quote char
086D   20 0A                  JR   nz,nesting1   
086F   CB 7B                  BIT   7,e   
0871   28 03                  JR   z,nesting1a   
0873   CB BB                  RES   7,e   
0875   C9                     RET      
0876                NESTING1A:      
0876   CB FB                  SET   7,e   
0878   C9                     RET      
0879                NESTING1:      
0879   CB 7B                  BIT   7,e   
087B   C0                     RET   nz   
087C   FE 7B                  CP   "{"   
087E   28 08                  JR   z,nesting2   
0880   FE 5B                  CP   "["   
0882   28 04                  JR   z,nesting2   
0884   FE 28                  CP   "("   
0886   20 02                  JR   nz,nesting3   
0888                NESTING2:      
0888   1C                     INC   e   
0889   C9                     RET      
088A                NESTING3:      
088A   FE 7D                  CP   "}"   
088C   28 07                  JR   z,nesting4   
088E   FE 5D                  CP   "]"   
0890   28 03                  JR   z,nesting4   
0892   FE 29                  CP   ")"   
0894   C0                     RET   nz   
0895                NESTING4:      
0895   1D                     DEC   e   
0896   C9                     RET      
0897                PROMPT:      
0897   CD A7 08               CALL   printStr   
089A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
089F   C9                     RET      
08A0                CRLF:        
08A0   CD A7 08               CALL   printStr   
08A3   0D 0A 00               .CSTR   "\r\n"   
08A6   C9                     RET      
08A7                             ; prints a null teminated string
08A7                             ; the string should be immedaitely following the call
08A7                PRINTSTR:      
08A7   E3                     EX   (sp),hl   ; swap			
08A8   CD 66 08               CALL   prtstr   
08AB   23                     INC   hl   ; inc past NUL
08AC   E3                     EX   (sp),hl   ; put it back	
08AD   C9                     RET      
08AE                             ; executes a null teminated string (null executes exit_)
08AE                             ; the string should be immedaitely following the call
08AE                EXECSTR:      ; create a root stack frame
08AE                             ; pop bc                      ; bc = code*
08AE                             ; dec bc                      ; dec to prepare for next routine
08AE                             ; ld de,0
08AE                             ; push de                     ; push fake IP
08AE                             ; push de                     ; push null arglist*
08AE                             ; push de                     ; push null first_arg*
08AE                             ; push de                     ; push fake BP
08AE                             ; jp (ix)
08AE                BRANCH:      ; executes the address on the stack
08AE   C1                     POP   bc   ; bc = code*
08AF   0B                     DEC   bc   ; dec to prepare for next routine
08B0   DD E9                  JP   (ix)   
08B2                DEFINE:      
08B2   E1                     POP   hl   
08B3   7E                     LD   a,(hl)   
08B4   23                     INC   hl   
08B5   44 4D                  LD   bc,hl   
08B7   5F                     LD   e,a   
08B8   16 00                  LD   d,0   
08BA   19                     ADD   hl,de   
08BB   5E                     LD   e,(hl)   
08BC   23                     INC   hl   
08BD   56                     LD   d,(hl)   
08BE   23                     INC   hl   
08BF   E5                     PUSH   hl   ; bc = str
08C0   D5                     PUSH   de   
08C1   CD 51 07               CALL   hashStr   ; hl = hash
08C4   D1                     POP   de   
08C5   44 4D                  LD   bc,hl   
08C7   C3 6E 07               JP   defineEntry   
08CA                INIT:        
08CA   DD 2A A4 18            LD   ix,(vNext)   
08CE   FD 21 80 18            LD   iy,STACK   
08D2   21 80 01               LD   hl,isysVars   
08D5   11 98 18               LD   de,sysVars   
08D8   01 10 00               LD   bc,8 * 2   
08DB   ED B0                  LDIR      
08DD   3E FF                  LD   a,UNUSED   
08DF   06 00                  LD   b,0   
08E1   21 00 1B               LD   hl,hashSlots   
08E4                INIT1:       
08E4   77                     LD   (hl),a   
08E5   23                     INC   hl   
08E6   10 FC                  DJNZ   init1   
08E8   CD B2 08               CALL   define   
08EB   04 61 62 73 00         .PSTR   "abs",0   
08F0   F1 06                  DW   abs1   
08F2   CD B2 08               CALL   define   
08F5   05 61 64 64 72 00      .PSTR   "addr",0   
08FB   71 06                  DW   addr   
08FD   CD B2 08               CALL   define   
0900   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0907   AC 05                  DW   bytes   
0909   CD B2 08               CALL   define   
090C   05 63 61 6C 6C 00      .PSTR   "call",0   
0912   C9 0A                  DW   call   
0914                             ; call define
0914                             ; .pstr "closure",0
0914                             ; dw closure
0914   CD B2 08               CALL   define   
0917   04 64 65 66 00         .PSTR   "def",0   
091C   3A 06                  DW   def   
091E   CD B2 08               CALL   define   
0921   05 65 78 65 63 00      .PSTR   "exec",0   
0927   CB 0A                  DW   exec   
0929   CD B2 08               CALL   define   
092C   06 66 61 6C 73 65 00   .PSTR   "false",0   
0933   00 00                  DW   false   
0935   CD B2 08               CALL   define   
0938   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0940   4F 07                  DW   filter   
0942   CD B2 08               CALL   define   
0945   05 66 72 61 63 00      .PSTR   "frac",0   
094B   DE 06                  DW   frac   
094D   CD B2 08               CALL   define   
0950   05 66 75 6E 63 00      .PSTR   "func",0   
0956   32 0B                  DW   func   
0958                             ; call define
0958                             ; .pstr "get",0
0958                             ; dw get
0958   CD B2 08               CALL   define   
095B   05 68 61 73 68 00      .PSTR   "hash",0   
0961   2F 06                  DW   hash   
0963   CD B2 08               CALL   define   
0966   06 69 6E 70 75 74 00   .PSTR   "input",0   
096D   2B 07                  DW   input   
096F   CD B2 08               CALL   define   
0972   03 69 66 00            .PSTR   "if",0   
0976   88 05                  DW   if   
0978   CD B2 08               CALL   define   
097B   05 69 66 74 65 00      .PSTR   "ifte",0   
0981   8D 05                  DW   ifte   
0983   CD B2 08               CALL   define   
0986   04 6B 65 79 00         .PSTR   "key",0   
098B   3F 07                  DW   key   
098D   CD B2 08               CALL   define   
0990   04 6C 65 74 00         .PSTR   "let",0   
0995   4A 06                  DW   let   
0997   CD B2 08               CALL   define   
099A   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09A0   A5 05                  DW   loop   
09A2   CD B2 08               CALL   define   
09A5   04 6D 61 70 00         .PSTR   "map",0   
09AA   4F 07                  DW   map   
09AC   CD B2 08               CALL   define   
09AF   04 6D 6F 64 00         .PSTR   "mod",0   
09B4   FE 06                  DW   mod   
09B6   CD B2 08               CALL   define   
09B9   04 6E 65 67 00         .PSTR   "neg",0   
09BE   48 07                  DW   neg   
09C0   CD B2 08               CALL   define   
09C3   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09CB   36 07                  DW   output   
09CD   CD B2 08               CALL   define   
09D0   05 73 63 61 6E 00      .PSTR   "scan",0   
09D6   01 00                  DW   scan   
09D8   CD B2 08               CALL   define   
09DB   04 73 65 74 00         .PSTR   "set",0   
09E0   78 05                  DW   set   
09E2   CD B2 08               CALL   define   
09E5   04 73 68 6C 00         .PSTR   "shl",0   
09EA   CF 03                  DW   shl   
09EC   CD B2 08               CALL   define   
09EF   04 73 68 72 00         .PSTR   "shr",0   
09F4   DF 03                  DW   shr   
09F6   CD B2 08               CALL   define   
09F9   05 73 71 72 74 00      .PSTR   "sqrt",0   
09FF   E4 06                  DW   sqrt1   
0A01   CD B2 08               CALL   define   
0A04   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A0C   9B 05                  DW   switch   
0A0E   CD B2 08               CALL   define   
0A11   05 74 72 75 65 00      .PSTR   "true",0   
0A17   FF FF                  DW   true   
0A19   CD B2 08               CALL   define   
0A1C   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A23   A7 05                  DW   words   
0A25   C9                     RET      
0A26                START:       
0A26   31 80 18               LD   sp,STACK   ; start of Siena
0A29   CD CA 08               CALL   init   ; setups
0A2C   CD A7 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A2F   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A3C                INTERPRET:      
0A3C   CD 97 08               CALL   prompt   
0A3F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A42   ED 43 9C 18            LD   (vTIBPtr),bc   
0A46                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A46   1E 00                  LD   e,0   ; initilize nesting value
0A48   C5                     PUSH   bc   ; save offset into TIB,
0A49                             ; bc is also the count of chars in TIB
0A49   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A4C   18 06                  JR   interpret4   
0A4E                INTERPRET3:      
0A4E   7E                     LD   a,(hl)   ; a = char in TIB
0A4F   23                     INC   hl   ; inc pointer into TIB
0A50   0B                     DEC   bc   ; dec count of chars in TIB
0A51   CD 6B 08               CALL   nesting   ; update nesting value
0A54                INTERPRET4:      
0A54   79                     LD   a,c   ; is count zero?
0A55   B0                     OR   b   
0A56   20 F6                  JR   nz,interpret3   ; if not loop
0A58   C1                     POP   bc   ; restore offset into TIB
0A59                WAITCHAR:      
0A59   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A5C   FE 20                  CP   $20   ; compare to space
0A5E   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A60   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A62                             ; ???? NEEDED?
0A62   28 27                  JR   z,waitchar4   
0A64   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A66   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A68                MACRO:       
0A68                             ;  ld (vTIBPtr),bc
0A68                             ;  ld hl,ctrlCodes
0A68                             ;  add a,l			            ; look up key of macros
0A68                             ;  ld l,a
0A68                             ;  ld e,(hl)
0A68                             ;  ld a,e
0A68                             ;  or a
0A68                             ;  jr z,macro1
0A68                             ;  ld d,msb(macros)
0A68                             ;  push de
0A68                             ;  call call		            ; Siena exec_ operation and jump to it
0A68                             ;  db DC1,0
0A68                             ; macro1:
0A68                             ;  ld bc,(vTIBPtr)
0A68   18 DC                  JR   interpret2   
0A6A                WAITCHAR1:      
0A6A   21 00 19               LD   hl,TIB   
0A6D   09                     ADD   hl,bc   
0A6E   77                     LD   (hl),a   ; store the character in textbuf
0A6F   03                     INC   bc   
0A70   CD 85 00               CALL   putchar   ; echo character to screen
0A73   CD 6B 08               CALL   nesting   
0A76   18 E1                  JR   waitchar   ; wait for next character
0A78                WAITCHAR3:      
0A78   21 00 19               LD   hl,TIB   
0A7B   09                     ADD   hl,bc   
0A7C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A7E   23                     INC   hl   
0A7F   36 0A                  LD   (hl),"\n"   
0A81   23                     INC   hl   
0A82   03                     INC   bc   
0A83   03                     INC   bc   
0A84   CD A0 08               CALL   crlf   ; echo character to screen
0A87   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A88   B7                     OR   a   
0A89   20 CE                  JR   nz,waitchar   
0A8B                WAITCHAR4:      
0A8B   ED 43 9C 18            LD   (vTIBPtr),bc   
0A8F   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A92                             ; we pressed enter
0A92   0B                     DEC   bc   
0A93                NEXT:        
0A93   03                     INC   bc   ; Increment the IP
0A94   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A95   FE 20                  CP   " "   ; whitespace?
0A97   28 FA                  JR   z,next   ; space? ignore
0A99   38 07                  JR   c,next1   
0A9B   6F                     LD   l,a   ; index into table
0A9C   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A9E   6E                     LD   l,(hl)   ; get low jump address
0A9F   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AA1   E9                     JP   (hl)   ; Jump to routine
0AA2                NEXT1:       
0AA2   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0AA4   28 0F                  JR   z,escape_   
0AA6   FE 00                  CP   NUL   ; end of input string?
0AA8   28 0C                  JR   z,exit_   
0AAA   FE 11                  CP   DC1   ; literal number
0AAC   28 0B                  JR   z,literal_   
0AAE   FE 12                  CP   DC2   ; enter routine
0AB0   28 10                  JR   z,enter_   
0AB2   C3 3C 0A               JP   interpret   ; no, other whitespace, macros?
0AB5                ESCAPE_:      
0AB5   03                     INC   bc   ; falls through
0AB6                EXIT_:       
0AB6   60 69                  LD   hl,bc   
0AB8   E9                     JP   (hl)   
0AB9                LITERAL_:      
0AB9   03                     INC   bc   
0ABA   0A                     LD   a,(bc)   
0ABB   6F                     LD   l,a   
0ABC   03                     INC   bc   
0ABD   0A                     LD   a,(bc)   
0ABE   67                     LD   h,a   
0ABF   E5                     PUSH   hl   
0AC0   DD E9                  JP   (ix)   
0AC2                ENTER_:      
0AC2   03                     INC   bc   
0AC3   0A                     LD   a,(bc)   
0AC4   6F                     LD   l,a   
0AC5   03                     INC   bc   
0AC6   0A                     LD   a,(bc)   
0AC7   67                     LD   h,a   
0AC8   E9                     JP   (hl)   
0AC9                             ; arg1 .. argn func -- ?
0AC9                CALL:        
0AC9   E1                     POP   hl   
0ACA   E9                     JP   (hl)   
0ACB                             ; execute a block of code which ends with }
0ACB                             ; creates a root scope if BP == stack
0ACB                             ; else uses outer scope
0ACB                EXEC:        
0ACB   D1                     POP   de   ; de = block*
0ACC   7B                     LD   a,e   ; if block* == null, exit
0ACD   B2                     OR   d   
0ACE   20 02                  JR   nz,exit1   
0AD0   DD E9                  JP   (ix)   
0AD2                EXIT1:       
0AD2   C5                     PUSH   bc   ; push IP
0AD3   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0AD6   FD 44                  LD   b,iyh   
0AD8   FD 4D                  LD   c,iyl   
0ADA   B7                     OR   a   ; hl = stack - BP = root_scope
0ADB   ED 42                  SBC   hl,bc   
0ADD   7D                     LD   a,l   ; if root_scope, skip
0ADE   B4                     OR   h   
0ADF   28 11                  JR   z,exec2   
0AE1   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0AE4   FD 46 05               LD   b,(iy+5)   
0AE7   C5                     PUSH   bc   
0AE8   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0AEB   FD 46 03               LD   b,(iy+3)   
0AEE   60 69                  LD   hl,bc   
0AF0   18 32                  JR   doCall4   
0AF2                EXEC2:       
0AF2   E5                     PUSH   hl   ; push arg_list (null)
0AF3   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0AF6   39                     ADD   hl,sp   
0AF7   18 2B                  JR   doCall4   ; 
0AF9                             ; call with args
0AF9                             ; creates a scope
0AF9                             ; code* -- ?
0AF9                DOCALL:      ; execute code at pointer
0AF9   E1                     POP   hl   ; hl = code*
0AFA   7D                     LD   a,l   ; if code* == null, skip
0AFB   B4                     OR   h   
0AFC   28 32                  JR   z,doCall5   
0AFE   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0AFF   23                     INC   hl   
0B00   56                     LD   d,(hl)   
0B01   23                     INC   hl   
0B02   EB                     EX   de,hl   
0B03   7D                     LD   a,l   ; if arg_list* != null skip
0B04   B4                     OR   h   
0B05   20 08                  JR   nz,doCall1   
0B07   C5                     PUSH   bc   ; push IP
0B08   E5                     PUSH   hl   ; push arg_list (null)
0B09   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0B0C   39                     ADD   hl,sp   
0B0D   18 15                  JR   doCall4   
0B0F                DOCALL1:      
0B0F   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0B10   7E                     LD   a,(hl)   
0B11   23                     INC   hl   
0B12   B7                     OR   a   
0B13   28 05                  JR   z,doCall3   
0B15                DOCALL2:      
0B15   3B                     DEC   sp   
0B16   3B                     DEC   sp   
0B17   3D                     DEC   a   
0B18   28 FB                  JR   z,doCall2   
0B1A                DOCALL3:      
0B1A   C5                     PUSH   bc   ; push IP
0B1B   E5                     PUSH   hl   ; push arg_list*
0B1C   2B                     DEC   hl   ; hl = num_args*
0B1D   2B                     DEC   hl   
0B1E   7E                     LD   a,(hl)   ; hl = num_args * 2
0B1F   87                     ADD   a,a   
0B20   6F                     LD   l,a   
0B21   26 00                  LD   h,$0   
0B23   39                     ADD   hl,sp   ; hl = first_arg*
0B24                DOCALL4:      
0B24   E5                     PUSH   hl   ; push first_arg
0B25   FD E5                  PUSH   iy   ; push BP
0B27   FD 21 00 00            LD   iy,0   ; BP = SP
0B2B   FD 39                  ADD   iy,sp   
0B2D   42 4B                  LD   bc,de   ; bc = de = block*-1
0B2F   0B                     DEC   bc   
0B30                DOCALL5:      
0B30   DD E9                  JP   (ix)   
0B32                             ; arg_list* block* -- ptr
0B32                FUNC:        
0B32   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B35   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B37   23                     INC   hl   
0B38   36 F9                  LD   (hl),lsb(doCall)   
0B3A   23                     INC   hl   
0B3B   36 0A                  LD   (hl),msb(doCall)   
0B3D   23                     INC   hl   
0B3E   D1                     POP   de   ; hl = heapPtr, de = block
0B3F   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
0B40   E3                     EX   (sp),hl   
0B41   EB                     EX   de,hl   
0B42   73                     LD   (hl),e   ; compile arg_list*
0B43   23                     INC   hl   
0B44   72                     LD   (hl),d   
0B45   23                     INC   hl   
0B46   D1                     POP   de   ; de = block*
0B47   C5                     PUSH   bc   ; (sp) = IP
0B48   06 01                  LD   b,1   ; b = nesting
0B4A                FUNC1:       
0B4A   1A                     LD   a,(de)   
0B4B   13                     INC   de   
0B4C   77                     LD   (hl),a   
0B4D   23                     INC   hl   
0B4E   FE 29                  CP   ")"   
0B50   28 29                  JR   z,func4   
0B52   FE 7D                  CP   "}"   
0B54   28 25                  JR   z,func4   
0B56   FE 5D                  CP   "]"   
0B58   28 21                  JR   z,func4   
0B5A   FE 28                  CP   "("   
0B5C   28 12                  JR   z,func2   
0B5E   FE 7B                  CP   "{"   
0B60   28 0E                  JR   z,func2   
0B62   FE 5B                  CP   "["   
0B64   28 0A                  JR   z,func2   
0B66   FE 27                  CP   "'"   
0B68   28 09                  JR   z,func3   
0B6A   FE 60                  CP   "`"   
0B6C   28 05                  JR   z,func3   
0B6E   18 DA                  JR   func1   
0B70                FUNC2:       
0B70   04                     INC   b   
0B71   18 D7                  JR   func1   
0B73                FUNC3:       
0B73   3E 80                  LD   a,$80   
0B75   A8                     XOR   b   
0B76   47                     LD   b,a   
0B77   20 D1                  JR   nz,func1   
0B79   18 03                  JR   func4a   
0B7B                FUNC4:       
0B7B   05                     DEC   b   
0B7C   20 CC                  JR   nz,func1   ; get the next element
0B7E                FUNC4A:      
0B7E   23                     INC   hl   
0B7F   C1                     POP   bc   ; de = defstart, hl = IP
0B80   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B84   D5                     PUSH   de   
0B85   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B88   DD E9                  JP   (ix)   
0B8A                             ; $a .. $z
0B8A                             ; -- value
0B8A                             ; returns value of arg
0B8A                ARG:         
0B8A   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B8D   FD 56 05               LD   d,(iy+5)   
0B90   EB                     EX   de,hl   
0B91   7D                     LD   a,l   ; arg_list* == null, skip
0B92   B4                     OR   h   
0B93   28 1C                  JR   z,arg0a   
0B95   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0B96   2B                     DEC   hl   
0B97   7E                     LD   a,(hl)   
0B98   23                     INC   hl   
0B99   23                     INC   hl   
0B9A   B7                     OR   a   
0B9B   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B9D   5F                     LD   e,a   ; e = a = num_args
0B9E   03                     INC   bc   ; a = next char = arg_name
0B9F   0A                     LD   a,(bc)   
0BA0   C5                     PUSH   bc   ; save IP
0BA1   43                     LD   b,e   ; b = e = num_args
0BA2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BA5   FD 56 03               LD   d,(iy+3)   
0BA8                ARG0:        
0BA8   1B                     DEC   de   ; a = arg_name, de = next arg*
0BA9   1B                     DEC   de   
0BAA   BE                     CP   (hl)   
0BAB   28 09                  JR   z,arg1   
0BAD   23                     INC   hl   ; hl = next arg_list*
0BAE   10 F8                  DJNZ   arg0   
0BB0   C1                     POP   bc   ; no match, restore IP
0BB1                ARG0A:       
0BB1   11 00 00               LD   de,0   ; return 0
0BB4   18 08                  JR   arg1a   
0BB6                ARG1:        
0BB6   C1                     POP   bc   ; restore IP
0BB7   EB                     EX   de,hl   ; hl = arg*
0BB8   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0BBB   5E                     LD   e,(hl)   
0BBC   23                     INC   hl   
0BBD   56                     LD   d,(hl)   ; de = arg
0BBE                ARG1A:       
0BBE   D5                     PUSH   de   ; push arg
0BBF   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test "1", 1
4000                             ; test "2", 2
4000                             ; test "1", 1
4000                             ; test "0", 0
4000                             ; test "10", 10
4000                             ; test "123", 123
4000                             ; test "-1",-1
4000                             ; test "``", 0
4000                             ; test "`a`", $61
4000                             ; test "`\\``", $60
4000                             ; test "#10", $10
4000                             ; test "#FF", $FF
4000                             ; test "-1 2 +",1
4000                             ; test "-1 1 +",0
4000                             ; test "1 2 +", 3
4000                             ; test "4 1 2 +", 3
4000                             ; test "1 2 +", 3
4000                             ; test "123 456 +", 123+456
4000                             ; test "64 128 +", 64+128
4000                             ; test "-1 -1 -",0
4000                             ; test "5 3 -", 2
4000                             ; test "3 5 &", 1
4000                             ; test "3 5 |", 7
4000                             ; test "2 3 *", 6
4000                             ; test "1 2 3 + *", 5
4000                             ; test "7 3 /", 2
4000                             ; test "7 3 / frac", 1
4000                             ; test "10 sqrt", 3
4000                             ; test "10 sqrt frac", 1
4000                             ; test "2 3 =", FALSE
4000                             ; test "3 3 =", TRUE
4000                             ; test "1 2 <", TRUE
4000                             ; test "2 1 <", FALSE
4000                             ; test "2 3 <", TRUE
4000                             ; test "3 3 <", FALSE
4000                             ; test "1 2 >", FALSE
4000                             ; test "2 1 >", TRUE
4000                             ; test "3 3 >", FALSE
4000                             ; test "4 3 >", TRUE
4000                             ; test "2 2 <=", TRUE
4000                             ; test "2 2 >=", TRUE
4000                             ; test "() -2?", $0000
4000                             ; test "(a) -1?", $0001
4000                             ; test "(a:) -1?", $0001
4000                             ; test "(a:b) -1?", $0102
4000                             ; test "(:b) -1?", $0101
4000                             ; test ":x 20 let 100 x set x", 100
4000                             ; test "[10 20 30] 1?", 20
4000                             ; test ":x [10 20 30] let 50 x 1? set x 1?", 50
4000                             ; test "bytes [1 2 3] 1?", 2
4000                             ; test "bytes :x [1 2 3] let x 1?", 2
4000                             ; test "bytes [`A` `B` `C`] 1?", 66
4000                             ; test ":x (a) {2} def 1 x", 2
4000                             ; test ":x (a) {$a} def 0 1 x", 1
4000                             ; test ":x (a) {$a} def 1 2 x", 1
4000                             ; test ":x (ab) {$b} def 1 2 x", 2
4000                             ; test ":x (ab) {$b $a} def 10 15 x -", 5
4000                             ; test ":x (a:b) {2} def 1 x", 2
4000                             ; test ":x (:b) {100 $b set $b} def x", 100
4000                             ; test ":x (a:b) {1 $b set $b} def 2 x", 1
4000                             ; test ":x (a:b) {$a $b set $b} def 2 x", 2
4000                             ; test "{1} exec", 1
4000                             ; test "{{1} exec} exec", 1
4000                          ;*Macro unroll:  test "{{{1} exec} exec} exec", 1
4000   31 80 18               LD   SP,STACK   
4003   CD CA 08               CALL   init   
4006   CD AE 08               CALL   execStr   
4009   7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{{1} exec} exec} exec"   
4020                          ;*Macro unroll:  expect "{{{1} exec} exec} exec",1
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 01 00               LD   DE,1   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   28 61                  JR   Z,expectM_0_2580S43   
402C   CD A7 08               CALL   printStr   
402F   43 6F 64 65 3A 20 7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{{1} exec} exec} exec"   
404C   CD A7 08               CALL   printStr   
404F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405E   21 01 00               LD   HL,1   
4061   CD FB 07               CALL   prtdec   
4064   CD A7 08               CALL   printStr   
4067   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4074   E1                     POP   hl   
4075   E5                     PUSH   hl   
4076   CD FB 07               CALL   prtdec   
4079   E1                     POP   hl   
407A   CD A7 08               CALL   printStr   
407D   20 28 23 00            .CSTR   " (#"   
4081   CD 43 08               CALL   prthex   
4084   CD A7 08               CALL   printStr   
4087   29 0D 0A 00            .CSTR   ")\r\n"   
408B   76                     HALT      
408C   00                     .CSTR      
408D                EXPECTM_0_2580S43:      
408D   E1                     POP   HL   
408E                             ; test "5 (a) {$a} func call", 5
408E                             ; test "5 (a) {{1} exec} func call", 1
408E                             ; test "5 (a) {{$a} exec} func call", 5
408E                             ; test "5 (a) {{$a 1 +} exec} func call", 6
408E                             ; test "10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
408E                             ; test "10 20 (ab) {0 {$a} {$b} ifte} func call", 20
408E                             ; test "10 20 (ab) {0 [{$a} {$b}] switch} func call", 20
408E                             ; 
408E                             ; 
408E                             ; 
408E                             ; 
408E                             ; 
408E                             ; 
408E                             ; 
408E                             ; test ":x 1000 let x 10 set x", 10
408E                             ; test ":x [100] { @1 } closure x", 100
408E                             ; test ":x [100 200] { @2 } closure x", 200
408E                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
408E                             ; test ":x 'a' {$a} def 2 x", 2
408E                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
408E                             ; test ":x '' { 3 2 } def x + ", 5
408E                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
408E                             ; test "0 [{1}] switch", 1
408E                             ; test "1 [{1} {2} {3}] switch", 2
408E                             ; test "9 [{1} {5}] switch", 5
408E                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
408E                             ; test "bytes 'ABC' get", $41
408E                             ; test "bytes [1 2 3] get", 1
408E                             ; test ":xyz 123 const ; xyz", 123
408E                             ; test ":x 1 const ; x", 1
408E                             ; test ":x 'A' const x get", $41
408E                             ; test ":x [1] const x get", 1
408E                             ; test ":x [1 2 3] const x 2?", 3
408E                             ; test "2 (1 2 +) *", 6
408E                             ; test ":xyz 123 const ; xyz", 123
408E                             ; test ":xyz 123 let ; xyz get", 123
408E                             ; test "1 2 {$1 $2 +} call", 3
408E                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
408E                             ; test ":xyz {1} def :xyz addr call", 1
408E                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
408E                             ; test ":xyz {10} def :xyz addr call", 10
408E                             ; test "'hello' hash", $7f54
408E                             ; test ":hello", $7f54
408E                             ; test "{{{1} exec} exec} exec", 1
408E                             ; test "5 {{{$1} exec} exec} call", 5
408E                             ; test "5 {$1} call", 5
408E                             ; test "5 {{$1} exec} call", 5
408E                             ; test "2 1 {{$1} call} call", 2
408E                             ; test "2 1 {$2} call", 1
408E                             ; test "2 1 {$1} call", 2
408E                             ; test "2 1 {$2} call", 1
408E                             ; test "2 4 {$2} call", 4
408E                             ; test "{{1} call} call", 1
408E                             ; test "5 {-1 {$1} if} call", 5
408E                             ; test "0 {} loop", 0
408E                             ; test "1 {1-} loop", $1a00
408E                             ; test ":h {1} def :h addr call", 1
408E                             ; ; call enter
408E                             ; ;     .cstr "1 3",$22,"+"
408E                             ; ; expect "1 3 DUP +", 6
408E   CD A7 08               CALL   printStr   
4091   44 6F 6E 65 21 00      .CSTR   "Done!"   
4097   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 53 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               074F DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 1859 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1792 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 258 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1823 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 32 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1861 IN Siena.asm
DC1:                0011 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1863 IN Siena.asm
DC2:                0012 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1865 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 58 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 63 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 75 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 77 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 111 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 214 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 216 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 219 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 222 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 225 IN Siena.asm
STRING_:            030C DEFINED AT LINE 228 IN Siena.asm
ARG_LIST_:          030F DEFINED AT LINE 231 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 234 IN Siena.asm
DOT1:               031E DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 247 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 253 IN Siena.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 256 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 262 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 265 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 267 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 269 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 271 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 273 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 275 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 277 IN Siena.asm
AND_:               0354 DEFINED AT LINE 279 IN Siena.asm
AND1:               035B DEFINED AT LINE 287 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 311 IN Siena.asm
OR_:                035F DEFINED AT LINE 292 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 302 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 304 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
INV_:               0371 DEFINED AT LINE 313 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 317 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 324 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 329 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 332 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 340 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 343 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
NOT_:               039A DEFINED AT LINE 349 IN Siena.asm
EQ_:                039F DEFINED AT LINE 353 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 355 IN Siena.asm
                    > USED AT LINE 351 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 359 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 364 IN Siena.asm
LT1:                03AA DEFINED AT LINE 367 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 375 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 386 IN Siena.asm
                    > USED AT LINE 390 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 394 IN Siena.asm
SHL:                03CF DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 414 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 413 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
SHR:                03DF DEFINED AT LINE 421 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 432 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 431 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
NUM:                040E DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 217 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 468 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
NUM3:               043B DEFINED AT LINE 494 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 220 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 500 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 506 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
STRING:             045B DEFINED AT LINE 522 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
ARG_LIST:           047F DEFINED AT LINE 557 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
ARG_LIST1:          0489 DEFINED AT LINE 564 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
ARG_LIST2:          0495 DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
ARG_LIST3:          049D DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
ARG_LIST4:          04A0 DEFINED AT LINE 583 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
ARG_LIST5:          04A5 DEFINED AT LINE 588 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 599 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 610 IN Siena.asm
                    > USED AT LINE 607 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 613 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 617 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 621 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
                    > USED AT LINE 657 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 646 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 637 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 649 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 655 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
BLOCKEND1:          052F DEFINED AT LINE 685 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
BLOCKEND2:          053B DEFINED AT LINE 692 IN Siena.asm
                    > USED AT LINE 684 IN Siena.asm
PROP:               0554 DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
DOLET:              0556 DEFINED AT LINE 786 IN Siena.asm
DOLET2:             055A DEFINED AT LINE 789 IN Siena.asm
DOLET3:             055D DEFINED AT LINE 793 IN Siena.asm
INDEX:              0560 DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
INDEX1:             0569 DEFINED AT LINE 804 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
INDEX2:             0575 DEFINED AT LINE 813 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
SET:                0578 DEFINED AT LINE 818 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
SET1:               0586 DEFINED AT LINE 828 IN Siena.asm
                    > USED AT LINE 825 IN Siena.asm
IF:                 0588 DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
IFTE:               058D DEFINED AT LINE 839 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
IFTE1:              058E DEFINED AT LINE 841 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
IFTE2:              0597 DEFINED AT LINE 850 IN Siena.asm
                    > USED AT LINE 848 IN Siena.asm
SWITCH:             059B DEFINED AT LINE 871 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
LOOP:               05A5 DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
WORDS:              05A7 DEFINED AT LINE 934 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
BYTES:              05AC DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
BYTES1:             05AF DEFINED AT LINE 939 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
ARRAY:              05B4 DEFINED AT LINE 943 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND:           05D0 DEFINED AT LINE 957 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
ARRAYEND1:          05F1 DEFINED AT LINE 980 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
ARRAYEND2:          0601 DEFINED AT LINE 992 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
ARRAYEND3:          0614 DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
HASH:               062F DEFINED AT LINE 1028 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
DEF:                063A DEFINED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
DEF1:               0641 DEFINED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
LET:                064A DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
LET1:               0666 DEFINED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
LET2:               066E DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
ADDR:               0671 DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
ADDR1:              067D DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
SYMBOL:             0688 DEFINED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 278 IN Siena.asm
SYMBOL0:            0690 DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1115 IN Siena.asm
SYMBOL1:            0692 DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1101 IN Siena.asm
SYMBOL2:            06A2 DEFINED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
IDENT:              06B0 DEFINED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
IDENT0:             06B7 DEFINED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
IDENT1:             06B9 DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
IDENT2:             06C9 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
IDENT3:             06DD DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
FRAC:               06DE DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
SQRT1:              06E4 DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
ABS1:               06F1 DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
MOD:                06FE DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
EQUALS:             070A DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
LESSTHANEQ:         0712 DEFINED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN:           0717 DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
LESSTHAN1:          071C DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
TRUE1:              071F DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
FALSE1:             0725 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
INPUT:              072B DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
OUTPUT:             0736 DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
KEY:                073F DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
NEG:                0748 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
FILTER:             074F DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
MAP:                074F DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
HASHSTR:            0751 DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
HASHSTR1:           0758 DEFINED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
HASHSTR2:           075D DEFINED AT LINE 1289 IN Siena.asm
DEFINEENTRY:        076E DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
DEFINEENTRY0:       0773 DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
DEFINEENTRY1:       0782 DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
DEFINEENTRY2:       0788 DEFINED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
DEFINEENTRY3:       078A DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
LOOKUPENTRY:        0794 DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
LOOKUPENTRY0:       0799 DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
LOOKUPENTRY1:       07A8 DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
LOOKUPENTRY2:       07AE DEFINED AT LINE 1369 IN Siena.asm
LOOKUPENTRY3:       07B0 DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
DIVIDE:             07B8 DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 380 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
DIVIDE1:            07BD DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
DIVIDE2:            07CA DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
DIVIDE3:            07CB DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
SQUAREROOT:         07D1 DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
SQUAREROOT1:        07D6 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
SQUAREROOT4:        07F1 DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
SQUAREROOT5:        07F8 DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
PRTDEC:             07FB DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            080A DEFINED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
PRTDEC1:            082C DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1461 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
PRTDEC2:            082E DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
PRTDEC3:            083E DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
PRTDEC4:            083F DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
PRTHEX:             0843 DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            084E DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
PRTHEX3:            0857 DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
PRTSTR0:            0862 DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
PRTSTR:             0866 DEFINED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 245 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
NESTING:            086B DEFINED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
NESTING1A:          0876 DEFINED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
NESTING1:           0879 DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
NESTING2:           0888 DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
NESTING3:           088A DEFINED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
NESTING4:           0895 DEFINED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
PROMPT:             0897 DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
CRLF:               08A0 DEFINED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
PRINTSTR:           08A7 DEFINED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 172
EXECSTR:            08AE DEFINED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 41
BRANCH:             08AE DEFINED AT LINE 1594 IN Siena.asm
DEFINE:             08B2 DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
INIT:               08CA DEFINED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1762 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08E4 DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
START:              0A26 DEFINED AT LINE 1760 IN Siena.asm
INTERPRET:          0A3C DEFINED AT LINE 1766 IN Siena.asm
                    > USED AT LINE 1867 IN Siena.asm
INTERPRET2:         0A46 DEFINED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 1816 IN Siena.asm
INTERPRET3:         0A4E DEFINED AT LINE 1779 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
INTERPRET4:         0A54 DEFINED AT LINE 1785 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
WAITCHAR:           0A59 DEFINED AT LINE 1791 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
                    > USED AT LINE 1839 IN Siena.asm
MACRO:              0A68 DEFINED AT LINE 1801 IN Siena.asm
WAITCHAR1:          0A6A DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
WAITCHAR3:          0A78 DEFINED AT LINE 1827 IN Siena.asm
                    > USED AT LINE 1799 IN Siena.asm
WAITCHAR4:          0A8B DEFINED AT LINE 1841 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
NEXT:               0A93 DEFINED AT LINE 1847 IN Siena.asm
                    > USED AT LINE 70 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
NEXT1:              0AA2 DEFINED AT LINE 1858 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
ESCAPE_:            0AB5 DEFINED AT LINE 1869 IN Siena.asm
                    > USED AT LINE 1860 IN Siena.asm
EXIT_:              0AB6 DEFINED AT LINE 1872 IN Siena.asm
                    > USED AT LINE 1862 IN Siena.asm
LITERAL_:           0AB9 DEFINED AT LINE 1876 IN Siena.asm
                    > USED AT LINE 1864 IN Siena.asm
ENTER_:             0AC2 DEFINED AT LINE 1886 IN Siena.asm
                    > USED AT LINE 1866 IN Siena.asm
CALL:               0AC9 DEFINED AT LINE 1896 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
EXEC:               0ACB DEFINED AT LINE 1903 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
EXIT1:              0AD2 DEFINED AT LINE 1909 IN Siena.asm
                    > USED AT LINE 1907 IN Siena.asm
EXEC2:              0AF2 DEFINED AT LINE 1926 IN Siena.asm
                    > USED AT LINE 1918 IN Siena.asm
DOCALL:             0AF9 DEFINED AT LINE 1935 IN Siena.asm
DOCALL1:            0B0F DEFINED AT LINE 1953 IN Siena.asm
                    > USED AT LINE 1947 IN Siena.asm
DOCALL2:            0B15 DEFINED AT LINE 1959 IN Siena.asm
                    > USED AT LINE 1963 IN Siena.asm
DOCALL3:            0B1A DEFINED AT LINE 1964 IN Siena.asm
                    > USED AT LINE 1958 IN Siena.asm
DOCALL4:            0B24 DEFINED AT LINE 1974 IN Siena.asm
                    > USED AT LINE 1925 IN Siena.asm
                    > USED AT LINE 1930 IN Siena.asm
                    > USED AT LINE 1952 IN Siena.asm
DOCALL5:            0B30 DEFINED AT LINE 1981 IN Siena.asm
                    > USED AT LINE 1939 IN Siena.asm
FUNC:               0B32 DEFINED AT LINE 1985 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
FUNC1:              0B4A DEFINED AT LINE 2006 IN Siena.asm
                    > USED AT LINE 2030 IN Siena.asm
                    > USED AT LINE 2033 IN Siena.asm
                    > USED AT LINE 2038 IN Siena.asm
                    > USED AT LINE 2042 IN Siena.asm
FUNC2:              0B70 DEFINED AT LINE 2031 IN Siena.asm
                    > USED AT LINE 2020 IN Siena.asm
                    > USED AT LINE 2022 IN Siena.asm
                    > USED AT LINE 2024 IN Siena.asm
FUNC3:              0B73 DEFINED AT LINE 2034 IN Siena.asm
                    > USED AT LINE 2027 IN Siena.asm
                    > USED AT LINE 2029 IN Siena.asm
FUNC4:              0B7B DEFINED AT LINE 2040 IN Siena.asm
                    > USED AT LINE 2013 IN Siena.asm
                    > USED AT LINE 2015 IN Siena.asm
                    > USED AT LINE 2017 IN Siena.asm
FUNC4A:             0B7E DEFINED AT LINE 2043 IN Siena.asm
                    > USED AT LINE 2039 IN Siena.asm
ARG:                0B8A DEFINED AT LINE 2054 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
ARG0:               0BA8 DEFINED AT LINE 2075 IN Siena.asm
                    > USED AT LINE 2081 IN Siena.asm
ARG0A:              0BB1 DEFINED AT LINE 2083 IN Siena.asm
                    > USED AT LINE 2060 IN Siena.asm
                    > USED AT LINE 2067 IN Siena.asm
ARG1:               0BB6 DEFINED AT LINE 2086 IN Siena.asm
                    > USED AT LINE 2079 IN Siena.asm
ARG1A:              0BBE DEFINED AT LINE 2093 IN Siena.asm
                    > USED AT LINE 2085 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1911 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1622 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 823 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
                    > USED AT LINE 821 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 2089 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 1282 IN Siena.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 523 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
                    > USED AT LINE 590 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1986 IN Siena.asm
                    > USED AT LINE 2046 IN Siena.asm
                    > USED AT LINE 2048 IN Siena.asm
TIB:                1900 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1819 IN Siena.asm
                    > USED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1843 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1628 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 41 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 71 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2580S43:  408D DEFINED AT LINE 34
                    > USED AT LINE 10
