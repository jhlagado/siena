0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD DA 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   A3 0A                  DW   next   ; g nNext
018E   00 1D                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available " % , ; DEL
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 9C 0B               JP   arg   
0309                PROP_:       
0309   C3 54 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARG_LIST_:      
030F   C3 7F 04               JP   arg_list   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 53 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 76 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 0B 08               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 68 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 BC 05               JP   array   
034B                ARRAYEND_:      
034B   C3 D8 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 C0 06               JP   ident   
0351                SYMBOL_:      
0351   C3 98 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 53 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 1A 07               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 22 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 27 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD C8 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ; arg_list - parses input (ab:c)
047F                             ; names after the : represent uninitialised locals
047F                             ; return values are the state of the stack after the block ends
047F                ARG_LIST:      
047F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arg_list
0488   03                     INC   bc   ; point to next char
0489                ARG_LIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arg_list terminator
048C   28 12                  JR   z,arg_list4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arg_list2   
0492   14                     INC   d   ; non zero value local count acts as flag
0493   20 08                  JR   nz,arg_list3   
0495                ARG_LIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arg_list3   
049C   14                     INC   d   ; if d > 0 increase local count
049D                ARG_LIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arg_list1   
04A0                ARG_LIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arg_list5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARG_LIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arg_list
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050D   FD 46 07               LD   b,(iy+7)   
0510   D9                     EXX      
0511   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0514   FD 56 03               LD   d,(iy+3)   
0517   EB                     EX   de,hl   
0518   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
051B   FD 56 01               LD   d,(iy+1)   
051E                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
051E   13                     INC   de   ; for carry flag <=
051F   B7                     OR   a   
0520   ED 52                  SBC   hl,de   
0522   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0524   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0526   FD 5D                  LD   e,iyl   
0528   21 08 00               LD   hl,8   
052B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
052C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
052D   18 0C                  JR   blockend2   
052F                BLOCKEND1:      ; same scope
052F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0532   FD 56 03               LD   d,(iy+3)   
0535   EB                     EX   de,hl   
0536   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0538   FD 5D                  LD   e,iyl   
053A   EB                     EX   de,hl   
053B                BLOCKEND2:      
053B   44 4D                  LD   bc,hl   ; bc = hl = BP
053D   B7                     OR   a   ; hl = BP - SP = count
053E   ED 72                  SBC   hl,sp   
0540   C5                     PUSH   bc   ; bc = count, hl = BP
0541   44 4D                  LD   bc,hl   
0543   E1                     POP   hl   
0544   2B                     DEC   hl   ; hl = BP-1
0545   1B                     DEC   de   ; de = args*-1
0546   ED B8                  LDDR      
0548   13                     INC   de   ; hl = new tos
0549   EB                     EX   de,hl   
054A   F9                     LD   sp,hl   ; sp = new tos
054B   D9                     EXX      ; bc = IP, iy = oldBP
054C   D5                     PUSH   de   
054D   C5                     PUSH   bc   
054E   D9                     EXX      
054F   C1                     POP   bc   
0550   FD E1                  POP   iy   
0552   DD E9                  JP   (ix)   
0554                             ; blockend:
0554                             ;     exx
0554                             ;     ld e,(iy+0)                 ; de = oldBP
0554                             ;     ld d,(iy+1)
0554                             ;     ld c,(iy+6)                 ; bc = IP
0554                             ;     ld b,(iy+7)
0554                             ;     exx
0554                             ;     ld d,iyh                    ; hl = BP
0554                             ;     ld e,iyl
0554                             ;     ex de,hl
0554                             ;     ld e,(iy+4)                 ; de = BP, hl = arg_list*
0554                             ;     ld d,(iy+5)
0554                             ;     ex de,hl
0554                             ;     ld bc,0                     ; bc = 0, b = num locals = 0, c = num args = 0
0554                             ;     ld a,l                      ; arg_list* == null skip
0554                             ;     or h
0554                             ;     jr z,blockend2
0554                             ;     dec hl                      ; b = (num locals) * 2
0554                             ;     ld b,(hl)
0554                             ;     sla b
0554                             ;     dec hl
0554                             ;     ld c,(hl)                   ; c = (num args) * 2
0554                             ;     sla c
0554                             ; blockend2:
0554                             ;     ld a,8                      ; a = header size in bytes
0554                             ;     add a,c                     ; a = offset to args*
0554                             ;     ld l,a                      ; de = bp, hl = offset to args*
0554                             ;     ld h,0
0554                             ;     add hl,de                   ; de = args*, hl = bp,
0554                             ;     ex de,hl
0554                             ;     push hl                     ; save bp
0554                             ;     or a                        ; bc = count
0554                             ;     sbc hl,sp
0554                             ;     ld bc,hl
0554                             ;     dec bc                      ; bc -= 2 remove space used to save BP
0554                             ;     dec bc
0554                             ;     pop hl                      ; hl = bp
0554                             ;     dec de                      ; de = args*-1
0554                             ;     dec hl                      ; hl = BP-1
0554                             ;     lddr
0554                             ;     inc de                      ; hl = new tos
0554                             ;     ex de,hl
0554                             ;     ld sp,hl                    ; sp = new tos
0554                             ;     exx                         ; bc = IP, iy = oldBP
0554                             ;     push de
0554                             ;     push bc
0554                             ;     exx
0554                             ;     pop bc
0554                             ;     pop iy
0554                             ;     jp (ix)
0554                             ; @1..9
0554                             ; returns address of prop
0554                PROP:        
0554                             ; inc bc                      ; get next char
0554                             ; ld a,(bc)
0554                             ; sub "1"                     ; treat as a digit, 1 based index
0554                             ; and $0F                     ; mask
0554                             ; add a,a                     ; double
0554                             ; ld l,a                      ; hl = offset into args
0554                             ; ld h,0
0554                             ; ld e,(iy+6)                 ; de = closure array
0554                             ; ld d,(iy+7)
0554                             ; add hl,de                   ; find address of prop in array
0554                             ; ld (vPointer),hl             ; store address in setter
0554                             ; ld e,(hl)
0554                             ; inc hl
0554                             ; ld d,(hl)
0554                             ; push de                     ; push prop value
0554   DD E9                  JP   (ix)   
0556                             ; addr -- value
0556                DOLET:       
0556   E1                     POP   hl   
0557   22 9E 18               LD   (vPointer),hl   ; store address in setter
055A                DOLET2:      
055A   5E                     LD   e,(hl)   
055B   23                     INC   hl   
055C   56                     LD   d,(hl)   
055D   23                     INC   hl   
055E                DOLET3:      
055E   D5                     PUSH   de   
055F   5E                     LD   e,(hl)   
0560   23                     INC   hl   
0561   56                     LD   d,(hl)   
0562   ED 53 A2 18            LD   (vHashStr),de   
0566   DD E9                  JP   (ix)   
0568                INDEX:       
0568   E1                     POP   hl   ; hl = index
0569   D1                     POP   de   ; de = addr
056A   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
056D   3D                     DEC   a   
056E   28 01                  JR   z,index1   
0570   29                     ADD   hl,hl   ; if data width = 2 then double
0571                INDEX1:      
0571   19                     ADD   hl,de   ; add addr
0572   22 9E 18               LD   (vPointer),hl   ; store address in setter
0575   16 00                  LD   d,0   
0577   5E                     LD   e,(hl)   
0578   B7                     OR   a   ; check data width again
0579   28 02                  JR   z,index2   
057B   23                     INC   hl   
057C   56                     LD   d,(hl)   
057D                INDEX2:      
057D   D5                     PUSH   de   
057E   DD E9                  JP   (ix)   
0580                             ; newvalue --
0580                SET:         
0580   E1                     POP   hl   ; discard last accessed value
0581   D1                     POP   de   ; new value
0582   2A 9E 18               LD   hl,(vPointer)   
0585   73                     LD   (hl),e   
0586   3A 9A 18               LD   a,(vDataWidth)   
0589   3D                     DEC   a   
058A   28 02                  JR   z,set1   
058C   23                     INC   hl   
058D   72                     LD   (hl),d   
058E                SET1:        
058E   DD E9                  JP   (ix)   
0590                             ; if
0590                             ; condition then -- value
0590                IF:          
0590   11 00 00               LD   de,0   ; NUL pointer for else
0593   18 01                  JR   ifte1   
0595                             ; ifte
0595                             ; condition then else -- value
0595                IFTE:        
0595   D1                     POP   de   ; de = else
0596                IFTE1:       
0596   E1                     POP   hl   ; hl = then
0597   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0598   23                     INC   hl   ; check for true
0599   7C                     LD   a,h   
059A   B5                     OR   l   
059B   E1                     POP   hl   ; hl = then
059C   28 01                  JR   z,ifte2   
059E   EB                     EX   de,hl   ; condition = false, hl = else
059F                IFTE2:       
059F   E5                     PUSH   hl   
05A0   C3 DB 0A               JP   exec   
05A3                             ;     ld a,h                      ; check if hl is NUL
05A3                             ;     or l
05A3                             ;     jr z,ifte3
05A3                             ;     push bc                     ; push IP
05A3                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05A3                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05A3                             ;     push de                     ; push ScopeBP
05A3                             ;     push iy                     ; push BP
05A3                             ;     ld iy,0                     ; iy = sp
05A3                             ;     add iy,sp
05A3                             ;     ld bc,hl                    ; IP = then
05A3                             ;     dec bc
05A3                             ; ifte3:
05A3                             ;     jp (ix)
05A3                             ; switch
05A3                             ; index array -- value
05A3                SWITCH:      
05A3   D1                     POP   de   ; de = array
05A4   E1                     POP   hl   ; hl = index
05A5   29                     ADD   hl,hl   ; indec *= 2
05A6   19                     ADD   hl,de   ; add array[0]
05A7   4E                     LD   c,(hl)   ; bc = case
05A8   23                     INC   hl   
05A9   46                     LD   b,(hl)   
05AA   0B                     DEC   bc   
05AB   DD E9                  JP   (ix)   
05AD                             ; c b --
05AD                             ; loops until c = 0
05AD                LOOP:        
05AD   DD E9                  JP   (ix)   
05AF                             ;     pop de                      ; de = block                    c
05AF                             ;     pop hl                      ; hl = condition
05AF                             ;     push de
05AF                             ;     push bc                     ; push IP
05AF                             ;     ld bc,de                    ; bc = block
05AF                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05AF                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05AF                             ;     push de                     ; push ScopeBP
05AF                             ;     push iy                     ; push BP
05AF                             ;     ld iy,0                     ; iy = sp
05AF                             ;     add iy,sp
05AF                             ; loop1:
05AF                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05AF                             ;     or h
05AF                             ;     jr z,loop3
05AF                             ;     ld de,loop2-1               ; IP return address
05AF                             ;     push de
05AF                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05AF                             ;     ld d,(iy+3)
05AF                             ;     push de                     ;
05AF                             ;     push iy                     ; push BP
05AF                             ;     ld iy,0                     ; iy = sp
05AF                             ;     add iy,sp
05AF                             ;     push hl                     ; push condition
05AF                             ;     dec bc
05AF                             ;     jp (ix)
05AF                             ; loop2:
05AF                             ;     db ESC                      ; escape from interpreter
05AF                             ;     ld c,(iy+6)                 ; bc = block
05AF                             ;     ld b,(iy+7)
05AF                             ;     pop hl                      ; hl = condition
05AF                             ;     jr loop1
05AF                             ; loop3:
05AF                             ;     ld d,iyh                    ; de = BP
05AF                             ;     ld e,iyl
05AF                             ;     ex de,hl                    ; hl = BP, de = result
05AF                             ;     ld sp,hl                    ; sp = BP
05AF                             ;     pop hl                      ; hl = old BP
05AF                             ;     pop bc                      ; pop ScopeBP (discard)
05AF                             ;     pop bc                      ; bc = IP
05AF                             ;     ld sp,hl                    ; sp = old BP
05AF                             ;     ld iy,0                     ; iy = sp
05AF                             ;     add iy,sp
05AF                             ;     ld ix,(vNext)                  ; needed?
05AF                             ;     jp (ix)
05AF                WORDS:       
05AF   21 02 00               LD   hl,2   
05B2   18 03                  JR   bytes1   
05B4                BYTES:       
05B4   21 01 00               LD   hl,1   
05B7                BYTES1:      
05B7   22 9A 18               LD   (vDataWidth),hl   
05BA   DD E9                  JP   (ix)   
05BC                ARRAY:       
05BC   11 00 00               LD   de,0   ; create stack frame
05BF   D5                     PUSH   de   ; push null for IP
05C0   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05C3   FD 56 05               LD   d,(iy+5)   ; 
05C6   D5                     PUSH   de   ; 
05C7   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05CA   FD 56 03               LD   d,(iy+3)   ; 
05CD   D5                     PUSH   de   ; 
05CE   FD E5                  PUSH   iy   ; push BP
05D0   FD 21 00 00            LD   iy,0   ; BP = SP
05D4   FD 39                  ADD   iy,sp   
05D6   DD E9                  JP   (ix)   
05D8                ARRAYEND:      
05D8   FD 54                  LD   d,iyh   ; de = BP
05DA   FD 5D                  LD   e,iyl   
05DC   C5                     PUSH   bc   ; save IP
05DD   D9                     EXX      
05DE   C1                     POP   bc   
05DF   D9                     EXX      
05E0   62 6B                  LD   hl,de   ; hl = de = BP
05E2   B7                     OR   a   
05E3   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05E5   CB 3C                  SRL   h   ; 
05E7   CB 1D                  RR   l   
05E9   44 4D                  LD   bc,hl   ; bc = count
05EB   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05EE   71                     LD   (hl),c   ; write num items in length word
05EF   23                     INC   hl   
05F0   70                     LD   (hl),b   
05F1   23                     INC   hl   ; hl = array[0], bc = count
05F2                             ; de = BP, hl = array[0], bc = count
05F2   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05F5   FE 01                  CP   1   
05F7   20 10                  JR   nz,arrayEnd2   
05F9                ARRAYEND1:      ; byte
05F9   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05FC   77                     LD   (hl),a   ; write a to array item
05FD   23                     INC   hl   ; move to next byte in array
05FE   FD 2B                  DEC   iy   ; move tho next word on stack
0600   FD 2B                  DEC   iy   
0602   0B                     DEC   bc   ; dec items count
0603   79                     LD   a,c   ; if not zero loop
0604   B0                     OR   b   
0605   20 F2                  JR   nz,arrayEnd1   
0607   18 13                  JR   arrayEnd3   
0609                ARRAYEND2:      ; word
0609   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
060C   77                     LD   (hl),a   ; write lsb of array item
060D   23                     INC   hl   ; move to msb of array item
060E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0611   77                     LD   (hl),a   ; write msb of array item
0612   23                     INC   hl   ; move to next word in array
0613   FD 2B                  DEC   iy   ; move to next word on stack
0615   FD 2B                  DEC   iy   
0617   0B                     DEC   bc   ; dec items count
0618   79                     LD   a,c   ; if not zero loop
0619   B0                     OR   b   
061A   20 ED                  JR   nz,arrayEnd2   
061C                ARRAYEND3:      
061C   EB                     EX   de,hl   ; de = end of array, hl = BP
061D   F9                     LD   sp,hl   ; sp = BP
061E   E1                     POP   hl   ; de = end of array, hl = old BP
061F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0620   FD 62                  LD   iyh,d   
0622   FD 6B                  LD   iyl,e   
0624   D1                     POP   de   ; pop arg_list (discard)
0625   D1                     POP   de   ; pop ScopeBP (discard)
0626   D1                     POP   de   ; pop IP (discard)
0627   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
062B   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
062E   D9                     EXX      ; restore IP
062F   C5                     PUSH   bc   
0630   D9                     EXX      
0631   C1                     POP   bc   
0632   13                     INC   de   ; de = array[0]
0633   13                     INC   de   
0634   D5                     PUSH   de   ; return array[0]
0635   DD E9                  JP   (ix)   
0637                             ; str -- num
0637                HASH:        
0637   E1                     POP   hl   
0638   C5                     PUSH   bc   
0639   44 4D                  LD   bc,hl   
063B   CD 61 07               CALL   hashStr   
063E   C1                     POP   bc   
063F   E5                     PUSH   hl   
0640   DD E9                  JP   (ix)   
0642                             ; symbol func --
0642                DEF:         
0642   DD 21 49 06            LD   ix,def1   
0646   C3 44 0B               JP   func   
0649                DEF1:        
0649   DD 2A A4 18            LD   ix,(vNext)   
064D   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
064E   60 69                  LD   hl,bc   
0650   18 24                  JR   let1   
0652                             ; symbol value --
0652                LET:         
0652   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0654   E3                     EX   (sp),hl   
0655   EB                     EX   de,hl   
0656   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0659   36 CD                  LD   (hl),$cd   ; compile "call dolet"
065B   23                     INC   hl   
065C   36 56                  LD   (hl),lsb(dolet)   
065E   23                     INC   hl   
065F   36 05                  LD   (hl),msb(dolet)   
0661   23                     INC   hl   
0662   73                     LD   (hl),e   
0663   23                     INC   hl   
0664   72                     LD   (hl),d   
0665   ED 5B A2 18            LD   de,(vHashStr)   
0669   23                     INC   hl   
066A   73                     LD   (hl),e   
066B   23                     INC   hl   
066C   72                     LD   (hl),d   
066D   2B                     DEC   hl   
066E   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0672   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0675   E1                     POP   hl   ; de = addr, hl = IP
0676                LET1:        
0676   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0677   44 4D                  LD   bc,hl   ; bc = symbol
0679   CD 7E 07               CALL   defineEntry   
067C   38 00                  JR   c,let2   
067E                             ; call error
067E                             ; .cstr "Let Collision"
067E                LET2:        
067E   C1                     POP   bc   
067F   DD E9                  JP   (ix)   
0681                             ; symbol -- ptr
0681                ADDR:        
0681   E1                     POP   hl   ; hl = hash
0682   C5                     PUSH   bc   
0683   44 4D                  LD   bc,hl   
0685   CD A4 07               CALL   lookupEntry   
0688   38 03                  JR   c,addr1   
068A   21 00 00               LD   hl,0   
068D                             ; call printStr		
068D                             ; .cstr "Undefined"
068D                             ; jp interpret
068D                ADDR1:       
068D   C1                     POP   bc   
068E   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0691   19                     ADD   hl,de   
0692   22 9E 18               LD   (vPointer),hl   
0695   E5                     PUSH   hl   
0696   DD E9                  JP   (ix)   
0698                SYMBOL:      
0698   03                     INC   bc   
0699   11 00 1A               LD   de,PAD   
069C   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069E   18 02                  JR   symbol1   
06A0                SYMBOL0:      ; copy to PAD area
06A0   03                     INC   bc   ; characters that are part of the identifier
06A1   13                     INC   de   
06A2                SYMBOL1:      ; 0-9 A-Z a-z _
06A2   0A                     LD   a,(bc)   
06A3   12                     LD   (de),a   
06A4   FE 21                  CP   " "+1   
06A6   38 0A                  JR   c,symbol2   
06A8   6F                     LD   l,a   
06A9   7E                     LD   a,(hl)   
06AA   FE 4E                  CP   lsb(ident_)   
06AC   28 F2                  JR   z,symbol0   
06AE   FE 00                  CP   lsb(num_)   
06B0   28 EE                  JR   z,symbol0   
06B2                SYMBOL2:      
06B2   0B                     DEC   bc   
06B3   AF                     XOR   a   
06B4   12                     LD   (de),a   ; terminate string with NUL
06B5   C5                     PUSH   bc   
06B6   01 00 1A               LD   bc,PAD   
06B9   CD 61 07               CALL   hashStr   ; hl = hash
06BC   C1                     POP   bc   
06BD   E5                     PUSH   hl   
06BE   DD E9                  JP   (ix)   
06C0                IDENT:       
06C0   11 00 1A               LD   de,PAD   
06C3   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06C5   18 02                  JR   ident1   
06C7                IDENT0:      ; copy to PAD area
06C7   03                     INC   bc   ; characters that are part of the identifier
06C8   13                     INC   de   
06C9                IDENT1:      ; 0-9 A-Z a-z _
06C9   0A                     LD   a,(bc)   
06CA   12                     LD   (de),a   
06CB                             ; or a
06CB                             ; jr z,ident2
06CB   FE 21                  CP   " "+1   
06CD   38 0A                  JR   c,ident2   
06CF   6F                     LD   l,a   
06D0   7E                     LD   a,(hl)   
06D1   FE 4E                  CP   lsb(ident_)   
06D3   28 F2                  JR   z,ident0   
06D5   FE 00                  CP   lsb(num_)   
06D7   28 EE                  JR   z,ident0   
06D9                IDENT2:      
06D9   0B                     DEC   bc   
06DA   AF                     XOR   a   
06DB   12                     LD   (de),a   ; terminate string with NUL
06DC   C5                     PUSH   bc   
06DD   01 00 1A               LD   bc,PAD   
06E0   CD 61 07               CALL   hashStr   ; hl = hash
06E3   44 4D                  LD   bc,hl   
06E5   CD A4 07               CALL   lookupEntry   
06E8   C1                     POP   bc   
06E9   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06EB   DD E9                  JP   (ix)   
06ED                IDENT3:      
06ED   E9                     JP   (hl)   
06EE                FRAC:        
06EE   2A 98 18               LD   hl,(vFrac)   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                SQRT1:       
06F4   E1                     POP   hl   
06F5   C5                     PUSH   bc   
06F6   CD E1 07               CALL   squareRoot   
06F9   ED 43 98 18            LD   (vFrac),bc   
06FD   C1                     POP   bc   
06FE   D5                     PUSH   de   
06FF   DD E9                  JP   (ix)   
0701                ABS1:        
0701   E1                     POP   hl   
0702   CB 7C                  BIT   7,h   
0704   C8                     RET   z   
0705   AF                     XOR   a   
0706   95                     SUB   l   
0707   6F                     LD   l,a   
0708   9F                     SBC   a,a   
0709   94                     SUB   h   
070A   67                     LD   h,a   
070B   E5                     PUSH   hl   
070C   DD E9                  JP   (ix)   
070E                MOD:         
070E   D1                     POP   de   ; get first value
070F   E1                     POP   hl   ; get 2nd value
0710   C5                     PUSH   bc   ; preserve the IP
0711   44 4D                  LD   bc,hl   
0713   CD C8 07               CALL   divide   
0716   C1                     POP   bc   
0717   E5                     PUSH   hl   ; push remainder
0718   DD E9                  JP   (ix)   
071A                             ; hl = value1, de = value2
071A                             ; hl = result
071A                EQUALS:      
071A   B7                     OR   a   ; reset the carry flag
071B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
071D   28 10                  JR   z,true1   
071F   C3 35 07               JP   false1   
0722                             ; hl = value1 de = value2
0722                             ; hl = result
0722                LESSTHANEQ:      
0722   B7                     OR   a   
0723   ED 52                  SBC   hl,de   
0725   18 05                  JR   lessthan1   
0727                             ; hl = value1 de = value2
0727                             ; hl = result
0727                LESSTHAN:      
0727   B7                     OR   a   
0728   ED 52                  SBC   hl,de   
072A   28 09                  JR   z,false1   
072C                LESSTHAN1:      
072C   FA 35 07               JP   m,false1   
072F                TRUE1:       
072F   21 FF FF               LD   hl,TRUE   
0732   E5                     PUSH   hl   
0733   DD E9                  JP   (ix)   
0735                FALSE1:      
0735   21 00 00               LD   hl,FALSE   
0738   E5                     PUSH   hl   
0739   DD E9                  JP   (ix)   
073B                             ; Z80 port input
073B                             ; port -- value
073B                INPUT:       
073B   E1                     POP   hl   
073C   59                     LD   e,c   ; save IP
073D   4D                     LD   c,l   
073E   ED 68                  IN   l,(c)   
0740   26 00                  LD   h,0   
0742   4B                     LD   c,e   ; restore IP
0743   E5                     PUSH   hl   
0744   DD E9                  JP   (ix)   
0746                             ; Z80 port output
0746                             ; value port --
0746                OUTPUT:      
0746   E1                     POP   hl   
0747   59                     LD   e,c   ; save IP
0748   4D                     LD   c,l   
0749   E1                     POP   hl   
074A   ED 69                  OUT   (c),l   
074C   4B                     LD   c,e   ; restore IP
074D   DD E9                  JP   (ix)   
074F                KEY:         
074F   CD 81 00               CALL   getchar   
0752   26 00                  LD   h,0   
0754   6F                     LD   l,a   
0755   E5                     PUSH   hl   
0756   DD E9                  JP   (ix)   
0758                NEG:         
0758   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
075B   D1                     POP   de   
075C   C3 94 03               JP   sub2   ; use the SUBtract routine
075F                FILTER:      
075F                MAP:         
075F                SCAN:        
075F   DD E9                  JP   (ix)   
0761                             ; -------------------------------------------------------------------------------
0761                             ; hash C-string
0761                             ; BC = str
0761                             ; HL = hash
0761                HASHSTR:      
0761   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
0765   21 00 00               LD   hl,0   
0768                HASHSTR1:      
0768   0A                     LD   a,(bc)   ; load next char
0769   03                     INC   bc   
076A   FE 00                  CP   0   ; NUL?
076C   C8                     RET   z   
076D                HASHSTR2:      
076D   16 00                  LD   d,0   
076F   5F                     LD   e,a   
0770   19                     ADD   hl,de   
0771   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0773   29                     ADD   hl,hl   ; shift left
0774   19                     ADD   hl,de   ; add
0775   29                     ADD   hl,hl   ; shift left
0776   29                     ADD   hl,hl   ; shift left
0777   29                     ADD   hl,hl   ; shift left
0778   29                     ADD   hl,hl   ; shift left
0779   29                     ADD   hl,hl   ; shift left
077A   29                     ADD   hl,hl   ; shift left
077B   19                     ADD   hl,de   ; add
077C   18 EA                  JR   hashStr1   
077E                             ; add entry to hash slots and hash pointers
077E                             ; bc = hash (b = hi, c = lo), de = addr
077E                             ; sets carry if successful
077E                DEFINEENTRY:      
077E   CB 21                  SLA   c   ; lo = lo * 2
0780   69                     LD   l,c   ; lo1 = lo
0781   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0783                DEFINEENTRY0:      
0783   7E                     LD   a,(hl)   ; a = (lo1)
0784   FE FF                  CP   UNUSED   ; is it unused?
0786   28 12                  JR   z,defineEntry3   ; yes, add entry
0788   79                     LD   a,c   ; a = lo
0789   BE                     CP   (hl)   ; compare (lo1) with lo
078A   20 06                  JR   nz,defineEntry1   ; no match loop around
078C   2C                     INC   l   
078D   78                     LD   a,b   ; a = hi
078E   BE                     CP   (hl)   ; compare (lo1+1) with hi
078F   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0791   2D                     DEC   l   ; restore l
0792                DEFINEENTRY1:      
0792   2C                     INC   l   ; try next entry
0793   2C                     INC   l   
0794   79                     LD   a,c   ; compare lo and lo1
0795   BD                     CP   l   ; if equal then there's no space left, reject
0796   20 EB                  JR   nz,defineEntry0   
0798                DEFINEENTRY2:      
0798   B7                     OR   a   ; clear carry flag, failure
0799   C9                     RET      
079A                DEFINEENTRY3:      ; new entry
079A   71                     LD   (hl),c   ; (lo1) = hash lo
079B   23                     INC   hl   
079C   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
079D   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
079F   72                     LD   (hl),d   
07A0   2B                     DEC   hl   
07A1   73                     LD   (hl),e   ; (slot + 2) = address
07A2   37                     SCF      ; set carry flag, success
07A3   C9                     RET      
07A4                             ; looks up hash and returns address
07A4                             ; bc = hash
07A4                             ; returns addr in hl, sets carry if successful
07A4                LOOKUPENTRY:      
07A4   CB 21                  SLA   c   ; lo = lo * 2
07A6   69                     LD   l,c   ; lo1 = lo
07A7   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07A9                LOOKUPENTRY0:      
07A9   7E                     LD   a,(hl)   ; a = (hl), slot
07AA   FE FF                  CP   UNUSED   ; is it unused?
07AC   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07AE   79                     LD   a,c   ; a = lo
07AF   BE                     CP   (hl)   ; compare (lo1) with lo
07B0   20 06                  JR   nz,lookupEntry1   ; no match loop around
07B2   2C                     INC   l   
07B3   78                     LD   a,b   ; a = hi
07B4   BE                     CP   (hl)   ; compare (lo1+1) with hi
07B5   28 09                  JR   z,lookupEntry3   
07B7   2D                     DEC   l   
07B8                LOOKUPENTRY1:      
07B8   2C                     INC   l   
07B9   2C                     INC   l   
07BA   79                     LD   a,c   
07BB   BD                     CP   l   ; no space left, reject
07BC   20 EB                  JR   nz,lookupEntry0   
07BE                LOOKUPENTRY2:      
07BE   B7                     OR   a   ; clear carry flag, failure
07BF   C9                     RET      
07C0                LOOKUPENTRY3:      
07C0   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07C2   56                     LD   d,(hl)   
07C3   2D                     DEC   l   ; restore l
07C4   5E                     LD   e,(hl)   ; (slot + 2) = address
07C5   EB                     EX   de,hl   
07C6   37                     SCF      
07C7   C9                     RET      
07C8                             ; division subroutine.
07C8                             ; bc: divisor, de: dividend, hl: remainder
07C8                DIVIDE:      
07C8   21 00 00               LD   hl,0   ; zero the remainder
07CB   3E 10                  LD   a,16   ; loop counter
07CD                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07CD   CB 21                  SLA   c   
07CF   CB 10                  RL   b   
07D1   ED 6A                  ADC   hl,hl   
07D3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07D5   38 03                  JR   c,divide2   
07D7   0C                     INC   c   
07D8   18 01                  JR   divide3   
07DA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07DA   19                     ADD   hl,de   
07DB                DIVIDE3:      
07DB   3D                     DEC   a   
07DC   20 EF                  JR   nz,divide1   
07DE   50 59                  LD   de,bc   ; result from bc to de
07E0   C9                     RET      
07E1                             ; squareroot
07E1                             ; Input: HL = value
07E1                             ; Result: DE = square root BC = remainder
07E1                SQUAREROOT:      
07E1   01 00 08               LD   bc,0800h   
07E4   59                     LD   e,c   
07E5   AF                     XOR   a   
07E6                SQUAREROOT1:      
07E6   29                     ADD   hl,hl   
07E7   CB 11                  RL   c   
07E9   ED 6A                  ADC   hl,hl   
07EB   CB 11                  RL   c   
07ED   30 02                  JR   nc,$+4   
07EF   CB C5                  SET   0,l   
07F1   7B                     LD   a,e   
07F2   87                     ADD   a,a   
07F3   5F                     LD   e,a   
07F4   87                     ADD   a,a   
07F5   CB 45                  BIT   0,l   
07F7   20 03                  JR   nz,$+5   
07F9   91                     SUB   c   
07FA   30 05                  JR   nc,squareRoot4   
07FC   79                     LD   a,c   
07FD   93                     SUB   e   
07FE   1C                     INC   e   
07FF   93                     SUB   e   
0800   4F                     LD   c,a   
0801                SQUAREROOT4:      
0801   10 E3                  DJNZ   squareRoot1   
0803   CB 45                  BIT   0,l   
0805   28 01                  JR   z,squareRoot5   
0807   04                     INC   b   
0808                SQUAREROOT5:      
0808   16 00                  LD   d,0   
080A   C9                     RET      
080B                PRTDEC:      
080B   CB 7C                  BIT   7,h   
080D   28 0B                  JR   z,prtdec0   
080F   3E 2D                  LD   a,"-"   
0811   CD 85 00               CALL   putchar   
0814   AF                     XOR   a   
0815   95                     SUB   l   
0816   6F                     LD   l,a   
0817   9F                     SBC   a,a   
0818   94                     SUB   h   
0819   67                     LD   h,a   
081A                PRTDEC0:      
081A   C5                     PUSH   bc   
081B   0E 00                  LD   c,0   ; leading zeros flag = false
081D   11 F0 D8               LD   de,-10000   
0820   CD 3C 08               CALL   prtdec1   
0823   11 18 FC               LD   de,-1000   
0826   CD 3C 08               CALL   prtdec1   
0829   11 9C FF               LD   de,-100   
082C   CD 3C 08               CALL   prtdec1   
082F   1E F6                  LD   e,-10   
0831   CD 3C 08               CALL   prtdec1   
0834   0C                     INC   c   ; flag = true for at least digit
0835   1E FF                  LD   e,-1   
0837   CD 3C 08               CALL   prtdec1   
083A   C1                     POP   bc   
083B   C9                     RET      
083C                PRTDEC1:      
083C   06 2F                  LD   b,"0"-1   
083E                PRTDEC2:      
083E   04                     INC   b   
083F   19                     ADD   hl,de   
0840   38 FC                  JR   c,prtdec2   
0842   ED 52                  SBC   hl,de   
0844   3E 30                  LD   a,"0"   
0846   B8                     CP   b   
0847   20 05                  JR   nz,prtdec3   
0849   AF                     XOR   a   
084A   B1                     OR   c   
084B   C8                     RET   z   
084C   18 01                  JR   prtdec4   
084E                PRTDEC3:      
084E   0C                     INC   c   
084F                PRTDEC4:      
084F   78                     LD   a,b   
0850   C3 85 00               JP   putchar   
0853                PRTHEX:      ; display hl as a 16-bit number in hex.
0853   C5                     PUSH   bc   ; preserve the IP
0854   7C                     LD   a,h   
0855   CD 5E 08               CALL   prthex2   
0858   7D                     LD   a,l   
0859   CD 5E 08               CALL   prthex2   
085C   C1                     POP   bc   
085D   C9                     RET      
085E                PRTHEX2:      
085E   4F                     LD   c,a   
085F   1F                     RRA      
0860   1F                     RRA      
0861   1F                     RRA      
0862   1F                     RRA      
0863   CD 67 08               CALL   prthex3   
0866   79                     LD   a,c   
0867                PRTHEX3:      
0867   E6 0F                  AND   0x0F   
0869   C6 90                  ADD   a,0x90   
086B   27                     DAA      
086C   CE 40                  ADC   a,0x40   
086E   27                     DAA      
086F   C3 85 00               JP   putchar   
0872                PRTSTR0:      
0872   CD 85 00               CALL   putchar   
0875   23                     INC   hl   
0876                PRTSTR:      
0876   7E                     LD   a,(hl)   
0877   B7                     OR   a   
0878   20 F8                  JR   nz,prtstr0   
087A   C9                     RET      
087B                             ; **************************************************************************
087B                             ; calculate nesting value
087B                             ; a is char to be tested,
087B                             ; e is the nesting value (initially 0)
087B                             ; e is increased by ( and [
087B                             ; e is decreased by ) and ]
087B                             ; e has its bit 7 toggled by `
087B                             ; limited to 127 levels
087B                             ; **************************************************************************
087B                NESTING:      
087B   FE 22                  CP   $22   ; quote char
087D   20 0A                  JR   nz,nesting1   
087F   CB 7B                  BIT   7,e   
0881   28 03                  JR   z,nesting1a   
0883   CB BB                  RES   7,e   
0885   C9                     RET      
0886                NESTING1A:      
0886   CB FB                  SET   7,e   
0888   C9                     RET      
0889                NESTING1:      
0889   CB 7B                  BIT   7,e   
088B   C0                     RET   nz   
088C   FE 7B                  CP   "{"   
088E   28 08                  JR   z,nesting2   
0890   FE 5B                  CP   "["   
0892   28 04                  JR   z,nesting2   
0894   FE 28                  CP   "("   
0896   20 02                  JR   nz,nesting3   
0898                NESTING2:      
0898   1C                     INC   e   
0899   C9                     RET      
089A                NESTING3:      
089A   FE 7D                  CP   "}"   
089C   28 07                  JR   z,nesting4   
089E   FE 5D                  CP   "]"   
08A0   28 03                  JR   z,nesting4   
08A2   FE 29                  CP   ")"   
08A4   C0                     RET   nz   
08A5                NESTING4:      
08A5   1D                     DEC   e   
08A6   C9                     RET      
08A7                PROMPT:      
08A7   CD B7 08               CALL   printStr   
08AA   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08AF   C9                     RET      
08B0                CRLF:        
08B0   CD B7 08               CALL   printStr   
08B3   0D 0A 00               .CSTR   "\r\n"   
08B6   C9                     RET      
08B7                             ; prints a null teminated string
08B7                             ; the string should be immedaitely following the call
08B7                PRINTSTR:      
08B7   E3                     EX   (sp),hl   ; swap			
08B8   CD 76 08               CALL   prtstr   
08BB   23                     INC   hl   ; inc past NUL
08BC   E3                     EX   (sp),hl   ; put it back	
08BD   C9                     RET      
08BE                             ; executes a null teminated string (null executes exit_)
08BE                             ; the string should be immedaitely following the call
08BE                EXECSTR:      ; create a root stack frame
08BE                             ; pop bc                      ; bc = code*
08BE                             ; dec bc                      ; dec to prepare for next routine
08BE                             ; ld de,0
08BE                             ; push de                     ; push fake IP
08BE                             ; push de                     ; push null arglist*
08BE                             ; push de                     ; push null first_arg*
08BE                             ; push de                     ; push fake BP
08BE                             ; jp (ix)
08BE                BRANCH:      ; executes the address on the stack
08BE   C1                     POP   bc   ; bc = code*
08BF   0B                     DEC   bc   ; dec to prepare for next routine
08C0   DD E9                  JP   (ix)   
08C2                DEFINE:      
08C2   E1                     POP   hl   
08C3   7E                     LD   a,(hl)   
08C4   23                     INC   hl   
08C5   44 4D                  LD   bc,hl   
08C7   5F                     LD   e,a   
08C8   16 00                  LD   d,0   
08CA   19                     ADD   hl,de   
08CB   5E                     LD   e,(hl)   
08CC   23                     INC   hl   
08CD   56                     LD   d,(hl)   
08CE   23                     INC   hl   
08CF   E5                     PUSH   hl   ; bc = str
08D0   D5                     PUSH   de   
08D1   CD 61 07               CALL   hashStr   ; hl = hash
08D4   D1                     POP   de   
08D5   44 4D                  LD   bc,hl   
08D7   C3 7E 07               JP   defineEntry   
08DA                INIT:        
08DA   DD 2A A4 18            LD   ix,(vNext)   
08DE   FD 21 80 18            LD   iy,STACK   
08E2   21 80 01               LD   hl,isysVars   
08E5   11 98 18               LD   de,sysVars   
08E8   01 10 00               LD   bc,8 * 2   
08EB   ED B0                  LDIR      
08ED   3E FF                  LD   a,UNUSED   
08EF   06 00                  LD   b,0   
08F1   21 00 1B               LD   hl,hashSlots   
08F4                INIT1:       
08F4   77                     LD   (hl),a   
08F5   23                     INC   hl   
08F6   10 FC                  DJNZ   init1   
08F8   CD C2 08               CALL   define   
08FB   04 61 62 73 00         .PSTR   "abs",0   
0900   01 07                  DW   abs1   
0902   CD C2 08               CALL   define   
0905   05 61 64 64 72 00      .PSTR   "addr",0   
090B   81 06                  DW   addr   
090D   CD C2 08               CALL   define   
0910   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0917   B4 05                  DW   bytes   
0919   CD C2 08               CALL   define   
091C   05 63 61 6C 6C 00      .PSTR   "call",0   
0922   D9 0A                  DW   call   
0924                             ; call define
0924                             ; .pstr "closure",0
0924                             ; dw closure
0924   CD C2 08               CALL   define   
0927   04 64 65 66 00         .PSTR   "def",0   
092C   42 06                  DW   def   
092E   CD C2 08               CALL   define   
0931   05 65 78 65 63 00      .PSTR   "exec",0   
0937   DB 0A                  DW   exec   
0939   CD C2 08               CALL   define   
093C   06 66 61 6C 73 65 00   .PSTR   "false",0   
0943   00 00                  DW   false   
0945   CD C2 08               CALL   define   
0948   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0950   5F 07                  DW   filter   
0952   CD C2 08               CALL   define   
0955   05 66 72 61 63 00      .PSTR   "frac",0   
095B   EE 06                  DW   frac   
095D   CD C2 08               CALL   define   
0960   05 66 75 6E 63 00      .PSTR   "func",0   
0966   44 0B                  DW   func   
0968                             ; call define
0968                             ; .pstr "get",0
0968                             ; dw get
0968   CD C2 08               CALL   define   
096B   05 68 61 73 68 00      .PSTR   "hash",0   
0971   37 06                  DW   hash   
0973   CD C2 08               CALL   define   
0976   06 69 6E 70 75 74 00   .PSTR   "input",0   
097D   3B 07                  DW   input   
097F   CD C2 08               CALL   define   
0982   03 69 66 00            .PSTR   "if",0   
0986   90 05                  DW   if   
0988   CD C2 08               CALL   define   
098B   05 69 66 74 65 00      .PSTR   "ifte",0   
0991   95 05                  DW   ifte   
0993   CD C2 08               CALL   define   
0996   04 6B 65 79 00         .PSTR   "key",0   
099B   4F 07                  DW   key   
099D   CD C2 08               CALL   define   
09A0   04 6C 65 74 00         .PSTR   "let",0   
09A5   52 06                  DW   let   
09A7   CD C2 08               CALL   define   
09AA   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09B0   AD 05                  DW   loop   
09B2   CD C2 08               CALL   define   
09B5   04 6D 61 70 00         .PSTR   "map",0   
09BA   5F 07                  DW   map   
09BC   CD C2 08               CALL   define   
09BF   04 6D 6F 64 00         .PSTR   "mod",0   
09C4   0E 07                  DW   mod   
09C6   CD C2 08               CALL   define   
09C9   04 6E 65 67 00         .PSTR   "neg",0   
09CE   58 07                  DW   neg   
09D0   CD C2 08               CALL   define   
09D3   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09DB   46 07                  DW   output   
09DD   CD C2 08               CALL   define   
09E0   05 73 63 61 6E 00      .PSTR   "scan",0   
09E6   01 00                  DW   scan   
09E8   CD C2 08               CALL   define   
09EB   04 73 65 74 00         .PSTR   "set",0   
09F0   80 05                  DW   set   
09F2   CD C2 08               CALL   define   
09F5   04 73 68 6C 00         .PSTR   "shl",0   
09FA   CF 03                  DW   shl   
09FC   CD C2 08               CALL   define   
09FF   04 73 68 72 00         .PSTR   "shr",0   
0A04   DF 03                  DW   shr   
0A06   CD C2 08               CALL   define   
0A09   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A0F   F4 06                  DW   sqrt1   
0A11   CD C2 08               CALL   define   
0A14   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A1C   A3 05                  DW   switch   
0A1E   CD C2 08               CALL   define   
0A21   05 74 72 75 65 00      .PSTR   "true",0   
0A27   FF FF                  DW   true   
0A29   CD C2 08               CALL   define   
0A2C   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A33   AF 05                  DW   words   
0A35   C9                     RET      
0A36                START:       
0A36   31 80 18               LD   sp,STACK   ; start of Siena
0A39   CD DA 08               CALL   init   ; setups
0A3C   CD B7 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A3F   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A4C                INTERPRET:      
0A4C   CD A7 08               CALL   prompt   
0A4F   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A52   ED 43 9C 18            LD   (vTIBPtr),bc   
0A56                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A56   1E 00                  LD   e,0   ; initilize nesting value
0A58   C5                     PUSH   bc   ; save offset into TIB,
0A59                             ; bc is also the count of chars in TIB
0A59   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A5C   18 06                  JR   interpret4   
0A5E                INTERPRET3:      
0A5E   7E                     LD   a,(hl)   ; a = char in TIB
0A5F   23                     INC   hl   ; inc pointer into TIB
0A60   0B                     DEC   bc   ; dec count of chars in TIB
0A61   CD 7B 08               CALL   nesting   ; update nesting value
0A64                INTERPRET4:      
0A64   79                     LD   a,c   ; is count zero?
0A65   B0                     OR   b   
0A66   20 F6                  JR   nz,interpret3   ; if not loop
0A68   C1                     POP   bc   ; restore offset into TIB
0A69                WAITCHAR:      
0A69   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A6C   FE 20                  CP   $20   ; compare to space
0A6E   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A70   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A72                             ; ???? NEEDED?
0A72   28 27                  JR   z,waitchar4   
0A74   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A76   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A78                MACRO:       
0A78                             ;  ld (vTIBPtr),bc
0A78                             ;  ld hl,ctrlCodes
0A78                             ;  add a,l			            ; look up key of macros
0A78                             ;  ld l,a
0A78                             ;  ld e,(hl)
0A78                             ;  ld a,e
0A78                             ;  or a
0A78                             ;  jr z,macro1
0A78                             ;  ld d,msb(macros)
0A78                             ;  push de
0A78                             ;  call call		            ; Siena exec_ operation and jump to it
0A78                             ;  db DC1,0
0A78                             ; macro1:
0A78                             ;  ld bc,(vTIBPtr)
0A78   18 DC                  JR   interpret2   
0A7A                WAITCHAR1:      
0A7A   21 00 19               LD   hl,TIB   
0A7D   09                     ADD   hl,bc   
0A7E   77                     LD   (hl),a   ; store the character in textbuf
0A7F   03                     INC   bc   
0A80   CD 85 00               CALL   putchar   ; echo character to screen
0A83   CD 7B 08               CALL   nesting   
0A86   18 E1                  JR   waitchar   ; wait for next character
0A88                WAITCHAR3:      
0A88   21 00 19               LD   hl,TIB   
0A8B   09                     ADD   hl,bc   
0A8C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A8E   23                     INC   hl   
0A8F   36 0A                  LD   (hl),"\n"   
0A91   23                     INC   hl   
0A92   03                     INC   bc   
0A93   03                     INC   bc   
0A94   CD B0 08               CALL   crlf   ; echo character to screen
0A97   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A98   B7                     OR   a   
0A99   20 CE                  JR   nz,waitchar   
0A9B                WAITCHAR4:      
0A9B   ED 43 9C 18            LD   (vTIBPtr),bc   
0A9F   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AA2                             ; we pressed enter
0AA2   0B                     DEC   bc   
0AA3                NEXT:        
0AA3   03                     INC   bc   ; Increment the IP
0AA4   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AA5   FE 20                  CP   " "   ; whitespace?
0AA7   28 FA                  JR   z,next   ; space? ignore
0AA9   38 07                  JR   c,next1   
0AAB   6F                     LD   l,a   ; index into table
0AAC   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AAE   6E                     LD   l,(hl)   ; get low jump address
0AAF   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AB1   E9                     JP   (hl)   ; Jump to routine
0AB2                NEXT1:       
0AB2   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0AB4   28 0F                  JR   z,escape_   
0AB6   FE 00                  CP   NUL   ; end of input string?
0AB8   28 0C                  JR   z,exit_   
0ABA   FE 11                  CP   DC1   ; literal number
0ABC   28 0B                  JR   z,literal_   
0ABE   FE 12                  CP   DC2   ; enter routine
0AC0   28 10                  JR   z,enter_   
0AC2   C3 4C 0A               JP   interpret   ; no, other whitespace, macros?
0AC5                ESCAPE_:      
0AC5   03                     INC   bc   ; falls through
0AC6                EXIT_:       
0AC6   60 69                  LD   hl,bc   
0AC8   E9                     JP   (hl)   
0AC9                LITERAL_:      
0AC9   03                     INC   bc   
0ACA   0A                     LD   a,(bc)   
0ACB   6F                     LD   l,a   
0ACC   03                     INC   bc   
0ACD   0A                     LD   a,(bc)   
0ACE   67                     LD   h,a   
0ACF   E5                     PUSH   hl   
0AD0   DD E9                  JP   (ix)   
0AD2                ENTER_:      
0AD2   03                     INC   bc   
0AD3   0A                     LD   a,(bc)   
0AD4   6F                     LD   l,a   
0AD5   03                     INC   bc   
0AD6   0A                     LD   a,(bc)   
0AD7   67                     LD   h,a   
0AD8   E9                     JP   (hl)   
0AD9                             ; arg1 .. argn func -- ?
0AD9                CALL:        
0AD9   E1                     POP   hl   
0ADA   E9                     JP   (hl)   
0ADB                             ; execute a block of code which ends with }
0ADB                             ; creates a root scope if BP == stack
0ADB                             ; else uses outer scope
0ADB                EXEC:        
0ADB   D1                     POP   de   ; de = block*
0ADC   7B                     LD   a,e   ; if block* == null, exit
0ADD   B2                     OR   d   
0ADE   20 02                  JR   nz,exec1   
0AE0   DD E9                  JP   (ix)   
0AE2                EXEC1:       
0AE2   C5                     PUSH   bc   ; push IP
0AE3   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0AE6   FD 44                  LD   b,iyh   
0AE8   FD 4D                  LD   c,iyl   
0AEA   B7                     OR   a   ; hl = stack - BP = root_scope
0AEB   ED 42                  SBC   hl,bc   
0AED   7D                     LD   a,l   ; if root_scope, skip
0AEE   B4                     OR   h   
0AEF   28 11                  JR   z,exec2   
0AF1   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0AF4   FD 46 05               LD   b,(iy+5)   
0AF7   C5                     PUSH   bc   
0AF8   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0AFB   FD 46 03               LD   b,(iy+3)   
0AFE   60 69                  LD   hl,bc   
0B00   18 34                  JR   doCall4   
0B02                EXEC2:       
0B02   E5                     PUSH   hl   ; push arg_list (null)
0B03   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0B06   39                     ADD   hl,sp   
0B07   18 2D                  JR   doCall4   ; 
0B09                             ; call with args
0B09                             ; creates a scope
0B09                             ; code* -- ?
0B09                DOCALL:      ; execute code at pointer
0B09   E1                     POP   hl   ; hl = code*
0B0A   7D                     LD   a,l   ; if code* == null, skip
0B0B   B4                     OR   h   
0B0C   28 34                  JR   z,doCall5   
0B0E   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0B0F   23                     INC   hl   
0B10   56                     LD   d,(hl)   
0B11   23                     INC   hl   
0B12   EB                     EX   de,hl   
0B13   7D                     LD   a,l   ; if arg_list* != null skip
0B14   B4                     OR   h   
0B15   20 08                  JR   nz,doCall1   
0B17   C5                     PUSH   bc   ; push IP
0B18   E5                     PUSH   hl   ; push arg_list (null)
0B19   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0B1C   39                     ADD   hl,sp   
0B1D   18 17                  JR   doCall4   
0B1F                DOCALL1:      
0B1F   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0B20   7E                     LD   a,(hl)   
0B21   23                     INC   hl   
0B22   B7                     OR   a   
0B23   28 05                  JR   z,doCall3   
0B25                DOCALL2:      
0B25   3B                     DEC   sp   
0B26   3B                     DEC   sp   
0B27   3D                     DEC   a   
0B28   20 FB                  JR   nz,doCall2   
0B2A                DOCALL3:      
0B2A   C5                     PUSH   bc   ; push IP
0B2B   E5                     PUSH   hl   ; push arg_list*
0B2C   2B                     DEC   hl   ; hl = num_args*
0B2D   2B                     DEC   hl   
0B2E   7E                     LD   a,(hl)   ; hl = num_args * 2
0B2F   87                     ADD   a,a   
0B30   C6 04                  ADD   a,4   ; offset for IP and arg_list
0B32   6F                     LD   l,a   
0B33   26 00                  LD   h,$0   
0B35   39                     ADD   hl,sp   ; hl = first_arg*
0B36                DOCALL4:      
0B36   E5                     PUSH   hl   ; push first_arg
0B37   FD E5                  PUSH   iy   ; push BP
0B39   FD 21 00 00            LD   iy,0   ; BP = SP
0B3D   FD 39                  ADD   iy,sp   
0B3F   42 4B                  LD   bc,de   ; bc = de = block*-1
0B41   0B                     DEC   bc   
0B42                DOCALL5:      
0B42   DD E9                  JP   (ix)   
0B44                             ; arg_list* block* -- ptr
0B44                FUNC:        
0B44   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B47   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B49   23                     INC   hl   
0B4A   36 09                  LD   (hl),lsb(doCall)   
0B4C   23                     INC   hl   
0B4D   36 0B                  LD   (hl),msb(doCall)   
0B4F   23                     INC   hl   
0B50   D1                     POP   de   ; hl = heapPtr, de = block
0B51   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
0B52   E3                     EX   (sp),hl   
0B53   EB                     EX   de,hl   
0B54   73                     LD   (hl),e   ; compile arg_list*
0B55   23                     INC   hl   
0B56   72                     LD   (hl),d   
0B57   23                     INC   hl   
0B58   D1                     POP   de   ; de = block*
0B59   C5                     PUSH   bc   ; (sp) = IP
0B5A   06 01                  LD   b,1   ; b = nesting
0B5C                FUNC1:       
0B5C   1A                     LD   a,(de)   
0B5D   13                     INC   de   
0B5E   77                     LD   (hl),a   
0B5F   23                     INC   hl   
0B60   FE 29                  CP   ")"   
0B62   28 29                  JR   z,func4   
0B64   FE 7D                  CP   "}"   
0B66   28 25                  JR   z,func4   
0B68   FE 5D                  CP   "]"   
0B6A   28 21                  JR   z,func4   
0B6C   FE 28                  CP   "("   
0B6E   28 12                  JR   z,func2   
0B70   FE 7B                  CP   "{"   
0B72   28 0E                  JR   z,func2   
0B74   FE 5B                  CP   "["   
0B76   28 0A                  JR   z,func2   
0B78   FE 27                  CP   "'"   
0B7A   28 09                  JR   z,func3   
0B7C   FE 60                  CP   "`"   
0B7E   28 05                  JR   z,func3   
0B80   18 DA                  JR   func1   
0B82                FUNC2:       
0B82   04                     INC   b   
0B83   18 D7                  JR   func1   
0B85                FUNC3:       
0B85   3E 80                  LD   a,$80   
0B87   A8                     XOR   b   
0B88   47                     LD   b,a   
0B89   20 D1                  JR   nz,func1   
0B8B   18 03                  JR   func4a   
0B8D                FUNC4:       
0B8D   05                     DEC   b   
0B8E   20 CC                  JR   nz,func1   ; get the next element
0B90                FUNC4A:      
0B90   23                     INC   hl   
0B91   C1                     POP   bc   ; de = defstart, hl = IP
0B92   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0B96   D5                     PUSH   de   
0B97   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0B9A   DD E9                  JP   (ix)   
0B9C                             ; $a .. $z
0B9C                             ; -- value
0B9C                             ; returns value of arg
0B9C                ARG:         
0B9C   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B9F   FD 56 05               LD   d,(iy+5)   
0BA2   EB                     EX   de,hl   
0BA3   7D                     LD   a,l   ; arg_list* == null, skip
0BA4   B4                     OR   h   
0BA5   28 1C                  JR   z,arg0a   
0BA7   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0BA8   2B                     DEC   hl   
0BA9   7E                     LD   a,(hl)   
0BAA   23                     INC   hl   
0BAB   23                     INC   hl   
0BAC   B7                     OR   a   
0BAD   28 14                  JR   z,arg0a   ; num_args == 0, skip
0BAF   5F                     LD   e,a   ; e = a = num_args
0BB0   03                     INC   bc   ; a = next char = arg_name
0BB1   0A                     LD   a,(bc)   
0BB2   C5                     PUSH   bc   ; save IP
0BB3   43                     LD   b,e   ; b = e = num_args
0BB4   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BB7   FD 56 03               LD   d,(iy+3)   
0BBA                ARG0:        
0BBA   1B                     DEC   de   ; a = arg_name, de = next arg*
0BBB   1B                     DEC   de   
0BBC   BE                     CP   (hl)   
0BBD   28 09                  JR   z,arg1   
0BBF   23                     INC   hl   ; hl = next arg_list*
0BC0   10 F8                  DJNZ   arg0   
0BC2   C1                     POP   bc   ; no match, restore IP
0BC3                ARG0A:       
0BC3   11 00 00               LD   de,0   ; return 0
0BC6   18 08                  JR   arg1a   
0BC8                ARG1:        
0BC8   C1                     POP   bc   ; restore IP
0BC9   EB                     EX   de,hl   ; hl = arg*
0BCA   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0BCD   5E                     LD   e,(hl)   
0BCE   23                     INC   hl   
0BCF   56                     LD   d,(hl)   ; de = arg
0BD0                ARG1A:       
0BD0   D5                     PUSH   de   ; push arg
0BD1   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1", 1
4000   31 80 18               LD   SP,STACK   
4003   CD DA 08               CALL   init   
4006   CD BE 08               CALL   execStr   
4009   31 00                  .CSTR   "1"   
400B                          ;*Macro unroll:  expect "1",1
400B   E1                     POP   HL   
400C   E5                     PUSH   HL   
400D   11 01 00               LD   DE,1   
4010   B7                     OR   A   
4011   ED 52                  SBC   HL,DE   
4013   7D                     LD   A,L   
4014   B4                     OR   H   
4015   28 4C                  JR   Z,expectM_0_2529S43   
4017   CD B7 08               CALL   printStr   
401A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4022   CD B7 08               CALL   printStr   
4025   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4034   21 01 00               LD   HL,1   
4037   CD 0B 08               CALL   prtdec   
403A   CD B7 08               CALL   printStr   
403D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404A   E1                     POP   hl   
404B   E5                     PUSH   hl   
404C   CD 0B 08               CALL   prtdec   
404F   E1                     POP   hl   
4050   CD B7 08               CALL   printStr   
4053   20 28 23 00            .CSTR   " (#"   
4057   CD 53 08               CALL   prthex   
405A   CD B7 08               CALL   printStr   
405D   29 0D 0A 00            .CSTR   ")\r\n"   
4061   76                     HALT      
4062   00                     .CSTR      
4063                EXPECTM_0_2529S43:      
4063   E1                     POP   HL   
4064                          ;*Macro unroll:  test "2", 2
4064   31 80 18               LD   SP,STACK   
4067   CD DA 08               CALL   init   
406A   CD BE 08               CALL   execStr   
406D   32 00                  .CSTR   "2"   
406F                          ;*Macro unroll:  expect "2",2
406F   E1                     POP   HL   
4070   E5                     PUSH   HL   
4071   11 02 00               LD   DE,2   
4074   B7                     OR   A   
4075   ED 52                  SBC   HL,DE   
4077   7D                     LD   A,L   
4078   B4                     OR   H   
4079   28 4C                  JR   Z,expectM_0_2530S43   
407B   CD B7 08               CALL   printStr   
407E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
4086   CD B7 08               CALL   printStr   
4089   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4098   21 02 00               LD   HL,2   
409B   CD 0B 08               CALL   prtdec   
409E   CD B7 08               CALL   printStr   
40A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AE   E1                     POP   hl   
40AF   E5                     PUSH   hl   
40B0   CD 0B 08               CALL   prtdec   
40B3   E1                     POP   hl   
40B4   CD B7 08               CALL   printStr   
40B7   20 28 23 00            .CSTR   " (#"   
40BB   CD 53 08               CALL   prthex   
40BE   CD B7 08               CALL   printStr   
40C1   29 0D 0A 00            .CSTR   ")\r\n"   
40C5   76                     HALT      
40C6   00                     .CSTR      
40C7                EXPECTM_0_2530S43:      
40C7   E1                     POP   HL   
40C8                          ;*Macro unroll:  test "1", 1
40C8   31 80 18               LD   SP,STACK   
40CB   CD DA 08               CALL   init   
40CE   CD BE 08               CALL   execStr   
40D1   31 00                  .CSTR   "1"   
40D3                          ;*Macro unroll:  expect "1",1
40D3   E1                     POP   HL   
40D4   E5                     PUSH   HL   
40D5   11 01 00               LD   DE,1   
40D8   B7                     OR   A   
40D9   ED 52                  SBC   HL,DE   
40DB   7D                     LD   A,L   
40DC   B4                     OR   H   
40DD   28 4C                  JR   Z,expectM_0_2531S43   
40DF   CD B7 08               CALL   printStr   
40E2   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
40EA   CD B7 08               CALL   printStr   
40ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40FC   21 01 00               LD   HL,1   
40FF   CD 0B 08               CALL   prtdec   
4102   CD B7 08               CALL   printStr   
4105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4112   E1                     POP   hl   
4113   E5                     PUSH   hl   
4114   CD 0B 08               CALL   prtdec   
4117   E1                     POP   hl   
4118   CD B7 08               CALL   printStr   
411B   20 28 23 00            .CSTR   " (#"   
411F   CD 53 08               CALL   prthex   
4122   CD B7 08               CALL   printStr   
4125   29 0D 0A 00            .CSTR   ")\r\n"   
4129   76                     HALT      
412A   00                     .CSTR      
412B                EXPECTM_0_2531S43:      
412B   E1                     POP   HL   
412C                          ;*Macro unroll:  test "0", 0
412C   31 80 18               LD   SP,STACK   
412F   CD DA 08               CALL   init   
4132   CD BE 08               CALL   execStr   
4135   30 00                  .CSTR   "0"   
4137                          ;*Macro unroll:  expect "0",0
4137   E1                     POP   HL   
4138   E5                     PUSH   HL   
4139   11 00 00               LD   DE,0   
413C   B7                     OR   A   
413D   ED 52                  SBC   HL,DE   
413F   7D                     LD   A,L   
4140   B4                     OR   H   
4141   28 4C                  JR   Z,expectM_0_2532S43   
4143   CD B7 08               CALL   printStr   
4146   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
414E   CD B7 08               CALL   printStr   
4151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4160   21 00 00               LD   HL,0   
4163   CD 0B 08               CALL   prtdec   
4166   CD B7 08               CALL   printStr   
4169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4176   E1                     POP   hl   
4177   E5                     PUSH   hl   
4178   CD 0B 08               CALL   prtdec   
417B   E1                     POP   hl   
417C   CD B7 08               CALL   printStr   
417F   20 28 23 00            .CSTR   " (#"   
4183   CD 53 08               CALL   prthex   
4186   CD B7 08               CALL   printStr   
4189   29 0D 0A 00            .CSTR   ")\r\n"   
418D   76                     HALT      
418E   00                     .CSTR      
418F                EXPECTM_0_2532S43:      
418F   E1                     POP   HL   
4190                          ;*Macro unroll:  test "10", 10
4190   31 80 18               LD   SP,STACK   
4193   CD DA 08               CALL   init   
4196   CD BE 08               CALL   execStr   
4199   31 30 00               .CSTR   "10"   
419C                          ;*Macro unroll:  expect "10",10
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 0A 00               LD   DE,10   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   28 4D                  JR   Z,expectM_0_2533S43   
41A8   CD B7 08               CALL   printStr   
41AB   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
41B4   CD B7 08               CALL   printStr   
41B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41C6   21 0A 00               LD   HL,10   
41C9   CD 0B 08               CALL   prtdec   
41CC   CD B7 08               CALL   printStr   
41CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DC   E1                     POP   hl   
41DD   E5                     PUSH   hl   
41DE   CD 0B 08               CALL   prtdec   
41E1   E1                     POP   hl   
41E2   CD B7 08               CALL   printStr   
41E5   20 28 23 00            .CSTR   " (#"   
41E9   CD 53 08               CALL   prthex   
41EC   CD B7 08               CALL   printStr   
41EF   29 0D 0A 00            .CSTR   ")\r\n"   
41F3   76                     HALT      
41F4   00                     .CSTR      
41F5                EXPECTM_0_2533S43:      
41F5   E1                     POP   HL   
41F6                          ;*Macro unroll:  test "123", 123
41F6   31 80 18               LD   SP,STACK   
41F9   CD DA 08               CALL   init   
41FC   CD BE 08               CALL   execStr   
41FF   31 32 33 00            .CSTR   "123"   
4203                          ;*Macro unroll:  expect "123",123
4203   E1                     POP   HL   
4204   E5                     PUSH   HL   
4205   11 7B 00               LD   DE,123   
4208   B7                     OR   A   
4209   ED 52                  SBC   HL,DE   
420B   7D                     LD   A,L   
420C   B4                     OR   H   
420D   28 4E                  JR   Z,expectM_0_2534S43   
420F   CD B7 08               CALL   printStr   
4212   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
421C   CD B7 08               CALL   printStr   
421F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
422E   21 7B 00               LD   HL,123   
4231   CD 0B 08               CALL   prtdec   
4234   CD B7 08               CALL   printStr   
4237   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4244   E1                     POP   hl   
4245   E5                     PUSH   hl   
4246   CD 0B 08               CALL   prtdec   
4249   E1                     POP   hl   
424A   CD B7 08               CALL   printStr   
424D   20 28 23 00            .CSTR   " (#"   
4251   CD 53 08               CALL   prthex   
4254   CD B7 08               CALL   printStr   
4257   29 0D 0A 00            .CSTR   ")\r\n"   
425B   76                     HALT      
425C   00                     .CSTR      
425D                EXPECTM_0_2534S43:      
425D   E1                     POP   HL   
425E                          ;*Macro unroll:  test "-1",-1
425E   31 80 18               LD   SP,STACK   
4261   CD DA 08               CALL   init   
4264   CD BE 08               CALL   execStr   
4267   2D 31 00               .CSTR   "-1"   
426A                          ;*Macro unroll:  expect "-1",-1
426A   E1                     POP   HL   
426B   E5                     PUSH   HL   
426C   11 FF FF               LD   DE,-1   
426F   B7                     OR   A   
4270   ED 52                  SBC   HL,DE   
4272   7D                     LD   A,L   
4273   B4                     OR   H   
4274   28 4D                  JR   Z,expectM_0_2535S43   
4276   CD B7 08               CALL   printStr   
4279   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
4282   CD B7 08               CALL   printStr   
4285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4294   21 FF FF               LD   HL,-1   
4297   CD 0B 08               CALL   prtdec   
429A   CD B7 08               CALL   printStr   
429D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AA   E1                     POP   hl   
42AB   E5                     PUSH   hl   
42AC   CD 0B 08               CALL   prtdec   
42AF   E1                     POP   hl   
42B0   CD B7 08               CALL   printStr   
42B3   20 28 23 00            .CSTR   " (#"   
42B7   CD 53 08               CALL   prthex   
42BA   CD B7 08               CALL   printStr   
42BD   29 0D 0A 00            .CSTR   ")\r\n"   
42C1   76                     HALT      
42C2   00                     .CSTR      
42C3                EXPECTM_0_2535S43:      
42C3   E1                     POP   HL   
42C4                          ;*Macro unroll:  test "``", 0
42C4   31 80 18               LD   SP,STACK   
42C7   CD DA 08               CALL   init   
42CA   CD BE 08               CALL   execStr   
42CD   60 60 00               .CSTR   "``"   
42D0                          ;*Macro unroll:  expect "``",0
42D0   E1                     POP   HL   
42D1   E5                     PUSH   HL   
42D2   11 00 00               LD   DE,0   
42D5   B7                     OR   A   
42D6   ED 52                  SBC   HL,DE   
42D8   7D                     LD   A,L   
42D9   B4                     OR   H   
42DA   28 4D                  JR   Z,expectM_0_2536S43   
42DC   CD B7 08               CALL   printStr   
42DF   43 6F 64 65 3A 20 60 60 00 .CSTR   "Code: ","``"   
42E8   CD B7 08               CALL   printStr   
42EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FA   21 00 00               LD   HL,0   
42FD   CD 0B 08               CALL   prtdec   
4300   CD B7 08               CALL   printStr   
4303   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4310   E1                     POP   hl   
4311   E5                     PUSH   hl   
4312   CD 0B 08               CALL   prtdec   
4315   E1                     POP   hl   
4316   CD B7 08               CALL   printStr   
4319   20 28 23 00            .CSTR   " (#"   
431D   CD 53 08               CALL   prthex   
4320   CD B7 08               CALL   printStr   
4323   29 0D 0A 00            .CSTR   ")\r\n"   
4327   76                     HALT      
4328   00                     .CSTR      
4329                EXPECTM_0_2536S43:      
4329   E1                     POP   HL   
432A                          ;*Macro unroll:  test "`a`", $61
432A   31 80 18               LD   SP,STACK   
432D   CD DA 08               CALL   init   
4330   CD BE 08               CALL   execStr   
4333   60 61 60 00            .CSTR   "`a`"   
4337                          ;*Macro unroll:  expect "`a`",$61
4337   E1                     POP   HL   
4338   E5                     PUSH   HL   
4339   11 61 00               LD   DE,$61   
433C   B7                     OR   A   
433D   ED 52                  SBC   HL,DE   
433F   7D                     LD   A,L   
4340   B4                     OR   H   
4341   28 4E                  JR   Z,expectM_0_2537S43   
4343   CD B7 08               CALL   printStr   
4346   43 6F 64 65 3A 20 60 61 60 00 .CSTR   "Code: ","`a`"   
4350   CD B7 08               CALL   printStr   
4353   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4362   21 61 00               LD   HL,$61   
4365   CD 0B 08               CALL   prtdec   
4368   CD B7 08               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   CD 0B 08               CALL   prtdec   
437D   E1                     POP   hl   
437E   CD B7 08               CALL   printStr   
4381   20 28 23 00            .CSTR   " (#"   
4385   CD 53 08               CALL   prthex   
4388   CD B7 08               CALL   printStr   
438B   29 0D 0A 00            .CSTR   ")\r\n"   
438F   76                     HALT      
4390   00                     .CSTR      
4391                EXPECTM_0_2537S43:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "`\\``", $60
4392   31 80 18               LD   SP,STACK   
4395   CD DA 08               CALL   init   
4398   CD BE 08               CALL   execStr   
439B   60 5C 60 60 00         .CSTR   "`\\``"   
43A0                          ;*Macro unroll:  expect "`\\``",$60
43A0   E1                     POP   HL   
43A1   E5                     PUSH   HL   
43A2   11 60 00               LD   DE,$60   
43A5   B7                     OR   A   
43A6   ED 52                  SBC   HL,DE   
43A8   7D                     LD   A,L   
43A9   B4                     OR   H   
43AA   28 4F                  JR   Z,expectM_0_2538S43   
43AC   CD B7 08               CALL   printStr   
43AF   43 6F 64 65 3A 20 60 5C 60 60 00 .CSTR   "Code: ","`\\``"   
43BA   CD B7 08               CALL   printStr   
43BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CC   21 60 00               LD   HL,$60   
43CF   CD 0B 08               CALL   prtdec   
43D2   CD B7 08               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   CD 0B 08               CALL   prtdec   
43E7   E1                     POP   hl   
43E8   CD B7 08               CALL   printStr   
43EB   20 28 23 00            .CSTR   " (#"   
43EF   CD 53 08               CALL   prthex   
43F2   CD B7 08               CALL   printStr   
43F5   29 0D 0A 00            .CSTR   ")\r\n"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2538S43:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "#10", $10
43FC   31 80 18               LD   SP,STACK   
43FF   CD DA 08               CALL   init   
4402   CD BE 08               CALL   execStr   
4405   23 31 30 00            .CSTR   "#10"   
4409                          ;*Macro unroll:  expect "#10",$10
4409   E1                     POP   HL   
440A   E5                     PUSH   HL   
440B   11 10 00               LD   DE,$10   
440E   B7                     OR   A   
440F   ED 52                  SBC   HL,DE   
4411   7D                     LD   A,L   
4412   B4                     OR   H   
4413   28 4E                  JR   Z,expectM_0_2539S43   
4415   CD B7 08               CALL   printStr   
4418   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
4422   CD B7 08               CALL   printStr   
4425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4434   21 10 00               LD   HL,$10   
4437   CD 0B 08               CALL   prtdec   
443A   CD B7 08               CALL   printStr   
443D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
444A   E1                     POP   hl   
444B   E5                     PUSH   hl   
444C   CD 0B 08               CALL   prtdec   
444F   E1                     POP   hl   
4450   CD B7 08               CALL   printStr   
4453   20 28 23 00            .CSTR   " (#"   
4457   CD 53 08               CALL   prthex   
445A   CD B7 08               CALL   printStr   
445D   29 0D 0A 00            .CSTR   ")\r\n"   
4461   76                     HALT      
4462   00                     .CSTR      
4463                EXPECTM_0_2539S43:      
4463   E1                     POP   HL   
4464                          ;*Macro unroll:  test "#FF", $FF
4464   31 80 18               LD   SP,STACK   
4467   CD DA 08               CALL   init   
446A   CD BE 08               CALL   execStr   
446D   23 46 46 00            .CSTR   "#FF"   
4471                          ;*Macro unroll:  expect "#FF",$FF
4471   E1                     POP   HL   
4472   E5                     PUSH   HL   
4473   11 FF 00               LD   DE,$FF   
4476   B7                     OR   A   
4477   ED 52                  SBC   HL,DE   
4479   7D                     LD   A,L   
447A   B4                     OR   H   
447B   28 4E                  JR   Z,expectM_0_2540S43   
447D   CD B7 08               CALL   printStr   
4480   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
448A   CD B7 08               CALL   printStr   
448D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
449C   21 FF 00               LD   HL,$FF   
449F   CD 0B 08               CALL   prtdec   
44A2   CD B7 08               CALL   printStr   
44A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B2   E1                     POP   hl   
44B3   E5                     PUSH   hl   
44B4   CD 0B 08               CALL   prtdec   
44B7   E1                     POP   hl   
44B8   CD B7 08               CALL   printStr   
44BB   20 28 23 00            .CSTR   " (#"   
44BF   CD 53 08               CALL   prthex   
44C2   CD B7 08               CALL   printStr   
44C5   29 0D 0A 00            .CSTR   ")\r\n"   
44C9   76                     HALT      
44CA   00                     .CSTR      
44CB                EXPECTM_0_2540S43:      
44CB   E1                     POP   HL   
44CC                          ;*Macro unroll:  test "-1 2 +",1
44CC   31 80 18               LD   SP,STACK   
44CF   CD DA 08               CALL   init   
44D2   CD BE 08               CALL   execStr   
44D5   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
44DC                          ;*Macro unroll:  expect "-1 2 +",1
44DC   E1                     POP   HL   
44DD   E5                     PUSH   HL   
44DE   11 01 00               LD   DE,1   
44E1   B7                     OR   A   
44E2   ED 52                  SBC   HL,DE   
44E4   7D                     LD   A,L   
44E5   B4                     OR   H   
44E6   28 51                  JR   Z,expectM_0_2541S43   
44E8   CD B7 08               CALL   printStr   
44EB   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
44F8   CD B7 08               CALL   printStr   
44FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450A   21 01 00               LD   HL,1   
450D   CD 0B 08               CALL   prtdec   
4510   CD B7 08               CALL   printStr   
4513   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4520   E1                     POP   hl   
4521   E5                     PUSH   hl   
4522   CD 0B 08               CALL   prtdec   
4525   E1                     POP   hl   
4526   CD B7 08               CALL   printStr   
4529   20 28 23 00            .CSTR   " (#"   
452D   CD 53 08               CALL   prthex   
4530   CD B7 08               CALL   printStr   
4533   29 0D 0A 00            .CSTR   ")\r\n"   
4537   76                     HALT      
4538   00                     .CSTR      
4539                EXPECTM_0_2541S43:      
4539   E1                     POP   HL   
453A                          ;*Macro unroll:  test "-1 1 +",0
453A   31 80 18               LD   SP,STACK   
453D   CD DA 08               CALL   init   
4540   CD BE 08               CALL   execStr   
4543   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
454A                          ;*Macro unroll:  expect "-1 1 +",0
454A   E1                     POP   HL   
454B   E5                     PUSH   HL   
454C   11 00 00               LD   DE,0   
454F   B7                     OR   A   
4550   ED 52                  SBC   HL,DE   
4552   7D                     LD   A,L   
4553   B4                     OR   H   
4554   28 51                  JR   Z,expectM_0_2542S43   
4556   CD B7 08               CALL   printStr   
4559   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
4566   CD B7 08               CALL   printStr   
4569   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4578   21 00 00               LD   HL,0   
457B   CD 0B 08               CALL   prtdec   
457E   CD B7 08               CALL   printStr   
4581   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
458E   E1                     POP   hl   
458F   E5                     PUSH   hl   
4590   CD 0B 08               CALL   prtdec   
4593   E1                     POP   hl   
4594   CD B7 08               CALL   printStr   
4597   20 28 23 00            .CSTR   " (#"   
459B   CD 53 08               CALL   prthex   
459E   CD B7 08               CALL   printStr   
45A1   29 0D 0A 00            .CSTR   ")\r\n"   
45A5   76                     HALT      
45A6   00                     .CSTR      
45A7                EXPECTM_0_2542S43:      
45A7   E1                     POP   HL   
45A8                          ;*Macro unroll:  test "1 2 +", 3
45A8   31 80 18               LD   SP,STACK   
45AB   CD DA 08               CALL   init   
45AE   CD BE 08               CALL   execStr   
45B1   31 20 32 20 2B 00      .CSTR   "1 2 +"   
45B7                          ;*Macro unroll:  expect "1 2 +",3
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 03 00               LD   DE,3   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   28 50                  JR   Z,expectM_0_2543S43   
45C3   CD B7 08               CALL   printStr   
45C6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
45D2   CD B7 08               CALL   printStr   
45D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E4   21 03 00               LD   HL,3   
45E7   CD 0B 08               CALL   prtdec   
45EA   CD B7 08               CALL   printStr   
45ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45FA   E1                     POP   hl   
45FB   E5                     PUSH   hl   
45FC   CD 0B 08               CALL   prtdec   
45FF   E1                     POP   hl   
4600   CD B7 08               CALL   printStr   
4603   20 28 23 00            .CSTR   " (#"   
4607   CD 53 08               CALL   prthex   
460A   CD B7 08               CALL   printStr   
460D   29 0D 0A 00            .CSTR   ")\r\n"   
4611   76                     HALT      
4612   00                     .CSTR      
4613                EXPECTM_0_2543S43:      
4613   E1                     POP   HL   
4614                          ;*Macro unroll:  test "4 1 2 +", 3
4614   31 80 18               LD   SP,STACK   
4617   CD DA 08               CALL   init   
461A   CD BE 08               CALL   execStr   
461D   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
4625                          ;*Macro unroll:  expect "4 1 2 +",3
4625   E1                     POP   HL   
4626   E5                     PUSH   HL   
4627   11 03 00               LD   DE,3   
462A   B7                     OR   A   
462B   ED 52                  SBC   HL,DE   
462D   7D                     LD   A,L   
462E   B4                     OR   H   
462F   28 52                  JR   Z,expectM_0_2544S43   
4631   CD B7 08               CALL   printStr   
4634   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
4642   CD B7 08               CALL   printStr   
4645   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4654   21 03 00               LD   HL,3   
4657   CD 0B 08               CALL   prtdec   
465A   CD B7 08               CALL   printStr   
465D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
466A   E1                     POP   hl   
466B   E5                     PUSH   hl   
466C   CD 0B 08               CALL   prtdec   
466F   E1                     POP   hl   
4670   CD B7 08               CALL   printStr   
4673   20 28 23 00            .CSTR   " (#"   
4677   CD 53 08               CALL   prthex   
467A   CD B7 08               CALL   printStr   
467D   29 0D 0A 00            .CSTR   ")\r\n"   
4681   76                     HALT      
4682   00                     .CSTR      
4683                EXPECTM_0_2544S43:      
4683   E1                     POP   HL   
4684                          ;*Macro unroll:  test "1 2 +", 3
4684   31 80 18               LD   SP,STACK   
4687   CD DA 08               CALL   init   
468A   CD BE 08               CALL   execStr   
468D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
4693                          ;*Macro unroll:  expect "1 2 +",3
4693   E1                     POP   HL   
4694   E5                     PUSH   HL   
4695   11 03 00               LD   DE,3   
4698   B7                     OR   A   
4699   ED 52                  SBC   HL,DE   
469B   7D                     LD   A,L   
469C   B4                     OR   H   
469D   28 50                  JR   Z,expectM_0_2545S43   
469F   CD B7 08               CALL   printStr   
46A2   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
46AE   CD B7 08               CALL   printStr   
46B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C0   21 03 00               LD   HL,3   
46C3   CD 0B 08               CALL   prtdec   
46C6   CD B7 08               CALL   printStr   
46C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D6   E1                     POP   hl   
46D7   E5                     PUSH   hl   
46D8   CD 0B 08               CALL   prtdec   
46DB   E1                     POP   hl   
46DC   CD B7 08               CALL   printStr   
46DF   20 28 23 00            .CSTR   " (#"   
46E3   CD 53 08               CALL   prthex   
46E6   CD B7 08               CALL   printStr   
46E9   29 0D 0A 00            .CSTR   ")\r\n"   
46ED   76                     HALT      
46EE   00                     .CSTR      
46EF                EXPECTM_0_2545S43:      
46EF   E1                     POP   HL   
46F0                          ;*Macro unroll:  test "123 456 +", 123+456
46F0   31 80 18               LD   SP,STACK   
46F3   CD DA 08               CALL   init   
46F6   CD BE 08               CALL   execStr   
46F9   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
4703                          ;*Macro unroll:  expect "123 456 +",123+456
4703   E1                     POP   HL   
4704   E5                     PUSH   HL   
4705   11 43 02               LD   DE,123+456   
4708   B7                     OR   A   
4709   ED 52                  SBC   HL,DE   
470B   7D                     LD   A,L   
470C   B4                     OR   H   
470D   28 54                  JR   Z,expectM_0_2546S43   
470F   CD B7 08               CALL   printStr   
4712   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
4722   CD B7 08               CALL   printStr   
4725   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4734   21 43 02               LD   HL,123+456   
4737   CD 0B 08               CALL   prtdec   
473A   CD B7 08               CALL   printStr   
473D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
474A   E1                     POP   hl   
474B   E5                     PUSH   hl   
474C   CD 0B 08               CALL   prtdec   
474F   E1                     POP   hl   
4750   CD B7 08               CALL   printStr   
4753   20 28 23 00            .CSTR   " (#"   
4757   CD 53 08               CALL   prthex   
475A   CD B7 08               CALL   printStr   
475D   29 0D 0A 00            .CSTR   ")\r\n"   
4761   76                     HALT      
4762   00                     .CSTR      
4763                EXPECTM_0_2546S43:      
4763   E1                     POP   HL   
4764                          ;*Macro unroll:  test "64 128 +", 64+128
4764   31 80 18               LD   SP,STACK   
4767   CD DA 08               CALL   init   
476A   CD BE 08               CALL   execStr   
476D   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
4776                          ;*Macro unroll:  expect "64 128 +",64+128
4776   E1                     POP   HL   
4777   E5                     PUSH   HL   
4778   11 C0 00               LD   DE,64+128   
477B   B7                     OR   A   
477C   ED 52                  SBC   HL,DE   
477E   7D                     LD   A,L   
477F   B4                     OR   H   
4780   28 53                  JR   Z,expectM_0_2547S43   
4782   CD B7 08               CALL   printStr   
4785   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
4794   CD B7 08               CALL   printStr   
4797   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A6   21 C0 00               LD   HL,64+128   
47A9   CD 0B 08               CALL   prtdec   
47AC   CD B7 08               CALL   printStr   
47AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BC   E1                     POP   hl   
47BD   E5                     PUSH   hl   
47BE   CD 0B 08               CALL   prtdec   
47C1   E1                     POP   hl   
47C2   CD B7 08               CALL   printStr   
47C5   20 28 23 00            .CSTR   " (#"   
47C9   CD 53 08               CALL   prthex   
47CC   CD B7 08               CALL   printStr   
47CF   29 0D 0A 00            .CSTR   ")\r\n"   
47D3   76                     HALT      
47D4   00                     .CSTR      
47D5                EXPECTM_0_2547S43:      
47D5   E1                     POP   HL   
47D6                          ;*Macro unroll:  test "-1 -1 -",0
47D6   31 80 18               LD   SP,STACK   
47D9   CD DA 08               CALL   init   
47DC   CD BE 08               CALL   execStr   
47DF   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
47E7                          ;*Macro unroll:  expect "-1 -1 -",0
47E7   E1                     POP   HL   
47E8   E5                     PUSH   HL   
47E9   11 00 00               LD   DE,0   
47EC   B7                     OR   A   
47ED   ED 52                  SBC   HL,DE   
47EF   7D                     LD   A,L   
47F0   B4                     OR   H   
47F1   28 52                  JR   Z,expectM_0_2548S43   
47F3   CD B7 08               CALL   printStr   
47F6   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
4804   CD B7 08               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 00 00               LD   HL,0   
4819   CD 0B 08               CALL   prtdec   
481C   CD B7 08               CALL   printStr   
481F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482C   E1                     POP   hl   
482D   E5                     PUSH   hl   
482E   CD 0B 08               CALL   prtdec   
4831   E1                     POP   hl   
4832   CD B7 08               CALL   printStr   
4835   20 28 23 00            .CSTR   " (#"   
4839   CD 53 08               CALL   prthex   
483C   CD B7 08               CALL   printStr   
483F   29 0D 0A 00            .CSTR   ")\r\n"   
4843   76                     HALT      
4844   00                     .CSTR      
4845                EXPECTM_0_2548S43:      
4845   E1                     POP   HL   
4846                          ;*Macro unroll:  test "5 3 -", 2
4846   31 80 18               LD   SP,STACK   
4849   CD DA 08               CALL   init   
484C   CD BE 08               CALL   execStr   
484F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
4855                          ;*Macro unroll:  expect "5 3 -",2
4855   E1                     POP   HL   
4856   E5                     PUSH   HL   
4857   11 02 00               LD   DE,2   
485A   B7                     OR   A   
485B   ED 52                  SBC   HL,DE   
485D   7D                     LD   A,L   
485E   B4                     OR   H   
485F   28 50                  JR   Z,expectM_0_2549S43   
4861   CD B7 08               CALL   printStr   
4864   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
4870   CD B7 08               CALL   printStr   
4873   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4882   21 02 00               LD   HL,2   
4885   CD 0B 08               CALL   prtdec   
4888   CD B7 08               CALL   printStr   
488B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4898   E1                     POP   hl   
4899   E5                     PUSH   hl   
489A   CD 0B 08               CALL   prtdec   
489D   E1                     POP   hl   
489E   CD B7 08               CALL   printStr   
48A1   20 28 23 00            .CSTR   " (#"   
48A5   CD 53 08               CALL   prthex   
48A8   CD B7 08               CALL   printStr   
48AB   29 0D 0A 00            .CSTR   ")\r\n"   
48AF   76                     HALT      
48B0   00                     .CSTR      
48B1                EXPECTM_0_2549S43:      
48B1   E1                     POP   HL   
48B2                          ;*Macro unroll:  test "3 5 &", 1
48B2   31 80 18               LD   SP,STACK   
48B5   CD DA 08               CALL   init   
48B8   CD BE 08               CALL   execStr   
48BB   33 20 35 20 26 00      .CSTR   "3 5 &"   
48C1                          ;*Macro unroll:  expect "3 5 &",1
48C1   E1                     POP   HL   
48C2   E5                     PUSH   HL   
48C3   11 01 00               LD   DE,1   
48C6   B7                     OR   A   
48C7   ED 52                  SBC   HL,DE   
48C9   7D                     LD   A,L   
48CA   B4                     OR   H   
48CB   28 50                  JR   Z,expectM_0_2550S43   
48CD   CD B7 08               CALL   printStr   
48D0   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
48DC   CD B7 08               CALL   printStr   
48DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48EE   21 01 00               LD   HL,1   
48F1   CD 0B 08               CALL   prtdec   
48F4   CD B7 08               CALL   printStr   
48F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4904   E1                     POP   hl   
4905   E5                     PUSH   hl   
4906   CD 0B 08               CALL   prtdec   
4909   E1                     POP   hl   
490A   CD B7 08               CALL   printStr   
490D   20 28 23 00            .CSTR   " (#"   
4911   CD 53 08               CALL   prthex   
4914   CD B7 08               CALL   printStr   
4917   29 0D 0A 00            .CSTR   ")\r\n"   
491B   76                     HALT      
491C   00                     .CSTR      
491D                EXPECTM_0_2550S43:      
491D   E1                     POP   HL   
491E                          ;*Macro unroll:  test "3 5 |", 7
491E   31 80 18               LD   SP,STACK   
4921   CD DA 08               CALL   init   
4924   CD BE 08               CALL   execStr   
4927   33 20 35 20 7C 00      .CSTR   "3 5 |"   
492D                          ;*Macro unroll:  expect "3 5 |",7
492D   E1                     POP   HL   
492E   E5                     PUSH   HL   
492F   11 07 00               LD   DE,7   
4932   B7                     OR   A   
4933   ED 52                  SBC   HL,DE   
4935   7D                     LD   A,L   
4936   B4                     OR   H   
4937   28 50                  JR   Z,expectM_0_2551S43   
4939   CD B7 08               CALL   printStr   
493C   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4948   CD B7 08               CALL   printStr   
494B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
495A   21 07 00               LD   HL,7   
495D   CD 0B 08               CALL   prtdec   
4960   CD B7 08               CALL   printStr   
4963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4970   E1                     POP   hl   
4971   E5                     PUSH   hl   
4972   CD 0B 08               CALL   prtdec   
4975   E1                     POP   hl   
4976   CD B7 08               CALL   printStr   
4979   20 28 23 00            .CSTR   " (#"   
497D   CD 53 08               CALL   prthex   
4980   CD B7 08               CALL   printStr   
4983   29 0D 0A 00            .CSTR   ")\r\n"   
4987   76                     HALT      
4988   00                     .CSTR      
4989                EXPECTM_0_2551S43:      
4989   E1                     POP   HL   
498A                          ;*Macro unroll:  test "2 3 *", 6
498A   31 80 18               LD   SP,STACK   
498D   CD DA 08               CALL   init   
4990   CD BE 08               CALL   execStr   
4993   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4999                          ;*Macro unroll:  expect "2 3 *",6
4999   E1                     POP   HL   
499A   E5                     PUSH   HL   
499B   11 06 00               LD   DE,6   
499E   B7                     OR   A   
499F   ED 52                  SBC   HL,DE   
49A1   7D                     LD   A,L   
49A2   B4                     OR   H   
49A3   28 50                  JR   Z,expectM_0_2552S43   
49A5   CD B7 08               CALL   printStr   
49A8   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
49B4   CD B7 08               CALL   printStr   
49B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49C6   21 06 00               LD   HL,6   
49C9   CD 0B 08               CALL   prtdec   
49CC   CD B7 08               CALL   printStr   
49CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49DC   E1                     POP   hl   
49DD   E5                     PUSH   hl   
49DE   CD 0B 08               CALL   prtdec   
49E1   E1                     POP   hl   
49E2   CD B7 08               CALL   printStr   
49E5   20 28 23 00            .CSTR   " (#"   
49E9   CD 53 08               CALL   prthex   
49EC   CD B7 08               CALL   printStr   
49EF   29 0D 0A 00            .CSTR   ")\r\n"   
49F3   76                     HALT      
49F4   00                     .CSTR      
49F5                EXPECTM_0_2552S43:      
49F5   E1                     POP   HL   
49F6                          ;*Macro unroll:  test "1 2 3 + *", 5
49F6   31 80 18               LD   SP,STACK   
49F9   CD DA 08               CALL   init   
49FC   CD BE 08               CALL   execStr   
49FF   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4A09                          ;*Macro unroll:  expect "1 2 3 + *",5
4A09   E1                     POP   HL   
4A0A   E5                     PUSH   HL   
4A0B   11 05 00               LD   DE,5   
4A0E   B7                     OR   A   
4A0F   ED 52                  SBC   HL,DE   
4A11   7D                     LD   A,L   
4A12   B4                     OR   H   
4A13   28 54                  JR   Z,expectM_0_2553S43   
4A15   CD B7 08               CALL   printStr   
4A18   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4A28   CD B7 08               CALL   printStr   
4A2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3A   21 05 00               LD   HL,5   
4A3D   CD 0B 08               CALL   prtdec   
4A40   CD B7 08               CALL   printStr   
4A43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A50   E1                     POP   hl   
4A51   E5                     PUSH   hl   
4A52   CD 0B 08               CALL   prtdec   
4A55   E1                     POP   hl   
4A56   CD B7 08               CALL   printStr   
4A59   20 28 23 00            .CSTR   " (#"   
4A5D   CD 53 08               CALL   prthex   
4A60   CD B7 08               CALL   printStr   
4A63   29 0D 0A 00            .CSTR   ")\r\n"   
4A67   76                     HALT      
4A68   00                     .CSTR      
4A69                EXPECTM_0_2553S43:      
4A69   E1                     POP   HL   
4A6A                          ;*Macro unroll:  test "7 3 /", 2
4A6A   31 80 18               LD   SP,STACK   
4A6D   CD DA 08               CALL   init   
4A70   CD BE 08               CALL   execStr   
4A73   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4A79                          ;*Macro unroll:  expect "7 3 /",2
4A79   E1                     POP   HL   
4A7A   E5                     PUSH   HL   
4A7B   11 02 00               LD   DE,2   
4A7E   B7                     OR   A   
4A7F   ED 52                  SBC   HL,DE   
4A81   7D                     LD   A,L   
4A82   B4                     OR   H   
4A83   28 50                  JR   Z,expectM_0_2554S43   
4A85   CD B7 08               CALL   printStr   
4A88   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4A94   CD B7 08               CALL   printStr   
4A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AA6   21 02 00               LD   HL,2   
4AA9   CD 0B 08               CALL   prtdec   
4AAC   CD B7 08               CALL   printStr   
4AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ABC   E1                     POP   hl   
4ABD   E5                     PUSH   hl   
4ABE   CD 0B 08               CALL   prtdec   
4AC1   E1                     POP   hl   
4AC2   CD B7 08               CALL   printStr   
4AC5   20 28 23 00            .CSTR   " (#"   
4AC9   CD 53 08               CALL   prthex   
4ACC   CD B7 08               CALL   printStr   
4ACF   29 0D 0A 00            .CSTR   ")\r\n"   
4AD3   76                     HALT      
4AD4   00                     .CSTR      
4AD5                EXPECTM_0_2554S43:      
4AD5   E1                     POP   HL   
4AD6                          ;*Macro unroll:  test "7 3 / frac", 1
4AD6   31 80 18               LD   SP,STACK   
4AD9   CD DA 08               CALL   init   
4ADC   CD BE 08               CALL   execStr   
4ADF   37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "7 3 / frac"   
4AEA                          ;*Macro unroll:  expect "7 3 / frac",1
4AEA   E1                     POP   HL   
4AEB   E5                     PUSH   HL   
4AEC   11 01 00               LD   DE,1   
4AEF   B7                     OR   A   
4AF0   ED 52                  SBC   HL,DE   
4AF2   7D                     LD   A,L   
4AF3   B4                     OR   H   
4AF4   28 55                  JR   Z,expectM_0_2555S43   
4AF6   CD B7 08               CALL   printStr   
4AF9   43 6F 64 65 3A 20 37 20 33 20 2F 20 66 72 61 63 00 .CSTR   "Code: ","7 3 / frac"   
4B0A   CD B7 08               CALL   printStr   
4B0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B1C   21 01 00               LD   HL,1   
4B1F   CD 0B 08               CALL   prtdec   
4B22   CD B7 08               CALL   printStr   
4B25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B32   E1                     POP   hl   
4B33   E5                     PUSH   hl   
4B34   CD 0B 08               CALL   prtdec   
4B37   E1                     POP   hl   
4B38   CD B7 08               CALL   printStr   
4B3B   20 28 23 00            .CSTR   " (#"   
4B3F   CD 53 08               CALL   prthex   
4B42   CD B7 08               CALL   printStr   
4B45   29 0D 0A 00            .CSTR   ")\r\n"   
4B49   76                     HALT      
4B4A   00                     .CSTR      
4B4B                EXPECTM_0_2555S43:      
4B4B   E1                     POP   HL   
4B4C                          ;*Macro unroll:  test "10 sqrt", 3
4B4C   31 80 18               LD   SP,STACK   
4B4F   CD DA 08               CALL   init   
4B52   CD BE 08               CALL   execStr   
4B55   31 30 20 73 71 72 74 00 .CSTR   "10 sqrt"   
4B5D                          ;*Macro unroll:  expect "10 sqrt",3
4B5D   E1                     POP   HL   
4B5E   E5                     PUSH   HL   
4B5F   11 03 00               LD   DE,3   
4B62   B7                     OR   A   
4B63   ED 52                  SBC   HL,DE   
4B65   7D                     LD   A,L   
4B66   B4                     OR   H   
4B67   28 52                  JR   Z,expectM_0_2556S43   
4B69   CD B7 08               CALL   printStr   
4B6C   43 6F 64 65 3A 20 31 30 20 73 71 72 74 00 .CSTR   "Code: ","10 sqrt"   
4B7A   CD B7 08               CALL   printStr   
4B7D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B8C   21 03 00               LD   HL,3   
4B8F   CD 0B 08               CALL   prtdec   
4B92   CD B7 08               CALL   printStr   
4B95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA2   E1                     POP   hl   
4BA3   E5                     PUSH   hl   
4BA4   CD 0B 08               CALL   prtdec   
4BA7   E1                     POP   hl   
4BA8   CD B7 08               CALL   printStr   
4BAB   20 28 23 00            .CSTR   " (#"   
4BAF   CD 53 08               CALL   prthex   
4BB2   CD B7 08               CALL   printStr   
4BB5   29 0D 0A 00            .CSTR   ")\r\n"   
4BB9   76                     HALT      
4BBA   00                     .CSTR      
4BBB                EXPECTM_0_2556S43:      
4BBB   E1                     POP   HL   
4BBC                          ;*Macro unroll:  test "10 sqrt frac", 1
4BBC   31 80 18               LD   SP,STACK   
4BBF   CD DA 08               CALL   init   
4BC2   CD BE 08               CALL   execStr   
4BC5   31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "10 sqrt frac"   
4BD2                          ;*Macro unroll:  expect "10 sqrt frac",1
4BD2   E1                     POP   HL   
4BD3   E5                     PUSH   HL   
4BD4   11 01 00               LD   DE,1   
4BD7   B7                     OR   A   
4BD8   ED 52                  SBC   HL,DE   
4BDA   7D                     LD   A,L   
4BDB   B4                     OR   H   
4BDC   28 57                  JR   Z,expectM_0_2557S43   
4BDE   CD B7 08               CALL   printStr   
4BE1   43 6F 64 65 3A 20 31 30 20 73 71 72 74 20 66 72 61 63 00 .CSTR   "Code: ","10 sqrt frac"   
4BF4   CD B7 08               CALL   printStr   
4BF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C06   21 01 00               LD   HL,1   
4C09   CD 0B 08               CALL   prtdec   
4C0C   CD B7 08               CALL   printStr   
4C0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C1C   E1                     POP   hl   
4C1D   E5                     PUSH   hl   
4C1E   CD 0B 08               CALL   prtdec   
4C21   E1                     POP   hl   
4C22   CD B7 08               CALL   printStr   
4C25   20 28 23 00            .CSTR   " (#"   
4C29   CD 53 08               CALL   prthex   
4C2C   CD B7 08               CALL   printStr   
4C2F   29 0D 0A 00            .CSTR   ")\r\n"   
4C33   76                     HALT      
4C34   00                     .CSTR      
4C35                EXPECTM_0_2557S43:      
4C35   E1                     POP   HL   
4C36                          ;*Macro unroll:  test "2 3 =", FALSE
4C36   31 80 18               LD   SP,STACK   
4C39   CD DA 08               CALL   init   
4C3C   CD BE 08               CALL   execStr   
4C3F   32 20 33 20 3D 00      .CSTR   "2 3 ="   
4C45                          ;*Macro unroll:  expect "2 3 =",FALSE
4C45   E1                     POP   HL   
4C46   E5                     PUSH   HL   
4C47   11 00 00               LD   DE,FALSE   
4C4A   B7                     OR   A   
4C4B   ED 52                  SBC   HL,DE   
4C4D   7D                     LD   A,L   
4C4E   B4                     OR   H   
4C4F   28 50                  JR   Z,expectM_0_2558S43   
4C51   CD B7 08               CALL   printStr   
4C54   43 6F 64 65 3A 20 32 20 33 20 3D 00 .CSTR   "Code: ","2 3 ="   
4C60   CD B7 08               CALL   printStr   
4C63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C72   21 00 00               LD   HL,FALSE   
4C75   CD 0B 08               CALL   prtdec   
4C78   CD B7 08               CALL   printStr   
4C7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C88   E1                     POP   hl   
4C89   E5                     PUSH   hl   
4C8A   CD 0B 08               CALL   prtdec   
4C8D   E1                     POP   hl   
4C8E   CD B7 08               CALL   printStr   
4C91   20 28 23 00            .CSTR   " (#"   
4C95   CD 53 08               CALL   prthex   
4C98   CD B7 08               CALL   printStr   
4C9B   29 0D 0A 00            .CSTR   ")\r\n"   
4C9F   76                     HALT      
4CA0   00                     .CSTR      
4CA1                EXPECTM_0_2558S43:      
4CA1   E1                     POP   HL   
4CA2                          ;*Macro unroll:  test "3 3 =", TRUE
4CA2   31 80 18               LD   SP,STACK   
4CA5   CD DA 08               CALL   init   
4CA8   CD BE 08               CALL   execStr   
4CAB   33 20 33 20 3D 00      .CSTR   "3 3 ="   
4CB1                          ;*Macro unroll:  expect "3 3 =",TRUE
4CB1   E1                     POP   HL   
4CB2   E5                     PUSH   HL   
4CB3   11 FF FF               LD   DE,TRUE   
4CB6   B7                     OR   A   
4CB7   ED 52                  SBC   HL,DE   
4CB9   7D                     LD   A,L   
4CBA   B4                     OR   H   
4CBB   28 50                  JR   Z,expectM_0_2559S43   
4CBD   CD B7 08               CALL   printStr   
4CC0   43 6F 64 65 3A 20 33 20 33 20 3D 00 .CSTR   "Code: ","3 3 ="   
4CCC   CD B7 08               CALL   printStr   
4CCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CDE   21 FF FF               LD   HL,TRUE   
4CE1   CD 0B 08               CALL   prtdec   
4CE4   CD B7 08               CALL   printStr   
4CE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CF4   E1                     POP   hl   
4CF5   E5                     PUSH   hl   
4CF6   CD 0B 08               CALL   prtdec   
4CF9   E1                     POP   hl   
4CFA   CD B7 08               CALL   printStr   
4CFD   20 28 23 00            .CSTR   " (#"   
4D01   CD 53 08               CALL   prthex   
4D04   CD B7 08               CALL   printStr   
4D07   29 0D 0A 00            .CSTR   ")\r\n"   
4D0B   76                     HALT      
4D0C   00                     .CSTR      
4D0D                EXPECTM_0_2559S43:      
4D0D   E1                     POP   HL   
4D0E                          ;*Macro unroll:  test "1 2 <", TRUE
4D0E   31 80 18               LD   SP,STACK   
4D11   CD DA 08               CALL   init   
4D14   CD BE 08               CALL   execStr   
4D17   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D1D                          ;*Macro unroll:  expect "1 2 <",TRUE
4D1D   E1                     POP   HL   
4D1E   E5                     PUSH   HL   
4D1F   11 FF FF               LD   DE,TRUE   
4D22   B7                     OR   A   
4D23   ED 52                  SBC   HL,DE   
4D25   7D                     LD   A,L   
4D26   B4                     OR   H   
4D27   28 50                  JR   Z,expectM_0_2560S43   
4D29   CD B7 08               CALL   printStr   
4D2C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D38   CD B7 08               CALL   printStr   
4D3B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D4A   21 FF FF               LD   HL,TRUE   
4D4D   CD 0B 08               CALL   prtdec   
4D50   CD B7 08               CALL   printStr   
4D53   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D60   E1                     POP   hl   
4D61   E5                     PUSH   hl   
4D62   CD 0B 08               CALL   prtdec   
4D65   E1                     POP   hl   
4D66   CD B7 08               CALL   printStr   
4D69   20 28 23 00            .CSTR   " (#"   
4D6D   CD 53 08               CALL   prthex   
4D70   CD B7 08               CALL   printStr   
4D73   29 0D 0A 00            .CSTR   ")\r\n"   
4D77   76                     HALT      
4D78   00                     .CSTR      
4D79                EXPECTM_0_2560S43:      
4D79   E1                     POP   HL   
4D7A                          ;*Macro unroll:  test "2 1 <", FALSE
4D7A   31 80 18               LD   SP,STACK   
4D7D   CD DA 08               CALL   init   
4D80   CD BE 08               CALL   execStr   
4D83   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4D89                          ;*Macro unroll:  expect "2 1 <",FALSE
4D89   E1                     POP   HL   
4D8A   E5                     PUSH   HL   
4D8B   11 00 00               LD   DE,FALSE   
4D8E   B7                     OR   A   
4D8F   ED 52                  SBC   HL,DE   
4D91   7D                     LD   A,L   
4D92   B4                     OR   H   
4D93   28 50                  JR   Z,expectM_0_2561S43   
4D95   CD B7 08               CALL   printStr   
4D98   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4DA4   CD B7 08               CALL   printStr   
4DA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DB6   21 00 00               LD   HL,FALSE   
4DB9   CD 0B 08               CALL   prtdec   
4DBC   CD B7 08               CALL   printStr   
4DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DCC   E1                     POP   hl   
4DCD   E5                     PUSH   hl   
4DCE   CD 0B 08               CALL   prtdec   
4DD1   E1                     POP   hl   
4DD2   CD B7 08               CALL   printStr   
4DD5   20 28 23 00            .CSTR   " (#"   
4DD9   CD 53 08               CALL   prthex   
4DDC   CD B7 08               CALL   printStr   
4DDF   29 0D 0A 00            .CSTR   ")\r\n"   
4DE3   76                     HALT      
4DE4   00                     .CSTR      
4DE5                EXPECTM_0_2561S43:      
4DE5   E1                     POP   HL   
4DE6                          ;*Macro unroll:  test "2 3 <", TRUE
4DE6   31 80 18               LD   SP,STACK   
4DE9   CD DA 08               CALL   init   
4DEC   CD BE 08               CALL   execStr   
4DEF   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4DF5                          ;*Macro unroll:  expect "2 3 <",TRUE
4DF5   E1                     POP   HL   
4DF6   E5                     PUSH   HL   
4DF7   11 FF FF               LD   DE,TRUE   
4DFA   B7                     OR   A   
4DFB   ED 52                  SBC   HL,DE   
4DFD   7D                     LD   A,L   
4DFE   B4                     OR   H   
4DFF   28 50                  JR   Z,expectM_0_2562S43   
4E01   CD B7 08               CALL   printStr   
4E04   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E10   CD B7 08               CALL   printStr   
4E13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E22   21 FF FF               LD   HL,TRUE   
4E25   CD 0B 08               CALL   prtdec   
4E28   CD B7 08               CALL   printStr   
4E2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E38   E1                     POP   hl   
4E39   E5                     PUSH   hl   
4E3A   CD 0B 08               CALL   prtdec   
4E3D   E1                     POP   hl   
4E3E   CD B7 08               CALL   printStr   
4E41   20 28 23 00            .CSTR   " (#"   
4E45   CD 53 08               CALL   prthex   
4E48   CD B7 08               CALL   printStr   
4E4B   29 0D 0A 00            .CSTR   ")\r\n"   
4E4F   76                     HALT      
4E50   00                     .CSTR      
4E51                EXPECTM_0_2562S43:      
4E51   E1                     POP   HL   
4E52                          ;*Macro unroll:  test "3 3 <", FALSE
4E52   31 80 18               LD   SP,STACK   
4E55   CD DA 08               CALL   init   
4E58   CD BE 08               CALL   execStr   
4E5B   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4E61                          ;*Macro unroll:  expect "3 3 <",FALSE
4E61   E1                     POP   HL   
4E62   E5                     PUSH   HL   
4E63   11 00 00               LD   DE,FALSE   
4E66   B7                     OR   A   
4E67   ED 52                  SBC   HL,DE   
4E69   7D                     LD   A,L   
4E6A   B4                     OR   H   
4E6B   28 50                  JR   Z,expectM_0_2563S43   
4E6D   CD B7 08               CALL   printStr   
4E70   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4E7C   CD B7 08               CALL   printStr   
4E7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E8E   21 00 00               LD   HL,FALSE   
4E91   CD 0B 08               CALL   prtdec   
4E94   CD B7 08               CALL   printStr   
4E97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EA4   E1                     POP   hl   
4EA5   E5                     PUSH   hl   
4EA6   CD 0B 08               CALL   prtdec   
4EA9   E1                     POP   hl   
4EAA   CD B7 08               CALL   printStr   
4EAD   20 28 23 00            .CSTR   " (#"   
4EB1   CD 53 08               CALL   prthex   
4EB4   CD B7 08               CALL   printStr   
4EB7   29 0D 0A 00            .CSTR   ")\r\n"   
4EBB   76                     HALT      
4EBC   00                     .CSTR      
4EBD                EXPECTM_0_2563S43:      
4EBD   E1                     POP   HL   
4EBE                          ;*Macro unroll:  test "1 2 >", FALSE
4EBE   31 80 18               LD   SP,STACK   
4EC1   CD DA 08               CALL   init   
4EC4   CD BE 08               CALL   execStr   
4EC7   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4ECD                          ;*Macro unroll:  expect "1 2 >",FALSE
4ECD   E1                     POP   HL   
4ECE   E5                     PUSH   HL   
4ECF   11 00 00               LD   DE,FALSE   
4ED2   B7                     OR   A   
4ED3   ED 52                  SBC   HL,DE   
4ED5   7D                     LD   A,L   
4ED6   B4                     OR   H   
4ED7   28 50                  JR   Z,expectM_0_2564S43   
4ED9   CD B7 08               CALL   printStr   
4EDC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4EE8   CD B7 08               CALL   printStr   
4EEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EFA   21 00 00               LD   HL,FALSE   
4EFD   CD 0B 08               CALL   prtdec   
4F00   CD B7 08               CALL   printStr   
4F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F10   E1                     POP   hl   
4F11   E5                     PUSH   hl   
4F12   CD 0B 08               CALL   prtdec   
4F15   E1                     POP   hl   
4F16   CD B7 08               CALL   printStr   
4F19   20 28 23 00            .CSTR   " (#"   
4F1D   CD 53 08               CALL   prthex   
4F20   CD B7 08               CALL   printStr   
4F23   29 0D 0A 00            .CSTR   ")\r\n"   
4F27   76                     HALT      
4F28   00                     .CSTR      
4F29                EXPECTM_0_2564S43:      
4F29   E1                     POP   HL   
4F2A                          ;*Macro unroll:  test "2 1 >", TRUE
4F2A   31 80 18               LD   SP,STACK   
4F2D   CD DA 08               CALL   init   
4F30   CD BE 08               CALL   execStr   
4F33   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F39                          ;*Macro unroll:  expect "2 1 >",TRUE
4F39   E1                     POP   HL   
4F3A   E5                     PUSH   HL   
4F3B   11 FF FF               LD   DE,TRUE   
4F3E   B7                     OR   A   
4F3F   ED 52                  SBC   HL,DE   
4F41   7D                     LD   A,L   
4F42   B4                     OR   H   
4F43   28 50                  JR   Z,expectM_0_2565S43   
4F45   CD B7 08               CALL   printStr   
4F48   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4F54   CD B7 08               CALL   printStr   
4F57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F66   21 FF FF               LD   HL,TRUE   
4F69   CD 0B 08               CALL   prtdec   
4F6C   CD B7 08               CALL   printStr   
4F6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F7C   E1                     POP   hl   
4F7D   E5                     PUSH   hl   
4F7E   CD 0B 08               CALL   prtdec   
4F81   E1                     POP   hl   
4F82   CD B7 08               CALL   printStr   
4F85   20 28 23 00            .CSTR   " (#"   
4F89   CD 53 08               CALL   prthex   
4F8C   CD B7 08               CALL   printStr   
4F8F   29 0D 0A 00            .CSTR   ")\r\n"   
4F93   76                     HALT      
4F94   00                     .CSTR      
4F95                EXPECTM_0_2565S43:      
4F95   E1                     POP   HL   
4F96                          ;*Macro unroll:  test "3 3 >", FALSE
4F96   31 80 18               LD   SP,STACK   
4F99   CD DA 08               CALL   init   
4F9C   CD BE 08               CALL   execStr   
4F9F   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4FA5                          ;*Macro unroll:  expect "3 3 >",FALSE
4FA5   E1                     POP   HL   
4FA6   E5                     PUSH   HL   
4FA7   11 00 00               LD   DE,FALSE   
4FAA   B7                     OR   A   
4FAB   ED 52                  SBC   HL,DE   
4FAD   7D                     LD   A,L   
4FAE   B4                     OR   H   
4FAF   28 50                  JR   Z,expectM_0_2566S43   
4FB1   CD B7 08               CALL   printStr   
4FB4   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
4FC0   CD B7 08               CALL   printStr   
4FC3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FD2   21 00 00               LD   HL,FALSE   
4FD5   CD 0B 08               CALL   prtdec   
4FD8   CD B7 08               CALL   printStr   
4FDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FE8   E1                     POP   hl   
4FE9   E5                     PUSH   hl   
4FEA   CD 0B 08               CALL   prtdec   
4FED   E1                     POP   hl   
4FEE   CD B7 08               CALL   printStr   
4FF1   20 28 23 00            .CSTR   " (#"   
4FF5   CD 53 08               CALL   prthex   
4FF8   CD B7 08               CALL   printStr   
4FFB   29 0D 0A 00            .CSTR   ")\r\n"   
4FFF   76                     HALT      
5000   00                     .CSTR      
5001                EXPECTM_0_2566S43:      
5001   E1                     POP   HL   
5002                          ;*Macro unroll:  test "4 3 >", TRUE
5002   31 80 18               LD   SP,STACK   
5005   CD DA 08               CALL   init   
5008   CD BE 08               CALL   execStr   
500B   34 20 33 20 3E 00      .CSTR   "4 3 >"   
5011                          ;*Macro unroll:  expect "4 3 >",TRUE
5011   E1                     POP   HL   
5012   E5                     PUSH   HL   
5013   11 FF FF               LD   DE,TRUE   
5016   B7                     OR   A   
5017   ED 52                  SBC   HL,DE   
5019   7D                     LD   A,L   
501A   B4                     OR   H   
501B   28 50                  JR   Z,expectM_0_2567S43   
501D   CD B7 08               CALL   printStr   
5020   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
502C   CD B7 08               CALL   printStr   
502F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
503E   21 FF FF               LD   HL,TRUE   
5041   CD 0B 08               CALL   prtdec   
5044   CD B7 08               CALL   printStr   
5047   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5054   E1                     POP   hl   
5055   E5                     PUSH   hl   
5056   CD 0B 08               CALL   prtdec   
5059   E1                     POP   hl   
505A   CD B7 08               CALL   printStr   
505D   20 28 23 00            .CSTR   " (#"   
5061   CD 53 08               CALL   prthex   
5064   CD B7 08               CALL   printStr   
5067   29 0D 0A 00            .CSTR   ")\r\n"   
506B   76                     HALT      
506C   00                     .CSTR      
506D                EXPECTM_0_2567S43:      
506D   E1                     POP   HL   
506E                          ;*Macro unroll:  test "2 2 <=", TRUE
506E   31 80 18               LD   SP,STACK   
5071   CD DA 08               CALL   init   
5074   CD BE 08               CALL   execStr   
5077   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
507E                          ;*Macro unroll:  expect "2 2 <=",TRUE
507E   E1                     POP   HL   
507F   E5                     PUSH   HL   
5080   11 FF FF               LD   DE,TRUE   
5083   B7                     OR   A   
5084   ED 52                  SBC   HL,DE   
5086   7D                     LD   A,L   
5087   B4                     OR   H   
5088   28 51                  JR   Z,expectM_0_2568S43   
508A   CD B7 08               CALL   printStr   
508D   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
509A   CD B7 08               CALL   printStr   
509D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50AC   21 FF FF               LD   HL,TRUE   
50AF   CD 0B 08               CALL   prtdec   
50B2   CD B7 08               CALL   printStr   
50B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50C2   E1                     POP   hl   
50C3   E5                     PUSH   hl   
50C4   CD 0B 08               CALL   prtdec   
50C7   E1                     POP   hl   
50C8   CD B7 08               CALL   printStr   
50CB   20 28 23 00            .CSTR   " (#"   
50CF   CD 53 08               CALL   prthex   
50D2   CD B7 08               CALL   printStr   
50D5   29 0D 0A 00            .CSTR   ")\r\n"   
50D9   76                     HALT      
50DA   00                     .CSTR      
50DB                EXPECTM_0_2568S43:      
50DB   E1                     POP   HL   
50DC                          ;*Macro unroll:  test "2 2 >=", TRUE
50DC   31 80 18               LD   SP,STACK   
50DF   CD DA 08               CALL   init   
50E2   CD BE 08               CALL   execStr   
50E5   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
50EC                          ;*Macro unroll:  expect "2 2 >=",TRUE
50EC   E1                     POP   HL   
50ED   E5                     PUSH   HL   
50EE   11 FF FF               LD   DE,TRUE   
50F1   B7                     OR   A   
50F2   ED 52                  SBC   HL,DE   
50F4   7D                     LD   A,L   
50F5   B4                     OR   H   
50F6   28 51                  JR   Z,expectM_0_2569S43   
50F8   CD B7 08               CALL   printStr   
50FB   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
5108   CD B7 08               CALL   printStr   
510B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
511A   21 FF FF               LD   HL,TRUE   
511D   CD 0B 08               CALL   prtdec   
5120   CD B7 08               CALL   printStr   
5123   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5130   E1                     POP   hl   
5131   E5                     PUSH   hl   
5132   CD 0B 08               CALL   prtdec   
5135   E1                     POP   hl   
5136   CD B7 08               CALL   printStr   
5139   20 28 23 00            .CSTR   " (#"   
513D   CD 53 08               CALL   prthex   
5140   CD B7 08               CALL   printStr   
5143   29 0D 0A 00            .CSTR   ")\r\n"   
5147   76                     HALT      
5148   00                     .CSTR      
5149                EXPECTM_0_2569S43:      
5149   E1                     POP   HL   
514A                          ;*Macro unroll:  test "() -2?", $0000
514A   31 80 18               LD   SP,STACK   
514D   CD DA 08               CALL   init   
5150   CD BE 08               CALL   execStr   
5153   28 29 20 2D 32 3F 00   .CSTR   "() -2?"   
515A                          ;*Macro unroll:  expect "() -2?",$0000
515A   E1                     POP   HL   
515B   E5                     PUSH   HL   
515C   11 00 00               LD   DE,$0000   
515F   B7                     OR   A   
5160   ED 52                  SBC   HL,DE   
5162   7D                     LD   A,L   
5163   B4                     OR   H   
5164   28 51                  JR   Z,expectM_0_2570S43   
5166   CD B7 08               CALL   printStr   
5169   43 6F 64 65 3A 20 28 29 20 2D 32 3F 00 .CSTR   "Code: ","() -2?"   
5176   CD B7 08               CALL   printStr   
5179   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5188   21 00 00               LD   HL,$0000   
518B   CD 0B 08               CALL   prtdec   
518E   CD B7 08               CALL   printStr   
5191   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
519E   E1                     POP   hl   
519F   E5                     PUSH   hl   
51A0   CD 0B 08               CALL   prtdec   
51A3   E1                     POP   hl   
51A4   CD B7 08               CALL   printStr   
51A7   20 28 23 00            .CSTR   " (#"   
51AB   CD 53 08               CALL   prthex   
51AE   CD B7 08               CALL   printStr   
51B1   29 0D 0A 00            .CSTR   ")\r\n"   
51B5   76                     HALT      
51B6   00                     .CSTR      
51B7                EXPECTM_0_2570S43:      
51B7   E1                     POP   HL   
51B8                          ;*Macro unroll:  test "(a) -1?", $0001
51B8   31 80 18               LD   SP,STACK   
51BB   CD DA 08               CALL   init   
51BE   CD BE 08               CALL   execStr   
51C1   28 61 29 20 2D 31 3F 00 .CSTR   "(a) -1?"   
51C9                          ;*Macro unroll:  expect "(a) -1?",$0001
51C9   E1                     POP   HL   
51CA   E5                     PUSH   HL   
51CB   11 01 00               LD   DE,$0001   
51CE   B7                     OR   A   
51CF   ED 52                  SBC   HL,DE   
51D1   7D                     LD   A,L   
51D2   B4                     OR   H   
51D3   28 52                  JR   Z,expectM_0_2571S43   
51D5   CD B7 08               CALL   printStr   
51D8   43 6F 64 65 3A 20 28 61 29 20 2D 31 3F 00 .CSTR   "Code: ","(a) -1?"   
51E6   CD B7 08               CALL   printStr   
51E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51F8   21 01 00               LD   HL,$0001   
51FB   CD 0B 08               CALL   prtdec   
51FE   CD B7 08               CALL   printStr   
5201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
520E   E1                     POP   hl   
520F   E5                     PUSH   hl   
5210   CD 0B 08               CALL   prtdec   
5213   E1                     POP   hl   
5214   CD B7 08               CALL   printStr   
5217   20 28 23 00            .CSTR   " (#"   
521B   CD 53 08               CALL   prthex   
521E   CD B7 08               CALL   printStr   
5221   29 0D 0A 00            .CSTR   ")\r\n"   
5225   76                     HALT      
5226   00                     .CSTR      
5227                EXPECTM_0_2571S43:      
5227   E1                     POP   HL   
5228                          ;*Macro unroll:  test "(a:) -1?", $0001
5228   31 80 18               LD   SP,STACK   
522B   CD DA 08               CALL   init   
522E   CD BE 08               CALL   execStr   
5231   28 61 3A 29 20 2D 31 3F 00 .CSTR   "(a:) -1?"   
523A                          ;*Macro unroll:  expect "(a:) -1?",$0001
523A   E1                     POP   HL   
523B   E5                     PUSH   HL   
523C   11 01 00               LD   DE,$0001   
523F   B7                     OR   A   
5240   ED 52                  SBC   HL,DE   
5242   7D                     LD   A,L   
5243   B4                     OR   H   
5244   28 53                  JR   Z,expectM_0_2572S43   
5246   CD B7 08               CALL   printStr   
5249   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:) -1?"   
5258   CD B7 08               CALL   printStr   
525B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
526A   21 01 00               LD   HL,$0001   
526D   CD 0B 08               CALL   prtdec   
5270   CD B7 08               CALL   printStr   
5273   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5280   E1                     POP   hl   
5281   E5                     PUSH   hl   
5282   CD 0B 08               CALL   prtdec   
5285   E1                     POP   hl   
5286   CD B7 08               CALL   printStr   
5289   20 28 23 00            .CSTR   " (#"   
528D   CD 53 08               CALL   prthex   
5290   CD B7 08               CALL   printStr   
5293   29 0D 0A 00            .CSTR   ")\r\n"   
5297   76                     HALT      
5298   00                     .CSTR      
5299                EXPECTM_0_2572S43:      
5299   E1                     POP   HL   
529A                          ;*Macro unroll:  test "(a:b) -1?", $0102
529A   31 80 18               LD   SP,STACK   
529D   CD DA 08               CALL   init   
52A0   CD BE 08               CALL   execStr   
52A3   28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "(a:b) -1?"   
52AD                          ;*Macro unroll:  expect "(a:b) -1?",$0102
52AD   E1                     POP   HL   
52AE   E5                     PUSH   HL   
52AF   11 02 01               LD   DE,$0102   
52B2   B7                     OR   A   
52B3   ED 52                  SBC   HL,DE   
52B5   7D                     LD   A,L   
52B6   B4                     OR   H   
52B7   28 54                  JR   Z,expectM_0_2573S43   
52B9   CD B7 08               CALL   printStr   
52BC   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(a:b) -1?"   
52CC   CD B7 08               CALL   printStr   
52CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52DE   21 02 01               LD   HL,$0102   
52E1   CD 0B 08               CALL   prtdec   
52E4   CD B7 08               CALL   printStr   
52E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52F4   E1                     POP   hl   
52F5   E5                     PUSH   hl   
52F6   CD 0B 08               CALL   prtdec   
52F9   E1                     POP   hl   
52FA   CD B7 08               CALL   printStr   
52FD   20 28 23 00            .CSTR   " (#"   
5301   CD 53 08               CALL   prthex   
5304   CD B7 08               CALL   printStr   
5307   29 0D 0A 00            .CSTR   ")\r\n"   
530B   76                     HALT      
530C   00                     .CSTR      
530D                EXPECTM_0_2573S43:      
530D   E1                     POP   HL   
530E                          ;*Macro unroll:  test "(:b) -1?", $0101
530E   31 80 18               LD   SP,STACK   
5311   CD DA 08               CALL   init   
5314   CD BE 08               CALL   execStr   
5317   28 3A 62 29 20 2D 31 3F 00 .CSTR   "(:b) -1?"   
5320                          ;*Macro unroll:  expect "(:b) -1?",$0101
5320   E1                     POP   HL   
5321   E5                     PUSH   HL   
5322   11 01 01               LD   DE,$0101   
5325   B7                     OR   A   
5326   ED 52                  SBC   HL,DE   
5328   7D                     LD   A,L   
5329   B4                     OR   H   
532A   28 53                  JR   Z,expectM_0_2574S43   
532C   CD B7 08               CALL   printStr   
532F   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 3F 00 .CSTR   "Code: ","(:b) -1?"   
533E   CD B7 08               CALL   printStr   
5341   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5350   21 01 01               LD   HL,$0101   
5353   CD 0B 08               CALL   prtdec   
5356   CD B7 08               CALL   printStr   
5359   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5366   E1                     POP   hl   
5367   E5                     PUSH   hl   
5368   CD 0B 08               CALL   prtdec   
536B   E1                     POP   hl   
536C   CD B7 08               CALL   printStr   
536F   20 28 23 00            .CSTR   " (#"   
5373   CD 53 08               CALL   prthex   
5376   CD B7 08               CALL   printStr   
5379   29 0D 0A 00            .CSTR   ")\r\n"   
537D   76                     HALT      
537E   00                     .CSTR      
537F                EXPECTM_0_2574S43:      
537F   E1                     POP   HL   
5380                          ;*Macro unroll:  test ":x 20 let 100 x set x", 100
5380   31 80 18               LD   SP,STACK   
5383   CD DA 08               CALL   init   
5386   CD BE 08               CALL   execStr   
5389   3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   ":x 20 let 100 x set x"   
539F                          ;*Macro unroll:  expect ":x 20 let 100 x set x",100
539F   E1                     POP   HL   
53A0   E5                     PUSH   HL   
53A1   11 64 00               LD   DE,100   
53A4   B7                     OR   A   
53A5   ED 52                  SBC   HL,DE   
53A7   7D                     LD   A,L   
53A8   B4                     OR   H   
53A9   28 60                  JR   Z,expectM_0_2575S43   
53AB   CD B7 08               CALL   printStr   
53AE   43 6F 64 65 3A 20 3A 78 20 32 30 20 6C 65 74 20 31 30 30 20 78 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 20 let 100 x set x"   
53CA   CD B7 08               CALL   printStr   
53CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
53DC   21 64 00               LD   HL,100   
53DF   CD 0B 08               CALL   prtdec   
53E2   CD B7 08               CALL   printStr   
53E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53F2   E1                     POP   hl   
53F3   E5                     PUSH   hl   
53F4   CD 0B 08               CALL   prtdec   
53F7   E1                     POP   hl   
53F8   CD B7 08               CALL   printStr   
53FB   20 28 23 00            .CSTR   " (#"   
53FF   CD 53 08               CALL   prthex   
5402   CD B7 08               CALL   printStr   
5405   29 0D 0A 00            .CSTR   ")\r\n"   
5409   76                     HALT      
540A   00                     .CSTR      
540B                EXPECTM_0_2575S43:      
540B   E1                     POP   HL   
540C                          ;*Macro unroll:  test "[10 20 30] 1?", 20
540C   31 80 18               LD   SP,STACK   
540F   CD DA 08               CALL   init   
5412   CD BE 08               CALL   execStr   
5415   5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "[10 20 30] 1?"   
5423                          ;*Macro unroll:  expect "[10 20 30] 1?",20
5423   E1                     POP   HL   
5424   E5                     PUSH   HL   
5425   11 14 00               LD   DE,20   
5428   B7                     OR   A   
5429   ED 52                  SBC   HL,DE   
542B   7D                     LD   A,L   
542C   B4                     OR   H   
542D   28 58                  JR   Z,expectM_0_2576S43   
542F   CD B7 08               CALL   printStr   
5432   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "Code: ","[10 20 30] 1?"   
5446   CD B7 08               CALL   printStr   
5449   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5458   21 14 00               LD   HL,20   
545B   CD 0B 08               CALL   prtdec   
545E   CD B7 08               CALL   printStr   
5461   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
546E   E1                     POP   hl   
546F   E5                     PUSH   hl   
5470   CD 0B 08               CALL   prtdec   
5473   E1                     POP   hl   
5474   CD B7 08               CALL   printStr   
5477   20 28 23 00            .CSTR   " (#"   
547B   CD 53 08               CALL   prthex   
547E   CD B7 08               CALL   printStr   
5481   29 0D 0A 00            .CSTR   ")\r\n"   
5485   76                     HALT      
5486   00                     .CSTR      
5487                EXPECTM_0_2576S43:      
5487   E1                     POP   HL   
5488                          ;*Macro unroll:  test ":x [10 20 30] let 50 x 1? set x 1?", 50
5488   31 80 18               LD   SP,STACK   
548B   CD DA 08               CALL   init   
548E   CD BE 08               CALL   execStr   
5491   3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   ":x [10 20 30] let 50 x 1? set x 1?"   
54B4                          ;*Macro unroll:  expect ":x [10 20 30] let 50 x 1? set x 1?",50
54B4   E1                     POP   HL   
54B5   E5                     PUSH   HL   
54B6   11 32 00               LD   DE,50   
54B9   B7                     OR   A   
54BA   ED 52                  SBC   HL,DE   
54BC   7D                     LD   A,L   
54BD   B4                     OR   H   
54BE   28 6D                  JR   Z,expectM_0_2577S43   
54C0   CD B7 08               CALL   printStr   
54C3   43 6F 64 65 3A 20 3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 35 30 20 78 20 31 3F 20 73 65 74 20 78 20 31 3F 00 .CSTR   "Code: ",":x [10 20 30] let 50 x 1? set x 1?"   
54EC   CD B7 08               CALL   printStr   
54EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54FE   21 32 00               LD   HL,50   
5501   CD 0B 08               CALL   prtdec   
5504   CD B7 08               CALL   printStr   
5507   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5514   E1                     POP   hl   
5515   E5                     PUSH   hl   
5516   CD 0B 08               CALL   prtdec   
5519   E1                     POP   hl   
551A   CD B7 08               CALL   printStr   
551D   20 28 23 00            .CSTR   " (#"   
5521   CD 53 08               CALL   prthex   
5524   CD B7 08               CALL   printStr   
5527   29 0D 0A 00            .CSTR   ")\r\n"   
552B   76                     HALT      
552C   00                     .CSTR      
552D                EXPECTM_0_2577S43:      
552D   E1                     POP   HL   
552E                          ;*Macro unroll:  test "bytes [1 2 3] 1?", 2
552E   31 80 18               LD   SP,STACK   
5531   CD DA 08               CALL   init   
5534   CD BE 08               CALL   execStr   
5537   62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "bytes [1 2 3] 1?"   
5548                          ;*Macro unroll:  expect "bytes [1 2 3] 1?",2
5548   E1                     POP   HL   
5549   E5                     PUSH   HL   
554A   11 02 00               LD   DE,2   
554D   B7                     OR   A   
554E   ED 52                  SBC   HL,DE   
5550   7D                     LD   A,L   
5551   B4                     OR   H   
5552   28 5B                  JR   Z,expectM_0_2578S43   
5554   CD B7 08               CALL   printStr   
5557   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "Code: ","bytes [1 2 3] 1?"   
556E   CD B7 08               CALL   printStr   
5571   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5580   21 02 00               LD   HL,2   
5583   CD 0B 08               CALL   prtdec   
5586   CD B7 08               CALL   printStr   
5589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5596   E1                     POP   hl   
5597   E5                     PUSH   hl   
5598   CD 0B 08               CALL   prtdec   
559B   E1                     POP   hl   
559C   CD B7 08               CALL   printStr   
559F   20 28 23 00            .CSTR   " (#"   
55A3   CD 53 08               CALL   prthex   
55A6   CD B7 08               CALL   printStr   
55A9   29 0D 0A 00            .CSTR   ")\r\n"   
55AD   76                     HALT      
55AE   00                     .CSTR      
55AF                EXPECTM_0_2578S43:      
55AF   E1                     POP   HL   
55B0                          ;*Macro unroll:  test "bytes :x [1 2 3] let x 1?", 2
55B0   31 80 18               LD   SP,STACK   
55B3   CD DA 08               CALL   init   
55B6   CD BE 08               CALL   execStr   
55B9   62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "bytes :x [1 2 3] let x 1?"   
55D3                          ;*Macro unroll:  expect "bytes :x [1 2 3] let x 1?",2
55D3   E1                     POP   HL   
55D4   E5                     PUSH   HL   
55D5   11 02 00               LD   DE,2   
55D8   B7                     OR   A   
55D9   ED 52                  SBC   HL,DE   
55DB   7D                     LD   A,L   
55DC   B4                     OR   H   
55DD   28 64                  JR   Z,expectM_0_2579S43   
55DF   CD B7 08               CALL   printStr   
55E2   43 6F 64 65 3A 20 62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "Code: ","bytes :x [1 2 3] let x 1?"   
5602   CD B7 08               CALL   printStr   
5605   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5614   21 02 00               LD   HL,2   
5617   CD 0B 08               CALL   prtdec   
561A   CD B7 08               CALL   printStr   
561D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
562A   E1                     POP   hl   
562B   E5                     PUSH   hl   
562C   CD 0B 08               CALL   prtdec   
562F   E1                     POP   hl   
5630   CD B7 08               CALL   printStr   
5633   20 28 23 00            .CSTR   " (#"   
5637   CD 53 08               CALL   prthex   
563A   CD B7 08               CALL   printStr   
563D   29 0D 0A 00            .CSTR   ")\r\n"   
5641   76                     HALT      
5642   00                     .CSTR      
5643                EXPECTM_0_2579S43:      
5643   E1                     POP   HL   
5644                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1?", 66
5644   31 80 18               LD   SP,STACK   
5647   CD DA 08               CALL   init   
564A   CD BE 08               CALL   execStr   
564D   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1?"   
5664                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1?",66
5664   E1                     POP   HL   
5665   E5                     PUSH   HL   
5666   11 42 00               LD   DE,66   
5669   B7                     OR   A   
566A   ED 52                  SBC   HL,DE   
566C   7D                     LD   A,L   
566D   B4                     OR   H   
566E   28 61                  JR   Z,expectM_0_2580S43   
5670   CD B7 08               CALL   printStr   
5673   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1?"   
5690   CD B7 08               CALL   printStr   
5693   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56A2   21 42 00               LD   HL,66   
56A5   CD 0B 08               CALL   prtdec   
56A8   CD B7 08               CALL   printStr   
56AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56B8   E1                     POP   hl   
56B9   E5                     PUSH   hl   
56BA   CD 0B 08               CALL   prtdec   
56BD   E1                     POP   hl   
56BE   CD B7 08               CALL   printStr   
56C1   20 28 23 00            .CSTR   " (#"   
56C5   CD 53 08               CALL   prthex   
56C8   CD B7 08               CALL   printStr   
56CB   29 0D 0A 00            .CSTR   ")\r\n"   
56CF   76                     HALT      
56D0   00                     .CSTR      
56D1                EXPECTM_0_2580S43:      
56D1   E1                     POP   HL   
56D2                          ;*Macro unroll:  test "{1} exec", 1
56D2   31 80 18               LD   SP,STACK   
56D5   CD DA 08               CALL   init   
56D8   CD BE 08               CALL   execStr   
56DB   7B 31 7D 20 65 78 65 63 00 .CSTR   "{1} exec"   
56E4                          ;*Macro unroll:  expect "{1} exec",1
56E4   E1                     POP   HL   
56E5   E5                     PUSH   HL   
56E6   11 01 00               LD   DE,1   
56E9   B7                     OR   A   
56EA   ED 52                  SBC   HL,DE   
56EC   7D                     LD   A,L   
56ED   B4                     OR   H   
56EE   28 53                  JR   Z,expectM_0_2581S43   
56F0   CD B7 08               CALL   printStr   
56F3   43 6F 64 65 3A 20 7B 31 7D 20 65 78 65 63 00 .CSTR   "Code: ","{1} exec"   
5702   CD B7 08               CALL   printStr   
5705   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5714   21 01 00               LD   HL,1   
5717   CD 0B 08               CALL   prtdec   
571A   CD B7 08               CALL   printStr   
571D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
572A   E1                     POP   hl   
572B   E5                     PUSH   hl   
572C   CD 0B 08               CALL   prtdec   
572F   E1                     POP   hl   
5730   CD B7 08               CALL   printStr   
5733   20 28 23 00            .CSTR   " (#"   
5737   CD 53 08               CALL   prthex   
573A   CD B7 08               CALL   printStr   
573D   29 0D 0A 00            .CSTR   ")\r\n"   
5741   76                     HALT      
5742   00                     .CSTR      
5743                EXPECTM_0_2581S43:      
5743   E1                     POP   HL   
5744                          ;*Macro unroll:  test "{{1} exec} exec", 1
5744   31 80 18               LD   SP,STACK   
5747   CD DA 08               CALL   init   
574A   CD BE 08               CALL   execStr   
574D   7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{1} exec} exec"   
575D                          ;*Macro unroll:  expect "{{1} exec} exec",1
575D   E1                     POP   HL   
575E   E5                     PUSH   HL   
575F   11 01 00               LD   DE,1   
5762   B7                     OR   A   
5763   ED 52                  SBC   HL,DE   
5765   7D                     LD   A,L   
5766   B4                     OR   H   
5767   28 5A                  JR   Z,expectM_0_2582S43   
5769   CD B7 08               CALL   printStr   
576C   43 6F 64 65 3A 20 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{1} exec} exec"   
5782   CD B7 08               CALL   printStr   
5785   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5794   21 01 00               LD   HL,1   
5797   CD 0B 08               CALL   prtdec   
579A   CD B7 08               CALL   printStr   
579D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57AA   E1                     POP   hl   
57AB   E5                     PUSH   hl   
57AC   CD 0B 08               CALL   prtdec   
57AF   E1                     POP   hl   
57B0   CD B7 08               CALL   printStr   
57B3   20 28 23 00            .CSTR   " (#"   
57B7   CD 53 08               CALL   prthex   
57BA   CD B7 08               CALL   printStr   
57BD   29 0D 0A 00            .CSTR   ")\r\n"   
57C1   76                     HALT      
57C2   00                     .CSTR      
57C3                EXPECTM_0_2582S43:      
57C3   E1                     POP   HL   
57C4                          ;*Macro unroll:  test "{{{1} exec} exec} exec", 1
57C4   31 80 18               LD   SP,STACK   
57C7   CD DA 08               CALL   init   
57CA   CD BE 08               CALL   execStr   
57CD   7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "{{{1} exec} exec} exec"   
57E4                          ;*Macro unroll:  expect "{{{1} exec} exec} exec",1
57E4   E1                     POP   HL   
57E5   E5                     PUSH   HL   
57E6   11 01 00               LD   DE,1   
57E9   B7                     OR   A   
57EA   ED 52                  SBC   HL,DE   
57EC   7D                     LD   A,L   
57ED   B4                     OR   H   
57EE   28 61                  JR   Z,expectM_0_2583S43   
57F0   CD B7 08               CALL   printStr   
57F3   43 6F 64 65 3A 20 7B 7B 7B 31 7D 20 65 78 65 63 7D 20 65 78 65 63 7D 20 65 78 65 63 00 .CSTR   "Code: ","{{{1} exec} exec} exec"   
5810   CD B7 08               CALL   printStr   
5813   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5822   21 01 00               LD   HL,1   
5825   CD 0B 08               CALL   prtdec   
5828   CD B7 08               CALL   printStr   
582B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5838   E1                     POP   hl   
5839   E5                     PUSH   hl   
583A   CD 0B 08               CALL   prtdec   
583D   E1                     POP   hl   
583E   CD B7 08               CALL   printStr   
5841   20 28 23 00            .CSTR   " (#"   
5845   CD 53 08               CALL   prthex   
5848   CD B7 08               CALL   printStr   
584B   29 0D 0A 00            .CSTR   ")\r\n"   
584F   76                     HALT      
5850   00                     .CSTR      
5851                EXPECTM_0_2583S43:      
5851   E1                     POP   HL   
5852                          ;*Macro unroll:  test "1 5 (a) {2} func call", 2
5852   31 80 18               LD   SP,STACK   
5855   CD DA 08               CALL   init   
5858   CD BE 08               CALL   execStr   
585B   31 20 35 20 28 61 29 20 7B 32 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {2} func call"   
5871                          ;*Macro unroll:  expect "1 5 (a) {2} func call",2
5871   E1                     POP   HL   
5872   E5                     PUSH   HL   
5873   11 02 00               LD   DE,2   
5876   B7                     OR   A   
5877   ED 52                  SBC   HL,DE   
5879   7D                     LD   A,L   
587A   B4                     OR   H   
587B   28 60                  JR   Z,expectM_0_2584S43   
587D   CD B7 08               CALL   printStr   
5880   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 32 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {2} func call"   
589C   CD B7 08               CALL   printStr   
589F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58AE   21 02 00               LD   HL,2   
58B1   CD 0B 08               CALL   prtdec   
58B4   CD B7 08               CALL   printStr   
58B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58C4   E1                     POP   hl   
58C5   E5                     PUSH   hl   
58C6   CD 0B 08               CALL   prtdec   
58C9   E1                     POP   hl   
58CA   CD B7 08               CALL   printStr   
58CD   20 28 23 00            .CSTR   " (#"   
58D1   CD 53 08               CALL   prthex   
58D4   CD B7 08               CALL   printStr   
58D7   29 0D 0A 00            .CSTR   ")\r\n"   
58DB   76                     HALT      
58DC   00                     .CSTR      
58DD                EXPECTM_0_2584S43:      
58DD   E1                     POP   HL   
58DE                          ;*Macro unroll:  test "1 5 (a) {$a} func call", 5
58DE   31 80 18               LD   SP,STACK   
58E1   CD DA 08               CALL   init   
58E4   CD BE 08               CALL   execStr   
58E7   31 20 35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {$a} func call"   
58FE                          ;*Macro unroll:  expect "1 5 (a) {$a} func call",5
58FE   E1                     POP   HL   
58FF   E5                     PUSH   HL   
5900   11 05 00               LD   DE,5   
5903   B7                     OR   A   
5904   ED 52                  SBC   HL,DE   
5906   7D                     LD   A,L   
5907   B4                     OR   H   
5908   28 61                  JR   Z,expectM_0_2585S43   
590A   CD B7 08               CALL   printStr   
590D   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {$a} func call"   
592A   CD B7 08               CALL   printStr   
592D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
593C   21 05 00               LD   HL,5   
593F   CD 0B 08               CALL   prtdec   
5942   CD B7 08               CALL   printStr   
5945   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5952   E1                     POP   hl   
5953   E5                     PUSH   hl   
5954   CD 0B 08               CALL   prtdec   
5957   E1                     POP   hl   
5958   CD B7 08               CALL   printStr   
595B   20 28 23 00            .CSTR   " (#"   
595F   CD 53 08               CALL   prthex   
5962   CD B7 08               CALL   printStr   
5965   29 0D 0A 00            .CSTR   ")\r\n"   
5969   76                     HALT      
596A   00                     .CSTR      
596B                EXPECTM_0_2585S43:      
596B   E1                     POP   HL   
596C                          ;*Macro unroll:  test "1 5 (a:b) {$a} func call ", 5
596C   31 80 18               LD   SP,STACK   
596F   CD DA 08               CALL   init   
5972   CD BE 08               CALL   execStr   
5975   31 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 20 00 .CSTR   "1 5 (a:b) {$a} func call "   
598F                          ;*Macro unroll:  expect "1 5 (a:b) {$a} func call ",5
598F   E1                     POP   HL   
5990   E5                     PUSH   HL   
5991   11 05 00               LD   DE,5   
5994   B7                     OR   A   
5995   ED 52                  SBC   HL,DE   
5997   7D                     LD   A,L   
5998   B4                     OR   H   
5999   28 64                  JR   Z,expectM_0_2586S43   
599B   CD B7 08               CALL   printStr   
599E   43 6F 64 65 3A 20 31 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 66 75 6E 63 20 63 61 6C 6C 20 00 .CSTR   "Code: ","1 5 (a:b) {$a} func call "   
59BE   CD B7 08               CALL   printStr   
59C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59D0   21 05 00               LD   HL,5   
59D3   CD 0B 08               CALL   prtdec   
59D6   CD B7 08               CALL   printStr   
59D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59E6   E1                     POP   hl   
59E7   E5                     PUSH   hl   
59E8   CD 0B 08               CALL   prtdec   
59EB   E1                     POP   hl   
59EC   CD B7 08               CALL   printStr   
59EF   20 28 23 00            .CSTR   " (#"   
59F3   CD 53 08               CALL   prthex   
59F6   CD B7 08               CALL   printStr   
59F9   29 0D 0A 00            .CSTR   ")\r\n"   
59FD   76                     HALT      
59FE   00                     .CSTR      
59FF                EXPECTM_0_2586S43:      
59FF   E1                     POP   HL   
5A00                          ;*Macro unroll:  test "1 5 (a) {{2} exec} func call", 2
5A00   31 80 18               LD   SP,STACK   
5A03   CD DA 08               CALL   init   
5A06   CD BE 08               CALL   execStr   
5A09   31 20 35 20 28 61 29 20 7B 7B 32 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{2} exec} func call"   
5A26                          ;*Macro unroll:  expect "1 5 (a) {{2} exec} func call",2
5A26   E1                     POP   HL   
5A27   E5                     PUSH   HL   
5A28   11 02 00               LD   DE,2   
5A2B   B7                     OR   A   
5A2C   ED 52                  SBC   HL,DE   
5A2E   7D                     LD   A,L   
5A2F   B4                     OR   H   
5A30   28 67                  JR   Z,expectM_0_2587S43   
5A32   CD B7 08               CALL   printStr   
5A35   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 32 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{2} exec} func call"   
5A58   CD B7 08               CALL   printStr   
5A5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A6A   21 02 00               LD   HL,2   
5A6D   CD 0B 08               CALL   prtdec   
5A70   CD B7 08               CALL   printStr   
5A73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A80   E1                     POP   hl   
5A81   E5                     PUSH   hl   
5A82   CD 0B 08               CALL   prtdec   
5A85   E1                     POP   hl   
5A86   CD B7 08               CALL   printStr   
5A89   20 28 23 00            .CSTR   " (#"   
5A8D   CD 53 08               CALL   prthex   
5A90   CD B7 08               CALL   printStr   
5A93   29 0D 0A 00            .CSTR   ")\r\n"   
5A97   76                     HALT      
5A98   00                     .CSTR      
5A99                EXPECTM_0_2587S43:      
5A99   E1                     POP   HL   
5A9A                          ;*Macro unroll:  test "1 5 (a) {{$a} exec} func call", 5
5A9A   31 80 18               LD   SP,STACK   
5A9D   CD DA 08               CALL   init   
5AA0   CD BE 08               CALL   execStr   
5AA3   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{$a} exec} func call"   
5AC1                          ;*Macro unroll:  expect "1 5 (a) {{$a} exec} func call",5
5AC1   E1                     POP   HL   
5AC2   E5                     PUSH   HL   
5AC3   11 05 00               LD   DE,5   
5AC6   B7                     OR   A   
5AC7   ED 52                  SBC   HL,DE   
5AC9   7D                     LD   A,L   
5ACA   B4                     OR   H   
5ACB   28 68                  JR   Z,expectM_0_2588S43   
5ACD   CD B7 08               CALL   printStr   
5AD0   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{$a} exec} func call"   
5AF4   CD B7 08               CALL   printStr   
5AF7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B06   21 05 00               LD   HL,5   
5B09   CD 0B 08               CALL   prtdec   
5B0C   CD B7 08               CALL   printStr   
5B0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B1C   E1                     POP   hl   
5B1D   E5                     PUSH   hl   
5B1E   CD 0B 08               CALL   prtdec   
5B21   E1                     POP   hl   
5B22   CD B7 08               CALL   printStr   
5B25   20 28 23 00            .CSTR   " (#"   
5B29   CD 53 08               CALL   prthex   
5B2C   CD B7 08               CALL   printStr   
5B2F   29 0D 0A 00            .CSTR   ")\r\n"   
5B33   76                     HALT      
5B34   00                     .CSTR      
5B35                EXPECTM_0_2588S43:      
5B35   E1                     POP   HL   
5B36                          ;*Macro unroll:  test "1 5 (a) {{$a 1 +} exec} func call", 6
5B36   31 80 18               LD   SP,STACK   
5B39   CD DA 08               CALL   init   
5B3C   CD BE 08               CALL   execStr   
5B3F   31 20 35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 5 (a) {{$a 1 +} exec} func call"   
5B61                          ;*Macro unroll:  expect "1 5 (a) {{$a 1 +} exec} func call",6
5B61   E1                     POP   HL   
5B62   E5                     PUSH   HL   
5B63   11 06 00               LD   DE,6   
5B66   B7                     OR   A   
5B67   ED 52                  SBC   HL,DE   
5B69   7D                     LD   A,L   
5B6A   B4                     OR   H   
5B6B   28 6C                  JR   Z,expectM_0_2589S43   
5B6D   CD B7 08               CALL   printStr   
5B70   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 31 20 2B 7D 20 65 78 65 63 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 5 (a) {{$a 1 +} exec} func call"   
5B98   CD B7 08               CALL   printStr   
5B9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BAA   21 06 00               LD   HL,6   
5BAD   CD 0B 08               CALL   prtdec   
5BB0   CD B7 08               CALL   printStr   
5BB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5BC0   E1                     POP   hl   
5BC1   E5                     PUSH   hl   
5BC2   CD 0B 08               CALL   prtdec   
5BC5   E1                     POP   hl   
5BC6   CD B7 08               CALL   printStr   
5BC9   20 28 23 00            .CSTR   " (#"   
5BCD   CD 53 08               CALL   prthex   
5BD0   CD B7 08               CALL   printStr   
5BD3   29 0D 0A 00            .CSTR   ")\r\n"   
5BD7   76                     HALT      
5BD8   00                     .CSTR      
5BD9                EXPECTM_0_2589S43:      
5BD9   E1                     POP   HL   
5BDA                          ;*Macro unroll:  test "1 10 20 (ab) {-1 {$a} {$b} ifte} func call", 10
5BDA   31 80 18               LD   SP,STACK   
5BDD   CD DA 08               CALL   init   
5BE0   CD BE 08               CALL   execStr   
5BE3   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5C0E                          ;*Macro unroll:  expect "1 10 20 (ab) {-1 {$a} {$b} ifte} func call",10
5C0E   E1                     POP   HL   
5C0F   E5                     PUSH   HL   
5C10   11 0A 00               LD   DE,10   
5C13   B7                     OR   A   
5C14   ED 52                  SBC   HL,DE   
5C16   7D                     LD   A,L   
5C17   B4                     OR   H   
5C18   28 75                  JR   Z,expectM_0_2590S43   
5C1A   CD B7 08               CALL   printStr   
5C1D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 2D 31 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (ab) {-1 {$a} {$b} ifte} func call"   
5C4E   CD B7 08               CALL   printStr   
5C51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C60   21 0A 00               LD   HL,10   
5C63   CD 0B 08               CALL   prtdec   
5C66   CD B7 08               CALL   printStr   
5C69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C76   E1                     POP   hl   
5C77   E5                     PUSH   hl   
5C78   CD 0B 08               CALL   prtdec   
5C7B   E1                     POP   hl   
5C7C   CD B7 08               CALL   printStr   
5C7F   20 28 23 00            .CSTR   " (#"   
5C83   CD 53 08               CALL   prthex   
5C86   CD B7 08               CALL   printStr   
5C89   29 0D 0A 00            .CSTR   ")\r\n"   
5C8D   76                     HALT      
5C8E   00                     .CSTR      
5C8F                EXPECTM_0_2590S43:      
5C8F   E1                     POP   HL   
5C90                          ;*Macro unroll:  test "1 10 20 (ab) {0 {$a} {$b} ifte} func call", 20
5C90   31 80 18               LD   SP,STACK   
5C93   CD DA 08               CALL   init   
5C96   CD BE 08               CALL   execStr   
5C99   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "1 10 20 (ab) {0 {$a} {$b} ifte} func call"   
5CC3                          ;*Macro unroll:  expect "1 10 20 (ab) {0 {$a} {$b} ifte} func call",20
5CC3   E1                     POP   HL   
5CC4   E5                     PUSH   HL   
5CC5   11 14 00               LD   DE,20   
5CC8   B7                     OR   A   
5CC9   ED 52                  SBC   HL,DE   
5CCB   7D                     LD   A,L   
5CCC   B4                     OR   H   
5CCD   28 74                  JR   Z,expectM_0_2591S43   
5CCF   CD B7 08               CALL   printStr   
5CD2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 7B 24 61 7D 20 7B 24 62 7D 20 69 66 74 65 7D 20 66 75 6E 63 20 63 61 6C 6C 00 .CSTR   "Code: ","1 10 20 (ab) {0 {$a} {$b} ifte} func call"   
5D02   CD B7 08               CALL   printStr   
5D05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D14   21 14 00               LD   HL,20   
5D17   CD 0B 08               CALL   prtdec   
5D1A   CD B7 08               CALL   printStr   
5D1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D2A   E1                     POP   hl   
5D2B   E5                     PUSH   hl   
5D2C   CD 0B 08               CALL   prtdec   
5D2F   E1                     POP   hl   
5D30   CD B7 08               CALL   printStr   
5D33   20 28 23 00            .CSTR   " (#"   
5D37   CD 53 08               CALL   prthex   
5D3A   CD B7 08               CALL   printStr   
5D3D   29 0D 0A 00            .CSTR   ")\r\n"   
5D41   76                     HALT      
5D42   00                     .CSTR      
5D43                EXPECTM_0_2591S43:      
5D43   E1                     POP   HL   
5D44                          ;*Macro unroll:  test ":x (a) {2} def 1 x", 2
5D44   31 80 18               LD   SP,STACK   
5D47   CD DA 08               CALL   init   
5D4A   CD BE 08               CALL   execStr   
5D4D   3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a) {2} def 1 x"   
5D60                          ;*Macro unroll:  expect ":x (a) {2} def 1 x",2
5D60   E1                     POP   HL   
5D61   E5                     PUSH   HL   
5D62   11 02 00               LD   DE,2   
5D65   B7                     OR   A   
5D66   ED 52                  SBC   HL,DE   
5D68   7D                     LD   A,L   
5D69   B4                     OR   H   
5D6A   28 5D                  JR   Z,expectM_0_2592S43   
5D6C   CD B7 08               CALL   printStr   
5D6F   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a) {2} def 1 x"   
5D88   CD B7 08               CALL   printStr   
5D8B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D9A   21 02 00               LD   HL,2   
5D9D   CD 0B 08               CALL   prtdec   
5DA0   CD B7 08               CALL   printStr   
5DA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5DB0   E1                     POP   hl   
5DB1   E5                     PUSH   hl   
5DB2   CD 0B 08               CALL   prtdec   
5DB5   E1                     POP   hl   
5DB6   CD B7 08               CALL   printStr   
5DB9   20 28 23 00            .CSTR   " (#"   
5DBD   CD 53 08               CALL   prthex   
5DC0   CD B7 08               CALL   printStr   
5DC3   29 0D 0A 00            .CSTR   ")\r\n"   
5DC7   76                     HALT      
5DC8   00                     .CSTR      
5DC9                EXPECTM_0_2592S43:      
5DC9   E1                     POP   HL   
5DCA                          ;*Macro unroll:  test ":x (a) {$a} def 0 1 x", 1
5DCA   31 80 18               LD   SP,STACK   
5DCD   CD DA 08               CALL   init   
5DD0   CD BE 08               CALL   execStr   
5DD3   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 30 20 31 20 78 00 .CSTR   ":x (a) {$a} def 0 1 x"   
5DE9                          ;*Macro unroll:  expect ":x (a) {$a} def 0 1 x",1
5DE9   E1                     POP   HL   
5DEA   E5                     PUSH   HL   
5DEB   11 01 00               LD   DE,1   
5DEE   B7                     OR   A   
5DEF   ED 52                  SBC   HL,DE   
5DF1   7D                     LD   A,L   
5DF2   B4                     OR   H   
5DF3   28 60                  JR   Z,expectM_0_2593S43   
5DF5   CD B7 08               CALL   printStr   
5DF8   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 30 20 31 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 0 1 x"   
5E14   CD B7 08               CALL   printStr   
5E17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E26   21 01 00               LD   HL,1   
5E29   CD 0B 08               CALL   prtdec   
5E2C   CD B7 08               CALL   printStr   
5E2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E3C   E1                     POP   hl   
5E3D   E5                     PUSH   hl   
5E3E   CD 0B 08               CALL   prtdec   
5E41   E1                     POP   hl   
5E42   CD B7 08               CALL   printStr   
5E45   20 28 23 00            .CSTR   " (#"   
5E49   CD 53 08               CALL   prthex   
5E4C   CD B7 08               CALL   printStr   
5E4F   29 0D 0A 00            .CSTR   ")\r\n"   
5E53   76                     HALT      
5E54   00                     .CSTR      
5E55                EXPECTM_0_2593S43:      
5E55   E1                     POP   HL   
5E56                          ;*Macro unroll:  test ":x (a) {$a} def 1 2 x", 2
5E56   31 80 18               LD   SP,STACK   
5E59   CD DA 08               CALL   init   
5E5C   CD BE 08               CALL   execStr   
5E5F   3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (a) {$a} def 1 2 x"   
5E75                          ;*Macro unroll:  expect ":x (a) {$a} def 1 2 x",2
5E75   E1                     POP   HL   
5E76   E5                     PUSH   HL   
5E77   11 02 00               LD   DE,2   
5E7A   B7                     OR   A   
5E7B   ED 52                  SBC   HL,DE   
5E7D   7D                     LD   A,L   
5E7E   B4                     OR   H   
5E7F   28 60                  JR   Z,expectM_0_2594S43   
5E81   CD B7 08               CALL   printStr   
5E84   43 6F 64 65 3A 20 3A 78 20 28 61 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (a) {$a} def 1 2 x"   
5EA0   CD B7 08               CALL   printStr   
5EA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5EB2   21 02 00               LD   HL,2   
5EB5   CD 0B 08               CALL   prtdec   
5EB8   CD B7 08               CALL   printStr   
5EBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5EC8   E1                     POP   hl   
5EC9   E5                     PUSH   hl   
5ECA   CD 0B 08               CALL   prtdec   
5ECD   E1                     POP   hl   
5ECE   CD B7 08               CALL   printStr   
5ED1   20 28 23 00            .CSTR   " (#"   
5ED5   CD 53 08               CALL   prthex   
5ED8   CD B7 08               CALL   printStr   
5EDB   29 0D 0A 00            .CSTR   ")\r\n"   
5EDF   76                     HALT      
5EE0   00                     .CSTR      
5EE1                EXPECTM_0_2594S43:      
5EE1   E1                     POP   HL   
5EE2                          ;*Macro unroll:  test ":x (a:b) {$a} def 1 2 x", 2
5EE2   31 80 18               LD   SP,STACK   
5EE5   CD DA 08               CALL   init   
5EE8   CD BE 08               CALL   execStr   
5EEB   3A 78 20 28 61 3A 62 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (a:b) {$a} def 1 2 x"   
5F03                          ;*Macro unroll:  expect ":x (a:b) {$a} def 1 2 x",2
5F03   E1                     POP   HL   
5F04   E5                     PUSH   HL   
5F05   11 02 00               LD   DE,2   
5F08   B7                     OR   A   
5F09   ED 52                  SBC   HL,DE   
5F0B   7D                     LD   A,L   
5F0C   B4                     OR   H   
5F0D   28 62                  JR   Z,expectM_0_2595S43   
5F0F   CD B7 08               CALL   printStr   
5F12   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 24 61 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {$a} def 1 2 x"   
5F30   CD B7 08               CALL   printStr   
5F33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F42   21 02 00               LD   HL,2   
5F45   CD 0B 08               CALL   prtdec   
5F48   CD B7 08               CALL   printStr   
5F4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F58   E1                     POP   hl   
5F59   E5                     PUSH   hl   
5F5A   CD 0B 08               CALL   prtdec   
5F5D   E1                     POP   hl   
5F5E   CD B7 08               CALL   printStr   
5F61   20 28 23 00            .CSTR   " (#"   
5F65   CD 53 08               CALL   prthex   
5F68   CD B7 08               CALL   printStr   
5F6B   29 0D 0A 00            .CSTR   ")\r\n"   
5F6F   76                     HALT      
5F70   00                     .CSTR      
5F71                EXPECTM_0_2595S43:      
5F71   E1                     POP   HL   
5F72                          ;*Macro unroll:  test ":x (ab) {$b} def 1 2 x", 2
5F72   31 80 18               LD   SP,STACK   
5F75   CD DA 08               CALL   init   
5F78   CD BE 08               CALL   execStr   
5F7B   3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   ":x (ab) {$b} def 1 2 x"   
5F92                          ;*Macro unroll:  expect ":x (ab) {$b} def 1 2 x",2
5F92   E1                     POP   HL   
5F93   E5                     PUSH   HL   
5F94   11 02 00               LD   DE,2   
5F97   B7                     OR   A   
5F98   ED 52                  SBC   HL,DE   
5F9A   7D                     LD   A,L   
5F9B   B4                     OR   H   
5F9C   28 61                  JR   Z,expectM_0_2596S43   
5F9E   CD B7 08               CALL   printStr   
5FA1   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 7D 20 64 65 66 20 31 20 32 20 78 00 .CSTR   "Code: ",":x (ab) {$b} def 1 2 x"   
5FBE   CD B7 08               CALL   printStr   
5FC1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5FD0   21 02 00               LD   HL,2   
5FD3   CD 0B 08               CALL   prtdec   
5FD6   CD B7 08               CALL   printStr   
5FD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5FE6   E1                     POP   hl   
5FE7   E5                     PUSH   hl   
5FE8   CD 0B 08               CALL   prtdec   
5FEB   E1                     POP   hl   
5FEC   CD B7 08               CALL   printStr   
5FEF   20 28 23 00            .CSTR   " (#"   
5FF3   CD 53 08               CALL   prthex   
5FF6   CD B7 08               CALL   printStr   
5FF9   29 0D 0A 00            .CSTR   ")\r\n"   
5FFD   76                     HALT      
5FFE   00                     .CSTR      
5FFF                EXPECTM_0_2596S43:      
5FFF   E1                     POP   HL   
6000                          ;*Macro unroll:  test ":x (ab) {$b $a} def 10 15 x -", 5
6000   31 80 18               LD   SP,STACK   
6003   CD DA 08               CALL   init   
6006   CD BE 08               CALL   execStr   
6009   3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   ":x (ab) {$b $a} def 10 15 x -"   
6027                          ;*Macro unroll:  expect ":x (ab) {$b $a} def 10 15 x -",5
6027   E1                     POP   HL   
6028   E5                     PUSH   HL   
6029   11 05 00               LD   DE,5   
602C   B7                     OR   A   
602D   ED 52                  SBC   HL,DE   
602F   7D                     LD   A,L   
6030   B4                     OR   H   
6031   28 68                  JR   Z,expectM_0_2597S43   
6033   CD B7 08               CALL   printStr   
6036   43 6F 64 65 3A 20 3A 78 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 64 65 66 20 31 30 20 31 35 20 78 20 2D 00 .CSTR   "Code: ",":x (ab) {$b $a} def 10 15 x -"   
605A   CD B7 08               CALL   printStr   
605D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
606C   21 05 00               LD   HL,5   
606F   CD 0B 08               CALL   prtdec   
6072   CD B7 08               CALL   printStr   
6075   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6082   E1                     POP   hl   
6083   E5                     PUSH   hl   
6084   CD 0B 08               CALL   prtdec   
6087   E1                     POP   hl   
6088   CD B7 08               CALL   printStr   
608B   20 28 23 00            .CSTR   " (#"   
608F   CD 53 08               CALL   prthex   
6092   CD B7 08               CALL   printStr   
6095   29 0D 0A 00            .CSTR   ")\r\n"   
6099   76                     HALT      
609A   00                     .CSTR      
609B                EXPECTM_0_2597S43:      
609B   E1                     POP   HL   
609C                          ;*Macro unroll:  test ":x (a:b) {2} def 1 x", 2
609C   31 80 18               LD   SP,STACK   
609F   CD DA 08               CALL   init   
60A2   CD BE 08               CALL   execStr   
60A5   3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   ":x (a:b) {2} def 1 x"   
60BA                          ;*Macro unroll:  expect ":x (a:b) {2} def 1 x",2
60BA   E1                     POP   HL   
60BB   E5                     PUSH   HL   
60BC   11 02 00               LD   DE,2   
60BF   B7                     OR   A   
60C0   ED 52                  SBC   HL,DE   
60C2   7D                     LD   A,L   
60C3   B4                     OR   H   
60C4   28 5F                  JR   Z,expectM_0_2598S43   
60C6   CD B7 08               CALL   printStr   
60C9   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 32 7D 20 64 65 66 20 31 20 78 00 .CSTR   "Code: ",":x (a:b) {2} def 1 x"   
60E4   CD B7 08               CALL   printStr   
60E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
60F6   21 02 00               LD   HL,2   
60F9   CD 0B 08               CALL   prtdec   
60FC   CD B7 08               CALL   printStr   
60FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
610C   E1                     POP   hl   
610D   E5                     PUSH   hl   
610E   CD 0B 08               CALL   prtdec   
6111   E1                     POP   hl   
6112   CD B7 08               CALL   printStr   
6115   20 28 23 00            .CSTR   " (#"   
6119   CD 53 08               CALL   prthex   
611C   CD B7 08               CALL   printStr   
611F   29 0D 0A 00            .CSTR   ")\r\n"   
6123   76                     HALT      
6124   00                     .CSTR      
6125                EXPECTM_0_2598S43:      
6125   E1                     POP   HL   
6126                          ;*Macro unroll:  test ":x (:b) {100 $b set $b} def x", 100
6126   31 80 18               LD   SP,STACK   
6129   CD DA 08               CALL   init   
612C   CD BE 08               CALL   execStr   
612F   3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   ":x (:b) {100 $b set $b} def x"   
614D                          ;*Macro unroll:  expect ":x (:b) {100 $b set $b} def x",100
614D   E1                     POP   HL   
614E   E5                     PUSH   HL   
614F   11 64 00               LD   DE,100   
6152   B7                     OR   A   
6153   ED 52                  SBC   HL,DE   
6155   7D                     LD   A,L   
6156   B4                     OR   H   
6157   28 68                  JR   Z,expectM_0_2599S43   
6159   CD B7 08               CALL   printStr   
615C   43 6F 64 65 3A 20 3A 78 20 28 3A 62 29 20 7B 31 30 30 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 78 00 .CSTR   "Code: ",":x (:b) {100 $b set $b} def x"   
6180   CD B7 08               CALL   printStr   
6183   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6192   21 64 00               LD   HL,100   
6195   CD 0B 08               CALL   prtdec   
6198   CD B7 08               CALL   printStr   
619B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
61A8   E1                     POP   hl   
61A9   E5                     PUSH   hl   
61AA   CD 0B 08               CALL   prtdec   
61AD   E1                     POP   hl   
61AE   CD B7 08               CALL   printStr   
61B1   20 28 23 00            .CSTR   " (#"   
61B5   CD 53 08               CALL   prthex   
61B8   CD B7 08               CALL   printStr   
61BB   29 0D 0A 00            .CSTR   ")\r\n"   
61BF   76                     HALT      
61C0   00                     .CSTR      
61C1                EXPECTM_0_2599S43:      
61C1   E1                     POP   HL   
61C2                          ;*Macro unroll:  test ":x (a:b) {1 $b set $b} def 2 x", 1
61C2   31 80 18               LD   SP,STACK   
61C5   CD DA 08               CALL   init   
61C8   CD BE 08               CALL   execStr   
61CB   3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {1 $b set $b} def 2 x"   
61EA                          ;*Macro unroll:  expect ":x (a:b) {1 $b set $b} def 2 x",1
61EA   E1                     POP   HL   
61EB   E5                     PUSH   HL   
61EC   11 01 00               LD   DE,1   
61EF   B7                     OR   A   
61F0   ED 52                  SBC   HL,DE   
61F2   7D                     LD   A,L   
61F3   B4                     OR   H   
61F4   28 69                  JR   Z,expectM_0_2600S43   
61F6   CD B7 08               CALL   printStr   
61F9   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 31 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {1 $b set $b} def 2 x"   
621E   CD B7 08               CALL   printStr   
6221   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6230   21 01 00               LD   HL,1   
6233   CD 0B 08               CALL   prtdec   
6236   CD B7 08               CALL   printStr   
6239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6246   E1                     POP   hl   
6247   E5                     PUSH   hl   
6248   CD 0B 08               CALL   prtdec   
624B   E1                     POP   hl   
624C   CD B7 08               CALL   printStr   
624F   20 28 23 00            .CSTR   " (#"   
6253   CD 53 08               CALL   prthex   
6256   CD B7 08               CALL   printStr   
6259   29 0D 0A 00            .CSTR   ")\r\n"   
625D   76                     HALT      
625E   00                     .CSTR      
625F                EXPECTM_0_2600S43:      
625F   E1                     POP   HL   
6260                          ;*Macro unroll:  test ":x (a:b) {$a $b set $b} def 2 x", 2
6260   31 80 18               LD   SP,STACK   
6263   CD DA 08               CALL   init   
6266   CD BE 08               CALL   execStr   
6269   3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   ":x (a:b) {$a $b set $b} def 2 x"   
6289                          ;*Macro unroll:  expect ":x (a:b) {$a $b set $b} def 2 x",2
6289   E1                     POP   HL   
628A   E5                     PUSH   HL   
628B   11 02 00               LD   DE,2   
628E   B7                     OR   A   
628F   ED 52                  SBC   HL,DE   
6291   7D                     LD   A,L   
6292   B4                     OR   H   
6293   28 6A                  JR   Z,expectM_0_2601S43   
6295   CD B7 08               CALL   printStr   
6298   43 6F 64 65 3A 20 3A 78 20 28 61 3A 62 29 20 7B 24 61 20 24 62 20 73 65 74 20 24 62 7D 20 64 65 66 20 32 20 78 00 .CSTR   "Code: ",":x (a:b) {$a $b set $b} def 2 x"   
62BE   CD B7 08               CALL   printStr   
62C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
62D0   21 02 00               LD   HL,2   
62D3   CD 0B 08               CALL   prtdec   
62D6   CD B7 08               CALL   printStr   
62D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
62E6   E1                     POP   hl   
62E7   E5                     PUSH   hl   
62E8   CD 0B 08               CALL   prtdec   
62EB   E1                     POP   hl   
62EC   CD B7 08               CALL   printStr   
62EF   20 28 23 00            .CSTR   " (#"   
62F3   CD 53 08               CALL   prthex   
62F6   CD B7 08               CALL   printStr   
62F9   29 0D 0A 00            .CSTR   ")\r\n"   
62FD   76                     HALT      
62FE   00                     .CSTR      
62FF                EXPECTM_0_2601S43:      
62FF   E1                     POP   HL   
6300                             ; test "1 10 20 (ab) {0 [{$a} {$b}] switch} func call", 20
6300                             ; 
6300                             ; 
6300                             ; 
6300                             ; 
6300                             ; 
6300                             ; 
6300                             ; 
6300                             ; test ":x 1000 let x 10 set x", 10
6300                             ; test ":x [100] { @1 } closure x", 100
6300                             ; test ":x [100 200] { @2 } closure x", 200
6300                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
6300                             ; test ":x 'a' {$a} def 2 x", 2
6300                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
6300                             ; test ":x '' { 3 2 } def x + ", 5
6300                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
6300                             ; test "0 [{1}] switch", 1
6300                             ; test "1 [{1} {2} {3}] switch", 2
6300                             ; test "9 [{1} {5}] switch", 5
6300                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
6300                             ; test "bytes 'ABC' get", $41
6300                             ; test "bytes [1 2 3] get", 1
6300                             ; test ":xyz 123 const ; xyz", 123
6300                             ; test ":x 1 const ; x", 1
6300                             ; test ":x 'A' const x get", $41
6300                             ; test ":x [1] const x get", 1
6300                             ; test ":x [1 2 3] const x 2?", 3
6300                             ; test "2 (1 2 +) *", 6
6300                             ; test ":xyz 123 const ; xyz", 123
6300                             ; test ":xyz 123 let ; xyz get", 123
6300                             ; test "1 2 {$1 $2 +} call", 3
6300                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
6300                             ; test ":xyz {1} def :xyz addr call", 1
6300                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
6300                             ; test ":xyz {10} def :xyz addr call", 10
6300                             ; test "'hello' hash", $7f54
6300                             ; test ":hello", $7f54
6300                             ; test "{{{1} exec} exec} exec", 1
6300                             ; test "5 {{{$1} exec} exec} call", 5
6300                             ; test "5 {$1} call", 5
6300                             ; test "5 {{$1} exec} call", 5
6300                             ; test "2 1 {{$1} call} call", 2
6300                             ; test "2 1 {$2} call", 1
6300                             ; test "2 1 {$1} call", 2
6300                             ; test "2 1 {$2} call", 1
6300                             ; test "2 4 {$2} call", 4
6300                             ; test "{{1} call} call", 1
6300                             ; test "5 {-1 {$1} if} call", 5
6300                             ; test "0 {} loop", 0
6300                             ; test "1 {1-} loop", $1a00
6300                             ; test ":h {1} def :h addr call", 1
6300                             ; ; call enter
6300                             ; ;     .cstr "1 3",$22,"+"
6300                             ; ; expect "1 3 DUP +", 6
6300   CD B7 08               CALL   printStr   
6303   44 6F 6E 65 21 00      .CSTR   "Done!"   
6309   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 54 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               075F DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1740 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN Siena.asm
                    > USED AT LINE 1871 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 32 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1873 IN Siena.asm
DC1:                0011 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
DC2:                0012 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1877 IN Siena.asm
DC3:                0013 DEFINED AT LINE 25 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 59 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 64 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 112 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 215 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 217 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 220 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 223 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 226 IN Siena.asm
STRING_:            030C DEFINED AT LINE 229 IN Siena.asm
ARG_LIST_:          030F DEFINED AT LINE 232 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 235 IN Siena.asm
DOT1:               031E DEFINED AT LINE 243 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 248 IN Siena.asm
                    > USED AT LINE 245 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 257 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 263 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 266 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 268 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 270 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 272 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 274 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 276 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 278 IN Siena.asm
AND_:               0354 DEFINED AT LINE 280 IN Siena.asm
AND1:               035B DEFINED AT LINE 288 IN Siena.asm
                    > USED AT LINE 301 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
OR_:                035F DEFINED AT LINE 293 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 303 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 305 IN Siena.asm
                    > USED AT LINE 316 IN Siena.asm
INV_:               0371 DEFINED AT LINE 314 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 318 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 325 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 330 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 333 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 1279 IN Siena.asm
NOT_:               039A DEFINED AT LINE 350 IN Siena.asm
EQ_:                039F DEFINED AT LINE 354 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 356 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 360 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 365 IN Siena.asm
LT1:                03AA DEFINED AT LINE 368 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 376 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 387 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 395 IN Siena.asm
SHL:                03CF DEFINED AT LINE 405 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 411 IN Siena.asm
SHR:                03DF DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 432 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 438 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 447 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
NUM:                040E DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 467 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
                    > USED AT LINE 474 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
NUM3:               043B DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 499 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
STRING:             045B DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
ARG_LIST:           047F DEFINED AT LINE 558 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
ARG_LIST1:          0489 DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
ARG_LIST2:          0495 DEFINED AT LINE 573 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
ARG_LIST3:          049D DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
ARG_LIST4:          04A0 DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
ARG_LIST5:          04A5 DEFINED AT LINE 589 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 602 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 614 IN Siena.asm
                    > USED AT LINE 606 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 618 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 622 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
                    > USED AT LINE 658 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 650 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 656 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 659 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 663 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
BLOCKEND1:          052F DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
BLOCKEND2:          053B DEFINED AT LINE 693 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
PROP:               0554 DEFINED AT LINE 768 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOLET:              0556 DEFINED AT LINE 787 IN Siena.asm
DOLET2:             055A DEFINED AT LINE 790 IN Siena.asm
DOLET3:             055E DEFINED AT LINE 795 IN Siena.asm
INDEX:              0568 DEFINED AT LINE 803 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
INDEX1:             0571 DEFINED AT LINE 810 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
INDEX2:             057D DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
SET:                0580 DEFINED AT LINE 824 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
SET1:               058E DEFINED AT LINE 834 IN Siena.asm
                    > USED AT LINE 831 IN Siena.asm
IF:                 0590 DEFINED AT LINE 839 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
IFTE:               0595 DEFINED AT LINE 845 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
IFTE1:              0596 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
IFTE2:              059F DEFINED AT LINE 856 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
SWITCH:             05A3 DEFINED AT LINE 877 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
LOOP:               05AD DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
WORDS:              05AF DEFINED AT LINE 940 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
BYTES:              05B4 DEFINED AT LINE 943 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
BYTES1:             05B7 DEFINED AT LINE 945 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
ARRAY:              05BC DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
ARRAYEND:           05D8 DEFINED AT LINE 963 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
ARRAYEND1:          05F9 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
ARRAYEND2:          0609 DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
ARRAYEND3:          061C DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
HASH:               0637 DEFINED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
DEF:                0642 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
DEF1:               0649 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1045 IN Siena.asm
LET:                0652 DEFINED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
LET1:               0676 DEFINED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
LET2:               067E DEFINED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
ADDR:               0681 DEFINED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
ADDR1:              068D DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
SYMBOL:             0698 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
SYMBOL0:            06A0 DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
SYMBOL1:            06A2 DEFINED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
SYMBOL2:            06B2 DEFINED AT LINE 1128 IN Siena.asm
                    > USED AT LINE 1121 IN Siena.asm
IDENT:              06C0 DEFINED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
IDENT0:             06C7 DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
IDENT1:             06C9 DEFINED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
IDENT2:             06D9 DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
IDENT3:             06ED DEFINED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
FRAC:               06EE DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
SQRT1:              06F4 DEFINED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
ABS1:               0701 DEFINED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
MOD:                070E DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
EQUALS:             071A DEFINED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LESSTHANEQ:         0722 DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 372 IN Siena.asm
LESSTHAN:           0727 DEFINED AT LINE 1228 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
LESSTHAN1:          072C DEFINED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
TRUE1:              072F DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
FALSE1:             0735 DEFINED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
INPUT:              073B DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
OUTPUT:             0746 DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
KEY:                074F DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
NEG:                0758 DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
FILTER:             075F DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
MAP:                075F DEFINED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
HASHSTR:            0761 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
HASHSTR1:           0768 DEFINED AT LINE 1296 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
HASHSTR2:           076D DEFINED AT LINE 1301 IN Siena.asm
DEFINEENTRY:        077E DEFINED AT LINE 1320 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
DEFINEENTRY0:       0783 DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
DEFINEENTRY1:       0792 DEFINED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
DEFINEENTRY2:       0798 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
DEFINEENTRY3:       079A DEFINED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
LOOKUPENTRY:        07A4 DEFINED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
LOOKUPENTRY0:       07A9 DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
LOOKUPENTRY1:       07B8 DEFINED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
LOOKUPENTRY2:       07BE DEFINED AT LINE 1381 IN Siena.asm
LOOKUPENTRY3:       07C0 DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
DIVIDE:             07C8 DEFINED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
DIVIDE1:            07CD DEFINED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
DIVIDE2:            07DA DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1404 IN Siena.asm
DIVIDE3:            07DB DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
SQUAREROOT:         07E1 DEFINED AT LINE 1419 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
SQUAREROOT1:        07E6 DEFINED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
SQUAREROOT4:        0801 DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
SQUAREROOT5:        0808 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
PRTDEC:             080B DEFINED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            081A DEFINED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
PRTDEC1:            083C DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
PRTDEC2:            083E DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
PRTDEC3:            084E DEFINED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
PRTDEC4:            084F DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
PRTHEX:             0853 DEFINED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            085E DEFINED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
PRTHEX3:            0867 DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
PRTSTR0:            0872 DEFINED AT LINE 1523 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
PRTSTR:             0876 DEFINED AT LINE 1526 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
NESTING:            087B DEFINED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 1795 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
NESTING1A:          0886 DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
NESTING1:           0889 DEFINED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
NESTING2:           0898 DEFINED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
NESTING3:           089A DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
NESTING4:           08A5 DEFINED AT LINE 1571 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
PROMPT:             08A7 DEFINED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
CRLF:               08B0 DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
PRINTSTR:           08B7 DEFINED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 176
EXECSTR:            08BE DEFINED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
BRANCH:             08BE DEFINED AT LINE 1606 IN Siena.asm
DEFINE:             08C2 DEFINED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1754 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
INIT:               08DA DEFINED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              08F4 DEFINED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
START:              0A36 DEFINED AT LINE 1772 IN Siena.asm
INTERPRET:          0A4C DEFINED AT LINE 1778 IN Siena.asm
                    > USED AT LINE 1879 IN Siena.asm
INTERPRET2:         0A56 DEFINED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1828 IN Siena.asm
INTERPRET3:         0A5E DEFINED AT LINE 1791 IN Siena.asm
                    > USED AT LINE 1800 IN Siena.asm
INTERPRET4:         0A64 DEFINED AT LINE 1797 IN Siena.asm
                    > USED AT LINE 1789 IN Siena.asm
WAITCHAR:           0A69 DEFINED AT LINE 1803 IN Siena.asm
                    > USED AT LINE 1837 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
MACRO:              0A78 DEFINED AT LINE 1813 IN Siena.asm
WAITCHAR1:          0A7A DEFINED AT LINE 1830 IN Siena.asm
                    > USED AT LINE 1806 IN Siena.asm
WAITCHAR3:          0A88 DEFINED AT LINE 1839 IN Siena.asm
                    > USED AT LINE 1811 IN Siena.asm
WAITCHAR4:          0A9B DEFINED AT LINE 1853 IN Siena.asm
                    > USED AT LINE 1809 IN Siena.asm
NEXT:               0AA3 DEFINED AT LINE 1859 IN Siena.asm
                    > USED AT LINE 71 IN Siena.asm
                    > USED AT LINE 1863 IN Siena.asm
NEXT1:              0AB2 DEFINED AT LINE 1870 IN Siena.asm
                    > USED AT LINE 1864 IN Siena.asm
ESCAPE_:            0AC5 DEFINED AT LINE 1881 IN Siena.asm
                    > USED AT LINE 1872 IN Siena.asm
EXIT_:              0AC6 DEFINED AT LINE 1884 IN Siena.asm
                    > USED AT LINE 1874 IN Siena.asm
LITERAL_:           0AC9 DEFINED AT LINE 1888 IN Siena.asm
                    > USED AT LINE 1876 IN Siena.asm
ENTER_:             0AD2 DEFINED AT LINE 1898 IN Siena.asm
                    > USED AT LINE 1878 IN Siena.asm
CALL:               0AD9 DEFINED AT LINE 1908 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
EXEC:               0ADB DEFINED AT LINE 1915 IN Siena.asm
                    > USED AT LINE 858 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
EXEC1:              0AE2 DEFINED AT LINE 1921 IN Siena.asm
                    > USED AT LINE 1919 IN Siena.asm
EXEC2:              0B02 DEFINED AT LINE 1938 IN Siena.asm
                    > USED AT LINE 1930 IN Siena.asm
DOCALL:             0B09 DEFINED AT LINE 1947 IN Siena.asm
DOCALL1:            0B1F DEFINED AT LINE 1965 IN Siena.asm
                    > USED AT LINE 1959 IN Siena.asm
DOCALL2:            0B25 DEFINED AT LINE 1971 IN Siena.asm
                    > USED AT LINE 1975 IN Siena.asm
DOCALL3:            0B2A DEFINED AT LINE 1976 IN Siena.asm
                    > USED AT LINE 1970 IN Siena.asm
DOCALL4:            0B36 DEFINED AT LINE 1987 IN Siena.asm
                    > USED AT LINE 1937 IN Siena.asm
                    > USED AT LINE 1942 IN Siena.asm
                    > USED AT LINE 1964 IN Siena.asm
DOCALL5:            0B42 DEFINED AT LINE 1994 IN Siena.asm
                    > USED AT LINE 1951 IN Siena.asm
FUNC:               0B44 DEFINED AT LINE 1998 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
FUNC1:              0B5C DEFINED AT LINE 2019 IN Siena.asm
                    > USED AT LINE 2043 IN Siena.asm
                    > USED AT LINE 2046 IN Siena.asm
                    > USED AT LINE 2051 IN Siena.asm
                    > USED AT LINE 2055 IN Siena.asm
FUNC2:              0B82 DEFINED AT LINE 2044 IN Siena.asm
                    > USED AT LINE 2033 IN Siena.asm
                    > USED AT LINE 2035 IN Siena.asm
                    > USED AT LINE 2037 IN Siena.asm
FUNC3:              0B85 DEFINED AT LINE 2047 IN Siena.asm
                    > USED AT LINE 2040 IN Siena.asm
                    > USED AT LINE 2042 IN Siena.asm
FUNC4:              0B8D DEFINED AT LINE 2053 IN Siena.asm
                    > USED AT LINE 2026 IN Siena.asm
                    > USED AT LINE 2028 IN Siena.asm
                    > USED AT LINE 2030 IN Siena.asm
FUNC4A:             0B90 DEFINED AT LINE 2056 IN Siena.asm
                    > USED AT LINE 2052 IN Siena.asm
ARG:                0B9C DEFINED AT LINE 2067 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
ARG0:               0BBA DEFINED AT LINE 2088 IN Siena.asm
                    > USED AT LINE 2094 IN Siena.asm
ARG0A:              0BC3 DEFINED AT LINE 2096 IN Siena.asm
                    > USED AT LINE 2073 IN Siena.asm
                    > USED AT LINE 2080 IN Siena.asm
ARG1:               0BC8 DEFINED AT LINE 2099 IN Siena.asm
                    > USED AT LINE 2092 IN Siena.asm
ARG1A:              0BD0 DEFINED AT LINE 2106 IN Siena.asm
                    > USED AT LINE 2098 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 1923 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1634 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 382 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 806 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 982 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1782 IN Siena.asm
                    > USED AT LINE 1854 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 789 IN Siena.asm
                    > USED AT LINE 812 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
                    > USED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 2102 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1999 IN Siena.asm
                    > USED AT LINE 2059 IN Siena.asm
                    > USED AT LINE 2061 IN Siena.asm
TIB:                1900 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1788 IN Siena.asm
                    > USED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1164 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1640 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 41 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 72 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2529S43:  4063 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2530S43:  40C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2531S43:  412B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2532S43:  418F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2533S43:  41F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2534S43:  425D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2535S43:  42C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2536S43:  4329 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2537S43:  4391 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2538S43:  43FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2539S43:  4463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2540S43:  44CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2541S43:  4539 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2542S43:  45A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2543S43:  4613 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2544S43:  4683 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2545S43:  46EF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2546S43:  4763 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2547S43:  47D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2548S43:  4845 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2549S43:  48B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2550S43:  491D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2551S43:  4989 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2552S43:  49F5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2553S43:  4A69 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2554S43:  4AD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2555S43:  4B4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2556S43:  4BBB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2557S43:  4C35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2558S43:  4CA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2559S43:  4D0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2560S43:  4D79 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2561S43:  4DE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2562S43:  4E51 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2563S43:  4EBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2564S43:  4F29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2565S43:  4F95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2566S43:  5001 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2567S43:  506D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2568S43:  50DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2569S43:  5149 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2570S43:  51B7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2571S43:  5227 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2572S43:  5299 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2573S43:  530D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2574S43:  537F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2575S43:  540B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2576S43:  5487 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2577S43:  552D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2578S43:  55AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2579S43:  5643 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2580S43:  56D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2581S43:  5743 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2582S43:  57C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2583S43:  5851 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2584S43:  58DD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2585S43:  596B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2586S43:  59FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2587S43:  5A99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2588S43:  5B35 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2589S43:  5BD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2590S43:  5C8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2591S43:  5D43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2592S43:  5DC9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2593S43:  5E55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2594S43:  5EE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2595S43:  5F71 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2596S43:  5FFF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2597S43:  609B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2598S43:  6125 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2599S43:  61C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2600S43:  625F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2601S43:  62FF DEFINED AT LINE 34
                    > USED AT LINE 10
