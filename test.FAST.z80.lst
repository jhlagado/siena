0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 66 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   DA                     DB   lsb(nop_)   ; SP
0221   A7                     DB   lsb(not_)   ; !
0222   DA                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   DA                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   DA                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   C2                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   DA                     DB   lsb(nop_)   ; ;
023C   B5                     DB   lsb(lt_)   ; <
023D   AC                     DB   lsb(eq_)   ; =
023E   B1                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   D1                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   DA                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1B 04               JP   num   
0303                HEXNUM_:      
0303   C3 4B 04               JP   hexnum   
0306                ARG_:        
0306   C3 1F 05               JP   arg   
0309                PROP_:       
0309   C3 3D 05               JP   prop   
030C                STRING_:      
030C   C3 68 04               JP   string   
030F                PAREN_:      
030F   C3 96 04               JP   paren   
0312                PARENEND_:      
0312   C3 98 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD E3 07               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 06 08               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 9B 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 40 05               JP   get1   
034C                BLOCK_:      
034C   C3 9A 04               JP   block   
034F                BLOCKEND_:      
034F   C3 E8 04               JP   blockend   
0352                CHAR_:       
0352   C3 81 04               JP   char   
0355                ARRAY_:      
0355   C3 83 05               JP   array   
0358                ARRAYEND_:      
0358   C3 85 05               JP   arrayEnd   
035B                IDENT_:      
035B   C3 55 06               JP   ident   
035E                SYMBOL_:      
035E   C3 2E 06               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD E3 07               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 FF 03               JP   mul   
0393                SUB_:        ; negative sign or subtract
0393   03                     INC   bc   ; check if sign of a number
0394   0A                     LD   a,(bc)   
0395   0B                     DEC   bc   
0396   FE 30                  CP   "0"   
0398   38 05                  JR   c,sub1   
039A   FE 3A                  CP   "9"+1   
039C   DA 00 03               JP   c,num_   
039F                SUB1:        ; Subtract the value 2nd on stack from top of stack
039F   D1                     POP   de   
03A0   E1                     POP   hl   ; Entry point for INVert
03A1                SUB2:        
03A1   B7                     OR   a   ; Entry point for NEGate
03A2   ED 52                  SBC   hl,de   
03A4   E5                     PUSH   hl   
03A5   DD E9                  JP   (ix)   
03A7                NOT_:        ; logical invert, any non zero value
03A7   21 00 00               LD   hl,0   ; is considered true
03AA   18 01                  JR   eq1   
03AC                EQ_:         
03AC   E1                     POP   hl   
03AD                EQ1:         
03AD   D1                     POP   de   
03AE   C3 AE 06               JP   equals   
03B1                GT_:         
03B1   D1                     POP   de   
03B2   E1                     POP   hl   
03B3   18 02                  JR   lt1   
03B5                LT_:         
03B5   E1                     POP   hl   
03B6   D1                     POP   de   
03B7                LT1:         
03B7   03                     INC   bc   
03B8   0A                     LD   a,(bc)   
03B9   FE 3D                  CP   "="   
03BB   CA B6 06               JP   z,lessthaneq   
03BE   0B                     DEC   bc   
03BF   C3 BB 06               JP   lessthan   
03C2                DIV_:        
03C2   D1                     POP   de   ; get first value
03C3   E1                     POP   hl   ; get 2nd value
03C4   C5                     PUSH   bc   ; preserve the IP
03C5   44 4D                  LD   bc,hl   
03C7   CD 58 07               CALL   divide   
03CA   22 98 18               LD   (vFrac),hl   
03CD   C1                     POP   bc   
03CE   D5                     PUSH   de   ; push result
03CF   DD E9                  JP   (ix)   
03D1                COMMENT_:      
03D1   03                     INC   bc   ; point to next char
03D2   0A                     LD   a,(bc)   
03D3   FE 20                  CP   " "   ; terminate on any char less than SP
03D5   30 FA                  JR   nc,comment_   
03D7   0B                     DEC   bc   
03D8   DD E9                  JP   (ix)   
03DA                NOP_:        
03DA   DD E9                  JP   (ix)   
03DC                             ;*******************************************************************
03DC                             ; word operators
03DC                             ;*******************************************************************
03DC                             ; shl
03DC                             ; value count -- value2          shift left count places
03DC                SHL:         
03DC   50 59                  LD   de,bc   ; save IP
03DE   C1                     POP   bc   ; bc = count
03DF   41                     LD   b,c   ; b = loop counter
03E0   E1                     POP   hl   
03E1   04                     INC   b   ; test for counter=0 case
03E2   18 01                  JR   shl2   
03E4                SHL1:        
03E4   29                     ADD   hl,hl   ; left shift hl
03E5                SHL2:        
03E5   10 FD                  DJNZ   shl1   
03E7   E5                     PUSH   hl   
03E8   42 4B                  LD   bc,de   ; restore IP
03EA   DD E9                  JP   (ix)   
03EC                             ; shr
03EC                             ; value count -- value2          shift left count places
03EC                SHR:         
03EC   50 59                  LD   de,bc   ; save IP
03EE   C1                     POP   bc   ; bc = count
03EF   41                     LD   b,c   ; b = loop counter
03F0   E1                     POP   hl   
03F1   04                     INC   b   ; test for counter=0 case
03F2   18 04                  JR   shr2   
03F4                SHR1:        
03F4   CB 3C                  SRL   h   ; right shift hl
03F6   CB 1D                  RR   l   
03F8                SHR2:        
03F8   10 FA                  DJNZ   shr1   
03FA   E5                     PUSH   hl   
03FB   42 4B                  LD   bc,de   ; restore IP
03FD   DD E9                  JP   (ix)   
03FF                MUL:         ;=19
03FF   D1                     POP   de   ; get first value
0400   E1                     POP   hl   
0401   C5                     PUSH   bc   ; Preserve the IP
0402   44                     LD   b,h   ; bc = 2nd value
0403   4D                     LD   c,l   
0404   21 00 00               LD   hl,0   
0407   3E 10                  LD   a,16   
0409                MUL2:        
0409   29                     ADD   hl,hl   
040A   CB 13                  RL   e   
040C   CB 12                  RL   d   
040E   30 04                  JR   nc,$+6   
0410   09                     ADD   hl,bc   
0411   30 01                  JR   nc,$+3   
0413   13                     INC   de   
0414   3D                     DEC   a   
0415   20 F2                  JR   nz,mul2   
0417   C1                     POP   bc   ; Restore the IP
0418   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0419   DD E9                  JP   (ix)   
041B                NUM:         
041B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041E   0A                     LD   a,(bc)   ; Get numeral or -
041F   FE 2D                  CP   "-"   
0421   20 01                  JR   nz,num0   
0423   03                     INC   bc   ; move to next char, no flags affected
0424                NUM0:        
0424   08                     EX   af,af'   ; save zero flag = 0 for later
0425                NUM1:        
0425   0A                     LD   a,(bc)   ; read digit
0426   D6 30                  SUB   "0"   ; less than 0?
0428   38 13                  JR   c,num2   ; not a digit, exit loop
042A   FE 0A                  CP   10   ; greater that 9?
042C   30 0F                  JR   nc,num2   ; not a digit, exit loop
042E   03                     INC   bc   ; inc IP
042F   54 5D                  LD   de,hl   ; multiply hl * 10
0431   29                     ADD   hl,hl   
0432   29                     ADD   hl,hl   
0433   19                     ADD   hl,de   
0434   29                     ADD   hl,hl   
0435   85                     ADD   a,l   ; add digit in a to hl
0436   6F                     LD   l,a   
0437   3E 00                  LD   a,0   
0439   8C                     ADC   a,h   
043A   67                     LD   h,a   
043B   18 E8                  JR   num1   
043D                NUM2:        
043D   0B                     DEC   bc   
043E   08                     EX   af,af'   ; restore zero flag
043F   20 07                  JR   nz,num3   
0441   EB                     EX   de,hl   ; negate the value of hl
0442   21 00 00               LD   hl,0   
0445   B7                     OR   a   ; jump to sub2
0446   ED 52                  SBC   hl,de   
0448                NUM3:        
0448   E5                     PUSH   hl   ; Put the number on the stack
0449   DD E9                  JP   (ix)   ; and process the next character
044B                HEXNUM:      ; 
044B   21 00 00               LD   hl,0   ; Clear hl to accept the number
044E                HEXNUM1:      
044E   03                     INC   bc   
044F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0450   CB 77                  BIT   6,a   ; is it uppercase alpha?
0452   28 02                  JR   z,hexnum2   ; no a decimal
0454   D6 07                  SUB   7   ; sub 7  to make $a - $F
0456                HEXNUM2:      
0456   D6 30                  SUB   $30   ; Form decimal digit
0458   DA 3D 04               JP   c,num2   
045B   FE 10                  CP   $0F+1   
045D   D2 3D 04               JP   nc,num2   
0460   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0461   29                     ADD   hl,hl   ; 4X
0462   29                     ADD   hl,hl   ; 8X
0463   29                     ADD   hl,hl   ; 16X
0464   85                     ADD   a,l   ; add into bottom of hl
0465   6F                     LD   l,a   ; 
0466   18 E6                  JR   hexnum1   
0468                             ; 
0468                STRING:      
0468   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
046C   D5                     PUSH   de   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   12                     LD   (de),a   
0471   13                     INC   de   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   12                     LD   (de),a   
047A   13                     INC   de   
047B   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
047F   DD E9                  JP   (ix)   
0481                CHAR:        
0481   21 00 00               LD   hl,0   ; if `` is empty
0484                CHAR1:       
0484   03                     INC   bc   ; point to next char
0485   0A                     LD   a,(bc)   
0486   FE 60                  CP   "`"   ; ` is the string terminator
0488   28 09                  JR   z,char3   
048A   FE 5C                  CP   $5c   ; \ is the escape
048C   20 02                  JR   nz,char2   
048E   03                     INC   bc   
048F   0A                     LD   a,(bc)   
0490                CHAR2:       
0490   6F                     LD   l,a   
0491   18 F1                  JR   char1   
0493                CHAR3:       
0493   E5                     PUSH   hl   
0494   DD E9                  JP   (ix)   
0496                PAREN:       
0496   DD E9                  JP   (ix)   
0498                             ;     ld ix,paren2
0498                             ;     jr block
0498                             ; paren2:
0498                             ;     ld ix,next
0498                             ;     jp exec
0498                PARENEND:      
0498   DD E9                  JP   (ix)   
049A                             ;     pop hl                      ; hl = last result
049A                             ;     pop de
049A                             ;     pop bc
049A                             ;     pop bc
049A                             ;     push hl
049A                             ;     ld iyh,d
049A                             ;     ld iyl,e
049A                             ;     ld ix,next
049A                             ;     jp (ix)
049A                BLOCK:       
049A   03                     INC   bc   
049B   C5                     PUSH   bc   ; return first opcode of block
049C   16 01                  LD   d,1   ; nesting: count first parenthesis
049E                BLOCK1:      ; Skip to end of definition
049E   0A                     LD   a,(bc)   ; Get the next character
049F   03                     INC   bc   ; Point to next character
04A0   FE 21                  CP   " " + 1   ; ignore whitespace
04A2   38 FA                  JR   c,block1   
04A4   FE 29                  CP   ")"   
04A6   28 25                  JR   z,block4   
04A8   FE 7D                  CP   "}"   
04AA   28 21                  JR   z,block4   
04AC   FE 5D                  CP   "]"   
04AE   28 1D                  JR   z,block4   
04B0   FE 28                  CP   "("   
04B2   28 13                  JR   z,block3   
04B4   FE 7B                  CP   "{"   
04B6   28 0F                  JR   z,block3   
04B8   FE 5B                  CP   "["   
04BA   28 0B                  JR   z,block3   
04BC   FE 27                  CP   "'"   
04BE   28 07                  JR   z,block3   
04C0   FE 60                  CP   "`"   
04C2   20 DA                  JR   nz,block1   
04C4                BLOCK2:      
04C4   14                     INC   d   
04C5   18 D7                  JR   block1   
04C7                BLOCK3:      
04C7   3E 80                  LD   a,$80   
04C9   AA                     XOR   d   
04CA   47                     LD   b,a   
04CB   18 D1                  JR   block1   
04CD                BLOCK4:      
04CD   15                     DEC   d   
04CE   20 CE                  JR   nz,block1   ; get the next element
04D0   0B                     DEC   bc   ; balanced, exit
04D1   DD E9                  JP   (ix)   
04D3                XXBLOCKEND:      
04D3   E1                     POP   hl   ; hl = last result
04D4   FD 54                  LD   d,iyh   ; de = BP
04D6   FD 5D                  LD   e,iyl   
04D8   EB                     EX   de,hl   ; hl = BP, de = result
04D9   F9                     LD   sp,hl   ; sp = BP
04DA   E1                     POP   hl   ; hl = old BP
04DB   C1                     POP   bc   ; pop SCP (discard)
04DC   C1                     POP   bc   ; pop array (discard)
04DD   C1                     POP   bc   ; bc = IP
04DE   F9                     LD   sp,hl   ; sp = old BP
04DF   FD 21 00 00            LD   iy,0   ; iy = sp
04E3   FD 39                  ADD   iy,sp   
04E5   D5                     PUSH   de   ; push result
04E6   DD E9                  JP   (ix)   
04E8                BLOCKEND:      
04E8   D9                     EXX      
04E9   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
04EC   FD 56 01               LD   d,(iy+1)   
04EF   FD 4E 06               LD   c,(iy+6)   ; bc = IP
04F2   FD 46 07               LD   b,(iy+7)   
04F5   D9                     EXX      
04F6   21 00 00               LD   hl,0   ; hl = sp
04F9   39                     ADD   hl,sp   
04FA   FD 54                  LD   d,iyh   ; de = BP
04FC   FD 5D                  LD   e,iyl   
04FE   42 4B                  LD   bc,de   ; bc = BP
0500   EB                     EX   de,hl   ; hl = BP, de = sp
0501   B7                     OR   a   
0502   ED 52                  SBC   hl,de   ; hl = BP - sp = count
0504   50 59                  LD   de,bc   ; de = BP
0506   44 4D                  LD   bc,hl   ; bc = count
0508   EB                     EX   de,hl   ; hl = BP-1
0509   2B                     DEC   hl   
050A   FD 5E 02               LD   e,(iy+2)   ; de = SCP-1
050D   FD 56 03               LD   d,(iy+3)   
0510   1B                     DEC   de   
0511   ED B8                  LDDR      
0513   13                     INC   de   ; sp = new sp
0514   EB                     EX   de,hl   
0515   F9                     LD   sp,hl   
0516   D9                     EXX      
0517   D5                     PUSH   de   ; oldBP
0518   C5                     PUSH   bc   ; IP
0519   D9                     EXX      
051A   C1                     POP   bc   
051B   FD E1                  POP   IY   
051D   DD E9                  JP   (ix)   
051F                             ; $1..9
051F                             ; returns value of arg
051F                ARG:         
051F   03                     INC   bc   ; get next char
0520   0A                     LD   a,(bc)   
0521   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0523   E6 0F                  AND   $0F   ; mask
0525   87                     ADD   a,a   ; double
0526   6F                     LD   l,a   ; hl = offset into args
0527   26 00                  LD   h,0   
0529   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
052C   FD 56 03               LD   d,(iy+3)   
052F   EB                     EX   de,hl   ; hl = SCP - offset
0530   B7                     OR   a   
0531   ED 52                  SBC   hl,de   
0533   2B                     DEC   hl   ; de = arg
0534   56                     LD   d,(hl)   
0535   2B                     DEC   hl   
0536   5E                     LD   e,(hl)   
0537   D5                     PUSH   de   ; push arg
0538   22 9E 18               LD   (vSetter),hl   ; store address in setter
053B   DD E9                  JP   (ix)   
053D                             ; @1..9
053D                             ; returns address of prop
053D                PROP:        
053D                             ;     inc bc                      ; get next char
053D                             ;     ld a,(bc)
053D                             ;     sub "1"                     ; treat as a digit, 1 based index
053D                             ;     and $0F                     ; mask
053D                             ;     add a,a                     ; double
053D                             ;     ld l,a                      ; hl = offset into args
053D                             ;     ld h,0
053D                             ;     ld e,(iy+6)                 ; de = closure array
053D                             ;     ld d,(iy+7)
053D                             ;     add hl,de                   ; find address of prop in array
053D                             ;     ld (vSetter),hl             ; store address in setter
053D                             ;     ld e,(hl)
053D                             ;     inc hl
053D                             ;     ld d,(hl)
053D                             ;     push de                     ; push prop value
053D   DD E9                  JP   (ix)   
053F                             ; addr -- value
053F                DOLET:       
053F                GET:         
053F   E1                     POP   hl   
0540                GET1:        
0540   22 9E 18               LD   (vSetter),hl   ; store address in setter
0543   16 00                  LD   d,0   
0545   5E                     LD   e,(hl)   
0546   3A 9A 18               LD   a,(vDataWidth)   
0549   3D                     DEC   a   
054A   28 02                  JR   z,get2   
054C   23                     INC   hl   
054D   56                     LD   d,(hl)   
054E                GET2:        
054E   D5                     PUSH   de   
054F   DD E9                  JP   (ix)   
0551                             ; newvalue -- oldvalue
0551                SET:         
0551   D1                     POP   de   ; new value
0552   E1                     POP   hl   ; discard last accessed value
0553   2A 9E 18               LD   hl,(vSetter)   
0556   7E                     LD   a,(hl)   ; save lsb of old value
0557   73                     LD   (hl),e   
0558   5F                     LD   e,a   
0559   3A 9A 18               LD   a,(vDataWidth)   
055C   3D                     DEC   a   
055D   28 04                  JR   z,set1   
055F   23                     INC   hl   
0560   7E                     LD   a,(hl)   ; save msb of old value
0561   72                     LD   (hl),d   
0562   57                     LD   d,a   
0563                SET1:        
0563   D5                     PUSH   de   ; return old value
0564   DD E9                  JP   (ix)   
0566                             ; ifte
0566                             ; condition then -- value
0566                IF:          
0566   DD E9                  JP   (ix)   
0568                             ; ld de,0                      ; NUL pointer for else
0568                             ; jr ifte1
0568                             ; ifte
0568                             ; condition then else -- value
0568                IFTE:        
0568   DD E9                  JP   (ix)   
056A                             ;     pop de                      ; de = else
056A                             ; ifte1:
056A                             ;     pop hl                      ; hl = then
056A                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
056A                             ;     inc hl                      ; check for true
056A                             ;     ld a,h
056A                             ;     or l
056A                             ;     pop hl                      ; hl = then
056A                             ;     jr z,ifte2
056A                             ;     ex de,hl                    ; condition = false, hl = else
056A                             ; ifte2:
056A                             ;     ld a,h                      ; check if hl is NUL
056A                             ;     or l
056A                             ;     jr z,ifte3
056A                             ;     push bc                     ; push IP
056A                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
056A                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
056A                             ;     push de                     ; push SCP
056A                             ;     push iy                     ; push BP
056A                             ;     ld iy,0                     ; iy = sp
056A                             ;     add iy,sp
056A                             ;     ld bc,hl                    ; IP = then
056A                             ;     dec bc
056A                             ; ifte3:
056A                             ;     jp (ix)
056A                             ; switch
056A                             ; index array -- value
056A                SWITCH:      
056A   D1                     POP   de   ; de = array
056B   E1                     POP   hl   ; hl = index
056C   29                     ADD   hl,hl   ; indec *= 2
056D   19                     ADD   hl,de   ; add array[0]
056E   4E                     LD   c,(hl)   ; bc = case
056F   23                     INC   hl   
0570   46                     LD   b,(hl)   
0571   0B                     DEC   bc   
0572   DD E9                  JP   (ix)   
0574                             ; c b --
0574                             ; loops until c = 0
0574                LOOP:        
0574   DD E9                  JP   (ix)   
0576                             ;     pop de                      ; de = block                    c
0576                             ;     pop hl                      ; hl = condition
0576                             ;     push de
0576                             ;     push bc                     ; push IP
0576                             ;     ld bc,de                    ; bc = block
0576                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0576                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0576                             ;     push de                     ; push SCP
0576                             ;     push iy                     ; push BP
0576                             ;     ld iy,0                     ; iy = sp
0576                             ;     add iy,sp
0576                             ; loop1:
0576                             ;     ld a,l                      ; bc = block, hl = condition = zero?
0576                             ;     or h
0576                             ;     jr z,loop3
0576                             ;     ld de,loop2-1               ; IP return address
0576                             ;     push de
0576                             ;     ld e,(iy+2)                 ; push parent SCP
0576                             ;     ld d,(iy+3)
0576                             ;     push de                     ;
0576                             ;     push iy                     ; push BP
0576                             ;     ld iy,0                     ; iy = sp
0576                             ;     add iy,sp
0576                             ;     push hl                     ; push condition
0576                             ;     dec bc
0576                             ;     jp (ix)
0576                             ; loop2:
0576                             ;     db ESC                      ; escape from interpreter
0576                             ;     ld c,(iy+6)                 ; bc = block
0576                             ;     ld b,(iy+7)
0576                             ;     pop hl                      ; hl = condition
0576                             ;     jr loop1
0576                             ; loop3:
0576                             ;     ld d,iyh                    ; de = BP
0576                             ;     ld e,iyl
0576                             ;     ex de,hl                    ; hl = BP, de = result
0576                             ;     ld sp,hl                    ; sp = BP
0576                             ;     pop hl                      ; hl = old BP
0576                             ;     pop bc                      ; pop SCP (discard)
0576                             ;     pop bc                      ; bc = IP
0576                             ;     ld sp,hl                    ; sp = old BP
0576                             ;     ld iy,0                     ; iy = sp
0576                             ;     add iy,sp
0576                             ;     ld ix,next                  ; needed?
0576                             ;     jp (ix)
0576                WORDS:       
0576   21 02 00               LD   hl,2   
0579   18 03                  JR   bytes1   
057B                BYTES:       
057B   21 01 00               LD   hl,1   
057E                BYTES1:      
057E   22 9A 18               LD   (vDataWidth),hl   
0581   DD E9                  JP   (ix)   
0583                ARRAY:       
0583   DD E9                  JP   (ix)   
0585                             ;     push bc                     ; create stack frame, push IP
0585                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
0585                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
0585                             ;     push de                     ; push SCP
0585                             ;     push iy                     ; push BP
0585                             ;     ld iy,0                     ; BP = SP
0585                             ;     add iy,sp
0585                             ;     jp (ix)
0585                ARRAYEND:      
0585   DD E9                  JP   (ix)   
0587                             ;     ld d,iyh                    ; de = BP
0587                             ;     ld e,iyl
0587                             ;     ld ixh,d                    ; ix = BP
0587                             ;     ld ixl,e
0587                             ;     ld hl,de                    ; hl = de
0587                             ;     or a
0587                             ;     sbc hl,sp                   ; hl = array count (items on stack)
0587                             ;     srl h
0587                             ;     rr l
0587                             ;     ex de,hl                    ; de = count
0587                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0587                             ;     ld (hl),e
0587                             ;     inc hl
0587                             ;     ld (hl),d
0587                             ;     inc hl                      ; hl = array[0], de = count
0587                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
0587                             ;     cp 1
0587                             ;     jr nz, arrayEnd2
0587                             ; arrayEnd1:                      ; byte
0587                             ;     ld a,(ix-2)
0587                             ;     ld (hl),a
0587                             ;     inc hl
0587                             ;     dec ix
0587                             ;     dec ix
0587                             ;     dec de
0587                             ;     ld a,e
0587                             ;     or d
0587                             ;     jr nz,arrayEnd1
0587                             ;     jr arrayEnd3
0587                             ; arrayEnd2:                      ; word
0587                             ;     ld a,(ix-2)
0587                             ;     ld (hl),a
0587                             ;     inc hl
0587                             ;     ld a,(ix-1)
0587                             ;     ld (hl),a
0587                             ;     inc hl
0587                             ;     dec ix
0587                             ;     dec ix
0587                             ;     dec de
0587                             ;     ld a,e
0587                             ;     or d
0587                             ;     jr nz,arrayEnd2
0587                             ; arrayEnd3:
0587                             ;     ld d,iyh                    ; de = BP, hl = end of array
0587                             ;     ld e,iyl
0587                             ;     ex de,hl                    ; hl = BP, de = end of array
0587                             ;     ld sp,hl                    ; sp = BP
0587                             ;     pop hl                      ; hl = old BP, de = end of array
0587                             ;     pop ix                      ; pop SCP (discard)
0587                             ;     pop ix                      ; pop IP (discard)
0587                             ;     ex de,hl
0587                             ;     ld iyh,d
0587                             ;     ld iyl,e
0587                             ;     ex de,hl
0587                             ;     ; ld sp,hl                    ; sp = old BP
0587                             ;     ; ld iy,0                     ; iy = sp
0587                             ;     ; add iy,sp
0587                             ;     ld ix,next
0587                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
0587                             ;     inc hl
0587                             ;     inc hl
0587                             ;     push hl                     ; return array[0]
0587                             ;     ex de,hl                    ; hl = end of array, de = array[0]
0587                             ;     or a
0587                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
0587                             ;     ex de,hl
0587                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
0587                             ;     ld (hl),e                   ; array[-2] = size
0587                             ;     inc hl
0587                             ;     ld (hl),d
0587                             ;     inc hl
0587                             ;     add hl,de
0587                             ;     ld (vHeapPtr),hl
0587                             ;     jp (ix)
0587                             ; str -- num
0587                HASH:        
0587   E1                     POP   hl   
0588   C5                     PUSH   bc   
0589   44 4D                  LD   bc,hl   
058B   CD F5 06               CALL   hashStr   
058E   C1                     POP   bc   
058F   E5                     PUSH   hl   
0590   DD E9                  JP   (ix)   
0592                             ; symbol block arity --
0592                DEF:         
0592   21 00 00               LD   hl,0   ; array = 0
0595   E5                     PUSH   hl   ; falls through
0596                             ; symbol block arity array --
0596                CLOSURE:      
0596                DEF0:        
0596   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0599   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
059B   23                     INC   hl   
059C   36 8D                  LD   (hl),lsb(call)   
059E   23                     INC   hl   
059F   36 0A                  LD   (hl),msb(call)   
05A1   23                     INC   hl   
05A2   D1                     POP   de   ; pop array
05A3   73                     LD   (hl),e   ; compile array
05A4   23                     INC   hl   
05A5   72                     LD   (hl),d   
05A6   23                     INC   hl   
05A7   D1                     POP   de   
05A8   73                     LD   (hl),e   ; compile arity
05A9   23                     INC   hl   
05AA   72                     LD   (hl),d   
05AB   23                     INC   hl   
05AC   D1                     POP   de   ; de = block
05AD   C5                     PUSH   bc   ; (sp) = IP (sp+2) = symbol
05AE   06 01                  LD   b,1   ; b = nesting
05B0                DEF1:        
05B0   1A                     LD   a,(de)   
05B1   13                     INC   de   
05B2   77                     LD   (hl),a   
05B3   23                     INC   hl   
05B4   FE 29                  CP   ")"   
05B6   28 25                  JR   z,def4   
05B8   FE 7D                  CP   "}"   
05BA   28 21                  JR   z,def4   
05BC   FE 5D                  CP   "]"   
05BE   28 1D                  JR   z,def4   
05C0   FE 28                  CP   "("   
05C2   28 13                  JR   z,def3   
05C4   FE 7B                  CP   "{"   
05C6   28 0F                  JR   z,def3   
05C8   FE 5B                  CP   "["   
05CA   28 0B                  JR   z,def3   
05CC   FE 27                  CP   "'"   
05CE   28 07                  JR   z,def3   
05D0   FE 60                  CP   "`"   
05D2   20 DC                  JR   nz,def1   
05D4                DEF2:        
05D4   04                     INC   b   
05D5   18 D9                  JR   def1   
05D7                DEF3:        
05D7   3E 80                  LD   a,$80   
05D9   A8                     XOR   b   
05DA   47                     LD   b,a   
05DB   18 D3                  JR   def1   
05DD                DEF4:        
05DD   05                     DEC   b   
05DE   20 D0                  JR   nz,def1   ; get the next element
05E0                             ; xor a                       ; end with NUL ??? needed?
05E0                             ; ld (hl),a
05E0   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
05E4   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
05E7   E1                     POP   hl   ; de = defstart, hl = IP
05E8   E3                     EX   (sp),hl   ; hl = symbol, de = defstart, (sp) = IP
05E9   44 4D                  LD   bc,hl   ; bc = symbol
05EB   CD 0E 07               CALL   defineEntry   
05EE   38 00                  JR   c,def5   
05F0                             ; call error
05F0                             ; .cstr "Def Collision"
05F0                DEF5:        
05F0   C1                     POP   bc   ; bc = IP
05F1   DD E9                  JP   (ix)   
05F3                             ; symbol value --
05F3                LET:         
05F3   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
05F5   E3                     EX   (sp),hl   
05F6   EB                     EX   de,hl   
05F7   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
05FA   36 CD                  LD   (hl),$cd   ; compile "call dolet"
05FC   23                     INC   hl   
05FD   36 3F                  LD   (hl),lsb(dolet)   
05FF   23                     INC   hl   
0600   36 05                  LD   (hl),msb(dolet)   
0602   23                     INC   hl   
0603   73                     LD   (hl),e   
0604   23                     INC   hl   
0605   72                     LD   (hl),d   
0606   2B                     DEC   hl   
0607   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
060B   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
060E   E1                     POP   hl   ; de = addr, hl = IP
060F   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0610   44 4D                  LD   bc,hl   ; bc = symbol
0612   CD 0E 07               CALL   defineEntry   
0615   38 00                  JR   c,let2   
0617                             ; call error
0617                             ; .cstr "Let Collision"
0617                LET2:        
0617   C1                     POP   bc   
0618   DD E9                  JP   (ix)   
061A                             ; str -- addr
061A                ADDR:        
061A   E1                     POP   hl   ; hl = hash
061B   C5                     PUSH   bc   
061C   44 4D                  LD   bc,hl   
061E   CD 34 07               CALL   lookupEntry   
0621   38 03                  JR   c,addr1   
0623   21 00 00               LD   hl,0   
0626                             ; call printStr		
0626                             ; .cstr "Undefined"
0626                             ; jp interpret
0626                ADDR1:       
0626   C1                     POP   bc   
0627   11 03 00               LD   de,3   
062A   19                     ADD   hl,de   
062B   E5                     PUSH   hl   
062C   DD E9                  JP   (ix)   
062E                SYMBOL:      
062E   03                     INC   bc   
062F   11 00 1A               LD   de,PAD   
0632   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0634   18 02                  JR   symbol1   
0636                SYMBOL0:      ; copy to PAD area
0636   03                     INC   bc   ; characters that are part of the identifier
0637   13                     INC   de   
0638                SYMBOL1:      ; 0-9 A-Z a-z _
0638   0A                     LD   a,(bc)   
0639   12                     LD   (de),a   
063A   B7                     OR   a   
063B   28 0A                  JR   z,symbol2   
063D   6F                     LD   l,a   
063E   7E                     LD   a,(hl)   
063F   FE 5B                  CP   lsb(ident_)   
0641   28 F3                  JR   z,symbol0   
0643   FE 00                  CP   lsb(num_)   
0645   28 EF                  JR   z,symbol0   
0647                SYMBOL2:      
0647   0B                     DEC   bc   
0648   AF                     XOR   a   
0649   12                     LD   (de),a   ; terminate string with NUL
064A   C5                     PUSH   bc   
064B   01 00 1A               LD   bc,PAD   
064E   CD F5 06               CALL   hashStr   ; hl = hash
0651   C1                     POP   bc   
0652   E5                     PUSH   hl   
0653   DD E9                  JP   (ix)   
0655                IDENT:       
0655   11 00 1A               LD   de,PAD   
0658   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
065A   18 02                  JR   ident1   
065C                IDENT0:      ; copy to PAD area
065C   03                     INC   bc   ; characters that are part of the identifier
065D   13                     INC   de   
065E                IDENT1:      ; 0-9 A-Z a-z _
065E   0A                     LD   a,(bc)   
065F   12                     LD   (de),a   
0660   B7                     OR   a   
0661   28 0A                  JR   z,ident2   
0663   6F                     LD   l,a   
0664   7E                     LD   a,(hl)   
0665   FE 5B                  CP   lsb(ident_)   
0667   28 F3                  JR   z,ident0   
0669   FE 00                  CP   lsb(num_)   
066B   28 EF                  JR   z,ident0   
066D                IDENT2:      
066D   0B                     DEC   bc   
066E   AF                     XOR   a   
066F   12                     LD   (de),a   ; terminate string with NUL
0670   C5                     PUSH   bc   
0671   01 00 1A               LD   bc,PAD   
0674   CD F5 06               CALL   hashStr   ; hl = hash
0677   44 4D                  LD   bc,hl   
0679   CD 34 07               CALL   lookupEntry   
067C   C1                     POP   bc   
067D   38 02                  JR   c,ident3   ; todo: no entry? print an error message
067F   DD E9                  JP   (ix)   
0681                IDENT3:      
0681   E9                     JP   (hl)   
0682                FRAC:        
0682   2A 98 18               LD   hl,(vFrac)   
0685   E5                     PUSH   hl   
0686   DD E9                  JP   (ix)   
0688                SQRT1:       
0688   E1                     POP   hl   
0689   C5                     PUSH   bc   
068A   CD 71 07               CALL   squareRoot   
068D   ED 43 98 18            LD   (vFrac),bc   
0691   C1                     POP   bc   
0692   D5                     PUSH   de   
0693   DD E9                  JP   (ix)   
0695                ABS1:        
0695   E1                     POP   hl   
0696   CB 7C                  BIT   7,h   
0698   C8                     RET   z   
0699   AF                     XOR   a   
069A   95                     SUB   l   
069B   6F                     LD   l,a   
069C   9F                     SBC   a,a   
069D   94                     SUB   h   
069E   67                     LD   h,a   
069F   E5                     PUSH   hl   
06A0   DD E9                  JP   (ix)   
06A2                MOD:         
06A2   D1                     POP   de   ; get first value
06A3   E1                     POP   hl   ; get 2nd value
06A4   C5                     PUSH   bc   ; preserve the IP
06A5   44 4D                  LD   bc,hl   
06A7   CD 58 07               CALL   divide   
06AA   C1                     POP   bc   
06AB   E5                     PUSH   hl   ; push remainder
06AC   DD E9                  JP   (ix)   
06AE                             ; hl = value1, de = value2
06AE                             ; hl = result
06AE                EQUALS:      
06AE   B7                     OR   a   ; reset the carry flag
06AF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06B1   28 10                  JR   z,true1   
06B3   C3 C9 06               JP   false1   
06B6                             ; hl = value1 de = value2
06B6                             ; hl = result
06B6                LESSTHANEQ:      
06B6   B7                     OR   a   
06B7   ED 52                  SBC   hl,de   
06B9   18 05                  JR   lessthan1   
06BB                             ; hl = value1 de = value2
06BB                             ; hl = result
06BB                LESSTHAN:      
06BB   B7                     OR   a   
06BC   ED 52                  SBC   hl,de   
06BE   28 09                  JR   z,false1   
06C0                LESSTHAN1:      
06C0   FA C9 06               JP   m,false1   
06C3                TRUE1:       
06C3   21 FF FF               LD   hl,TRUE   
06C6   E5                     PUSH   hl   
06C7   DD E9                  JP   (ix)   
06C9                FALSE1:      
06C9   21 00 00               LD   hl,FALSE   
06CC   E5                     PUSH   hl   
06CD   DD E9                  JP   (ix)   
06CF                             ; Z80 port input
06CF                             ; port -- value
06CF                INPUT:       
06CF   E1                     POP   hl   
06D0   59                     LD   e,c   ; save IP
06D1   4D                     LD   c,l   
06D2   ED 68                  IN   l,(c)   
06D4   26 00                  LD   h,0   
06D6   4B                     LD   c,e   ; restore IP
06D7   E5                     PUSH   hl   
06D8   DD E9                  JP   (ix)   
06DA                             ; Z80 port output
06DA                             ; value port --
06DA                OUTPUT:      
06DA   E1                     POP   hl   
06DB   59                     LD   e,c   ; save IP
06DC   4D                     LD   c,l   
06DD   E1                     POP   hl   
06DE   ED 69                  OUT   (c),l   
06E0   4B                     LD   c,e   ; restore IP
06E1   DD E9                  JP   (ix)   
06E3                KEY:         
06E3   CD 81 00               CALL   getchar   
06E6   26 00                  LD   h,0   
06E8   6F                     LD   l,a   
06E9   E5                     PUSH   hl   
06EA   DD E9                  JP   (ix)   
06EC                NEG:         
06EC   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
06EF   D1                     POP   de   
06F0   C3 A1 03               JP   sub2   ; use the SUBtract routine
06F3                FILTER:      
06F3                MAP:         
06F3                SCAN:        
06F3   DD E9                  JP   (ix)   
06F5                             ; -------------------------------------------------------------------------------
06F5                             ; hash C-string
06F5                             ; BC = str
06F5                             ; HL = hash
06F5                HASHSTR:      
06F5   21 00 00               LD   hl,0   
06F8                HASHSTR1:      
06F8   0A                     LD   a,(bc)   ; load next char
06F9   03                     INC   bc   
06FA   FE 00                  CP   0   ; NUL?
06FC   C8                     RET   z   
06FD                HASHSTR2:      
06FD   16 00                  LD   d,0   
06FF   5F                     LD   e,a   
0700   19                     ADD   hl,de   
0701   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0703   29                     ADD   hl,hl   ; shift left
0704   19                     ADD   hl,de   ; add
0705   29                     ADD   hl,hl   ; shift left
0706   29                     ADD   hl,hl   ; shift left
0707   29                     ADD   hl,hl   ; shift left
0708   29                     ADD   hl,hl   ; shift left
0709   29                     ADD   hl,hl   ; shift left
070A   29                     ADD   hl,hl   ; shift left
070B   19                     ADD   hl,de   ; add
070C   18 EA                  JR   hashStr1   
070E                             ; add entry to hash slots and hash pointers
070E                             ; bc = hash (b = hi, c = lo), de = addr
070E                             ; sets carry if successful
070E                DEFINEENTRY:      
070E   CB 21                  SLA   c   ; lo = lo * 2
0710   69                     LD   l,c   ; lo1 = lo
0711   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0713                DEFINEENTRY0:      
0713   7E                     LD   a,(hl)   ; a = (lo1)
0714   FE FF                  CP   UNUSED   ; is it unused?
0716   28 12                  JR   z,defineEntry3   ; yes, add entry
0718   79                     LD   a,c   ; a = lo
0719   BE                     CP   (hl)   ; compare (lo1) with lo
071A   20 06                  JR   nz,defineEntry1   ; no match loop around
071C   2C                     INC   l   
071D   78                     LD   a,b   ; a = hi
071E   BE                     CP   (hl)   ; compare (lo1+1) with hi
071F   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0721   2D                     DEC   l   ; restore l
0722                DEFINEENTRY1:      
0722   2C                     INC   l   ; try next entry
0723   2C                     INC   l   
0724   79                     LD   a,c   ; compare lo and lo1
0725   BD                     CP   l   ; if equal then there's no space left, reject
0726   20 EB                  JR   nz,defineEntry0   
0728                DEFINEENTRY2:      
0728   B7                     OR   a   ; clear carry flag, failure
0729   C9                     RET      
072A                DEFINEENTRY3:      ; new entry
072A   71                     LD   (hl),c   ; (lo1) = hash lo
072B   23                     INC   hl   
072C   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
072D   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
072F   72                     LD   (hl),d   
0730   2B                     DEC   hl   
0731   73                     LD   (hl),e   ; (slot + 2) = address
0732   37                     SCF      ; set carry flag, success
0733   C9                     RET      
0734                             ; looks up hash and returns address
0734                             ; bc = hash
0734                             ; returns addr in hl, sets carry if successful
0734                LOOKUPENTRY:      
0734   CB 21                  SLA   c   ; lo = lo * 2
0736   69                     LD   l,c   ; lo1 = lo
0737   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0739                LOOKUPENTRY0:      
0739   7E                     LD   a,(hl)   ; a = (hl), slot
073A   FE FF                  CP   UNUSED   ; is it unused?
073C   28 EA                  JR   z,defineEntry2   ; yes, does not exist
073E   79                     LD   a,c   ; a = lo
073F   BE                     CP   (hl)   ; compare (lo1) with lo
0740   20 06                  JR   nz,lookupEntry1   ; no match loop around
0742   2C                     INC   l   
0743   78                     LD   a,b   ; a = hi
0744   BE                     CP   (hl)   ; compare (lo1+1) with hi
0745   28 09                  JR   z,lookupEntry3   
0747   2D                     DEC   l   
0748                LOOKUPENTRY1:      
0748   2C                     INC   l   
0749   2C                     INC   l   
074A   79                     LD   a,c   
074B   BD                     CP   l   ; no space left, reject
074C   20 EB                  JR   nz,lookupEntry0   
074E                LOOKUPENTRY2:      
074E   B7                     OR   a   ; clear carry flag, failure
074F   C9                     RET      
0750                LOOKUPENTRY3:      
0750   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0752   56                     LD   d,(hl)   
0753   2D                     DEC   l   ; restore l
0754   5E                     LD   e,(hl)   ; (slot + 2) = address
0755   EB                     EX   de,hl   
0756   37                     SCF      
0757   C9                     RET      
0758                             ; division subroutine.
0758                             ; bc: divisor, de: dividend, hl: remainder
0758                DIVIDE:      
0758   21 00 00               LD   hl,0   ; zero the remainder
075B   3E 10                  LD   a,16   ; loop counter
075D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
075D   CB 21                  SLA   c   
075F   CB 10                  RL   b   
0761   ED 6A                  ADC   hl,hl   
0763   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0765   38 03                  JR   c,divide2   
0767   0C                     INC   c   
0768   18 01                  JR   divide3   
076A                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
076A   19                     ADD   hl,de   
076B                DIVIDE3:      
076B   3D                     DEC   a   
076C   20 EF                  JR   nz,divide1   
076E   50 59                  LD   de,bc   ; result from bc to de
0770   C9                     RET      
0771                             ; squareroot
0771                             ; Input: HL = value
0771                             ; Result: DE = square root BC = remainder
0771                SQUAREROOT:      
0771   01 00 08               LD   bc,0800h   
0774   59                     LD   e,c   
0775   AF                     XOR   a   
0776                SQUAREROOT1:      
0776   29                     ADD   hl,hl   
0777   CB 11                  RL   c   
0779   ED 6A                  ADC   hl,hl   
077B   CB 11                  RL   c   
077D   30 02                  JR   nc,$+4   
077F   CB C5                  SET   0,l   
0781   7B                     LD   a,e   
0782   87                     ADD   a,a   
0783   5F                     LD   e,a   
0784   87                     ADD   a,a   
0785   CB 45                  BIT   0,l   
0787   20 03                  JR   nz,$+5   
0789   91                     SUB   c   
078A   30 05                  JR   nc,squareRoot4   
078C   79                     LD   a,c   
078D   93                     SUB   e   
078E   1C                     INC   e   
078F   93                     SUB   e   
0790   4F                     LD   c,a   
0791                SQUAREROOT4:      
0791   10 E3                  DJNZ   squareRoot1   
0793   CB 45                  BIT   0,l   
0795   28 01                  JR   z,squareRoot5   
0797   04                     INC   b   
0798                SQUAREROOT5:      
0798   16 00                  LD   d,0   
079A   C9                     RET      
079B                PRTDEC:      
079B   CB 7C                  BIT   7,h   
079D   28 0B                  JR   z,prtdec0   
079F   3E 2D                  LD   a,"-"   
07A1   CD 85 00               CALL   putchar   
07A4   AF                     XOR   a   
07A5   95                     SUB   l   
07A6   6F                     LD   l,a   
07A7   9F                     SBC   a,a   
07A8   94                     SUB   h   
07A9   67                     LD   h,a   
07AA                PRTDEC0:      
07AA   C5                     PUSH   bc   
07AB   0E 00                  LD   c,0   ; leading zeros flag = false
07AD   11 F0 D8               LD   de,-10000   
07B0   CD CC 07               CALL   prtdec1   
07B3   11 18 FC               LD   de,-1000   
07B6   CD CC 07               CALL   prtdec1   
07B9   11 9C FF               LD   de,-100   
07BC   CD CC 07               CALL   prtdec1   
07BF   1E F6                  LD   e,-10   
07C1   CD CC 07               CALL   prtdec1   
07C4   0C                     INC   c   ; flag = true for at least digit
07C5   1E FF                  LD   e,-1   
07C7   CD CC 07               CALL   prtdec1   
07CA   C1                     POP   bc   
07CB   C9                     RET      
07CC                PRTDEC1:      
07CC   06 2F                  LD   b,"0"-1   
07CE                PRTDEC2:      
07CE   04                     INC   b   
07CF   19                     ADD   hl,de   
07D0   38 FC                  JR   c,prtdec2   
07D2   ED 52                  SBC   hl,de   
07D4   3E 30                  LD   a,"0"   
07D6   B8                     CP   b   
07D7   20 05                  JR   nz,prtdec3   
07D9   AF                     XOR   a   
07DA   B1                     OR   c   
07DB   C8                     RET   z   
07DC   18 01                  JR   prtdec4   
07DE                PRTDEC3:      
07DE   0C                     INC   c   
07DF                PRTDEC4:      
07DF   78                     LD   a,b   
07E0   C3 85 00               JP   putchar   
07E3                PRTHEX:      ; display hl as a 16-bit number in hex.
07E3   C5                     PUSH   bc   ; preserve the IP
07E4   7C                     LD   a,h   
07E5   CD EE 07               CALL   prthex2   
07E8   7D                     LD   a,l   
07E9   CD EE 07               CALL   prthex2   
07EC   C1                     POP   bc   
07ED   C9                     RET      
07EE                PRTHEX2:      
07EE   4F                     LD   c,a   
07EF   1F                     RRA      
07F0   1F                     RRA      
07F1   1F                     RRA      
07F2   1F                     RRA      
07F3   CD F7 07               CALL   prthex3   
07F6   79                     LD   a,c   
07F7                PRTHEX3:      
07F7   E6 0F                  AND   0x0F   
07F9   C6 90                  ADD   a,0x90   
07FB   27                     DAA      
07FC   CE 40                  ADC   a,0x40   
07FE   27                     DAA      
07FF   C3 85 00               JP   putchar   
0802                PRTSTR0:      
0802   CD 85 00               CALL   putchar   
0805   23                     INC   hl   
0806                PRTSTR:      
0806   7E                     LD   a,(hl)   
0807   B7                     OR   a   
0808   20 F8                  JR   nz,prtstr0   
080A   C9                     RET      
080B                             ; **************************************************************************
080B                             ; calculate nesting value
080B                             ; a is char to be tested,
080B                             ; e is the nesting value (initially 0)
080B                             ; e is increased by ( and [
080B                             ; e is decreased by ) and ]
080B                             ; e has its bit 7 toggled by `
080B                             ; limited to 127 levels
080B                             ; **************************************************************************
080B                NESTING:      
080B   FE 22                  CP   $22   ; quote char
080D   20 0A                  JR   nz,nesting1   
080F   CB 7B                  BIT   7,e   
0811   28 03                  JR   z,nesting1a   
0813   CB BB                  RES   7,e   
0815   C9                     RET      
0816                NESTING1A:      
0816   CB FB                  SET   7,e   
0818   C9                     RET      
0819                NESTING1:      
0819   CB 7B                  BIT   7,e   
081B   C0                     RET   nz   
081C   FE 7B                  CP   "{"   
081E   28 08                  JR   z,nesting2   
0820   FE 5B                  CP   "["   
0822   28 04                  JR   z,nesting2   
0824   FE 28                  CP   "("   
0826   20 02                  JR   nz,nesting3   
0828                NESTING2:      
0828   1C                     INC   e   
0829   C9                     RET      
082A                NESTING3:      
082A   FE 7D                  CP   "}"   
082C   28 07                  JR   z,nesting4   
082E   FE 5D                  CP   "]"   
0830   28 03                  JR   z,nesting4   
0832   FE 29                  CP   ")"   
0834   C0                     RET   nz   
0835                NESTING4:      
0835   1D                     DEC   e   
0836   C9                     RET      
0837                PROMPT:      
0837   CD 47 08               CALL   printStr   
083A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
083F   C9                     RET      
0840                CRLF:        
0840   CD 47 08               CALL   printStr   
0843   0D 0A 00               .CSTR   "\r\n"   
0846   C9                     RET      
0847                PRINTSTR:      
0847   E3                     EX   (sp),hl   ; swap			
0848   CD 06 08               CALL   prtstr   
084B   23                     INC   hl   ; inc past NUL
084C   E3                     EX   (sp),hl   ; put it back	
084D   C9                     RET      
084E                DEFINE:      
084E   E1                     POP   hl   
084F   7E                     LD   a,(hl)   
0850   23                     INC   hl   
0851   44 4D                  LD   bc,hl   
0853   5F                     LD   e,a   
0854   16 00                  LD   d,0   
0856   19                     ADD   hl,de   
0857   5E                     LD   e,(hl)   
0858   23                     INC   hl   
0859   56                     LD   d,(hl)   
085A   23                     INC   hl   
085B   E5                     PUSH   hl   ; bc = str
085C   D5                     PUSH   de   
085D   CD F5 06               CALL   hashStr   ; hl = hash
0860   D1                     POP   de   
0861   44 4D                  LD   bc,hl   
0863   C3 0E 07               JP   defineEntry   
0866                INIT:        
0866   DD 21 3F 0A            LD   ix,next   
086A   FD 21 80 18            LD   iy,STACK   
086E   21 80 01               LD   hl,isysVars   
0871   11 98 18               LD   de,sysVars   
0874   01 10 00               LD   bc,8 * 2   
0877   ED B0                  LDIR      
0879   3E FF                  LD   a,UNUSED   
087B   06 00                  LD   b,0   
087D   21 00 1B               LD   hl,hashSlots   
0880                INIT1:       
0880   77                     LD   (hl),a   
0881   23                     INC   hl   
0882   10 FC                  DJNZ   init1   
0884   CD 4E 08               CALL   define   
0887   04 61 62 73 00         .PSTR   "abs",0   
088C   95 06                  DW   abs1   
088E   CD 4E 08               CALL   define   
0891   05 61 64 64 72 00      .PSTR   "addr",0   
0897   1A 06                  DW   addr   
0899   CD 4E 08               CALL   define   
089C   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08A3   7B 05                  DW   bytes   
08A5   CD 4E 08               CALL   define   
08A8   05 63 61 6C 6C 00      .PSTR   "call",0   
08AE   8D 0A                  DW   call   
08B0   CD 4E 08               CALL   define   
08B3   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
08BC   96 05                  DW   closure   
08BE   CD 4E 08               CALL   define   
08C1   04 64 65 66 00         .PSTR   "def",0   
08C6   92 05                  DW   def   
08C8   CD 4E 08               CALL   define   
08CB   05 65 78 65 63 00      .PSTR   "exec",0   
08D1   74 0A                  DW   exec   
08D3   CD 4E 08               CALL   define   
08D6   06 66 61 6C 73 65 00   .PSTR   "false",0   
08DD   00 00                  DW   false   
08DF   CD 4E 08               CALL   define   
08E2   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
08EA   F3 06                  DW   filter   
08EC   CD 4E 08               CALL   define   
08EF   05 66 72 61 63 00      .PSTR   "frac",0   
08F5   82 06                  DW   frac   
08F7   CD 4E 08               CALL   define   
08FA   04 67 65 74 00         .PSTR   "get",0   
08FF   3F 05                  DW   get   
0901   CD 4E 08               CALL   define   
0904   05 68 61 73 68 00      .PSTR   "hash",0   
090A   87 05                  DW   hash   
090C   CD 4E 08               CALL   define   
090F   06 69 6E 70 75 74 00   .PSTR   "input",0   
0916   CF 06                  DW   input   
0918   CD 4E 08               CALL   define   
091B   03 69 66 00            .PSTR   "if",0   
091F   66 05                  DW   if   
0921   CD 4E 08               CALL   define   
0924   05 69 66 74 65 00      .PSTR   "ifte",0   
092A   68 05                  DW   ifte   
092C   CD 4E 08               CALL   define   
092F   04 6B 65 79 00         .PSTR   "key",0   
0934   E3 06                  DW   key   
0936   CD 4E 08               CALL   define   
0939   04 6C 65 74 00         .PSTR   "let",0   
093E   F3 05                  DW   let   
0940   CD 4E 08               CALL   define   
0943   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0949   74 05                  DW   loop   
094B   CD 4E 08               CALL   define   
094E   04 6D 61 70 00         .PSTR   "map",0   
0953   F3 06                  DW   map   
0955   CD 4E 08               CALL   define   
0958   04 6D 6F 64 00         .PSTR   "mod",0   
095D   A2 06                  DW   mod   
095F   CD 4E 08               CALL   define   
0962   04 6E 65 67 00         .PSTR   "neg",0   
0967   EC 06                  DW   neg   
0969   CD 4E 08               CALL   define   
096C   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0974   DA 06                  DW   output   
0976   CD 4E 08               CALL   define   
0979   05 73 63 61 6E 00      .PSTR   "scan",0   
097F   01 00                  DW   scan   
0981   CD 4E 08               CALL   define   
0984   04 73 65 74 00         .PSTR   "set",0   
0989   51 05                  DW   set   
098B   CD 4E 08               CALL   define   
098E   04 73 68 6C 00         .PSTR   "shl",0   
0993   DC 03                  DW   shl   
0995   CD 4E 08               CALL   define   
0998   04 73 68 72 00         .PSTR   "shr",0   
099D   EC 03                  DW   shr   
099F   CD 4E 08               CALL   define   
09A2   05 73 71 72 74 00      .PSTR   "sqrt",0   
09A8   88 06                  DW   sqrt1   
09AA   CD 4E 08               CALL   define   
09AD   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09B5   6A 05                  DW   switch   
09B7   CD 4E 08               CALL   define   
09BA   05 74 72 75 65 00      .PSTR   "true",0   
09C0   FF FF                  DW   true   
09C2   CD 4E 08               CALL   define   
09C5   06 77 6F 72 64 73 00   .PSTR   "words",0   
09CC   76 05                  DW   words   
09CE   C9                     RET      
09CF                START:       
09CF   31 80 18               LD   sp,STACK   ; start of Siena
09D2   CD 66 08               CALL   init   ; setups
09D5   CD 47 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09D8   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
09E5                INTERPRET:      
09E5   CD 37 08               CALL   prompt   
09E8   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09EB   ED 43 9C 18            LD   (vTIBPtr),bc   
09EF                INTERPRET2:      ; calc nesting (a macro might have changed it)
09EF   1E 00                  LD   e,0   ; initilize nesting value
09F1   C5                     PUSH   bc   ; save offset into TIB,
09F2                             ; bc is also the count of chars in TIB
09F2   21 00 19               LD   hl,TIB   ; hl is start of TIB
09F5   18 06                  JR   interpret4   
09F7                INTERPRET3:      
09F7   7E                     LD   a,(hl)   ; a = char in TIB
09F8   23                     INC   hl   ; inc pointer into TIB
09F9   0B                     DEC   bc   ; dec count of chars in TIB
09FA   CD 0B 08               CALL   nesting   ; update nesting value
09FD                INTERPRET4:      
09FD   79                     LD   a,c   ; is count zero?
09FE   B0                     OR   b   
09FF   20 F6                  JR   nz,interpret3   ; if not loop
0A01   C1                     POP   bc   ; restore offset into TIB
0A02                WAITCHAR:      
0A02   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A05   FE 20                  CP   $20   ; compare to space
0A07   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A09   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A0B                             ; ???? NEEDED?
0A0B   28 2A                  JR   z,waitchar4   
0A0D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A0F   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A11                MACRO:       
0A11                             ;  ld (vTIBPtr),bc
0A11                             ;  ld hl,ctrlCodes
0A11                             ;  add a,l			            ; look up key of macros
0A11                             ;  ld l,a
0A11                             ;  ld e,(hl)
0A11                             ;  ld a,e
0A11                             ;  or a
0A11                             ;  jr z,macro1
0A11                             ;  ld d,msb(macros)
0A11                             ;  push de
0A11                             ;  call call		            ; Siena exec_ operation and jump to it
0A11                             ;  db DC1,0
0A11                             ; macro1:
0A11                             ;  ld bc,(vTIBPtr)
0A11   18 DC                  JR   interpret2   
0A13                WAITCHAR1:      
0A13   21 00 19               LD   hl,TIB   
0A16   09                     ADD   hl,bc   
0A17   77                     LD   (hl),a   ; store the character in textbuf
0A18   03                     INC   bc   
0A19   CD 85 00               CALL   putchar   ; echo character to screen
0A1C   CD 0B 08               CALL   nesting   
0A1F   18 E1                  JR   waitchar   ; wait for next character
0A21                WAITCHAR3:      
0A21   21 00 19               LD   hl,TIB   
0A24   09                     ADD   hl,bc   
0A25   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A27   23                     INC   hl   
0A28   36 0A                  LD   (hl),"\n"   
0A2A   23                     INC   hl   
0A2B   03                     INC   bc   
0A2C   03                     INC   bc   
0A2D   CD 40 08               CALL   crlf   ; echo character to screen
0A30   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A31   B7                     OR   a   
0A32   20 CE                  JR   nz,waitchar   
0A34   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A36   03                     INC   bc   
0A37                WAITCHAR4:      
0A37   ED 43 9C 18            LD   (vTIBPtr),bc   
0A3B   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A3E                             ; we pressed enter
0A3E   0B                     DEC   bc   
0A3F                NEXT:        
0A3F   03                     INC   bc   ; Increment the IP
0A40   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A41   FE 20                  CP   " "   ; whitespace?
0A43   28 FA                  JR   z,next   ; space? ignore
0A45   38 07                  JR   c,next1   
0A47   6F                     LD   l,a   ; index into table
0A48   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A4A   6E                     LD   l,(hl)   ; get low jump address
0A4B   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A4D   E9                     JP   (hl)   ; Jump to routine
0A4E                NEXT1:       
0A4E   FE 1B                  CP   ESC   ; escape from interpreter
0A50   28 07                  JR   z,escape   
0A52   FE 00                  CP   NUL   ; end of input string?
0A54   28 07                  JR   z,exit   
0A56   C3 E5 09               JP   interpret   ; no, other whitespace, macros?
0A59                ESCAPE:      
0A59   60 69                  LD   hl,bc   ; address of code after escape opcode
0A5B   23                     INC   hl   
0A5C   E9                     JP   (hl)   
0A5D                EXIT:        
0A5D   50 59                  LD   de,bc   ; address of code after exit opcode
0A5F   13                     INC   de   
0A60   D9                     EXX      
0A61   C1                     POP   bc   ; bc = last result
0A62   E1                     POP   hl   ; pop array (discard)
0A63   FD 54                  LD   d,iyh   ; de = BP
0A65   FD 5D                  LD   e,iyl   
0A67   EB                     EX   de,hl   ; hl = BP
0A68   F9                     LD   sp,hl   ; sp = BP
0A69   D9                     EXX      
0A6A   E1                     POP   hl   ; hl = old BP
0A6B   C1                     POP   bc   ; pop SCP (discard)
0A6C   C1                     POP   bc   ; pop array (discard)
0A6D   C1                     POP   bc   ; bc = IP
0A6E   F9                     LD   sp,hl   ; sp = old BP
0A6F   D9                     EXX      
0A70   C5                     PUSH   bc   ; push result
0A71   D9                     EXX      
0A72   EB                     EX   de,hl   
0A73   E9                     JP   (hl)   
0A74                             ; execute a block of code
0A74                             ; uses parent scope
0A74                EXEC:        ; execute code at pointer
0A74   E1                     POP   hl   ; hl = pointer to code
0A75   7C                     LD   a,h   ; skip if destination address is NUL
0A76   B5                     OR   l   
0A77   28 12                  JR   z,exec2   
0A79   C5                     PUSH   bc   ; push IP
0A7A   11 00 00               LD   de,0   
0A7D   D5                     PUSH   de   ; array = 0
0A7E   FD E5                  PUSH   iy   ; push SCP
0A80   FD E5                  PUSH   iy   ; push BP
0A82   FD 21 00 00            LD   iy,0   ; BP = SP
0A86   FD 39                  ADD   iy,sp   
0A88   44 4D                  LD   bc,hl   ; IP = pointer to code
0A8A   0B                     DEC   bc   ; dec to prepare for next routine
0A8B                EXEC2:       
0A8B   DD E9                  JP   (ix)   
0A8D                             ; call with args
0A8D                             ; creates a scope
0A8D                CALL:        ; execute code at pointer
0A8D   E1                     POP   hl   ; hl = pointer to code
0A8E                CALL1:       
0A8E   7C                     LD   a,h   ; skip if destination address is NUL
0A8F   B5                     OR   l   
0A90   28 1B                  JR   z,call2   
0A92   C5                     PUSH   bc   ; push IP
0A93   5E                     LD   e,(hl)   ; de = array
0A94   23                     INC   hl   
0A95   56                     LD   d,(hl)   
0A96   23                     INC   hl   
0A97   D5                     PUSH   de   ; push array
0A98   5E                     LD   e,(hl)   ; de = arity
0A99   23                     INC   hl   
0A9A   56                     LD   d,(hl)   ; hl = block-1
0A9B   EB                     EX   de,hl   ; hl = arity, de = block-1
0A9C   29                     ADD   hl,hl   ; hl = arity * 2 bytes
0A9D   01 04 00               LD   bc,4   ; hl = arity * 2 - 4 bytes (ip,array)
0AA0   09                     ADD   hl,bc   
0AA1   39                     ADD   hl,sp   ; hl = pointer to first arg
0AA2   E5                     PUSH   hl   ; push hl
0AA3   FD E5                  PUSH   iy   ; push BP
0AA5   FD 21 00 00            LD   iy,0   ; BP = SP
0AA9   FD 39                  ADD   iy,sp   
0AAB   42 4B                  LD   bc,de   ; IP = block-1, ready for NEXT
0AAD                CALL2:       
0AAD   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x {1} 0 def x", 1
4000                             ; test ":x {$1} 1 def 2 x", 2
4000                             ; test ":x {$1 3 set $1} 1 def 2 x", 3
4000                          ;*Macro unroll:  test ":x { 3 2 } 0 def x + ", 5
4000   31 80 18               LD   SP,STACK   
4003   CD 66 08               CALL   init   
4006   CD 74 0A               CALL   exec   
4009   3A 78 20 7B 20 33 20 32 20 7D 20 30 20 64 65 66 20 78 20 2B 20 00 .CSTR   ":x { 3 2 } 0 def x + "   
401F                          ;*Macro unroll:  expect ":x { 3 2 } 0 def x + ",5
401F   E1                     POP   HL   
4020   E5                     PUSH   HL   
4021   11 05 00               LD   DE,5   
4024   B7                     OR   A   
4025   ED 52                  SBC   HL,DE   
4027   7D                     LD   A,L   
4028   B4                     OR   H   
4029   28 60                  JR   Z,expectM_0_2328S43   
402B   CD 47 08               CALL   printStr   
402E   43 6F 64 65 3A 20 3A 78 20 7B 20 33 20 32 20 7D 20 30 20 64 65 66 20 78 20 2B 20 00 .CSTR   "Code: ",":x { 3 2 } 0 def x + "   
404A   CD 47 08               CALL   printStr   
404D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405C   21 05 00               LD   HL,5   
405F   CD 9B 07               CALL   prtdec   
4062   CD 47 08               CALL   printStr   
4065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4072   E1                     POP   hl   
4073   E5                     PUSH   hl   
4074   CD 9B 07               CALL   prtdec   
4077   E1                     POP   hl   
4078   CD 47 08               CALL   printStr   
407B   20 28 23 00            .CSTR   " (#"   
407F   CD E3 07               CALL   prthex   
4082   CD 47 08               CALL   printStr   
4085   29 0D 0A 00            .CSTR   ")\r\n"   
4089   76                     HALT      
408A   00                     .CSTR      
408B                EXPECTM_0_2328S43:      
408B   E1                     POP   HL   
408C                             ; test "-1",-1
408C                             ; test "-1 2 +",1
408C                             ; test "-1 1 +",0
408C                             ; test "-1 -1 -",0
408C                             ; test "1 2 +", 3
408C                             ; test "4 1 2 +", 3
408C                             ; test "1", 1
408C                             ; test "2", 2
408C                             ; test "``", 0
408C                             ; test "`a`", $61
408C                             ; test "`\\``", $60
408C                             ; test "1", 1
408C                             ; test "0", 0
408C                             ; test "10", 10
408C                             ; test "123", 123
408C                             ; test "#10", $10
408C                             ; test "#FF", $FF
408C                             ; test "2 3 =", FALSE
408C                             ; test "3 3 =", TRUE
408C                             ; test "2 3 <", TRUE
408C                             ; test "3 3 <", FALSE
408C                             ; test "3 3 >", FALSE
408C                             ; test "4 3 >", TRUE
408C                             ; test "1 2 +", 3
408C                             ; test "123 456 +", 123+456
408C                             ; test "64 128 +", 64+128
408C                             ; test "5 3 -", 2
408C                             ; test "3 5 &", 1
408C                             ; test "3 5 |", 7
408C                             ; test "2 3 *", 6
408C                             ; test "1 2 3 + *", 5
408C                             ; test "1 2 <", TRUE
408C                             ; test "2 2 <=", TRUE
408C                             ; test "2 1 <", FALSE
408C                             ; test "1 2 >", FALSE
408C                             ; test "2 2 >=", TRUE
408C                             ; test "2 1 >", TRUE
408C                             ; test "10 sqrt", 3
408C                             ; test "10 sqrt frac", 1
408C                             ; test "7 3 /", 2
408C                             ; test "7 3 / frac", 1
408C                             ; test "1 2 +", 3
408C                             ; test ":x 1000 let x 10 set x", 10
408C                             ; test ":x [100] { @1 } closure x", 100
408C                             ; test ":x [100 200] { @2 } closure x", 200
408C                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
408C                             ; test "0 [{1}] switch", 1
408C                             ; test "1 [{1} {2} {3}] switch", 2
408C                             ; test "9 [{1} {5}] switch", 5
408C                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
408C                             ; test "bytes 'ABC' get", $41
408C                             ; test "bytes [1 2 3] get", 1
408C                             ; test ":xyz 123 const ; xyz", 123
408C                             ; test ":x 1 const ; x", 1
408C                             ; test ":x 'A' const x get", $41
408C                             ; test ":x [1] const x get", 1
408C                             ; test ":x [1 2 3] const x 2? get", 3
408C                             ; test "2 (1 2 +) *", 6
408C                             ; test ":xyz 123 const ; xyz", 123
408C                             ; test ":xyz 123 let ; xyz get", 123
408C                             ; test "1 2 {$1 $2 +} call", 3
408C                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
408C                             ; test ":xyz {1} def :xyz addr call", 1
408C                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
408C                             ; test ":xyz {10} def :xyz addr exec", 10
408C                             ; test ":xyz {10} def :xyz addr call", 10
408C                             ; test "'hello' hash", $7f54
408C                             ; test ":hello", $7f54
408C                             ; test "bytes [1 2 3]", $1e02
408C                             ; test "bytes [1 2 3] 1? get", 2
408C                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
408C                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
408C                             ; test "words [1 2 3]", $1e02
408C                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
408C                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
408C                             ; test "words [10 20 30] 1 ? get", 10
408C                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
408C                             ; test "{{{1} exec} exec} exec", 1
408C                             ; test "5 {{{$1} exec} exec} call", 5
408C                             ; test "5 {$1} call", 5
408C                             ; test "5 {{$1} exec} call", 5
408C                             ; test "2 1 {{$1} call} call", 2
408C                             ; test "2 1 {$2} call", 1
408C                             ; test "2 1 {$1} call", 2
408C                             ; test "2 1 {$2} call", 1
408C                             ; test "2 4 {$2} call", 4
408C                             ; test "{{1} call} call", 1
408C                             ; test "5 {-1 {$1} if} call", 5
408C                             ; test "0 {} loop", 0
408C                             ; test "1 {1-} loop", $1a00
408C                             ; test ":h {1} def :h addr call", 1
408C                             ; ; call enter
408C                             ; ;     .cstr "1 3",$22,"+"
408C                             ; ; expect "1 3 DUP +", 6
408C   CD 47 08               CALL   printStr   
408F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4095   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06F3 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1833 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1795 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1812 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
                    > USED AT LINE 330 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 256 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 258 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 260 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 262 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 264 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 266 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 268 IN Siena.asm
AND_:               0361 DEFINED AT LINE 270 IN Siena.asm
AND1:               0368 DEFINED AT LINE 278 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 302 IN Siena.asm
OR_:                036C DEFINED AT LINE 283 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 293 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
INV_:               037E DEFINED AT LINE 304 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 308 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 315 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 320 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB1:               039F DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
SUB2:               03A1 DEFINED AT LINE 334 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
NOT_:               03A7 DEFINED AT LINE 340 IN Siena.asm
EQ_:                03AC DEFINED AT LINE 344 IN Siena.asm
EQ1:                03AD DEFINED AT LINE 346 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
GT_:                03B1 DEFINED AT LINE 350 IN Siena.asm
LT_:                03B5 DEFINED AT LINE 355 IN Siena.asm
LT1:                03B7 DEFINED AT LINE 358 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
DIV_:               03C2 DEFINED AT LINE 366 IN Siena.asm
COMMENT_:           03D1 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
NOP_:               03DA DEFINED AT LINE 385 IN Siena.asm
SHL:                03DC DEFINED AT LINE 395 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
SHL1:               03E4 DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
SHL2:               03E5 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHR:                03EC DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
SHR1:               03F4 DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
SHR2:               03F8 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
MUL:                03FF DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
MUL2:               0409 DEFINED AT LINE 437 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
NUM:                041B DEFINED AT LINE 451 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0424 DEFINED AT LINE 457 IN Siena.asm
                    > USED AT LINE 455 IN Siena.asm
NUM1:               0425 DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
NUM2:               043D DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
NUM3:               0448 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 480 IN Siena.asm
HEXNUM:             044B DEFINED AT LINE 489 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            044E DEFINED AT LINE 491 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
HEXNUM2:            0456 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
STRING:             0468 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
STRING2:            0473 DEFINED AT LINE 519 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
CHAR:               0481 DEFINED AT LINE 529 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
CHAR1:              0484 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
CHAR2:              0490 DEFINED AT LINE 540 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR3:              0493 DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PAREN:              0496 DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PARENEND:           0498 DEFINED AT LINE 555 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              049A DEFINED AT LINE 567 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
BLOCK1:             049E DEFINED AT LINE 571 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 594 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 602 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
BLOCK2:             04C4 DEFINED AT LINE 595 IN Siena.asm
BLOCK3:             04C7 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 589 IN Siena.asm
                    > USED AT LINE 592 IN Siena.asm
BLOCK4:             04CD DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
XXBLOCKEND:         04D3 DEFINED AT LINE 609 IN Siena.asm
BLOCKEND:           04E8 DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
ARG:                051F DEFINED AT LINE 661 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               053D DEFINED AT LINE 684 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              053F DEFINED AT LINE 703 IN Siena.asm
GET:                053F DEFINED AT LINE 704 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
GET1:               0540 DEFINED AT LINE 706 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
GET2:               054E DEFINED AT LINE 715 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
SET:                0551 DEFINED AT LINE 720 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
SET1:               0563 DEFINED AT LINE 734 IN Siena.asm
                    > USED AT LINE 729 IN Siena.asm
IF:                 0566 DEFINED AT LINE 740 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
IFTE:               0568 DEFINED AT LINE 747 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
SWITCH:             056A DEFINED AT LINE 777 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
LOOP:               0574 DEFINED AT LINE 790 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
WORDS:              0576 DEFINED AT LINE 840 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
BYTES:              057B DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
BYTES1:             057E DEFINED AT LINE 845 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
ARRAY:              0583 DEFINED AT LINE 849 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARRAYEND:           0585 DEFINED AT LINE 860 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
HASH:               0587 DEFINED AT LINE 955 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
DEF:                0592 DEFINED AT LINE 965 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
CLOSURE:            0596 DEFINED AT LINE 970 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
DEF0:               0596 DEFINED AT LINE 971 IN Siena.asm
DEF1:               05B0 DEFINED AT LINE 994 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
DEF2:               05D4 DEFINED AT LINE 1018 IN Siena.asm
DEF3:               05D7 DEFINED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
DEF4:               05DD DEFINED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
DEF5:               05F0 DEFINED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
LET:                05F3 DEFINED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
LET2:               0617 DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
ADDR:               061A DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
ADDR1:              0626 DEFINED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
SYMBOL:             062E DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
SYMBOL0:            0636 DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
SYMBOL1:            0638 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
SYMBOL2:            0647 DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
IDENT:              0655 DEFINED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
IDENT0:             065C DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
IDENT1:             065E DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
IDENT2:             066D DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
IDENT3:             0681 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
FRAC:               0682 DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
SQRT1:              0688 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
ABS1:               0695 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
MOD:                06A2 DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
EQUALS:             06AE DEFINED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHANEQ:         06B6 DEFINED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
LESSTHAN:           06BB DEFINED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
LESSTHAN1:          06C0 DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
TRUE1:              06C3 DEFINED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
FALSE1:             06C9 DEFINED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
INPUT:              06CF DEFINED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
OUTPUT:             06DA DEFINED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
KEY:                06E3 DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
NEG:                06EC DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
FILTER:             06F3 DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
MAP:                06F3 DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
HASHSTR:            06F5 DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
HASHSTR1:           06F8 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
HASHSTR2:           06FD DEFINED AT LINE 1284 IN Siena.asm
DEFINEENTRY:        070E DEFINED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
DEFINEENTRY0:       0713 DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
DEFINEENTRY1:       0722 DEFINED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
DEFINEENTRY2:       0728 DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
DEFINEENTRY3:       072A DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
LOOKUPENTRY:        0734 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
LOOKUPENTRY0:       0739 DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
LOOKUPENTRY1:       0748 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1352 IN Siena.asm
LOOKUPENTRY2:       074E DEFINED AT LINE 1364 IN Siena.asm
LOOKUPENTRY3:       0750 DEFINED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
DIVIDE:             0758 DEFINED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
DIVIDE1:            075D DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
DIVIDE2:            076A DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
DIVIDE3:            076B DEFINED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
SQUAREROOT:         0771 DEFINED AT LINE 1402 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
SQUAREROOT1:        0776 DEFINED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
SQUAREROOT4:        0791 DEFINED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1420 IN Siena.asm
SQUAREROOT5:        0798 DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1429 IN Siena.asm
PRTDEC:             079B DEFINED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            07AA DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
PRTDEC1:            07CC DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
PRTDEC2:            07CE DEFINED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
PRTDEC3:            07DE DEFINED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
PRTDEC4:            07DF DEFINED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
PRTHEX:             07E3 DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            07EE DEFINED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
PRTHEX3:            07F7 DEFINED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
PRTSTR0:            0802 DEFINED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
PRTSTR:             0806 DEFINED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
NESTING:            080B DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
NESTING1A:          0816 DEFINED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
NESTING1:           0819 DEFINED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
NESTING2:           0828 DEFINED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
NESTING3:           082A DEFINED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
NESTING4:           0835 DEFINED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
PROMPT:             0837 DEFINED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
CRLF:               0840 DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1808 IN Siena.asm
PRINTSTR:           0847 DEFINED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 140
DEFINE:             084E DEFINED AT LINE 1575 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
INIT:               0866 DEFINED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 40
INIT1:              0880 DEFINED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
START:              09CF DEFINED AT LINE 1732 IN Siena.asm
INTERPRET:          09E5 DEFINED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1837 IN Siena.asm
INTERPRET2:         09EF DEFINED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
INTERPRET3:         09F7 DEFINED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
INTERPRET4:         09FD DEFINED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
WAITCHAR:           0A02 DEFINED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
                    > USED AT LINE 1811 IN Siena.asm
MACRO:              0A11 DEFINED AT LINE 1773 IN Siena.asm
WAITCHAR1:          0A13 DEFINED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
WAITCHAR3:          0A21 DEFINED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
WAITCHAR4:          0A37 DEFINED AT LINE 1815 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
NEXT:               0A3F DEFINED AT LINE 1821 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
NEXT1:              0A4E DEFINED AT LINE 1832 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
ESCAPE:             0A59 DEFINED AT LINE 1839 IN Siena.asm
                    > USED AT LINE 1834 IN Siena.asm
EXIT:               0A5D DEFINED AT LINE 1844 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
EXEC:               0A74 DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0A8B DEFINED AT LINE 1882 IN Siena.asm
                    > USED AT LINE 1872 IN Siena.asm
CALL:               0A8D DEFINED AT LINE 1887 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
CALL1:              0A8E DEFINED AT LINE 1889 IN Siena.asm
CALL2:              0AAD DEFINED AT LINE 1916 IN Siena.asm
                    > USED AT LINE 1892 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1598 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 372 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
                    > USED AT LINE 727 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1816 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 679 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 1791 IN Siena.asm
                    > USED AT LINE 1800 IN Siena.asm
                    > USED AT LINE 1817 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1604 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2328S43:  408B DEFINED AT LINE 34
                    > USED AT LINE 10
