0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD DB 07               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   CE                     DB   lsb(nop_)   ; SP
0221   9B                     DB   lsb(not_)   ; !
0222   CE                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CE                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   CE                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   B6                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   CE                     DB   lsb(nop_)   ; ;
023C   A9                     DB   lsb(lt_)   ; <
023D   A0                     DB   lsb(eq_)   ; =
023E   A5                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   C5                     DB   lsb(comment_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   CE                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0F 04               JP   num   
0303                HEXNUM_:      
0303   C3 3F 04               JP   hexnum   
0306                ARG_:        
0306   C3 92 04               JP   arg   
0309                PROP_:       
0309   C3 B0 04               JP   prop   
030C                STRING_:      
030C   C3 5C 04               JP   string   
030F                PAREN_:      
030F   C3 8A 04               JP   paren   
0312                PARENEND_:      
0312   C3 8C 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD 58 07               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 7B 07               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD 10 07               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 9A 18               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   C3 B3 04               JP   get1   
034C                BLOCK_:      
034C   C3 8E 04               JP   block   
034F                BLOCKEND_:      
034F   C3 90 04               JP   blockend   
0352                CHAR_:       
0352   C3 75 04               JP   char   
0355                ARRAY_:      
0355   C3 F6 04               JP   array   
0358                ARRAYEND_:      
0358   C3 F8 04               JP   arrayEnd   
035B                IDENT_:      
035B   C3 CA 05               JP   ident   
035E                SYMBOL_:      
035E   C3 A3 05               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD 58 07               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 F3 03               JP   mul   
0393                SUB_:        ; Subtract the value 2nd on stack from top of stack
0393   D1                     POP   de   
0394   E1                     POP   hl   ; Entry point for INVert
0395                SUB2:        
0395   B7                     OR   a   ; Entry point for NEGate
0396   ED 52                  SBC   hl,de   
0398   E5                     PUSH   hl   
0399   DD E9                  JP   (ix)   
039B                NOT_:        ; logical invert, any non zero value
039B   21 00 00               LD   hl,0   ; is considered true
039E   18 01                  JR   eq1   
03A0                EQ_:         
03A0   E1                     POP   hl   
03A1                EQ1:         
03A1   D1                     POP   de   
03A2   C3 23 06               JP   equals   
03A5                GT_:         
03A5   D1                     POP   de   
03A6   E1                     POP   hl   
03A7   18 02                  JR   lt1   
03A9                LT_:         
03A9   E1                     POP   hl   
03AA   D1                     POP   de   
03AB                LT1:         
03AB   03                     INC   bc   
03AC   0A                     LD   a,(bc)   
03AD   FE 3D                  CP   "="   
03AF   CA 2B 06               JP   z,lessthaneq   
03B2   0B                     DEC   bc   
03B3   C3 30 06               JP   lessthan   
03B6                DIV_:        
03B6   D1                     POP   de   ; get first value
03B7   E1                     POP   hl   ; get 2nd value
03B8   C5                     PUSH   bc   ; preserve the IP
03B9   44 4D                  LD   bc,hl   
03BB   CD CD 06               CALL   divide   
03BE   22 98 18               LD   (vFrac),hl   
03C1   C1                     POP   bc   
03C2   D5                     PUSH   de   ; push result
03C3   DD E9                  JP   (ix)   
03C5                COMMENT_:      
03C5   03                     INC   bc   ; point to next char
03C6   0A                     LD   a,(bc)   
03C7   FE 20                  CP   " "   ; terminate on any char less than SP
03C9   30 FA                  JR   nc,comment_   
03CB   0B                     DEC   bc   
03CC   DD E9                  JP   (ix)   
03CE                NOP_:        
03CE   DD E9                  JP   (ix)   
03D0                             ;*******************************************************************
03D0                             ; word operators
03D0                             ;*******************************************************************
03D0                             ; shl
03D0                             ; value count -- value2          shift left count places
03D0                SHL:         
03D0   50 59                  LD   de,bc   ; save IP
03D2   C1                     POP   bc   ; bc = count
03D3   41                     LD   b,c   ; b = loop counter
03D4   E1                     POP   hl   
03D5   04                     INC   b   ; test for counter=0 case
03D6   18 01                  JR   shl2   
03D8                SHL1:        
03D8   29                     ADD   hl,hl   ; left shift hl
03D9                SHL2:        
03D9   10 FD                  DJNZ   shl1   
03DB   E5                     PUSH   hl   
03DC   42 4B                  LD   bc,de   ; restore IP
03DE   DD E9                  JP   (ix)   
03E0                             ; shr
03E0                             ; value count -- value2          shift left count places
03E0                SHR:         
03E0   50 59                  LD   de,bc   ; save IP
03E2   C1                     POP   bc   ; bc = count
03E3   41                     LD   b,c   ; b = loop counter
03E4   E1                     POP   hl   
03E5   04                     INC   b   ; test for counter=0 case
03E6   18 04                  JR   shr2   
03E8                SHR1:        
03E8   CB 3C                  SRL   h   ; right shift hl
03EA   CB 1D                  RR   l   
03EC                SHR2:        
03EC   10 FA                  DJNZ   shr1   
03EE   E5                     PUSH   hl   
03EF   42 4B                  LD   bc,de   ; restore IP
03F1   DD E9                  JP   (ix)   
03F3                MUL:         ;=19
03F3   D1                     POP   de   ; get first value
03F4   E1                     POP   hl   
03F5   C5                     PUSH   bc   ; Preserve the IP
03F6   44                     LD   b,h   ; bc = 2nd value
03F7   4D                     LD   c,l   
03F8   21 00 00               LD   hl,0   
03FB   3E 10                  LD   a,16   
03FD                MUL2:        
03FD   29                     ADD   hl,hl   
03FE   CB 13                  RL   e   
0400   CB 12                  RL   d   
0402   30 04                  JR   nc,$+6   
0404   09                     ADD   hl,bc   
0405   30 01                  JR   nc,$+3   
0407   13                     INC   de   
0408   3D                     DEC   a   
0409   20 F2                  JR   nz,mul2   
040B   C1                     POP   bc   ; Restore the IP
040C   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040D   DD E9                  JP   (ix)   
040F                NUM:         
040F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0412   0A                     LD   a,(bc)   ; Get numeral or -
0413   FE 2D                  CP   "-"   
0415   20 01                  JR   nz,num0   
0417   03                     INC   bc   ; move to next char, no flags affected
0418                NUM0:        
0418   08                     EX   af,af'   ; save zero flag = 0 for later
0419                NUM1:        
0419   0A                     LD   a,(bc)   ; read digit
041A   D6 30                  SUB   "0"   ; less than 0?
041C   38 13                  JR   c,num2   ; not a digit, exit loop
041E   FE 0A                  CP   10   ; greater that 9?
0420   30 0F                  JR   nc,num2   ; not a digit, exit loop
0422   03                     INC   bc   ; inc IP
0423   54 5D                  LD   de,hl   ; multiply hl * 10
0425   29                     ADD   hl,hl   
0426   29                     ADD   hl,hl   
0427   19                     ADD   hl,de   
0428   29                     ADD   hl,hl   
0429   85                     ADD   a,l   ; add digit in a to hl
042A   6F                     LD   l,a   
042B   3E 00                  LD   a,0   
042D   8C                     ADC   a,h   
042E   67                     LD   h,a   
042F   18 E8                  JR   num1   
0431                NUM2:        
0431   0B                     DEC   bc   
0432   08                     EX   af,af'   ; restore zero flag
0433   20 07                  JR   nz,num3   
0435   EB                     EX   de,hl   ; negate the value of hl
0436   21 00 00               LD   hl,0   
0439   B7                     OR   a   ; jump to sub2
043A   ED 52                  SBC   hl,de   
043C                NUM3:        
043C   E5                     PUSH   hl   ; Put the number on the stack
043D   DD E9                  JP   (ix)   ; and process the next character
043F                HEXNUM:      ; 
043F   21 00 00               LD   hl,0   ; Clear hl to accept the number
0442                HEXNUM1:      
0442   03                     INC   bc   
0443   0A                     LD   a,(bc)   ; Get the character which is a numeral
0444   CB 77                  BIT   6,a   ; is it uppercase alpha?
0446   28 02                  JR   z,hexnum2   ; no a decimal
0448   D6 07                  SUB   7   ; sub 7  to make $a - $F
044A                HEXNUM2:      
044A   D6 30                  SUB   $30   ; Form decimal digit
044C   DA 31 04               JP   c,num2   
044F   FE 10                  CP   $0F+1   
0451   D2 31 04               JP   nc,num2   
0454   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0455   29                     ADD   hl,hl   ; 4X
0456   29                     ADD   hl,hl   ; 8X
0457   29                     ADD   hl,hl   ; 16X
0458   85                     ADD   a,l   ; add into bottom of hl
0459   6F                     LD   l,a   ; 
045A   18 E6                  JR   hexnum1   
045C                             ; 
045C                STRING:      
045C   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
0460   D5                     PUSH   de   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   12                     LD   (de),a   
0465   13                     INC   de   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   12                     LD   (de),a   
046E   13                     INC   de   
046F   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0473   DD E9                  JP   (ix)   
0475                CHAR:        
0475   21 00 00               LD   hl,0   ; if `` is empty
0478                CHAR1:       
0478   03                     INC   bc   ; point to next char
0479   0A                     LD   a,(bc)   
047A   FE 60                  CP   "`"   ; ` is the string terminator
047C   28 09                  JR   z,char3   
047E   FE 5C                  CP   $5c   ; \ is the escape
0480   20 02                  JR   nz,char2   
0482   03                     INC   bc   
0483   0A                     LD   a,(bc)   
0484                CHAR2:       
0484   6F                     LD   l,a   
0485   18 F1                  JR   char1   
0487                CHAR3:       
0487   E5                     PUSH   hl   
0488   DD E9                  JP   (ix)   
048A                PAREN:       
048A   DD E9                  JP   (ix)   
048C                             ;     ld ix,paren2
048C                             ;     jr block
048C                             ; paren2:
048C                             ;     ld ix,next
048C                             ;     jp exec
048C                PARENEND:      
048C   DD E9                  JP   (ix)   
048E                             ;     pop hl                      ; hl = last result
048E                             ;     pop de
048E                             ;     pop bc
048E                             ;     pop bc
048E                             ;     push hl
048E                             ;     ld iyh,d
048E                             ;     ld iyl,e
048E                             ;     ld ix,next
048E                             ;     jp (ix)
048E                BLOCK:       
048E   DD E9                  JP   (ix)   
0490                             ;     inc bc
0490                             ;     push bc                     ; return first opcode of block
0490                             ;     ld d,1                      ; nesting: count first parenthesis
0490                             ; block1:                         ; Skip to end of definition
0490                             ;     ld a,(bc)                   ; Get the next character
0490                             ;     inc bc                      ; Point to next character
0490                             ;     cp " " + 1                  ; ignore whitespace
0490                             ;     jr c,block1
0490                             ;     cp ")"
0490                             ;     jr z,block4
0490                             ;     cp "}"
0490                             ;     jr z,block4
0490                             ;     cp "]"
0490                             ;     jr z,block4
0490                             ;     cp "("
0490                             ;     jr z,block3
0490                             ;     cp "{"
0490                             ;     jr z,block3
0490                             ;     cp "["
0490                             ;     jr z,block3
0490                             ;     cp "'"
0490                             ;     jr z,block3
0490                             ;     cp "`"
0490                             ;     jr nz,block1
0490                             ; block2:
0490                             ;     inc d
0490                             ;     jr block1
0490                             ; block3:
0490                             ;     ld a,$80
0490                             ;     xor d
0490                             ;     ld b,a
0490                             ;     jr block1
0490                             ; block4:
0490                             ;     dec d
0490                             ;     jr nz, block1                 ; get the next element
0490                             ;     dec bc                      ; balanced, exit
0490                             ;     jp (ix)
0490                BLOCKEND:      
0490   DD E9                  JP   (ix)   
0492                             ;     pop hl                      ; hl = last result
0492                             ;     ld d,iyh                    ; de = BP
0492                             ;     ld e,iyl
0492                             ;     ex de,hl                    ; hl = BP, de = result
0492                             ;     ld sp,hl                    ; sp = BP
0492                             ;     pop hl                      ; hl = old BP
0492                             ;     pop bc                      ; pop SCP (discard)
0492                             ;     pop bc                      ; bc = IP
0492                             ;     ld sp,hl                    ; sp = old BP
0492                             ;     ld iy,0                     ; iy = sp
0492                             ;     add iy,sp
0492                             ;     push de                     ; push result
0492                             ;     jp (ix)
0492                             ; $1..9
0492                             ; returns value of arg
0492                ARG:         
0492   03                     INC   bc   ; get next char
0493   0A                     LD   a,(bc)   
0494   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0496   E6 0F                  AND   $0F   ; mask
0498   87                     ADD   a,a   ; double
0499   6F                     LD   l,a   ; hl = offset into args
049A   26 00                  LD   h,0   
049C   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
049F   FD 56 03               LD   d,(iy+3)   
04A2   EB                     EX   de,hl   ; hl = SCP - offset
04A3   B7                     OR   a   
04A4   ED 52                  SBC   hl,de   
04A6   2B                     DEC   hl   ; de = arg
04A7   22 9E 18               LD   (vSetter),hl   ; store address in setter
04AA   56                     LD   d,(hl)   
04AB   2B                     DEC   hl   
04AC   5E                     LD   e,(hl)   
04AD   D5                     PUSH   de   ; push arg
04AE   DD E9                  JP   (ix)   
04B0                             ; @1..9
04B0                             ; returns address of prop
04B0                PROP:        
04B0                             ;     inc bc                      ; get next char
04B0                             ;     ld a,(bc)
04B0                             ;     sub "1"                     ; treat as a digit, 1 based index
04B0                             ;     and $0F                     ; mask
04B0                             ;     add a,a                     ; double
04B0                             ;     ld l,a                      ; hl = offset into args
04B0                             ;     ld h,0
04B0                             ;     ld e,(iy+6)                 ; de = closure array
04B0                             ;     ld d,(iy+7)
04B0                             ;     add hl,de                   ; find address of prop in array
04B0                             ;     ld (vSetter),hl             ; store address in setter
04B0                             ;     ld e,(hl)
04B0                             ;     inc hl
04B0                             ;     ld d,(hl)
04B0                             ;     push de                     ; push prop value
04B0   DD E9                  JP   (ix)   
04B2                             ; addr -- value
04B2                DOLET:       
04B2                GET:         
04B2   E1                     POP   hl   
04B3                GET1:        
04B3   22 9E 18               LD   (vSetter),hl   ; store address in setter
04B6   16 00                  LD   d,0   
04B8   5E                     LD   e,(hl)   
04B9   3A 9A 18               LD   a,(vDataWidth)   
04BC   3D                     DEC   a   
04BD   28 02                  JR   z,get2   
04BF   23                     INC   hl   
04C0   56                     LD   d,(hl)   
04C1                GET2:        
04C1   D5                     PUSH   de   
04C2   DD E9                  JP   (ix)   
04C4                             ; newvalue -- oldvalue
04C4                SET:         
04C4   D1                     POP   de   ; new value
04C5   E1                     POP   hl   ; discard last accessed value
04C6   2A 9E 18               LD   hl,(vSetter)   
04C9   7E                     LD   a,(hl)   ; save lsb of old value
04CA   73                     LD   (hl),e   
04CB   5F                     LD   e,a   
04CC   3A 9A 18               LD   a,(vDataWidth)   
04CF   3D                     DEC   a   
04D0   28 04                  JR   z,set1   
04D2   23                     INC   hl   
04D3   7E                     LD   a,(hl)   ; save msb of old value
04D4   72                     LD   (hl),d   
04D5   57                     LD   d,a   
04D6                SET1:        
04D6   D5                     PUSH   de   ; return old value
04D7   DD E9                  JP   (ix)   
04D9                             ; ifte
04D9                             ; condition then -- value
04D9                IF:          
04D9   DD E9                  JP   (ix)   
04DB                             ; ld de,0                      ; NUL pointer for else
04DB                             ; jr ifte1
04DB                             ; ifte
04DB                             ; condition then else -- value
04DB                IFTE:        
04DB   DD E9                  JP   (ix)   
04DD                             ;     pop de                      ; de = else
04DD                             ; ifte1:
04DD                             ;     pop hl                      ; hl = then
04DD                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
04DD                             ;     inc hl                      ; check for true
04DD                             ;     ld a,h
04DD                             ;     or l
04DD                             ;     pop hl                      ; hl = then
04DD                             ;     jr z,ifte2
04DD                             ;     ex de,hl                    ; condition = false, hl = else
04DD                             ; ifte2:
04DD                             ;     ld a,h                      ; check if hl is NUL
04DD                             ;     or l
04DD                             ;     jr z,ifte3
04DD                             ;     push bc                     ; push IP
04DD                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
04DD                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
04DD                             ;     push de                     ; push SCP
04DD                             ;     push iy                     ; push BP
04DD                             ;     ld iy,0                     ; iy = sp
04DD                             ;     add iy,sp
04DD                             ;     ld bc,hl                    ; IP = then
04DD                             ;     dec bc
04DD                             ; ifte3:
04DD                             ;     jp (ix)
04DD                             ; switch
04DD                             ; index array -- value
04DD                SWITCH:      
04DD   D1                     POP   de   ; de = array
04DE   E1                     POP   hl   ; hl = index
04DF   29                     ADD   hl,hl   ; indec *= 2
04E0   19                     ADD   hl,de   ; add array[0]
04E1   4E                     LD   c,(hl)   ; bc = case
04E2   23                     INC   hl   
04E3   46                     LD   b,(hl)   
04E4   0B                     DEC   bc   
04E5   DD E9                  JP   (ix)   
04E7                             ; c b --
04E7                             ; loops until c = 0
04E7                LOOP:        
04E7   DD E9                  JP   (ix)   
04E9                             ;     pop de                      ; de = block                    c
04E9                             ;     pop hl                      ; hl = condition
04E9                             ;     push de
04E9                             ;     push bc                     ; push IP
04E9                             ;     ld bc,de                    ; bc = block
04E9                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
04E9                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
04E9                             ;     push de                     ; push SCP
04E9                             ;     push iy                     ; push BP
04E9                             ;     ld iy,0                     ; iy = sp
04E9                             ;     add iy,sp
04E9                             ; loop1:
04E9                             ;     ld a,l                      ; bc = block, hl = condition = zero?
04E9                             ;     or h
04E9                             ;     jr z,loop3
04E9                             ;     ld de,loop2-1               ; IP return address
04E9                             ;     push de
04E9                             ;     ld e,(iy+2)                 ; push parent SCP
04E9                             ;     ld d,(iy+3)
04E9                             ;     push de                     ;
04E9                             ;     push iy                     ; push BP
04E9                             ;     ld iy,0                     ; iy = sp
04E9                             ;     add iy,sp
04E9                             ;     push hl                     ; push condition
04E9                             ;     dec bc
04E9                             ;     jp (ix)
04E9                             ; loop2:
04E9                             ;     db ESC                      ; escape from interpreter
04E9                             ;     ld c,(iy+6)                 ; bc = block
04E9                             ;     ld b,(iy+7)
04E9                             ;     pop hl                      ; hl = condition
04E9                             ;     jr loop1
04E9                             ; loop3:
04E9                             ;     ld d,iyh                    ; de = BP
04E9                             ;     ld e,iyl
04E9                             ;     ex de,hl                    ; hl = BP, de = result
04E9                             ;     ld sp,hl                    ; sp = BP
04E9                             ;     pop hl                      ; hl = old BP
04E9                             ;     pop bc                      ; pop SCP (discard)
04E9                             ;     pop bc                      ; bc = IP
04E9                             ;     ld sp,hl                    ; sp = old BP
04E9                             ;     ld iy,0                     ; iy = sp
04E9                             ;     add iy,sp
04E9                             ;     ld ix,next                  ; needed?
04E9                             ;     jp (ix)
04E9                WORDS:       
04E9   21 02 00               LD   hl,2   
04EC   18 03                  JR   bytes1   
04EE                BYTES:       
04EE   21 01 00               LD   hl,1   
04F1                BYTES1:      
04F1   22 9A 18               LD   (vDataWidth),hl   
04F4   DD E9                  JP   (ix)   
04F6                ARRAY:       
04F6   DD E9                  JP   (ix)   
04F8                             ;     push bc                     ; create stack frame, push IP
04F8                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
04F8                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
04F8                             ;     push de                     ; push SCP
04F8                             ;     push iy                     ; push BP
04F8                             ;     ld iy,0                     ; BP = SP
04F8                             ;     add iy,sp
04F8                             ;     jp (ix)
04F8                ARRAYEND:      
04F8   DD E9                  JP   (ix)   
04FA                             ;     ld d,iyh                    ; de = BP
04FA                             ;     ld e,iyl
04FA                             ;     ld ixh,d                    ; ix = BP
04FA                             ;     ld ixl,e
04FA                             ;     ld hl,de                    ; hl = de
04FA                             ;     or a
04FA                             ;     sbc hl,sp                   ; hl = array count (items on stack)
04FA                             ;     srl h
04FA                             ;     rr l
04FA                             ;     ex de,hl                    ; de = count
04FA                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
04FA                             ;     ld (hl),e
04FA                             ;     inc hl
04FA                             ;     ld (hl),d
04FA                             ;     inc hl                      ; hl = array[0], de = count
04FA                             ;     ld a,(vDataWidth)           ; vDataWidth=1?
04FA                             ;     cp 1
04FA                             ;     jr nz, arrayEnd2
04FA                             ; arrayEnd1:                      ; byte
04FA                             ;     ld a,(ix-2)
04FA                             ;     ld (hl),a
04FA                             ;     inc hl
04FA                             ;     dec ix
04FA                             ;     dec ix
04FA                             ;     dec de
04FA                             ;     ld a,e
04FA                             ;     or d
04FA                             ;     jr nz,arrayEnd1
04FA                             ;     jr arrayEnd3
04FA                             ; arrayEnd2:                      ; word
04FA                             ;     ld a,(ix-2)
04FA                             ;     ld (hl),a
04FA                             ;     inc hl
04FA                             ;     ld a,(ix-1)
04FA                             ;     ld (hl),a
04FA                             ;     inc hl
04FA                             ;     dec ix
04FA                             ;     dec ix
04FA                             ;     dec de
04FA                             ;     ld a,e
04FA                             ;     or d
04FA                             ;     jr nz,arrayEnd2
04FA                             ; arrayEnd3:
04FA                             ;     ld d,iyh                    ; de = BP, hl = end of array
04FA                             ;     ld e,iyl
04FA                             ;     ex de,hl                    ; hl = BP, de = end of array
04FA                             ;     ld sp,hl                    ; sp = BP
04FA                             ;     pop hl                      ; hl = old BP, de = end of array
04FA                             ;     pop ix                      ; pop SCP (discard)
04FA                             ;     pop ix                      ; pop IP (discard)
04FA                             ;     ex de,hl
04FA                             ;     ld iyh,d
04FA                             ;     ld iyl,e
04FA                             ;     ex de,hl
04FA                             ;     ; ld sp,hl                    ; sp = old BP
04FA                             ;     ; ld iy,0                     ; iy = sp
04FA                             ;     ; add iy,sp
04FA                             ;     ld ix,next
04FA                             ;     ld hl,(vHeapPtr)            ; hl = array[0], de = end of array
04FA                             ;     inc hl
04FA                             ;     inc hl
04FA                             ;     push hl                     ; return array[0]
04FA                             ;     ex de,hl                    ; hl = end of array, de = array[0]
04FA                             ;     or a
04FA                             ;     sbc hl,de                   ; hl = size = end of array - array[0]
04FA                             ;     ex de,hl
04FA                             ;     ld hl,(vHeapPtr)            ; hl = array[-2]
04FA                             ;     ld (hl),e                   ; array[-2] = size
04FA                             ;     inc hl
04FA                             ;     ld (hl),d
04FA                             ;     inc hl
04FA                             ;     add hl,de
04FA                             ;     ld (vHeapPtr),hl
04FA                             ;     jp (ix)
04FA                             ; str -- num
04FA                HASH:        
04FA   E1                     POP   hl   
04FB   C5                     PUSH   bc   
04FC   44 4D                  LD   bc,hl   
04FE   CD 6A 06               CALL   hashStr   
0501   C1                     POP   bc   
0502   E5                     PUSH   hl   
0503   DD E9                  JP   (ix)   
0505                             ; symbol block arity --
0505                DEF:         
0505   21 00 00               LD   hl,0   ; array = 0
0508   E5                     PUSH   hl   ; falls through
0509                             ; symbol block arity array --
0509                CLOSURE:      
0509                DEF0:        
0509   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
050C   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
050E   23                     INC   hl   
050F   36 07                  LD   (hl),lsb(call)   
0511   23                     INC   hl   
0512   36 0A                  LD   (hl),msb(call)   
0514   23                     INC   hl   
0515   D1                     POP   de   ; pop array
0516   73                     LD   (hl),e   ; compile array
0517   23                     INC   hl   
0518   72                     LD   (hl),d   
0519   23                     INC   hl   
051A   D1                     POP   de   
051B   73                     LD   (hl),e   ; compile arity
051C   23                     INC   hl   
051D   72                     LD   (hl),d   
051E   23                     INC   hl   
051F   D1                     POP   de   ; de = block
0520   C5                     PUSH   bc   ; (sp) = IP (sp+2) = symbol
0521   06 01                  LD   b,1   ; b = nesting
0523                DEF1:        
0523   1A                     LD   a,(de)   
0524   13                     INC   de   
0525   77                     LD   (hl),a   
0526   23                     INC   hl   
0527   FE 29                  CP   ")"   
0529   28 25                  JR   z,def4   
052B   FE 7D                  CP   "}"   
052D   28 21                  JR   z,def4   
052F   FE 5D                  CP   "]"   
0531   28 1D                  JR   z,def4   
0533   FE 28                  CP   "("   
0535   28 13                  JR   z,def3   
0537   FE 7B                  CP   "{"   
0539   28 0F                  JR   z,def3   
053B   FE 5B                  CP   "["   
053D   28 0B                  JR   z,def3   
053F   FE 27                  CP   "'"   
0541   28 07                  JR   z,def3   
0543   FE 60                  CP   "`"   
0545   20 DC                  JR   nz,def1   
0547                DEF2:        
0547   04                     INC   b   
0548   18 D9                  JR   def1   
054A                DEF3:        
054A   3E 80                  LD   a,$80   
054C   A8                     XOR   b   
054D   47                     LD   b,a   
054E   18 D3                  JR   def1   
0550                DEF4:        
0550   05                     DEC   b   
0551   20 D0                  JR   nz,def1   ; get the next element
0553   AF                     XOR   a   ; end with NUL ??? needed?
0554   77                     LD   (hl),a   
0555   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0559   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
055C   E1                     POP   hl   ; de = defstart, hl = IP
055D   E3                     EX   (sp),hl   ; hl = symbol, de = defstart, (sp) = IP
055E   44 4D                  LD   bc,hl   ; bc = symbol
0560   CD 83 06               CALL   defineEntry   
0563   38 00                  JR   c,def5   
0565                             ; call error
0565                             ; .cstr "Def Collision"
0565                DEF5:        
0565   C1                     POP   bc   ; bc = IP
0566   DD E9                  JP   (ix)   
0568                             ; symbol value --
0568                LET:         
0568   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
056A   E3                     EX   (sp),hl   
056B   EB                     EX   de,hl   
056C   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
056F   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0571   23                     INC   hl   
0572   36 B2                  LD   (hl),lsb(dolet)   
0574   23                     INC   hl   
0575   36 04                  LD   (hl),msb(dolet)   
0577   23                     INC   hl   
0578   73                     LD   (hl),e   
0579   23                     INC   hl   
057A   72                     LD   (hl),d   
057B   2B                     DEC   hl   
057C   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0580   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0583   E1                     POP   hl   ; de = addr, hl = IP
0584   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0585   44 4D                  LD   bc,hl   ; bc = symbol
0587   CD 83 06               CALL   defineEntry   
058A   38 00                  JR   c,let2   
058C                             ; call error
058C                             ; .cstr "Let Collision"
058C                LET2:        
058C   C1                     POP   bc   
058D   DD E9                  JP   (ix)   
058F                             ; str -- addr
058F                ADDR:        
058F   E1                     POP   hl   ; hl = hash
0590   C5                     PUSH   bc   
0591   44 4D                  LD   bc,hl   
0593   CD A9 06               CALL   lookupEntry   
0596   38 03                  JR   c,addr1   
0598   21 00 00               LD   hl,0   
059B                             ; call printStr		
059B                             ; .cstr "Undefined"
059B                             ; jp interpret
059B                ADDR1:       
059B   C1                     POP   bc   
059C   11 03 00               LD   de,3   
059F   19                     ADD   hl,de   
05A0   E5                     PUSH   hl   
05A1   DD E9                  JP   (ix)   
05A3                SYMBOL:      
05A3   03                     INC   bc   
05A4   11 00 1A               LD   de,PAD   
05A7   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
05A9   18 02                  JR   symbol1   
05AB                SYMBOL0:      ; copy to PAD area
05AB   03                     INC   bc   ; characters that are part of the identifier
05AC   13                     INC   de   
05AD                SYMBOL1:      ; 0-9 A-Z a-z _
05AD   0A                     LD   a,(bc)   
05AE   12                     LD   (de),a   
05AF   B7                     OR   a   
05B0   28 0A                  JR   z,symbol2   
05B2   6F                     LD   l,a   
05B3   7E                     LD   a,(hl)   
05B4   FE 5B                  CP   lsb(ident_)   
05B6   28 F3                  JR   z,symbol0   
05B8   FE 00                  CP   lsb(num_)   
05BA   28 EF                  JR   z,symbol0   
05BC                SYMBOL2:      
05BC   0B                     DEC   bc   
05BD   AF                     XOR   a   
05BE   12                     LD   (de),a   ; terminate string with NUL
05BF   C5                     PUSH   bc   
05C0   01 00 1A               LD   bc,PAD   
05C3   CD 6A 06               CALL   hashStr   ; hl = hash
05C6   C1                     POP   bc   
05C7   E5                     PUSH   hl   
05C8   DD E9                  JP   (ix)   
05CA                IDENT:       
05CA   11 00 1A               LD   de,PAD   
05CD   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
05CF   18 02                  JR   ident1   
05D1                IDENT0:      ; copy to PAD area
05D1   03                     INC   bc   ; characters that are part of the identifier
05D2   13                     INC   de   
05D3                IDENT1:      ; 0-9 A-Z a-z _
05D3   0A                     LD   a,(bc)   
05D4   12                     LD   (de),a   
05D5   B7                     OR   a   
05D6   28 0A                  JR   z,ident2   
05D8   6F                     LD   l,a   
05D9   7E                     LD   a,(hl)   
05DA   FE 5B                  CP   lsb(ident_)   
05DC   28 F3                  JR   z,ident0   
05DE   FE 00                  CP   lsb(num_)   
05E0   28 EF                  JR   z,ident0   
05E2                IDENT2:      
05E2   0B                     DEC   bc   
05E3   AF                     XOR   a   
05E4   12                     LD   (de),a   ; terminate string with NUL
05E5   C5                     PUSH   bc   
05E6   01 00 1A               LD   bc,PAD   
05E9   CD 6A 06               CALL   hashStr   ; hl = hash
05EC   44 4D                  LD   bc,hl   
05EE   CD A9 06               CALL   lookupEntry   
05F1   C1                     POP   bc   
05F2   38 02                  JR   c,ident3   ; todo: no entry? print an error message
05F4   DD E9                  JP   (ix)   
05F6                IDENT3:      
05F6   E9                     JP   (hl)   
05F7                FRAC:        
05F7   2A 98 18               LD   hl,(vFrac)   
05FA   E5                     PUSH   hl   
05FB   DD E9                  JP   (ix)   
05FD                SQRT1:       
05FD   E1                     POP   hl   
05FE   C5                     PUSH   bc   
05FF   CD E6 06               CALL   squareRoot   
0602   ED 43 98 18            LD   (vFrac),bc   
0606   C1                     POP   bc   
0607   D5                     PUSH   de   
0608   DD E9                  JP   (ix)   
060A                ABS1:        
060A   E1                     POP   hl   
060B   CB 7C                  BIT   7,h   
060D   C8                     RET   z   
060E   AF                     XOR   a   
060F   95                     SUB   l   
0610   6F                     LD   l,a   
0611   9F                     SBC   a,a   
0612   94                     SUB   h   
0613   67                     LD   h,a   
0614   E5                     PUSH   hl   
0615   DD E9                  JP   (ix)   
0617                MOD:         
0617   D1                     POP   de   ; get first value
0618   E1                     POP   hl   ; get 2nd value
0619   C5                     PUSH   bc   ; preserve the IP
061A   44 4D                  LD   bc,hl   
061C   CD CD 06               CALL   divide   
061F   C1                     POP   bc   
0620   E5                     PUSH   hl   ; push remainder
0621   DD E9                  JP   (ix)   
0623                             ; hl = value1, de = value2
0623                             ; hl = result
0623                EQUALS:      
0623   B7                     OR   a   ; reset the carry flag
0624   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0626   28 10                  JR   z,true1   
0628   C3 3E 06               JP   false1   
062B                             ; hl = value1 de = value2
062B                             ; hl = result
062B                LESSTHANEQ:      
062B   B7                     OR   a   
062C   ED 52                  SBC   hl,de   
062E   18 05                  JR   lessthan1   
0630                             ; hl = value1 de = value2
0630                             ; hl = result
0630                LESSTHAN:      
0630   B7                     OR   a   
0631   ED 52                  SBC   hl,de   
0633   28 09                  JR   z,false1   
0635                LESSTHAN1:      
0635   FA 3E 06               JP   m,false1   
0638                TRUE1:       
0638   21 FF FF               LD   hl,TRUE   
063B   E5                     PUSH   hl   
063C   DD E9                  JP   (ix)   
063E                FALSE1:      
063E   21 00 00               LD   hl,FALSE   
0641   E5                     PUSH   hl   
0642   DD E9                  JP   (ix)   
0644                             ; Z80 port input
0644                             ; port -- value
0644                INPUT:       
0644   E1                     POP   hl   
0645   59                     LD   e,c   ; save IP
0646   4D                     LD   c,l   
0647   ED 68                  IN   l,(c)   
0649   26 00                  LD   h,0   
064B   4B                     LD   c,e   ; restore IP
064C   E5                     PUSH   hl   
064D   DD E9                  JP   (ix)   
064F                             ; Z80 port output
064F                             ; value port --
064F                OUTPUT:      
064F   E1                     POP   hl   
0650   59                     LD   e,c   ; save IP
0651   4D                     LD   c,l   
0652   E1                     POP   hl   
0653   ED 69                  OUT   (c),l   
0655   4B                     LD   c,e   ; restore IP
0656   DD E9                  JP   (ix)   
0658                KEY:         
0658   CD 81 00               CALL   getchar   
065B   26 00                  LD   h,0   
065D   6F                     LD   l,a   
065E   E5                     PUSH   hl   
065F   DD E9                  JP   (ix)   
0661                NEG:         
0661   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0664   D1                     POP   de   
0665   C3 95 03               JP   sub2   ; use the SUBtract routine
0668                FILTER:      
0668                MAP:         
0668                SCAN:        
0668   DD E9                  JP   (ix)   
066A                             ; -------------------------------------------------------------------------------
066A                             ; hash C-string
066A                             ; BC = str
066A                             ; HL = hash
066A                HASHSTR:      
066A   21 00 00               LD   hl,0   
066D                HASHSTR1:      
066D   0A                     LD   a,(bc)   ; load next char
066E   03                     INC   bc   
066F   FE 00                  CP   0   ; NUL?
0671   C8                     RET   z   
0672                HASHSTR2:      
0672   16 00                  LD   d,0   
0674   5F                     LD   e,a   
0675   19                     ADD   hl,de   
0676   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0678   29                     ADD   hl,hl   ; shift left
0679   19                     ADD   hl,de   ; add
067A   29                     ADD   hl,hl   ; shift left
067B   29                     ADD   hl,hl   ; shift left
067C   29                     ADD   hl,hl   ; shift left
067D   29                     ADD   hl,hl   ; shift left
067E   29                     ADD   hl,hl   ; shift left
067F   29                     ADD   hl,hl   ; shift left
0680   19                     ADD   hl,de   ; add
0681   18 EA                  JR   hashStr1   
0683                             ; add entry to hash slots and hash pointers
0683                             ; bc = hash (b = hi, c = lo), de = addr
0683                             ; sets carry if successful
0683                DEFINEENTRY:      
0683   CB 21                  SLA   c   ; lo = lo * 2
0685   69                     LD   l,c   ; lo1 = lo
0686   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0688                DEFINEENTRY0:      
0688   7E                     LD   a,(hl)   ; a = (lo1)
0689   FE FF                  CP   UNUSED   ; is it unused?
068B   28 12                  JR   z,defineEntry3   ; yes, add entry
068D   79                     LD   a,c   ; a = lo
068E   BE                     CP   (hl)   ; compare (lo1) with lo
068F   20 06                  JR   nz,defineEntry1   ; no match loop around
0691   2C                     INC   l   
0692   78                     LD   a,b   ; a = hi
0693   BE                     CP   (hl)   ; compare (lo1+1) with hi
0694   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0696   2D                     DEC   l   ; restore l
0697                DEFINEENTRY1:      
0697   2C                     INC   l   ; try next entry
0698   2C                     INC   l   
0699   79                     LD   a,c   ; compare lo and lo1
069A   BD                     CP   l   ; if equal then there's no space left, reject
069B   20 EB                  JR   nz,defineEntry0   
069D                DEFINEENTRY2:      
069D   B7                     OR   a   ; clear carry flag, failure
069E   C9                     RET      
069F                DEFINEENTRY3:      ; new entry
069F   71                     LD   (hl),c   ; (lo1) = hash lo
06A0   23                     INC   hl   
06A1   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
06A2   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
06A4   72                     LD   (hl),d   
06A5   2B                     DEC   hl   
06A6   73                     LD   (hl),e   ; (slot + 2) = address
06A7   37                     SCF      ; set carry flag, success
06A8   C9                     RET      
06A9                             ; looks up hash and returns address
06A9                             ; bc = hash
06A9                             ; returns addr in hl, sets carry if successful
06A9                LOOKUPENTRY:      
06A9   CB 21                  SLA   c   ; lo = lo * 2
06AB   69                     LD   l,c   ; lo1 = lo
06AC   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
06AE                LOOKUPENTRY0:      
06AE   7E                     LD   a,(hl)   ; a = (hl), slot
06AF   FE FF                  CP   UNUSED   ; is it unused?
06B1   28 EA                  JR   z,defineEntry2   ; yes, does not exist
06B3   79                     LD   a,c   ; a = lo
06B4   BE                     CP   (hl)   ; compare (lo1) with lo
06B5   20 06                  JR   nz,lookupEntry1   ; no match loop around
06B7   2C                     INC   l   
06B8   78                     LD   a,b   ; a = hi
06B9   BE                     CP   (hl)   ; compare (lo1+1) with hi
06BA   28 09                  JR   z,lookupEntry3   
06BC   2D                     DEC   l   
06BD                LOOKUPENTRY1:      
06BD   2C                     INC   l   
06BE   2C                     INC   l   
06BF   79                     LD   a,c   
06C0   BD                     CP   l   ; no space left, reject
06C1   20 EB                  JR   nz,lookupEntry0   
06C3                LOOKUPENTRY2:      
06C3   B7                     OR   a   ; clear carry flag, failure
06C4   C9                     RET      
06C5                LOOKUPENTRY3:      
06C5   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
06C7   56                     LD   d,(hl)   
06C8   2D                     DEC   l   ; restore l
06C9   5E                     LD   e,(hl)   ; (slot + 2) = address
06CA   EB                     EX   de,hl   
06CB   37                     SCF      
06CC   C9                     RET      
06CD                             ; division subroutine.
06CD                             ; bc: divisor, de: dividend, hl: remainder
06CD                DIVIDE:      
06CD   21 00 00               LD   hl,0   ; zero the remainder
06D0   3E 10                  LD   a,16   ; loop counter
06D2                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06D2   CB 21                  SLA   c   
06D4   CB 10                  RL   b   
06D6   ED 6A                  ADC   hl,hl   
06D8   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06DA   38 03                  JR   c,divide2   
06DC   0C                     INC   c   
06DD   18 01                  JR   divide3   
06DF                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06DF   19                     ADD   hl,de   
06E0                DIVIDE3:      
06E0   3D                     DEC   a   
06E1   20 EF                  JR   nz,divide1   
06E3   50 59                  LD   de,bc   ; result from bc to de
06E5   C9                     RET      
06E6                             ; squareroot
06E6                             ; Input: HL = value
06E6                             ; Result: DE = square root BC = remainder
06E6                SQUAREROOT:      
06E6   01 00 08               LD   bc,0800h   
06E9   59                     LD   e,c   
06EA   AF                     XOR   a   
06EB                SQUAREROOT1:      
06EB   29                     ADD   hl,hl   
06EC   CB 11                  RL   c   
06EE   ED 6A                  ADC   hl,hl   
06F0   CB 11                  RL   c   
06F2   30 02                  JR   nc,$+4   
06F4   CB C5                  SET   0,l   
06F6   7B                     LD   a,e   
06F7   87                     ADD   a,a   
06F8   5F                     LD   e,a   
06F9   87                     ADD   a,a   
06FA   CB 45                  BIT   0,l   
06FC   20 03                  JR   nz,$+5   
06FE   91                     SUB   c   
06FF   30 05                  JR   nc,squareRoot4   
0701   79                     LD   a,c   
0702   93                     SUB   e   
0703   1C                     INC   e   
0704   93                     SUB   e   
0705   4F                     LD   c,a   
0706                SQUAREROOT4:      
0706   10 E3                  DJNZ   squareRoot1   
0708   CB 45                  BIT   0,l   
070A   28 01                  JR   z,squareRoot5   
070C   04                     INC   b   
070D                SQUAREROOT5:      
070D   16 00                  LD   d,0   
070F   C9                     RET      
0710                PRTDEC:      
0710   CB 7C                  BIT   7,h   
0712   28 0B                  JR   z,prtdec0   
0714   3E 2D                  LD   a,"-"   
0716   CD 85 00               CALL   putchar   
0719   AF                     XOR   a   
071A   95                     SUB   l   
071B   6F                     LD   l,a   
071C   9F                     SBC   a,a   
071D   94                     SUB   h   
071E   67                     LD   h,a   
071F                PRTDEC0:      
071F   C5                     PUSH   bc   
0720   0E 00                  LD   c,0   ; leading zeros flag = false
0722   11 F0 D8               LD   de,-10000   
0725   CD 41 07               CALL   prtdec1   
0728   11 18 FC               LD   de,-1000   
072B   CD 41 07               CALL   prtdec1   
072E   11 9C FF               LD   de,-100   
0731   CD 41 07               CALL   prtdec1   
0734   1E F6                  LD   e,-10   
0736   CD 41 07               CALL   prtdec1   
0739   0C                     INC   c   ; flag = true for at least digit
073A   1E FF                  LD   e,-1   
073C   CD 41 07               CALL   prtdec1   
073F   C1                     POP   bc   
0740   C9                     RET      
0741                PRTDEC1:      
0741   06 2F                  LD   b,"0"-1   
0743                PRTDEC2:      
0743   04                     INC   b   
0744   19                     ADD   hl,de   
0745   38 FC                  JR   c,prtdec2   
0747   ED 52                  SBC   hl,de   
0749   3E 30                  LD   a,"0"   
074B   B8                     CP   b   
074C   20 05                  JR   nz,prtdec3   
074E   AF                     XOR   a   
074F   B1                     OR   c   
0750   C8                     RET   z   
0751   18 01                  JR   prtdec4   
0753                PRTDEC3:      
0753   0C                     INC   c   
0754                PRTDEC4:      
0754   78                     LD   a,b   
0755   C3 85 00               JP   putchar   
0758                PRTHEX:      ; display hl as a 16-bit number in hex.
0758   C5                     PUSH   bc   ; preserve the IP
0759   7C                     LD   a,h   
075A   CD 63 07               CALL   prthex2   
075D   7D                     LD   a,l   
075E   CD 63 07               CALL   prthex2   
0761   C1                     POP   bc   
0762   C9                     RET      
0763                PRTHEX2:      
0763   4F                     LD   c,a   
0764   1F                     RRA      
0765   1F                     RRA      
0766   1F                     RRA      
0767   1F                     RRA      
0768   CD 6C 07               CALL   prthex3   
076B   79                     LD   a,c   
076C                PRTHEX3:      
076C   E6 0F                  AND   0x0F   
076E   C6 90                  ADD   a,0x90   
0770   27                     DAA      
0771   CE 40                  ADC   a,0x40   
0773   27                     DAA      
0774   C3 85 00               JP   putchar   
0777                PRTSTR0:      
0777   CD 85 00               CALL   putchar   
077A   23                     INC   hl   
077B                PRTSTR:      
077B   7E                     LD   a,(hl)   
077C   B7                     OR   a   
077D   20 F8                  JR   nz,prtstr0   
077F   C9                     RET      
0780                             ; **************************************************************************
0780                             ; calculate nesting value
0780                             ; a is char to be tested,
0780                             ; e is the nesting value (initially 0)
0780                             ; e is increased by ( and [
0780                             ; e is decreased by ) and ]
0780                             ; e has its bit 7 toggled by `
0780                             ; limited to 127 levels
0780                             ; **************************************************************************
0780                NESTING:      
0780   FE 22                  CP   $22   ; quote char
0782   20 0A                  JR   nz,nesting1   
0784   CB 7B                  BIT   7,e   
0786   28 03                  JR   z,nesting1a   
0788   CB BB                  RES   7,e   
078A   C9                     RET      
078B                NESTING1A:      
078B   CB FB                  SET   7,e   
078D   C9                     RET      
078E                NESTING1:      
078E   CB 7B                  BIT   7,e   
0790   C0                     RET   nz   
0791   FE 7B                  CP   "{"   
0793   28 08                  JR   z,nesting2   
0795   FE 5B                  CP   "["   
0797   28 04                  JR   z,nesting2   
0799   FE 28                  CP   "("   
079B   20 02                  JR   nz,nesting3   
079D                NESTING2:      
079D   1C                     INC   e   
079E   C9                     RET      
079F                NESTING3:      
079F   FE 7D                  CP   "}"   
07A1   28 07                  JR   z,nesting4   
07A3   FE 5D                  CP   "]"   
07A5   28 03                  JR   z,nesting4   
07A7   FE 29                  CP   ")"   
07A9   C0                     RET   nz   
07AA                NESTING4:      
07AA   1D                     DEC   e   
07AB   C9                     RET      
07AC                PROMPT:      
07AC   CD BC 07               CALL   printStr   
07AF   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B4   C9                     RET      
07B5                CRLF:        
07B5   CD BC 07               CALL   printStr   
07B8   0D 0A 00               .CSTR   "\r\n"   
07BB   C9                     RET      
07BC                PRINTSTR:      
07BC   E3                     EX   (sp),hl   ; swap			
07BD   CD 7B 07               CALL   prtstr   
07C0   23                     INC   hl   ; inc past NUL
07C1   E3                     EX   (sp),hl   ; put it back	
07C2   C9                     RET      
07C3                DEFINE:      
07C3   E1                     POP   hl   
07C4   7E                     LD   a,(hl)   
07C5   23                     INC   hl   
07C6   44 4D                  LD   bc,hl   
07C8   5F                     LD   e,a   
07C9   16 00                  LD   d,0   
07CB   19                     ADD   hl,de   
07CC   5E                     LD   e,(hl)   
07CD   23                     INC   hl   
07CE   56                     LD   d,(hl)   
07CF   23                     INC   hl   
07D0   E5                     PUSH   hl   ; bc = str
07D1   D5                     PUSH   de   
07D2   CD 6A 06               CALL   hashStr   ; hl = hash
07D5   D1                     POP   de   
07D6   44 4D                  LD   bc,hl   
07D8   C3 83 06               JP   defineEntry   
07DB                INIT:        
07DB   DD 21 B4 09            LD   ix,next   
07DF   FD 21 80 18            LD   iy,STACK   
07E3   21 80 01               LD   hl,isysVars   
07E6   11 98 18               LD   de,sysVars   
07E9   01 10 00               LD   bc,8 * 2   
07EC   ED B0                  LDIR      
07EE   3E FF                  LD   a,UNUSED   
07F0   06 00                  LD   b,0   
07F2   21 00 1B               LD   hl,hashSlots   
07F5                INIT1:       
07F5   77                     LD   (hl),a   
07F6   23                     INC   hl   
07F7   10 FC                  DJNZ   init1   
07F9   CD C3 07               CALL   define   
07FC   04 61 62 73 00         .PSTR   "abs",0   
0801   0A 06                  DW   abs1   
0803   CD C3 07               CALL   define   
0806   05 61 64 64 72 00      .PSTR   "addr",0   
080C   8F 05                  DW   addr   
080E   CD C3 07               CALL   define   
0811   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0818   EE 04                  DW   bytes   
081A   CD C3 07               CALL   define   
081D   05 63 61 6C 6C 00      .PSTR   "call",0   
0823   07 0A                  DW   call   
0825   CD C3 07               CALL   define   
0828   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0831   09 05                  DW   closure   
0833   CD C3 07               CALL   define   
0836   04 64 65 66 00         .PSTR   "def",0   
083B   05 05                  DW   def   
083D   CD C3 07               CALL   define   
0840   05 65 78 65 63 00      .PSTR   "exec",0   
0846   E9 09                  DW   exec   
0848   CD C3 07               CALL   define   
084B   06 66 61 6C 73 65 00   .PSTR   "false",0   
0852   00 00                  DW   false   
0854   CD C3 07               CALL   define   
0857   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
085F   68 06                  DW   filter   
0861   CD C3 07               CALL   define   
0864   05 66 72 61 63 00      .PSTR   "frac",0   
086A   F7 05                  DW   frac   
086C   CD C3 07               CALL   define   
086F   04 67 65 74 00         .PSTR   "get",0   
0874   B2 04                  DW   get   
0876   CD C3 07               CALL   define   
0879   05 68 61 73 68 00      .PSTR   "hash",0   
087F   FA 04                  DW   hash   
0881   CD C3 07               CALL   define   
0884   06 69 6E 70 75 74 00   .PSTR   "input",0   
088B   44 06                  DW   input   
088D   CD C3 07               CALL   define   
0890   03 69 66 00            .PSTR   "if",0   
0894   D9 04                  DW   if   
0896   CD C3 07               CALL   define   
0899   05 69 66 74 65 00      .PSTR   "ifte",0   
089F   DB 04                  DW   ifte   
08A1   CD C3 07               CALL   define   
08A4   04 6B 65 79 00         .PSTR   "key",0   
08A9   58 06                  DW   key   
08AB   CD C3 07               CALL   define   
08AE   04 6C 65 74 00         .PSTR   "let",0   
08B3   68 05                  DW   let   
08B5   CD C3 07               CALL   define   
08B8   05 6C 6F 6F 70 00      .PSTR   "loop",0   
08BE   E7 04                  DW   loop   
08C0   CD C3 07               CALL   define   
08C3   04 6D 61 70 00         .PSTR   "map",0   
08C8   68 06                  DW   map   
08CA   CD C3 07               CALL   define   
08CD   04 6D 6F 64 00         .PSTR   "mod",0   
08D2   17 06                  DW   mod   
08D4   CD C3 07               CALL   define   
08D7   04 6E 65 67 00         .PSTR   "neg",0   
08DC   61 06                  DW   neg   
08DE   CD C3 07               CALL   define   
08E1   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
08E9   4F 06                  DW   output   
08EB   CD C3 07               CALL   define   
08EE   05 73 63 61 6E 00      .PSTR   "scan",0   
08F4   01 00                  DW   scan   
08F6   CD C3 07               CALL   define   
08F9   04 73 65 74 00         .PSTR   "set",0   
08FE   C4 04                  DW   set   
0900   CD C3 07               CALL   define   
0903   04 73 68 6C 00         .PSTR   "shl",0   
0908   D0 03                  DW   shl   
090A   CD C3 07               CALL   define   
090D   04 73 68 72 00         .PSTR   "shr",0   
0912   E0 03                  DW   shr   
0914   CD C3 07               CALL   define   
0917   05 73 71 72 74 00      .PSTR   "sqrt",0   
091D   FD 05                  DW   sqrt1   
091F   CD C3 07               CALL   define   
0922   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
092A   DD 04                  DW   switch   
092C   CD C3 07               CALL   define   
092F   05 74 72 75 65 00      .PSTR   "true",0   
0935   FF FF                  DW   true   
0937   CD C3 07               CALL   define   
093A   06 77 6F 72 64 73 00   .PSTR   "words",0   
0941   E9 04                  DW   words   
0943   C9                     RET      
0944                START:       
0944   31 80 18               LD   sp,STACK   ; start of Siena
0947   CD DB 07               CALL   init   ; setups
094A   CD BC 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
094D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
095A                INTERPRET:      
095A   CD AC 07               CALL   prompt   
095D   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0960   ED 43 9C 18            LD   (vTIBPtr),bc   
0964                INTERPRET2:      ; calc nesting (a macro might have changed it)
0964   1E 00                  LD   e,0   ; initilize nesting value
0966   C5                     PUSH   bc   ; save offset into TIB,
0967                             ; bc is also the count of chars in TIB
0967   21 00 19               LD   hl,TIB   ; hl is start of TIB
096A   18 06                  JR   interpret4   
096C                INTERPRET3:      
096C   7E                     LD   a,(hl)   ; a = char in TIB
096D   23                     INC   hl   ; inc pointer into TIB
096E   0B                     DEC   bc   ; dec count of chars in TIB
096F   CD 80 07               CALL   nesting   ; update nesting value
0972                INTERPRET4:      
0972   79                     LD   a,c   ; is count zero?
0973   B0                     OR   b   
0974   20 F6                  JR   nz,interpret3   ; if not loop
0976   C1                     POP   bc   ; restore offset into TIB
0977                WAITCHAR:      
0977   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
097A   FE 20                  CP   $20   ; compare to space
097C   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
097E   FE 00                  CP   $0   ; is it end of string? NUL end of string
0980                             ; ???? NEEDED?
0980   28 2A                  JR   z,waitchar4   
0982   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0984   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0986                MACRO:       
0986                             ;  ld (vTIBPtr),bc
0986                             ;  ld hl,ctrlCodes
0986                             ;  add a,l			            ; look up key of macros
0986                             ;  ld l,a
0986                             ;  ld e,(hl)
0986                             ;  ld a,e
0986                             ;  or a
0986                             ;  jr z,macro1
0986                             ;  ld d,msb(macros)
0986                             ;  push de
0986                             ;  call call		            ; Siena exec_ operation and jump to it
0986                             ;  db DC1,0
0986                             ; macro1:
0986                             ;  ld bc,(vTIBPtr)
0986   18 DC                  JR   interpret2   
0988                WAITCHAR1:      
0988   21 00 19               LD   hl,TIB   
098B   09                     ADD   hl,bc   
098C   77                     LD   (hl),a   ; store the character in textbuf
098D   03                     INC   bc   
098E   CD 85 00               CALL   putchar   ; echo character to screen
0991   CD 80 07               CALL   nesting   
0994   18 E1                  JR   waitchar   ; wait for next character
0996                WAITCHAR3:      
0996   21 00 19               LD   hl,TIB   
0999   09                     ADD   hl,bc   
099A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
099C   23                     INC   hl   
099D   36 0A                  LD   (hl),"\n"   
099F   23                     INC   hl   
09A0   03                     INC   bc   
09A1   03                     INC   bc   
09A2   CD B5 07               CALL   crlf   ; echo character to screen
09A5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09A6   B7                     OR   a   
09A7   20 CE                  JR   nz,waitchar   
09A9   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
09AB   03                     INC   bc   
09AC                WAITCHAR4:      
09AC   ED 43 9C 18            LD   (vTIBPtr),bc   
09B0   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09B3                             ; we pressed enter
09B3   0B                     DEC   bc   
09B4                NEXT:        
09B4   03                     INC   bc   ; Increment the IP
09B5   0A                     LD   a,(bc)   ; Get the next character and dispatch
09B6   FE 20                  CP   " "   ; whitespace?
09B8   28 FA                  JR   z,next   ; space? ignore
09BA   38 07                  JR   c,next1   
09BC   6F                     LD   l,a   ; index into table
09BD   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09BF   6E                     LD   l,(hl)   ; get low jump address
09C0   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09C2   E9                     JP   (hl)   ; Jump to routine
09C3                NEXT1:       
09C3   FE 1B                  CP   ESC   ; escape from interpreter
09C5   28 07                  JR   z,escape   
09C7   FE 00                  CP   NUL   ; end of input string?
09C9   28 07                  JR   z,exit   
09CB   C3 5A 09               JP   interpret   ; no, other whitespace, macros?
09CE                ESCAPE:      
09CE   60 69                  LD   hl,bc   ; address of code after escape opcode
09D0   23                     INC   hl   
09D1   E9                     JP   (hl)   
09D2                EXIT:        
09D2   50 59                  LD   de,bc   ; address of code after exit opcode
09D4   13                     INC   de   
09D5   D9                     EXX      
09D6   C1                     POP   bc   ; bc = last result
09D7   E1                     POP   hl   ; pop array (discard)
09D8   FD 54                  LD   d,iyh   ; de = BP
09DA   FD 5D                  LD   e,iyl   
09DC   EB                     EX   de,hl   ; hl = BP
09DD   F9                     LD   sp,hl   ; sp = BP
09DE   D9                     EXX      
09DF   E1                     POP   hl   ; hl = old BP
09E0   C1                     POP   bc   ; pop SCP (discard)
09E1   C1                     POP   bc   ; pop array (discard)
09E2   C1                     POP   bc   ; bc = IP
09E3   F9                     LD   sp,hl   ; sp = old BP
09E4   D9                     EXX      
09E5   C5                     PUSH   bc   ; push result
09E6   D9                     EXX      
09E7   EB                     EX   de,hl   
09E8   E9                     JP   (hl)   
09E9                             ; execute a block of code
09E9                             ; uses parent scope
09E9                EXEC:        ; execute code at pointer
09E9   E1                     POP   hl   ; hl = pointer to code
09EA   7C                     LD   a,h   ; skip if destination address is NUL
09EB   B5                     OR   l   
09EC   28 17                  JR   z,exec2   
09EE   C5                     PUSH   bc   ; push IP
09EF   11 00 00               LD   de,0   
09F2   D5                     PUSH   de   ; array = 0
09F3   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
09F6   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
09F9   D5                     PUSH   de   ; push SCP
09FA   FD E5                  PUSH   iy   ; push BP
09FC   FD 21 00 00            LD   iy,0   ; BP = SP
0A00   FD 39                  ADD   iy,sp   
0A02   44 4D                  LD   bc,hl   ; IP = pointer to code
0A04   0B                     DEC   bc   ; dec to prepare for next routine
0A05                EXEC2:       
0A05   DD E9                  JP   (ix)   
0A07                             ; call with args
0A07                             ; pushes array, creates a scope
0A07                             ; doclosure:
0A07                             ;     pop hl
0A07                             ;     ld e,(hl)                   ; load array and push
0A07                             ;     inc hl
0A07                             ;     ld d,(hl)
0A07                             ;     inc hl
0A07                             ;     push de
0A07                             ;     jp call1
0A07                             ; call with args
0A07                             ; creates a scope
0A07                CALL:        ; execute code at pointer
0A07   E1                     POP   hl   ; hl = pointer to code
0A08                CALL1:       
0A08   7C                     LD   a,h   ; skip if destination address is NUL
0A09   B5                     OR   l   
0A0A   28 1B                  JR   z,call2   
0A0C   C5                     PUSH   bc   ; push IP
0A0D   5E                     LD   e,(hl)   ; de = array
0A0E   23                     INC   hl   
0A0F   56                     LD   d,(hl)   
0A10   23                     INC   hl   
0A11   D5                     PUSH   de   ; push array
0A12   5E                     LD   e,(hl)   ; de = arity
0A13   23                     INC   hl   
0A14   56                     LD   d,(hl)   ; hl = block-1
0A15   EB                     EX   de,hl   ; hl = arity, de = block-1
0A16   29                     ADD   hl,hl   ; hl = arity * 2 bytes
0A17   01 04 00               LD   bc,4   ; subtract 4 bytes (ip,array)
0A1A   09                     ADD   hl,bc   
0A1B   39                     ADD   hl,sp   ; hl = pointer to first arg
0A1C   E5                     PUSH   hl   ; push hl
0A1D   FD E5                  PUSH   iy   ; push BP
0A1F   FD 21 00 00            LD   iy,0   ; BP = SP
0A23   FD 39                  ADD   iy,sp   
0A25   42 4B                  LD   bc,de   ; IP = block-1, ready for NEXT
0A27                CALL2:       
0A27   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; test ":x 1000 let x 10 set x", 10
4000                             ; test ":x [100] { @1 } closure x", 100
4000                             ; test ":x [100 200] { @2 } closure x", 200
4000                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4000                             ; test "0 [{1}] switch", 1
4000                             ; test "1 [{1} {2} {3}] switch", 2
4000                             ; test "9 [{1} {5}] switch", 5
4000                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4000                             ; test "bytes 'ABC' get", $41
4000                             ; test "bytes [1 2 3] get", 1
4000                             ; test ":xyz 123 const ; xyz", 123
4000                             ; test ":x 1 const ; x", 1
4000                             ; test ":x 'A' const x get", $41
4000                             ; test ":x [1] const x get", 1
4000                             ; test ":x [1 2 3] const x 2? get", 3
4000                             ; test "2 (1 2 +) *", 6
4000                             ; test ":xyz 123 const ; xyz", 123
4000                             ; test ":xyz 123 let ; xyz get", 123
4000                             ; test "1 2 {$1 $2 +} call", 3
4000                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4000                             ; test ":xyz {1} def :xyz addr call", 1
4000                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4000                             ; test ":xyz {10} def :xyz addr exec", 10
4000                             ; test ":xyz {10} def :xyz addr call", 10
4000                             ; test "'hello' hash", $7f54
4000                             ; test ":hello", $7f54
4000                             ; test "bytes [1 2 3]", $1e02
4000                             ; test "bytes [1 2 3] 1? get", 2
4000                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4000                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4000                             ; test "words [1 2 3]", $1e02
4000                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4000                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4000                             ; test "words [10 20 30] 1 ? get", 10
4000                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4000                             ; test "{{{1} exec} exec} exec", 1
4000                             ; test "5 {{{$1} exec} exec} call", 5
4000                             ; test "5 {$1} call", 5
4000                             ; test "5 {{$1} exec} call", 5
4000                             ; test "2 1 {{$1} call} call", 2
4000                             ; test "2 1 {$2} call", 1
4000                             ; test "2 1 {$1} call", 2
4000                             ; test "2 1 {$2} call", 1
4000                             ; test "2 4 {$2} call", 4
4000                             ; test "{{1} call} call", 1
4000                             ; test "5 {-1 {$1} if} call", 5
4000                             ; test "0 {} loop", 0
4000                             ; test "1 {1-} loop", $1a00
4000                             ; test "65 .c", 0
4000                             ; test "1 2 <", TRUE
4000                             ; test "2 2 <=", TRUE
4000                             ; test "2 1 <", FALSE
4000                             ; test "1 2 >", FALSE
4000                             ; test "2 2 >=", TRUE
4000                             ; test "2 1 >", TRUE
4000                             ; test "10 sqrt", 3
4000                             ; test "10 sqrt frac", 1
4000                             ; test "7 3 /", 2
4000                             ; test "7 3 / frac", 1
4000                             ; test "1 2 +", 3
4000                             ; test ":h {1} def :h addr call", 1
4000                          ;*Macro unroll:  test "1 2 +", 3
4000   31 80 18               LD   SP,STACK   
4003   CD DB 07               CALL   init   
4006   CD E9 09               CALL   exec   
4009   31 20 32 20 2B 00      .CSTR   "1 2 +"   
400F                          ;*Macro unroll:  expect "1 2 +",3
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 03 00               LD   DE,3   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 50                  JR   Z,expectM_0_2359S43   
401B   CD BC 07               CALL   printStr   
401E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
402A   CD BC 07               CALL   printStr   
402D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403C   21 03 00               LD   HL,3   
403F   CD 10 07               CALL   prtdec   
4042   CD BC 07               CALL   printStr   
4045   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4052   E1                     POP   hl   
4053   E5                     PUSH   hl   
4054   CD 10 07               CALL   prtdec   
4057   E1                     POP   hl   
4058   CD BC 07               CALL   printStr   
405B   20 28 23 00            .CSTR   " (#"   
405F   CD 58 07               CALL   prthex   
4062   CD BC 07               CALL   printStr   
4065   29 0D 0A 00            .CSTR   ")\r\n"   
4069   76                     HALT      
406A   00                     .CSTR      
406B                EXPECTM_0_2359S43:      
406B   E1                     POP   HL   
406C                             ; test "4 1 2 +", 3
406C                             ; test "1", 1
406C                             ; test "2", 2
406C                             ; test "``", 0
406C                             ; test "`a`", $61
406C                             ; test "`\\``", $60
406C                             ; test "`b` 'cba' in", -1
406C                             ; test "`x` 'cba' in", 0
406C                             ; test "5 0 {1} if", 5
406C                             ; test "0 {1} {2} ifte", 2
406C                             ; test "5 -1 {1} if", 1
406C                             ; test "-1 {1} {2} ifte", 1
406C                             ; test "9 sw {1} {5} ca", 5
406C                             ; test "0 sw {1} ca", 1
406C                             ; test "1 sw {1} {2} {3} ca", 2
406C                             ; test "5 -1 {2} if", 2
406C                             ; test "5 0 {2} if", 5
406C                             ; test "5 0 {0 {2} if} if", 5
406C                             ; test "5 0 {-1 {2} if} if", 5
406C                             ; test "5 -1 {2} if", 2
406C                             ; test "5 -1 {-1 {2} if} if", 2
406C                             ; test "{1} ex", 1
406C                             ; test "'A' @", 65
406C                             ; test "1", 1
406C                             ; test "0", 0
406C                             ; test "10", 10
406C                             ; test "123", 123
406C                             ; test "$10", $10
406C                             ; test "$FF", $FF
406C                             ; test "2 3 =", 0
406C                             ; test "3 3 =", 1
406C                             ; test "2 3 <", 1
406C                             ; test "3 3 <", 0
406C                             ; test "3 3 >", 0
406C                             ; test "4 3 >", 1
406C                             ; test "1 2 +", 3
406C                             ; test "123 456 +", 123+456
406C                             ; test "64 128 +", 64+128
406C                             ; test "5 3 -", 2
406C                             ; test "3 5 &", 1
406C                             ; test "3 5 |", 7
406C                             ; test "2 3 *", 6
406C                             ; test "1 2 3 + *", 5
406C                             ; ; test "1 2 3 ' +", 3
406C                             ; ; test "1_ 2 +",1
406C                             ; ; test "1_ 1 +",0
406C                             ; ; call enter
406C                             ; ;     .cstr "1 3",$22,"+"
406C                             ; ; expect "1 3 DUP +", 6
406C                             ; ; test "5 2/'", 2
406C                             ; ; test "3 5$ -", 2
406C                             ; ; test "5 2/$ '", 1
406C                             ; ; test "2 3%++", 7
406C                             ; ; test "1 2 3~''", 2
406C                             ; ; test "1 2 3~+*", 8
406C                             ; ; test "2a!a@",2
406C                             ; ; test "3x! 1 x@+x! x@", 4
406C                             ; ; test "3x! 1_ x@+x! x@", 2
406C                             ; ; test "1{", 2
406C                             ; ; test "1}", 0
406C                             ; ; test "2}", 1
406C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
406C                             ; ; test "{2} \\^", 2
406C                             ; ; test ":X1; X", 1
406C                             ; ; test ":A100;A", 100
406C                             ; ; test ":Aa!; 3A a@", 3
406C                             ; ; test ":Aa!;:Ba@;4AB", 4
406C                             ; ; test "[]$ '", 0
406C                             ; ; test "[3]$ '", 1
406C                             ; ; test "[3]'@", 3
406C                             ; ; test "[1 2 3]'@", 1
406C                             ; ; test "[1 2 3]'2+@", 2
406C                             ; ; test "\\h@[1]''\\h@$-", 2
406C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
406C                             ; ; test "\\[]$ '", 0
406C                             ; ; test "\\[3]'\\@", 3
406C                             ; ; test "\\[3]$ '", 1
406C                             ; ; test "\\[1 2 3]'\\@", 1
406C                             ; ; test "\\[1 2 3]'1+\\@", 2
406C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
406C                             ; ; test "\\h@\\[1]''\\h@$-", 1
406C                             ; ; test "\\`A`\\@",65
406C                             ; ; test "0 0{1+}", 0
406C                             ; ; test "0 1{1+}", 1
406C                             ; ; test "0 2{1+}", 2
406C                             ; ; test "0 1{0{1+}}", 0
406C                             ; ; test "0 1{1{1+}}", 1
406C                             ; ; test "0 2{1{1+}}", 2
406C                             ; ; test "0 2{2{1+}}", 4
406C                             ; ; test "0 1{\\i@+}", 0
406C                             ; ; test "0 2{\\i@+}", 1
406C                             ; ; test "0 3{\\i@+}", 3
406C                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
406C                             ; ; test "0t! 10{1 t@+t!} t@",10
406C                             ; ; test "0{100}{200}",200
406C                             ; ; test "1{100}{200}",100
406C                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
406C                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
406C                             ; ; test ":X10;\\0X", 10
406C                             ; ; test "2 \\1x! \\1x@", 2
406C   CD BC 07               CALL   printStr   
406F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4075   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0668 DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1793 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 234 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1795 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 211 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 214 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 217 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 225 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
DOT2:               032A DEFINED AT LINE 230 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 236 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 318 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 245 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 252 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 256 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 258 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 260 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 262 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 264 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 266 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 268 IN Siena.asm
AND_:               0361 DEFINED AT LINE 270 IN Siena.asm
AND1:               0368 DEFINED AT LINE 278 IN Siena.asm
                    > USED AT LINE 291 IN Siena.asm
                    > USED AT LINE 302 IN Siena.asm
OR_:                036C DEFINED AT LINE 283 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 293 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
INV_:               037E DEFINED AT LINE 304 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 308 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 315 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 320 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB2:               0395 DEFINED AT LINE 326 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
NOT_:               039B DEFINED AT LINE 332 IN Siena.asm
EQ_:                03A0 DEFINED AT LINE 336 IN Siena.asm
EQ1:                03A1 DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
GT_:                03A5 DEFINED AT LINE 342 IN Siena.asm
LT_:                03A9 DEFINED AT LINE 347 IN Siena.asm
LT1:                03AB DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
DIV_:               03B6 DEFINED AT LINE 358 IN Siena.asm
COMMENT_:           03C5 DEFINED AT LINE 369 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
NOP_:               03CE DEFINED AT LINE 377 IN Siena.asm
SHL:                03D0 DEFINED AT LINE 387 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
SHL1:               03D8 DEFINED AT LINE 394 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
SHL2:               03D9 DEFINED AT LINE 396 IN Siena.asm
                    > USED AT LINE 393 IN Siena.asm
SHR:                03E0 DEFINED AT LINE 404 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
SHR1:               03E8 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
SHR2:               03EC DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
MUL:                03F3 DEFINED AT LINE 420 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
MUL2:               03FD DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 438 IN Siena.asm
NUM:                040F DEFINED AT LINE 443 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               0418 DEFINED AT LINE 449 IN Siena.asm
                    > USED AT LINE 447 IN Siena.asm
NUM1:               0419 DEFINED AT LINE 451 IN Siena.asm
                    > USED AT LINE 468 IN Siena.asm
NUM2:               0431 DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
NUM3:               043C DEFINED AT LINE 477 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
HEXNUM:             043F DEFINED AT LINE 481 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            0442 DEFINED AT LINE 483 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
HEXNUM2:            044A DEFINED AT LINE 489 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
STRING:             045C DEFINED AT LINE 502 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
CHAR:               0475 DEFINED AT LINE 521 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
CHAR1:              0478 DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
CHAR2:              0484 DEFINED AT LINE 532 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
CHAR3:              0487 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 527 IN Siena.asm
PAREN:              048A DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
PARENEND:           048C DEFINED AT LINE 547 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
BLOCK:              048E DEFINED AT LINE 559 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
BLOCKEND:           0490 DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
ARG:                0492 DEFINED AT LINE 621 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               04B0 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              04B2 DEFINED AT LINE 663 IN Siena.asm
GET:                04B2 DEFINED AT LINE 664 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
GET1:               04B3 DEFINED AT LINE 666 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
GET2:               04C1 DEFINED AT LINE 675 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
SET:                04C4 DEFINED AT LINE 680 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
SET1:               04D6 DEFINED AT LINE 694 IN Siena.asm
                    > USED AT LINE 689 IN Siena.asm
IF:                 04D9 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
IFTE:               04DB DEFINED AT LINE 707 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
SWITCH:             04DD DEFINED AT LINE 737 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
LOOP:               04E7 DEFINED AT LINE 750 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
WORDS:              04E9 DEFINED AT LINE 800 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
BYTES:              04EE DEFINED AT LINE 803 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
BYTES1:             04F1 DEFINED AT LINE 805 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
ARRAY:              04F6 DEFINED AT LINE 809 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARRAYEND:           04F8 DEFINED AT LINE 820 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
HASH:               04FA DEFINED AT LINE 915 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
DEF:                0505 DEFINED AT LINE 925 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
CLOSURE:            0509 DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
DEF0:               0509 DEFINED AT LINE 931 IN Siena.asm
DEF1:               0523 DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
DEF2:               0547 DEFINED AT LINE 978 IN Siena.asm
DEF3:               054A DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 968 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
DEF4:               0550 DEFINED AT LINE 986 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
DEF5:               0565 DEFINED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
LET:                0568 DEFINED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
LET2:               058C DEFINED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
ADDR:               058F DEFINED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
ADDR1:              059B DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
SYMBOL:             05A3 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
SYMBOL0:            05AB DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
SYMBOL1:            05AD DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
SYMBOL2:            05BC DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
IDENT:              05CA DEFINED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
IDENT0:             05D1 DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
IDENT1:             05D3 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
IDENT2:             05E2 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
IDENT3:             05F6 DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
FRAC:               05F7 DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1608 IN Siena.asm
SQRT1:              05FD DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
ABS1:               060A DEFINED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
MOD:                0617 DEFINED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
EQUALS:             0623 DEFINED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
LESSTHANEQ:         062B DEFINED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 354 IN Siena.asm
LESSTHAN:           0630 DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 356 IN Siena.asm
LESSTHAN1:          0635 DEFINED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
TRUE1:              0638 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
FALSE1:             063E DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
INPUT:              0644 DEFINED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
OUTPUT:             064F DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
KEY:                0658 DEFINED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
NEG:                0661 DEFINED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
FILTER:             0668 DEFINED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
MAP:                0668 DEFINED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
HASHSTR:            066A DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
                    > USED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
HASHSTR1:           066D DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
HASHSTR2:           0672 DEFINED AT LINE 1244 IN Siena.asm
DEFINEENTRY:        0683 DEFINED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1029 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
DEFINEENTRY0:       0688 DEFINED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
DEFINEENTRY1:       0697 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
DEFINEENTRY2:       069D DEFINED AT LINE 1285 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
DEFINEENTRY3:       069F DEFINED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
LOOKUPENTRY:        06A9 DEFINED AT LINE 1302 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
LOOKUPENTRY0:       06AE DEFINED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
LOOKUPENTRY1:       06BD DEFINED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
LOOKUPENTRY2:       06C3 DEFINED AT LINE 1324 IN Siena.asm
LOOKUPENTRY3:       06C5 DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
DIVIDE:             06CD DEFINED AT LINE 1339 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
DIVIDE1:            06D2 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
DIVIDE2:            06DF DEFINED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
DIVIDE3:            06E0 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
SQUAREROOT:         06E6 DEFINED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
SQUAREROOT1:        06EB DEFINED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
SQUAREROOT4:        0706 DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
SQUAREROOT5:        070D DEFINED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
PRTDEC:             0710 DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            071F DEFINED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
PRTDEC1:            0741 DEFINED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
PRTDEC2:            0743 DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
PRTDEC3:            0753 DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
PRTDEC4:            0754 DEFINED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
PRTHEX:             0758 DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0763 DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
PRTHEX3:            076C DEFINED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
PRTSTR0:            0777 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
PRTSTR:             077B DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
NESTING:            0780 DEFINED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
NESTING1A:          078B DEFINED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
NESTING1:           078E DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
NESTING2:           079D DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
NESTING3:           079F DEFINED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
NESTING4:           07AA DEFINED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
PROMPT:             07AC DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
CRLF:               07B5 DEFINED AT LINE 1523 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
PRINTSTR:           07BC DEFINED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 213
DEFINE:             07C3 DEFINED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
INIT:               07DB DEFINED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 40
INIT1:              07F5 DEFINED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
START:              0944 DEFINED AT LINE 1692 IN Siena.asm
INTERPRET:          095A DEFINED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
INTERPRET2:         0964 DEFINED AT LINE 1704 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
INTERPRET3:         096C DEFINED AT LINE 1711 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
INTERPRET4:         0972 DEFINED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
WAITCHAR:           0977 DEFINED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
MACRO:              0986 DEFINED AT LINE 1733 IN Siena.asm
WAITCHAR1:          0988 DEFINED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
WAITCHAR3:          0996 DEFINED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
WAITCHAR4:          09AC DEFINED AT LINE 1775 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
NEXT:               09B4 DEFINED AT LINE 1781 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
NEXT1:              09C3 DEFINED AT LINE 1792 IN Siena.asm
                    > USED AT LINE 1786 IN Siena.asm
ESCAPE:             09CE DEFINED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
EXIT:               09D2 DEFINED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
EXEC:               09E9 DEFINED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0A05 DEFINED AT LINE 1844 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
CALL:               0A07 DEFINED AT LINE 1860 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
CALL1:              0A08 DEFINED AT LINE 1862 IN Siena.asm
CALL2:              0A27 DEFINED AT LINE 1889 IN Siena.asm
                    > USED AT LINE 1865 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1558 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 687 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 667 IN Siena.asm
                    > USED AT LINE 683 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 503 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1708 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1564 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2359S43:  406B DEFINED AT LINE 34
                    > USED AT LINE 10
