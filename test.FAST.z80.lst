0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 98 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   D1                     DB   lsb(nop_)   ; SP
0221   9E                     DB   lsb(not_)   ; !
0222   D1                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D1                     DB   lsb(nop_)   ; %
0226   64                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   12                     DB   lsb(paren_)   ; (
0229   15                     DB   lsb(parenEnd_)   ; )
022A   93                     DB   lsb(mul_)   ; *
022B   86                     DB   lsb(add_)   ; +
022C   D1                     DB   lsb(nop_)   ; ,
022D   96                     DB   lsb(sub_)   ; -
022E   18                     DB   lsb(dot_)   ; .
022F   B9                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   61                     DB   lsb(symbol_)   ; :
023B   0F                     DB   lsb(clear_)   ; ;
023C   AC                     DB   lsb(lt_)   ; <
023D   A3                     DB   lsb(eq_)   ; =
023E   A8                     DB   lsb(gt_)   ; >
023F   42                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5E                     DB   lsb(ident_)   ; A
0242   5E                     DB   lsb(ident_)   ; B
0243   5E                     DB   lsb(ident_)   ; C
0244   5E                     DB   lsb(ident_)   ; D
0245   5E                     DB   lsb(ident_)   ; E
0246   5E                     DB   lsb(ident_)   ; F
0247   5E                     DB   lsb(ident_)   ; G
0248   5E                     DB   lsb(ident_)   ; h
0249   5E                     DB   lsb(ident_)   ; I
024A   5E                     DB   lsb(ident_)   ; J
024B   5E                     DB   lsb(ident_)   ; K
024C   5E                     DB   lsb(ident_)   ; L
024D   5E                     DB   lsb(ident_)   ; M
024E   5E                     DB   lsb(ident_)   ; N
024F   5E                     DB   lsb(ident_)   ; O
0250   5E                     DB   lsb(ident_)   ; p
0251   5E                     DB   lsb(ident_)   ; Q
0252   5E                     DB   lsb(ident_)   ; R
0253   5E                     DB   lsb(ident_)   ; S
0254   5E                     DB   lsb(ident_)   ; T
0255   5E                     DB   lsb(ident_)   ; U
0256   5E                     DB   lsb(ident_)   ; V
0257   5E                     DB   lsb(ident_)   ; W
0258   5E                     DB   lsb(ident_)   ; X
0259   5E                     DB   lsb(ident_)   ; Y
025A   5E                     DB   lsb(ident_)   ; Z
025B   58                     DB   lsb(array_)   ; [
025C   C8                     DB   lsb(comment_)   ; \
025D   5B                     DB   lsb(arrayEnd_)   ; ]
025E   78                     DB   lsb(xor_)   ; ^
025F   5E                     DB   lsb(ident_)   ; _
0260   55                     DB   lsb(char_)   ; `    	
0261   5E                     DB   lsb(ident_)   ; a
0262   5E                     DB   lsb(ident_)   ; b
0263   5E                     DB   lsb(ident_)   ; c
0264   5E                     DB   lsb(ident_)   ; d
0265   5E                     DB   lsb(ident_)   ; e
0266   5E                     DB   lsb(ident_)   ; f
0267   5E                     DB   lsb(ident_)   ; g
0268   5E                     DB   lsb(ident_)   ; h
0269   5E                     DB   lsb(ident_)   ; i
026A   5E                     DB   lsb(ident_)   ; j
026B   5E                     DB   lsb(ident_)   ; k
026C   5E                     DB   lsb(ident_)   ; l
026D   5E                     DB   lsb(ident_)   ; m
026E   5E                     DB   lsb(ident_)   ; n
026F   5E                     DB   lsb(ident_)   ; o
0270   5E                     DB   lsb(ident_)   ; p
0271   5E                     DB   lsb(ident_)   ; q
0272   5E                     DB   lsb(ident_)   ; r
0273   5E                     DB   lsb(ident_)   ; s
0274   5E                     DB   lsb(ident_)   ; t
0275   5E                     DB   lsb(ident_)   ; u
0276   5E                     DB   lsb(ident_)   ; v
0277   5E                     DB   lsb(ident_)   ; w
0278   5E                     DB   lsb(ident_)   ; x
0279   5E                     DB   lsb(ident_)   ; y
027A   5E                     DB   lsb(ident_)   ; z
027B   4F                     DB   lsb(block_)   ; {
027C   6F                     DB   lsb(or_)   ; |
027D   52                     DB   lsb(blockEnd_)   ; }
027E   81                     DB   lsb(inv_)   ; ~
027F   D1                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 12 04               JP   num   
0303                HEXNUM_:      
0303   C3 42 04               JP   hexnum   
0306                ARG_:        
0306   C3 F6 04               JP   arg   
0309                PROP_:       
0309   C3 14 05               JP   prop   
030C                STRING_:      
030C   C3 5F 04               JP   string   
030F                CLEAR_:      
030F   C3 A7 0B               JP   clear   
0312                PAREN_:      
0312   C3 8D 04               JP   paren   
0315                PARENEND_:      
0315   C3 9A 04               JP   parenEnd   
0318                DOT_:        
0318   E1                     POP   hl   
0319   03                     INC   bc   
031A   0A                     LD   a,(bc)   
031B   FE 68                  CP   "h"   
031D   20 05                  JR   nz,dot1   
031F   CD 15 09               CALL   prthex   
0322   18 17                  JR   dot4   
0324                DOT1:        
0324   FE 73                  CP   "s"   
0326   20 05                  JR   nz,dot2   
0328   CD 38 09               CALL   prtstr   
032B   18 0E                  JR   dot4   
032D                DOT2:        
032D   FE 63                  CP   "c"   
032F   20 06                  JR   nz,dot3   
0331   7D                     LD   a,l   
0332   CD 85 00               CALL   putchar   
0335   18 04                  JR   dot4   
0337                DOT3:        
0337   0B                     DEC   bc   
0338   CD CD 08               CALL   prtdec   
033B                DOT4:        
033B   3E 20                  LD   a," "   
033D   CD 85 00               CALL   putchar   
0340   DD E9                  JP   (ix)   
0342                             ; addr index -- addr2
0342                INDEX_:      
0342   E1                     POP   hl   ; hl = index
0343   D1                     POP   de   ; de = addr
0344   3A 9A 18               LD   a,(vDataWidth)   
0347   3D                     DEC   a   
0348   28 01                  JR   z,index1   
034A   29                     ADD   hl,hl   ; if data width = 2 then double
034B                INDEX1:      
034B   19                     ADD   hl,de   ; add addr
034C   C3 2F 05               JP   get1   
034F                BLOCK_:      
034F   C3 A9 04               JP   block   
0352                BLOCKEND_:      
0352   C3 E2 04               JP   blockend   
0355                CHAR_:       
0355   C3 78 04               JP   char   
0358                ARRAY_:      
0358   C3 28 06               JP   array   
035B                ARRAYEND_:      
035B   C3 3A 06               JP   arrayEnd   
035E                IDENT_:      
035E   C3 87 07               JP   ident   
0361                SYMBOL_:      
0361   C3 60 07               JP   symbol   
0364                AND_:        
0364   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0365   E1                     POP   hl   
0366   7B                     LD   a,e   
0367   A5                     AND   l   
0368   6F                     LD   l,a   
0369   7A                     LD   a,d   
036A   A4                     AND   h   
036B                AND1:        
036B   67                     LD   h,a   
036C   E5                     PUSH   hl   
036D   DD E9                  JP   (ix)   
036F                OR_:         
036F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0370   E1                     POP   hl   
0371   7B                     LD   a,e   
0372   B5                     OR   l   
0373   6F                     LD   l,a   
0374   7A                     LD   a,d   
0375   B4                     OR   h   
0376   18 F3                  JR   and1   
0378                XOR_:        
0378   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0379                XOR1:        
0379   E1                     POP   hl   
037A   7B                     LD   a,e   
037B   AD                     XOR   l   
037C   6F                     LD   l,a   
037D   7A                     LD   a,d   
037E   AC                     XOR   h   
037F   18 EA                  JR   and1   
0381                INV_:        ; Bitwise INVert the top member of the stack
0381   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0384   18 F3                  JR   xor1   
0386                ADD_:        ; add the top 2 members of the stack
0386   D1                     POP   de   
0387   E1                     POP   hl   
0388   19                     ADD   hl,de   
0389   E5                     PUSH   hl   
038A   DD E9                  JP   (ix)   
038C                HDOT_:       ; print hexadecimal
038C   E1                     POP   hl   
038D   CD 15 09               CALL   prthex   
0390   C3 37 03               JP   dot3   
0393                MUL_:        
0393   C3 F6 03               JP   mul   
0396                SUB_:        ; Subtract the value 2nd on stack from top of stack
0396   D1                     POP   de   
0397   E1                     POP   hl   ; Entry point for INVert
0398                SUB2:        
0398   B7                     OR   a   ; Entry point for NEGate
0399   ED 52                  SBC   hl,de   
039B   E5                     PUSH   hl   
039C   DD E9                  JP   (ix)   
039E                NOT_:        ; logical invert, any non zero value
039E   21 00 00               LD   hl,0   ; is considered true
03A1   18 01                  JR   eq1   
03A3                EQ_:         
03A3   E1                     POP   hl   
03A4                EQ1:         
03A4   D1                     POP   de   
03A5   C3 E0 07               JP   equals   
03A8                GT_:         
03A8   D1                     POP   de   
03A9   E1                     POP   hl   
03AA   18 02                  JR   lt1   
03AC                LT_:         
03AC   E1                     POP   hl   
03AD   D1                     POP   de   
03AE                LT1:         
03AE   03                     INC   bc   
03AF   0A                     LD   a,(bc)   
03B0   FE 3D                  CP   "="   
03B2   CA E8 07               JP   z,lessthaneq   
03B5   0B                     DEC   bc   
03B6   C3 ED 07               JP   lessthan   
03B9                DIV_:        
03B9   D1                     POP   de   ; get first value
03BA   E1                     POP   hl   ; get 2nd value
03BB   C5                     PUSH   bc   ; preserve the IP
03BC   44 4D                  LD   bc,hl   
03BE   CD 8A 08               CALL   divide   
03C1   22 98 18               LD   (vFrac),hl   
03C4   C1                     POP   bc   
03C5   D5                     PUSH   de   ; push result
03C6   DD E9                  JP   (ix)   
03C8                COMMENT_:      
03C8   03                     INC   bc   ; point to next char
03C9   0A                     LD   a,(bc)   
03CA   FE 20                  CP   " "   ; terminate on any char less than SP
03CC   30 FA                  JR   nc,comment_   
03CE   0B                     DEC   bc   
03CF   DD E9                  JP   (ix)   
03D1                NOP_:        
03D1   DD E9                  JP   (ix)   
03D3                             ;*******************************************************************
03D3                             ; word operators
03D3                             ;*******************************************************************
03D3                             ; shl
03D3                             ; value count -- value2          shift left count places
03D3                SHL:         
03D3   50 59                  LD   de,bc   ; save IP
03D5   C1                     POP   bc   ; bc = count
03D6   41                     LD   b,c   ; b = loop counter
03D7   E1                     POP   hl   
03D8   04                     INC   b   ; test for counter=0 case
03D9   18 01                  JR   shl2   
03DB                SHL1:        
03DB   29                     ADD   hl,hl   ; left shift hl
03DC                SHL2:        
03DC   10 FD                  DJNZ   shl1   
03DE   E5                     PUSH   hl   
03DF   42 4B                  LD   bc,de   ; restore IP
03E1   DD E9                  JP   (ix)   
03E3                             ; shr
03E3                             ; value count -- value2          shift left count places
03E3                SHR:         
03E3   50 59                  LD   de,bc   ; save IP
03E5   C1                     POP   bc   ; bc = count
03E6   41                     LD   b,c   ; b = loop counter
03E7   E1                     POP   hl   
03E8   04                     INC   b   ; test for counter=0 case
03E9   18 04                  JR   shr2   
03EB                SHR1:        
03EB   CB 3C                  SRL   h   ; right shift hl
03ED   CB 1D                  RR   l   
03EF                SHR2:        
03EF   10 FA                  DJNZ   shr1   
03F1   E5                     PUSH   hl   
03F2   42 4B                  LD   bc,de   ; restore IP
03F4   DD E9                  JP   (ix)   
03F6                MUL:         ;=19
03F6   D1                     POP   de   ; get first value
03F7   E1                     POP   hl   
03F8   C5                     PUSH   bc   ; Preserve the IP
03F9   44                     LD   b,h   ; bc = 2nd value
03FA   4D                     LD   c,l   
03FB   21 00 00               LD   hl,0   
03FE   3E 10                  LD   a,16   
0400                MUL2:        
0400   29                     ADD   hl,hl   
0401   CB 13                  RL   e   
0403   CB 12                  RL   d   
0405   30 04                  JR   nc,$+6   
0407   09                     ADD   hl,bc   
0408   30 01                  JR   nc,$+3   
040A   13                     INC   de   
040B   3D                     DEC   a   
040C   20 F2                  JR   nz,mul2   
040E   C1                     POP   bc   ; Restore the IP
040F   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0410   DD E9                  JP   (ix)   
0412                NUM:         
0412   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0415   0A                     LD   a,(bc)   ; Get numeral or -
0416   FE 2D                  CP   "-"   
0418   20 01                  JR   nz,num0   
041A   03                     INC   bc   ; move to next char, no flags affected
041B                NUM0:        
041B   08                     EX   af,af'   ; save zero flag = 0 for later
041C                NUM1:        
041C   0A                     LD   a,(bc)   ; read digit
041D   D6 30                  SUB   "0"   ; less than 0?
041F   38 13                  JR   c,num2   ; not a digit, exit loop
0421   FE 0A                  CP   10   ; greater that 9?
0423   30 0F                  JR   nc,num2   ; not a digit, exit loop
0425   03                     INC   bc   ; inc IP
0426   54 5D                  LD   de,hl   ; multiply hl * 10
0428   29                     ADD   hl,hl   
0429   29                     ADD   hl,hl   
042A   19                     ADD   hl,de   
042B   29                     ADD   hl,hl   
042C   85                     ADD   a,l   ; add digit in a to hl
042D   6F                     LD   l,a   
042E   3E 00                  LD   a,0   
0430   8C                     ADC   a,h   
0431   67                     LD   h,a   
0432   18 E8                  JR   num1   
0434                NUM2:        
0434   0B                     DEC   bc   
0435   08                     EX   af,af'   ; restore zero flag
0436   20 07                  JR   nz,num3   
0438   EB                     EX   de,hl   ; negate the value of hl
0439   21 00 00               LD   hl,0   
043C   B7                     OR   a   ; jump to sub2
043D   ED 52                  SBC   hl,de   
043F                NUM3:        
043F   E5                     PUSH   hl   ; Put the number on the stack
0440   DD E9                  JP   (ix)   ; and process the next character
0442                HEXNUM:      ; 
0442   21 00 00               LD   hl,0   ; Clear hl to accept the number
0445                HEXNUM1:      
0445   03                     INC   bc   
0446   0A                     LD   a,(bc)   ; Get the character which is a numeral
0447   CB 77                  BIT   6,a   ; is it uppercase alpha?
0449   28 02                  JR   z,hexnum2   ; no a decimal
044B   D6 07                  SUB   7   ; sub 7  to make $a - $F
044D                HEXNUM2:      
044D   D6 30                  SUB   $30   ; Form decimal digit
044F   DA 34 04               JP   c,num2   
0452   FE 10                  CP   $0F+1   
0454   D2 34 04               JP   nc,num2   
0457   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0458   29                     ADD   hl,hl   ; 4X
0459   29                     ADD   hl,hl   ; 8X
045A   29                     ADD   hl,hl   ; 16X
045B   85                     ADD   a,l   ; add into bottom of hl
045C   6F                     LD   l,a   ; 
045D   18 E6                  JR   hexnum1   
045F                             ; 
045F                STRING:      
045F   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
0463   D5                     PUSH   de   ; save start of string
0464   03                     INC   bc   ; point to next char
0465   18 03                  JR   string2   
0467                STRING1:      
0467   12                     LD   (de),a   
0468   13                     INC   de   ; increase count
0469   03                     INC   bc   ; point to next char
046A                STRING2:      
046A   0A                     LD   a,(bc)   
046B   FE 27                  CP   "'"   ; ' is the string terminator
046D   20 F8                  JR   nz,string1   
046F   AF                     XOR   a   ; write NUL to terminate string
0470   12                     LD   (de),a   
0471   13                     INC   de   
0472   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0476   DD E9                  JP   (ix)   
0478                CHAR:        
0478   21 00 00               LD   hl,0   ; if `` is empty
047B                CHAR1:       
047B   03                     INC   bc   ; point to next char
047C   0A                     LD   a,(bc)   
047D   FE 60                  CP   "`"   ; ` is the string terminator
047F   28 09                  JR   z,char3   
0481   FE 5C                  CP   $5c   ; \ is the escape
0483   20 02                  JR   nz,char2   
0485   03                     INC   bc   
0486   0A                     LD   a,(bc)   
0487                CHAR2:       
0487   6F                     LD   l,a   
0488   18 F1                  JR   char1   
048A                CHAR3:       
048A   E5                     PUSH   hl   
048B   DD E9                  JP   (ix)   
048D                PAREN:       
048D   DD 21 93 04            LD   ix,paren2   
0491   18 16                  JR   block   
0493                PAREN2:      
0493   DD 21 89 0B            LD   ix,next   
0497   C3 CA 0B               JP   exec   
049A                PARENEND:      
049A   E1                     POP   hl   ; hl = last result
049B   D1                     POP   de   
049C   C1                     POP   bc   
049D   C1                     POP   bc   
049E   E5                     PUSH   hl   
049F   FD 62                  LD   iyh,d   
04A1   FD 6B                  LD   iyl,e   
04A3   DD 21 89 0B            LD   ix,next   
04A7   DD E9                  JP   (ix)   
04A9                BLOCK:       
04A9   03                     INC   bc   
04AA   C5                     PUSH   bc   ; return first opcode of block
04AB   16 01                  LD   d,1   ; nesting: count first parenthesis
04AD                BLOCK1:      ; Skip to end of definition
04AD   0A                     LD   a,(bc)   ; Get the next character
04AE   03                     INC   bc   ; Point to next character
04AF   FE 21                  CP   " " + 1   ; ignore whitespace
04B1   38 FA                  JR   c,block1   
04B3   FE 29                  CP   ")"   
04B5   28 25                  JR   z,block4   
04B7   FE 7D                  CP   "}"   
04B9   28 21                  JR   z,block4   
04BB   FE 5D                  CP   "]"   
04BD   28 1D                  JR   z,block4   
04BF   FE 28                  CP   "("   
04C1   28 13                  JR   z,block3   
04C3   FE 7B                  CP   "{"   
04C5   28 0F                  JR   z,block3   
04C7   FE 5B                  CP   "["   
04C9   28 0B                  JR   z,block3   
04CB   FE 27                  CP   "'"   
04CD   28 07                  JR   z,block3   
04CF   FE 60                  CP   "`"   
04D1   20 DA                  JR   nz,block1   
04D3                BLOCK2:      
04D3   14                     INC   d   
04D4   18 D7                  JR   block1   
04D6                BLOCK3:      
04D6   3E 80                  LD   a,$80   
04D8   AA                     XOR   d   
04D9   47                     LD   b,a   
04DA   18 D1                  JR   block1   
04DC                BLOCK4:      
04DC   15                     DEC   d   
04DD   20 CE                  JR   nz,block1   ; get the next element
04DF   0B                     DEC   bc   ; balanced, exit
04E0   DD E9                  JP   (ix)   
04E2                BLOCKEND:      
04E2   E1                     POP   hl   ; hl = last result
04E3   FD 54                  LD   d,iyh   ; de = BP
04E5   FD 5D                  LD   e,iyl   
04E7   EB                     EX   de,hl   ; hl = BP, de = result
04E8   F9                     LD   sp,hl   ; sp = BP
04E9   E1                     POP   hl   ; hl = old BP
04EA   C1                     POP   bc   ; pop SCP (discard)
04EB   C1                     POP   bc   ; bc = IP
04EC   F9                     LD   sp,hl   ; sp = old BP
04ED   FD 21 00 00            LD   iy,0   ; iy = sp
04F1   FD 39                  ADD   iy,sp   
04F3   D5                     PUSH   de   ; push result
04F4   DD E9                  JP   (ix)   
04F6                             ; $1..9
04F6                             ; returns value of arg
04F6                ARG:         
04F6   03                     INC   bc   ; get next char
04F7   0A                     LD   a,(bc)   
04F8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04FA   E6 0F                  AND   $0F   ; mask
04FC   87                     ADD   a,a   ; double
04FD   6F                     LD   l,a   ; hl = offset into args
04FE   26 00                  LD   h,0   
0500   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0503   FD 56 03               LD   d,(iy+3)   
0506   EB                     EX   de,hl   ; hl = SCP - offset
0507   B7                     OR   a   
0508   ED 52                  SBC   hl,de   
050A   2B                     DEC   hl   ; de = arg
050B   22 9E 18               LD   (vSetter),hl   ; store address in setter
050E   56                     LD   d,(hl)   
050F   2B                     DEC   hl   
0510   5E                     LD   e,(hl)   
0511   D5                     PUSH   de   ; push arg
0512   DD E9                  JP   (ix)   
0514                             ; @1..9
0514                             ; returns address of prop
0514                PROP:        
0514   03                     INC   bc   ; get next char
0515   0A                     LD   a,(bc)   
0516   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
0518   E6 0F                  AND   $0F   ; mask
051A   87                     ADD   a,a   ; double
051B   6F                     LD   l,a   ; hl = offset into args
051C   26 00                  LD   h,0   
051E   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0521   FD 56 07               LD   d,(iy+7)   
0524   19                     ADD   hl,de   ; find address of prop in array
0525   22 9E 18               LD   (vSetter),hl   ; store address in setter
0528   5E                     LD   e,(hl)   
0529   23                     INC   hl   
052A   56                     LD   d,(hl)   
052B   D5                     PUSH   de   ; push prop value
052C   DD E9                  JP   (ix)   
052E                             ; addr -- value
052E                DOLET:       
052E                GET:         
052E   E1                     POP   hl   
052F                GET1:        
052F   22 9E 18               LD   (vSetter),hl   ; store address in setter
0532   16 00                  LD   d,0   
0534   5E                     LD   e,(hl)   
0535   3A 9A 18               LD   a,(vDataWidth)   
0538   3D                     DEC   a   
0539   28 02                  JR   z,get2   
053B   23                     INC   hl   
053C   56                     LD   d,(hl)   
053D                GET2:        
053D   D5                     PUSH   de   
053E   DD E9                  JP   (ix)   
0540                             ; newvalue -- oldvalue
0540                SET:         
0540   D1                     POP   de   ; new value
0541   E1                     POP   hl   ; discard last accessed value
0542   2A 9E 18               LD   hl,(vSetter)   
0545   7E                     LD   a,(hl)   ; save lsb of old value
0546   73                     LD   (hl),e   
0547   5F                     LD   e,a   
0548   3A 9A 18               LD   a,(vDataWidth)   
054B   3D                     DEC   a   
054C   28 04                  JR   z,set1   
054E   23                     INC   hl   
054F   7E                     LD   a,(hl)   ; save msb of old value
0550   72                     LD   (hl),d   
0551   57                     LD   d,a   
0552                SET1:        
0552   D5                     PUSH   de   ; return old value
0553   DD E9                  JP   (ix)   
0555                             ; ifte
0555                             ; condition then -- value
0555                IF:          
0555   11 00 00               LD   de,0   ; NUL pointer for else
0558   18 01                  JR   ifte1   
055A                             ; ifte
055A                             ; condition then else -- value
055A                IFTE:        
055A   D1                     POP   de   ; de = else
055B                IFTE1:       
055B   E1                     POP   hl   ; hl = then
055C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
055D   23                     INC   hl   ; check for true
055E   7C                     LD   a,h   
055F   B5                     OR   l   
0560   E1                     POP   hl   ; hl = then
0561   28 01                  JR   z,ifte2   
0563   EB                     EX   de,hl   ; condition = false, hl = else
0564                IFTE2:       
0564   7C                     LD   a,h   ; check if hl is NUL
0565   B5                     OR   l   
0566   28 13                  JR   z,ifte3   
0568   C5                     PUSH   bc   ; push IP
0569   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
056C   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
056F   D5                     PUSH   de   ; push SCP
0570   FD E5                  PUSH   iy   ; push BP
0572   FD 21 00 00            LD   iy,0   ; iy = sp
0576   FD 39                  ADD   iy,sp   
0578   44 4D                  LD   bc,hl   ; IP = then
057A   0B                     DEC   bc   
057B                IFTE3:       
057B   DD E9                  JP   (ix)   
057D                             ; switch
057D                             ; index array -- value
057D                SWITCH:      
057D   D1                     POP   de   ; de = array
057E   E1                     POP   hl   ; hl = index
057F   29                     ADD   hl,hl   ; indec *= 2
0580   19                     ADD   hl,de   ; add array[0]
0581   4E                     LD   c,(hl)   ; bc = case
0582   23                     INC   hl   
0583   46                     LD   b,(hl)   
0584   0B                     DEC   bc   
0585   DD E9                  JP   (ix)   
0587                             ; c b --
0587                             ; loops until c = 0
0587                LOOP:        
0587   D1                     POP   de   ; de = block                    c
0588   E1                     POP   hl   ; hl = condition
0589   D5                     PUSH   de   
058A   C5                     PUSH   bc   ; push IP
058B   42 4B                  LD   bc,de   ; bc = block
058D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0590   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0593   D5                     PUSH   de   ; push SCP
0594   FD E5                  PUSH   iy   ; push BP
0596   FD 21 00 00            LD   iy,0   ; iy = sp
059A   FD 39                  ADD   iy,sp   
059C                LOOP1:       
059C   7D                     LD   a,l   ; bc = block, hl = condition = zero?
059D   B4                     OR   h   
059E   28 21                  JR   z,loop3   
05A0   11 B6 05               LD   de,loop2-1   ; IP return address
05A3   D5                     PUSH   de   
05A4   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
05A7   FD 56 03               LD   d,(iy+3)   
05AA   D5                     PUSH   de   ; 
05AB   FD E5                  PUSH   iy   ; push BP
05AD   FD 21 00 00            LD   iy,0   ; iy = sp
05B1   FD 39                  ADD   iy,sp   
05B3   E5                     PUSH   hl   ; push condition
05B4   0B                     DEC   bc   
05B5   DD E9                  JP   (ix)   
05B7                LOOP2:       
05B7   1B                     DB   ESC   ; escape from interpreter
05B8   FD 4E 06               LD   c,(iy+6)   ; bc = block
05BB   FD 46 07               LD   b,(iy+7)   
05BE   E1                     POP   hl   ; hl = condition
05BF   18 DB                  JR   loop1   
05C1                LOOP3:       
05C1   FD 54                  LD   d,iyh   ; de = BP
05C3   FD 5D                  LD   e,iyl   
05C5   EB                     EX   de,hl   ; hl = BP, de = result
05C6   F9                     LD   sp,hl   ; sp = BP
05C7   E1                     POP   hl   ; hl = old BP
05C8   C1                     POP   bc   ; pop SCP (discard)
05C9   C1                     POP   bc   ; bc = IP
05CA   F9                     LD   sp,hl   ; sp = old BP
05CB   FD 21 00 00            LD   iy,0   ; iy = sp
05CF   FD 39                  ADD   iy,sp   
05D1   DD 21 89 0B            LD   ix,next   ; needed?
05D5   DD E9                  JP   (ix)   
05D7                CASE:        
05D7   E1                     POP   hl   ; get selector from stack
05D8   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05D9   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05DC   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05DF   D5                     PUSH   de   ; push SCP
05E0   FD E5                  PUSH   iy   ; push BP
05E2   FD 21 00 00            LD   iy,0   ; BP = SP
05E6   FD 39                  ADD   iy,sp   
05E8   E5                     PUSH   hl   ; push selector as first arg of new frame
05E9   DD E9                  JP   (ix)   
05EB                SELECT:      
05EB   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05EE   FD 6E FE               LD   l,(iy-2)   
05F1   23                     INC   hl   ; hl -= 1 index from second arg
05F2   29                     ADD   hl,hl   ; hl *= 2 word offset
05F3   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05F5   FD 5D                  LD   e,iyl   
05F7   EB                     EX   de,hl   
05F8   B7                     OR   a   ; hl = BP - offset
05F9   ED 52                  SBC   hl,de   
05FB   54 5D                  LD   de,hl   ; save arg ptr
05FD   2B                     DEC   hl   ; hl += 2
05FE   2B                     DEC   hl   
05FF   B7                     OR   a   ; arg ptr - stack pointer
0600   ED 72                  SBC   hl,sp   
0602   30 03                  JR   nc,case0   
0604   D1                     POP   de   ; pop last arg
0605   18 05                  JR   case1   
0607                CASE0:       
0607   EB                     EX   de,hl   
0608   2B                     DEC   hl   ; de = arg
0609   56                     LD   d,(hl)   
060A   2B                     DEC   hl   
060B   5E                     LD   e,(hl)   
060C                CASE1:       
060C   7A                     LD   a,d   ; is arg == NUL ? then skip
060D   B3                     OR   e   
060E   28 09                  JR   z,case2   
0610   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0613   FD 70 05               LD   (iy+5),b   
0616   42 4B                  LD   bc,de   ; IP = arg
0618   0B                     DEC   bc   
0619                CASE2:       
0619   DD E9                  JP   (ix)   
061B                WORDS:       
061B   21 02 00               LD   hl,2   
061E   18 03                  JR   bytes1   
0620                BYTES:       
0620   21 01 00               LD   hl,1   
0623                BYTES1:      
0623   22 9A 18               LD   (vDataWidth),hl   
0626   DD E9                  JP   (ix)   
0628                ARRAY:       
0628   C5                     PUSH   bc   ; create stack frame, push IP
0629   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
062C   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
062F   D5                     PUSH   de   ; push SCP
0630   FD E5                  PUSH   iy   ; push BP
0632   FD 21 00 00            LD   iy,0   ; BP = SP
0636   FD 39                  ADD   iy,sp   
0638   DD E9                  JP   (ix)   
063A                ARRAYEND:      
063A   FD 54                  LD   d,iyh   ; de = BP
063C   FD 5D                  LD   e,iyl   
063E   DD 62                  LD   ixh,d   ; ix = BP
0640   DD 6B                  LD   ixl,e   
0642   62 6B                  LD   hl,de   ; hl = de
0644   B7                     OR   a   
0645   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0647   CB 3C                  SRL   h   
0649   CB 1D                  RR   l   
064B   EB                     EX   de,hl   ; de = count
064C   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
064F   73                     LD   (hl),e   
0650   23                     INC   hl   
0651   72                     LD   (hl),d   
0652   23                     INC   hl   ; hl = array[0], de = count
0653   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
0656   FE 01                  CP   1   
0658   20 10                  JR   nz,arrayEnd2   
065A                ARRAYEND1:      ; byte
065A   DD 7E FE               LD   a,(ix-2)   
065D   77                     LD   (hl),a   
065E   23                     INC   hl   
065F   DD 2B                  DEC   ix   
0661   DD 2B                  DEC   ix   
0663   1B                     DEC   de   
0664   7B                     LD   a,e   
0665   B2                     OR   d   
0666   20 F2                  JR   nz,arrayEnd1   
0668   18 13                  JR   arrayEnd3   
066A                ARRAYEND2:      ; word
066A   DD 7E FE               LD   a,(ix-2)   
066D   77                     LD   (hl),a   
066E   23                     INC   hl   
066F   DD 7E FF               LD   a,(ix-1)   
0672   77                     LD   (hl),a   
0673   23                     INC   hl   
0674   DD 2B                  DEC   ix   
0676   DD 2B                  DEC   ix   
0678   1B                     DEC   de   
0679   7B                     LD   a,e   
067A   B2                     OR   d   
067B   20 ED                  JR   nz,arrayEnd2   
067D                ARRAYEND3:      
067D   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
067F   FD 5D                  LD   e,iyl   
0681   EB                     EX   de,hl   ; hl = BP, de = end of array
0682   F9                     LD   sp,hl   ; sp = BP
0683   E1                     POP   hl   ; hl = old BP, de = end of array
0684   DD E1                  POP   ix   ; pop SCP (discard)
0686   DD E1                  POP   ix   ; pop IP (discard)
0688   EB                     EX   de,hl   
0689   FD 62                  LD   iyh,d   
068B   FD 6B                  LD   iyl,e   
068D   EB                     EX   de,hl   
068E                             ; ld sp,hl                    ; sp = old BP
068E                             ; ld iy,0                     ; iy = sp
068E                             ; add iy,sp
068E   DD 21 89 0B            LD   ix,next   
0692   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0695   23                     INC   hl   
0696   23                     INC   hl   
0697   E5                     PUSH   hl   ; return array[0]
0698   EB                     EX   de,hl   ; hl = end of array, de = array[0]
0699   B7                     OR   a   
069A   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
069C   EB                     EX   de,hl   
069D   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
06A0   73                     LD   (hl),e   ; array[-2] = size
06A1   23                     INC   hl   
06A2   72                     LD   (hl),d   
06A3   23                     INC   hl   
06A4   19                     ADD   hl,de   
06A5   22 A6 18               LD   (vHeapPtr),hl   
06A8   DD E9                  JP   (ix)   
06AA                             ; str -- num
06AA                HASH:        
06AA   E1                     POP   hl   
06AB   C5                     PUSH   bc   
06AC   44 4D                  LD   bc,hl   
06AE   CD 27 08               CALL   hashStr   
06B1   C1                     POP   bc   
06B2   E5                     PUSH   hl   
06B3   DD E9                  JP   (ix)   
06B5                             ; symbol addr --
06B5                DEF:         
06B5   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06B7   E3                     EX   (sp),hl   
06B8   EB                     EX   de,hl   
06B9   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap de = addr
06BC   36 CD                  LD   (hl),$cd   ; compile "call exec"
06BE   23                     INC   hl   
06BF   36 E4                  LD   (hl),lsb(call)   
06C1   23                     INC   hl   
06C2   36 0B                  LD   (hl),msb(call)   
06C4   23                     INC   hl   
06C5   06 01                  LD   b,1   ; b = nesting
06C7                DEF1:        
06C7   1A                     LD   a,(de)   
06C8   13                     INC   de   
06C9   77                     LD   (hl),a   
06CA   23                     INC   hl   
06CB   FE 29                  CP   ")"   
06CD   28 25                  JR   z,def4   
06CF   FE 7D                  CP   "}"   
06D1   28 21                  JR   z,def4   
06D3   FE 5D                  CP   "]"   
06D5   28 1D                  JR   z,def4   
06D7   FE 28                  CP   "("   
06D9   28 13                  JR   z,def3   
06DB   FE 7B                  CP   "{"   
06DD   28 0F                  JR   z,def3   
06DF   FE 5B                  CP   "["   
06E1   28 0B                  JR   z,def3   
06E3   FE 27                  CP   "'"   
06E5   28 07                  JR   z,def3   
06E7   FE 60                  CP   "`"   
06E9   20 DC                  JR   nz,def1   
06EB                DEF2:        
06EB   04                     INC   b   
06EC   18 D9                  JR   def1   
06EE                DEF3:        
06EE   3E 80                  LD   a,$80   
06F0   A8                     XOR   b   
06F1   47                     LD   b,a   
06F2   18 D3                  JR   def1   
06F4                DEF4:        
06F4   05                     DEC   b   
06F5   20 D0                  JR   nz,def1   ; get the next element
06F7   AF                     XOR   a   ; end with NUL ??? needed?
06F8   77                     LD   (hl),a   
06F9   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06FD   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0700   E1                     POP   hl   ; de = addr, hl = IP
0701   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0702   44 4D                  LD   bc,hl   ; bc = symbol
0704   CD 40 08               CALL   defineEntry   
0707   38 00                  JR   c,def5   
0709                             ; call error
0709                             ; .cstr "Def Collision"
0709                DEF5:        
0709   C1                     POP   bc   
070A   DD E9                  JP   (ix)   
070C                             ; symbol array block --
070C                CLOSURE:      
070C   E1                     POP   hl   ; hl = block
070D   D1                     POP   de   ; de = array
070E   C5                     PUSH   bc   ; (sp) = block, (sp+2) = IP, (sp+2) = symbol
070F   E5                     PUSH   hl   
0710   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr de = array
0713   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0715   23                     INC   hl   
0716   36 F9                  LD   (hl),lsb(doclosure)   
0718   23                     INC   hl   
0719   36 0B                  LD   (hl),msb(doclosure)   
071B   23                     INC   hl   
071C   73                     LD   (hl),e   ; compile array
071D   23                     INC   hl   
071E   72                     LD   (hl),d   
071F   23                     INC   hl   
0720   D1                     POP   de   ; de =  block, (sp) = IP, (sp+2) = symbol
0721   06 01                  LD   b,1   ; b = nesting
0723   18 A2                  JR   def1   
0725                             ; symbol value --
0725                LET:         
0725   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0727   E3                     EX   (sp),hl   
0728   EB                     EX   de,hl   
0729   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
072C   36 CD                  LD   (hl),$cd   ; compile "call dolet"
072E   23                     INC   hl   
072F   36 2E                  LD   (hl),lsb(dolet)   
0731   23                     INC   hl   
0732   36 05                  LD   (hl),msb(dolet)   
0734   23                     INC   hl   
0735   73                     LD   (hl),e   
0736   23                     INC   hl   
0737   72                     LD   (hl),d   
0738   2B                     DEC   hl   
0739   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
073D   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0740   E1                     POP   hl   ; de = addr, hl = IP
0741   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0742   44 4D                  LD   bc,hl   ; bc = symbol
0744   CD 40 08               CALL   defineEntry   
0747   38 00                  JR   c,let2   
0749                             ; call error
0749                             ; .cstr "Let Collision"
0749                LET2:        
0749   C1                     POP   bc   
074A   DD E9                  JP   (ix)   
074C                             ; str -- addr
074C                ADDR:        
074C   E1                     POP   hl   ; hl = hash
074D   C5                     PUSH   bc   
074E   44 4D                  LD   bc,hl   
0750   CD 66 08               CALL   lookupEntry   
0753   38 03                  JR   c,addr1   
0755   21 00 00               LD   hl,0   
0758                             ; call printStr		
0758                             ; .cstr "Undefined"
0758                             ; jp interpret
0758                ADDR1:       
0758   C1                     POP   bc   
0759   11 03 00               LD   de,3   
075C   19                     ADD   hl,de   
075D   E5                     PUSH   hl   
075E   DD E9                  JP   (ix)   
0760                SYMBOL:      
0760   03                     INC   bc   
0761   11 00 1A               LD   de,PAD   
0764   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0766   18 02                  JR   symbol1   
0768                SYMBOL0:      ; copy to PAD area
0768   03                     INC   bc   ; characters that are part of the identifier
0769   13                     INC   de   
076A                SYMBOL1:      ; 0-9 A-Z a-z _
076A   0A                     LD   a,(bc)   
076B   12                     LD   (de),a   
076C   B7                     OR   a   
076D   28 0A                  JR   z,symbol2   
076F   6F                     LD   l,a   
0770   7E                     LD   a,(hl)   
0771   FE 5E                  CP   lsb(ident_)   
0773   28 F3                  JR   z,symbol0   
0775   FE 00                  CP   lsb(num_)   
0777   28 EF                  JR   z,symbol0   
0779                SYMBOL2:      
0779   0B                     DEC   bc   
077A   AF                     XOR   a   
077B   12                     LD   (de),a   ; terminate string with NUL
077C   C5                     PUSH   bc   
077D   01 00 1A               LD   bc,PAD   
0780   CD 27 08               CALL   hashStr   ; hl = hash
0783   C1                     POP   bc   
0784   E5                     PUSH   hl   
0785   DD E9                  JP   (ix)   
0787                IDENT:       
0787   11 00 1A               LD   de,PAD   
078A   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
078C   18 02                  JR   ident1   
078E                IDENT0:      ; copy to PAD area
078E   03                     INC   bc   ; characters that are part of the identifier
078F   13                     INC   de   
0790                IDENT1:      ; 0-9 A-Z a-z _
0790   0A                     LD   a,(bc)   
0791   12                     LD   (de),a   
0792   B7                     OR   a   
0793   28 0A                  JR   z,ident2   
0795   6F                     LD   l,a   
0796   7E                     LD   a,(hl)   
0797   FE 5E                  CP   lsb(ident_)   
0799   28 F3                  JR   z,ident0   
079B   FE 00                  CP   lsb(num_)   
079D   28 EF                  JR   z,ident0   
079F                IDENT2:      
079F   0B                     DEC   bc   
07A0   AF                     XOR   a   
07A1   12                     LD   (de),a   ; terminate string with NUL
07A2   C5                     PUSH   bc   
07A3   01 00 1A               LD   bc,PAD   
07A6   CD 27 08               CALL   hashStr   ; hl = hash
07A9   44 4D                  LD   bc,hl   
07AB   CD 66 08               CALL   lookupEntry   
07AE   C1                     POP   bc   
07AF   38 02                  JR   c,ident3   ; todo: no entry? print an error message
07B1   DD E9                  JP   (ix)   
07B3                IDENT3:      
07B3   E9                     JP   (hl)   
07B4                FRAC:        
07B4   2A 98 18               LD   hl,(vFrac)   
07B7   E5                     PUSH   hl   
07B8   DD E9                  JP   (ix)   
07BA                SQRT1:       
07BA   E1                     POP   hl   
07BB   C5                     PUSH   bc   
07BC   CD A3 08               CALL   squareRoot   
07BF   ED 43 98 18            LD   (vFrac),bc   
07C3   C1                     POP   bc   
07C4   D5                     PUSH   de   
07C5   DD E9                  JP   (ix)   
07C7                ABS1:        
07C7   E1                     POP   hl   
07C8   CB 7C                  BIT   7,h   
07CA   C8                     RET   z   
07CB   AF                     XOR   a   
07CC   95                     SUB   l   
07CD   6F                     LD   l,a   
07CE   9F                     SBC   a,a   
07CF   94                     SUB   h   
07D0   67                     LD   h,a   
07D1   E5                     PUSH   hl   
07D2   DD E9                  JP   (ix)   
07D4                MOD:         
07D4   D1                     POP   de   ; get first value
07D5   E1                     POP   hl   ; get 2nd value
07D6   C5                     PUSH   bc   ; preserve the IP
07D7   44 4D                  LD   bc,hl   
07D9   CD 8A 08               CALL   divide   
07DC   C1                     POP   bc   
07DD   E5                     PUSH   hl   ; push remainder
07DE   DD E9                  JP   (ix)   
07E0                             ; hl = value1, de = value2
07E0                             ; hl = result
07E0                EQUALS:      
07E0   B7                     OR   a   ; reset the carry flag
07E1   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07E3   28 10                  JR   z,true1   
07E5   C3 FB 07               JP   false1   
07E8                             ; hl = value1 de = value2
07E8                             ; hl = result
07E8                LESSTHANEQ:      
07E8   B7                     OR   a   
07E9   ED 52                  SBC   hl,de   
07EB   18 05                  JR   lessthan1   
07ED                             ; hl = value1 de = value2
07ED                             ; hl = result
07ED                LESSTHAN:      
07ED   B7                     OR   a   
07EE   ED 52                  SBC   hl,de   
07F0   28 09                  JR   z,false1   
07F2                LESSTHAN1:      
07F2   FA FB 07               JP   m,false1   
07F5                TRUE1:       
07F5   21 FF FF               LD   hl,TRUE   
07F8   E5                     PUSH   hl   
07F9   DD E9                  JP   (ix)   
07FB                FALSE1:      
07FB   21 00 00               LD   hl,FALSE   
07FE   E5                     PUSH   hl   
07FF   DD E9                  JP   (ix)   
0801                             ; Z80 port input
0801                             ; port -- value
0801                INPUT:       
0801   E1                     POP   hl   
0802   59                     LD   e,c   ; save IP
0803   4D                     LD   c,l   
0804   ED 68                  IN   l,(c)   
0806   26 00                  LD   h,0   
0808   4B                     LD   c,e   ; restore IP
0809   E5                     PUSH   hl   
080A   DD E9                  JP   (ix)   
080C                             ; Z80 port output
080C                             ; value port --
080C                OUTPUT:      
080C   E1                     POP   hl   
080D   59                     LD   e,c   ; save IP
080E   4D                     LD   c,l   
080F   E1                     POP   hl   
0810   ED 69                  OUT   (c),l   
0812   4B                     LD   c,e   ; restore IP
0813   DD E9                  JP   (ix)   
0815                KEY:         
0815   CD 81 00               CALL   getchar   
0818   26 00                  LD   h,0   
081A   6F                     LD   l,a   
081B   E5                     PUSH   hl   
081C   DD E9                  JP   (ix)   
081E                NEG:         
081E   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0821   D1                     POP   de   
0822   C3 98 03               JP   sub2   ; use the SUBtract routine
0825                FILTER:      
0825                MAP:         
0825                SCAN:        
0825   DD E9                  JP   (ix)   
0827                             ; -------------------------------------------------------------------------------
0827                             ; hash C-string
0827                             ; BC = str
0827                             ; HL = hash
0827                HASHSTR:      
0827   21 00 00               LD   hl,0   
082A                HASHSTR1:      
082A   0A                     LD   a,(bc)   ; load next char
082B   03                     INC   bc   
082C   FE 00                  CP   0   ; NUL?
082E   C8                     RET   z   
082F                HASHSTR2:      
082F   16 00                  LD   d,0   
0831   5F                     LD   e,a   
0832   19                     ADD   hl,de   
0833   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0835   29                     ADD   hl,hl   ; shift left
0836   19                     ADD   hl,de   ; add
0837   29                     ADD   hl,hl   ; shift left
0838   29                     ADD   hl,hl   ; shift left
0839   29                     ADD   hl,hl   ; shift left
083A   29                     ADD   hl,hl   ; shift left
083B   29                     ADD   hl,hl   ; shift left
083C   29                     ADD   hl,hl   ; shift left
083D   19                     ADD   hl,de   ; add
083E   18 EA                  JR   hashStr1   
0840                             ; add entry to hash slots and hash pointers
0840                             ; bc = hash (b = hi, c = lo), de = addr
0840                             ; sets carry if successful
0840                DEFINEENTRY:      
0840   CB 21                  SLA   c   ; lo = lo * 2
0842   69                     LD   l,c   ; lo1 = lo
0843   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0845                DEFINEENTRY0:      
0845   7E                     LD   a,(hl)   ; a = (lo1)
0846   FE FF                  CP   UNUSED   ; is it unused?
0848   28 12                  JR   z,defineEntry3   ; yes, add entry
084A   79                     LD   a,c   ; a = lo
084B   BE                     CP   (hl)   ; compare (lo1) with lo
084C   20 06                  JR   nz,defineEntry1   ; no match loop around
084E   2C                     INC   l   
084F   78                     LD   a,b   ; a = hi
0850   BE                     CP   (hl)   ; compare (lo1+1) with hi
0851   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0853   2D                     DEC   l   ; restore l
0854                DEFINEENTRY1:      
0854   2C                     INC   l   ; try next entry
0855   2C                     INC   l   
0856   79                     LD   a,c   ; compare lo and lo1
0857   BD                     CP   l   ; if equal then there's no space left, reject
0858   20 EB                  JR   nz,defineEntry0   
085A                DEFINEENTRY2:      
085A   B7                     OR   a   ; clear carry flag, failure
085B   C9                     RET      
085C                DEFINEENTRY3:      ; new entry
085C   71                     LD   (hl),c   ; (lo1) = hash lo
085D   23                     INC   hl   
085E   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
085F   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0861   72                     LD   (hl),d   
0862   2B                     DEC   hl   
0863   73                     LD   (hl),e   ; (slot + 2) = address
0864   37                     SCF      ; set carry flag, success
0865   C9                     RET      
0866                             ; looks up hash and returns address
0866                             ; bc = hash
0866                             ; returns addr in hl, sets carry if successful
0866                LOOKUPENTRY:      
0866   CB 21                  SLA   c   ; lo = lo * 2
0868   69                     LD   l,c   ; lo1 = lo
0869   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
086B                LOOKUPENTRY0:      
086B   7E                     LD   a,(hl)   ; a = (hl), slot
086C   FE FF                  CP   UNUSED   ; is it unused?
086E   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0870   79                     LD   a,c   ; a = lo
0871   BE                     CP   (hl)   ; compare (lo1) with lo
0872   20 06                  JR   nz,lookupEntry1   ; no match loop around
0874   2C                     INC   l   
0875   78                     LD   a,b   ; a = hi
0876   BE                     CP   (hl)   ; compare (lo1+1) with hi
0877   28 09                  JR   z,lookupEntry3   
0879   2D                     DEC   l   
087A                LOOKUPENTRY1:      
087A   2C                     INC   l   
087B   2C                     INC   l   
087C   79                     LD   a,c   
087D   BD                     CP   l   ; no space left, reject
087E   20 EB                  JR   nz,lookupEntry0   
0880                LOOKUPENTRY2:      
0880   B7                     OR   a   ; clear carry flag, failure
0881   C9                     RET      
0882                LOOKUPENTRY3:      
0882   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0884   56                     LD   d,(hl)   
0885   2D                     DEC   l   ; restore l
0886   5E                     LD   e,(hl)   ; (slot + 2) = address
0887   EB                     EX   de,hl   
0888   37                     SCF      
0889   C9                     RET      
088A                             ; division subroutine.
088A                             ; bc: divisor, de: dividend, hl: remainder
088A                DIVIDE:      
088A   21 00 00               LD   hl,0   ; zero the remainder
088D   3E 10                  LD   a,16   ; loop counter
088F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
088F   CB 21                  SLA   c   
0891   CB 10                  RL   b   
0893   ED 6A                  ADC   hl,hl   
0895   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0897   38 03                  JR   c,divide2   
0899   0C                     INC   c   
089A   18 01                  JR   divide3   
089C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
089C   19                     ADD   hl,de   
089D                DIVIDE3:      
089D   3D                     DEC   a   
089E   20 EF                  JR   nz,divide1   
08A0   50 59                  LD   de,bc   ; result from bc to de
08A2   C9                     RET      
08A3                             ; squareroot
08A3                             ; Input: HL = value
08A3                             ; Result: DE = square root BC = remainder
08A3                SQUAREROOT:      
08A3   01 00 08               LD   bc,0800h   
08A6   59                     LD   e,c   
08A7   AF                     XOR   a   
08A8                SQUAREROOT1:      
08A8   29                     ADD   hl,hl   
08A9   CB 11                  RL   c   
08AB   ED 6A                  ADC   hl,hl   
08AD   CB 11                  RL   c   
08AF   30 02                  JR   nc,$+4   
08B1   CB C5                  SET   0,l   
08B3   7B                     LD   a,e   
08B4   87                     ADD   a,a   
08B5   5F                     LD   e,a   
08B6   87                     ADD   a,a   
08B7   CB 45                  BIT   0,l   
08B9   20 03                  JR   nz,$+5   
08BB   91                     SUB   c   
08BC   30 05                  JR   nc,squareRoot4   
08BE   79                     LD   a,c   
08BF   93                     SUB   e   
08C0   1C                     INC   e   
08C1   93                     SUB   e   
08C2   4F                     LD   c,a   
08C3                SQUAREROOT4:      
08C3   10 E3                  DJNZ   squareRoot1   
08C5   CB 45                  BIT   0,l   
08C7   28 01                  JR   z,squareRoot5   
08C9   04                     INC   b   
08CA                SQUAREROOT5:      
08CA   16 00                  LD   d,0   
08CC   C9                     RET      
08CD                PRTDEC:      
08CD   CB 7C                  BIT   7,h   
08CF   28 0B                  JR   z,prtdec0   
08D1   3E 2D                  LD   a,"-"   
08D3   CD 85 00               CALL   putchar   
08D6   AF                     XOR   a   
08D7   95                     SUB   l   
08D8   6F                     LD   l,a   
08D9   9F                     SBC   a,a   
08DA   94                     SUB   h   
08DB   67                     LD   h,a   
08DC                PRTDEC0:      
08DC   C5                     PUSH   bc   
08DD   0E 00                  LD   c,0   ; leading zeros flag = false
08DF   11 F0 D8               LD   de,-10000   
08E2   CD FE 08               CALL   prtdec1   
08E5   11 18 FC               LD   de,-1000   
08E8   CD FE 08               CALL   prtdec1   
08EB   11 9C FF               LD   de,-100   
08EE   CD FE 08               CALL   prtdec1   
08F1   1E F6                  LD   e,-10   
08F3   CD FE 08               CALL   prtdec1   
08F6   0C                     INC   c   ; flag = true for at least digit
08F7   1E FF                  LD   e,-1   
08F9   CD FE 08               CALL   prtdec1   
08FC   C1                     POP   bc   
08FD   C9                     RET      
08FE                PRTDEC1:      
08FE   06 2F                  LD   b,"0"-1   
0900                PRTDEC2:      
0900   04                     INC   b   
0901   19                     ADD   hl,de   
0902   38 FC                  JR   c,prtdec2   
0904   ED 52                  SBC   hl,de   
0906   3E 30                  LD   a,"0"   
0908   B8                     CP   b   
0909   20 05                  JR   nz,prtdec3   
090B   AF                     XOR   a   
090C   B1                     OR   c   
090D   C8                     RET   z   
090E   18 01                  JR   prtdec4   
0910                PRTDEC3:      
0910   0C                     INC   c   
0911                PRTDEC4:      
0911   78                     LD   a,b   
0912   C3 85 00               JP   putchar   
0915                PRTHEX:      ; display hl as a 16-bit number in hex.
0915   C5                     PUSH   bc   ; preserve the IP
0916   7C                     LD   a,h   
0917   CD 20 09               CALL   prthex2   
091A   7D                     LD   a,l   
091B   CD 20 09               CALL   prthex2   
091E   C1                     POP   bc   
091F   C9                     RET      
0920                PRTHEX2:      
0920   4F                     LD   c,a   
0921   1F                     RRA      
0922   1F                     RRA      
0923   1F                     RRA      
0924   1F                     RRA      
0925   CD 29 09               CALL   prthex3   
0928   79                     LD   a,c   
0929                PRTHEX3:      
0929   E6 0F                  AND   0x0F   
092B   C6 90                  ADD   a,0x90   
092D   27                     DAA      
092E   CE 40                  ADC   a,0x40   
0930   27                     DAA      
0931   C3 85 00               JP   putchar   
0934                PRTSTR0:      
0934   CD 85 00               CALL   putchar   
0937   23                     INC   hl   
0938                PRTSTR:      
0938   7E                     LD   a,(hl)   
0939   B7                     OR   a   
093A   20 F8                  JR   nz,prtstr0   
093C   C9                     RET      
093D                             ; **************************************************************************
093D                             ; calculate nesting value
093D                             ; a is char to be tested,
093D                             ; e is the nesting value (initially 0)
093D                             ; e is increased by ( and [
093D                             ; e is decreased by ) and ]
093D                             ; e has its bit 7 toggled by `
093D                             ; limited to 127 levels
093D                             ; **************************************************************************
093D                NESTING:      
093D   FE 22                  CP   $22   ; quote char
093F   20 0A                  JR   nz,nesting1   
0941   CB 7B                  BIT   7,e   
0943   28 03                  JR   z,nesting1a   
0945   CB BB                  RES   7,e   
0947   C9                     RET      
0948                NESTING1A:      
0948   CB FB                  SET   7,e   
094A   C9                     RET      
094B                NESTING1:      
094B   CB 7B                  BIT   7,e   
094D   C0                     RET   nz   
094E   FE 7B                  CP   "{"   
0950   28 08                  JR   z,nesting2   
0952   FE 5B                  CP   "["   
0954   28 04                  JR   z,nesting2   
0956   FE 28                  CP   "("   
0958   20 02                  JR   nz,nesting3   
095A                NESTING2:      
095A   1C                     INC   e   
095B   C9                     RET      
095C                NESTING3:      
095C   FE 7D                  CP   "}"   
095E   28 07                  JR   z,nesting4   
0960   FE 5D                  CP   "]"   
0962   28 03                  JR   z,nesting4   
0964   FE 29                  CP   ")"   
0966   C0                     RET   nz   
0967                NESTING4:      
0967   1D                     DEC   e   
0968   C9                     RET      
0969                PROMPT:      
0969   CD 79 09               CALL   printStr   
096C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0971   C9                     RET      
0972                CRLF:        
0972   CD 79 09               CALL   printStr   
0975   0D 0A 00               .CSTR   "\r\n"   
0978   C9                     RET      
0979                PRINTSTR:      
0979   E3                     EX   (sp),hl   ; swap			
097A   CD 38 09               CALL   prtstr   
097D   23                     INC   hl   ; inc past NUL
097E   E3                     EX   (sp),hl   ; put it back	
097F   C9                     RET      
0980                DEFINE:      
0980   E1                     POP   hl   
0981   7E                     LD   a,(hl)   
0982   23                     INC   hl   
0983   44 4D                  LD   bc,hl   
0985   5F                     LD   e,a   
0986   16 00                  LD   d,0   
0988   19                     ADD   hl,de   
0989   5E                     LD   e,(hl)   
098A   23                     INC   hl   
098B   56                     LD   d,(hl)   
098C   23                     INC   hl   
098D   E5                     PUSH   hl   ; bc = str
098E   D5                     PUSH   de   
098F   CD 27 08               CALL   hashStr   ; hl = hash
0992   D1                     POP   de   
0993   44 4D                  LD   bc,hl   
0995   C3 40 08               JP   defineEntry   
0998                INIT:        
0998   DD 21 89 0B            LD   ix,next   
099C   FD 21 80 18            LD   iy,STACK   
09A0   21 80 01               LD   hl,isysVars   
09A3   11 98 18               LD   de,sysVars   
09A6   01 10 00               LD   bc,8 * 2   
09A9   ED B0                  LDIR      
09AB   3E FF                  LD   a,UNUSED   
09AD   06 00                  LD   b,0   
09AF   21 00 1B               LD   hl,hashSlots   
09B2                INIT1:       
09B2   77                     LD   (hl),a   
09B3   23                     INC   hl   
09B4   10 FC                  DJNZ   init1   
09B6   CD 80 09               CALL   define   
09B9   04 61 62 73 00         .PSTR   "abs",0   
09BE   C7 07                  DW   abs1   
09C0   CD 80 09               CALL   define   
09C3   05 61 64 64 72 00      .PSTR   "addr",0   
09C9   4C 07                  DW   addr   
09CB   CD 80 09               CALL   define   
09CE   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09D5   20 06                  DW   bytes   
09D7   CD 80 09               CALL   define   
09DA   05 63 61 6C 6C 00      .PSTR   "call",0   
09E0   E4 0B                  DW   call   
09E2   CD 80 09               CALL   define   
09E5   05 63 61 73 65 00      .PSTR   "case",0   
09EB   D7 05                  DW   case   
09ED   CD 80 09               CALL   define   
09F0   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
09F9   0C 07                  DW   closure   
09FB   CD 80 09               CALL   define   
09FE   04 64 65 66 00         .PSTR   "def",0   
0A03   B5 06                  DW   def   
0A05   CD 80 09               CALL   define   
0A08   05 65 78 65 63 00      .PSTR   "exec",0   
0A0E   CA 0B                  DW   exec   
0A10   CD 80 09               CALL   define   
0A13   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A1A   00 00                  DW   false   
0A1C   CD 80 09               CALL   define   
0A1F   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A27   25 08                  DW   filter   
0A29   CD 80 09               CALL   define   
0A2C   05 66 72 61 63 00      .PSTR   "frac",0   
0A32   B4 07                  DW   frac   
0A34   CD 80 09               CALL   define   
0A37   04 67 65 74 00         .PSTR   "get",0   
0A3C   2E 05                  DW   get   
0A3E   CD 80 09               CALL   define   
0A41   05 68 61 73 68 00      .PSTR   "hash",0   
0A47   AA 06                  DW   hash   
0A49   CD 80 09               CALL   define   
0A4C   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A53   01 08                  DW   input   
0A55   CD 80 09               CALL   define   
0A58   03 69 66 00            .PSTR   "if",0   
0A5C   55 05                  DW   if   
0A5E   CD 80 09               CALL   define   
0A61   05 69 66 74 65 00      .PSTR   "ifte",0   
0A67   5A 05                  DW   ifte   
0A69   CD 80 09               CALL   define   
0A6C   04 6B 65 79 00         .PSTR   "key",0   
0A71   15 08                  DW   key   
0A73   CD 80 09               CALL   define   
0A76   04 6C 65 74 00         .PSTR   "let",0   
0A7B   25 07                  DW   let   
0A7D   CD 80 09               CALL   define   
0A80   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0A86   87 05                  DW   loop   
0A88   CD 80 09               CALL   define   
0A8B   04 6D 61 70 00         .PSTR   "map",0   
0A90   25 08                  DW   map   
0A92   CD 80 09               CALL   define   
0A95   04 6D 6F 64 00         .PSTR   "mod",0   
0A9A   D4 07                  DW   mod   
0A9C   CD 80 09               CALL   define   
0A9F   04 6E 65 67 00         .PSTR   "neg",0   
0AA4   1E 08                  DW   neg   
0AA6   CD 80 09               CALL   define   
0AA9   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0AB1   0C 08                  DW   output   
0AB3   CD 80 09               CALL   define   
0AB6   05 73 63 61 6E 00      .PSTR   "scan",0   
0ABC   01 00                  DW   scan   
0ABE   CD 80 09               CALL   define   
0AC1   07 73 65 6C 65 63 74 00 .PSTR   "select",0   
0AC9   EB 05                  DW   select   
0ACB   CD 80 09               CALL   define   
0ACE   04 73 65 74 00         .PSTR   "set",0   
0AD3   40 05                  DW   set   
0AD5   CD 80 09               CALL   define   
0AD8   04 73 68 6C 00         .PSTR   "shl",0   
0ADD   D3 03                  DW   shl   
0ADF   CD 80 09               CALL   define   
0AE2   04 73 68 72 00         .PSTR   "shr",0   
0AE7   E3 03                  DW   shr   
0AE9   CD 80 09               CALL   define   
0AEC   05 73 71 72 74 00      .PSTR   "sqrt",0   
0AF2   BA 07                  DW   sqrt1   
0AF4   CD 80 09               CALL   define   
0AF7   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0AFF   7D 05                  DW   switch   
0B01   CD 80 09               CALL   define   
0B04   05 74 72 75 65 00      .PSTR   "true",0   
0B0A   FF FF                  DW   true   
0B0C   CD 80 09               CALL   define   
0B0F   06 77 6F 72 64 73 00   .PSTR   "words",0   
0B16   1B 06                  DW   words   
0B18   C9                     RET      
0B19                START:       
0B19   31 80 18               LD   sp,STACK   ; start of Siena
0B1C   CD 98 09               CALL   init   ; setups
0B1F   CD 79 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B22   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0B2F                INTERPRET:      
0B2F   CD 69 09               CALL   prompt   
0B32   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B35   ED 43 9C 18            LD   (vTIBPtr),bc   
0B39                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B39   1E 00                  LD   e,0   ; initilize nesting value
0B3B   C5                     PUSH   bc   ; save offset into TIB,
0B3C                             ; bc is also the count of chars in TIB
0B3C   21 00 19               LD   hl,TIB   ; hl is start of TIB
0B3F   18 06                  JR   interpret4   
0B41                INTERPRET3:      
0B41   7E                     LD   a,(hl)   ; a = char in TIB
0B42   23                     INC   hl   ; inc pointer into TIB
0B43   0B                     DEC   bc   ; dec count of chars in TIB
0B44   CD 3D 09               CALL   nesting   ; update nesting value
0B47                INTERPRET4:      
0B47   79                     LD   a,c   ; is count zero?
0B48   B0                     OR   b   
0B49   20 F6                  JR   nz,interpret3   ; if not loop
0B4B   C1                     POP   bc   ; restore offset into TIB
0B4C                WAITCHAR:      
0B4C   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B4F   FE 20                  CP   $20   ; compare to space
0B51   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B53   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B55                             ; ???? NEEDED?
0B55   28 2A                  JR   z,waitchar4   
0B57   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B59   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B5B                MACRO:       
0B5B                             ;  ld (vTIBPtr),bc
0B5B                             ;  ld hl,ctrlCodes
0B5B                             ;  add a,l			            ; look up key of macros
0B5B                             ;  ld l,a
0B5B                             ;  ld e,(hl)
0B5B                             ;  ld a,e
0B5B                             ;  or a
0B5B                             ;  jr z,macro1
0B5B                             ;  ld d,msb(macros)
0B5B                             ;  push de
0B5B                             ;  call call		            ; Siena exec_ operation and jump to it
0B5B                             ;  db DC1,0
0B5B                             ; macro1:
0B5B                             ;  ld bc,(vTIBPtr)
0B5B   18 DC                  JR   interpret2   
0B5D                WAITCHAR1:      
0B5D   21 00 19               LD   hl,TIB   
0B60   09                     ADD   hl,bc   
0B61   77                     LD   (hl),a   ; store the character in textbuf
0B62   03                     INC   bc   
0B63   CD 85 00               CALL   putchar   ; echo character to screen
0B66   CD 3D 09               CALL   nesting   
0B69   18 E1                  JR   waitchar   ; wait for next character
0B6B                WAITCHAR3:      
0B6B   21 00 19               LD   hl,TIB   
0B6E   09                     ADD   hl,bc   
0B6F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B71   23                     INC   hl   
0B72   36 0A                  LD   (hl),"\n"   
0B74   23                     INC   hl   
0B75   03                     INC   bc   
0B76   03                     INC   bc   
0B77   CD 72 09               CALL   crlf   ; echo character to screen
0B7A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B7B   B7                     OR   a   
0B7C   20 CE                  JR   nz,waitchar   
0B7E   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0B80   03                     INC   bc   
0B81                WAITCHAR4:      
0B81   ED 43 9C 18            LD   (vTIBPtr),bc   
0B85   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B88                             ; we pressed enter
0B88   0B                     DEC   bc   
0B89                NEXT:        
0B89   03                     INC   bc   ; Increment the IP
0B8A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B8B                             ; bit 7,a                   ; is 15-bit opcode ?
0B8B                             ; jr nz,next3
0B8B   FE 20                  CP   " "   ; whitespace?
0B8D   28 FA                  JR   z,next   ; space? ignore
0B8F   38 07                  JR   c,next1   
0B91   6F                     LD   l,a   ; index into table
0B92   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B94   6E                     LD   l,(hl)   ; get low jump address
0B95   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0B97   E9                     JP   (hl)   ; Jump to routine
0B98                NEXT1:       
0B98   FE 1B                  CP   ESC   ; escape from interpreter
0B9A   28 07                  JR   z,escape   
0B9C   FE 00                  CP   NUL   ; end of input string?
0B9E   28 15                  JR   z,exit   
0BA0                             ; cp ETX                      ; end of command line input text?
0BA0                             ; jr nz,next
0BA0                             ;     ld hl,-STACK               ; etx, is SP valid? (too many pops?)
0BA0                             ;     add hl,sp
0BA0                             ;     jr nc,next2
0BA0                             ;     ld sp,STACK                ; yes, reset stack
0BA0                             ; next2:
0BA0   C3 2F 0B               JP   interpret   ; no, other whitespace, macros?
0BA3                             ; next3:
0BA3                             ;     ld h,a                    ; build address
0BA3                             ;     inc bc
0BA3                             ;     ld a,(bc)
0BA3                             ;     ld l,a
0BA3                             ;     add hl,hl
0BA3                             ;     jp (hl)
0BA3                ESCAPE:      
0BA3   60 69                  LD   hl,bc   ; address of code after escape opcode
0BA5   23                     INC   hl   
0BA6   E9                     JP   (hl)   
0BA7                             ; clear stack args
0BA7                CLEAR:       
0BA7   FD 54                  LD   d,iyh   ; de = BP
0BA9   FD 5D                  LD   e,iyl   
0BAB   EB                     EX   de,hl   ; hl = BP, de = result
0BAC   F9                     LD   sp,hl   ; sp = BP
0BAD   21 00 00               LD   hl,0   
0BB0   22 9A 18               LD   (vDataWidth),hl   
0BB3   DD E9                  JP   (ix)   
0BB5                EXIT:        
0BB5   50 59                  LD   de,bc   ; address of code after exit opcode
0BB7   13                     INC   de   
0BB8   D9                     EXX      
0BB9   C1                     POP   bc   ; bc = last result
0BBA   FD 54                  LD   d,iyh   ; de = BP
0BBC   FD 5D                  LD   e,iyl   
0BBE   EB                     EX   de,hl   ; hl = BP
0BBF   F9                     LD   sp,hl   ; sp = BP
0BC0   D9                     EXX      
0BC1   E1                     POP   hl   ; hl = old BP
0BC2   C1                     POP   bc   ; pop SCP (discard)
0BC3   C1                     POP   bc   ; bc = IP
0BC4   F9                     LD   sp,hl   ; sp = old BP
0BC5   D9                     EXX      
0BC6   C5                     PUSH   bc   ; push result
0BC7   D9                     EXX      
0BC8   EB                     EX   de,hl   
0BC9   E9                     JP   (hl)   
0BCA                             ; execute a block of code
0BCA                             ; uses parent scope
0BCA                EXEC:        ; execute code at pointer
0BCA   E1                     POP   hl   ; hl = pointer to code
0BCB   7C                     LD   a,h   ; skip if destination address is NUL
0BCC   B5                     OR   l   
0BCD   28 13                  JR   z,exec2   
0BCF   C5                     PUSH   bc   ; push IP
0BD0   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BD3   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BD6   D5                     PUSH   de   ; push SCP
0BD7   FD E5                  PUSH   iy   ; push BP
0BD9   FD 21 00 00            LD   iy,0   ; BP = SP
0BDD   FD 39                  ADD   iy,sp   
0BDF   44 4D                  LD   bc,hl   ; IP = pointer to code
0BE1   0B                     DEC   bc   ; dec to prepare for next routine
0BE2                EXEC2:       
0BE2   DD E9                  JP   (ix)   
0BE4                             ; call with args
0BE4                             ; creates a scope
0BE4                CALL:        ; execute code at pointer
0BE4   E1                     POP   hl   ; hl = pointer to code
0BE5                CALL1:       
0BE5   7C                     LD   a,h   ; skip if destination address is NUL
0BE6   B5                     OR   l   
0BE7   28 0E                  JR   z,call2   
0BE9   C5                     PUSH   bc   ; push IP
0BEA   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0BEC   FD E5                  PUSH   iy   ; push BP
0BEE   FD 21 00 00            LD   iy,0   ; BP = SP
0BF2   FD 39                  ADD   iy,sp   
0BF4   44 4D                  LD   bc,hl   ; IP = pointer to code
0BF6   0B                     DEC   bc   ; dec to prepare for next routine
0BF7                CALL2:       
0BF7   DD E9                  JP   (ix)   
0BF9                             ; call with args
0BF9                             ; pushes array, creates a scope
0BF9                DOCLOSURE:      
0BF9   E1                     POP   hl   
0BFA   5E                     LD   e,(hl)   ; load array and push
0BFB   23                     INC   hl   
0BFC   56                     LD   d,(hl)   
0BFD   23                     INC   hl   
0BFE   D5                     PUSH   de   
0BFF   C3 E5 0B               JP   call1   
0C02                             ; ; -- addr
0C02                             ; ; returns address of variable
0C02                             ; dolet:				            ; execute code at pointer
0C02                             ;     pop hl
0C02                             ;     ld (vSetter),hl             ; store address in setter
0C02                             ;     ld e,(hl)
0C02                             ;     inc hl
0C02                             ;     ld d,(hl)
0C02                             ;     push de
0C02                             ;     jp (ix)
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VSETTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x 1000 let x 10 set x", 10
4000   31 80 18               LD   SP,STACK   
4003   CD 98 09               CALL   init   
4006   CD CA 0B               CALL   exec   
4009   3A 78 20 31 30 30 30 20 6C 65 74 20 78 20 31 30 20 73 65 74 20 78 00 .CSTR   ":x 1000 let x 10 set x"   
4020                          ;*Macro unroll:  expect ":x 1000 let x 10 set x",10
4020   E1                     POP   HL   
4021   E5                     PUSH   HL   
4022   11 0A 00               LD   DE,10   
4025   B7                     OR   A   
4026   ED 52                  SBC   HL,DE   
4028   7D                     LD   A,L   
4029   B4                     OR   H   
402A   28 61                  JR   Z,expectM_0_2367S43   
402C   CD 79 09               CALL   printStr   
402F   43 6F 64 65 3A 20 3A 78 20 31 30 30 30 20 6C 65 74 20 78 20 31 30 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 1000 let x 10 set x"   
404C   CD 79 09               CALL   printStr   
404F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405E   21 0A 00               LD   HL,10   
4061   CD CD 08               CALL   prtdec   
4064   CD 79 09               CALL   printStr   
4067   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4074   E1                     POP   hl   
4075   E5                     PUSH   hl   
4076   CD CD 08               CALL   prtdec   
4079   E1                     POP   hl   
407A   CD 79 09               CALL   printStr   
407D   20 28 23 00            .CSTR   " (#"   
4081   CD 15 09               CALL   prthex   
4084   CD 79 09               CALL   printStr   
4087   29 0D 0A 00            .CSTR   ")\r\n"   
408B   76                     HALT      
408C   00                     .CSTR      
408D                EXPECTM_0_2367S43:      
408D   E1                     POP   HL   
408E                          ;*Macro unroll:  test ":x [100] { @1 } closure x", 100
408E   31 80 18               LD   SP,STACK   
4091   CD 98 09               CALL   init   
4094   CD CA 0B               CALL   exec   
4097   3A 78 20 5B 31 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100] { @1 } closure x"   
40B1                          ;*Macro unroll:  expect ":x [100] { @1 } closure x",100
40B1   E1                     POP   HL   
40B2   E5                     PUSH   HL   
40B3   11 64 00               LD   DE,100   
40B6   B7                     OR   A   
40B7   ED 52                  SBC   HL,DE   
40B9   7D                     LD   A,L   
40BA   B4                     OR   H   
40BB   28 64                  JR   Z,expectM_0_2368S43   
40BD   CD 79 09               CALL   printStr   
40C0   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100] { @1 } closure x"   
40E0   CD 79 09               CALL   printStr   
40E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40F2   21 64 00               LD   HL,100   
40F5   CD CD 08               CALL   prtdec   
40F8   CD 79 09               CALL   printStr   
40FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4108   E1                     POP   hl   
4109   E5                     PUSH   hl   
410A   CD CD 08               CALL   prtdec   
410D   E1                     POP   hl   
410E   CD 79 09               CALL   printStr   
4111   20 28 23 00            .CSTR   " (#"   
4115   CD 15 09               CALL   prthex   
4118   CD 79 09               CALL   printStr   
411B   29 0D 0A 00            .CSTR   ")\r\n"   
411F   76                     HALT      
4120   00                     .CSTR      
4121                EXPECTM_0_2368S43:      
4121   E1                     POP   HL   
4122                          ;*Macro unroll:  test ":x [100 200] { @2 } closure x", 200
4122   31 80 18               LD   SP,STACK   
4125   CD 98 09               CALL   init   
4128   CD CA 0B               CALL   exec   
412B   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100 200] { @2 } closure x"   
4149                          ;*Macro unroll:  expect ":x [100 200] { @2 } closure x",200
4149   E1                     POP   HL   
414A   E5                     PUSH   HL   
414B   11 C8 00               LD   DE,200   
414E   B7                     OR   A   
414F   ED 52                  SBC   HL,DE   
4151   7D                     LD   A,L   
4152   B4                     OR   H   
4153   28 68                  JR   Z,expectM_0_2369S43   
4155   CD 79 09               CALL   printStr   
4158   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100 200] { @2 } closure x"   
417C   CD 79 09               CALL   printStr   
417F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
418E   21 C8 00               LD   HL,200   
4191   CD CD 08               CALL   prtdec   
4194   CD 79 09               CALL   printStr   
4197   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A4   E1                     POP   hl   
41A5   E5                     PUSH   hl   
41A6   CD CD 08               CALL   prtdec   
41A9   E1                     POP   hl   
41AA   CD 79 09               CALL   printStr   
41AD   20 28 23 00            .CSTR   " (#"   
41B1   CD 15 09               CALL   prthex   
41B4   CD 79 09               CALL   printStr   
41B7   29 0D 0A 00            .CSTR   ")\r\n"   
41BB   76                     HALT      
41BC   00                     .CSTR      
41BD                EXPECTM_0_2369S43:      
41BD   E1                     POP   HL   
41BE                          ;*Macro unroll:  test ":x [100 200] { @2 $1 + } closure 1 x", 201
41BE   31 80 18               LD   SP,STACK   
41C1   CD 98 09               CALL   init   
41C4   CD CA 0B               CALL   exec   
41C7   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   ":x [100 200] { @2 $1 + } closure 1 x"   
41EC                          ;*Macro unroll:  expect ":x [100 200] { @2 $1 + } closure 1 x",201
41EC   E1                     POP   HL   
41ED   E5                     PUSH   HL   
41EE   11 C9 00               LD   DE,201   
41F1   B7                     OR   A   
41F2   ED 52                  SBC   HL,DE   
41F4   7D                     LD   A,L   
41F5   B4                     OR   H   
41F6   28 6F                  JR   Z,expectM_0_2370S43   
41F8   CD 79 09               CALL   printStr   
41FB   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   "Code: ",":x [100 200] { @2 $1 + } closure 1 x"   
4226   CD 79 09               CALL   printStr   
4229   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4238   21 C9 00               LD   HL,201   
423B   CD CD 08               CALL   prtdec   
423E   CD 79 09               CALL   printStr   
4241   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424E   E1                     POP   hl   
424F   E5                     PUSH   hl   
4250   CD CD 08               CALL   prtdec   
4253   E1                     POP   hl   
4254   CD 79 09               CALL   printStr   
4257   20 28 23 00            .CSTR   " (#"   
425B   CD 15 09               CALL   prthex   
425E   CD 79 09               CALL   printStr   
4261   29 0D 0A 00            .CSTR   ")\r\n"   
4265   76                     HALT      
4266   00                     .CSTR      
4267                EXPECTM_0_2370S43:      
4267   E1                     POP   HL   
4268                             ; test "0 [{1}] switch", 1
4268                             ; test "1 [{1} {2} {3}] switch", 2
4268                             ; test "9 [{1} {5}] switch", 5
4268                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4268                             ; test "bytes 'ABC' get", $41
4268                             ; test "bytes [1 2 3] get", 1
4268                             ; test ":xyz 123 const ; xyz", 123
4268                             ; test ":x 1 const ; x", 1
4268                             ; test ":x 'A' const x get", $41
4268                             ; test ":x [1] const x get", 1
4268                             ; test ":x [1 2 3] const x 2? get", 3
4268                             ; test "2 (1 2 +) *", 6
4268                             ; test ":xyz 123 const ; xyz", 123
4268                             ; test ":xyz 123 let ; xyz get", 123
4268                             ; test "1 2 {$1 $2 +} call", 3
4268                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4268                             ; test ":xyz {1} def :xyz addr call", 1
4268                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4268                             ; test ":xyz {10} def :xyz addr exec", 10
4268                             ; test ":xyz {10} def :xyz addr call", 10
4268                             ; test "'hello' hash", $7f54
4268                             ; test ":hello", $7f54
4268                             ; test "bytes [1 2 3]", $1e02
4268                             ; test "bytes [1 2 3] 1? get", 2
4268                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4268                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
4268                             ; test "words [1 2 3]", $1e02
4268                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4268                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4268                             ; test "words [10 20 30] 1 ? get", 10
4268                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4268                             ; test "{{{1} exec} exec} exec", 1
4268                             ; test "5 {{{$1} exec} exec} call", 5
4268                             ; test "5 {$1} call", 5
4268                             ; test "5 {{$1} exec} call", 5
4268                             ; test "2 1 {{$1} call} call", 2
4268                             ; test "2 1 {$2} call", 1
4268                             ; test "2 1 {$1} call", 2
4268                             ; test "2 1 {$2} call", 1
4268                             ; test "2 4 {$2} call", 4
4268                             ; test "{{1} call} call", 1
4268                             ; test "5 {-1 {$1} if} call", 5
4268                             ; test "0 {} loop", 0
4268                             ; test "1 {1-} loop", $1a00
4268                             ; test "65 .c", 0
4268                             ; test "1 2 <", TRUE
4268                             ; test "2 2 <=", TRUE
4268                             ; test "2 1 <", FALSE
4268                             ; test "1 2 >", FALSE
4268                             ; test "2 2 >=", TRUE
4268                             ; test "2 1 >", TRUE
4268                             ; test "10 sqrt", 3
4268                             ; test "10 sqrt frac", 1
4268                             ; test "7 3 /", 2
4268                             ; test "7 3 / frac", 1
4268                             ; test "1 2 +", 3
4268                             ; test ":h {1} def :h addr call", 1
4268                             ; test "1 2 +", 3
4268                             ; test "4 1 2 +", 3
4268                             ; test "1", 1
4268                             ; test "2", 2
4268                             ; test "``", 0
4268                             ; test "`a`", $61
4268                             ; test "`\\``", $60
4268                             ; test "`b` 'cba' in", -1
4268                             ; test "`x` 'cba' in", 0
4268                             ; test "5 0 {1} if", 5
4268                             ; test "0 {1} {2} ifte", 2
4268                             ; test "5 -1 {1} if", 1
4268                             ; test "-1 {1} {2} ifte", 1
4268                             ; test "9 sw {1} {5} ca", 5
4268                             ; test "0 sw {1} ca", 1
4268                             ; test "1 sw {1} {2} {3} ca", 2
4268                             ; test "5 -1 {2} if", 2
4268                             ; test "5 0 {2} if", 5
4268                             ; test "5 0 {0 {2} if} if", 5
4268                             ; test "5 0 {-1 {2} if} if", 5
4268                             ; test "5 -1 {2} if", 2
4268                             ; test "5 -1 {-1 {2} if} if", 2
4268                             ; test "{1} ex", 1
4268                             ; test "'A' @", 65
4268                             ; test "1", 1
4268                             ; test "0", 0
4268                             ; test "10", 10
4268                             ; test "123", 123
4268                             ; test "$10", $10
4268                             ; test "$FF", $FF
4268                             ; test "2 3 =", 0
4268                             ; test "3 3 =", 1
4268                             ; test "2 3 <", 1
4268                             ; test "3 3 <", 0
4268                             ; test "3 3 >", 0
4268                             ; test "4 3 >", 1
4268                             ; test "1 2 +", 3
4268                             ; test "123 456 +", 123+456
4268                             ; test "64 128 +", 64+128
4268                             ; test "5 3 -", 2
4268                             ; test "3 5 &", 1
4268                             ; test "3 5 |", 7
4268                             ; test "2 3 *", 6
4268                             ; test "1 2 3 + *", 5
4268                             ; ; test "1 2 3 ' +", 3
4268                             ; ; test "1_ 2 +",1
4268                             ; ; test "1_ 1 +",0
4268                             ; ; call enter
4268                             ; ;     .cstr "1 3",$22,"+"
4268                             ; ; expect "1 3 DUP +", 6
4268                             ; ; test "5 2/'", 2
4268                             ; ; test "3 5$ -", 2
4268                             ; ; test "5 2/$ '", 1
4268                             ; ; test "2 3%++", 7
4268                             ; ; test "1 2 3~''", 2
4268                             ; ; test "1 2 3~+*", 8
4268                             ; ; test "2a!a@",2
4268                             ; ; test "3x! 1 x@+x! x@", 4
4268                             ; ; test "3x! 1_ x@+x! x@", 2
4268                             ; ; test "1{", 2
4268                             ; ; test "1}", 0
4268                             ; ; test "2}", 1
4268                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4268                             ; ; test "{2} \\^", 2
4268                             ; ; test ":X1; X", 1
4268                             ; ; test ":A100;A", 100
4268                             ; ; test ":Aa!; 3A a@", 3
4268                             ; ; test ":Aa!;:Ba@;4AB", 4
4268                             ; ; test "[]$ '", 0
4268                             ; ; test "[3]$ '", 1
4268                             ; ; test "[3]'@", 3
4268                             ; ; test "[1 2 3]'@", 1
4268                             ; ; test "[1 2 3]'2+@", 2
4268                             ; ; test "\\h@[1]''\\h@$-", 2
4268                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4268                             ; ; test "\\[]$ '", 0
4268                             ; ; test "\\[3]'\\@", 3
4268                             ; ; test "\\[3]$ '", 1
4268                             ; ; test "\\[1 2 3]'\\@", 1
4268                             ; ; test "\\[1 2 3]'1+\\@", 2
4268                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4268                             ; ; test "\\h@\\[1]''\\h@$-", 1
4268                             ; ; test "\\`A`\\@",65
4268                             ; ; test "0 0{1+}", 0
4268                             ; ; test "0 1{1+}", 1
4268                             ; ; test "0 2{1+}", 2
4268                             ; ; test "0 1{0{1+}}", 0
4268                             ; ; test "0 1{1{1+}}", 1
4268                             ; ; test "0 2{1{1+}}", 2
4268                             ; ; test "0 2{2{1+}}", 4
4268                             ; ; test "0 1{\\i@+}", 0
4268                             ; ; test "0 2{\\i@+}", 1
4268                             ; ; test "0 3{\\i@+}", 3
4268                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
4268                             ; ; test "0t! 10{1 t@+t!} t@",10
4268                             ; ; test "0{100}{200}",200
4268                             ; ; test "1{100}{200}",100
4268                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
4268                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
4268                             ; ; test ":X10;\\0X", 10
4268                             ; ; test "2 \\1x! \\1x@", 2
4268   CD 79 09               CALL   printStr   
426B   44 6F 6E 65 21 00      .CSTR   "Done!"   
4271   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0825 DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 776 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 237 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1808 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
CLEAR_:             030F DEFINED AT LINE 211 IN Siena.asm
PAREN_:             0312 DEFINED AT LINE 214 IN Siena.asm
PARENEND_:          0315 DEFINED AT LINE 217 IN Siena.asm
DOT_:               0318 DEFINED AT LINE 220 IN Siena.asm
DOT1:               0324 DEFINED AT LINE 228 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
DOT2:               032D DEFINED AT LINE 233 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
DOT3:               0337 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
DOT4:               033B DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
INDEX_:             0342 DEFINED AT LINE 248 IN Siena.asm
INDEX1:             034B DEFINED AT LINE 255 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
BLOCK_:             034F DEFINED AT LINE 259 IN Siena.asm
BLOCKEND_:          0352 DEFINED AT LINE 261 IN Siena.asm
CHAR_:              0355 DEFINED AT LINE 263 IN Siena.asm
ARRAY_:             0358 DEFINED AT LINE 265 IN Siena.asm
ARRAYEND_:          035B DEFINED AT LINE 267 IN Siena.asm
IDENT_:             035E DEFINED AT LINE 269 IN Siena.asm
SYMBOL_:            0361 DEFINED AT LINE 271 IN Siena.asm
AND_:               0364 DEFINED AT LINE 273 IN Siena.asm
AND1:               036B DEFINED AT LINE 281 IN Siena.asm
                    > USED AT LINE 294 IN Siena.asm
                    > USED AT LINE 305 IN Siena.asm
OR_:                036F DEFINED AT LINE 286 IN Siena.asm
XOR_:               0378 DEFINED AT LINE 296 IN Siena.asm
XOR1:               0379 DEFINED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
INV_:               0381 DEFINED AT LINE 307 IN Siena.asm
ADD_:               0386 DEFINED AT LINE 311 IN Siena.asm
HDOT_:              038C DEFINED AT LINE 318 IN Siena.asm
MUL_:               0393 DEFINED AT LINE 323 IN Siena.asm
SUB_:               0396 DEFINED AT LINE 326 IN Siena.asm
SUB2:               0398 DEFINED AT LINE 329 IN Siena.asm
                    > USED AT LINE 1268 IN Siena.asm
NOT_:               039E DEFINED AT LINE 335 IN Siena.asm
EQ_:                03A3 DEFINED AT LINE 339 IN Siena.asm
EQ1:                03A4 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
GT_:                03A8 DEFINED AT LINE 345 IN Siena.asm
LT_:                03AC DEFINED AT LINE 350 IN Siena.asm
LT1:                03AE DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
DIV_:               03B9 DEFINED AT LINE 361 IN Siena.asm
COMMENT_:           03C8 DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 376 IN Siena.asm
NOP_:               03D1 DEFINED AT LINE 380 IN Siena.asm
SHL:                03D3 DEFINED AT LINE 390 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
SHL1:               03DB DEFINED AT LINE 397 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
SHL2:               03DC DEFINED AT LINE 399 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
SHR:                03E3 DEFINED AT LINE 407 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
SHR1:               03EB DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
SHR2:               03EF DEFINED AT LINE 417 IN Siena.asm
                    > USED AT LINE 413 IN Siena.asm
MUL:                03F6 DEFINED AT LINE 423 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
MUL2:               0400 DEFINED AT LINE 432 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
NUM:                0412 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               041B DEFINED AT LINE 452 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
NUM1:               041C DEFINED AT LINE 454 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
NUM2:               0434 DEFINED AT LINE 472 IN Siena.asm
                    > USED AT LINE 457 IN Siena.asm
                    > USED AT LINE 459 IN Siena.asm
                    > USED AT LINE 494 IN Siena.asm
                    > USED AT LINE 496 IN Siena.asm
NUM3:               043F DEFINED AT LINE 480 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
HEXNUM:             0442 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            0445 DEFINED AT LINE 486 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
HEXNUM2:            044D DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
STRING:             045F DEFINED AT LINE 505 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0467 DEFINED AT LINE 510 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
STRING2:            046A DEFINED AT LINE 514 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
CHAR:               0478 DEFINED AT LINE 524 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
CHAR1:              047B DEFINED AT LINE 526 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
CHAR2:              0487 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
CHAR3:              048A DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 530 IN Siena.asm
PAREN:              048D DEFINED AT LINE 542 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
PAREN2:             0493 DEFINED AT LINE 545 IN Siena.asm
                    > USED AT LINE 543 IN Siena.asm
PARENEND:           049A DEFINED AT LINE 549 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
BLOCK:              04A9 DEFINED AT LINE 560 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
BLOCK1:             04AD DEFINED AT LINE 564 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 590 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 598 IN Siena.asm
BLOCK2:             04D3 DEFINED AT LINE 588 IN Siena.asm
BLOCK3:             04D6 DEFINED AT LINE 591 IN Siena.asm
                    > USED AT LINE 578 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
                    > USED AT LINE 585 IN Siena.asm
BLOCK4:             04DC DEFINED AT LINE 596 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 573 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
BLOCKEND:           04E2 DEFINED AT LINE 603 IN Siena.asm
                    > USED AT LINE 262 IN Siena.asm
ARG:                04F6 DEFINED AT LINE 620 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0514 DEFINED AT LINE 643 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
DOLET:              052E DEFINED AT LINE 662 IN Siena.asm
GET:                052E DEFINED AT LINE 663 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
GET1:               052F DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
GET2:               053D DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 671 IN Siena.asm
SET:                0540 DEFINED AT LINE 679 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
SET1:               0552 DEFINED AT LINE 693 IN Siena.asm
                    > USED AT LINE 688 IN Siena.asm
IF:                 0555 DEFINED AT LINE 699 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
IFTE:               055A DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
IFTE1:              055B DEFINED AT LINE 707 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
IFTE2:              0564 DEFINED AT LINE 716 IN Siena.asm
                    > USED AT LINE 714 IN Siena.asm
IFTE3:              057B DEFINED AT LINE 729 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
SWITCH:             057D DEFINED AT LINE 734 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
LOOP:               0587 DEFINED AT LINE 747 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
LOOP1:              059C DEFINED AT LINE 759 IN Siena.asm
                    > USED AT LINE 780 IN Siena.asm
LOOP2:              05B7 DEFINED AT LINE 775 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
LOOP3:              05C1 DEFINED AT LINE 782 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
CASE:               05D7 DEFINED AT LINE 796 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
SELECT:             05EB DEFINED AT LINE 808 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
CASE0:              0607 DEFINED AT LINE 826 IN Siena.asm
                    > USED AT LINE 823 IN Siena.asm
CASE1:              060C DEFINED AT LINE 832 IN Siena.asm
                    > USED AT LINE 825 IN Siena.asm
CASE2:              0619 DEFINED AT LINE 840 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
WORDS:              061B DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
BYTES:              0620 DEFINED AT LINE 846 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
BYTES1:             0623 DEFINED AT LINE 848 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
ARRAY:              0628 DEFINED AT LINE 852 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
ARRAYEND:           063A DEFINED AT LINE 862 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
ARRAYEND1:          065A DEFINED AT LINE 885 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
ARRAYEND2:          066A DEFINED AT LINE 899 IN Siena.asm
                    > USED AT LINE 883 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
ARRAYEND3:          067D DEFINED AT LINE 915 IN Siena.asm
                    > USED AT LINE 897 IN Siena.asm
HASH:               06AA DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
DEF:                06B5 DEFINED AT LINE 966 IN Siena.asm
                    > USED AT LINE 1641 IN Siena.asm
DEF1:               06C7 DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
DEF2:               06EB DEFINED AT LINE 1002 IN Siena.asm
DEF3:               06EE DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
DEF4:               06F4 DEFINED AT LINE 1010 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
DEF5:               0709 DEFINED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
CLOSURE:            070C DEFINED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
LET:                0725 DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
LET2:               0749 DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
ADDR:               074C DEFINED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
ADDR1:              0758 DEFINED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
SYMBOL:             0760 DEFINED AT LINE 1100 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
SYMBOL0:            0768 DEFINED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
SYMBOL1:            076A DEFINED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1104 IN Siena.asm
SYMBOL2:            0779 DEFINED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
IDENT:              0787 DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
IDENT0:             078E DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1147 IN Siena.asm
IDENT1:             0790 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
IDENT2:             079F DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
IDENT3:             07B3 DEFINED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
FRAC:               07B4 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
SQRT1:              07BA DEFINED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
ABS1:               07C7 DEFINED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
MOD:                07D4 DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1697 IN Siena.asm
EQUALS:             07E0 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 343 IN Siena.asm
LESSTHANEQ:         07E8 DEFINED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
LESSTHAN:           07ED DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 359 IN Siena.asm
LESSTHAN1:          07F2 DEFINED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
TRUE1:              07F5 DEFINED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
FALSE1:             07FB DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
INPUT:              0801 DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
OUTPUT:             080C DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
KEY:                0815 DEFINED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
NEG:                081E DEFINED AT LINE 1265 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
FILTER:             0825 DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
MAP:                0825 DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
HASHSTR:            0827 DEFINED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
                    > USED AT LINE 1125 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
HASHSTR1:           082A DEFINED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
HASHSTR2:           082F DEFINED AT LINE 1289 IN Siena.asm
DEFINEENTRY:        0840 DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
DEFINEENTRY0:       0845 DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1329 IN Siena.asm
DEFINEENTRY1:       0854 DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
DEFINEENTRY2:       085A DEFINED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
DEFINEENTRY3:       085C DEFINED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
LOOKUPENTRY:        0866 DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
LOOKUPENTRY0:       086B DEFINED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
LOOKUPENTRY1:       087A DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
LOOKUPENTRY2:       0880 DEFINED AT LINE 1369 IN Siena.asm
LOOKUPENTRY3:       0882 DEFINED AT LINE 1372 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
DIVIDE:             088A DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
DIVIDE1:            088F DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
DIVIDE2:            089C DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
DIVIDE3:            089D DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1394 IN Siena.asm
SQUAREROOT:         08A3 DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
SQUAREROOT1:        08A8 DEFINED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
SQUAREROOT4:        08C3 DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
SQUAREROOT5:        08CA DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
PRTDEC:             08CD DEFINED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            08DC DEFINED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
PRTDEC1:            08FE DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1461 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
PRTDEC2:            0900 DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
PRTDEC3:            0910 DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
PRTDEC4:            0911 DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
PRTHEX:             0915 DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0920 DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
PRTHEX3:            0929 DEFINED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
PRTSTR0:            0934 DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
PRTSTR:             0938 DEFINED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
NESTING:            093D DEFINED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
                    > USED AT LINE 1809 IN Siena.asm
NESTING1A:          0948 DEFINED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
NESTING1:           094B DEFINED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
NESTING2:           095A DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
NESTING3:           095C DEFINED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
NESTING4:           0967 DEFINED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
PROMPT:             0969 DEFINED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1752 IN Siena.asm
CRLF:               0972 DEFINED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1821 IN Siena.asm
PRINTSTR:           0979 DEFINED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 213
DEFINE:             0980 DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
INIT:               0998 DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1747 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              09B2 DEFINED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
START:              0B19 DEFINED AT LINE 1745 IN Siena.asm
INTERPRET:          0B2F DEFINED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1859 IN Siena.asm
INTERPRET2:         0B39 DEFINED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
INTERPRET3:         0B41 DEFINED AT LINE 1764 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
INTERPRET4:         0B47 DEFINED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
WAITCHAR:           0B4C DEFINED AT LINE 1776 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
MACRO:              0B5B DEFINED AT LINE 1786 IN Siena.asm
WAITCHAR1:          0B5D DEFINED AT LINE 1803 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
WAITCHAR3:          0B6B DEFINED AT LINE 1812 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
WAITCHAR4:          0B81 DEFINED AT LINE 1828 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
NEXT:               0B89 DEFINED AT LINE 1834 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
NEXT1:              0B98 DEFINED AT LINE 1847 IN Siena.asm
                    > USED AT LINE 1841 IN Siena.asm
ESCAPE:             0BA3 DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
CLEAR:              0BA7 DEFINED AT LINE 1874 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
EXIT:               0BB5 DEFINED AT LINE 1883 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
EXEC:               0BCA DEFINED AT LINE 1905 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0BE2 DEFINED AT LINE 1919 IN Siena.asm
                    > USED AT LINE 1909 IN Siena.asm
CALL:               0BE4 DEFINED AT LINE 1924 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
CALL1:              0BE5 DEFINED AT LINE 1926 IN Siena.asm
                    > USED AT LINE 1949 IN Siena.asm
CALL2:              0BF7 DEFINED AT LINE 1937 IN Siena.asm
                    > USED AT LINE 1929 IN Siena.asm
DOCLOSURE:          0BF9 DEFINED AT LINE 1942 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1603 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 686 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
                    > USED AT LINE 1880 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1755 IN Siena.asm
                    > USED AT LINE 1829 IN Siena.asm
VSETTER:            189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 682 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
                    > USED AT LINE 945 IN Siena.asm
                    > USED AT LINE 951 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1069 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1813 IN Siena.asm
                    > USED AT LINE 1830 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1609 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2367S43:  408D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2368S43:  4121 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2369S43:  41BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2370S43:  4267 DEFINED AT LINE 34
                    > USED AT LINE 10
