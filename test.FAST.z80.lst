0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD CE 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C6                     DB   lsb(nop_)   ; SP
0221   C6                     DB   lsb(nop_)   ; !
0222   C6                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C6                     DB   lsb(nop_)   ; %
0226   5E                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(paren_)   ; (
0229   0F                     DB   lsb(parenEnd_)   ; )
022A   8D                     DB   lsb(mul_)   ; *
022B   80                     DB   lsb(add_)   ; +
022C   C6                     DB   lsb(nop_)   ; ,
022D   90                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   AE                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5B                     DB   lsb(symbol_)   ; :
023B   BD                     DB   lsb(comment_)   ; ;
023C   A1                     DB   lsb(lt_)   ; <
023D   98                     DB   lsb(eq_)   ; =
023E   9D                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   C6                     DB   lsb(nop_)   ; @
0241   58                     DB   lsb(ident_)   ; A
0242   58                     DB   lsb(ident_)   ; B
0243   58                     DB   lsb(ident_)   ; C
0244   58                     DB   lsb(ident_)   ; D
0245   58                     DB   lsb(ident_)   ; E
0246   58                     DB   lsb(ident_)   ; F
0247   58                     DB   lsb(ident_)   ; G
0248   58                     DB   lsb(ident_)   ; h
0249   58                     DB   lsb(ident_)   ; I
024A   58                     DB   lsb(ident_)   ; J
024B   58                     DB   lsb(ident_)   ; K
024C   58                     DB   lsb(ident_)   ; L
024D   58                     DB   lsb(ident_)   ; M
024E   58                     DB   lsb(ident_)   ; N
024F   58                     DB   lsb(ident_)   ; O
0250   58                     DB   lsb(ident_)   ; p
0251   58                     DB   lsb(ident_)   ; Q
0252   58                     DB   lsb(ident_)   ; R
0253   58                     DB   lsb(ident_)   ; S
0254   58                     DB   lsb(ident_)   ; T
0255   58                     DB   lsb(ident_)   ; U
0256   58                     DB   lsb(ident_)   ; V
0257   58                     DB   lsb(ident_)   ; W
0258   58                     DB   lsb(ident_)   ; X
0259   58                     DB   lsb(ident_)   ; Y
025A   58                     DB   lsb(ident_)   ; Z
025B   52                     DB   lsb(array_)   ; [
025C   C6                     DB   lsb(nop_)   ; \
025D   55                     DB   lsb(arrayEnd_)   ; ]
025E   72                     DB   lsb(xor_)   ; ^
025F   58                     DB   lsb(ident_)   ; _
0260   4F                     DB   lsb(char_)   ; `    	
0261   58                     DB   lsb(ident_)   ; a
0262   58                     DB   lsb(ident_)   ; b
0263   58                     DB   lsb(ident_)   ; c
0264   58                     DB   lsb(ident_)   ; d
0265   58                     DB   lsb(ident_)   ; e
0266   58                     DB   lsb(ident_)   ; f
0267   58                     DB   lsb(ident_)   ; g
0268   58                     DB   lsb(ident_)   ; h
0269   58                     DB   lsb(ident_)   ; i
026A   58                     DB   lsb(ident_)   ; j
026B   58                     DB   lsb(ident_)   ; k
026C   58                     DB   lsb(ident_)   ; l
026D   58                     DB   lsb(ident_)   ; m
026E   58                     DB   lsb(ident_)   ; n
026F   58                     DB   lsb(ident_)   ; o
0270   58                     DB   lsb(ident_)   ; p
0271   58                     DB   lsb(ident_)   ; q
0272   58                     DB   lsb(ident_)   ; r
0273   58                     DB   lsb(ident_)   ; s
0274   58                     DB   lsb(ident_)   ; t
0275   58                     DB   lsb(ident_)   ; u
0276   58                     DB   lsb(ident_)   ; v
0277   58                     DB   lsb(ident_)   ; w
0278   58                     DB   lsb(ident_)   ; x
0279   58                     DB   lsb(ident_)   ; y
027A   58                     DB   lsb(ident_)   ; z
027B   49                     DB   lsb(block_)   ; {
027C   69                     DB   lsb(or_)   ; |
027D   49                     DB   lsb(block_)   ; }
027E   7B                     DB   lsb(inv_)   ; ~
027F   C6                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 07 04               JP   num   
0303                HEXNUM_:      
0303   C3 37 04               JP   hexnum   
0306                ARG_:        
0306   C3 E6 04               JP   arg   
0309                STRING_:      
0309   C3 54 04               JP   string   
030C                PAREN_:      
030C   C3 82 04               JP   paren   
030F                PARENEND_:      
030F   C3 8F 04               JP   parenEnd   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 4B 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 6E 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 03 08               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   E1                     POP   hl   ; hl = index
033D   D1                     POP   de   ; de = addr
033E   3A 80 1B               LD   a,(vDataWidth)   
0341   3D                     DEC   a   
0342   28 01                  JR   z,index1   
0344   29                     ADD   hl,hl   ; if data width = 2 then double
0345                INDEX1:      
0345   19                     ADD   hl,de   ; add addr
0346   E5                     PUSH   hl   
0347   DD E9                  JP   (ix)   
0349                BLOCK_:      
0349   C3 9E 04               JP   block   
034C                BLOCKEND_:      
034C   C3 D2 04               JP   blockend   
034F                CHAR_:       
034F   C3 6D 04               JP   char   
0352                ARRAY_:      
0352   C3 EB 05               JP   array   
0355                ARRAYEND_:      
0355   C3 FD 05               JP   arrayEnd   
0358                IDENT_:      
0358   C3 BD 06               JP   ident   
035B                SYMBOL_:      
035B   C3 96 06               JP   symbol   
035E                AND_:        
035E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
035F   E1                     POP   hl   
0360   7B                     LD   a,e   
0361   A5                     AND   l   
0362   6F                     LD   l,a   
0363   7A                     LD   a,d   
0364   A4                     AND   h   
0365                AND1:        
0365   67                     LD   h,a   
0366   E5                     PUSH   hl   
0367   DD E9                  JP   (ix)   
0369                OR_:         
0369   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036A   E1                     POP   hl   
036B   7B                     LD   a,e   
036C   B5                     OR   l   
036D   6F                     LD   l,a   
036E   7A                     LD   a,d   
036F   B4                     OR   h   
0370   18 F3                  JR   and1   
0372                XOR_:        
0372   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0373                XOR1:        
0373   E1                     POP   hl   
0374   7B                     LD   a,e   
0375   AD                     XOR   l   
0376   6F                     LD   l,a   
0377   7A                     LD   a,d   
0378   AC                     XOR   h   
0379   18 EA                  JR   and1   
037B                INV_:        ; Bitwise INVert the top member of the stack
037B   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
037E   18 F3                  JR   xor1   
0380                ADD_:        ; add the top 2 members of the stack
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   19                     ADD   hl,de   
0383   E5                     PUSH   hl   
0384   DD E9                  JP   (ix)   
0386                HDOT_:       ; print hexadecimal
0386   E1                     POP   hl   
0387   CD 4B 08               CALL   prthex   
038A   C3 31 03               JP   dot3   
038D                MUL_:        
038D   C3 EB 03               JP   mul   
0390                SUB_:        ; Subtract the value 2nd on stack from top of stack
0390   D1                     POP   de   
0391   E1                     POP   hl   ; Entry point for INVert
0392                SUB2:        
0392   B7                     OR   a   ; Entry point for NEGate
0393   ED 52                  SBC   hl,de   
0395   E5                     PUSH   hl   
0396   DD E9                  JP   (ix)   
0398                EQ_:         
0398   E1                     POP   hl   
0399   D1                     POP   de   
039A   C3 16 07               JP   equals   
039D                GT_:         
039D   D1                     POP   de   
039E   E1                     POP   hl   
039F   18 02                  JR   lt1   
03A1                LT_:         
03A1   E1                     POP   hl   
03A2   D1                     POP   de   
03A3                LT1:         
03A3   03                     INC   bc   
03A4   0A                     LD   a,(bc)   
03A5   FE 3D                  CP   "="   
03A7   CA 1E 07               JP   z,lessthaneq   
03AA   0B                     DEC   bc   
03AB   C3 23 07               JP   lessthan   
03AE                DIV_:        
03AE   D1                     POP   de   ; get first value
03AF   E1                     POP   hl   ; get 2nd value
03B0   C5                     PUSH   bc   ; preserve the IP
03B1   44 4D                  LD   bc,hl   
03B3   CD C0 07               CALL   divide   
03B6   22 7E 1B               LD   (vFrac),hl   
03B9   C1                     POP   bc   
03BA   D5                     PUSH   de   ; push result
03BB   DD E9                  JP   (ix)   
03BD                COMMENT_:      
03BD   03                     INC   bc   ; point to next char
03BE   0A                     LD   a,(bc)   
03BF   FE 20                  CP   " "   ; terminate on any char less than SP
03C1   30 FA                  JR   nc,comment_   
03C3   0B                     DEC   bc   
03C4   DD E9                  JP   (ix)   
03C6                NOP_:        
03C6   DD E9                  JP   (ix)   
03C8                             ;*******************************************************************
03C8                             ; word operators
03C8                             ;*******************************************************************
03C8                             ; shl
03C8                             ; value count -- value2          shift left count places
03C8                SHL:         
03C8   50 59                  LD   de,bc   ; save IP
03CA   C1                     POP   bc   ; bc = count
03CB   41                     LD   b,c   ; b = loop counter
03CC   E1                     POP   hl   
03CD   04                     INC   b   ; test for counter=0 case
03CE   18 01                  JR   shl2   
03D0                SHL1:        
03D0   29                     ADD   hl,hl   ; left shift hl
03D1                SHL2:        
03D1   10 FD                  DJNZ   shl1   
03D3   E5                     PUSH   hl   
03D4   42 4B                  LD   bc,de   ; restore IP
03D6   DD E9                  JP   (ix)   
03D8                             ; shr
03D8                             ; value count -- value2          shift left count places
03D8                SHR:         
03D8   50 59                  LD   de,bc   ; save IP
03DA   C1                     POP   bc   ; bc = count
03DB   41                     LD   b,c   ; b = loop counter
03DC   E1                     POP   hl   
03DD   04                     INC   b   ; test for counter=0 case
03DE   18 04                  JR   shr2   
03E0                SHR1:        
03E0   CB 3C                  SRL   h   ; right shift hl
03E2   CB 1D                  RR   l   
03E4                SHR2:        
03E4   10 FA                  DJNZ   shr1   
03E6   E5                     PUSH   hl   
03E7   42 4B                  LD   bc,de   ; restore IP
03E9   DD E9                  JP   (ix)   
03EB                MUL:         ;=19
03EB   D1                     POP   de   ; get first value
03EC   E1                     POP   hl   
03ED   C5                     PUSH   bc   ; Preserve the IP
03EE   44                     LD   b,h   ; bc = 2nd value
03EF   4D                     LD   c,l   
03F0   21 00 00               LD   hl,0   
03F3   3E 10                  LD   a,16   
03F5                MUL2:        
03F5   29                     ADD   hl,hl   
03F6   CB 13                  RL   e   
03F8   CB 12                  RL   d   
03FA   30 04                  JR   nc,$+6   
03FC   09                     ADD   hl,bc   
03FD   30 01                  JR   nc,$+3   
03FF   13                     INC   de   
0400   3D                     DEC   a   
0401   20 F2                  JR   nz,mul2   
0403   C1                     POP   bc   ; Restore the IP
0404   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0405   DD E9                  JP   (ix)   
0407                NUM:         
0407   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040A   0A                     LD   a,(bc)   ; Get numeral or -
040B   FE 2D                  CP   "-"   
040D   20 01                  JR   nz,num0   
040F   03                     INC   bc   ; move to next char, no flags affected
0410                NUM0:        
0410   08                     EX   af,af'   ; save zero flag = 0 for later
0411                NUM1:        
0411   0A                     LD   a,(bc)   ; read digit
0412   D6 30                  SUB   "0"   ; less than 0?
0414   38 13                  JR   c,num2   ; not a digit, exit loop
0416   FE 0A                  CP   10   ; greater that 9?
0418   30 0F                  JR   nc,num2   ; not a digit, exit loop
041A   03                     INC   bc   ; inc IP
041B   54 5D                  LD   de,hl   ; multiply hl * 10
041D   29                     ADD   hl,hl   
041E   29                     ADD   hl,hl   
041F   19                     ADD   hl,de   
0420   29                     ADD   hl,hl   
0421   85                     ADD   a,l   ; add digit in a to hl
0422   6F                     LD   l,a   
0423   3E 00                  LD   a,0   
0425   8C                     ADC   a,h   
0426   67                     LD   h,a   
0427   18 E8                  JR   num1   
0429                NUM2:        
0429   0B                     DEC   bc   
042A   08                     EX   af,af'   ; restore zero flag
042B   20 07                  JR   nz,num3   
042D   EB                     EX   de,hl   ; negate the value of hl
042E   21 00 00               LD   hl,0   
0431   B7                     OR   a   ; jump to sub2
0432   ED 52                  SBC   hl,de   
0434                NUM3:        
0434   E5                     PUSH   hl   ; Put the number on the stack
0435   DD E9                  JP   (ix)   ; and process the next character
0437                HEXNUM:      ; 
0437   21 00 00               LD   hl,0   ; Clear hl to accept the number
043A                HEXNUM1:      
043A   03                     INC   bc   
043B   0A                     LD   a,(bc)   ; Get the character which is a numeral
043C   CB 77                  BIT   6,a   ; is it uppercase alpha?
043E   28 02                  JR   z,hexnum2   ; no a decimal
0440   D6 07                  SUB   7   ; sub 7  to make $a - $F
0442                HEXNUM2:      
0442   D6 30                  SUB   $30   ; Form decimal digit
0444   DA 29 04               JP   c,num2   
0447   FE 10                  CP   $0F+1   
0449   D2 29 04               JP   nc,num2   
044C   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
044D   29                     ADD   hl,hl   ; 4X
044E   29                     ADD   hl,hl   ; 8X
044F   29                     ADD   hl,hl   ; 16X
0450   85                     ADD   a,l   ; add into bottom of hl
0451   6F                     LD   l,a   ; 
0452   18 E6                  JR   hexnum1   
0454                             ; 
0454                STRING:      
0454   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0458   D5                     PUSH   de   ; save start of string
0459   03                     INC   bc   ; point to next char
045A   18 03                  JR   string2   
045C                STRING1:      
045C   12                     LD   (de),a   
045D   13                     INC   de   ; increase count
045E   03                     INC   bc   ; point to next char
045F                STRING2:      
045F   0A                     LD   a,(bc)   
0460   FE 27                  CP   "'"   ; ' is the string terminator
0462   20 F8                  JR   nz,string1   
0464   AF                     XOR   a   ; write NUL to terminate string
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
046B   DD E9                  JP   (ix)   
046D                CHAR:        
046D   21 00 00               LD   hl,0   ; if `` is empty
0470                CHAR1:       
0470   03                     INC   bc   ; point to next char
0471   0A                     LD   a,(bc)   
0472   FE 60                  CP   "`"   ; ` is the string terminator
0474   28 09                  JR   z,char3   
0476   FE 5C                  CP   $5c   ; \ is the escape
0478   20 02                  JR   nz,char2   
047A   03                     INC   bc   
047B   0A                     LD   a,(bc)   
047C                CHAR2:       
047C   6F                     LD   l,a   
047D   18 F1                  JR   char1   
047F                CHAR3:       
047F   E5                     PUSH   hl   
0480   DD E9                  JP   (ix)   
0482                PAREN:       
0482   DD 21 88 04            LD   ix,paren2   
0486   18 16                  JR   block   
0488                PAREN2:      
0488   DD 21 A4 0A            LD   ix,next   
048C   C3 EC 0A               JP   exec   
048F                PARENEND:      
048F   E1                     POP   hl   ; hl = last result
0490   D1                     POP   de   
0491   C1                     POP   bc   
0492   C1                     POP   bc   
0493   E5                     PUSH   hl   
0494   FD 62                  LD   iyh,d   
0496   FD 6B                  LD   iyl,e   
0498   DD 21 A4 0A            LD   ix,next   
049C   DD E9                  JP   (ix)   
049E                BLOCK:       
049E   03                     INC   bc   
049F   C5                     PUSH   bc   ; return first opcode of block
04A0   16 01                  LD   d,1   ; nesting: count first parenthesis
04A2                BLOCK1:      ; Skip to end of definition
04A2   0A                     LD   a,(bc)   ; Get the next character
04A3   03                     INC   bc   ; Point to next character
04A4   FE 27                  CP   "'"   
04A6   28 22                  JR   z,block4   
04A8   FE 60                  CP   "`"   
04AA   28 1E                  JR   z,block4   
04AC   FE 28                  CP   "("   
04AE   28 17                  JR   z,block3   
04B0   FE 7B                  CP   "{"   
04B2   28 13                  JR   z,block3   
04B4   FE 5B                  CP   "["   
04B6   28 0F                  JR   z,block3   
04B8   FE 29                  CP   ")"   
04BA   28 08                  JR   z,block2   
04BC   FE 7D                  CP   "}"   
04BE   28 04                  JR   z,block2   
04C0   FE 5D                  CP   "]"   
04C2   20 DE                  JR   nz,block1   
04C4                BLOCK2:      
04C4   15                     DEC   d   
04C5   18 06                  JR   block5   
04C7                BLOCK3:      
04C7   14                     INC   d   
04C8   18 D8                  JR   block1   
04CA                BLOCK4:      
04CA   3E 80                  LD   a,$80   
04CC   82                     ADD   a,d   
04CD                BLOCK5:      
04CD   20 D3                  JR   nz,block1   ; get the next element
04CF   0B                     DEC   bc   ; balanced, exit
04D0   DD E9                  JP   (ix)   
04D2                BLOCKEND:      
04D2   E1                     POP   hl   ; hl = last result
04D3   FD 54                  LD   d,iyh   ; de = BP
04D5   FD 5D                  LD   e,iyl   
04D7   EB                     EX   de,hl   ; hl = BP, de = result
04D8   F9                     LD   sp,hl   ; sp = BP
04D9   E1                     POP   hl   ; hl = old BP
04DA   C1                     POP   bc   ; pop SCP (discard)
04DB   C1                     POP   bc   ; bc = IP
04DC   F9                     LD   sp,hl   ; sp = old BP
04DD   FD 21 00 00            LD   iy,0   ; iy = sp
04E1   FD 39                  ADD   iy,sp   
04E3   D5                     PUSH   de   ; push result
04E4   DD E9                  JP   (ix)   
04E6                ARG:         
04E6   03                     INC   bc   ; get next char
04E7   0A                     LD   a,(bc)   
04E8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04EA   E6 07                  AND   $07   ; mask
04EC   87                     ADD   a,a   ; double
04ED   6F                     LD   l,a   ; hl = offset into args
04EE   26 00                  LD   h,0   
04F0   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04F3   FD 56 03               LD   d,(iy+3)   
04F6   EB                     EX   de,hl   ; hl = SCP - offset
04F7   B7                     OR   a   
04F8   ED 52                  SBC   hl,de   
04FA   2B                     DEC   hl   ; de = arg
04FB   56                     LD   d,(hl)   
04FC   2B                     DEC   hl   
04FD   5E                     LD   e,(hl)   
04FE   D5                     PUSH   de   ; push arg
04FF   DD E9                  JP   (ix)   
0501                             ; addr -- value
0501                GET:         
0501   E1                     POP   hl   
0502   16 00                  LD   d,0   
0504   5E                     LD   e,(hl)   
0505   3A 80 1B               LD   a,(vDataWidth)   
0508   3D                     DEC   a   
0509   28 02                  JR   z,get1   
050B   23                     INC   hl   
050C   56                     LD   d,(hl)   
050D                GET1:        
050D   D5                     PUSH   de   
050E   DD E9                  JP   (ix)   
0510                             ; addr value -- value0
0510                SET:         
0510   E1                     POP   hl   
0511   D1                     POP   de   
0512   7E                     LD   a,(hl)   
0513   73                     LD   (hl),e   
0514   5F                     LD   e,a   
0515   3A 80 1B               LD   a,(vDataWidth)   
0518   3D                     DEC   a   
0519   28 04                  JR   z,set1   
051B   23                     INC   hl   
051C   7E                     LD   a,(hl)   
051D   72                     LD   (hl),d   
051E   57                     LD   d,a   
051F                SET1:        
051F   D5                     PUSH   de   ; return old value
0520   DD E9                  JP   (ix)   
0522                             ; 
0522                             ; in:
0522                             ;  pop hl                      ; hl = string
0522                             ;  pop de                      ; de = char
0522                             ; in1:
0522                             ;  ld a,(hl)
0522                             ;  inc hl
0522                             ;  cp 0                        ; is end of string
0522                             ;  jr z,in2
0522                             ;  cp e
0522                             ;  jr nz,in1
0522                             ;  or a                        ; a is never 0, or a resets zero flag
0522                             ; in2:
0522                             ;  ld hl,0                     ; hl = result
0522                             ;  jr z,in3
0522                             ;  dec hl                      ; if nz de = $ffff
0522                             ; in3:
0522                             ;  push hl                     ; push result
0522                             ;  jp (ix)
0522                             ; newAdd2:
0522                             ;  push bc                     ; push IP
0522                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
0522                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
0522                             ;  push de                     ; push SCP
0522                             ;  push iy                     ; push base pointer
0522                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
0522                             ;  add iy,sp                   ;
0522                             ;  ld d,(iy-1)
0522                             ;  ld e,(iy-2)
0522                             ;  ld h,(iy-3)
0522                             ;  ld l,(iy-4)
0522                             ;  add hl,de                   ; hl = hl + de
0522                             ;  ex de,hl                    ; de = result
0522                             ;  pop hl                      ; hl = old BP
0522                             ;  pop bc                      ; pop SCP (discard)
0522                             ;  pop bc                      ; bc = IP
0522                             ;  ld sp,hl                    ; sp = old BP
0522                             ;  ld iy,0
0522                             ;  add iy,sp
0522                             ;  push de                     ; push result
0522                             ;  jp (ix)
0522                IF:          
0522   11 00 00               LD   de,0   ; NUL pointer for else
0525   18 01                  JR   ifte1   
0527                IFTE:        
0527   D1                     POP   de   ; de = else
0528                IFTE1:       
0528   E1                     POP   hl   ; hl = then
0529   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
052A   23                     INC   hl   ; check for true
052B   7C                     LD   a,h   
052C   B5                     OR   l   
052D   E1                     POP   hl   ; hl = then
052E   28 01                  JR   z,ifte2   
0530   EB                     EX   de,hl   ; condition = false, hl = else
0531                IFTE2:       
0531   7C                     LD   a,h   ; check if hl is NUL
0532   B5                     OR   l   
0533   28 13                  JR   z,ifte3   
0535   C5                     PUSH   bc   ; push IP
0536   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0539   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
053C   D5                     PUSH   de   ; push SCP
053D   FD E5                  PUSH   iy   ; push BP
053F   FD 21 00 00            LD   iy,0   ; iy = sp
0543   FD 39                  ADD   iy,sp   
0545   44 4D                  LD   bc,hl   ; IP = then
0547   0B                     DEC   bc   
0548                IFTE3:       
0548   DD E9                  JP   (ix)   
054A                             ; c b --
054A                             ; loops until c = 0
054A                LOOP:        
054A   D1                     POP   de   ; de = block                    c
054B   E1                     POP   hl   ; hl = condition
054C   D5                     PUSH   de   
054D   C5                     PUSH   bc   ; push IP
054E   42 4B                  LD   bc,de   ; bc = block
0550   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0553   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0556   D5                     PUSH   de   ; push SCP
0557   FD E5                  PUSH   iy   ; push BP
0559   FD 21 00 00            LD   iy,0   ; iy = sp
055D   FD 39                  ADD   iy,sp   
055F                LOOP1:       
055F   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0560   B4                     OR   h   
0561   28 21                  JR   z,loop3   
0563   11 79 05               LD   de,loop2-1   ; IP return address
0566   D5                     PUSH   de   
0567   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
056A   FD 56 03               LD   d,(iy+3)   
056D   D5                     PUSH   de   ; 
056E   FD E5                  PUSH   iy   ; push BP
0570   FD 21 00 00            LD   iy,0   ; iy = sp
0574   FD 39                  ADD   iy,sp   
0576   E5                     PUSH   hl   ; push condition
0577   0B                     DEC   bc   
0578   DD E9                  JP   (ix)   
057A                LOOP2:       
057A   1B                     DB   ESC   ; escape from interpreter
057B   FD 4E 06               LD   c,(iy+6)   ; bc = block
057E   FD 46 07               LD   b,(iy+7)   
0581   E1                     POP   hl   ; hl = condition
0582   18 DB                  JR   loop1   
0584                LOOP3:       
0584   FD 54                  LD   d,iyh   ; de = BP
0586   FD 5D                  LD   e,iyl   
0588   EB                     EX   de,hl   ; hl = BP, de = result
0589   F9                     LD   sp,hl   ; sp = BP
058A   E1                     POP   hl   ; hl = old BP
058B   C1                     POP   bc   ; pop SCP (discard)
058C   C1                     POP   bc   ; bc = IP
058D   F9                     LD   sp,hl   ; sp = old BP
058E   FD 21 00 00            LD   iy,0   ; iy = sp
0592   FD 39                  ADD   iy,sp   
0594   DD 21 A4 0A            LD   ix,next   
0598   DD E9                  JP   (ix)   
059A                SWITCH:      
059A   E1                     POP   hl   ; get selector from stack
059B   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
059C   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
059F   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05A2   D5                     PUSH   de   ; push SCP
05A3   FD E5                  PUSH   iy   ; push BP
05A5   FD 21 00 00            LD   iy,0   ; BP = SP
05A9   FD 39                  ADD   iy,sp   
05AB   E5                     PUSH   hl   ; push selector as first arg of new frame
05AC   DD E9                  JP   (ix)   
05AE                CASE:        
05AE   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05B1   FD 6E FE               LD   l,(iy-2)   
05B4   23                     INC   hl   ; hl -= 1 index from second arg
05B5   29                     ADD   hl,hl   ; hl *= 2 word offset
05B6   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05B8   FD 5D                  LD   e,iyl   
05BA   EB                     EX   de,hl   
05BB   B7                     OR   a   ; hl = BP - offset
05BC   ED 52                  SBC   hl,de   
05BE   54 5D                  LD   de,hl   ; save arg ptr
05C0   2B                     DEC   hl   ; hl += 2
05C1   2B                     DEC   hl   
05C2   B7                     OR   a   ; arg ptr - stack pointer
05C3   ED 72                  SBC   hl,sp   
05C5   30 03                  JR   nc,case0   
05C7   D1                     POP   de   ; pop last arg
05C8   18 05                  JR   case1   
05CA                CASE0:       
05CA   EB                     EX   de,hl   
05CB   2B                     DEC   hl   ; de = arg
05CC   56                     LD   d,(hl)   
05CD   2B                     DEC   hl   
05CE   5E                     LD   e,(hl)   
05CF                CASE1:       
05CF   7A                     LD   a,d   ; is arg == NUL ? then skip
05D0   B3                     OR   e   
05D1   28 09                  JR   z,case2   
05D3   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05D6   FD 70 05               LD   (iy+5),b   
05D9   42 4B                  LD   bc,de   ; IP = arg
05DB   0B                     DEC   bc   
05DC                CASE2:       
05DC   DD E9                  JP   (ix)   
05DE                WORDS:       
05DE   21 02 00               LD   hl,2   
05E1   18 03                  JR   bytes1   
05E3                BYTES:       
05E3   21 01 00               LD   hl,1   
05E6                BYTES1:      
05E6   22 80 1B               LD   (vDataWidth),hl   
05E9   DD E9                  JP   (ix)   
05EB                ARRAY:       
05EB   C5                     PUSH   bc   ; create stack frame, push IP
05EC   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05EF   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05F2   D5                     PUSH   de   ; push SCP
05F3   FD E5                  PUSH   iy   ; push BP
05F5   FD 21 00 00            LD   iy,0   ; BP = SP
05F9   FD 39                  ADD   iy,sp   
05FB   DD E9                  JP   (ix)   
05FD                ARRAYEND:      
05FD   FD 54                  LD   d,iyh   ; de = BP
05FF   FD 5D                  LD   e,iyl   
0601   DD 62                  LD   ixh,d   ; ix = BP
0603   DD 6B                  LD   ixl,e   
0605   62 6B                  LD   hl,de   ; hl = de
0607   B7                     OR   a   
0608   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
060A   CB 3C                  SRL   h   
060C   CB 1D                  RR   l   
060E   EB                     EX   de,hl   ; de = count
060F   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
0612   73                     LD   (hl),e   
0613   23                     INC   hl   
0614   72                     LD   (hl),d   
0615   23                     INC   hl   ; hl = array[0], de = count
0616   3A 80 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
0619   FE 01                  CP   1   
061B   20 10                  JR   nz,arrayEnd2   
061D                ARRAYEND1:      ; byte
061D   DD 7E FE               LD   a,(ix-2)   
0620   77                     LD   (hl),a   
0621   23                     INC   hl   
0622   DD 2B                  DEC   ix   
0624   DD 2B                  DEC   ix   
0626   1B                     DEC   de   
0627   7B                     LD   a,e   
0628   B2                     OR   d   
0629   20 F2                  JR   nz,arrayEnd1   
062B   18 13                  JR   arrayEnd3   
062D                ARRAYEND2:      ; word
062D   DD 7E FE               LD   a,(ix-2)   
0630   77                     LD   (hl),a   
0631   23                     INC   hl   
0632   DD 7E FF               LD   a,(ix-1)   
0635   77                     LD   (hl),a   
0636   23                     INC   hl   
0637   DD 2B                  DEC   ix   
0639   DD 2B                  DEC   ix   
063B   1B                     DEC   de   
063C   7B                     LD   a,e   
063D   B2                     OR   d   
063E   20 ED                  JR   nz,arrayEnd2   
0640                ARRAYEND3:      
0640   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0642   FD 5D                  LD   e,iyl   
0644   EB                     EX   de,hl   ; hl = BP, de = end of array
0645   F9                     LD   sp,hl   ; sp = BP
0646   E1                     POP   hl   ; hl = old BP, de = end of array
0647   DD E1                  POP   ix   ; pop SCP (discard)
0649   DD E1                  POP   ix   ; pop IP (discard)
064B   F9                     LD   sp,hl   ; sp = old BP
064C   FD 21 00 00            LD   iy,0   ; iy = sp
0650   FD 39                  ADD   iy,sp   
0652   DD 21 A4 0A            LD   ix,next   
0656   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0659   23                     INC   hl   
065A   23                     INC   hl   
065B   E5                     PUSH   hl   ; return array[0]
065C   EB                     EX   de,hl   ; hl = end of array, de = array[0]
065D   B7                     OR   a   
065E   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0660   EB                     EX   de,hl   
0661   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
0664   73                     LD   (hl),e   ; array[-2] = size
0665   23                     INC   hl   
0666   72                     LD   (hl),d   
0667   DD E9                  JP   (ix)   
0669                             ; str -- num
0669                HASH:        
0669   E1                     POP   hl   
066A   C5                     PUSH   bc   
066B   44 4D                  LD   bc,hl   
066D   CD 5D 07               CALL   hashStr   
0670   C1                     POP   bc   
0671   E5                     PUSH   hl   
0672   DD E9                  JP   (ix)   
0674                             ; str addr -- bool
0674                DEF:         
0674   60 69                  LD   hl,bc   ; hl = IP
0676   D1                     POP   de   ; de = addr
0677   C1                     POP   bc   ; bc = hash
0678   E5                     PUSH   hl   
0679   CD 76 07               CALL   defineEntry   
067C   21 00 00               LD   hl,0   ; if c return TRUE
067F   30 01                  JR   nc,def1   
0681   2B                     DEC   hl   
0682                DEF1:        
0682   C1                     POP   bc   
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; str -- addr
0686                ADDR:        
0686   E1                     POP   hl   ; hl = hash
0687   C5                     PUSH   bc   
0688   44 4D                  LD   bc,hl   
068A   CD 9C 07               CALL   lookupEntry   
068D   38 03                  JR   c,addr1   
068F   21 00 00               LD   hl,0   
0692                             ; call printStr		
0692                             ; .cstr "Undefined"
0692                             ; jp interpret
0692                ADDR1:       
0692   C1                     POP   bc   
0693   E5                     PUSH   hl   
0694   DD E9                  JP   (ix)   
0696                SYMBOL:      
0696   03                     INC   bc   
0697   11 00 1A               LD   de,PAD   
069A   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069C   18 02                  JR   symbol1   
069E                SYMBOL0:      ; copy to PAD area
069E   03                     INC   bc   ; characters that are part of the identifier
069F   13                     INC   de   
06A0                SYMBOL1:      ; 0-9 A-Z a-z _
06A0   0A                     LD   a,(bc)   
06A1   12                     LD   (de),a   
06A2   B7                     OR   a   
06A3   28 0A                  JR   z,symbol2   
06A5   6F                     LD   l,a   
06A6   7E                     LD   a,(hl)   
06A7   FE 58                  CP   lsb(ident_)   
06A9   28 F3                  JR   z,symbol0   
06AB   FE 00                  CP   lsb(num_)   
06AD   28 EF                  JR   z,symbol0   
06AF                SYMBOL2:      
06AF   0B                     DEC   bc   
06B0   AF                     XOR   a   
06B1   12                     LD   (de),a   ; terminate string with NUL
06B2   C5                     PUSH   bc   
06B3   01 00 1A               LD   bc,PAD   
06B6   CD 5D 07               CALL   hashStr   ; hl = hash
06B9   C1                     POP   bc   
06BA   E5                     PUSH   hl   
06BB   DD E9                  JP   (ix)   
06BD                IDENT:       
06BD   11 00 1A               LD   de,PAD   
06C0   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06C2   18 02                  JR   ident1   
06C4                IDENT0:      ; copy to PAD area
06C4   03                     INC   bc   ; characters that are part of the identifier
06C5   13                     INC   de   
06C6                IDENT1:      ; 0-9 A-Z a-z _
06C6   0A                     LD   a,(bc)   
06C7   12                     LD   (de),a   
06C8   B7                     OR   a   
06C9   28 0A                  JR   z,ident2   
06CB   6F                     LD   l,a   
06CC   7E                     LD   a,(hl)   
06CD   FE 58                  CP   lsb(ident_)   
06CF   28 F3                  JR   z,ident0   
06D1   FE 00                  CP   lsb(num_)   
06D3   28 EF                  JR   z,ident0   
06D5                IDENT2:      
06D5   0B                     DEC   bc   
06D6   AF                     XOR   a   
06D7   12                     LD   (de),a   ; terminate string with NUL
06D8   C5                     PUSH   bc   
06D9   01 00 1A               LD   bc,PAD   
06DC   CD 5D 07               CALL   hashStr   ; hl = hash
06DF   44 4D                  LD   bc,hl   
06E1   CD 9C 07               CALL   lookupEntry   
06E4   C1                     POP   bc   
06E5   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06E7   DD E9                  JP   (ix)   
06E9                IDENT3:      
06E9   E9                     JP   (hl)   
06EA                FRAC:        
06EA   2A 7E 1B               LD   hl,(vFrac)   
06ED   E5                     PUSH   hl   
06EE   DD E9                  JP   (ix)   
06F0                SQRT1:       
06F0   E1                     POP   hl   
06F1   C5                     PUSH   bc   
06F2   CD D9 07               CALL   squareRoot   
06F5   ED 43 7E 1B            LD   (vFrac),bc   
06F9   C1                     POP   bc   
06FA   D5                     PUSH   de   
06FB   DD E9                  JP   (ix)   
06FD                ABS1:        
06FD   E1                     POP   hl   
06FE   CB 7C                  BIT   7,h   
0700   C8                     RET   z   
0701   AF                     XOR   a   
0702   95                     SUB   l   
0703   6F                     LD   l,a   
0704   9F                     SBC   a,a   
0705   94                     SUB   h   
0706   67                     LD   h,a   
0707   E5                     PUSH   hl   
0708   DD E9                  JP   (ix)   
070A                MOD:         
070A   D1                     POP   de   ; get first value
070B   E1                     POP   hl   ; get 2nd value
070C   C5                     PUSH   bc   ; preserve the IP
070D   44 4D                  LD   bc,hl   
070F   CD C0 07               CALL   divide   
0712   C1                     POP   bc   
0713   E5                     PUSH   hl   ; push remainder
0714   DD E9                  JP   (ix)   
0716                             ; hl = value1, de = value2
0716                             ; hl = result
0716                EQUALS:      
0716   B7                     OR   a   ; reset the carry flag
0717   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0719   28 10                  JR   z,true1   
071B   C3 31 07               JP   false1   
071E                             ; hl = value1 de = value2
071E                             ; hl = result
071E                LESSTHANEQ:      
071E   B7                     OR   a   
071F   ED 52                  SBC   hl,de   
0721   18 05                  JR   lessthan1   
0723                             ; hl = value1 de = value2
0723                             ; hl = result
0723                LESSTHAN:      
0723   B7                     OR   a   
0724   ED 52                  SBC   hl,de   
0726   28 09                  JR   z,false1   
0728                LESSTHAN1:      
0728   FA 31 07               JP   m,false1   
072B                TRUE1:       
072B   21 FF FF               LD   hl,TRUE   
072E   E5                     PUSH   hl   
072F   DD E9                  JP   (ix)   
0731                FALSE1:      
0731   21 00 00               LD   hl,FALSE   
0734   E5                     PUSH   hl   
0735   DD E9                  JP   (ix)   
0737                             ; Z80 port input
0737                             ; port -- value
0737                INPUT:       
0737   E1                     POP   hl   
0738   59                     LD   e,c   ; save IP
0739   4D                     LD   c,l   
073A   ED 68                  IN   l,(c)   
073C   26 00                  LD   h,0   
073E   4B                     LD   c,e   ; restore IP
073F   E5                     PUSH   hl   
0740   DD E9                  JP   (ix)   
0742                             ; Z80 port output
0742                             ; value port --
0742                OUTPUT:      
0742   E1                     POP   hl   
0743   59                     LD   e,c   ; save IP
0744   4D                     LD   c,l   
0745   E1                     POP   hl   
0746   ED 69                  OUT   (c),l   
0748   4B                     LD   c,e   ; restore IP
0749   DD E9                  JP   (ix)   
074B                KEY:         
074B   CD 81 00               CALL   getchar   
074E   26 00                  LD   h,0   
0750   6F                     LD   l,a   
0751   E5                     PUSH   hl   
0752   DD E9                  JP   (ix)   
0754                NEG:         
0754   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0757   D1                     POP   de   
0758   C3 92 03               JP   sub2   ; use the SUBtract routine
075B                LET:         
075B                FILTER:      
075B                MAP:         
075B                SCAN:        
075B   DD E9                  JP   (ix)   
075D                             ; -------------------------------------------------------------------------------
075D                             ; hash C-string
075D                             ; BC = str
075D                             ; HL = hash
075D                HASHSTR:      
075D   21 00 00               LD   hl,0   
0760                HASHSTR1:      
0760   0A                     LD   a,(bc)   ; load next char
0761   03                     INC   bc   
0762   FE 00                  CP   0   ; NUL?
0764   C8                     RET   z   
0765                HASHSTR2:      
0765   16 00                  LD   d,0   
0767   5F                     LD   e,a   
0768   19                     ADD   hl,de   
0769   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
076B   29                     ADD   hl,hl   ; shift left
076C   19                     ADD   hl,de   ; add
076D   29                     ADD   hl,hl   ; shift left
076E   29                     ADD   hl,hl   ; shift left
076F   29                     ADD   hl,hl   ; shift left
0770   29                     ADD   hl,hl   ; shift left
0771   29                     ADD   hl,hl   ; shift left
0772   29                     ADD   hl,hl   ; shift left
0773   19                     ADD   hl,de   ; add
0774   18 EA                  JR   hashStr1   
0776                             ; add entry to hash slots and hash pointers
0776                             ; bc = hash (b = hi, c = lo), de = addr
0776                             ; sets carry if successful
0776                DEFINEENTRY:      
0776   CB 21                  SLA   c   ; lo = lo * 2
0778   69                     LD   l,c   ; lo1 = lo
0779   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
077B                DEFINEENTRY0:      
077B   7E                     LD   a,(hl)   ; a = (lo1)
077C   FE FF                  CP   UNUSED   ; is it unused?
077E   28 12                  JR   z,defineEntry3   ; yes, add entry
0780   79                     LD   a,c   ; a = lo
0781   BE                     CP   (hl)   ; compare (lo1) with lo
0782   20 06                  JR   nz,defineEntry1   ; no match loop around
0784   2C                     INC   l   
0785   78                     LD   a,b   ; a = hi
0786   BE                     CP   (hl)   ; compare (lo1+1) with hi
0787   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0789   2D                     DEC   l   ; restore l
078A                DEFINEENTRY1:      
078A   2C                     INC   l   ; try next entry
078B   2C                     INC   l   
078C   79                     LD   a,c   ; compare lo and lo1
078D   BD                     CP   l   ; if equal then there's no space left, reject
078E   20 EB                  JR   nz,defineEntry0   
0790                DEFINEENTRY2:      
0790   B7                     OR   a   ; clear carry flag, failure
0791   C9                     RET      
0792                DEFINEENTRY3:      ; new entry
0792   71                     LD   (hl),c   ; (lo1) = hash lo
0793   23                     INC   hl   
0794   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0795   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0797   72                     LD   (hl),d   
0798   2B                     DEC   hl   
0799   73                     LD   (hl),e   ; (slot + 2) = address
079A   37                     SCF      ; set carry flag, success
079B   C9                     RET      
079C                             ; looks up hash and returns address
079C                             ; bc = hash
079C                             ; returns addr in hl, sets carry if successful
079C                LOOKUPENTRY:      
079C   CB 21                  SLA   c   ; lo = lo * 2
079E   69                     LD   l,c   ; lo1 = lo
079F   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07A1                LOOKUPENTRY0:      
07A1   7E                     LD   a,(hl)   ; a = (hl), slot
07A2   FE FF                  CP   UNUSED   ; is it unused?
07A4   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07A6   79                     LD   a,c   ; a = lo
07A7   BE                     CP   (hl)   ; compare (lo1) with lo
07A8   20 06                  JR   nz,lookupEntry1   ; no match loop around
07AA   2C                     INC   l   
07AB   78                     LD   a,b   ; a = hi
07AC   BE                     CP   (hl)   ; compare (lo1+1) with hi
07AD   28 09                  JR   z,lookupEntry3   
07AF   2D                     DEC   l   
07B0                LOOKUPENTRY1:      
07B0   2C                     INC   l   
07B1   2C                     INC   l   
07B2   79                     LD   a,c   
07B3   BD                     CP   l   ; no space left, reject
07B4   20 EB                  JR   nz,lookupEntry0   
07B6                LOOKUPENTRY2:      
07B6   B7                     OR   a   ; clear carry flag, failure
07B7   C9                     RET      
07B8                LOOKUPENTRY3:      
07B8   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07BA   56                     LD   d,(hl)   
07BB   2D                     DEC   l   ; restore l
07BC   5E                     LD   e,(hl)   ; (slot + 2) = address
07BD   EB                     EX   de,hl   
07BE   37                     SCF      
07BF   C9                     RET      
07C0                             ; division subroutine.
07C0                             ; bc: divisor, de: dividend, hl: remainder
07C0                DIVIDE:      
07C0   21 00 00               LD   hl,0   ; zero the remainder
07C3   3E 10                  LD   a,16   ; loop counter
07C5                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07C5   CB 21                  SLA   c   
07C7   CB 10                  RL   b   
07C9   ED 6A                  ADC   hl,hl   
07CB   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07CD   38 03                  JR   c,divide2   
07CF   0C                     INC   c   
07D0   18 01                  JR   divide3   
07D2                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D2   19                     ADD   hl,de   
07D3                DIVIDE3:      
07D3   3D                     DEC   a   
07D4   20 EF                  JR   nz,divide1   
07D6   50 59                  LD   de,bc   ; result from bc to de
07D8   C9                     RET      
07D9                             ; squareroot
07D9                             ; Input: HL = value
07D9                             ; Result: DE = square root BC = remainder
07D9                SQUAREROOT:      
07D9   01 00 08               LD   bc,0800h   
07DC   59                     LD   e,c   
07DD   AF                     XOR   a   
07DE                SQUAREROOT1:      
07DE   29                     ADD   hl,hl   
07DF   CB 11                  RL   c   
07E1   ED 6A                  ADC   hl,hl   
07E3   CB 11                  RL   c   
07E5   30 02                  JR   nc,$+4   
07E7   CB C5                  SET   0,l   
07E9   7B                     LD   a,e   
07EA   87                     ADD   a,a   
07EB   5F                     LD   e,a   
07EC   87                     ADD   a,a   
07ED   CB 45                  BIT   0,l   
07EF   20 03                  JR   nz,$+5   
07F1   91                     SUB   c   
07F2   30 05                  JR   nc,squareRoot4   
07F4   79                     LD   a,c   
07F5   93                     SUB   e   
07F6   1C                     INC   e   
07F7   93                     SUB   e   
07F8   4F                     LD   c,a   
07F9                SQUAREROOT4:      
07F9   10 E3                  DJNZ   squareRoot1   
07FB   CB 45                  BIT   0,l   
07FD   28 01                  JR   z,squareRoot5   
07FF   04                     INC   b   
0800                SQUAREROOT5:      
0800   16 00                  LD   d,0   
0802   C9                     RET      
0803                PRTDEC:      
0803   CB 7C                  BIT   7,h   
0805   28 0B                  JR   z,prtdec0   
0807   3E 2D                  LD   a,"-"   
0809   CD 85 00               CALL   putchar   
080C   AF                     XOR   a   
080D   95                     SUB   l   
080E   6F                     LD   l,a   
080F   9F                     SBC   a,a   
0810   94                     SUB   h   
0811   67                     LD   h,a   
0812                PRTDEC0:      
0812   C5                     PUSH   bc   
0813   0E 00                  LD   c,0   ; leading zeros flag = false
0815   11 F0 D8               LD   de,-10000   
0818   CD 34 08               CALL   prtdec1   
081B   11 18 FC               LD   de,-1000   
081E   CD 34 08               CALL   prtdec1   
0821   11 9C FF               LD   de,-100   
0824   CD 34 08               CALL   prtdec1   
0827   1E F6                  LD   e,-10   
0829   CD 34 08               CALL   prtdec1   
082C   0C                     INC   c   ; flag = true for at least digit
082D   1E FF                  LD   e,-1   
082F   CD 34 08               CALL   prtdec1   
0832   C1                     POP   bc   
0833   C9                     RET      
0834                PRTDEC1:      
0834   06 2F                  LD   b,"0"-1   
0836                PRTDEC2:      
0836   04                     INC   b   
0837   19                     ADD   hl,de   
0838   38 FC                  JR   c,prtdec2   
083A   ED 52                  SBC   hl,de   
083C   3E 30                  LD   a,"0"   
083E   B8                     CP   b   
083F   20 05                  JR   nz,prtdec3   
0841   AF                     XOR   a   
0842   B1                     OR   c   
0843   C8                     RET   z   
0844   18 01                  JR   prtdec4   
0846                PRTDEC3:      
0846   0C                     INC   c   
0847                PRTDEC4:      
0847   78                     LD   a,b   
0848   C3 85 00               JP   putchar   
084B                PRTHEX:      ; display hl as a 16-bit number in hex.
084B   C5                     PUSH   bc   ; preserve the IP
084C   7C                     LD   a,h   
084D   CD 56 08               CALL   prthex2   
0850   7D                     LD   a,l   
0851   CD 56 08               CALL   prthex2   
0854   C1                     POP   bc   
0855   C9                     RET      
0856                PRTHEX2:      
0856   4F                     LD   c,a   
0857   1F                     RRA      
0858   1F                     RRA      
0859   1F                     RRA      
085A   1F                     RRA      
085B   CD 5F 08               CALL   prthex3   
085E   79                     LD   a,c   
085F                PRTHEX3:      
085F   E6 0F                  AND   0x0F   
0861   C6 90                  ADD   a,0x90   
0863   27                     DAA      
0864   CE 40                  ADC   a,0x40   
0866   27                     DAA      
0867   C3 85 00               JP   putchar   
086A                PRTSTR0:      
086A   CD 85 00               CALL   putchar   
086D   23                     INC   hl   
086E                PRTSTR:      
086E   7E                     LD   a,(hl)   
086F   B7                     OR   a   
0870   20 F8                  JR   nz,prtstr0   
0872   C9                     RET      
0873                             ; **************************************************************************
0873                             ; calculate nesting value
0873                             ; a is char to be tested,
0873                             ; e is the nesting value (initially 0)
0873                             ; e is increased by ( and [
0873                             ; e is decreased by ) and ]
0873                             ; e has its bit 7 toggled by `
0873                             ; limited to 127 levels
0873                             ; **************************************************************************
0873                NESTING:      
0873   FE 22                  CP   $22   ; quote char
0875   20 0A                  JR   nz,nesting1   
0877   CB 7B                  BIT   7,e   
0879   28 03                  JR   z,nesting1a   
087B   CB BB                  RES   7,e   
087D   C9                     RET      
087E                NESTING1A:      
087E   CB FB                  SET   7,e   
0880   C9                     RET      
0881                NESTING1:      
0881   CB 7B                  BIT   7,e   
0883   C0                     RET   nz   
0884   FE 7B                  CP   "{"   
0886   28 08                  JR   z,nesting2   
0888   FE 5B                  CP   "["   
088A   28 04                  JR   z,nesting2   
088C   FE 28                  CP   "("   
088E   20 02                  JR   nz,nesting3   
0890                NESTING2:      
0890   1C                     INC   e   
0891   C9                     RET      
0892                NESTING3:      
0892   FE 7D                  CP   "}"   
0894   28 07                  JR   z,nesting4   
0896   FE 5D                  CP   "]"   
0898   28 03                  JR   z,nesting4   
089A   FE 29                  CP   ")"   
089C   C0                     RET   nz   
089D                NESTING4:      
089D   1D                     DEC   e   
089E   C9                     RET      
089F                PROMPT:      
089F   CD AF 08               CALL   printStr   
08A2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08A7   C9                     RET      
08A8                CRLF:        
08A8   CD AF 08               CALL   printStr   
08AB   0D 0A 00               .CSTR   "\r\n"   
08AE   C9                     RET      
08AF                PRINTSTR:      
08AF   E3                     EX   (sp),hl   ; swap			
08B0   CD 6E 08               CALL   prtstr   
08B3   23                     INC   hl   ; inc past NUL
08B4   E3                     EX   (sp),hl   ; put it back	
08B5   C9                     RET      
08B6                DEFINE:      
08B6   E1                     POP   hl   
08B7   7E                     LD   a,(hl)   
08B8   23                     INC   hl   
08B9   44 4D                  LD   bc,hl   
08BB   5F                     LD   e,a   
08BC   16 00                  LD   d,0   
08BE   19                     ADD   hl,de   
08BF   5E                     LD   e,(hl)   
08C0   23                     INC   hl   
08C1   56                     LD   d,(hl)   
08C2   23                     INC   hl   
08C3   E5                     PUSH   hl   ; bc = str
08C4   D5                     PUSH   de   
08C5   CD 5D 07               CALL   hashStr   ; hl = hash
08C8   D1                     POP   de   
08C9   44 4D                  LD   bc,hl   
08CB   C3 76 07               JP   defineEntry   
08CE                INIT:        
08CE   DD 21 A4 0A            LD   ix,next   
08D2   FD 21 00 1A            LD   iy,DSTACK   
08D6   21 80 01               LD   hl,isysVars   
08D9   11 7E 1B               LD   de,sysVars   
08DC   01 10 00               LD   bc,8 * 2   
08DF   ED B0                  LDIR      
08E1   3E FF                  LD   a,UNUSED   
08E3   06 00                  LD   b,0   
08E5   21 00 1C               LD   hl,hashSlots   
08E8                INIT1:       
08E8   77                     LD   (hl),a   
08E9   23                     INC   hl   
08EA   10 FC                  DJNZ   init1   
08EC   CD B6 08               CALL   define   
08EF   04 61 62 73 00         .PSTR   "abs",0   
08F4   FD 06                  DW   abs1   
08F6   CD B6 08               CALL   define   
08F9   05 61 64 64 72 00      .PSTR   "addr",0   
08FF   86 06                  DW   addr   
0901   CD B6 08               CALL   define   
0904   06 62 79 74 65 73 00   .PSTR   "bytes",0   
090B   E3 05                  DW   bytes   
090D   CD B6 08               CALL   define   
0910   05 63 61 6C 6C 00      .PSTR   "call",0   
0916   D7 0A                  DW   call   
0918   CD B6 08               CALL   define   
091B   05 63 61 73 65 00      .PSTR   "case",0   
0921   AE 05                  DW   case   
0923   CD B6 08               CALL   define   
0926   04 64 65 66 00         .PSTR   "def",0   
092B   74 06                  DW   def   
092D   CD B6 08               CALL   define   
0930   05 65 78 65 63 00      .PSTR   "exec",0   
0936   EC 0A                  DW   exec   
0938   CD B6 08               CALL   define   
093B   06 66 61 6C 73 65 00   .PSTR   "false",0   
0942   00 00                  DW   false   
0944   CD B6 08               CALL   define   
0947   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
094F   5B 07                  DW   filter   
0951   CD B6 08               CALL   define   
0954   05 66 72 61 63 00      .PSTR   "frac",0   
095A   EA 06                  DW   frac   
095C   CD B6 08               CALL   define   
095F   04 67 65 74 00         .PSTR   "get",0   
0964   01 05                  DW   get   
0966   CD B6 08               CALL   define   
0969   05 68 61 73 68 00      .PSTR   "hash",0   
096F   69 06                  DW   hash   
0971   CD B6 08               CALL   define   
0974   06 69 6E 70 75 74 00   .PSTR   "input",0   
097B   37 07                  DW   input   
097D   CD B6 08               CALL   define   
0980   03 69 66 00            .PSTR   "if",0   
0984   22 05                  DW   if   
0986   CD B6 08               CALL   define   
0989   05 69 66 74 65 00      .PSTR   "ifte",0   
098F   27 05                  DW   ifte   
0991   CD B6 08               CALL   define   
0994   04 6B 65 79 00         .PSTR   "key",0   
0999   4B 07                  DW   key   
099B   CD B6 08               CALL   define   
099E   04 6C 65 74 00         .PSTR   "let",0   
09A3   5B 07                  DW   let   
09A5   CD B6 08               CALL   define   
09A8   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09AE   4A 05                  DW   loop   
09B0   CD B6 08               CALL   define   
09B3   04 6D 61 70 00         .PSTR   "map",0   
09B8   5B 07                  DW   map   
09BA   CD B6 08               CALL   define   
09BD   04 6D 6F 64 00         .PSTR   "mod",0   
09C2   0A 07                  DW   mod   
09C4   CD B6 08               CALL   define   
09C7   04 6E 65 67 00         .PSTR   "neg",0   
09CC   54 07                  DW   neg   
09CE   CD B6 08               CALL   define   
09D1   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09D9   42 07                  DW   output   
09DB   CD B6 08               CALL   define   
09DE   05 73 63 61 6E 00      .PSTR   "scan",0   
09E4   01 00                  DW   scan   
09E6   CD B6 08               CALL   define   
09E9   04 73 65 74 00         .PSTR   "set",0   
09EE   10 05                  DW   set   
09F0   CD B6 08               CALL   define   
09F3   04 73 68 6C 00         .PSTR   "shl",0   
09F8   C8 03                  DW   shl   
09FA   CD B6 08               CALL   define   
09FD   04 73 68 72 00         .PSTR   "shr",0   
0A02   D8 03                  DW   shr   
0A04   CD B6 08               CALL   define   
0A07   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A0D   F0 06                  DW   sqrt1   
0A0F   CD B6 08               CALL   define   
0A12   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A1A   9A 05                  DW   switch   
0A1C   CD B6 08               CALL   define   
0A1F   05 74 72 75 65 00      .PSTR   "true",0   
0A25   FF FF                  DW   true   
0A27   CD B6 08               CALL   define   
0A2A   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A31   DE 05                  DW   words   
0A33   C9                     RET      
0A34                START:       
0A34   31 00 1A               LD   sp,DSTACK   ; start of Siena
0A37   CD CE 08               CALL   init   ; setups
0A3A   CD AF 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A3D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A4A                INTERPRET:      
0A4A   CD 9F 08               CALL   prompt   
0A4D   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A50   ED 43 82 1B            LD   (vTIBPtr),bc   
0A54                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A54   1E 00                  LD   e,0   ; initilize nesting value
0A56   C5                     PUSH   bc   ; save offset into TIB,
0A57                             ; bc is also the count of chars in TIB
0A57   21 00 18               LD   hl,TIB   ; hl is start of TIB
0A5A   18 06                  JR   interpret4   
0A5C                INTERPRET3:      
0A5C   7E                     LD   a,(hl)   ; a = char in TIB
0A5D   23                     INC   hl   ; inc pointer into TIB
0A5E   0B                     DEC   bc   ; dec count of chars in TIB
0A5F   CD 73 08               CALL   nesting   ; update nesting value
0A62                INTERPRET4:      
0A62   79                     LD   a,c   ; is count zero?
0A63   B0                     OR   b   
0A64   20 F6                  JR   nz,interpret3   ; if not loop
0A66   C1                     POP   bc   ; restore offset into TIB
0A67                WAITCHAR:      
0A67   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A6A   FE 20                  CP   $20   ; compare to space
0A6C   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A6E   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A70                             ; ???? NEEDED?
0A70   28 2A                  JR   z,waitchar4   
0A72   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A74   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A76                MACRO:       
0A76                             ;  ld (vTIBPtr),bc
0A76                             ;  ld hl,ctrlCodes
0A76                             ;  add a,l			            ; look up key of macros
0A76                             ;  ld l,a
0A76                             ;  ld e,(hl)
0A76                             ;  ld a,e
0A76                             ;  or a
0A76                             ;  jr z,macro1
0A76                             ;  ld d,msb(macros)
0A76                             ;  push de
0A76                             ;  call call		            ; Siena exec_ operation and jump to it
0A76                             ;  db DC1,0
0A76                             ; macro1:
0A76                             ;  ld bc,(vTIBPtr)
0A76   18 DC                  JR   interpret2   
0A78                WAITCHAR1:      
0A78   21 00 18               LD   hl,TIB   
0A7B   09                     ADD   hl,bc   
0A7C   77                     LD   (hl),a   ; store the character in textbuf
0A7D   03                     INC   bc   
0A7E   CD 85 00               CALL   putchar   ; echo character to screen
0A81   CD 73 08               CALL   nesting   
0A84   18 E1                  JR   waitchar   ; wait for next character
0A86                WAITCHAR3:      
0A86   21 00 18               LD   hl,TIB   
0A89   09                     ADD   hl,bc   
0A8A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A8C   23                     INC   hl   
0A8D   36 0A                  LD   (hl),"\n"   
0A8F   23                     INC   hl   
0A90   03                     INC   bc   
0A91   03                     INC   bc   
0A92   CD A8 08               CALL   crlf   ; echo character to screen
0A95   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A96   B7                     OR   a   
0A97   20 CE                  JR   nz,waitchar   
0A99   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A9B   03                     INC   bc   
0A9C                WAITCHAR4:      
0A9C   ED 43 82 1B            LD   (vTIBPtr),bc   
0AA0   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AA3                             ; we pressed enter
0AA3   0B                     DEC   bc   
0AA4                NEXT:        
0AA4   03                     INC   bc   ; Increment the IP
0AA5   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AA6                             ; bit 7,a                   ; is 15-bit opcode ?
0AA6                             ; jr nz,next3
0AA6   FE 20                  CP   " "   ; whitespace?
0AA8   28 FA                  JR   z,next   ; space? ignore
0AAA   38 07                  JR   c,next1   
0AAC   6F                     LD   l,a   ; index into table
0AAD   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0AAF   6E                     LD   l,(hl)   ; get low jump address
0AB0   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0AB2   E9                     JP   (hl)   ; Jump to routine
0AB3                NEXT1:       
0AB3   FE 1B                  CP   ESC   ; escape from interpreter
0AB5   28 07                  JR   z,escape   
0AB7   FE 00                  CP   NUL   ; end of input string?
0AB9   28 07                  JR   z,exit   
0ABB                             ; cp ETX                      ; end of command line input text?
0ABB                             ; jr nz,next
0ABB                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0ABB                             ;     add hl,sp
0ABB                             ;     jr nc,next2
0ABB                             ;     ld sp,DSTACK                ; yes, reset stack
0ABB                             ; next2:
0ABB   C3 4A 0A               JP   interpret   ; no, other whitespace, macros?
0ABE                             ; next3:
0ABE                             ;     ld h,a                    ; build address
0ABE                             ;     inc bc
0ABE                             ;     ld a,(bc)
0ABE                             ;     ld l,a
0ABE                             ;     add hl,hl
0ABE                             ;     jp (hl)
0ABE                ESCAPE:      
0ABE   60 69                  LD   hl,bc   ; address of code after escape opcode
0AC0   23                     INC   hl   
0AC1   E9                     JP   (hl)   
0AC2                EXIT:        
0AC2   50 59                  LD   de,bc   ; address of code after exit opcode
0AC4   13                     INC   de   
0AC5   D9                     EXX      
0AC6   C1                     POP   bc   ; bc = last result
0AC7   FD 54                  LD   d,iyh   ; de = BP
0AC9   FD 5D                  LD   e,iyl   
0ACB   EB                     EX   de,hl   ; hl = BP
0ACC   F9                     LD   sp,hl   ; sp = BP
0ACD   D9                     EXX      
0ACE   E1                     POP   hl   ; hl = old BP
0ACF   C1                     POP   bc   ; pop SCP (discard)
0AD0   C1                     POP   bc   ; bc = IP
0AD1   F9                     LD   sp,hl   ; sp = old BP
0AD2   D9                     EXX      
0AD3   C5                     PUSH   bc   ; push result
0AD4   D9                     EXX      
0AD5   EB                     EX   de,hl   
0AD6   E9                     JP   (hl)   
0AD7                             ; call with args
0AD7                             ; creates a scope
0AD7                CALL:        ; execute code at pointer
0AD7   E1                     POP   hl   ; hl = pointer to code
0AD8   7C                     LD   a,h   ; skip if destination address is NUL
0AD9   B5                     OR   l   
0ADA   28 0E                  JR   z,call2   
0ADC   C5                     PUSH   bc   ; push IP
0ADD   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0ADF   FD E5                  PUSH   iy   ; push BP
0AE1   FD 21 00 00            LD   iy,0   ; BP = SP
0AE5   FD 39                  ADD   iy,sp   
0AE7   44 4D                  LD   bc,hl   ; IP = pointer to code
0AE9   0B                     DEC   bc   ; dec to prepare for next routine
0AEA                CALL2:       
0AEA   DD E9                  JP   (ix)   
0AEC                             ; execute a block of code
0AEC                             ; uses parent scope
0AEC                EXEC:        ; execute code at pointer
0AEC   E1                     POP   hl   ; hl = pointer to code
0AED   7C                     LD   a,h   ; skip if destination address is NUL
0AEE   B5                     OR   l   
0AEF   28 13                  JR   z,exec2   
0AF1   C5                     PUSH   bc   ; push IP
0AF2   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AF5   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AF8   D5                     PUSH   de   ; push SCP
0AF9   FD E5                  PUSH   iy   ; push BP
0AFB   FD 21 00 00            LD   iy,0   ; BP = SP
0AFF   FD 39                  ADD   iy,sp   
0B01   44 4D                  LD   bc,hl   ; IP = pointer to code
0B03   0B                     DEC   bc   ; dec to prepare for next routine
0B04                EXEC2:       
0B04   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        
1E00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "2 (1 2 +) *", 6
4000   31 00 1A               LD   SP,DSTACK   
4003   CD CE 08               CALL   init   
4006   CD EC 0A               CALL   exec   
4009   32 20 28 31 20 32 20 2B 29 20 2A 00 .CSTR   "2 (1 2 +) *"   
4015                          ;*Macro unroll:  expect "2 (1 2 +) *",6
4015   E1                     POP   HL   
4016   E5                     PUSH   HL   
4017   11 06 00               LD   DE,6   
401A   B7                     OR   A   
401B   ED 52                  SBC   HL,DE   
401D   7D                     LD   A,L   
401E   B4                     OR   H   
401F   28 56                  JR   Z,expectM_0_2246S43   
4021   CD AF 08               CALL   printStr   
4024   43 6F 64 65 3A 20 32 20 28 31 20 32 20 2B 29 20 2A 00 .CSTR   "Code: ","2 (1 2 +) *"   
4036   CD AF 08               CALL   printStr   
4039   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4048   21 06 00               LD   HL,6   
404B   CD 03 08               CALL   prtdec   
404E   CD AF 08               CALL   printStr   
4051   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
405E   E1                     POP   hl   
405F   E5                     PUSH   hl   
4060   CD 03 08               CALL   prtdec   
4063   E1                     POP   hl   
4064   CD AF 08               CALL   printStr   
4067   20 28 23 00            .CSTR   " (#"   
406B   CD 4B 08               CALL   prthex   
406E   CD AF 08               CALL   printStr   
4071   29 0D 0A 00            .CSTR   ")\r\n"   
4075   76                     HALT      
4076   00                     .CSTR      
4077                EXPECTM_0_2246S43:      
4077   E1                     POP   HL   
4078                             ; test ":xyz {10} def :xyz addr exec", 10
4078                             ; test ":xyz {10} def :xyz addr call", 10
4078                             ; test ":xyz {$1 $2 +} def 1 2 :xyz addr call", 3
4078                             ; test "1 2 {$1 $2 +} call", 3
4078                             ; test "'hello' hash", $7f54
4078                             ; test ":hello", $7f54
4078                             ; test ":hello 2 def", TRUE
4078                             ; test ":hello 2 def :hello addr", 2
4078                             ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5
4078                             ; test "bytes [1 2 3]", $1e02
4078                             ; test "bytes [1 2 3] 1? get", 2
4078                             ; test "bytes :xx [1 2 3] def :xx addr", 2
4078                             ; test "words [1 2 3]", $1e02
4078                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
4078                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
4078                             ; test "words [10 20 30] 1 ? get", 10
4078                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
4078                             ; test "{{{1} exec} exec} exec", 1
4078                             ; test "5 {{{$1} exec} exec} call", 5
4078                             ; test "5 {$1} call", 5
4078                             ; test "5 {{$1} exec} call", 5
4078                             ; test "2 1 {{$1} call} call", 2
4078                             ; test "2 1 {$2} call", 1
4078                             ; test "2 1 {$1} call", 2
4078                             ; test "2 1 {$2} call", 1
4078                             ; test "2 4 {$2} call", 4
4078                             ; test "{{1} call} call", 1
4078                             ; test "5 {-1 {$1} if} call", 5
4078                             ; test "0 {} loop", 0
4078                             ; test "1 {1-} loop", $1a00
4078                             ; test "65 .c", 0
4078                             ; test "1 2 <", TRUE
4078                             ; test "2 2 <=", TRUE
4078                             ; test "2 1 <", FALSE
4078                             ; test "1 2 >", FALSE
4078                             ; test "2 2 >=", TRUE
4078                             ; test "2 1 >", TRUE
4078                             ; test "10 sqrt", 3
4078                             ; test "10 sqrt frac", 1
4078                             ; test "7 3 /", 2
4078                             ; test "7 3 / frac", 1
4078                             ; test "1 2 +", 3
4078                             ; test ":h {1} def :h addr call", 1
4078                             ; test "1 2 +", 3
4078                             ; test "4 1 2 +", 3
4078                             ; test "1", 1
4078                             ; test "2", 2
4078                             ; test "``", 0
4078                             ; test "`a`", $61
4078                             ; test "`\\``", $60
4078                             ; test "`b` 'cba' in", -1
4078                             ; test "`x` 'cba' in", 0
4078                             ; test "5 0 {1} if", 5
4078                             ; test "0 {1} {2} ifte", 2
4078                             ; test "5 -1 {1} if", 1
4078                             ; test "-1 {1} {2} ifte", 1
4078                             ; test "9 sw {1} {5} ca", 5
4078                             ; test "0 sw {1} ca", 1
4078                             ; test "1 sw {1} {2} {3} ca", 2
4078                             ; test "5 -1 {2} if", 2
4078                             ; test "5 0 {2} if", 5
4078                             ; test "5 0 {0 {2} if} if", 5
4078                             ; test "5 0 {-1 {2} if} if", 5
4078                             ; test "5 -1 {2} if", 2
4078                             ; test "5 -1 {-1 {2} if} if", 2
4078                             ; test "{1} ex", 1
4078                             ; test "'A' @", 65
4078                             ; test "1", 1
4078                             ; test "0", 0
4078                             ; test "10", 10
4078                             ; test "123", 123
4078                             ; test "$10", $10
4078                             ; test "$FF", $FF
4078                             ; test "2 3 =", 0
4078                             ; test "3 3 =", 1
4078                             ; test "2 3 <", 1
4078                             ; test "3 3 <", 0
4078                             ; test "3 3 >", 0
4078                             ; test "4 3 >", 1
4078                             ; test "1 2 +", 3
4078                             ; test "123 456 +", 123+456
4078                             ; test "64 128 +", 64+128
4078                             ; test "5 3 -", 2
4078                             ; test "3 5 &", 1
4078                             ; test "3 5 |", 7
4078                             ; test "2 3 *", 6
4078                             ; test "1 2 3 + *", 5
4078                             ; ; test "1 2 3 ' +", 3
4078                             ; ; test "1_ 2 +",1
4078                             ; ; test "1_ 1 +",0
4078                             ; ; call enter
4078                             ; ;     .cstr "1 3",$22,"+"
4078                             ; ; expect "1 3 DUP +", 6
4078                             ; ; test "5 2/'", 2
4078                             ; ; test "3 5$ -", 2
4078                             ; ; test "5 2/$ '", 1
4078                             ; ; test "2 3%++", 7
4078                             ; ; test "1 2 3~''", 2
4078                             ; ; test "1 2 3~+*", 8
4078                             ; ; test "2a!a@",2
4078                             ; ; test "3x! 1 x@+x! x@", 4
4078                             ; ; test "3x! 1_ x@+x! x@", 2
4078                             ; ; test "1{", 2
4078                             ; ; test "1}", 0
4078                             ; ; test "2}", 1
4078                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4078                             ; ; test "{2} \\^", 2
4078                             ; ; test ":X1; X", 1
4078                             ; ; test ":A100;A", 100
4078                             ; ; test ":Aa!; 3A a@", 3
4078                             ; ; test ":Aa!;:Ba@;4AB", 4
4078                             ; ; test "[]$ '", 0
4078                             ; ; test "[3]$ '", 1
4078                             ; ; test "[3]'@", 3
4078                             ; ; test "[1 2 3]'@", 1
4078                             ; ; test "[1 2 3]'2+@", 2
4078                             ; ; test "\\h@[1]''\\h@$-", 2
4078                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4078                             ; ; test "\\[]$ '", 0
4078                             ; ; test "\\[3]'\\@", 3
4078                             ; ; test "\\[3]$ '", 1
4078                             ; ; test "\\[1 2 3]'\\@", 1
4078                             ; ; test "\\[1 2 3]'1+\\@", 2
4078                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4078                             ; ; test "\\h@\\[1]''\\h@$-", 1
4078                             ; ; test "\\`A`\\@",65
4078                             ; ; test "0 0{1+}", 0
4078                             ; ; test "0 1{1+}", 1
4078                             ; ; test "0 2{1+}", 2
4078                             ; ; test "0 1{0{1+}}", 0
4078                             ; ; test "0 1{1{1+}}", 1
4078                             ; ; test "0 2{1{1+}}", 2
4078                             ; ; test "0 2{2{1+}}", 4
4078                             ; ; test "0 1{\\i@+}", 0
4078                             ; ; test "0 2{\\i@+}", 1
4078                             ; ; test "0 3{\\i@+}", 3
4078                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
4078                             ; ; test "0t! 10{1 t@+t!} t@",10
4078                             ; ; test "0{100}{200}",200
4078                             ; ; test "1{100}{200}",100
4078                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
4078                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
4078                             ; ; test ":X10;\\0X", 10
4078                             ; ; test "2 \\1x! \\1x@", 2
4078   CD AF 08               CALL   printStr   
407B   44 6F 6E 65 21 00      .CSTR   "Done!"   
4081   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               075B DEFINED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 761 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 58 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 92 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 195 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 197 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 200 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 203 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 206 IN Siena.asm
PAREN_:             030C DEFINED AT LINE 209 IN Siena.asm
PARENEND_:          030F DEFINED AT LINE 212 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 215 IN Siena.asm
DOT1:               031E DEFINED AT LINE 223 IN Siena.asm
                    > USED AT LINE 220 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 228 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 234 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 243 IN Siena.asm
INDEX1:             0345 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
BLOCK_:             0349 DEFINED AT LINE 255 IN Siena.asm
BLOCKEND_:          034C DEFINED AT LINE 257 IN Siena.asm
CHAR_:              034F DEFINED AT LINE 259 IN Siena.asm
ARRAY_:             0352 DEFINED AT LINE 261 IN Siena.asm
ARRAYEND_:          0355 DEFINED AT LINE 263 IN Siena.asm
IDENT_:             0358 DEFINED AT LINE 265 IN Siena.asm
SYMBOL_:            035B DEFINED AT LINE 267 IN Siena.asm
AND_:               035E DEFINED AT LINE 269 IN Siena.asm
AND1:               0365 DEFINED AT LINE 277 IN Siena.asm
                    > USED AT LINE 290 IN Siena.asm
                    > USED AT LINE 301 IN Siena.asm
OR_:                0369 DEFINED AT LINE 282 IN Siena.asm
XOR_:               0372 DEFINED AT LINE 292 IN Siena.asm
XOR1:               0373 DEFINED AT LINE 294 IN Siena.asm
                    > USED AT LINE 305 IN Siena.asm
INV_:               037B DEFINED AT LINE 303 IN Siena.asm
ADD_:               0380 DEFINED AT LINE 307 IN Siena.asm
HDOT_:              0386 DEFINED AT LINE 314 IN Siena.asm
MUL_:               038D DEFINED AT LINE 319 IN Siena.asm
SUB_:               0390 DEFINED AT LINE 322 IN Siena.asm
SUB2:               0392 DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
EQ_:                0398 DEFINED AT LINE 331 IN Siena.asm
GT_:                039D DEFINED AT LINE 335 IN Siena.asm
LT_:                03A1 DEFINED AT LINE 339 IN Siena.asm
LT1:                03A3 DEFINED AT LINE 342 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
DIV_:               03AE DEFINED AT LINE 350 IN Siena.asm
COMMENT_:           03BD DEFINED AT LINE 361 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
NOP_:               03C6 DEFINED AT LINE 369 IN Siena.asm
SHL:                03C8 DEFINED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
SHL1:               03D0 DEFINED AT LINE 386 IN Siena.asm
                    > USED AT LINE 389 IN Siena.asm
SHL2:               03D1 DEFINED AT LINE 388 IN Siena.asm
                    > USED AT LINE 385 IN Siena.asm
SHR:                03D8 DEFINED AT LINE 396 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
SHR1:               03E0 DEFINED AT LINE 403 IN Siena.asm
                    > USED AT LINE 407 IN Siena.asm
SHR2:               03E4 DEFINED AT LINE 406 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
MUL:                03EB DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
MUL2:               03F5 DEFINED AT LINE 421 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
NUM:                0407 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 198 IN Siena.asm
NUM0:               0410 DEFINED AT LINE 441 IN Siena.asm
                    > USED AT LINE 439 IN Siena.asm
NUM1:               0411 DEFINED AT LINE 443 IN Siena.asm
                    > USED AT LINE 460 IN Siena.asm
NUM2:               0429 DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
NUM3:               0434 DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
HEXNUM:             0437 DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
HEXNUM1:            043A DEFINED AT LINE 475 IN Siena.asm
                    > USED AT LINE 492 IN Siena.asm
HEXNUM2:            0442 DEFINED AT LINE 481 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
STRING:             0454 DEFINED AT LINE 494 IN Siena.asm
                    > USED AT LINE 207 IN Siena.asm
STRING1:            045C DEFINED AT LINE 499 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
STRING2:            045F DEFINED AT LINE 503 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
CHAR:               046D DEFINED AT LINE 513 IN Siena.asm
                    > USED AT LINE 260 IN Siena.asm
CHAR1:              0470 DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
CHAR2:              047C DEFINED AT LINE 524 IN Siena.asm
                    > USED AT LINE 521 IN Siena.asm
CHAR3:              047F DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 519 IN Siena.asm
PAREN:              0482 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 210 IN Siena.asm
PAREN2:             0488 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 532 IN Siena.asm
PARENEND:           048F DEFINED AT LINE 538 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
BLOCK:              049E DEFINED AT LINE 549 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
BLOCK1:             04A2 DEFINED AT LINE 553 IN Siena.asm
                    > USED AT LINE 571 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
BLOCK2:             04C4 DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
BLOCK3:             04C7 DEFINED AT LINE 575 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
BLOCK4:             04CA DEFINED AT LINE 578 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
                    > USED AT LINE 559 IN Siena.asm
BLOCK5:             04CD DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
BLOCKEND:           04D2 DEFINED AT LINE 586 IN Siena.asm
                    > USED AT LINE 258 IN Siena.asm
ARG:                04E6 DEFINED AT LINE 601 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
GET:                0501 DEFINED AT LINE 622 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
GET1:               050D DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
SET:                0510 DEFINED AT LINE 636 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
SET1:               051F DEFINED AT LINE 649 IN Siena.asm
                    > USED AT LINE 644 IN Siena.asm
IF:                 0522 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
IFTE:               0527 DEFINED AT LINE 703 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
IFTE1:              0528 DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
IFTE2:              0531 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 712 IN Siena.asm
IFTE3:              0548 DEFINED AT LINE 727 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
LOOP:               054A DEFINED AT LINE 732 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
LOOP1:              055F DEFINED AT LINE 744 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
LOOP2:              057A DEFINED AT LINE 760 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
LOOP3:              0584 DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
SWITCH:             059A DEFINED AT LINE 781 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
CASE:               05AE DEFINED AT LINE 793 IN Siena.asm
                    > USED AT LINE 1506 IN Siena.asm
CASE0:              05CA DEFINED AT LINE 811 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
CASE1:              05CF DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
CASE2:              05DC DEFINED AT LINE 825 IN Siena.asm
                    > USED AT LINE 820 IN Siena.asm
WORDS:              05DE DEFINED AT LINE 828 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
BYTES:              05E3 DEFINED AT LINE 831 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
BYTES1:             05E6 DEFINED AT LINE 833 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
ARRAY:              05EB DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 262 IN Siena.asm
ARRAYEND:           05FD DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
ARRAYEND1:          061D DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
ARRAYEND2:          062D DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
ARRAYEND3:          0640 DEFINED AT LINE 900 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
HASH:               0669 DEFINED AT LINE 932 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
DEF:                0674 DEFINED AT LINE 942 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
DEF1:               0682 DEFINED AT LINE 951 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
ADDR:               0686 DEFINED AT LINE 957 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
ADDR1:              0692 DEFINED AT LINE 967 IN Siena.asm
                    > USED AT LINE 962 IN Siena.asm
SYMBOL:             0696 DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
SYMBOL0:            069E DEFINED AT LINE 977 IN Siena.asm
                    > USED AT LINE 988 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
SYMBOL1:            06A0 DEFINED AT LINE 980 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
SYMBOL2:            06AF DEFINED AT LINE 991 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
IDENT:              06BD DEFINED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
IDENT0:             06C4 DEFINED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
IDENT1:             06C6 DEFINED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
IDENT2:             06D5 DEFINED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
IDENT3:             06E9 DEFINED AT LINE 1032 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
FRAC:               06EA DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
SQRT1:              06F0 DEFINED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
ABS1:               06FD DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
MOD:                070A DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 1566 IN Siena.asm
EQUALS:             0716 DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
LESSTHANEQ:         071E DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
LESSTHAN:           0723 DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
LESSTHAN1:          0728 DEFINED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
TRUE1:              072B DEFINED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
FALSE1:             0731 DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
INPUT:              0737 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
OUTPUT:             0742 DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
KEY:                074B DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
NEG:                0754 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1570 IN Siena.asm
LET:                075B DEFINED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
FILTER:             075B DEFINED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
MAP:                075B DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
HASHSTR:            075D DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
HASHSTR1:           0760 DEFINED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
HASHSTR2:           0765 DEFINED AT LINE 1162 IN Siena.asm
DEFINEENTRY:        0776 DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
DEFINEENTRY0:       077B DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
DEFINEENTRY1:       078A DEFINED AT LINE 1197 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
DEFINEENTRY2:       0790 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
DEFINEENTRY3:       0792 DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
LOOKUPENTRY:        079C DEFINED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
LOOKUPENTRY0:       07A1 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
LOOKUPENTRY1:       07B0 DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
LOOKUPENTRY2:       07B6 DEFINED AT LINE 1242 IN Siena.asm
LOOKUPENTRY3:       07B8 DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
DIVIDE:             07C0 DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
DIVIDE1:            07C5 DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
DIVIDE2:            07D2 DEFINED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
DIVIDE3:            07D3 DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
SQUAREROOT:         07D9 DEFINED AT LINE 1280 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
SQUAREROOT1:        07DE DEFINED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
SQUAREROOT4:        07F9 DEFINED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1298 IN Siena.asm
SQUAREROOT5:        0800 DEFINED AT LINE 1309 IN Siena.asm
                    > USED AT LINE 1307 IN Siena.asm
PRTDEC:             0803 DEFINED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 236 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0812 DEFINED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
PRTDEC1:            0834 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1337 IN Siena.asm
PRTDEC2:            0836 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
PRTDEC3:            0846 DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
PRTDEC4:            0847 DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
PRTHEX:             084B DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
                    > USED AT LINE 316 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            0856 DEFINED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1365 IN Siena.asm
PRTHEX3:            085F DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
PRTSTR0:            086A DEFINED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
PRTSTR:             086E DEFINED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
NESTING:            0873 DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
NESTING1A:          087E DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
NESTING1:           0881 DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
NESTING2:           0890 DEFINED AT LINE 1422 IN Siena.asm
                    > USED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1419 IN Siena.asm
NESTING3:           0892 DEFINED AT LINE 1425 IN Siena.asm
                    > USED AT LINE 1421 IN Siena.asm
NESTING4:           089D DEFINED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1429 IN Siena.asm
PROMPT:             089F DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
CRLF:               08A8 DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
PRINTSTR:           08AF DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 190
DEFINE:             08B6 DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1528 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1540 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
                    > USED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
INIT:               08CE DEFINED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 40
INIT1:              08E8 DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1486 IN Siena.asm
START:              0A34 DEFINED AT LINE 1610 IN Siena.asm
INTERPRET:          0A4A DEFINED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
INTERPRET2:         0A54 DEFINED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
INTERPRET3:         0A5C DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
INTERPRET4:         0A62 DEFINED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
WAITCHAR:           0A67 DEFINED AT LINE 1641 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
MACRO:              0A76 DEFINED AT LINE 1651 IN Siena.asm
WAITCHAR1:          0A78 DEFINED AT LINE 1668 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
WAITCHAR3:          0A86 DEFINED AT LINE 1677 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
WAITCHAR4:          0A9C DEFINED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
NEXT:               0AA4 DEFINED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
                    > USED AT LINE 913 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
NEXT1:              0AB3 DEFINED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
ESCAPE:             0ABE DEFINED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
EXIT:               0AC2 DEFINED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
CALL:               0AD7 DEFINED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
CALL2:              0AEA DEFINED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 1764 IN Siena.asm
EXEC:               0AEC DEFINED AT LINE 1777 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 41
EXEC2:              0B04 DEFINED AT LINE 1791 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1025 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1476 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 356 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 1044 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 642 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1620 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 495 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
                    > USED AT LINE 860 IN Siena.asm
                    > USED AT LINE 915 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1482 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2246S43:  4077 DEFINED AT LINE 34
                    > USED AT LINE 10
