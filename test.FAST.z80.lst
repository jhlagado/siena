0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD B5 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   D1                     DB   lsb(nop_)   ; SP
0221   9E                     DB   lsb(not_)   ; !
0222   D1                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D1                     DB   lsb(nop_)   ; %
0226   64                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   12                     DB   lsb(paren_)   ; (
0229   15                     DB   lsb(parenEnd_)   ; )
022A   93                     DB   lsb(mul_)   ; *
022B   86                     DB   lsb(add_)   ; +
022C   D1                     DB   lsb(nop_)   ; ,
022D   96                     DB   lsb(sub_)   ; -
022E   18                     DB   lsb(dot_)   ; .
022F   B9                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   61                     DB   lsb(symbol_)   ; :
023B   0F                     DB   lsb(clear_)   ; ;
023C   AC                     DB   lsb(lt_)   ; <
023D   A3                     DB   lsb(eq_)   ; =
023E   A8                     DB   lsb(gt_)   ; >
023F   42                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   5E                     DB   lsb(ident_)   ; A
0242   5E                     DB   lsb(ident_)   ; B
0243   5E                     DB   lsb(ident_)   ; C
0244   5E                     DB   lsb(ident_)   ; D
0245   5E                     DB   lsb(ident_)   ; E
0246   5E                     DB   lsb(ident_)   ; F
0247   5E                     DB   lsb(ident_)   ; G
0248   5E                     DB   lsb(ident_)   ; h
0249   5E                     DB   lsb(ident_)   ; I
024A   5E                     DB   lsb(ident_)   ; J
024B   5E                     DB   lsb(ident_)   ; K
024C   5E                     DB   lsb(ident_)   ; L
024D   5E                     DB   lsb(ident_)   ; M
024E   5E                     DB   lsb(ident_)   ; N
024F   5E                     DB   lsb(ident_)   ; O
0250   5E                     DB   lsb(ident_)   ; p
0251   5E                     DB   lsb(ident_)   ; Q
0252   5E                     DB   lsb(ident_)   ; R
0253   5E                     DB   lsb(ident_)   ; S
0254   5E                     DB   lsb(ident_)   ; T
0255   5E                     DB   lsb(ident_)   ; U
0256   5E                     DB   lsb(ident_)   ; V
0257   5E                     DB   lsb(ident_)   ; W
0258   5E                     DB   lsb(ident_)   ; X
0259   5E                     DB   lsb(ident_)   ; Y
025A   5E                     DB   lsb(ident_)   ; Z
025B   58                     DB   lsb(array_)   ; [
025C   C8                     DB   lsb(comment_)   ; \
025D   5B                     DB   lsb(arrayEnd_)   ; ]
025E   78                     DB   lsb(xor_)   ; ^
025F   5E                     DB   lsb(ident_)   ; _
0260   55                     DB   lsb(char_)   ; `    	
0261   5E                     DB   lsb(ident_)   ; a
0262   5E                     DB   lsb(ident_)   ; b
0263   5E                     DB   lsb(ident_)   ; c
0264   5E                     DB   lsb(ident_)   ; d
0265   5E                     DB   lsb(ident_)   ; e
0266   5E                     DB   lsb(ident_)   ; f
0267   5E                     DB   lsb(ident_)   ; g
0268   5E                     DB   lsb(ident_)   ; h
0269   5E                     DB   lsb(ident_)   ; i
026A   5E                     DB   lsb(ident_)   ; j
026B   5E                     DB   lsb(ident_)   ; k
026C   5E                     DB   lsb(ident_)   ; l
026D   5E                     DB   lsb(ident_)   ; m
026E   5E                     DB   lsb(ident_)   ; n
026F   5E                     DB   lsb(ident_)   ; o
0270   5E                     DB   lsb(ident_)   ; p
0271   5E                     DB   lsb(ident_)   ; q
0272   5E                     DB   lsb(ident_)   ; r
0273   5E                     DB   lsb(ident_)   ; s
0274   5E                     DB   lsb(ident_)   ; t
0275   5E                     DB   lsb(ident_)   ; u
0276   5E                     DB   lsb(ident_)   ; v
0277   5E                     DB   lsb(ident_)   ; w
0278   5E                     DB   lsb(ident_)   ; x
0279   5E                     DB   lsb(ident_)   ; y
027A   5E                     DB   lsb(ident_)   ; z
027B   4F                     DB   lsb(block_)   ; {
027C   6F                     DB   lsb(or_)   ; |
027D   52                     DB   lsb(blockEnd_)   ; }
027E   81                     DB   lsb(inv_)   ; ~
027F   D1                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 12 04               JP   num   
0303                HEXNUM_:      
0303   C3 42 04               JP   hexnum   
0306                ARG_:        
0306   C3 F6 04               JP   arg   
0309                PROP_:       
0309   C3 11 05               JP   prop   
030C                STRING_:      
030C   C3 5F 04               JP   string   
030F                CLEAR_:      
030F   C3 D0 0B               JP   clear   
0312                PAREN_:      
0312   C3 8D 04               JP   paren   
0315                PARENEND_:      
0315   C3 9A 04               JP   parenEnd   
0318                DOT_:        
0318   E1                     POP   hl   
0319   03                     INC   bc   
031A   0A                     LD   a,(bc)   
031B   FE 68                  CP   "h"   
031D   20 05                  JR   nz,dot1   
031F   CD 32 09               CALL   prthex   
0322   18 17                  JR   dot4   
0324                DOT1:        
0324   FE 73                  CP   "s"   
0326   20 05                  JR   nz,dot2   
0328   CD 55 09               CALL   prtstr   
032B   18 0E                  JR   dot4   
032D                DOT2:        
032D   FE 63                  CP   "c"   
032F   20 06                  JR   nz,dot3   
0331   7D                     LD   a,l   
0332   CD 85 00               CALL   putchar   
0335   18 04                  JR   dot4   
0337                DOT3:        
0337   0B                     DEC   bc   
0338   CD EA 08               CALL   prtdec   
033B                DOT4:        
033B   3E 20                  LD   a," "   
033D   CD 85 00               CALL   putchar   
0340   DD E9                  JP   (ix)   
0342                             ; addr index -- addr2
0342                INDEX_:      
0342   E1                     POP   hl   ; hl = index
0343   D1                     POP   de   ; de = addr
0344   3A 9A 18               LD   a,(vDataWidth)   
0347   3D                     DEC   a   
0348   28 01                  JR   z,index1   
034A   29                     ADD   hl,hl   ; if data width = 2 then double
034B                INDEX1:      
034B   19                     ADD   hl,de   ; add addr
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                BLOCK_:      
034F   C3 A9 04               JP   block   
0352                BLOCKEND_:      
0352   C3 E2 04               JP   blockend   
0355                CHAR_:       
0355   C3 78 04               JP   char   
0358                ARRAY_:      
0358   C3 1E 06               JP   array   
035B                ARRAYEND_:      
035B   C3 30 06               JP   arrayEnd   
035E                IDENT_:      
035E   C3 A4 07               JP   ident   
0361                SYMBOL_:      
0361   C3 7D 07               JP   symbol   
0364                AND_:        
0364   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0365   E1                     POP   hl   
0366   7B                     LD   a,e   
0367   A5                     AND   l   
0368   6F                     LD   l,a   
0369   7A                     LD   a,d   
036A   A4                     AND   h   
036B                AND1:        
036B   67                     LD   h,a   
036C   E5                     PUSH   hl   
036D   DD E9                  JP   (ix)   
036F                OR_:         
036F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0370   E1                     POP   hl   
0371   7B                     LD   a,e   
0372   B5                     OR   l   
0373   6F                     LD   l,a   
0374   7A                     LD   a,d   
0375   B4                     OR   h   
0376   18 F3                  JR   and1   
0378                XOR_:        
0378   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0379                XOR1:        
0379   E1                     POP   hl   
037A   7B                     LD   a,e   
037B   AD                     XOR   l   
037C   6F                     LD   l,a   
037D   7A                     LD   a,d   
037E   AC                     XOR   h   
037F   18 EA                  JR   and1   
0381                INV_:        ; Bitwise INVert the top member of the stack
0381   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0384   18 F3                  JR   xor1   
0386                ADD_:        ; add the top 2 members of the stack
0386   D1                     POP   de   
0387   E1                     POP   hl   
0388   19                     ADD   hl,de   
0389   E5                     PUSH   hl   
038A   DD E9                  JP   (ix)   
038C                HDOT_:       ; print hexadecimal
038C   E1                     POP   hl   
038D   CD 32 09               CALL   prthex   
0390   C3 37 03               JP   dot3   
0393                MUL_:        
0393   C3 F6 03               JP   mul   
0396                SUB_:        ; Subtract the value 2nd on stack from top of stack
0396   D1                     POP   de   
0397   E1                     POP   hl   ; Entry point for INVert
0398                SUB2:        
0398   B7                     OR   a   ; Entry point for NEGate
0399   ED 52                  SBC   hl,de   
039B   E5                     PUSH   hl   
039C   DD E9                  JP   (ix)   
039E                NOT_:        ; logical invert, any non zero value
039E   21 00 00               LD   hl,0   ; is considered true
03A1   18 01                  JR   eq1   
03A3                EQ_:         
03A3   E1                     POP   hl   
03A4                EQ1:         
03A4   D1                     POP   de   
03A5   C3 FD 07               JP   equals   
03A8                GT_:         
03A8   D1                     POP   de   
03A9   E1                     POP   hl   
03AA   18 02                  JR   lt1   
03AC                LT_:         
03AC   E1                     POP   hl   
03AD   D1                     POP   de   
03AE                LT1:         
03AE   03                     INC   bc   
03AF   0A                     LD   a,(bc)   
03B0   FE 3D                  CP   "="   
03B2   CA 05 08               JP   z,lessthaneq   
03B5   0B                     DEC   bc   
03B6   C3 0A 08               JP   lessthan   
03B9                DIV_:        
03B9   D1                     POP   de   ; get first value
03BA   E1                     POP   hl   ; get 2nd value
03BB   C5                     PUSH   bc   ; preserve the IP
03BC   44 4D                  LD   bc,hl   
03BE   CD A7 08               CALL   divide   
03C1   22 98 18               LD   (vFrac),hl   
03C4   C1                     POP   bc   
03C5   D5                     PUSH   de   ; push result
03C6   DD E9                  JP   (ix)   
03C8                COMMENT_:      
03C8   03                     INC   bc   ; point to next char
03C9   0A                     LD   a,(bc)   
03CA   FE 20                  CP   " "   ; terminate on any char less than SP
03CC   30 FA                  JR   nc,comment_   
03CE   0B                     DEC   bc   
03CF   DD E9                  JP   (ix)   
03D1                NOP_:        
03D1   DD E9                  JP   (ix)   
03D3                             ;*******************************************************************
03D3                             ; word operators
03D3                             ;*******************************************************************
03D3                             ; shl
03D3                             ; value count -- value2          shift left count places
03D3                SHL:         
03D3   50 59                  LD   de,bc   ; save IP
03D5   C1                     POP   bc   ; bc = count
03D6   41                     LD   b,c   ; b = loop counter
03D7   E1                     POP   hl   
03D8   04                     INC   b   ; test for counter=0 case
03D9   18 01                  JR   shl2   
03DB                SHL1:        
03DB   29                     ADD   hl,hl   ; left shift hl
03DC                SHL2:        
03DC   10 FD                  DJNZ   shl1   
03DE   E5                     PUSH   hl   
03DF   42 4B                  LD   bc,de   ; restore IP
03E1   DD E9                  JP   (ix)   
03E3                             ; shr
03E3                             ; value count -- value2          shift left count places
03E3                SHR:         
03E3   50 59                  LD   de,bc   ; save IP
03E5   C1                     POP   bc   ; bc = count
03E6   41                     LD   b,c   ; b = loop counter
03E7   E1                     POP   hl   
03E8   04                     INC   b   ; test for counter=0 case
03E9   18 04                  JR   shr2   
03EB                SHR1:        
03EB   CB 3C                  SRL   h   ; right shift hl
03ED   CB 1D                  RR   l   
03EF                SHR2:        
03EF   10 FA                  DJNZ   shr1   
03F1   E5                     PUSH   hl   
03F2   42 4B                  LD   bc,de   ; restore IP
03F4   DD E9                  JP   (ix)   
03F6                MUL:         ;=19
03F6   D1                     POP   de   ; get first value
03F7   E1                     POP   hl   
03F8   C5                     PUSH   bc   ; Preserve the IP
03F9   44                     LD   b,h   ; bc = 2nd value
03FA   4D                     LD   c,l   
03FB   21 00 00               LD   hl,0   
03FE   3E 10                  LD   a,16   
0400                MUL2:        
0400   29                     ADD   hl,hl   
0401   CB 13                  RL   e   
0403   CB 12                  RL   d   
0405   30 04                  JR   nc,$+6   
0407   09                     ADD   hl,bc   
0408   30 01                  JR   nc,$+3   
040A   13                     INC   de   
040B   3D                     DEC   a   
040C   20 F2                  JR   nz,mul2   
040E   C1                     POP   bc   ; Restore the IP
040F   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0410   DD E9                  JP   (ix)   
0412                NUM:         
0412   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0415   0A                     LD   a,(bc)   ; Get numeral or -
0416   FE 2D                  CP   "-"   
0418   20 01                  JR   nz,num0   
041A   03                     INC   bc   ; move to next char, no flags affected
041B                NUM0:        
041B   08                     EX   af,af'   ; save zero flag = 0 for later
041C                NUM1:        
041C   0A                     LD   a,(bc)   ; read digit
041D   D6 30                  SUB   "0"   ; less than 0?
041F   38 13                  JR   c,num2   ; not a digit, exit loop
0421   FE 0A                  CP   10   ; greater that 9?
0423   30 0F                  JR   nc,num2   ; not a digit, exit loop
0425   03                     INC   bc   ; inc IP
0426   54 5D                  LD   de,hl   ; multiply hl * 10
0428   29                     ADD   hl,hl   
0429   29                     ADD   hl,hl   
042A   19                     ADD   hl,de   
042B   29                     ADD   hl,hl   
042C   85                     ADD   a,l   ; add digit in a to hl
042D   6F                     LD   l,a   
042E   3E 00                  LD   a,0   
0430   8C                     ADC   a,h   
0431   67                     LD   h,a   
0432   18 E8                  JR   num1   
0434                NUM2:        
0434   0B                     DEC   bc   
0435   08                     EX   af,af'   ; restore zero flag
0436   20 07                  JR   nz,num3   
0438   EB                     EX   de,hl   ; negate the value of hl
0439   21 00 00               LD   hl,0   
043C   B7                     OR   a   ; jump to sub2
043D   ED 52                  SBC   hl,de   
043F                NUM3:        
043F   E5                     PUSH   hl   ; Put the number on the stack
0440   DD E9                  JP   (ix)   ; and process the next character
0442                HEXNUM:      ; 
0442   21 00 00               LD   hl,0   ; Clear hl to accept the number
0445                HEXNUM1:      
0445   03                     INC   bc   
0446   0A                     LD   a,(bc)   ; Get the character which is a numeral
0447   CB 77                  BIT   6,a   ; is it uppercase alpha?
0449   28 02                  JR   z,hexnum2   ; no a decimal
044B   D6 07                  SUB   7   ; sub 7  to make $a - $F
044D                HEXNUM2:      
044D   D6 30                  SUB   $30   ; Form decimal digit
044F   DA 34 04               JP   c,num2   
0452   FE 10                  CP   $0F+1   
0454   D2 34 04               JP   nc,num2   
0457   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0458   29                     ADD   hl,hl   ; 4X
0459   29                     ADD   hl,hl   ; 8X
045A   29                     ADD   hl,hl   ; 16X
045B   85                     ADD   a,l   ; add into bottom of hl
045C   6F                     LD   l,a   ; 
045D   18 E6                  JR   hexnum1   
045F                             ; 
045F                STRING:      
045F   ED 5B A6 18            LD   de,(vHeapPtr)   ; DE = heap ptr
0463   D5                     PUSH   de   ; save start of string
0464   03                     INC   bc   ; point to next char
0465   18 03                  JR   string2   
0467                STRING1:      
0467   12                     LD   (de),a   
0468   13                     INC   de   ; increase count
0469   03                     INC   bc   ; point to next char
046A                STRING2:      
046A   0A                     LD   a,(bc)   
046B   FE 27                  CP   "'"   ; ' is the string terminator
046D   20 F8                  JR   nz,string1   
046F   AF                     XOR   a   ; write NUL to terminate string
0470   12                     LD   (de),a   
0471   13                     INC   de   
0472   ED 53 A6 18            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0476   DD E9                  JP   (ix)   
0478                CHAR:        
0478   21 00 00               LD   hl,0   ; if `` is empty
047B                CHAR1:       
047B   03                     INC   bc   ; point to next char
047C   0A                     LD   a,(bc)   
047D   FE 60                  CP   "`"   ; ` is the string terminator
047F   28 09                  JR   z,char3   
0481   FE 5C                  CP   $5c   ; \ is the escape
0483   20 02                  JR   nz,char2   
0485   03                     INC   bc   
0486   0A                     LD   a,(bc)   
0487                CHAR2:       
0487   6F                     LD   l,a   
0488   18 F1                  JR   char1   
048A                CHAR3:       
048A   E5                     PUSH   hl   
048B   DD E9                  JP   (ix)   
048D                PAREN:       
048D   DD 21 93 04            LD   ix,paren2   
0491   18 16                  JR   block   
0493                PAREN2:      
0493   DD 21 B2 0B            LD   ix,next   
0497   C3 F3 0B               JP   exec   
049A                PARENEND:      
049A   E1                     POP   hl   ; hl = last result
049B   D1                     POP   de   
049C   C1                     POP   bc   
049D   C1                     POP   bc   
049E   E5                     PUSH   hl   
049F   FD 62                  LD   iyh,d   
04A1   FD 6B                  LD   iyl,e   
04A3   DD 21 B2 0B            LD   ix,next   
04A7   DD E9                  JP   (ix)   
04A9                BLOCK:       
04A9   03                     INC   bc   
04AA   C5                     PUSH   bc   ; return first opcode of block
04AB   16 01                  LD   d,1   ; nesting: count first parenthesis
04AD                BLOCK1:      ; Skip to end of definition
04AD   0A                     LD   a,(bc)   ; Get the next character
04AE   03                     INC   bc   ; Point to next character
04AF   FE 21                  CP   " " + 1   ; ignore whitespace
04B1   38 FA                  JR   c,block1   
04B3   FE 29                  CP   ")"   
04B5   28 25                  JR   z,block4   
04B7   FE 7D                  CP   "}"   
04B9   28 21                  JR   z,block4   
04BB   FE 5D                  CP   "]"   
04BD   28 1D                  JR   z,block4   
04BF   FE 28                  CP   "("   
04C1   28 13                  JR   z,block3   
04C3   FE 7B                  CP   "{"   
04C5   28 0F                  JR   z,block3   
04C7   FE 5B                  CP   "["   
04C9   28 0B                  JR   z,block3   
04CB   FE 27                  CP   "'"   
04CD   28 07                  JR   z,block3   
04CF   FE 60                  CP   "`"   
04D1   20 DA                  JR   nz,block1   
04D3                BLOCK2:      
04D3   14                     INC   d   
04D4   18 D7                  JR   block1   
04D6                BLOCK3:      
04D6   3E 80                  LD   a,$80   
04D8   AA                     XOR   d   
04D9   47                     LD   b,a   
04DA   18 D1                  JR   block1   
04DC                BLOCK4:      
04DC   15                     DEC   d   
04DD   20 CE                  JR   nz,block1   ; get the next element
04DF   0B                     DEC   bc   ; balanced, exit
04E0   DD E9                  JP   (ix)   
04E2                BLOCKEND:      
04E2   E1                     POP   hl   ; hl = last result
04E3   FD 54                  LD   d,iyh   ; de = BP
04E5   FD 5D                  LD   e,iyl   
04E7   EB                     EX   de,hl   ; hl = BP, de = result
04E8   F9                     LD   sp,hl   ; sp = BP
04E9   E1                     POP   hl   ; hl = old BP
04EA   C1                     POP   bc   ; pop SCP (discard)
04EB   C1                     POP   bc   ; bc = IP
04EC   F9                     LD   sp,hl   ; sp = old BP
04ED   FD 21 00 00            LD   iy,0   ; iy = sp
04F1   FD 39                  ADD   iy,sp   
04F3   D5                     PUSH   de   ; push result
04F4   DD E9                  JP   (ix)   
04F6                ARG:         
04F6   03                     INC   bc   ; get next char
04F7   0A                     LD   a,(bc)   
04F8   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04FA   E6 07                  AND   $07   ; mask
04FC   87                     ADD   a,a   ; double
04FD   6F                     LD   l,a   ; hl = offset into args
04FE   26 00                  LD   h,0   
0500   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0503   FD 56 03               LD   d,(iy+3)   
0506   EB                     EX   de,hl   ; hl = SCP - offset
0507   B7                     OR   a   
0508   ED 52                  SBC   hl,de   
050A   2B                     DEC   hl   ; de = arg
050B   56                     LD   d,(hl)   
050C   2B                     DEC   hl   
050D   5E                     LD   e,(hl)   
050E   D5                     PUSH   de   ; push arg
050F   DD E9                  JP   (ix)   
0511                PROP:        
0511   03                     INC   bc   ; get next char
0512   0A                     LD   a,(bc)   
0513   D6 30                  SUB   "0"   ; treat as a digit, 1 based index
0515   E6 07                  AND   $07   ; mask
0517   87                     ADD   a,a   ; double
0518   D6 02                  SUB   2   
051A   6F                     LD   l,a   ; hl = offset into args
051B   26 00                  LD   h,0   
051D   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0520   FD 56 07               LD   d,(iy+7)   
0523   19                     ADD   hl,de   ; find address of prop in array
0524   5E                     LD   e,(hl)   
0525   23                     INC   hl   
0526   56                     LD   d,(hl)   
0527   D5                     PUSH   de   ; push prop
0528   DD E9                  JP   (ix)   
052A                             ; addr -- value
052A                GET:         
052A   E1                     POP   hl   
052B   16 00                  LD   d,0   
052D   5E                     LD   e,(hl)   
052E   3A 9A 18               LD   a,(vDataWidth)   
0531   3D                     DEC   a   
0532   28 02                  JR   z,get1   
0534   23                     INC   hl   
0535   56                     LD   d,(hl)   
0536                GET1:        
0536   D5                     PUSH   de   
0537   DD E9                  JP   (ix)   
0539                             ; addr value -- value0
0539                SET:         
0539   E1                     POP   hl   
053A   D1                     POP   de   
053B   7E                     LD   a,(hl)   
053C   73                     LD   (hl),e   
053D   5F                     LD   e,a   
053E   3A 9A 18               LD   a,(vDataWidth)   
0541   3D                     DEC   a   
0542   28 04                  JR   z,set1   
0544   23                     INC   hl   
0545   7E                     LD   a,(hl)   
0546   72                     LD   (hl),d   
0547   57                     LD   d,a   
0548                SET1:        
0548   D5                     PUSH   de   ; return old value
0549   DD E9                  JP   (ix)   
054B                             ; 
054B                             ; in:
054B                             ;  pop hl                      ; hl = string
054B                             ;  pop de                      ; de = char
054B                             ; in1:
054B                             ;  ld a,(hl)
054B                             ;  inc hl
054B                             ;  cp 0                        ; is end of string
054B                             ;  jr z,in2
054B                             ;  cp e
054B                             ;  jr nz,in1
054B                             ;  or a                        ; a is never 0, or a resets zero flag
054B                             ; in2:
054B                             ;  ld hl,0                     ; hl = result
054B                             ;  jr z,in3
054B                             ;  dec hl                      ; if nz de = $ffff
054B                             ; in3:
054B                             ;  push hl                     ; push result
054B                             ;  jp (ix)
054B                             ; newAdd2:
054B                             ;  push bc                     ; push IP
054B                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
054B                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
054B                             ;  push de                     ; push SCP
054B                             ;  push iy                     ; push base pointer
054B                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
054B                             ;  add iy,sp                   ;
054B                             ;  ld d,(iy-1)
054B                             ;  ld e,(iy-2)
054B                             ;  ld h,(iy-3)
054B                             ;  ld l,(iy-4)
054B                             ;  add hl,de                   ; hl = hl + de
054B                             ;  ex de,hl                    ; de = result
054B                             ;  pop hl                      ; hl = old BP
054B                             ;  pop bc                      ; pop SCP (discard)
054B                             ;  pop bc                      ; bc = IP
054B                             ;  ld sp,hl                    ; sp = old BP
054B                             ;  ld iy,0
054B                             ;  add iy,sp
054B                             ;  push de                     ; push result
054B                             ;  jp (ix)
054B                             ; ifte
054B                             ; condition then -- value
054B                IF:          
054B   11 00 00               LD   de,0   ; NUL pointer for else
054E   18 01                  JR   ifte1   
0550                             ; ifte
0550                             ; condition then else -- value
0550                IFTE:        
0550   D1                     POP   de   ; de = else
0551                IFTE1:       
0551   E1                     POP   hl   ; hl = then
0552   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0553   23                     INC   hl   ; check for true
0554   7C                     LD   a,h   
0555   B5                     OR   l   
0556   E1                     POP   hl   ; hl = then
0557   28 01                  JR   z,ifte2   
0559   EB                     EX   de,hl   ; condition = false, hl = else
055A                IFTE2:       
055A   7C                     LD   a,h   ; check if hl is NUL
055B   B5                     OR   l   
055C   28 13                  JR   z,ifte3   
055E   C5                     PUSH   bc   ; push IP
055F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0562   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0565   D5                     PUSH   de   ; push SCP
0566   FD E5                  PUSH   iy   ; push BP
0568   FD 21 00 00            LD   iy,0   ; iy = sp
056C   FD 39                  ADD   iy,sp   
056E   44 4D                  LD   bc,hl   ; IP = then
0570   0B                     DEC   bc   
0571                IFTE3:       
0571   DD E9                  JP   (ix)   
0573                             ; switch
0573                             ; index array -- value
0573                SWITCH:      
0573   D1                     POP   de   ; de = array
0574   E1                     POP   hl   ; hl = index
0575   29                     ADD   hl,hl   ; indec *= 2
0576   19                     ADD   hl,de   ; add array[0]
0577   4E                     LD   c,(hl)   ; bc = case
0578   23                     INC   hl   
0579   46                     LD   b,(hl)   
057A   0B                     DEC   bc   
057B   DD E9                  JP   (ix)   
057D                             ; c b --
057D                             ; loops until c = 0
057D                LOOP:        
057D   D1                     POP   de   ; de = block                    c
057E   E1                     POP   hl   ; hl = condition
057F   D5                     PUSH   de   
0580   C5                     PUSH   bc   ; push IP
0581   42 4B                  LD   bc,de   ; bc = block
0583   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0586   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0589   D5                     PUSH   de   ; push SCP
058A   FD E5                  PUSH   iy   ; push BP
058C   FD 21 00 00            LD   iy,0   ; iy = sp
0590   FD 39                  ADD   iy,sp   
0592                LOOP1:       
0592   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0593   B4                     OR   h   
0594   28 21                  JR   z,loop3   
0596   11 AC 05               LD   de,loop2-1   ; IP return address
0599   D5                     PUSH   de   
059A   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
059D   FD 56 03               LD   d,(iy+3)   
05A0   D5                     PUSH   de   ; 
05A1   FD E5                  PUSH   iy   ; push BP
05A3   FD 21 00 00            LD   iy,0   ; iy = sp
05A7   FD 39                  ADD   iy,sp   
05A9   E5                     PUSH   hl   ; push condition
05AA   0B                     DEC   bc   
05AB   DD E9                  JP   (ix)   
05AD                LOOP2:       
05AD   1B                     DB   ESC   ; escape from interpreter
05AE   FD 4E 06               LD   c,(iy+6)   ; bc = block
05B1   FD 46 07               LD   b,(iy+7)   
05B4   E1                     POP   hl   ; hl = condition
05B5   18 DB                  JR   loop1   
05B7                LOOP3:       
05B7   FD 54                  LD   d,iyh   ; de = BP
05B9   FD 5D                  LD   e,iyl   
05BB   EB                     EX   de,hl   ; hl = BP, de = result
05BC   F9                     LD   sp,hl   ; sp = BP
05BD   E1                     POP   hl   ; hl = old BP
05BE   C1                     POP   bc   ; pop SCP (discard)
05BF   C1                     POP   bc   ; bc = IP
05C0   F9                     LD   sp,hl   ; sp = old BP
05C1   FD 21 00 00            LD   iy,0   ; iy = sp
05C5   FD 39                  ADD   iy,sp   
05C7   DD 21 B2 0B            LD   ix,next   ; needed?
05CB   DD E9                  JP   (ix)   
05CD                CASE:        
05CD   E1                     POP   hl   ; get selector from stack
05CE   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05CF   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05D2   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05D5   D5                     PUSH   de   ; push SCP
05D6   FD E5                  PUSH   iy   ; push BP
05D8   FD 21 00 00            LD   iy,0   ; BP = SP
05DC   FD 39                  ADD   iy,sp   
05DE   E5                     PUSH   hl   ; push selector as first arg of new frame
05DF   DD E9                  JP   (ix)   
05E1                SELECT:      
05E1   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05E4   FD 6E FE               LD   l,(iy-2)   
05E7   23                     INC   hl   ; hl -= 1 index from second arg
05E8   29                     ADD   hl,hl   ; hl *= 2 word offset
05E9   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05EB   FD 5D                  LD   e,iyl   
05ED   EB                     EX   de,hl   
05EE   B7                     OR   a   ; hl = BP - offset
05EF   ED 52                  SBC   hl,de   
05F1   54 5D                  LD   de,hl   ; save arg ptr
05F3   2B                     DEC   hl   ; hl += 2
05F4   2B                     DEC   hl   
05F5   B7                     OR   a   ; arg ptr - stack pointer
05F6   ED 72                  SBC   hl,sp   
05F8   30 03                  JR   nc,case0   
05FA   D1                     POP   de   ; pop last arg
05FB   18 05                  JR   case1   
05FD                CASE0:       
05FD   EB                     EX   de,hl   
05FE   2B                     DEC   hl   ; de = arg
05FF   56                     LD   d,(hl)   
0600   2B                     DEC   hl   
0601   5E                     LD   e,(hl)   
0602                CASE1:       
0602   7A                     LD   a,d   ; is arg == NUL ? then skip
0603   B3                     OR   e   
0604   28 09                  JR   z,case2   
0606   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0609   FD 70 05               LD   (iy+5),b   
060C   42 4B                  LD   bc,de   ; IP = arg
060E   0B                     DEC   bc   
060F                CASE2:       
060F   DD E9                  JP   (ix)   
0611                WORDS:       
0611   21 02 00               LD   hl,2   
0614   18 03                  JR   bytes1   
0616                BYTES:       
0616   21 01 00               LD   hl,1   
0619                BYTES1:      
0619   22 9A 18               LD   (vDataWidth),hl   
061C   DD E9                  JP   (ix)   
061E                ARRAY:       
061E   C5                     PUSH   bc   ; create stack frame, push IP
061F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0622   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0625   D5                     PUSH   de   ; push SCP
0626   FD E5                  PUSH   iy   ; push BP
0628   FD 21 00 00            LD   iy,0   ; BP = SP
062C   FD 39                  ADD   iy,sp   
062E   DD E9                  JP   (ix)   
0630                ARRAYEND:      
0630   FD 54                  LD   d,iyh   ; de = BP
0632   FD 5D                  LD   e,iyl   
0634   DD 62                  LD   ixh,d   ; ix = BP
0636   DD 6B                  LD   ixl,e   
0638   62 6B                  LD   hl,de   ; hl = de
063A   B7                     OR   a   
063B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
063D   CB 3C                  SRL   h   
063F   CB 1D                  RR   l   
0641   EB                     EX   de,hl   ; de = count
0642   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0645   73                     LD   (hl),e   
0646   23                     INC   hl   
0647   72                     LD   (hl),d   
0648   23                     INC   hl   ; hl = array[0], de = count
0649   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
064C   FE 01                  CP   1   
064E   20 10                  JR   nz,arrayEnd2   
0650                ARRAYEND1:      ; byte
0650   DD 7E FE               LD   a,(ix-2)   
0653   77                     LD   (hl),a   
0654   23                     INC   hl   
0655   DD 2B                  DEC   ix   
0657   DD 2B                  DEC   ix   
0659   1B                     DEC   de   
065A   7B                     LD   a,e   
065B   B2                     OR   d   
065C   20 F2                  JR   nz,arrayEnd1   
065E   18 13                  JR   arrayEnd3   
0660                ARRAYEND2:      ; word
0660   DD 7E FE               LD   a,(ix-2)   
0663   77                     LD   (hl),a   
0664   23                     INC   hl   
0665   DD 7E FF               LD   a,(ix-1)   
0668   77                     LD   (hl),a   
0669   23                     INC   hl   
066A   DD 2B                  DEC   ix   
066C   DD 2B                  DEC   ix   
066E   1B                     DEC   de   
066F   7B                     LD   a,e   
0670   B2                     OR   d   
0671   20 ED                  JR   nz,arrayEnd2   
0673                ARRAYEND3:      
0673   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
0675   FD 5D                  LD   e,iyl   
0677   EB                     EX   de,hl   ; hl = BP, de = end of array
0678   F9                     LD   sp,hl   ; sp = BP
0679   E1                     POP   hl   ; hl = old BP, de = end of array
067A   DD E1                  POP   ix   ; pop SCP (discard)
067C   DD E1                  POP   ix   ; pop IP (discard)
067E   EB                     EX   de,hl   
067F   FD 62                  LD   iyh,d   
0681   FD 6B                  LD   iyl,e   
0683   EB                     EX   de,hl   
0684                             ; ld sp,hl                    ; sp = old BP
0684                             ; ld iy,0                     ; iy = sp
0684                             ; add iy,sp
0684   DD 21 B2 0B            LD   ix,next   
0688   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
068B   23                     INC   hl   
068C   23                     INC   hl   
068D   E5                     PUSH   hl   ; return array[0]
068E   EB                     EX   de,hl   ; hl = end of array, de = array[0]
068F   B7                     OR   a   
0690   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0692   EB                     EX   de,hl   
0693   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
0696   73                     LD   (hl),e   ; array[-2] = size
0697   23                     INC   hl   
0698   72                     LD   (hl),d   
0699   23                     INC   hl   
069A   19                     ADD   hl,de   
069B   22 A6 18               LD   (vHeapPtr),hl   
069E   DD E9                  JP   (ix)   
06A0                             ; str -- num
06A0                HASH:        
06A0   E1                     POP   hl   
06A1   C5                     PUSH   bc   
06A2   44 4D                  LD   bc,hl   
06A4   CD 44 08               CALL   hashStr   
06A7   C1                     POP   bc   
06A8   E5                     PUSH   hl   
06A9   DD E9                  JP   (ix)   
06AB                             ; symbol addr --
06AB                DEF:         
06AB   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06AD   E3                     EX   (sp),hl   
06AE   EB                     EX   de,hl   
06AF   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap de = addr
06B2   36 CD                  LD   (hl),$cd   ; compile "call exec"
06B4   23                     INC   hl   
06B5   36 0D                  LD   (hl),lsb(call)   
06B7   23                     INC   hl   
06B8   36 0C                  LD   (hl),msb(call)   
06BA   23                     INC   hl   
06BB   06 01                  LD   b,1   ; b = nesting
06BD                DEF1:        
06BD   1A                     LD   a,(de)   
06BE   13                     INC   de   
06BF   77                     LD   (hl),a   
06C0   23                     INC   hl   
06C1   FE 29                  CP   ")"   
06C3   28 25                  JR   z,def4   
06C5   FE 7D                  CP   "}"   
06C7   28 21                  JR   z,def4   
06C9   FE 5D                  CP   "]"   
06CB   28 1D                  JR   z,def4   
06CD   FE 28                  CP   "("   
06CF   28 13                  JR   z,def3   
06D1   FE 7B                  CP   "{"   
06D3   28 0F                  JR   z,def3   
06D5   FE 5B                  CP   "["   
06D7   28 0B                  JR   z,def3   
06D9   FE 27                  CP   "'"   
06DB   28 07                  JR   z,def3   
06DD   FE 60                  CP   "`"   
06DF   20 DC                  JR   nz,def1   
06E1                DEF2:        
06E1   04                     INC   b   
06E2   18 D9                  JR   def1   
06E4                DEF3:        
06E4   3E 80                  LD   a,$80   
06E6   A8                     XOR   b   
06E7   47                     LD   b,a   
06E8   18 D3                  JR   def1   
06EA                DEF4:        
06EA   05                     DEC   b   
06EB   20 D0                  JR   nz,def1   ; get the next element
06ED   AF                     XOR   a   ; end with NUL ??? needed?
06EE   77                     LD   (hl),a   
06EF   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06F3   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
06F6   E1                     POP   hl   ; de = addr, hl = IP
06F7   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06F8   44 4D                  LD   bc,hl   ; bc = symbol
06FA   CD 5D 08               CALL   defineEntry   
06FD   38 00                  JR   c,def5   
06FF                             ; call error
06FF                             ; .cstr "Def Collision"
06FF                DEF5:        
06FF   C1                     POP   bc   
0700   DD E9                  JP   (ix)   
0702                             ; symbol array block --
0702                CLOSURE:      
0702   E1                     POP   hl   ; hl = block
0703   D1                     POP   de   ; de = array
0704   C5                     PUSH   bc   ; (sp) = block, (sp+2) = IP, (sp+2) = symbol
0705   E5                     PUSH   hl   
0706   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr de = array
0709   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
070B   23                     INC   hl   
070C   36 22                  LD   (hl),lsb(doclosure)   
070E   23                     INC   hl   
070F   36 0C                  LD   (hl),msb(doclosure)   
0711   23                     INC   hl   
0712   73                     LD   (hl),e   ; compile array
0713   23                     INC   hl   
0714   72                     LD   (hl),d   
0715   23                     INC   hl   
0716   D1                     POP   de   ; de =  block, (sp) = IP, (sp+2) = symbol
0717   06 01                  LD   b,1   ; b = nesting
0719   18 A2                  JR   def1   
071B                             ; symbol value --
071B                LET:         
071B   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
071D   E3                     EX   (sp),hl   
071E   EB                     EX   de,hl   
071F   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0722   36 CD                  LD   (hl),$cd   ; compile "call dovar"
0724   23                     INC   hl   
0725   36 2B                  LD   (hl),lsb(dovar)   
0727   23                     INC   hl   
0728   36 0C                  LD   (hl),msb(dovar)   
072A   23                     INC   hl   
072B   73                     LD   (hl),e   
072C   23                     INC   hl   
072D   72                     LD   (hl),d   
072E   2B                     DEC   hl   
072F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0733   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0736   E1                     POP   hl   ; de = addr, hl = IP
0737   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0738   44 4D                  LD   bc,hl   ; bc = symbol
073A   CD 5D 08               CALL   defineEntry   
073D   38 00                  JR   c,let2   
073F                             ; call error
073F                             ; .cstr "Let Collision"
073F                LET2:        
073F   C1                     POP   bc   
0740   DD E9                  JP   (ix)   
0742                             ; symbol value --
0742                CONST:       
0742   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0744   E3                     EX   (sp),hl   
0745   EB                     EX   de,hl   
0746   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0749   36 CD                  LD   (hl),$cd   ; compile "call doconst"
074B   23                     INC   hl   
074C   36 2D                  LD   (hl),lsb(doconst)   
074E   23                     INC   hl   
074F   36 0C                  LD   (hl),msb(doconst)   
0751   23                     INC   hl   
0752   73                     LD   (hl),e   
0753   23                     INC   hl   
0754   72                     LD   (hl),d   
0755   23                     INC   hl   
0756   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definiition
075A   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
075D   E1                     POP   hl   ; de = addr, hl = IP
075E   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
075F   44 4D                  LD   bc,hl   ; bc = symbol
0761   CD 5D 08               CALL   defineEntry   
0764   38 00                  JR   c,const2   
0766                             ; call error
0766                             ; .cstr "Const Collision"
0766                CONST2:      
0766   C1                     POP   bc   
0767   DD E9                  JP   (ix)   
0769                             ; str -- addr
0769                ADDR:        
0769   E1                     POP   hl   ; hl = hash
076A   C5                     PUSH   bc   
076B   44 4D                  LD   bc,hl   
076D   CD 83 08               CALL   lookupEntry   
0770   38 03                  JR   c,addr1   
0772   21 00 00               LD   hl,0   
0775                             ; call printStr		
0775                             ; .cstr "Undefined"
0775                             ; jp interpret
0775                ADDR1:       
0775   C1                     POP   bc   
0776   11 03 00               LD   de,3   
0779   19                     ADD   hl,de   
077A   E5                     PUSH   hl   
077B   DD E9                  JP   (ix)   
077D                SYMBOL:      
077D   03                     INC   bc   
077E   11 00 1A               LD   de,PAD   
0781   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0783   18 02                  JR   symbol1   
0785                SYMBOL0:      ; copy to PAD area
0785   03                     INC   bc   ; characters that are part of the identifier
0786   13                     INC   de   
0787                SYMBOL1:      ; 0-9 A-Z a-z _
0787   0A                     LD   a,(bc)   
0788   12                     LD   (de),a   
0789   B7                     OR   a   
078A   28 0A                  JR   z,symbol2   
078C   6F                     LD   l,a   
078D   7E                     LD   a,(hl)   
078E   FE 5E                  CP   lsb(ident_)   
0790   28 F3                  JR   z,symbol0   
0792   FE 00                  CP   lsb(num_)   
0794   28 EF                  JR   z,symbol0   
0796                SYMBOL2:      
0796   0B                     DEC   bc   
0797   AF                     XOR   a   
0798   12                     LD   (de),a   ; terminate string with NUL
0799   C5                     PUSH   bc   
079A   01 00 1A               LD   bc,PAD   
079D   CD 44 08               CALL   hashStr   ; hl = hash
07A0   C1                     POP   bc   
07A1   E5                     PUSH   hl   
07A2   DD E9                  JP   (ix)   
07A4                IDENT:       
07A4   11 00 1A               LD   de,PAD   
07A7   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
07A9   18 02                  JR   ident1   
07AB                IDENT0:      ; copy to PAD area
07AB   03                     INC   bc   ; characters that are part of the identifier
07AC   13                     INC   de   
07AD                IDENT1:      ; 0-9 A-Z a-z _
07AD   0A                     LD   a,(bc)   
07AE   12                     LD   (de),a   
07AF   B7                     OR   a   
07B0   28 0A                  JR   z,ident2   
07B2   6F                     LD   l,a   
07B3   7E                     LD   a,(hl)   
07B4   FE 5E                  CP   lsb(ident_)   
07B6   28 F3                  JR   z,ident0   
07B8   FE 00                  CP   lsb(num_)   
07BA   28 EF                  JR   z,ident0   
07BC                IDENT2:      
07BC   0B                     DEC   bc   
07BD   AF                     XOR   a   
07BE   12                     LD   (de),a   ; terminate string with NUL
07BF   C5                     PUSH   bc   
07C0   01 00 1A               LD   bc,PAD   
07C3   CD 44 08               CALL   hashStr   ; hl = hash
07C6   44 4D                  LD   bc,hl   
07C8   CD 83 08               CALL   lookupEntry   
07CB   C1                     POP   bc   
07CC   38 02                  JR   c,ident3   ; todo: no entry? print an error message
07CE   DD E9                  JP   (ix)   
07D0                IDENT3:      
07D0   E9                     JP   (hl)   
07D1                FRAC:        
07D1   2A 98 18               LD   hl,(vFrac)   
07D4   E5                     PUSH   hl   
07D5   DD E9                  JP   (ix)   
07D7                SQRT1:       
07D7   E1                     POP   hl   
07D8   C5                     PUSH   bc   
07D9   CD C0 08               CALL   squareRoot   
07DC   ED 43 98 18            LD   (vFrac),bc   
07E0   C1                     POP   bc   
07E1   D5                     PUSH   de   
07E2   DD E9                  JP   (ix)   
07E4                ABS1:        
07E4   E1                     POP   hl   
07E5   CB 7C                  BIT   7,h   
07E7   C8                     RET   z   
07E8   AF                     XOR   a   
07E9   95                     SUB   l   
07EA   6F                     LD   l,a   
07EB   9F                     SBC   a,a   
07EC   94                     SUB   h   
07ED   67                     LD   h,a   
07EE   E5                     PUSH   hl   
07EF   DD E9                  JP   (ix)   
07F1                MOD:         
07F1   D1                     POP   de   ; get first value
07F2   E1                     POP   hl   ; get 2nd value
07F3   C5                     PUSH   bc   ; preserve the IP
07F4   44 4D                  LD   bc,hl   
07F6   CD A7 08               CALL   divide   
07F9   C1                     POP   bc   
07FA   E5                     PUSH   hl   ; push remainder
07FB   DD E9                  JP   (ix)   
07FD                             ; hl = value1, de = value2
07FD                             ; hl = result
07FD                EQUALS:      
07FD   B7                     OR   a   ; reset the carry flag
07FE   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0800   28 10                  JR   z,true1   
0802   C3 18 08               JP   false1   
0805                             ; hl = value1 de = value2
0805                             ; hl = result
0805                LESSTHANEQ:      
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   18 05                  JR   lessthan1   
080A                             ; hl = value1 de = value2
080A                             ; hl = result
080A                LESSTHAN:      
080A   B7                     OR   a   
080B   ED 52                  SBC   hl,de   
080D   28 09                  JR   z,false1   
080F                LESSTHAN1:      
080F   FA 18 08               JP   m,false1   
0812                TRUE1:       
0812   21 FF FF               LD   hl,TRUE   
0815   E5                     PUSH   hl   
0816   DD E9                  JP   (ix)   
0818                FALSE1:      
0818   21 00 00               LD   hl,FALSE   
081B   E5                     PUSH   hl   
081C   DD E9                  JP   (ix)   
081E                             ; Z80 port input
081E                             ; port -- value
081E                INPUT:       
081E   E1                     POP   hl   
081F   59                     LD   e,c   ; save IP
0820   4D                     LD   c,l   
0821   ED 68                  IN   l,(c)   
0823   26 00                  LD   h,0   
0825   4B                     LD   c,e   ; restore IP
0826   E5                     PUSH   hl   
0827   DD E9                  JP   (ix)   
0829                             ; Z80 port output
0829                             ; value port --
0829                OUTPUT:      
0829   E1                     POP   hl   
082A   59                     LD   e,c   ; save IP
082B   4D                     LD   c,l   
082C   E1                     POP   hl   
082D   ED 69                  OUT   (c),l   
082F   4B                     LD   c,e   ; restore IP
0830   DD E9                  JP   (ix)   
0832                KEY:         
0832   CD 81 00               CALL   getchar   
0835   26 00                  LD   h,0   
0837   6F                     LD   l,a   
0838   E5                     PUSH   hl   
0839   DD E9                  JP   (ix)   
083B                NEG:         
083B   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
083E   D1                     POP   de   
083F   C3 98 03               JP   sub2   ; use the SUBtract routine
0842                FILTER:      
0842                MAP:         
0842                SCAN:        
0842   DD E9                  JP   (ix)   
0844                             ; -------------------------------------------------------------------------------
0844                             ; hash C-string
0844                             ; BC = str
0844                             ; HL = hash
0844                HASHSTR:      
0844   21 00 00               LD   hl,0   
0847                HASHSTR1:      
0847   0A                     LD   a,(bc)   ; load next char
0848   03                     INC   bc   
0849   FE 00                  CP   0   ; NUL?
084B   C8                     RET   z   
084C                HASHSTR2:      
084C   16 00                  LD   d,0   
084E   5F                     LD   e,a   
084F   19                     ADD   hl,de   
0850   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0852   29                     ADD   hl,hl   ; shift left
0853   19                     ADD   hl,de   ; add
0854   29                     ADD   hl,hl   ; shift left
0855   29                     ADD   hl,hl   ; shift left
0856   29                     ADD   hl,hl   ; shift left
0857   29                     ADD   hl,hl   ; shift left
0858   29                     ADD   hl,hl   ; shift left
0859   29                     ADD   hl,hl   ; shift left
085A   19                     ADD   hl,de   ; add
085B   18 EA                  JR   hashStr1   
085D                             ; add entry to hash slots and hash pointers
085D                             ; bc = hash (b = hi, c = lo), de = addr
085D                             ; sets carry if successful
085D                DEFINEENTRY:      
085D   CB 21                  SLA   c   ; lo = lo * 2
085F   69                     LD   l,c   ; lo1 = lo
0860   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0862                DEFINEENTRY0:      
0862   7E                     LD   a,(hl)   ; a = (lo1)
0863   FE FF                  CP   UNUSED   ; is it unused?
0865   28 12                  JR   z,defineEntry3   ; yes, add entry
0867   79                     LD   a,c   ; a = lo
0868   BE                     CP   (hl)   ; compare (lo1) with lo
0869   20 06                  JR   nz,defineEntry1   ; no match loop around
086B   2C                     INC   l   
086C   78                     LD   a,b   ; a = hi
086D   BE                     CP   (hl)   ; compare (lo1+1) with hi
086E   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0870   2D                     DEC   l   ; restore l
0871                DEFINEENTRY1:      
0871   2C                     INC   l   ; try next entry
0872   2C                     INC   l   
0873   79                     LD   a,c   ; compare lo and lo1
0874   BD                     CP   l   ; if equal then there's no space left, reject
0875   20 EB                  JR   nz,defineEntry0   
0877                DEFINEENTRY2:      
0877   B7                     OR   a   ; clear carry flag, failure
0878   C9                     RET      
0879                DEFINEENTRY3:      ; new entry
0879   71                     LD   (hl),c   ; (lo1) = hash lo
087A   23                     INC   hl   
087B   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
087C   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
087E   72                     LD   (hl),d   
087F   2B                     DEC   hl   
0880   73                     LD   (hl),e   ; (slot + 2) = address
0881   37                     SCF      ; set carry flag, success
0882   C9                     RET      
0883                             ; looks up hash and returns address
0883                             ; bc = hash
0883                             ; returns addr in hl, sets carry if successful
0883                LOOKUPENTRY:      
0883   CB 21                  SLA   c   ; lo = lo * 2
0885   69                     LD   l,c   ; lo1 = lo
0886   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0888                LOOKUPENTRY0:      
0888   7E                     LD   a,(hl)   ; a = (hl), slot
0889   FE FF                  CP   UNUSED   ; is it unused?
088B   28 EA                  JR   z,defineEntry2   ; yes, does not exist
088D   79                     LD   a,c   ; a = lo
088E   BE                     CP   (hl)   ; compare (lo1) with lo
088F   20 06                  JR   nz,lookupEntry1   ; no match loop around
0891   2C                     INC   l   
0892   78                     LD   a,b   ; a = hi
0893   BE                     CP   (hl)   ; compare (lo1+1) with hi
0894   28 09                  JR   z,lookupEntry3   
0896   2D                     DEC   l   
0897                LOOKUPENTRY1:      
0897   2C                     INC   l   
0898   2C                     INC   l   
0899   79                     LD   a,c   
089A   BD                     CP   l   ; no space left, reject
089B   20 EB                  JR   nz,lookupEntry0   
089D                LOOKUPENTRY2:      
089D   B7                     OR   a   ; clear carry flag, failure
089E   C9                     RET      
089F                LOOKUPENTRY3:      
089F   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
08A1   56                     LD   d,(hl)   
08A2   2D                     DEC   l   ; restore l
08A3   5E                     LD   e,(hl)   ; (slot + 2) = address
08A4   EB                     EX   de,hl   
08A5   37                     SCF      
08A6   C9                     RET      
08A7                             ; division subroutine.
08A7                             ; bc: divisor, de: dividend, hl: remainder
08A7                DIVIDE:      
08A7   21 00 00               LD   hl,0   ; zero the remainder
08AA   3E 10                  LD   a,16   ; loop counter
08AC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08AC   CB 21                  SLA   c   
08AE   CB 10                  RL   b   
08B0   ED 6A                  ADC   hl,hl   
08B2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08B4   38 03                  JR   c,divide2   
08B6   0C                     INC   c   
08B7   18 01                  JR   divide3   
08B9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08B9   19                     ADD   hl,de   
08BA                DIVIDE3:      
08BA   3D                     DEC   a   
08BB   20 EF                  JR   nz,divide1   
08BD   50 59                  LD   de,bc   ; result from bc to de
08BF   C9                     RET      
08C0                             ; squareroot
08C0                             ; Input: HL = value
08C0                             ; Result: DE = square root BC = remainder
08C0                SQUAREROOT:      
08C0   01 00 08               LD   bc,0800h   
08C3   59                     LD   e,c   
08C4   AF                     XOR   a   
08C5                SQUAREROOT1:      
08C5   29                     ADD   hl,hl   
08C6   CB 11                  RL   c   
08C8   ED 6A                  ADC   hl,hl   
08CA   CB 11                  RL   c   
08CC   30 02                  JR   nc,$+4   
08CE   CB C5                  SET   0,l   
08D0   7B                     LD   a,e   
08D1   87                     ADD   a,a   
08D2   5F                     LD   e,a   
08D3   87                     ADD   a,a   
08D4   CB 45                  BIT   0,l   
08D6   20 03                  JR   nz,$+5   
08D8   91                     SUB   c   
08D9   30 05                  JR   nc,squareRoot4   
08DB   79                     LD   a,c   
08DC   93                     SUB   e   
08DD   1C                     INC   e   
08DE   93                     SUB   e   
08DF   4F                     LD   c,a   
08E0                SQUAREROOT4:      
08E0   10 E3                  DJNZ   squareRoot1   
08E2   CB 45                  BIT   0,l   
08E4   28 01                  JR   z,squareRoot5   
08E6   04                     INC   b   
08E7                SQUAREROOT5:      
08E7   16 00                  LD   d,0   
08E9   C9                     RET      
08EA                PRTDEC:      
08EA   CB 7C                  BIT   7,h   
08EC   28 0B                  JR   z,prtdec0   
08EE   3E 2D                  LD   a,"-"   
08F0   CD 85 00               CALL   putchar   
08F3   AF                     XOR   a   
08F4   95                     SUB   l   
08F5   6F                     LD   l,a   
08F6   9F                     SBC   a,a   
08F7   94                     SUB   h   
08F8   67                     LD   h,a   
08F9                PRTDEC0:      
08F9   C5                     PUSH   bc   
08FA   0E 00                  LD   c,0   ; leading zeros flag = false
08FC   11 F0 D8               LD   de,-10000   
08FF   CD 1B 09               CALL   prtdec1   
0902   11 18 FC               LD   de,-1000   
0905   CD 1B 09               CALL   prtdec1   
0908   11 9C FF               LD   de,-100   
090B   CD 1B 09               CALL   prtdec1   
090E   1E F6                  LD   e,-10   
0910   CD 1B 09               CALL   prtdec1   
0913   0C                     INC   c   ; flag = true for at least digit
0914   1E FF                  LD   e,-1   
0916   CD 1B 09               CALL   prtdec1   
0919   C1                     POP   bc   
091A   C9                     RET      
091B                PRTDEC1:      
091B   06 2F                  LD   b,"0"-1   
091D                PRTDEC2:      
091D   04                     INC   b   
091E   19                     ADD   hl,de   
091F   38 FC                  JR   c,prtdec2   
0921   ED 52                  SBC   hl,de   
0923   3E 30                  LD   a,"0"   
0925   B8                     CP   b   
0926   20 05                  JR   nz,prtdec3   
0928   AF                     XOR   a   
0929   B1                     OR   c   
092A   C8                     RET   z   
092B   18 01                  JR   prtdec4   
092D                PRTDEC3:      
092D   0C                     INC   c   
092E                PRTDEC4:      
092E   78                     LD   a,b   
092F   C3 85 00               JP   putchar   
0932                PRTHEX:      ; display hl as a 16-bit number in hex.
0932   C5                     PUSH   bc   ; preserve the IP
0933   7C                     LD   a,h   
0934   CD 3D 09               CALL   prthex2   
0937   7D                     LD   a,l   
0938   CD 3D 09               CALL   prthex2   
093B   C1                     POP   bc   
093C   C9                     RET      
093D                PRTHEX2:      
093D   4F                     LD   c,a   
093E   1F                     RRA      
093F   1F                     RRA      
0940   1F                     RRA      
0941   1F                     RRA      
0942   CD 46 09               CALL   prthex3   
0945   79                     LD   a,c   
0946                PRTHEX3:      
0946   E6 0F                  AND   0x0F   
0948   C6 90                  ADD   a,0x90   
094A   27                     DAA      
094B   CE 40                  ADC   a,0x40   
094D   27                     DAA      
094E   C3 85 00               JP   putchar   
0951                PRTSTR0:      
0951   CD 85 00               CALL   putchar   
0954   23                     INC   hl   
0955                PRTSTR:      
0955   7E                     LD   a,(hl)   
0956   B7                     OR   a   
0957   20 F8                  JR   nz,prtstr0   
0959   C9                     RET      
095A                             ; **************************************************************************
095A                             ; calculate nesting value
095A                             ; a is char to be tested,
095A                             ; e is the nesting value (initially 0)
095A                             ; e is increased by ( and [
095A                             ; e is decreased by ) and ]
095A                             ; e has its bit 7 toggled by `
095A                             ; limited to 127 levels
095A                             ; **************************************************************************
095A                NESTING:      
095A   FE 22                  CP   $22   ; quote char
095C   20 0A                  JR   nz,nesting1   
095E   CB 7B                  BIT   7,e   
0960   28 03                  JR   z,nesting1a   
0962   CB BB                  RES   7,e   
0964   C9                     RET      
0965                NESTING1A:      
0965   CB FB                  SET   7,e   
0967   C9                     RET      
0968                NESTING1:      
0968   CB 7B                  BIT   7,e   
096A   C0                     RET   nz   
096B   FE 7B                  CP   "{"   
096D   28 08                  JR   z,nesting2   
096F   FE 5B                  CP   "["   
0971   28 04                  JR   z,nesting2   
0973   FE 28                  CP   "("   
0975   20 02                  JR   nz,nesting3   
0977                NESTING2:      
0977   1C                     INC   e   
0978   C9                     RET      
0979                NESTING3:      
0979   FE 7D                  CP   "}"   
097B   28 07                  JR   z,nesting4   
097D   FE 5D                  CP   "]"   
097F   28 03                  JR   z,nesting4   
0981   FE 29                  CP   ")"   
0983   C0                     RET   nz   
0984                NESTING4:      
0984   1D                     DEC   e   
0985   C9                     RET      
0986                PROMPT:      
0986   CD 96 09               CALL   printStr   
0989   0D 0A 3E 20 00         .CSTR   "\r\n> "   
098E   C9                     RET      
098F                CRLF:        
098F   CD 96 09               CALL   printStr   
0992   0D 0A 00               .CSTR   "\r\n"   
0995   C9                     RET      
0996                PRINTSTR:      
0996   E3                     EX   (sp),hl   ; swap			
0997   CD 55 09               CALL   prtstr   
099A   23                     INC   hl   ; inc past NUL
099B   E3                     EX   (sp),hl   ; put it back	
099C   C9                     RET      
099D                DEFINE:      
099D   E1                     POP   hl   
099E   7E                     LD   a,(hl)   
099F   23                     INC   hl   
09A0   44 4D                  LD   bc,hl   
09A2   5F                     LD   e,a   
09A3   16 00                  LD   d,0   
09A5   19                     ADD   hl,de   
09A6   5E                     LD   e,(hl)   
09A7   23                     INC   hl   
09A8   56                     LD   d,(hl)   
09A9   23                     INC   hl   
09AA   E5                     PUSH   hl   ; bc = str
09AB   D5                     PUSH   de   
09AC   CD 44 08               CALL   hashStr   ; hl = hash
09AF   D1                     POP   de   
09B0   44 4D                  LD   bc,hl   
09B2   C3 5D 08               JP   defineEntry   
09B5                INIT:        
09B5   DD 21 B2 0B            LD   ix,next   
09B9   FD 21 80 18            LD   iy,STACK   
09BD   21 80 01               LD   hl,isysVars   
09C0   11 98 18               LD   de,sysVars   
09C3   01 10 00               LD   bc,8 * 2   
09C6   ED B0                  LDIR      
09C8   3E FF                  LD   a,UNUSED   
09CA   06 00                  LD   b,0   
09CC   21 00 1B               LD   hl,hashSlots   
09CF                INIT1:       
09CF   77                     LD   (hl),a   
09D0   23                     INC   hl   
09D1   10 FC                  DJNZ   init1   
09D3   CD 9D 09               CALL   define   
09D6   04 61 62 73 00         .PSTR   "abs",0   
09DB   E4 07                  DW   abs1   
09DD   CD 9D 09               CALL   define   
09E0   05 61 64 64 72 00      .PSTR   "addr",0   
09E6   69 07                  DW   addr   
09E8   CD 9D 09               CALL   define   
09EB   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09F2   16 06                  DW   bytes   
09F4   CD 9D 09               CALL   define   
09F7   05 63 61 6C 6C 00      .PSTR   "call",0   
09FD   0D 0C                  DW   call   
09FF   CD 9D 09               CALL   define   
0A02   05 63 61 73 65 00      .PSTR   "case",0   
0A08   CD 05                  DW   case   
0A0A   CD 9D 09               CALL   define   
0A0D   06 63 6F 6E 73 74 00   .PSTR   "const",0   
0A14   42 07                  DW   const   
0A16   CD 9D 09               CALL   define   
0A19   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0A22   02 07                  DW   closure   
0A24   CD 9D 09               CALL   define   
0A27   04 64 65 66 00         .PSTR   "def",0   
0A2C   AB 06                  DW   def   
0A2E   CD 9D 09               CALL   define   
0A31   05 65 78 65 63 00      .PSTR   "exec",0   
0A37   F3 0B                  DW   exec   
0A39   CD 9D 09               CALL   define   
0A3C   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A43   00 00                  DW   false   
0A45   CD 9D 09               CALL   define   
0A48   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A50   42 08                  DW   filter   
0A52   CD 9D 09               CALL   define   
0A55   05 66 72 61 63 00      .PSTR   "frac",0   
0A5B   D1 07                  DW   frac   
0A5D   CD 9D 09               CALL   define   
0A60   04 67 65 74 00         .PSTR   "get",0   
0A65   2A 05                  DW   get   
0A67   CD 9D 09               CALL   define   
0A6A   05 68 61 73 68 00      .PSTR   "hash",0   
0A70   A0 06                  DW   hash   
0A72   CD 9D 09               CALL   define   
0A75   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A7C   1E 08                  DW   input   
0A7E   CD 9D 09               CALL   define   
0A81   03 69 66 00            .PSTR   "if",0   
0A85   4B 05                  DW   if   
0A87   CD 9D 09               CALL   define   
0A8A   05 69 66 74 65 00      .PSTR   "ifte",0   
0A90   50 05                  DW   ifte   
0A92   CD 9D 09               CALL   define   
0A95   04 6B 65 79 00         .PSTR   "key",0   
0A9A   32 08                  DW   key   
0A9C   CD 9D 09               CALL   define   
0A9F   04 6C 65 74 00         .PSTR   "let",0   
0AA4   1B 07                  DW   let   
0AA6   CD 9D 09               CALL   define   
0AA9   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0AAF   7D 05                  DW   loop   
0AB1   CD 9D 09               CALL   define   
0AB4   04 6D 61 70 00         .PSTR   "map",0   
0AB9   42 08                  DW   map   
0ABB   CD 9D 09               CALL   define   
0ABE   04 6D 6F 64 00         .PSTR   "mod",0   
0AC3   F1 07                  DW   mod   
0AC5   CD 9D 09               CALL   define   
0AC8   04 6E 65 67 00         .PSTR   "neg",0   
0ACD   3B 08                  DW   neg   
0ACF   CD 9D 09               CALL   define   
0AD2   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0ADA   29 08                  DW   output   
0ADC   CD 9D 09               CALL   define   
0ADF   05 73 63 61 6E 00      .PSTR   "scan",0   
0AE5   01 00                  DW   scan   
0AE7   CD 9D 09               CALL   define   
0AEA   07 73 65 6C 65 63 74 00 .PSTR   "select",0   
0AF2   E1 05                  DW   select   
0AF4   CD 9D 09               CALL   define   
0AF7   04 73 65 74 00         .PSTR   "set",0   
0AFC   39 05                  DW   set   
0AFE   CD 9D 09               CALL   define   
0B01   04 73 68 6C 00         .PSTR   "shl",0   
0B06   D3 03                  DW   shl   
0B08   CD 9D 09               CALL   define   
0B0B   04 73 68 72 00         .PSTR   "shr",0   
0B10   E3 03                  DW   shr   
0B12   CD 9D 09               CALL   define   
0B15   05 73 71 72 74 00      .PSTR   "sqrt",0   
0B1B   D7 07                  DW   sqrt1   
0B1D   CD 9D 09               CALL   define   
0B20   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0B28   73 05                  DW   switch   
0B2A   CD 9D 09               CALL   define   
0B2D   05 74 72 75 65 00      .PSTR   "true",0   
0B33   FF FF                  DW   true   
0B35   CD 9D 09               CALL   define   
0B38   06 77 6F 72 64 73 00   .PSTR   "words",0   
0B3F   11 06                  DW   words   
0B41   C9                     RET      
0B42                START:       
0B42   31 80 18               LD   sp,STACK   ; start of Siena
0B45   CD B5 09               CALL   init   ; setups
0B48   CD 96 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B4B   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0B58                INTERPRET:      
0B58   CD 86 09               CALL   prompt   
0B5B   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B5E   ED 43 9C 18            LD   (vTIBPtr),bc   
0B62                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B62   1E 00                  LD   e,0   ; initilize nesting value
0B64   C5                     PUSH   bc   ; save offset into TIB,
0B65                             ; bc is also the count of chars in TIB
0B65   21 00 19               LD   hl,TIB   ; hl is start of TIB
0B68   18 06                  JR   interpret4   
0B6A                INTERPRET3:      
0B6A   7E                     LD   a,(hl)   ; a = char in TIB
0B6B   23                     INC   hl   ; inc pointer into TIB
0B6C   0B                     DEC   bc   ; dec count of chars in TIB
0B6D   CD 5A 09               CALL   nesting   ; update nesting value
0B70                INTERPRET4:      
0B70   79                     LD   a,c   ; is count zero?
0B71   B0                     OR   b   
0B72   20 F6                  JR   nz,interpret3   ; if not loop
0B74   C1                     POP   bc   ; restore offset into TIB
0B75                WAITCHAR:      
0B75   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B78   FE 20                  CP   $20   ; compare to space
0B7A   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B7C   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B7E                             ; ???? NEEDED?
0B7E   28 2A                  JR   z,waitchar4   
0B80   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B82   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B84                MACRO:       
0B84                             ;  ld (vTIBPtr),bc
0B84                             ;  ld hl,ctrlCodes
0B84                             ;  add a,l			            ; look up key of macros
0B84                             ;  ld l,a
0B84                             ;  ld e,(hl)
0B84                             ;  ld a,e
0B84                             ;  or a
0B84                             ;  jr z,macro1
0B84                             ;  ld d,msb(macros)
0B84                             ;  push de
0B84                             ;  call call		            ; Siena exec_ operation and jump to it
0B84                             ;  db DC1,0
0B84                             ; macro1:
0B84                             ;  ld bc,(vTIBPtr)
0B84   18 DC                  JR   interpret2   
0B86                WAITCHAR1:      
0B86   21 00 19               LD   hl,TIB   
0B89   09                     ADD   hl,bc   
0B8A   77                     LD   (hl),a   ; store the character in textbuf
0B8B   03                     INC   bc   
0B8C   CD 85 00               CALL   putchar   ; echo character to screen
0B8F   CD 5A 09               CALL   nesting   
0B92   18 E1                  JR   waitchar   ; wait for next character
0B94                WAITCHAR3:      
0B94   21 00 19               LD   hl,TIB   
0B97   09                     ADD   hl,bc   
0B98   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B9A   23                     INC   hl   
0B9B   36 0A                  LD   (hl),"\n"   
0B9D   23                     INC   hl   
0B9E   03                     INC   bc   
0B9F   03                     INC   bc   
0BA0   CD 8F 09               CALL   crlf   ; echo character to screen
0BA3   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0BA4   B7                     OR   a   
0BA5   20 CE                  JR   nz,waitchar   
0BA7   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0BA9   03                     INC   bc   
0BAA                WAITCHAR4:      
0BAA   ED 43 9C 18            LD   (vTIBPtr),bc   
0BAE   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0BB1                             ; we pressed enter
0BB1   0B                     DEC   bc   
0BB2                NEXT:        
0BB2   03                     INC   bc   ; Increment the IP
0BB3   0A                     LD   a,(bc)   ; Get the next character and dispatch
0BB4                             ; bit 7,a                   ; is 15-bit opcode ?
0BB4                             ; jr nz,next3
0BB4   FE 20                  CP   " "   ; whitespace?
0BB6   28 FA                  JR   z,next   ; space? ignore
0BB8   38 07                  JR   c,next1   
0BBA   6F                     LD   l,a   ; index into table
0BBB   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0BBD   6E                     LD   l,(hl)   ; get low jump address
0BBE   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BC0   E9                     JP   (hl)   ; Jump to routine
0BC1                NEXT1:       
0BC1   FE 1B                  CP   ESC   ; escape from interpreter
0BC3   28 07                  JR   z,escape   
0BC5   FE 00                  CP   NUL   ; end of input string?
0BC7   28 15                  JR   z,exit   
0BC9                             ; cp ETX                      ; end of command line input text?
0BC9                             ; jr nz,next
0BC9                             ;     ld hl,-STACK               ; etx, is SP valid? (too many pops?)
0BC9                             ;     add hl,sp
0BC9                             ;     jr nc,next2
0BC9                             ;     ld sp,STACK                ; yes, reset stack
0BC9                             ; next2:
0BC9   C3 58 0B               JP   interpret   ; no, other whitespace, macros?
0BCC                             ; next3:
0BCC                             ;     ld h,a                    ; build address
0BCC                             ;     inc bc
0BCC                             ;     ld a,(bc)
0BCC                             ;     ld l,a
0BCC                             ;     add hl,hl
0BCC                             ;     jp (hl)
0BCC                ESCAPE:      
0BCC   60 69                  LD   hl,bc   ; address of code after escape opcode
0BCE   23                     INC   hl   
0BCF   E9                     JP   (hl)   
0BD0                             ; clear stack args
0BD0                CLEAR:       
0BD0   FD 54                  LD   d,iyh   ; de = BP
0BD2   FD 5D                  LD   e,iyl   
0BD4   EB                     EX   de,hl   ; hl = BP, de = result
0BD5   F9                     LD   sp,hl   ; sp = BP
0BD6   21 00 00               LD   hl,0   
0BD9   22 9A 18               LD   (vDataWidth),hl   
0BDC   DD E9                  JP   (ix)   
0BDE                EXIT:        
0BDE   50 59                  LD   de,bc   ; address of code after exit opcode
0BE0   13                     INC   de   
0BE1   D9                     EXX      
0BE2   C1                     POP   bc   ; bc = last result
0BE3   FD 54                  LD   d,iyh   ; de = BP
0BE5   FD 5D                  LD   e,iyl   
0BE7   EB                     EX   de,hl   ; hl = BP
0BE8   F9                     LD   sp,hl   ; sp = BP
0BE9   D9                     EXX      
0BEA   E1                     POP   hl   ; hl = old BP
0BEB   C1                     POP   bc   ; pop SCP (discard)
0BEC   C1                     POP   bc   ; bc = IP
0BED   F9                     LD   sp,hl   ; sp = old BP
0BEE   D9                     EXX      
0BEF   C5                     PUSH   bc   ; push result
0BF0   D9                     EXX      
0BF1   EB                     EX   de,hl   
0BF2   E9                     JP   (hl)   
0BF3                             ; execute a block of code
0BF3                             ; uses parent scope
0BF3                EXEC:        ; execute code at pointer
0BF3   E1                     POP   hl   ; hl = pointer to code
0BF4   7C                     LD   a,h   ; skip if destination address is NUL
0BF5   B5                     OR   l   
0BF6   28 13                  JR   z,exec2   
0BF8   C5                     PUSH   bc   ; push IP
0BF9   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BFC   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BFF   D5                     PUSH   de   ; push SCP
0C00   FD E5                  PUSH   iy   ; push BP
0C02   FD 21 00 00            LD   iy,0   ; BP = SP
0C06   FD 39                  ADD   iy,sp   
0C08   44 4D                  LD   bc,hl   ; IP = pointer to code
0C0A   0B                     DEC   bc   ; dec to prepare for next routine
0C0B                EXEC2:       
0C0B   DD E9                  JP   (ix)   
0C0D                             ; call with args
0C0D                             ; creates a scope
0C0D                CALL:        ; execute code at pointer
0C0D   E1                     POP   hl   ; hl = pointer to code
0C0E                CALL1:       
0C0E   7C                     LD   a,h   ; skip if destination address is NUL
0C0F   B5                     OR   l   
0C10   28 0E                  JR   z,call2   
0C12   C5                     PUSH   bc   ; push IP
0C13   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0C15   FD E5                  PUSH   iy   ; push BP
0C17   FD 21 00 00            LD   iy,0   ; BP = SP
0C1B   FD 39                  ADD   iy,sp   
0C1D   44 4D                  LD   bc,hl   ; IP = pointer to code
0C1F   0B                     DEC   bc   ; dec to prepare for next routine
0C20                CALL2:       
0C20   DD E9                  JP   (ix)   
0C22                             ; call with args
0C22                             ; pushes array, creates a scope
0C22                DOCLOSURE:      
0C22   E1                     POP   hl   
0C23   5E                     LD   e,(hl)   ; load array and push
0C24   23                     INC   hl   
0C25   56                     LD   d,(hl)   
0C26   23                     INC   hl   
0C27   D5                     PUSH   de   
0C28   C3 0E 0C               JP   call1   
0C2B                             ; -- addr
0C2B                             ; returns address of variable
0C2B                DOVAR:       ; execute code at pointer
0C2B   DD E9                  JP   (ix)   
0C2D                             ; -- value
0C2D                             ; returns address of variable
0C2D                DOCONST:      ; execute code at pointer
0C2D   E1                     POP   hl   
0C2E   5E                     LD   e,(hl)   
0C2F   23                     INC   hl   
0C30   56                     LD   d,(hl)   
0C31   D5                     PUSH   de   
0C32   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                          DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
1D00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x [100] { @1 } closure x", 100
4000   31 80 18               LD   SP,STACK   
4003   CD B5 09               CALL   init   
4006   CD F3 0B               CALL   exec   
4009   3A 78 20 5B 31 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100] { @1 } closure x"   
4023                          ;*Macro unroll:  expect ":x [100] { @1 } closure x",100
4023   E1                     POP   HL   
4024   E5                     PUSH   HL   
4025   11 64 00               LD   DE,100   
4028   B7                     OR   A   
4029   ED 52                  SBC   HL,DE   
402B   7D                     LD   A,L   
402C   B4                     OR   H   
402D   28 64                  JR   Z,expectM_0_2434S43   
402F   CD 96 09               CALL   printStr   
4032   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 5D 20 7B 20 40 31 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100] { @1 } closure x"   
4052   CD 96 09               CALL   printStr   
4055   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4064   21 64 00               LD   HL,100   
4067   CD EA 08               CALL   prtdec   
406A   CD 96 09               CALL   printStr   
406D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407A   E1                     POP   hl   
407B   E5                     PUSH   hl   
407C   CD EA 08               CALL   prtdec   
407F   E1                     POP   hl   
4080   CD 96 09               CALL   printStr   
4083   20 28 23 00            .CSTR   " (#"   
4087   CD 32 09               CALL   prthex   
408A   CD 96 09               CALL   printStr   
408D   29 0D 0A 00            .CSTR   ")\r\n"   
4091   76                     HALT      
4092   00                     .CSTR      
4093                EXPECTM_0_2434S43:      
4093   E1                     POP   HL   
4094                          ;*Macro unroll:  test ":x [100 200] { @2 } closure x", 200
4094   31 80 18               LD   SP,STACK   
4097   CD B5 09               CALL   init   
409A   CD F3 0B               CALL   exec   
409D   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   ":x [100 200] { @2 } closure x"   
40BB                          ;*Macro unroll:  expect ":x [100 200] { @2 } closure x",200
40BB   E1                     POP   HL   
40BC   E5                     PUSH   HL   
40BD   11 C8 00               LD   DE,200   
40C0   B7                     OR   A   
40C1   ED 52                  SBC   HL,DE   
40C3   7D                     LD   A,L   
40C4   B4                     OR   H   
40C5   28 68                  JR   Z,expectM_0_2435S43   
40C7   CD 96 09               CALL   printStr   
40CA   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 7D 20 63 6C 6F 73 75 72 65 20 78 00 .CSTR   "Code: ",":x [100 200] { @2 } closure x"   
40EE   CD 96 09               CALL   printStr   
40F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4100   21 C8 00               LD   HL,200   
4103   CD EA 08               CALL   prtdec   
4106   CD 96 09               CALL   printStr   
4109   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4116   E1                     POP   hl   
4117   E5                     PUSH   hl   
4118   CD EA 08               CALL   prtdec   
411B   E1                     POP   hl   
411C   CD 96 09               CALL   printStr   
411F   20 28 23 00            .CSTR   " (#"   
4123   CD 32 09               CALL   prthex   
4126   CD 96 09               CALL   printStr   
4129   29 0D 0A 00            .CSTR   ")\r\n"   
412D   76                     HALT      
412E   00                     .CSTR      
412F                EXPECTM_0_2435S43:      
412F   E1                     POP   HL   
4130                          ;*Macro unroll:  test ":x [100 200] { @2 $1 + } closure 1 x", 201
4130   31 80 18               LD   SP,STACK   
4133   CD B5 09               CALL   init   
4136   CD F3 0B               CALL   exec   
4139   3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   ":x [100 200] { @2 $1 + } closure 1 x"   
415E                          ;*Macro unroll:  expect ":x [100 200] { @2 $1 + } closure 1 x",201
415E   E1                     POP   HL   
415F   E5                     PUSH   HL   
4160   11 C9 00               LD   DE,201   
4163   B7                     OR   A   
4164   ED 52                  SBC   HL,DE   
4166   7D                     LD   A,L   
4167   B4                     OR   H   
4168   28 6F                  JR   Z,expectM_0_2436S43   
416A   CD 96 09               CALL   printStr   
416D   43 6F 64 65 3A 20 3A 78 20 5B 31 30 30 20 32 30 30 5D 20 7B 20 40 32 20 24 31 20 2B 20 7D 20 63 6C 6F 73 75 72 65 20 31 20 78 00 .CSTR   "Code: ",":x [100 200] { @2 $1 + } closure 1 x"   
4198   CD 96 09               CALL   printStr   
419B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41AA   21 C9 00               LD   HL,201   
41AD   CD EA 08               CALL   prtdec   
41B0   CD 96 09               CALL   printStr   
41B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41C0   E1                     POP   hl   
41C1   E5                     PUSH   hl   
41C2   CD EA 08               CALL   prtdec   
41C5   E1                     POP   hl   
41C6   CD 96 09               CALL   printStr   
41C9   20 28 23 00            .CSTR   " (#"   
41CD   CD 32 09               CALL   prthex   
41D0   CD 96 09               CALL   printStr   
41D3   29 0D 0A 00            .CSTR   ")\r\n"   
41D7   76                     HALT      
41D8   00                     .CSTR      
41D9                EXPECTM_0_2436S43:      
41D9   E1                     POP   HL   
41DA                             ; test "0 [{1}] switch", 1
41DA                             ; test "1 [{1} {2} {3}] switch", 2
41DA                             ; test "9 [{1} {5}] switch", 5
41DA                             ; test ":add1 { $1 0? get $2 +} [1] closure 3 add1", 4
41DA                             ; test "bytes 'ABC' get", $41
41DA                             ; test "bytes [1 2 3] get", 1
41DA                             ; test ":xyz 123 const ; xyz", 123
41DA                             ; test ":x 1 const ; x", 1
41DA                             ; test ":x 'A' const x get", $41
41DA                             ; test ":x [1] const x get", 1
41DA                             ; test ":x [1 2 3] const x 2? get", 3
41DA                             ; test "2 (1 2 +) *", 6
41DA                             ; test ":xyz 123 const ; xyz", 123
41DA                             ; test ":xyz 123 let ; xyz get", 123
41DA                             ; test "1 2 {$1 $2 +} call", 3
41DA                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
41DA                             ; test ":xyz {1} def :xyz addr call", 1
41DA                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
41DA                             ; test ":xyz {10} def :xyz addr exec", 10
41DA                             ; test ":xyz {10} def :xyz addr call", 10
41DA                             ; test "'hello' hash", $7f54
41DA                             ; test ":hello", $7f54
41DA                             ; test "bytes [1 2 3]", $1e02
41DA                             ; test "bytes [1 2 3] 1? get", 2
41DA                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
41DA                             ; test "bytes :xx [1 2 3] const ; xx 1? get", 2
41DA                             ; test "words [1 2 3]", $1e02
41DA                             ; test "bytes [`A` `B` `C`] 1 ? get", "B"
41DA                             ; test "bytes [`A` `B` `C`] 1 ? `Z` set 1 ? get", "Z"
41DA                             ; test "words [10 20 30] 1 ? get", 10
41DA                             ; test "words [10 20 30] 1 ? 50 set 1 ? get", 50
41DA                             ; test "{{{1} exec} exec} exec", 1
41DA                             ; test "5 {{{$1} exec} exec} call", 5
41DA                             ; test "5 {$1} call", 5
41DA                             ; test "5 {{$1} exec} call", 5
41DA                             ; test "2 1 {{$1} call} call", 2
41DA                             ; test "2 1 {$2} call", 1
41DA                             ; test "2 1 {$1} call", 2
41DA                             ; test "2 1 {$2} call", 1
41DA                             ; test "2 4 {$2} call", 4
41DA                             ; test "{{1} call} call", 1
41DA                             ; test "5 {-1 {$1} if} call", 5
41DA                             ; test "0 {} loop", 0
41DA                             ; test "1 {1-} loop", $1a00
41DA                             ; test "65 .c", 0
41DA                             ; test "1 2 <", TRUE
41DA                             ; test "2 2 <=", TRUE
41DA                             ; test "2 1 <", FALSE
41DA                             ; test "1 2 >", FALSE
41DA                             ; test "2 2 >=", TRUE
41DA                             ; test "2 1 >", TRUE
41DA                             ; test "10 sqrt", 3
41DA                             ; test "10 sqrt frac", 1
41DA                             ; test "7 3 /", 2
41DA                             ; test "7 3 / frac", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test ":h {1} def :h addr call", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test "4 1 2 +", 3
41DA                             ; test "1", 1
41DA                             ; test "2", 2
41DA                             ; test "``", 0
41DA                             ; test "`a`", $61
41DA                             ; test "`\\``", $60
41DA                             ; test "`b` 'cba' in", -1
41DA                             ; test "`x` 'cba' in", 0
41DA                             ; test "5 0 {1} if", 5
41DA                             ; test "0 {1} {2} ifte", 2
41DA                             ; test "5 -1 {1} if", 1
41DA                             ; test "-1 {1} {2} ifte", 1
41DA                             ; test "9 sw {1} {5} ca", 5
41DA                             ; test "0 sw {1} ca", 1
41DA                             ; test "1 sw {1} {2} {3} ca", 2
41DA                             ; test "5 -1 {2} if", 2
41DA                             ; test "5 0 {2} if", 5
41DA                             ; test "5 0 {0 {2} if} if", 5
41DA                             ; test "5 0 {-1 {2} if} if", 5
41DA                             ; test "5 -1 {2} if", 2
41DA                             ; test "5 -1 {-1 {2} if} if", 2
41DA                             ; test "{1} ex", 1
41DA                             ; test "'A' @", 65
41DA                             ; test "1", 1
41DA                             ; test "0", 0
41DA                             ; test "10", 10
41DA                             ; test "123", 123
41DA                             ; test "$10", $10
41DA                             ; test "$FF", $FF
41DA                             ; test "2 3 =", 0
41DA                             ; test "3 3 =", 1
41DA                             ; test "2 3 <", 1
41DA                             ; test "3 3 <", 0
41DA                             ; test "3 3 >", 0
41DA                             ; test "4 3 >", 1
41DA                             ; test "1 2 +", 3
41DA                             ; test "123 456 +", 123+456
41DA                             ; test "64 128 +", 64+128
41DA                             ; test "5 3 -", 2
41DA                             ; test "3 5 &", 1
41DA                             ; test "3 5 |", 7
41DA                             ; test "2 3 *", 6
41DA                             ; test "1 2 3 + *", 5
41DA                             ; ; test "1 2 3 ' +", 3
41DA                             ; ; test "1_ 2 +",1
41DA                             ; ; test "1_ 1 +",0
41DA                             ; ; call enter
41DA                             ; ;     .cstr "1 3",$22,"+"
41DA                             ; ; expect "1 3 DUP +", 6
41DA                             ; ; test "5 2/'", 2
41DA                             ; ; test "3 5$ -", 2
41DA                             ; ; test "5 2/$ '", 1
41DA                             ; ; test "2 3%++", 7
41DA                             ; ; test "1 2 3~''", 2
41DA                             ; ; test "1 2 3~+*", 8
41DA                             ; ; test "2a!a@",2
41DA                             ; ; test "3x! 1 x@+x! x@", 4
41DA                             ; ; test "3x! 1_ x@+x! x@", 2
41DA                             ; ; test "1{", 2
41DA                             ; ; test "1}", 0
41DA                             ; ; test "2}", 1
41DA                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
41DA                             ; ; test "{2} \\^", 2
41DA                             ; ; test ":X1; X", 1
41DA                             ; ; test ":A100;A", 100
41DA                             ; ; test ":Aa!; 3A a@", 3
41DA                             ; ; test ":Aa!;:Ba@;4AB", 4
41DA                             ; ; test "[]$ '", 0
41DA                             ; ; test "[3]$ '", 1
41DA                             ; ; test "[3]'@", 3
41DA                             ; ; test "[1 2 3]'@", 1
41DA                             ; ; test "[1 2 3]'2+@", 2
41DA                             ; ; test "\\h@[1]''\\h@$-", 2
41DA                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
41DA                             ; ; test "\\[]$ '", 0
41DA                             ; ; test "\\[3]'\\@", 3
41DA                             ; ; test "\\[3]$ '", 1
41DA                             ; ; test "\\[1 2 3]'\\@", 1
41DA                             ; ; test "\\[1 2 3]'1+\\@", 2
41DA                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
41DA                             ; ; test "\\h@\\[1]''\\h@$-", 1
41DA                             ; ; test "\\`A`\\@",65
41DA                             ; ; test "0 0{1+}", 0
41DA                             ; ; test "0 1{1+}", 1
41DA                             ; ; test "0 2{1+}", 2
41DA                             ; ; test "0 1{0{1+}}", 0
41DA                             ; ; test "0 1{1{1+}}", 1
41DA                             ; ; test "0 2{1{1+}}", 2
41DA                             ; ; test "0 2{2{1+}}", 4
41DA                             ; ; test "0 1{\\i@+}", 0
41DA                             ; ; test "0 2{\\i@+}", 1
41DA                             ; ; test "0 3{\\i@+}", 3
41DA                             ; ; test "0 2{2{\\i@ \\i6+@ ++}}", 4
41DA                             ; ; test "0t! 10{1 t@+t!} t@",10
41DA                             ; ; test "0{100}{200}",200
41DA                             ; ; test "1{100}{200}",100
41DA                             ; ; test "0t! 10{\\i@ 4>\\~ \\i@ 1 t@+t!} t@",5
41DA                             ; ; test "0t! [1 2 3] $ a! { a@ \\i@ {+ @ t@+t! } t@", 6
41DA                             ; ; test ":X10;\\0X", 10
41DA                             ; ; test "2 \\1x! \\1x@", 2
41DA   CD 96 09               CALL   printStr   
41DD   44 6F 6E 65 21 00      .CSTR   "Done!"   
41E3   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0842 DEFINED AT LINE 1342 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 1922 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 237 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1882 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
                    > USED AT LINE 1811 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1423 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1924 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1899 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 52 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 57 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 91 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 194 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 196 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 199 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 202 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 205 IN Siena.asm
STRING_:            030C DEFINED AT LINE 208 IN Siena.asm
CLEAR_:             030F DEFINED AT LINE 211 IN Siena.asm
PAREN_:             0312 DEFINED AT LINE 214 IN Siena.asm
PARENEND_:          0315 DEFINED AT LINE 217 IN Siena.asm
DOT_:               0318 DEFINED AT LINE 220 IN Siena.asm
DOT1:               0324 DEFINED AT LINE 228 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
DOT2:               032D DEFINED AT LINE 233 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
DOT3:               0337 DEFINED AT LINE 239 IN Siena.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
DOT4:               033B DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
INDEX_:             0342 DEFINED AT LINE 248 IN Siena.asm
INDEX1:             034B DEFINED AT LINE 255 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
BLOCK_:             034F DEFINED AT LINE 260 IN Siena.asm
BLOCKEND_:          0352 DEFINED AT LINE 262 IN Siena.asm
CHAR_:              0355 DEFINED AT LINE 264 IN Siena.asm
ARRAY_:             0358 DEFINED AT LINE 266 IN Siena.asm
ARRAYEND_:          035B DEFINED AT LINE 268 IN Siena.asm
IDENT_:             035E DEFINED AT LINE 270 IN Siena.asm
SYMBOL_:            0361 DEFINED AT LINE 272 IN Siena.asm
AND_:               0364 DEFINED AT LINE 274 IN Siena.asm
AND1:               036B DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 295 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
OR_:                036F DEFINED AT LINE 287 IN Siena.asm
XOR_:               0378 DEFINED AT LINE 297 IN Siena.asm
XOR1:               0379 DEFINED AT LINE 299 IN Siena.asm
                    > USED AT LINE 310 IN Siena.asm
INV_:               0381 DEFINED AT LINE 308 IN Siena.asm
ADD_:               0386 DEFINED AT LINE 312 IN Siena.asm
HDOT_:              038C DEFINED AT LINE 319 IN Siena.asm
MUL_:               0393 DEFINED AT LINE 324 IN Siena.asm
SUB_:               0396 DEFINED AT LINE 327 IN Siena.asm
SUB2:               0398 DEFINED AT LINE 330 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
NOT_:               039E DEFINED AT LINE 336 IN Siena.asm
EQ_:                03A3 DEFINED AT LINE 340 IN Siena.asm
EQ1:                03A4 DEFINED AT LINE 342 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
GT_:                03A8 DEFINED AT LINE 346 IN Siena.asm
LT_:                03AC DEFINED AT LINE 351 IN Siena.asm
LT1:                03AE DEFINED AT LINE 354 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
DIV_:               03B9 DEFINED AT LINE 362 IN Siena.asm
COMMENT_:           03C8 DEFINED AT LINE 373 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
NOP_:               03D1 DEFINED AT LINE 381 IN Siena.asm
SHL:                03D3 DEFINED AT LINE 391 IN Siena.asm
                    > USED AT LINE 1795 IN Siena.asm
SHL1:               03DB DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 401 IN Siena.asm
SHL2:               03DC DEFINED AT LINE 400 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
SHR:                03E3 DEFINED AT LINE 408 IN Siena.asm
                    > USED AT LINE 1799 IN Siena.asm
SHR1:               03EB DEFINED AT LINE 415 IN Siena.asm
                    > USED AT LINE 419 IN Siena.asm
SHR2:               03EF DEFINED AT LINE 418 IN Siena.asm
                    > USED AT LINE 414 IN Siena.asm
MUL:                03F6 DEFINED AT LINE 424 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
MUL2:               0400 DEFINED AT LINE 433 IN Siena.asm
                    > USED AT LINE 442 IN Siena.asm
NUM:                0412 DEFINED AT LINE 447 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
NUM0:               041B DEFINED AT LINE 453 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
NUM1:               041C DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
NUM2:               0434 DEFINED AT LINE 473 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
                    > USED AT LINE 460 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
NUM3:               043F DEFINED AT LINE 481 IN Siena.asm
                    > USED AT LINE 476 IN Siena.asm
HEXNUM:             0442 DEFINED AT LINE 485 IN Siena.asm
                    > USED AT LINE 200 IN Siena.asm
HEXNUM1:            0445 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
HEXNUM2:            044D DEFINED AT LINE 493 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
STRING:             045F DEFINED AT LINE 506 IN Siena.asm
                    > USED AT LINE 209 IN Siena.asm
STRING1:            0467 DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
STRING2:            046A DEFINED AT LINE 515 IN Siena.asm
                    > USED AT LINE 510 IN Siena.asm
CHAR:               0478 DEFINED AT LINE 525 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
CHAR1:              047B DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
CHAR2:              0487 DEFINED AT LINE 536 IN Siena.asm
                    > USED AT LINE 533 IN Siena.asm
CHAR3:              048A DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
PAREN:              048D DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
PAREN2:             0493 DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
PARENEND:           049A DEFINED AT LINE 550 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
BLOCK:              04A9 DEFINED AT LINE 561 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
BLOCK1:             04AD DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
BLOCK2:             04D3 DEFINED AT LINE 589 IN Siena.asm
BLOCK3:             04D6 DEFINED AT LINE 592 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
BLOCK4:             04DC DEFINED AT LINE 597 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
BLOCKEND:           04E2 DEFINED AT LINE 604 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
ARG:                04F6 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 203 IN Siena.asm
PROP:               0511 DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 206 IN Siena.asm
GET:                052A DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
GET1:               0536 DEFINED AT LINE 667 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
SET:                0539 DEFINED AT LINE 672 IN Siena.asm
                    > USED AT LINE 1791 IN Siena.asm
SET1:               0548 DEFINED AT LINE 685 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
IF:                 054B DEFINED AT LINE 738 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
IFTE:               0550 DEFINED AT LINE 744 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
IFTE1:              0551 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 740 IN Siena.asm
IFTE2:              055A DEFINED AT LINE 755 IN Siena.asm
                    > USED AT LINE 753 IN Siena.asm
IFTE3:              0571 DEFINED AT LINE 768 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
SWITCH:             0573 DEFINED AT LINE 773 IN Siena.asm
                    > USED AT LINE 1807 IN Siena.asm
LOOP:               057D DEFINED AT LINE 786 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
LOOP1:              0592 DEFINED AT LINE 798 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
LOOP2:              05AD DEFINED AT LINE 814 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
LOOP3:              05B7 DEFINED AT LINE 821 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
CASE:               05CD DEFINED AT LINE 835 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
SELECT:             05E1 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 1787 IN Siena.asm
CASE0:              05FD DEFINED AT LINE 865 IN Siena.asm
                    > USED AT LINE 862 IN Siena.asm
CASE1:              0602 DEFINED AT LINE 871 IN Siena.asm
                    > USED AT LINE 864 IN Siena.asm
CASE2:              060F DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 874 IN Siena.asm
WORDS:              0611 DEFINED AT LINE 882 IN Siena.asm
                    > USED AT LINE 1815 IN Siena.asm
BYTES:              0616 DEFINED AT LINE 885 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
BYTES1:             0619 DEFINED AT LINE 887 IN Siena.asm
                    > USED AT LINE 884 IN Siena.asm
ARRAY:              061E DEFINED AT LINE 891 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
ARRAYEND:           0630 DEFINED AT LINE 901 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
ARRAYEND1:          0650 DEFINED AT LINE 924 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
ARRAYEND2:          0660 DEFINED AT LINE 938 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
ARRAYEND3:          0673 DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
HASH:               06A0 DEFINED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
DEF:                06AB DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
DEF1:               06BD DEFINED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
DEF2:               06E1 DEFINED AT LINE 1041 IN Siena.asm
DEF3:               06E4 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1031 IN Siena.asm
                    > USED AT LINE 1033 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
DEF4:               06EA DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
DEF5:               06FF DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
CLOSURE:            0702 DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
LET:                071B DEFINED AT LINE 1091 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
LET2:               073F DEFINED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
CONST:              0742 DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
CONST2:             0766 DEFINED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
ADDR:               0769 DEFINED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
ADDR1:              0775 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
SYMBOL:             077D DEFINED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
SYMBOL0:            0785 DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1186 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
SYMBOL1:            0787 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1174 IN Siena.asm
SYMBOL2:            0796 DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1182 IN Siena.asm
IDENT:              07A4 DEFINED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
IDENT0:             07AB DEFINED AT LINE 1204 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
IDENT1:             07AD DEFINED AT LINE 1207 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
IDENT2:             07BC DEFINED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1211 IN Siena.asm
IDENT3:             07D0 DEFINED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1228 IN Siena.asm
FRAC:               07D1 DEFINED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
SQRT1:              07D7 DEFINED AT LINE 1238 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
ABS1:               07E4 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
MOD:                07F1 DEFINED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
EQUALS:             07FD DEFINED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
LESSTHANEQ:         0805 DEFINED AT LINE 1280 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LESSTHAN:           080A DEFINED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
LESSTHAN1:          080F DEFINED AT LINE 1292 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
TRUE1:              0812 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1275 IN Siena.asm
FALSE1:             0818 DEFINED AT LINE 1300 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1290 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
INPUT:              081E DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
OUTPUT:             0829 DEFINED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
KEY:                0832 DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
NEG:                083B DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
FILTER:             0842 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
MAP:                0842 DEFINED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
HASHSTR:            0844 DEFINED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
HASHSTR1:           0847 DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1373 IN Siena.asm
HASHSTR2:           084C DEFINED AT LINE 1359 IN Siena.asm
DEFINEENTRY:        085D DEFINED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
DEFINEENTRY0:       0862 DEFINED AT LINE 1382 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
DEFINEENTRY1:       0871 DEFINED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
DEFINEENTRY2:       0877 DEFINED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1392 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
DEFINEENTRY3:       0879 DEFINED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1385 IN Siena.asm
LOOKUPENTRY:        0883 DEFINED AT LINE 1417 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
LOOKUPENTRY0:       0888 DEFINED AT LINE 1421 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
LOOKUPENTRY1:       0897 DEFINED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1427 IN Siena.asm
LOOKUPENTRY2:       089D DEFINED AT LINE 1439 IN Siena.asm
LOOKUPENTRY3:       089F DEFINED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
DIVIDE:             08A7 DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 1265 IN Siena.asm
DIVIDE1:            08AC DEFINED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
DIVIDE2:            08B9 DEFINED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
DIVIDE3:            08BA DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1464 IN Siena.asm
SQUAREROOT:         08C0 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
SQUAREROOT1:        08C5 DEFINED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
SQUAREROOT4:        08E0 DEFINED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1495 IN Siena.asm
SQUAREROOT5:        08E7 DEFINED AT LINE 1506 IN Siena.asm
                    > USED AT LINE 1504 IN Siena.asm
PRTDEC:             08EA DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            08F9 DEFINED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
PRTDEC1:            091B DEFINED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
PRTDEC2:            091D DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
PRTDEC3:            092D DEFINED AT LINE 1551 IN Siena.asm
                    > USED AT LINE 1546 IN Siena.asm
PRTDEC4:            092E DEFINED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1550 IN Siena.asm
PRTHEX:             0932 DEFINED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            093D DEFINED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
PRTHEX3:            0946 DEFINED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
PRTSTR0:            0951 DEFINED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
PRTSTR:             0955 DEFINED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
NESTING:            095A DEFINED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
                    > USED AT LINE 1883 IN Siena.asm
NESTING1A:          0965 DEFINED AT LINE 1607 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
NESTING1:           0968 DEFINED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
NESTING2:           0977 DEFINED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
NESTING3:           0979 DEFINED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
NESTING4:           0984 DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
PROMPT:             0986 DEFINED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
CRLF:               098F DEFINED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1895 IN Siena.asm
PRINTSTR:           0996 DEFINED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1822 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 211
DEFINE:             099D DEFINED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1697 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
                    > USED AT LINE 1753 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
                    > USED AT LINE 1785 IN Siena.asm
                    > USED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1809 IN Siena.asm
                    > USED AT LINE 1813 IN Siena.asm
INIT:               09B5 DEFINED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1821 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              09CF DEFINED AT LINE 1680 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
START:              0B42 DEFINED AT LINE 1819 IN Siena.asm
INTERPRET:          0B58 DEFINED AT LINE 1825 IN Siena.asm
                    > USED AT LINE 1933 IN Siena.asm
INTERPRET2:         0B62 DEFINED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
INTERPRET3:         0B6A DEFINED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 1847 IN Siena.asm
INTERPRET4:         0B70 DEFINED AT LINE 1844 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
WAITCHAR:           0B75 DEFINED AT LINE 1850 IN Siena.asm
                    > USED AT LINE 1884 IN Siena.asm
                    > USED AT LINE 1898 IN Siena.asm
MACRO:              0B84 DEFINED AT LINE 1860 IN Siena.asm
WAITCHAR1:          0B86 DEFINED AT LINE 1877 IN Siena.asm
                    > USED AT LINE 1853 IN Siena.asm
WAITCHAR3:          0B94 DEFINED AT LINE 1886 IN Siena.asm
                    > USED AT LINE 1858 IN Siena.asm
WAITCHAR4:          0BAA DEFINED AT LINE 1902 IN Siena.asm
                    > USED AT LINE 1856 IN Siena.asm
NEXT:               0BB2 DEFINED AT LINE 1908 IN Siena.asm
                    > USED AT LINE 547 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1914 IN Siena.asm
NEXT1:              0BC1 DEFINED AT LINE 1921 IN Siena.asm
                    > USED AT LINE 1915 IN Siena.asm
ESCAPE:             0BCC DEFINED AT LINE 1942 IN Siena.asm
                    > USED AT LINE 1923 IN Siena.asm
CLEAR:              0BD0 DEFINED AT LINE 1948 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
EXIT:               0BDE DEFINED AT LINE 1957 IN Siena.asm
                    > USED AT LINE 1925 IN Siena.asm
EXEC:               0BF3 DEFINED AT LINE 1979 IN Siena.asm
                    > USED AT LINE 548 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
EXEC2:              0C0B DEFINED AT LINE 1993 IN Siena.asm
                    > USED AT LINE 1983 IN Siena.asm
CALL:               0C0D DEFINED AT LINE 1998 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
CALL1:              0C0E DEFINED AT LINE 2000 IN Siena.asm
                    > USED AT LINE 2023 IN Siena.asm
CALL2:              0C20 DEFINED AT LINE 2011 IN Siena.asm
                    > USED AT LINE 2003 IN Siena.asm
DOCLOSURE:          0C22 DEFINED AT LINE 2016 IN Siena.asm
DOVAR:              0C2B DEFINED AT LINE 2027 IN Siena.asm
DOCONST:            0C2D DEFINED AT LINE 2032 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1671 IN Siena.asm
                    > USED AT LINE 1820 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1673 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 251 IN Siena.asm
                    > USED AT LINE 662 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
                    > USED AT LINE 1954 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1903 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1075 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1108 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1835 IN Siena.asm
                    > USED AT LINE 1878 IN Siena.asm
                    > USED AT LINE 1887 IN Siena.asm
                    > USED AT LINE 1904 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1679 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2434S43:  4093 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2435S43:  412F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2436S43:  41D9 DEFINED AT LINE 34
                    > USED AT LINE 10
