0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 45 09               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   
00CC                ETX:      EQU   3   
00CC                ESC:      EQU   27   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; oldIP                             -- saved interpreter ptr
00CC                             ; static                            -- static array
00CC                             ; SCP                               -- scope base ptr           --> arg0
00CC                             ; oldBP                             -- saved base ptr           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arglist_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 41 05               JP   arg   
0309                PROP_:       
0309   C3 79 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARGLIST_:      
030F   C3 7F 04               JP   arglist   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD C2 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD E5 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 7A 08               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 9D 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 01 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 E2 05               JP   array   
034B                ARRAYEND_:      
034B   C3 F8 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 33 07               JP   ident   
0351                SYMBOL_:      
0351   C3 0B 07               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD C2 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 8D 07               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 95 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 9A 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD 37 08               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      ; 
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                ARGLIST:      
047F   11 00 00               LD   de,0   ; d = count ret args, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arglist
0488   03                     INC   bc   ; point to next char
0489                ARGLIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arglist terminator
048C   28 12                  JR   z,arglist4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arglist2   
0492   14                     INC   d   ; non zero value ret count acts as flag
0493   20 08                  JR   nz,arglist3   
0495                ARGLIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arglist3   
049C   14                     INC   d   ; if d > 0 increase ret arg count
049D                ARGLIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arglist1   
04A0                ARGLIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arglist
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 27                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 23                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 1F                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 10                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0C                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 08                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 07                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   20 DA                  JR   nz,block1   
04F0                BLOCK2:      
04F0   14                     INC   d   
04F1   18 D7                  JR   block1   
04F3                BLOCK3:      
04F3   3E 80                  LD   a,$80   
04F5   AA                     XOR   d   
04F6   47                     LD   b,a   
04F7   20 D1                  JR   nz,block1   
04F9   18 03                  JR   block5   
04FB                BLOCK4:      
04FB   15                     DEC   d   
04FC   20 CC                  JR   nz,block1   ; get the next element
04FE                BLOCK5:      
04FE   0B                     DEC   bc   ; balanced, exit
04FF   DD E9                  JP   (ix)   
0501                BLOCKEND:      
0501   D9                     EXX      
0502   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0505   FD 56 01               LD   d,(iy+1)   
0508   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050B   FD 46 07               LD   b,(iy+7)   
050E   D9                     EXX      
050F   FD 54                  LD   d,iyh   ; hl = BP
0511   FD 5D                  LD   e,iyl   
0513   EB                     EX   de,hl   
0514   FD 5E 02               LD   e,(iy+2)   ; de = BP, hl = arglist (numargs = arglist[-2])
0517   FD 56 03               LD   d,(iy+3)   
051A   EB                     EX   de,hl   
051B   3E 04                  LD   a,4   ; a = 4
051D   2B                     DEC   hl   ; hl = ptr to numargs
051E   2B                     DEC   hl   
051F   86                     ADD   a,(hl)   ; a += numargs
0520   87                     ADD   a,a   ; a *= 2
0521   62 6B                  LD   hl,de   ; a = offset, hl = de = BP
0523   B7                     OR   a   ; bc = BP - sp = count
0524   ED 72                  SBC   hl,sp   
0526   44 4D                  LD   bc,hl   
0528   62 6B                  LD   hl,de   ; a = offset, bc = count, hl = de = BP
052A   85                     ADD   a,l   ; bc = count, de = BP + a = firstArg, hl = BP
052B   6F                     LD   l,a   
052C   3E 00                  LD   a,0   
052E   8C                     ADC   a,h   
052F   67                     LD   h,a   
0530   EB                     EX   de,hl   
0531   1B                     DEC   de   ; de = firstArg-1
0532   2B                     DEC   hl   ; hl = BP-1
0533   ED B8                  LDDR      
0535   13                     INC   de   ; sp = new sp
0536   EB                     EX   de,hl   
0537   F9                     LD   sp,hl   
0538   D9                     EXX      
0539   D5                     PUSH   de   ; oldBP
053A   C5                     PUSH   bc   ; IP
053B   D9                     EXX      
053C   C1                     POP   bc   
053D   FD E1                  POP   iy   
053F   DD E9                  JP   (ix)   
0541                             ; index -- value
0541                             ; returns value of arg
0541                ARG:         
0541   03                     INC   bc   ; get next char
0542   0A                     LD   a,(bc)   
0543   C5                     PUSH   bc   ; save IP
0544   FD 5E 02               LD   e,(iy+2)   ; hl = arglist, numargs = arglist[-2]
0547   FD 56 03               LD   d,(iy+3)   
054A   EB                     EX   de,hl   
054B   2B                     DEC   hl   
054C   2B                     DEC   hl   
054D   46                     LD   b,(hl)   ; b = numargs
054E   23                     INC   hl   ; hl = arglist
054F   23                     INC   hl   
0550   48                     LD   c,b   ; offset = numargs * 2
0551   CB 21                  SLA   c   
0553                ARG0:        
0553   BE                     CP   (hl)   
0554   28 0B                  JR   z,arg1   
0556   23                     INC   hl   
0557   0D                     DEC   c   ; offset ++
0558   10 F9                  DJNZ   arg0   
055A   C1                     POP   bc   ; no match, restore IP
055B   21 00 00               LD   hl,0   ; return 0
055E   E5                     PUSH   hl   
055F   DD E9                  JP   (ix)   
0561                ARG1:        
0561   79                     LD   a,c   ; hl = (offset + 4) * 2
0562   C6 04                  ADD   a,4   
0564   6F                     LD   l,a   
0565   26 00                  LD   h,0   
0567   29                     ADD   hl,hl   
0568   C1                     POP   bc   ; restore IP
0569   FD 54                  LD   d,iyh   ; de = BP
056B   FD 5D                  LD   e,iyl   
056D   EB                     EX   de,hl   
056E   19                     ADD   hl,de   ; hl = BP + (offset + 4) * 2
056F   2B                     DEC   hl   ; de = arg
0570   22 9E 18               LD   (vPointer),hl   ; store address of arg in setter
0573   56                     LD   d,(hl)   
0574   2B                     DEC   hl   
0575   5E                     LD   e,(hl)   
0576   D5                     PUSH   de   ; push arg
0577   DD E9                  JP   (ix)   
0579                             ; @1..9
0579                             ; returns address of prop
0579                PROP:        
0579   03                     INC   bc   ; get next char
057A   0A                     LD   a,(bc)   
057B   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
057D   E6 0F                  AND   $0F   ; mask
057F   87                     ADD   a,a   ; double
0580   6F                     LD   l,a   ; hl = offset into args
0581   26 00                  LD   h,0   
0583   FD 5E 06               LD   e,(iy+6)   ; de = closure array
0586   FD 56 07               LD   d,(iy+7)   
0589   19                     ADD   hl,de   ; find address of prop in array
058A   22 9E 18               LD   (vPointer),hl   ; store address in setter
058D   5E                     LD   e,(hl)   
058E   23                     INC   hl   
058F   56                     LD   d,(hl)   
0590   D5                     PUSH   de   ; push prop value
0591   DD E9                  JP   (ix)   
0593                             ; addr -- value
0593                DOLET:       
0593   E1                     POP   hl   
0594   22 9E 18               LD   (vPointer),hl   ; store address in setter
0597                DOLET2:      
0597   5E                     LD   e,(hl)   
0598   23                     INC   hl   
0599   56                     LD   d,(hl)   
059A                DOLET3:      
059A   D5                     PUSH   de   
059B   DD E9                  JP   (ix)   
059D                INDEX:       
059D   E1                     POP   hl   ; hl = index
059E   D1                     POP   de   ; de = addr
059F   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
05A2   3D                     DEC   a   
05A3   28 01                  JR   z,index1   
05A5   29                     ADD   hl,hl   ; if data width = 2 then double
05A6                INDEX1:      
05A6   19                     ADD   hl,de   ; add addr
05A7   22 9E 18               LD   (vPointer),hl   ; store address in setter
05AA   16 00                  LD   d,0   
05AC   5E                     LD   e,(hl)   
05AD   B7                     OR   a   ; check data width again
05AE   28 02                  JR   z,index2   
05B0   23                     INC   hl   
05B1   56                     LD   d,(hl)   
05B2                INDEX2:      
05B2   D5                     PUSH   de   
05B3   DD E9                  JP   (ix)   
05B5                             ; newvalue --
05B5                SET:         
05B5   D1                     POP   de   ; new value
05B6   E1                     POP   hl   ; discard last accessed value
05B7   2A 9E 18               LD   hl,(vPointer)   
05BA   73                     LD   (hl),e   
05BB   3A 9A 18               LD   a,(vDataWidth)   
05BE   3D                     DEC   a   
05BF   28 02                  JR   z,set1   
05C1   23                     INC   hl   
05C2   72                     LD   (hl),d   
05C3                SET1:        
05C3   DD E9                  JP   (ix)   
05C5                             ; ifte
05C5                             ; condition then -- value
05C5                IF:          
05C5   DD E9                  JP   (ix)   
05C7                             ; ld de,0                      ; NUL pointer for else
05C7                             ; jr ifte1
05C7                             ; ifte
05C7                             ; condition then else -- value
05C7                IFTE:        
05C7   DD E9                  JP   (ix)   
05C9                             ;     pop de                      ; de = else
05C9                             ; ifte1:
05C9                             ;     pop hl                      ; hl = then
05C9                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
05C9                             ;     inc hl                      ; check for true
05C9                             ;     ld a,h
05C9                             ;     or l
05C9                             ;     pop hl                      ; hl = then
05C9                             ;     jr z,ifte2
05C9                             ;     ex de,hl                    ; condition = false, hl = else
05C9                             ; ifte2:
05C9                             ;     ld a,h                      ; check if hl is NUL
05C9                             ;     or l
05C9                             ;     jr z,ifte3
05C9                             ;     push bc                     ; push IP
05C9                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05C9                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05C9                             ;     push de                     ; push SCP
05C9                             ;     push iy                     ; push BP
05C9                             ;     ld iy,0                     ; iy = sp
05C9                             ;     add iy,sp
05C9                             ;     ld bc,hl                    ; IP = then
05C9                             ;     dec bc
05C9                             ; ifte3:
05C9                             ;     jp (ix)
05C9                             ; switch
05C9                             ; index array -- value
05C9                SWITCH:      
05C9   D1                     POP   de   ; de = array
05CA   E1                     POP   hl   ; hl = index
05CB   29                     ADD   hl,hl   ; indec *= 2
05CC   19                     ADD   hl,de   ; add array[0]
05CD   4E                     LD   c,(hl)   ; bc = case
05CE   23                     INC   hl   
05CF   46                     LD   b,(hl)   
05D0   0B                     DEC   bc   
05D1   DD E9                  JP   (ix)   
05D3                             ; c b --
05D3                             ; loops until c = 0
05D3                LOOP:        
05D3   DD E9                  JP   (ix)   
05D5                             ;     pop de                      ; de = block                    c
05D5                             ;     pop hl                      ; hl = condition
05D5                             ;     push de
05D5                             ;     push bc                     ; push IP
05D5                             ;     ld bc,de                    ; bc = block
05D5                             ;     ld e,(iy+2)                 ; get SCP from parent stack frame
05D5                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05D5                             ;     push de                     ; push SCP
05D5                             ;     push iy                     ; push BP
05D5                             ;     ld iy,0                     ; iy = sp
05D5                             ;     add iy,sp
05D5                             ; loop1:
05D5                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05D5                             ;     or h
05D5                             ;     jr z,loop3
05D5                             ;     ld de,loop2-1               ; IP return address
05D5                             ;     push de
05D5                             ;     ld e,(iy+2)                 ; push parent SCP
05D5                             ;     ld d,(iy+3)
05D5                             ;     push de                     ;
05D5                             ;     push iy                     ; push BP
05D5                             ;     ld iy,0                     ; iy = sp
05D5                             ;     add iy,sp
05D5                             ;     push hl                     ; push condition
05D5                             ;     dec bc
05D5                             ;     jp (ix)
05D5                             ; loop2:
05D5                             ;     db ESC                      ; escape from interpreter
05D5                             ;     ld c,(iy+6)                 ; bc = block
05D5                             ;     ld b,(iy+7)
05D5                             ;     pop hl                      ; hl = condition
05D5                             ;     jr loop1
05D5                             ; loop3:
05D5                             ;     ld d,iyh                    ; de = BP
05D5                             ;     ld e,iyl
05D5                             ;     ex de,hl                    ; hl = BP, de = result
05D5                             ;     ld sp,hl                    ; sp = BP
05D5                             ;     pop hl                      ; hl = old BP
05D5                             ;     pop bc                      ; pop SCP (discard)
05D5                             ;     pop bc                      ; bc = IP
05D5                             ;     ld sp,hl                    ; sp = old BP
05D5                             ;     ld iy,0                     ; iy = sp
05D5                             ;     add iy,sp
05D5                             ;     ld ix,next                  ; needed?
05D5                             ;     jp (ix)
05D5                WORDS:       
05D5   21 02 00               LD   hl,2   
05D8   18 03                  JR   bytes1   
05DA                BYTES:       
05DA   21 01 00               LD   hl,1   
05DD                BYTES1:      
05DD   22 9A 18               LD   (vDataWidth),hl   
05E0   DD E9                  JP   (ix)   
05E2                ARRAY:       
05E2   11 00 00               LD   de,0   ; create stack frame
05E5   D5                     PUSH   de   ; push null for IP
05E6   D5                     PUSH   de   ; push null for static array
05E7   FD 5E 02               LD   e,(iy+2)   ; get and save arglist from parent stack frame
05EA   FD 56 03               LD   d,(iy+3)   ; 
05ED   D5                     PUSH   de   ; 
05EE   FD E5                  PUSH   iy   ; push BP
05F0   FD 21 00 00            LD   iy,0   ; BP = SP
05F4   FD 39                  ADD   iy,sp   
05F6   DD E9                  JP   (ix)   
05F8                ARRAYEND:      
05F8   FD 54                  LD   d,iyh   ; de = BP
05FA   FD 5D                  LD   e,iyl   
05FC   C5                     PUSH   bc   ; save IP
05FD   D9                     EXX      
05FE   C1                     POP   bc   
05FF   D9                     EXX      
0600   62 6B                  LD   hl,de   ; hl = de = BP
0602   B7                     OR   a   
0603   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0605   CB 3C                  SRL   h   ; 
0607   CB 1D                  RR   l   
0609   44 4D                  LD   bc,hl   ; bc = count
060B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
060E   71                     LD   (hl),c   ; write num items in length word
060F   23                     INC   hl   
0610   70                     LD   (hl),b   
0611   23                     INC   hl   ; hl = array[0], bc = count
0612                             ; de = BP, hl = array[0], bc = count
0612   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
0615   FE 01                  CP   1   
0617   20 10                  JR   nz,arrayEnd2   
0619                ARRAYEND1:      ; byte
0619   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
061C   77                     LD   (hl),a   ; write a to array item
061D   23                     INC   hl   ; move to next byte in array
061E   FD 2B                  DEC   iy   ; move tho next word on stack
0620   FD 2B                  DEC   iy   
0622   0B                     DEC   bc   ; dec items count
0623   79                     LD   a,c   ; if not zero loop
0624   B0                     OR   b   
0625   20 F2                  JR   nz,arrayEnd1   
0627   18 13                  JR   arrayEnd3   
0629                ARRAYEND2:      ; word
0629   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
062C   77                     LD   (hl),a   ; write lsb of array item
062D   23                     INC   hl   ; move to msb of array item
062E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0631   77                     LD   (hl),a   ; write msb of array item
0632   23                     INC   hl   ; move to next word in array
0633   FD 2B                  DEC   iy   ; move to next word on stack
0635   FD 2B                  DEC   iy   
0637   0B                     DEC   bc   ; dec items count
0638   79                     LD   a,c   ; if not zero loop
0639   B0                     OR   b   
063A   20 ED                  JR   nz,arrayEnd2   
063C                ARRAYEND3:      
063C   EB                     EX   de,hl   ; de = end of array, hl = BP
063D   F9                     LD   sp,hl   ; sp = BP
063E   E1                     POP   hl   ; de = end of array, hl = old BP
063F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0640   FD 62                  LD   iyh,d   
0642   FD 6B                  LD   iyl,e   
0644   D1                     POP   de   ; pop arglist (discard)
0645   D1                     POP   de   ; pop static array (discard)
0646   D1                     POP   de   ; pop IP (discard)
0647   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
064B   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
064E   D9                     EXX      ; restore IP
064F   C5                     PUSH   bc   
0650   D9                     EXX      
0651   C1                     POP   bc   
0652   13                     INC   de   ; de = array[0]
0653   13                     INC   de   
0654   D5                     PUSH   de   ; return array[0]
0655   DD E9                  JP   (ix)   
0657                             ; str -- num
0657                HASH:        
0657   E1                     POP   hl   
0658   C5                     PUSH   bc   
0659   44 4D                  LD   bc,hl   
065B   CD D4 07               CALL   hashStr   
065E   C1                     POP   bc   
065F   E5                     PUSH   hl   
0660   DD E9                  JP   (ix)   
0662                             ; arglist block -- ptr
0662                FUNC:        
0662   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0665   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0667   23                     INC   hl   
0668   36 30                  LD   (hl),lsb(doCall)   
066A   23                     INC   hl   
066B   36 0B                  LD   (hl),msb(doCall)   
066D   23                     INC   hl   
066E   11 00 00               LD   de,0   ; todo: move this to after arglist?
0671   73                     LD   (hl),e   ; compile array = 0
0672   23                     INC   hl   
0673   72                     LD   (hl),d   
0674   23                     INC   hl   
0675   D1                     POP   de   ; hl = heapPtr, de = block
0676   EB                     EX   de,hl   ; hl = heapPtr, de = arglist, (sp) = block
0677   E3                     EX   (sp),hl   
0678   EB                     EX   de,hl   
0679   73                     LD   (hl),e   ; compile arglist
067A   23                     INC   hl   
067B   72                     LD   (hl),d   
067C   23                     INC   hl   
067D   D1                     POP   de   ; de = block
067E   C5                     PUSH   bc   ; (sp) = IP
067F   06 01                  LD   b,1   ; b = nesting
0681                FUNC1:       
0681   1A                     LD   a,(de)   
0682   13                     INC   de   
0683   77                     LD   (hl),a   
0684   23                     INC   hl   
0685   FE 29                  CP   ")"   
0687   28 27                  JR   z,func4   
0689   FE 7D                  CP   "}"   
068B   28 23                  JR   z,func4   
068D   FE 5D                  CP   "]"   
068F   28 1F                  JR   z,func4   
0691   FE 28                  CP   "("   
0693   28 10                  JR   z,func2   
0695   FE 7B                  CP   "{"   
0697   28 0C                  JR   z,func2   
0699   FE 5B                  CP   "["   
069B   28 08                  JR   z,func2   
069D   FE 27                  CP   "'"   
069F   28 07                  JR   z,func3   
06A1   FE 60                  CP   "`"   
06A3   20 DC                  JR   nz,func1   
06A5                FUNC2:       
06A5   04                     INC   b   
06A6   18 D9                  JR   func1   
06A8                FUNC3:       
06A8   3E 80                  LD   a,$80   
06AA   A8                     XOR   b   
06AB   47                     LD   b,a   
06AC   20 D3                  JR   nz,func1   
06AE   18 03                  JR   func4a   
06B0                FUNC4:       
06B0   05                     DEC   b   
06B1   20 CE                  JR   nz,func1   ; get the next element
06B3                FUNC4A:      
06B3   C1                     POP   bc   ; de = defstart, hl = IP
06B4   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
06B8   D5                     PUSH   de   
06B9   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
06BC   DD E9                  JP   (ix)   
06BE                             ; symbol func --
06BE                DEF:         
06BE   DD 21 C4 06            LD   ix,def1   
06C2   18 9E                  JR   func   
06C4                DEF1:        
06C4   DD 21 0E 0B            LD   ix,next   
06C8   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
06C9   60 69                  LD   hl,bc   
06CB   18 1C                  JR   let1   
06CD                             ; symbol value --
06CD                LET:         
06CD   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06CF   E3                     EX   (sp),hl   
06D0   EB                     EX   de,hl   
06D1   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
06D4   36 CD                  LD   (hl),$cd   ; compile "call dolet"
06D6   23                     INC   hl   
06D7   36 93                  LD   (hl),lsb(dolet)   
06D9   23                     INC   hl   
06DA   36 05                  LD   (hl),msb(dolet)   
06DC   23                     INC   hl   
06DD   73                     LD   (hl),e   
06DE   23                     INC   hl   
06DF   72                     LD   (hl),d   
06E0   2B                     DEC   hl   
06E1   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
06E5   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
06E8   E1                     POP   hl   ; de = addr, hl = IP
06E9                LET1:        
06E9   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06EA   44 4D                  LD   bc,hl   ; bc = symbol
06EC   CD ED 07               CALL   defineEntry   
06EF   38 00                  JR   c,let2   
06F1                             ; call error
06F1                             ; .cstr "Let Collision"
06F1                LET2:        
06F1   C1                     POP   bc   
06F2   DD E9                  JP   (ix)   
06F4                             ; symbol -- ptr
06F4                ADDR:        
06F4   E1                     POP   hl   ; hl = hash
06F5   C5                     PUSH   bc   
06F6   44 4D                  LD   bc,hl   
06F8   CD 13 08               CALL   lookupEntry   
06FB   38 03                  JR   c,addr1   
06FD   21 00 00               LD   hl,0   
0700                             ; call printStr		
0700                             ; .cstr "Undefined"
0700                             ; jp interpret
0700                ADDR1:       
0700   C1                     POP   bc   
0701   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0704   19                     ADD   hl,de   
0705   22 9E 18               LD   (vPointer),hl   
0708   E5                     PUSH   hl   
0709   DD E9                  JP   (ix)   
070B                SYMBOL:      
070B   03                     INC   bc   
070C   11 00 1A               LD   de,PAD   
070F   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0711   18 02                  JR   symbol1   
0713                SYMBOL0:      ; copy to PAD area
0713   03                     INC   bc   ; characters that are part of the identifier
0714   13                     INC   de   
0715                SYMBOL1:      ; 0-9 A-Z a-z _
0715   0A                     LD   a,(bc)   
0716   12                     LD   (de),a   
0717   FE 21                  CP   " "+1   
0719   38 0A                  JR   c,symbol2   
071B   6F                     LD   l,a   
071C   7E                     LD   a,(hl)   
071D   FE 4E                  CP   lsb(ident_)   
071F   28 F2                  JR   z,symbol0   
0721   FE 00                  CP   lsb(num_)   
0723   28 EE                  JR   z,symbol0   
0725                SYMBOL2:      
0725   0B                     DEC   bc   
0726   AF                     XOR   a   
0727   12                     LD   (de),a   ; terminate string with NUL
0728   C5                     PUSH   bc   
0729   01 00 1A               LD   bc,PAD   
072C   CD D4 07               CALL   hashStr   ; hl = hash
072F   C1                     POP   bc   
0730   E5                     PUSH   hl   
0731   DD E9                  JP   (ix)   
0733                IDENT:       
0733   11 00 1A               LD   de,PAD   
0736   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0738   18 02                  JR   ident1   
073A                IDENT0:      ; copy to PAD area
073A   03                     INC   bc   ; characters that are part of the identifier
073B   13                     INC   de   
073C                IDENT1:      ; 0-9 A-Z a-z _
073C   0A                     LD   a,(bc)   
073D   12                     LD   (de),a   
073E                             ; or a
073E                             ; jr z,ident2
073E   FE 21                  CP   " "+1   
0740   38 0A                  JR   c,ident2   
0742   6F                     LD   l,a   
0743   7E                     LD   a,(hl)   
0744   FE 4E                  CP   lsb(ident_)   
0746   28 F2                  JR   z,ident0   
0748   FE 00                  CP   lsb(num_)   
074A   28 EE                  JR   z,ident0   
074C                IDENT2:      
074C   0B                     DEC   bc   
074D   AF                     XOR   a   
074E   12                     LD   (de),a   ; terminate string with NUL
074F   C5                     PUSH   bc   
0750   01 00 1A               LD   bc,PAD   
0753   CD D4 07               CALL   hashStr   ; hl = hash
0756   44 4D                  LD   bc,hl   
0758   CD 13 08               CALL   lookupEntry   
075B   C1                     POP   bc   
075C   38 02                  JR   c,ident3   ; todo: no entry? print an error message
075E   DD E9                  JP   (ix)   
0760                IDENT3:      
0760   E9                     JP   (hl)   
0761                FRAC:        
0761   2A 98 18               LD   hl,(vFrac)   
0764   E5                     PUSH   hl   
0765   DD E9                  JP   (ix)   
0767                SQRT1:       
0767   E1                     POP   hl   
0768   C5                     PUSH   bc   
0769   CD 50 08               CALL   squareRoot   
076C   ED 43 98 18            LD   (vFrac),bc   
0770   C1                     POP   bc   
0771   D5                     PUSH   de   
0772   DD E9                  JP   (ix)   
0774                ABS1:        
0774   E1                     POP   hl   
0775   CB 7C                  BIT   7,h   
0777   C8                     RET   z   
0778   AF                     XOR   a   
0779   95                     SUB   l   
077A   6F                     LD   l,a   
077B   9F                     SBC   a,a   
077C   94                     SUB   h   
077D   67                     LD   h,a   
077E   E5                     PUSH   hl   
077F   DD E9                  JP   (ix)   
0781                MOD:         
0781   D1                     POP   de   ; get first value
0782   E1                     POP   hl   ; get 2nd value
0783   C5                     PUSH   bc   ; preserve the IP
0784   44 4D                  LD   bc,hl   
0786   CD 37 08               CALL   divide   
0789   C1                     POP   bc   
078A   E5                     PUSH   hl   ; push remainder
078B   DD E9                  JP   (ix)   
078D                             ; hl = value1, de = value2
078D                             ; hl = result
078D                EQUALS:      
078D   B7                     OR   a   ; reset the carry flag
078E   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0790   28 10                  JR   z,true1   
0792   C3 A8 07               JP   false1   
0795                             ; hl = value1 de = value2
0795                             ; hl = result
0795                LESSTHANEQ:      
0795   B7                     OR   a   
0796   ED 52                  SBC   hl,de   
0798   18 05                  JR   lessthan1   
079A                             ; hl = value1 de = value2
079A                             ; hl = result
079A                LESSTHAN:      
079A   B7                     OR   a   
079B   ED 52                  SBC   hl,de   
079D   28 09                  JR   z,false1   
079F                LESSTHAN1:      
079F   FA A8 07               JP   m,false1   
07A2                TRUE1:       
07A2   21 FF FF               LD   hl,TRUE   
07A5   E5                     PUSH   hl   
07A6   DD E9                  JP   (ix)   
07A8                FALSE1:      
07A8   21 00 00               LD   hl,FALSE   
07AB   E5                     PUSH   hl   
07AC   DD E9                  JP   (ix)   
07AE                             ; Z80 port input
07AE                             ; port -- value
07AE                INPUT:       
07AE   E1                     POP   hl   
07AF   59                     LD   e,c   ; save IP
07B0   4D                     LD   c,l   
07B1   ED 68                  IN   l,(c)   
07B3   26 00                  LD   h,0   
07B5   4B                     LD   c,e   ; restore IP
07B6   E5                     PUSH   hl   
07B7   DD E9                  JP   (ix)   
07B9                             ; Z80 port output
07B9                             ; value port --
07B9                OUTPUT:      
07B9   E1                     POP   hl   
07BA   59                     LD   e,c   ; save IP
07BB   4D                     LD   c,l   
07BC   E1                     POP   hl   
07BD   ED 69                  OUT   (c),l   
07BF   4B                     LD   c,e   ; restore IP
07C0   DD E9                  JP   (ix)   
07C2                KEY:         
07C2   CD 81 00               CALL   getchar   
07C5   26 00                  LD   h,0   
07C7   6F                     LD   l,a   
07C8   E5                     PUSH   hl   
07C9   DD E9                  JP   (ix)   
07CB                NEG:         
07CB   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
07CE   D1                     POP   de   
07CF   C3 94 03               JP   sub2   ; use the SUBtract routine
07D2                FILTER:      
07D2                MAP:         
07D2                SCAN:        
07D2   DD E9                  JP   (ix)   
07D4                             ; -------------------------------------------------------------------------------
07D4                             ; hash C-string
07D4                             ; BC = str
07D4                             ; HL = hash
07D4                HASHSTR:      
07D4   21 00 00               LD   hl,0   
07D7                HASHSTR1:      
07D7   0A                     LD   a,(bc)   ; load next char
07D8   03                     INC   bc   
07D9   FE 00                  CP   0   ; NUL?
07DB   C8                     RET   z   
07DC                HASHSTR2:      
07DC   16 00                  LD   d,0   
07DE   5F                     LD   e,a   
07DF   19                     ADD   hl,de   
07E0   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
07E2   29                     ADD   hl,hl   ; shift left
07E3   19                     ADD   hl,de   ; add
07E4   29                     ADD   hl,hl   ; shift left
07E5   29                     ADD   hl,hl   ; shift left
07E6   29                     ADD   hl,hl   ; shift left
07E7   29                     ADD   hl,hl   ; shift left
07E8   29                     ADD   hl,hl   ; shift left
07E9   29                     ADD   hl,hl   ; shift left
07EA   19                     ADD   hl,de   ; add
07EB   18 EA                  JR   hashStr1   
07ED                             ; add entry to hash slots and hash pointers
07ED                             ; bc = hash (b = hi, c = lo), de = addr
07ED                             ; sets carry if successful
07ED                DEFINEENTRY:      
07ED   CB 21                  SLA   c   ; lo = lo * 2
07EF   69                     LD   l,c   ; lo1 = lo
07F0   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07F2                DEFINEENTRY0:      
07F2   7E                     LD   a,(hl)   ; a = (lo1)
07F3   FE FF                  CP   UNUSED   ; is it unused?
07F5   28 12                  JR   z,defineEntry3   ; yes, add entry
07F7   79                     LD   a,c   ; a = lo
07F8   BE                     CP   (hl)   ; compare (lo1) with lo
07F9   20 06                  JR   nz,defineEntry1   ; no match loop around
07FB   2C                     INC   l   
07FC   78                     LD   a,b   ; a = hi
07FD   BE                     CP   (hl)   ; compare (lo1+1) with hi
07FE   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0800   2D                     DEC   l   ; restore l
0801                DEFINEENTRY1:      
0801   2C                     INC   l   ; try next entry
0802   2C                     INC   l   
0803   79                     LD   a,c   ; compare lo and lo1
0804   BD                     CP   l   ; if equal then there's no space left, reject
0805   20 EB                  JR   nz,defineEntry0   
0807                DEFINEENTRY2:      
0807   B7                     OR   a   ; clear carry flag, failure
0808   C9                     RET      
0809                DEFINEENTRY3:      ; new entry
0809   71                     LD   (hl),c   ; (lo1) = hash lo
080A   23                     INC   hl   
080B   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
080C   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
080E   72                     LD   (hl),d   
080F   2B                     DEC   hl   
0810   73                     LD   (hl),e   ; (slot + 2) = address
0811   37                     SCF      ; set carry flag, success
0812   C9                     RET      
0813                             ; looks up hash and returns address
0813                             ; bc = hash
0813                             ; returns addr in hl, sets carry if successful
0813                LOOKUPENTRY:      
0813   CB 21                  SLA   c   ; lo = lo * 2
0815   69                     LD   l,c   ; lo1 = lo
0816   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0818                LOOKUPENTRY0:      
0818   7E                     LD   a,(hl)   ; a = (hl), slot
0819   FE FF                  CP   UNUSED   ; is it unused?
081B   28 EA                  JR   z,defineEntry2   ; yes, does not exist
081D   79                     LD   a,c   ; a = lo
081E   BE                     CP   (hl)   ; compare (lo1) with lo
081F   20 06                  JR   nz,lookupEntry1   ; no match loop around
0821   2C                     INC   l   
0822   78                     LD   a,b   ; a = hi
0823   BE                     CP   (hl)   ; compare (lo1+1) with hi
0824   28 09                  JR   z,lookupEntry3   
0826   2D                     DEC   l   
0827                LOOKUPENTRY1:      
0827   2C                     INC   l   
0828   2C                     INC   l   
0829   79                     LD   a,c   
082A   BD                     CP   l   ; no space left, reject
082B   20 EB                  JR   nz,lookupEntry0   
082D                LOOKUPENTRY2:      
082D   B7                     OR   a   ; clear carry flag, failure
082E   C9                     RET      
082F                LOOKUPENTRY3:      
082F   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0831   56                     LD   d,(hl)   
0832   2D                     DEC   l   ; restore l
0833   5E                     LD   e,(hl)   ; (slot + 2) = address
0834   EB                     EX   de,hl   
0835   37                     SCF      
0836   C9                     RET      
0837                             ; division subroutine.
0837                             ; bc: divisor, de: dividend, hl: remainder
0837                DIVIDE:      
0837   21 00 00               LD   hl,0   ; zero the remainder
083A   3E 10                  LD   a,16   ; loop counter
083C                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
083C   CB 21                  SLA   c   
083E   CB 10                  RL   b   
0840   ED 6A                  ADC   hl,hl   
0842   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0844   38 03                  JR   c,divide2   
0846   0C                     INC   c   
0847   18 01                  JR   divide3   
0849                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0849   19                     ADD   hl,de   
084A                DIVIDE3:      
084A   3D                     DEC   a   
084B   20 EF                  JR   nz,divide1   
084D   50 59                  LD   de,bc   ; result from bc to de
084F   C9                     RET      
0850                             ; squareroot
0850                             ; Input: HL = value
0850                             ; Result: DE = square root BC = remainder
0850                SQUAREROOT:      
0850   01 00 08               LD   bc,0800h   
0853   59                     LD   e,c   
0854   AF                     XOR   a   
0855                SQUAREROOT1:      
0855   29                     ADD   hl,hl   
0856   CB 11                  RL   c   
0858   ED 6A                  ADC   hl,hl   
085A   CB 11                  RL   c   
085C   30 02                  JR   nc,$+4   
085E   CB C5                  SET   0,l   
0860   7B                     LD   a,e   
0861   87                     ADD   a,a   
0862   5F                     LD   e,a   
0863   87                     ADD   a,a   
0864   CB 45                  BIT   0,l   
0866   20 03                  JR   nz,$+5   
0868   91                     SUB   c   
0869   30 05                  JR   nc,squareRoot4   
086B   79                     LD   a,c   
086C   93                     SUB   e   
086D   1C                     INC   e   
086E   93                     SUB   e   
086F   4F                     LD   c,a   
0870                SQUAREROOT4:      
0870   10 E3                  DJNZ   squareRoot1   
0872   CB 45                  BIT   0,l   
0874   28 01                  JR   z,squareRoot5   
0876   04                     INC   b   
0877                SQUAREROOT5:      
0877   16 00                  LD   d,0   
0879   C9                     RET      
087A                PRTDEC:      
087A   CB 7C                  BIT   7,h   
087C   28 0B                  JR   z,prtdec0   
087E   3E 2D                  LD   a,"-"   
0880   CD 85 00               CALL   putchar   
0883   AF                     XOR   a   
0884   95                     SUB   l   
0885   6F                     LD   l,a   
0886   9F                     SBC   a,a   
0887   94                     SUB   h   
0888   67                     LD   h,a   
0889                PRTDEC0:      
0889   C5                     PUSH   bc   
088A   0E 00                  LD   c,0   ; leading zeros flag = false
088C   11 F0 D8               LD   de,-10000   
088F   CD AB 08               CALL   prtdec1   
0892   11 18 FC               LD   de,-1000   
0895   CD AB 08               CALL   prtdec1   
0898   11 9C FF               LD   de,-100   
089B   CD AB 08               CALL   prtdec1   
089E   1E F6                  LD   e,-10   
08A0   CD AB 08               CALL   prtdec1   
08A3   0C                     INC   c   ; flag = true for at least digit
08A4   1E FF                  LD   e,-1   
08A6   CD AB 08               CALL   prtdec1   
08A9   C1                     POP   bc   
08AA   C9                     RET      
08AB                PRTDEC1:      
08AB   06 2F                  LD   b,"0"-1   
08AD                PRTDEC2:      
08AD   04                     INC   b   
08AE   19                     ADD   hl,de   
08AF   38 FC                  JR   c,prtdec2   
08B1   ED 52                  SBC   hl,de   
08B3   3E 30                  LD   a,"0"   
08B5   B8                     CP   b   
08B6   20 05                  JR   nz,prtdec3   
08B8   AF                     XOR   a   
08B9   B1                     OR   c   
08BA   C8                     RET   z   
08BB   18 01                  JR   prtdec4   
08BD                PRTDEC3:      
08BD   0C                     INC   c   
08BE                PRTDEC4:      
08BE   78                     LD   a,b   
08BF   C3 85 00               JP   putchar   
08C2                PRTHEX:      ; display hl as a 16-bit number in hex.
08C2   C5                     PUSH   bc   ; preserve the IP
08C3   7C                     LD   a,h   
08C4   CD CD 08               CALL   prthex2   
08C7   7D                     LD   a,l   
08C8   CD CD 08               CALL   prthex2   
08CB   C1                     POP   bc   
08CC   C9                     RET      
08CD                PRTHEX2:      
08CD   4F                     LD   c,a   
08CE   1F                     RRA      
08CF   1F                     RRA      
08D0   1F                     RRA      
08D1   1F                     RRA      
08D2   CD D6 08               CALL   prthex3   
08D5   79                     LD   a,c   
08D6                PRTHEX3:      
08D6   E6 0F                  AND   0x0F   
08D8   C6 90                  ADD   a,0x90   
08DA   27                     DAA      
08DB   CE 40                  ADC   a,0x40   
08DD   27                     DAA      
08DE   C3 85 00               JP   putchar   
08E1                PRTSTR0:      
08E1   CD 85 00               CALL   putchar   
08E4   23                     INC   hl   
08E5                PRTSTR:      
08E5   7E                     LD   a,(hl)   
08E6   B7                     OR   a   
08E7   20 F8                  JR   nz,prtstr0   
08E9   C9                     RET      
08EA                             ; **************************************************************************
08EA                             ; calculate nesting value
08EA                             ; a is char to be tested,
08EA                             ; e is the nesting value (initially 0)
08EA                             ; e is increased by ( and [
08EA                             ; e is decreased by ) and ]
08EA                             ; e has its bit 7 toggled by `
08EA                             ; limited to 127 levels
08EA                             ; **************************************************************************
08EA                NESTING:      
08EA   FE 22                  CP   $22   ; quote char
08EC   20 0A                  JR   nz,nesting1   
08EE   CB 7B                  BIT   7,e   
08F0   28 03                  JR   z,nesting1a   
08F2   CB BB                  RES   7,e   
08F4   C9                     RET      
08F5                NESTING1A:      
08F5   CB FB                  SET   7,e   
08F7   C9                     RET      
08F8                NESTING1:      
08F8   CB 7B                  BIT   7,e   
08FA   C0                     RET   nz   
08FB   FE 7B                  CP   "{"   
08FD   28 08                  JR   z,nesting2   
08FF   FE 5B                  CP   "["   
0901   28 04                  JR   z,nesting2   
0903   FE 28                  CP   "("   
0905   20 02                  JR   nz,nesting3   
0907                NESTING2:      
0907   1C                     INC   e   
0908   C9                     RET      
0909                NESTING3:      
0909   FE 7D                  CP   "}"   
090B   28 07                  JR   z,nesting4   
090D   FE 5D                  CP   "]"   
090F   28 03                  JR   z,nesting4   
0911   FE 29                  CP   ")"   
0913   C0                     RET   nz   
0914                NESTING4:      
0914   1D                     DEC   e   
0915   C9                     RET      
0916                PROMPT:      
0916   CD 26 09               CALL   printStr   
0919   0D 0A 3E 20 00         .CSTR   "\r\n> "   
091E   C9                     RET      
091F                CRLF:        
091F   CD 26 09               CALL   printStr   
0922   0D 0A 00               .CSTR   "\r\n"   
0925   C9                     RET      
0926                PRINTSTR:      
0926   E3                     EX   (sp),hl   ; swap			
0927   CD E5 08               CALL   prtstr   
092A   23                     INC   hl   ; inc past NUL
092B   E3                     EX   (sp),hl   ; put it back	
092C   C9                     RET      
092D                DEFINE:      
092D   E1                     POP   hl   
092E   7E                     LD   a,(hl)   
092F   23                     INC   hl   
0930   44 4D                  LD   bc,hl   
0932   5F                     LD   e,a   
0933   16 00                  LD   d,0   
0935   19                     ADD   hl,de   
0936   5E                     LD   e,(hl)   
0937   23                     INC   hl   
0938   56                     LD   d,(hl)   
0939   23                     INC   hl   
093A   E5                     PUSH   hl   ; bc = str
093B   D5                     PUSH   de   
093C   CD D4 07               CALL   hashStr   ; hl = hash
093F   D1                     POP   de   
0940   44 4D                  LD   bc,hl   
0942   C3 ED 07               JP   defineEntry   
0945                INIT:        
0945   DD 21 0E 0B            LD   ix,next   
0949   FD 21 80 18            LD   iy,STACK   
094D   21 80 01               LD   hl,isysVars   
0950   11 98 18               LD   de,sysVars   
0953   01 10 00               LD   bc,8 * 2   
0956   ED B0                  LDIR      
0958   3E FF                  LD   a,UNUSED   
095A   06 00                  LD   b,0   
095C   21 00 1B               LD   hl,hashSlots   
095F                INIT1:       
095F   77                     LD   (hl),a   
0960   23                     INC   hl   
0961   10 FC                  DJNZ   init1   
0963   CD 2D 09               CALL   define   
0966   04 61 62 73 00         .PSTR   "abs",0   
096B   74 07                  DW   abs1   
096D   CD 2D 09               CALL   define   
0970   05 61 64 64 72 00      .PSTR   "addr",0   
0976   F4 06                  DW   addr   
0978   CD 2D 09               CALL   define   
097B   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0982   DA 05                  DW   bytes   
0984   CD 2D 09               CALL   define   
0987   05 63 61 6C 6C 00      .PSTR   "call",0   
098D   30 0B                  DW   call   
098F                             ; call define
098F                             ; .pstr "closure",0
098F                             ; dw closure
098F   CD 2D 09               CALL   define   
0992   04 64 65 66 00         .PSTR   "def",0   
0997   BE 06                  DW   def   
0999   CD 2D 09               CALL   define   
099C   05 65 78 65 63 00      .PSTR   "exec",0   
09A2   2C 0B                  DW   exec   
09A4   CD 2D 09               CALL   define   
09A7   06 66 61 6C 73 65 00   .PSTR   "false",0   
09AE   00 00                  DW   false   
09B0   CD 2D 09               CALL   define   
09B3   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
09BB   D2 07                  DW   filter   
09BD   CD 2D 09               CALL   define   
09C0   05 66 72 61 63 00      .PSTR   "frac",0   
09C6   61 07                  DW   frac   
09C8   CD 2D 09               CALL   define   
09CB   05 66 75 6E 63 00      .PSTR   "func",0   
09D1   62 06                  DW   func   
09D3                             ; call define
09D3                             ; .pstr "get",0
09D3                             ; dw get
09D3   CD 2D 09               CALL   define   
09D6   05 68 61 73 68 00      .PSTR   "hash",0   
09DC   57 06                  DW   hash   
09DE   CD 2D 09               CALL   define   
09E1   06 69 6E 70 75 74 00   .PSTR   "input",0   
09E8   AE 07                  DW   input   
09EA   CD 2D 09               CALL   define   
09ED   03 69 66 00            .PSTR   "if",0   
09F1   C5 05                  DW   if   
09F3   CD 2D 09               CALL   define   
09F6   05 69 66 74 65 00      .PSTR   "ifte",0   
09FC   C7 05                  DW   ifte   
09FE   CD 2D 09               CALL   define   
0A01   04 6B 65 79 00         .PSTR   "key",0   
0A06   C2 07                  DW   key   
0A08   CD 2D 09               CALL   define   
0A0B   04 6C 65 74 00         .PSTR   "let",0   
0A10   CD 06                  DW   let   
0A12   CD 2D 09               CALL   define   
0A15   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0A1B   D3 05                  DW   loop   
0A1D   CD 2D 09               CALL   define   
0A20   04 6D 61 70 00         .PSTR   "map",0   
0A25   D2 07                  DW   map   
0A27   CD 2D 09               CALL   define   
0A2A   04 6D 6F 64 00         .PSTR   "mod",0   
0A2F   81 07                  DW   mod   
0A31   CD 2D 09               CALL   define   
0A34   04 6E 65 67 00         .PSTR   "neg",0   
0A39   CB 07                  DW   neg   
0A3B   CD 2D 09               CALL   define   
0A3E   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A46   B9 07                  DW   output   
0A48   CD 2D 09               CALL   define   
0A4B   05 73 63 61 6E 00      .PSTR   "scan",0   
0A51   01 00                  DW   scan   
0A53   CD 2D 09               CALL   define   
0A56   04 73 65 74 00         .PSTR   "set",0   
0A5B   B5 05                  DW   set   
0A5D   CD 2D 09               CALL   define   
0A60   04 73 68 6C 00         .PSTR   "shl",0   
0A65   CF 03                  DW   shl   
0A67   CD 2D 09               CALL   define   
0A6A   04 73 68 72 00         .PSTR   "shr",0   
0A6F   DF 03                  DW   shr   
0A71   CD 2D 09               CALL   define   
0A74   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A7A   67 07                  DW   sqrt1   
0A7C   CD 2D 09               CALL   define   
0A7F   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A87   C9 05                  DW   switch   
0A89   CD 2D 09               CALL   define   
0A8C   05 74 72 75 65 00      .PSTR   "true",0   
0A92   FF FF                  DW   true   
0A94   CD 2D 09               CALL   define   
0A97   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A9E   D5 05                  DW   words   
0AA0   C9                     RET      
0AA1                START:       
0AA1   31 80 18               LD   sp,STACK   ; start of Siena
0AA4   CD 45 09               CALL   init   ; setups
0AA7   CD 26 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0AAA   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0AB7                INTERPRET:      
0AB7   CD 16 09               CALL   prompt   
0ABA   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0ABD   ED 43 9C 18            LD   (vTIBPtr),bc   
0AC1                INTERPRET2:      ; calc nesting (a macro might have changed it)
0AC1   1E 00                  LD   e,0   ; initilize nesting value
0AC3   C5                     PUSH   bc   ; save offset into TIB,
0AC4                             ; bc is also the count of chars in TIB
0AC4   21 00 19               LD   hl,TIB   ; hl is start of TIB
0AC7   18 06                  JR   interpret4   
0AC9                INTERPRET3:      
0AC9   7E                     LD   a,(hl)   ; a = char in TIB
0ACA   23                     INC   hl   ; inc pointer into TIB
0ACB   0B                     DEC   bc   ; dec count of chars in TIB
0ACC   CD EA 08               CALL   nesting   ; update nesting value
0ACF                INTERPRET4:      
0ACF   79                     LD   a,c   ; is count zero?
0AD0   B0                     OR   b   
0AD1   20 F6                  JR   nz,interpret3   ; if not loop
0AD3   C1                     POP   bc   ; restore offset into TIB
0AD4                WAITCHAR:      
0AD4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0AD7   FE 20                  CP   $20   ; compare to space
0AD9   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0ADB   FE 00                  CP   $0   ; is it end of string? NUL end of string
0ADD                             ; ???? NEEDED?
0ADD   28 27                  JR   z,waitchar4   
0ADF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0AE1   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0AE3                MACRO:       
0AE3                             ;  ld (vTIBPtr),bc
0AE3                             ;  ld hl,ctrlCodes
0AE3                             ;  add a,l			            ; look up key of macros
0AE3                             ;  ld l,a
0AE3                             ;  ld e,(hl)
0AE3                             ;  ld a,e
0AE3                             ;  or a
0AE3                             ;  jr z,macro1
0AE3                             ;  ld d,msb(macros)
0AE3                             ;  push de
0AE3                             ;  call call		            ; Siena exec_ operation and jump to it
0AE3                             ;  db DC1,0
0AE3                             ; macro1:
0AE3                             ;  ld bc,(vTIBPtr)
0AE3   18 DC                  JR   interpret2   
0AE5                WAITCHAR1:      
0AE5   21 00 19               LD   hl,TIB   
0AE8   09                     ADD   hl,bc   
0AE9   77                     LD   (hl),a   ; store the character in textbuf
0AEA   03                     INC   bc   
0AEB   CD 85 00               CALL   putchar   ; echo character to screen
0AEE   CD EA 08               CALL   nesting   
0AF1   18 E1                  JR   waitchar   ; wait for next character
0AF3                WAITCHAR3:      
0AF3   21 00 19               LD   hl,TIB   
0AF6   09                     ADD   hl,bc   
0AF7   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0AF9   23                     INC   hl   
0AFA   36 0A                  LD   (hl),"\n"   
0AFC   23                     INC   hl   
0AFD   03                     INC   bc   
0AFE   03                     INC   bc   
0AFF   CD 1F 09               CALL   crlf   ; echo character to screen
0B02   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B03   B7                     OR   a   
0B04   20 CE                  JR   nz,waitchar   
0B06                WAITCHAR4:      
0B06   ED 43 9C 18            LD   (vTIBPtr),bc   
0B0A   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B0D                             ; we pressed enter
0B0D   0B                     DEC   bc   
0B0E                NEXT:        
0B0E   03                     INC   bc   ; Increment the IP
0B0F   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B10   FE 20                  CP   " "   ; whitespace?
0B12   28 FA                  JR   z,next   ; space? ignore
0B14   38 07                  JR   c,next1   
0B16   6F                     LD   l,a   ; index into table
0B17   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B19   6E                     LD   l,(hl)   ; get low jump address
0B1A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0B1C   E9                     JP   (hl)   ; Jump to routine
0B1D                NEXT1:       
0B1D   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0B1F   28 07                  JR   z,escape   
0B21   FE 00                  CP   NUL   ; end of input string?
0B23   28 04                  JR   z,exit   
0B25   C3 B7 0A               JP   interpret   ; no, other whitespace, macros?
0B28                ESCAPE:      
0B28   03                     INC   bc   
0B29                EXIT:        
0B29   60 69                  LD   hl,bc   
0B2B   E9                     JP   (hl)   
0B2C                             ; execute a block of code
0B2C                             ; uses parent scope
0B2C                EXEC:        ; execute code at pointer
0B2C   C1                     POP   bc   ; hl = pointer to code
0B2D   0B                     DEC   bc   ; dec to prepare for next routine
0B2E   DD E9                  JP   (ix)   
0B30                             ; call with args
0B30                             ; creates a scope
0B30                CALL:        
0B30                DOCALL:      ; execute code at pointer
0B30   E1                     POP   hl   ; hl = pointer to code
0B31   7C                     LD   a,h   ; skip if destination address is NUL
0B32   B5                     OR   l   
0B33   28 14                  JR   z,doCall2   
0B35   C5                     PUSH   bc   ; push IP
0B36   5E                     LD   e,(hl)   ; push static array
0B37   23                     INC   hl   
0B38   56                     LD   d,(hl)   
0B39   23                     INC   hl   
0B3A   D5                     PUSH   de   
0B3B   5E                     LD   e,(hl)   ; push arglist
0B3C   23                     INC   hl   
0B3D   56                     LD   d,(hl)   
0B3E   D5                     PUSH   de   ; push arglist, hl = block-1
0B3F   FD E5                  PUSH   iy   ; push BP
0B41   FD 21 00 00            LD   iy,0   ; BP = SP
0B45   FD 39                  ADD   iy,sp   
0B47   44 4D                  LD   bc,hl   ; IP = block-1, ready for NEXT
0B49                DOCALL2:      
0B49   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; 
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                          DS   2   ; 
18A4                          DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test ":x 20 let x 100 set x", 100
4000   31 80 18               LD   SP,STACK   
4003   CD 45 09               CALL   init   
4006   CD 2C 0B               CALL   exec   
4009   3A 78 20 32 30 20 6C 65 74 20 78 20 31 30 30 20 73 65 74 20 78 00 .CSTR   ":x 20 let x 100 set x"   
401F                          ;*Macro unroll:  expect ":x 20 let x 100 set x",100
401F   E1                     POP   HL   
4020   E5                     PUSH   HL   
4021   11 64 00               LD   DE,100   
4024   B7                     OR   A   
4025   ED 52                  SBC   HL,DE   
4027   7D                     LD   A,L   
4028   B4                     OR   H   
4029   28 60                  JR   Z,expectM_0_2355S43   
402B   CD 26 09               CALL   printStr   
402E   43 6F 64 65 3A 20 3A 78 20 32 30 20 6C 65 74 20 78 20 31 30 30 20 73 65 74 20 78 00 .CSTR   "Code: ",":x 20 let x 100 set x"   
404A   CD 26 09               CALL   printStr   
404D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405C   21 64 00               LD   HL,100   
405F   CD 7A 08               CALL   prtdec   
4062   CD 26 09               CALL   printStr   
4065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4072   E1                     POP   hl   
4073   E5                     PUSH   hl   
4074   CD 7A 08               CALL   prtdec   
4077   E1                     POP   hl   
4078   CD 26 09               CALL   printStr   
407B   20 28 23 00            .CSTR   " (#"   
407F   CD C2 08               CALL   prthex   
4082   CD 26 09               CALL   printStr   
4085   29 0D 0A 00            .CSTR   ")\r\n"   
4089   76                     HALT      
408A   00                     .CSTR      
408B                EXPECTM_0_2355S43:      
408B   E1                     POP   HL   
408C                          ;*Macro unroll:  test "[10 20 30] 1?", 20
408C   31 80 18               LD   SP,STACK   
408F   CD 45 09               CALL   init   
4092   CD 2C 0B               CALL   exec   
4095   5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "[10 20 30] 1?"   
40A3                          ;*Macro unroll:  expect "[10 20 30] 1?",20
40A3   E1                     POP   HL   
40A4   E5                     PUSH   HL   
40A5   11 14 00               LD   DE,20   
40A8   B7                     OR   A   
40A9   ED 52                  SBC   HL,DE   
40AB   7D                     LD   A,L   
40AC   B4                     OR   H   
40AD   28 58                  JR   Z,expectM_0_2356S43   
40AF   CD 26 09               CALL   printStr   
40B2   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3F 00 .CSTR   "Code: ","[10 20 30] 1?"   
40C6   CD 26 09               CALL   printStr   
40C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D8   21 14 00               LD   HL,20   
40DB   CD 7A 08               CALL   prtdec   
40DE   CD 26 09               CALL   printStr   
40E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40EE   E1                     POP   hl   
40EF   E5                     PUSH   hl   
40F0   CD 7A 08               CALL   prtdec   
40F3   E1                     POP   hl   
40F4   CD 26 09               CALL   printStr   
40F7   20 28 23 00            .CSTR   " (#"   
40FB   CD C2 08               CALL   prthex   
40FE   CD 26 09               CALL   printStr   
4101   29 0D 0A 00            .CSTR   ")\r\n"   
4105   76                     HALT      
4106   00                     .CSTR      
4107                EXPECTM_0_2356S43:      
4107   E1                     POP   HL   
4108                          ;*Macro unroll:  test ":x [10 20 30] let x 1? 50 set x 1?", 50
4108   31 80 18               LD   SP,STACK   
410B   CD 45 09               CALL   init   
410E   CD 2C 0B               CALL   exec   
4111   3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 78 20 31 3F 20 35 30 20 73 65 74 20 78 20 31 3F 00 .CSTR   ":x [10 20 30] let x 1? 50 set x 1?"   
4134                          ;*Macro unroll:  expect ":x [10 20 30] let x 1? 50 set x 1?",50
4134   E1                     POP   HL   
4135   E5                     PUSH   HL   
4136   11 32 00               LD   DE,50   
4139   B7                     OR   A   
413A   ED 52                  SBC   HL,DE   
413C   7D                     LD   A,L   
413D   B4                     OR   H   
413E   28 6D                  JR   Z,expectM_0_2357S43   
4140   CD 26 09               CALL   printStr   
4143   43 6F 64 65 3A 20 3A 78 20 5B 31 30 20 32 30 20 33 30 5D 20 6C 65 74 20 78 20 31 3F 20 35 30 20 73 65 74 20 78 20 31 3F 00 .CSTR   "Code: ",":x [10 20 30] let x 1? 50 set x 1?"   
416C   CD 26 09               CALL   printStr   
416F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
417E   21 32 00               LD   HL,50   
4181   CD 7A 08               CALL   prtdec   
4184   CD 26 09               CALL   printStr   
4187   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4194   E1                     POP   hl   
4195   E5                     PUSH   hl   
4196   CD 7A 08               CALL   prtdec   
4199   E1                     POP   hl   
419A   CD 26 09               CALL   printStr   
419D   20 28 23 00            .CSTR   " (#"   
41A1   CD C2 08               CALL   prthex   
41A4   CD 26 09               CALL   printStr   
41A7   29 0D 0A 00            .CSTR   ")\r\n"   
41AB   76                     HALT      
41AC   00                     .CSTR      
41AD                EXPECTM_0_2357S43:      
41AD   E1                     POP   HL   
41AE                          ;*Macro unroll:  test "bytes [1 2 3] 1?", 2
41AE   31 80 18               LD   SP,STACK   
41B1   CD 45 09               CALL   init   
41B4   CD 2C 0B               CALL   exec   
41B7   62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "bytes [1 2 3] 1?"   
41C8                          ;*Macro unroll:  expect "bytes [1 2 3] 1?",2
41C8   E1                     POP   HL   
41C9   E5                     PUSH   HL   
41CA   11 02 00               LD   DE,2   
41CD   B7                     OR   A   
41CE   ED 52                  SBC   HL,DE   
41D0   7D                     LD   A,L   
41D1   B4                     OR   H   
41D2   28 5B                  JR   Z,expectM_0_2358S43   
41D4   CD 26 09               CALL   printStr   
41D7   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 31 20 32 20 33 5D 20 31 3F 00 .CSTR   "Code: ","bytes [1 2 3] 1?"   
41EE   CD 26 09               CALL   printStr   
41F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4200   21 02 00               LD   HL,2   
4203   CD 7A 08               CALL   prtdec   
4206   CD 26 09               CALL   printStr   
4209   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4216   E1                     POP   hl   
4217   E5                     PUSH   hl   
4218   CD 7A 08               CALL   prtdec   
421B   E1                     POP   hl   
421C   CD 26 09               CALL   printStr   
421F   20 28 23 00            .CSTR   " (#"   
4223   CD C2 08               CALL   prthex   
4226   CD 26 09               CALL   printStr   
4229   29 0D 0A 00            .CSTR   ")\r\n"   
422D   76                     HALT      
422E   00                     .CSTR      
422F                EXPECTM_0_2358S43:      
422F   E1                     POP   HL   
4230                          ;*Macro unroll:  test "bytes :x [1 2 3] let x 1?", 2
4230   31 80 18               LD   SP,STACK   
4233   CD 45 09               CALL   init   
4236   CD 2C 0B               CALL   exec   
4239   62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "bytes :x [1 2 3] let x 1?"   
4253                          ;*Macro unroll:  expect "bytes :x [1 2 3] let x 1?",2
4253   E1                     POP   HL   
4254   E5                     PUSH   HL   
4255   11 02 00               LD   DE,2   
4258   B7                     OR   A   
4259   ED 52                  SBC   HL,DE   
425B   7D                     LD   A,L   
425C   B4                     OR   H   
425D   28 64                  JR   Z,expectM_0_2359S43   
425F   CD 26 09               CALL   printStr   
4262   43 6F 64 65 3A 20 62 79 74 65 73 20 3A 78 20 5B 31 20 32 20 33 5D 20 6C 65 74 20 78 20 31 3F 00 .CSTR   "Code: ","bytes :x [1 2 3] let x 1?"   
4282   CD 26 09               CALL   printStr   
4285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4294   21 02 00               LD   HL,2   
4297   CD 7A 08               CALL   prtdec   
429A   CD 26 09               CALL   printStr   
429D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AA   E1                     POP   hl   
42AB   E5                     PUSH   hl   
42AC   CD 7A 08               CALL   prtdec   
42AF   E1                     POP   hl   
42B0   CD 26 09               CALL   printStr   
42B3   20 28 23 00            .CSTR   " (#"   
42B7   CD C2 08               CALL   prthex   
42BA   CD 26 09               CALL   printStr   
42BD   29 0D 0A 00            .CSTR   ")\r\n"   
42C1   76                     HALT      
42C2   00                     .CSTR      
42C3                EXPECTM_0_2359S43:      
42C3   E1                     POP   HL   
42C4                          ;*Macro unroll:  test "bytes [`A` `B` `C`] 1?", 66
42C4   31 80 18               LD   SP,STACK   
42C7   CD 45 09               CALL   init   
42CA   CD 2C 0B               CALL   exec   
42CD   62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "bytes [`A` `B` `C`] 1?"   
42E4                          ;*Macro unroll:  expect "bytes [`A` `B` `C`] 1?",66
42E4   E1                     POP   HL   
42E5   E5                     PUSH   HL   
42E6   11 42 00               LD   DE,66   
42E9   B7                     OR   A   
42EA   ED 52                  SBC   HL,DE   
42EC   7D                     LD   A,L   
42ED   B4                     OR   H   
42EE   28 61                  JR   Z,expectM_0_2360S43   
42F0   CD 26 09               CALL   printStr   
42F3   43 6F 64 65 3A 20 62 79 74 65 73 20 5B 60 41 60 20 60 42 60 20 60 43 60 5D 20 31 3F 00 .CSTR   "Code: ","bytes [`A` `B` `C`] 1?"   
4310   CD 26 09               CALL   printStr   
4313   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4322   21 42 00               LD   HL,66   
4325   CD 7A 08               CALL   prtdec   
4328   CD 26 09               CALL   printStr   
432B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4338   E1                     POP   hl   
4339   E5                     PUSH   hl   
433A   CD 7A 08               CALL   prtdec   
433D   E1                     POP   hl   
433E   CD 26 09               CALL   printStr   
4341   20 28 23 00            .CSTR   " (#"   
4345   CD C2 08               CALL   prthex   
4348   CD 26 09               CALL   printStr   
434B   29 0D 0A 00            .CSTR   ")\r\n"   
434F   76                     HALT      
4350   00                     .CSTR      
4351                EXPECTM_0_2360S43:      
4351   E1                     POP   HL   
4352                          ;*Macro unroll:  test "() -2 ?", $0000
4352   31 80 18               LD   SP,STACK   
4355   CD 45 09               CALL   init   
4358   CD 2C 0B               CALL   exec   
435B   28 29 20 2D 32 20 3F 00 .CSTR   "() -2 ?"   
4363                          ;*Macro unroll:  expect "() -2 ?",$0000
4363   E1                     POP   HL   
4364   E5                     PUSH   HL   
4365   11 00 00               LD   DE,$0000   
4368   B7                     OR   A   
4369   ED 52                  SBC   HL,DE   
436B   7D                     LD   A,L   
436C   B4                     OR   H   
436D   28 52                  JR   Z,expectM_0_2361S43   
436F   CD 26 09               CALL   printStr   
4372   43 6F 64 65 3A 20 28 29 20 2D 32 20 3F 00 .CSTR   "Code: ","() -2 ?"   
4380   CD 26 09               CALL   printStr   
4383   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4392   21 00 00               LD   HL,$0000   
4395   CD 7A 08               CALL   prtdec   
4398   CD 26 09               CALL   printStr   
439B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43A8   E1                     POP   hl   
43A9   E5                     PUSH   hl   
43AA   CD 7A 08               CALL   prtdec   
43AD   E1                     POP   hl   
43AE   CD 26 09               CALL   printStr   
43B1   20 28 23 00            .CSTR   " (#"   
43B5   CD C2 08               CALL   prthex   
43B8   CD 26 09               CALL   printStr   
43BB   29 0D 0A 00            .CSTR   ")\r\n"   
43BF   76                     HALT      
43C0   00                     .CSTR      
43C1                EXPECTM_0_2361S43:      
43C1   E1                     POP   HL   
43C2                          ;*Macro unroll:  test "(a) -1 ?", $0001
43C2   31 80 18               LD   SP,STACK   
43C5   CD 45 09               CALL   init   
43C8   CD 2C 0B               CALL   exec   
43CB   28 61 29 20 2D 31 20 3F 00 .CSTR   "(a) -1 ?"   
43D4                          ;*Macro unroll:  expect "(a) -1 ?",$0001
43D4   E1                     POP   HL   
43D5   E5                     PUSH   HL   
43D6   11 01 00               LD   DE,$0001   
43D9   B7                     OR   A   
43DA   ED 52                  SBC   HL,DE   
43DC   7D                     LD   A,L   
43DD   B4                     OR   H   
43DE   28 53                  JR   Z,expectM_0_2362S43   
43E0   CD 26 09               CALL   printStr   
43E3   43 6F 64 65 3A 20 28 61 29 20 2D 31 20 3F 00 .CSTR   "Code: ","(a) -1 ?"   
43F2   CD 26 09               CALL   printStr   
43F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4404   21 01 00               LD   HL,$0001   
4407   CD 7A 08               CALL   prtdec   
440A   CD 26 09               CALL   printStr   
440D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
441A   E1                     POP   hl   
441B   E5                     PUSH   hl   
441C   CD 7A 08               CALL   prtdec   
441F   E1                     POP   hl   
4420   CD 26 09               CALL   printStr   
4423   20 28 23 00            .CSTR   " (#"   
4427   CD C2 08               CALL   prthex   
442A   CD 26 09               CALL   printStr   
442D   29 0D 0A 00            .CSTR   ")\r\n"   
4431   76                     HALT      
4432   00                     .CSTR      
4433                EXPECTM_0_2362S43:      
4433   E1                     POP   HL   
4434                          ;*Macro unroll:  test "(a:) -1 ?", $0001
4434   31 80 18               LD   SP,STACK   
4437   CD 45 09               CALL   init   
443A   CD 2C 0B               CALL   exec   
443D   28 61 3A 29 20 2D 31 20 3F 00 .CSTR   "(a:) -1 ?"   
4447                          ;*Macro unroll:  expect "(a:) -1 ?",$0001
4447   E1                     POP   HL   
4448   E5                     PUSH   HL   
4449   11 01 00               LD   DE,$0001   
444C   B7                     OR   A   
444D   ED 52                  SBC   HL,DE   
444F   7D                     LD   A,L   
4450   B4                     OR   H   
4451   28 54                  JR   Z,expectM_0_2363S43   
4453   CD 26 09               CALL   printStr   
4456   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 20 3F 00 .CSTR   "Code: ","(a:) -1 ?"   
4466   CD 26 09               CALL   printStr   
4469   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4478   21 01 00               LD   HL,$0001   
447B   CD 7A 08               CALL   prtdec   
447E   CD 26 09               CALL   printStr   
4481   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
448E   E1                     POP   hl   
448F   E5                     PUSH   hl   
4490   CD 7A 08               CALL   prtdec   
4493   E1                     POP   hl   
4494   CD 26 09               CALL   printStr   
4497   20 28 23 00            .CSTR   " (#"   
449B   CD C2 08               CALL   prthex   
449E   CD 26 09               CALL   printStr   
44A1   29 0D 0A 00            .CSTR   ")\r\n"   
44A5   76                     HALT      
44A6   00                     .CSTR      
44A7                EXPECTM_0_2363S43:      
44A7   E1                     POP   HL   
44A8                          ;*Macro unroll:  test "(a:b) -1 ?", $0102
44A8   31 80 18               LD   SP,STACK   
44AB   CD 45 09               CALL   init   
44AE   CD 2C 0B               CALL   exec   
44B1   28 61 3A 62 29 20 2D 31 20 3F 00 .CSTR   "(a:b) -1 ?"   
44BC                          ;*Macro unroll:  expect "(a:b) -1 ?",$0102
44BC   E1                     POP   HL   
44BD   E5                     PUSH   HL   
44BE   11 02 01               LD   DE,$0102   
44C1   B7                     OR   A   
44C2   ED 52                  SBC   HL,DE   
44C4   7D                     LD   A,L   
44C5   B4                     OR   H   
44C6   28 55                  JR   Z,expectM_0_2364S43   
44C8   CD 26 09               CALL   printStr   
44CB   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 20 3F 00 .CSTR   "Code: ","(a:b) -1 ?"   
44DC   CD 26 09               CALL   printStr   
44DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44EE   21 02 01               LD   HL,$0102   
44F1   CD 7A 08               CALL   prtdec   
44F4   CD 26 09               CALL   printStr   
44F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4504   E1                     POP   hl   
4505   E5                     PUSH   hl   
4506   CD 7A 08               CALL   prtdec   
4509   E1                     POP   hl   
450A   CD 26 09               CALL   printStr   
450D   20 28 23 00            .CSTR   " (#"   
4511   CD C2 08               CALL   prthex   
4514   CD 26 09               CALL   printStr   
4517   29 0D 0A 00            .CSTR   ")\r\n"   
451B   76                     HALT      
451C   00                     .CSTR      
451D                EXPECTM_0_2364S43:      
451D   E1                     POP   HL   
451E                          ;*Macro unroll:  test "(:b) -1 ?", $0101
451E   31 80 18               LD   SP,STACK   
4521   CD 45 09               CALL   init   
4524   CD 2C 0B               CALL   exec   
4527   28 3A 62 29 20 2D 31 20 3F 00 .CSTR   "(:b) -1 ?"   
4531                          ;*Macro unroll:  expect "(:b) -1 ?",$0101
4531   E1                     POP   HL   
4532   E5                     PUSH   HL   
4533   11 01 01               LD   DE,$0101   
4536   B7                     OR   A   
4537   ED 52                  SBC   HL,DE   
4539   7D                     LD   A,L   
453A   B4                     OR   H   
453B   28 54                  JR   Z,expectM_0_2365S43   
453D   CD 26 09               CALL   printStr   
4540   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 20 3F 00 .CSTR   "Code: ","(:b) -1 ?"   
4550   CD 26 09               CALL   printStr   
4553   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4562   21 01 01               LD   HL,$0101   
4565   CD 7A 08               CALL   prtdec   
4568   CD 26 09               CALL   printStr   
456B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4578   E1                     POP   hl   
4579   E5                     PUSH   hl   
457A   CD 7A 08               CALL   prtdec   
457D   E1                     POP   hl   
457E   CD 26 09               CALL   printStr   
4581   20 28 23 00            .CSTR   " (#"   
4585   CD C2 08               CALL   prthex   
4588   CD 26 09               CALL   printStr   
458B   29 0D 0A 00            .CSTR   ")\r\n"   
458F   76                     HALT      
4590   00                     .CSTR      
4591                EXPECTM_0_2365S43:      
4591   E1                     POP   HL   
4592                             ; test ":x () {1} def x", 1
4592                             ; test ":x (a:b) {$a 1 + $b set} def x", 1
4592                             ; test "1", 1
4592                             ; test "2", 2
4592                             ; test "1", 1
4592                             ; test "0", 0
4592                             ; test "10", 10
4592                             ; test "123", 123
4592                             ; test "-1",-1
4592                             ; test "``", 0
4592                             ; test "`a`", $61
4592                             ; test "`\\``", $60
4592                             ; test "#10", $10
4592                             ; test "#FF", $FF
4592                             ; test "-1 2 +",1
4592                             ; test "-1 1 +",0
4592                             ; test "1 2 +", 3
4592                             ; test "4 1 2 +", 3
4592                             ; test "1 2 +", 3
4592                             ; test "123 456 +", 123+456
4592                             ; test "64 128 +", 64+128
4592                             ; test "-1 -1 -",0
4592                             ; test "5 3 -", 2
4592                             ; test "3 5 &", 1
4592                             ; test "3 5 |", 7
4592                             ; test "2 3 *", 6
4592                             ; test "1 2 3 + *", 5
4592                             ; test "7 3 /", 2
4592                             ; test "7 3 / frac", 1
4592                             ; test "10 sqrt", 3
4592                             ; test "10 sqrt frac", 1
4592                             ; test "2 3 =", FALSE
4592                             ; test "3 3 =", TRUE
4592                             ; test "1 2 <", TRUE
4592                             ; test "2 1 <", FALSE
4592                             ; test "2 3 <", TRUE
4592                             ; test "3 3 <", FALSE
4592                             ; test "1 2 >", FALSE
4592                             ; test "2 1 >", TRUE
4592                             ; test "3 3 >", FALSE
4592                             ; test "4 3 >", TRUE
4592                             ; test "2 2 <=", TRUE
4592                             ; test "2 2 >=", TRUE
4592                             ; 
4592                             ; 
4592                             ; test ":x 1000 let x 10 set x", 10
4592                             ; test ":x [100] { @1 } closure x", 100
4592                             ; test ":x [100 200] { @2 } closure x", 200
4592                             ; test ":x [100 200] { @2 $1 + } closure 1 x", 201
4592                             ; test ":x 'a' {$a} def 2 x", 2
4592                             ; test ":x 'a' {$a 3 set $1} def 2 x", 3
4592                             ; test ":x '' { 3 2 } def x + ", 5
4592                             ; test ":x 'a' { $a 2 } def 5 x + ", 7
4592                             ; test "0 [{1}] switch", 1
4592                             ; test "1 [{1} {2} {3}] switch", 2
4592                             ; test "9 [{1} {5}] switch", 5
4592                             ; test ":add1 { $1 0? $2 +} [1] closure 3 add1", 4
4592                             ; test "bytes 'ABC' get", $41
4592                             ; test "bytes [1 2 3] get", 1
4592                             ; test ":xyz 123 const ; xyz", 123
4592                             ; test ":x 1 const ; x", 1
4592                             ; test ":x 'A' const x get", $41
4592                             ; test ":x [1] const x get", 1
4592                             ; test ":x [1 2 3] const x 2?", 3
4592                             ; test "2 (1 2 +) *", 6
4592                             ; test ":xyz 123 const ; xyz", 123
4592                             ; test ":xyz 123 let ; xyz get", 123
4592                             ; test "1 2 {$1 $2 +} call", 3
4592                             ; test ":xyz {$1 $2 +} def ; 1 2 xyz get", 3
4592                             ; test ":xyz {1} def :xyz addr call", 1
4592                             ; test ":xyz {$1 $2 +} def ; 1 2 :xyz addr call", 3
4592                             ; test ":xyz {10} def :xyz addr exec", 10
4592                             ; test ":xyz {10} def :xyz addr call", 10
4592                             ; test "'hello' hash", $7f54
4592                             ; test ":hello", $7f54
4592                             ; test "{{{1} exec} exec} exec", 1
4592                             ; test "5 {{{$1} exec} exec} call", 5
4592                             ; test "5 {$1} call", 5
4592                             ; test "5 {{$1} exec} call", 5
4592                             ; test "2 1 {{$1} call} call", 2
4592                             ; test "2 1 {$2} call", 1
4592                             ; test "2 1 {$1} call", 2
4592                             ; test "2 1 {$2} call", 1
4592                             ; test "2 4 {$2} call", 4
4592                             ; test "{{1} call} call", 1
4592                             ; test "5 {-1 {$1} if} call", 5
4592                             ; test "0 {} loop", 0
4592                             ; test "1 {1-} loop", $1a00
4592                             ; test ":h {1} def :h addr call", 1
4592                             ; ; call enter
4592                             ; ;     .cstr "1 3",$22,"+"
4592                             ; ; expect "1 3 DUP +", 6
4592   CD 26 09               CALL   printStr   
4595   44 6F 6E 65 21 00      .CSTR   "Done!"   
459B   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 48 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07D2 DEFINED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1886 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1819 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 1850 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 31 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1888 IN Siena.asm
ETX:                0003 DEFINED AT LINE 23 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 53 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 70 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 75 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 109 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 212 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 214 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 217 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 220 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 223 IN Siena.asm
STRING_:            030C DEFINED AT LINE 226 IN Siena.asm
ARGLIST_:           030F DEFINED AT LINE 229 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 232 IN Siena.asm
DOT1:               031E DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 237 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 245 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 251 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 244 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 260 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 263 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 265 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 267 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 269 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 271 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 273 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 275 IN Siena.asm
AND_:               0354 DEFINED AT LINE 277 IN Siena.asm
AND1:               035B DEFINED AT LINE 285 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
OR_:                035F DEFINED AT LINE 290 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 300 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 302 IN Siena.asm
                    > USED AT LINE 313 IN Siena.asm
INV_:               0371 DEFINED AT LINE 311 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 315 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 322 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 327 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 330 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
NOT_:               039A DEFINED AT LINE 347 IN Siena.asm
EQ_:                039F DEFINED AT LINE 351 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 353 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 357 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 362 IN Siena.asm
LT1:                03AA DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 373 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 384 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 392 IN Siena.asm
SHL:                03CF DEFINED AT LINE 402 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 411 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHR:                03DF DEFINED AT LINE 419 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 426 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 435 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
NUM:                040E DEFINED AT LINE 458 IN Siena.asm
                    > USED AT LINE 215 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 462 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 466 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
NUM3:               043B DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 496 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 498 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
STRING:             045B DEFINED AT LINE 520 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 531 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
ARGLIST:            047F DEFINED AT LINE 551 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
ARGLIST1:           0489 DEFINED AT LINE 558 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
ARGLIST2:           0495 DEFINED AT LINE 566 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
ARGLIST3:           049D DEFINED AT LINE 574 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
ARGLIST4:           04A0 DEFINED AT LINE 577 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
ARGLIST5:           04A5 DEFINED AT LINE 582 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 606 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 604 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 607 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 615 IN Siena.asm
                    > USED AT LINE 619 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 650 IN Siena.asm
BLOCK2:             04F0 DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
BLOCK3:             04F3 DEFINED AT LINE 642 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
BLOCK4:             04FB DEFINED AT LINE 648 IN Siena.asm
                    > USED AT LINE 622 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
BLOCK5:             04FE DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
BLOCKEND:           0501 DEFINED AT LINE 655 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
ARG:                0541 DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
ARG0:               0553 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
ARG1:               0561 DEFINED AT LINE 725 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
PROP:               0579 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
DOLET:              0593 DEFINED AT LINE 765 IN Siena.asm
DOLET2:             0597 DEFINED AT LINE 768 IN Siena.asm
DOLET3:             059A DEFINED AT LINE 772 IN Siena.asm
INDEX:              059D DEFINED AT LINE 776 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
INDEX1:             05A6 DEFINED AT LINE 783 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
INDEX2:             05B2 DEFINED AT LINE 792 IN Siena.asm
                    > USED AT LINE 789 IN Siena.asm
SET:                05B5 DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
SET1:               05C3 DEFINED AT LINE 807 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
IF:                 05C5 DEFINED AT LINE 812 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
IFTE:               05C7 DEFINED AT LINE 819 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
SWITCH:             05C9 DEFINED AT LINE 849 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
LOOP:               05D3 DEFINED AT LINE 862 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
WORDS:              05D5 DEFINED AT LINE 912 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
BYTES:              05DA DEFINED AT LINE 915 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
BYTES1:             05DD DEFINED AT LINE 917 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
ARRAY:              05E2 DEFINED AT LINE 921 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
ARRAYEND:           05F8 DEFINED AT LINE 933 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
ARRAYEND1:          0619 DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
ARRAYEND2:          0629 DEFINED AT LINE 968 IN Siena.asm
                    > USED AT LINE 954 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
ARRAYEND3:          063C DEFINED AT LINE 982 IN Siena.asm
                    > USED AT LINE 966 IN Siena.asm
HASH:               0657 DEFINED AT LINE 1004 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
FUNC:               0662 DEFINED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
FUNC1:              0681 DEFINED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
FUNC2:              06A5 DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
FUNC3:              06A8 DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1062 IN Siena.asm
FUNC4:              06B0 DEFINED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
FUNC4A:             06B3 DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
DEF:                06BE DEFINED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
DEF1:               06C4 DEFINED AT LINE 1088 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
LET:                06CD DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
LET1:               06E9 DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
LET2:               06F1 DEFINED AT LINE 1121 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
ADDR:               06F4 DEFINED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
ADDR1:              0700 DEFINED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
SYMBOL:             070B DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 276 IN Siena.asm
SYMBOL0:            0713 DEFINED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
SYMBOL1:            0715 DEFINED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
SYMBOL2:            0725 DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
IDENT:              0733 DEFINED AT LINE 1174 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
IDENT0:             073A DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
                    > USED AT LINE 1193 IN Siena.asm
IDENT1:             073C DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
IDENT2:             074C DEFINED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1187 IN Siena.asm
IDENT3:             0760 DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
FRAC:               0761 DEFINED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
SQRT1:              0767 DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1771 IN Siena.asm
ABS1:               0774 DEFINED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
MOD:                0781 DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
EQUALS:             078D DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
LESSTHANEQ:         0795 DEFINED AT LINE 1256 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
LESSTHAN:           079A DEFINED AT LINE 1263 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
LESSTHAN1:          079F DEFINED AT LINE 1268 IN Siena.asm
                    > USED AT LINE 1259 IN Siena.asm
TRUE1:              07A2 DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
FALSE1:             07A8 DEFINED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1269 IN Siena.asm
INPUT:              07AE DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
OUTPUT:             07B9 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
KEY:                07C2 DEFINED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
NEG:                07CB DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
FILTER:             07D2 DEFINED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
MAP:                07D2 DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
HASHSTR:            07D4 DEFINED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
HASHSTR1:           07D7 DEFINED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
HASHSTR2:           07DC DEFINED AT LINE 1335 IN Siena.asm
DEFINEENTRY:        07ED DEFINED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
DEFINEENTRY0:       07F2 DEFINED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1375 IN Siena.asm
DEFINEENTRY1:       0801 DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
DEFINEENTRY2:       0807 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1400 IN Siena.asm
DEFINEENTRY3:       0809 DEFINED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
LOOKUPENTRY:        0813 DEFINED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
LOOKUPENTRY0:       0818 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1414 IN Siena.asm
LOOKUPENTRY1:       0827 DEFINED AT LINE 1409 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
LOOKUPENTRY2:       082D DEFINED AT LINE 1415 IN Siena.asm
LOOKUPENTRY3:       082F DEFINED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
DIVIDE:             0837 DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 378 IN Siena.asm
                    > USED AT LINE 1241 IN Siena.asm
DIVIDE1:            083C DEFINED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
DIVIDE2:            0849 DEFINED AT LINE 1441 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
DIVIDE3:            084A DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
SQUAREROOT:         0850 DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
SQUAREROOT1:        0855 DEFINED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
SQUAREROOT4:        0870 DEFINED AT LINE 1477 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
SQUAREROOT5:        0877 DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1480 IN Siena.asm
PRTDEC:             087A DEFINED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0889 DEFINED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
PRTDEC1:            08AB DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
PRTDEC2:            08AD DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 1518 IN Siena.asm
PRTDEC3:            08BD DEFINED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
PRTDEC4:            08BE DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1526 IN Siena.asm
PRTHEX:             08C2 DEFINED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08CD DEFINED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1538 IN Siena.asm
PRTHEX3:            08D6 DEFINED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
PRTSTR0:            08E1 DEFINED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
PRTSTR:             08E5 DEFINED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
NESTING:            08EA DEFINED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
NESTING1A:          08F5 DEFINED AT LINE 1583 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
NESTING1:           08F8 DEFINED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
NESTING2:           0907 DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
NESTING3:           0909 DEFINED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
NESTING4:           0914 DEFINED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1602 IN Siena.asm
PROMPT:             0916 DEFINED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
CRLF:               091F DEFINED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1863 IN Siena.asm
PRINTSTR:           0926 DEFINED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1610 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 149
DEFINE:             092D DEFINED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1697 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
                    > USED AT LINE 1753 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
INIT:               0945 DEFINED AT LINE 1645 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT1:              095F DEFINED AT LINE 1656 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
START:              0AA1 DEFINED AT LINE 1787 IN Siena.asm
INTERPRET:          0AB7 DEFINED AT LINE 1793 IN Siena.asm
                    > USED AT LINE 1890 IN Siena.asm
INTERPRET2:         0AC1 DEFINED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1843 IN Siena.asm
INTERPRET3:         0AC9 DEFINED AT LINE 1806 IN Siena.asm
                    > USED AT LINE 1815 IN Siena.asm
INTERPRET4:         0ACF DEFINED AT LINE 1812 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
WAITCHAR:           0AD4 DEFINED AT LINE 1818 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
                    > USED AT LINE 1866 IN Siena.asm
MACRO:              0AE3 DEFINED AT LINE 1828 IN Siena.asm
WAITCHAR1:          0AE5 DEFINED AT LINE 1845 IN Siena.asm
                    > USED AT LINE 1821 IN Siena.asm
WAITCHAR3:          0AF3 DEFINED AT LINE 1854 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
WAITCHAR4:          0B06 DEFINED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
NEXT:               0B0E DEFINED AT LINE 1874 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1878 IN Siena.asm
NEXT1:              0B1D DEFINED AT LINE 1885 IN Siena.asm
                    > USED AT LINE 1879 IN Siena.asm
ESCAPE:             0B28 DEFINED AT LINE 1892 IN Siena.asm
                    > USED AT LINE 1887 IN Siena.asm
EXIT:               0B29 DEFINED AT LINE 1894 IN Siena.asm
                    > USED AT LINE 1889 IN Siena.asm
EXEC:               0B2C DEFINED AT LINE 1900 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               0B30 DEFINED AT LINE 1907 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
DOCALL:             0B30 DEFINED AT LINE 1908 IN Siena.asm
DOCALL2:            0B49 DEFINED AT LINE 1930 IN Siena.asm
                    > USED AT LINE 1912 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 1647 IN Siena.asm
                    > USED AT LINE 1788 IN Siena.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1649 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 779 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 1797 IN Siena.asm
                    > USED AT LINE 1869 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 737 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 785 IN Siena.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 25 IN ram.asm
VHEAPPTR:           18A6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 521 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
                    > USED AT LINE 584 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 992 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1079 IN Siena.asm
                    > USED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1112 IN Siena.asm
TIB:                1900 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1803 IN Siena.asm
                    > USED AT LINE 1846 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
                    > USED AT LINE 1870 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1199 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1655 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 40 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 66 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2355S43:  408B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2356S43:  4107 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2357S43:  41AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2358S43:  422F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2359S43:  42C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2360S43:  4351 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2361S43:  43C1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2362S43:  4433 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2363S43:  44A7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2364S43:  451D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2365S43:  4591 DEFINED AT LINE 34
                    > USED AT LINE 10
