0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 81 05               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                NULL:     EQU   0   
00CC                ENDTEXT:   EQU   3   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODES:      
0200   51                     DB   lsb(inv_)   ;    !
0201   7F                     DB   lsb(nop_)   ;    "
0202   03                     DB   lsb(hexnum_)   ;    #
0203   06                     DB   lsb(arg_)   ;    $
0204   DA                     DB   lsb(mod_)   ;    %
0205   7F                     DB   lsb(nop_)   ;    &
0206   09                     DB   lsb(strDef_)   ;    '
0207   21                     DB   lsb(block_)   ;    (
0208   24                     DB   lsb(blockend_)   ;    )
0209   7C                     DB   lsb(mul_)   ;    *
020A   56                     DB   lsb(add_)   ;    +
020B   7F                     DB   lsb(nop_)   ;    ,
020C   9F                     DB   lsb(sub_)   ;    -
020D   15                     DB   lsb(dot_)   ;    .
020E   DA                     DB   lsb(div_)   ;    /	
020F   00                     DB   lsb(num_)   ;    0
0210   00                     DB   lsb(num_)   ;    1
0211   00                     DB   lsb(num_)   ;    2
0212   00                     DB   lsb(num_)   ;    3
0213   00                     DB   lsb(num_)   ;    4
0214   00                     DB   lsb(num_)   ;    5
0215   00                     DB   lsb(num_)   ;    6
0216   00                     DB   lsb(num_)   ;    7
0217   00                     DB   lsb(num_)   ;    8
0218   00                     DB   lsb(num_)   ;    9
0219   7F                     DB   lsb(nop_)   ;    :
021A   7F                     DB   lsb(nop_)   ;    ;
021B   BA                     DB   lsb(lt_)   ;    <
021C   A8                     DB   lsb(eq_)   ;    =
021D   B6                     DB   lsb(gt_)   ;    >
021E   7F                     DB   lsb(nop_)   ;    ?
021F   6A                     DB   lsb(fetch_)   ;    @
0220   30                     DB   lsb(ident_)   ;    A
0221   30                     DB   lsb(ident_)   ;    B
0222   30                     DB   lsb(ident_)   ;    C
0223   30                     DB   lsb(ident_)   ;    D
0224   30                     DB   lsb(ident_)   ;    E
0225   30                     DB   lsb(ident_)   ;    F
0226   30                     DB   lsb(ident_)   ;    G
0227   30                     DB   lsb(ident_)   ;    h
0228   30                     DB   lsb(ident_)   ;    I
0229   30                     DB   lsb(ident_)   ;    J
022A   30                     DB   lsb(ident_)   ;    K
022B   30                     DB   lsb(ident_)   ;    L
022C   30                     DB   lsb(ident_)   ;    M
022D   30                     DB   lsb(ident_)   ;    N
022E   30                     DB   lsb(ident_)   ;    O
022F   30                     DB   lsb(ident_)   ;    p
0230   30                     DB   lsb(ident_)   ;    Q
0231   30                     DB   lsb(ident_)   ;    R
0232   30                     DB   lsb(ident_)   ;    S
0233   30                     DB   lsb(ident_)   ;    T
0234   30                     DB   lsb(ident_)   ;    U
0235   30                     DB   lsb(ident_)   ;    V
0236   30                     DB   lsb(ident_)   ;    W
0237   30                     DB   lsb(ident_)   ;    X
0238   30                     DB   lsb(ident_)   ;    Y
0239   30                     DB   lsb(ident_)   ;    Z
023A   2A                     DB   lsb(array_)   ;    [
023B   7F                     DB   lsb(nop_)   ;    \
023C   2D                     DB   lsb(arrayEnd_)   ;    ]
023D   48                     DB   lsb(xor_)   ;    ^
023E   30                     DB   lsb(ident_)   ;    _
023F   27                     DB   lsb(char_)   ;    `    	
0240   30                     DB   lsb(ident_)   ;    a
0241   30                     DB   lsb(ident_)   ;    b
0242   30                     DB   lsb(ident_)   ;    c
0243   30                     DB   lsb(ident_)   ;    d
0244   30                     DB   lsb(ident_)   ;    e
0245   30                     DB   lsb(ident_)   ;    f
0246   30                     DB   lsb(ident_)   ;    g
0247   30                     DB   lsb(ident_)   ;    h
0248   30                     DB   lsb(ident_)   ;    i
0249   30                     DB   lsb(ident_)   ;    j
024A   30                     DB   lsb(ident_)   ;    k
024B   30                     DB   lsb(ident_)   ;    l
024C   30                     DB   lsb(ident_)   ;    m
024D   30                     DB   lsb(ident_)   ;    n
024E   30                     DB   lsb(ident_)   ;    o
024F   30                     DB   lsb(ident_)   ;    p
0250   30                     DB   lsb(ident_)   ;    q
0251   30                     DB   lsb(ident_)   ;    r
0252   30                     DB   lsb(ident_)   ;    s
0253   30                     DB   lsb(ident_)   ;    t
0254   30                     DB   lsb(ident_)   ;    u
0255   30                     DB   lsb(ident_)   ;    v
0256   30                     DB   lsb(ident_)   ;    w
0257   30                     DB   lsb(ident_)   ;    x
0258   30                     DB   lsb(ident_)   ;    y
0259   30                     DB   lsb(ident_)   ;    z
025A   0F                     DB   lsb(lambda_)   ;    {
025B   3F                     DB   lsb(or_)   ;    |
025C   12                     DB   lsb(lambdaEnd_)   ;    }
025D   7F                     DB   lsb(nop_)   ;    ~
025E   7F                     DB   lsb(nop_)   ;    DEL	
025F                             ; ctrlCodes:
025F                             ;     DB lsb(EMPTY)               ; NUL ^@
025F                             ;     DB lsb(EMPTY)               ; SOH ^a  1
025F                             ;     DB lsb(EMPTY)               ; STX ^b  2
025F                             ;     DB lsb(EMPTY)               ; ETX ^c  3
025F                             ;     DB lsb(EMPTY)               ; EOT ^d  4
025F                             ;     DB lsb(EMPTY)               ; ENQ ^e  5
025F                             ;     DB lsb(EMPTY)               ; ACK ^F  6
025F                             ;     DB lsb(EMPTY)               ; BEL ^G  7
025F                             ;     DB lsb(EMPTY)               ; BS  ^h  8
025F                             ;     DB lsb(EMPTY)               ; TAB ^I  9
025F                             ;     DB lsb(EMPTY)               ; LF  ^J 10
025F                             ;     DB lsb(EMPTY)               ; VT  ^K 11
025F                             ;     DB lsb(EMPTY)               ; FF  ^l 12
025F                             ;     DB lsb(EMPTY)               ; CR  ^m 13
025F                             ;     DB lsb(EMPTY)               ; SO  ^N 14
025F                             ;     DB lsb(EMPTY)               ; SI  ^O 15
025F                             ;     DB lsb(EMPTY)               ; DLE ^p 16
025F                             ;     DB lsb(EMPTY)               ; ^Q
025F                             ;     DB lsb(EMPTY)               ; ^R
025F                             ;     DB lsb(EMPTY)               ; ^S
025F                             ;     DB lsb(EMPTY)               ; ^T
025F                             ;     DB lsb(EMPTY)               ; ^U
025F                             ;     DB lsb(EMPTY)               ; ^V
025F                             ;     DB lsb(EMPTY)               ; ^W
025F                             ;     DB lsb(EMPTY)               ; ^X
025F                             ;     DB lsb(EMPTY)               ; ^Y
025F                             ;     DB lsb(EMPTY)               ; ^Z
025F                             ;     DB lsb(EMPTY)               ; ^[
025F                             ;     DB lsb(EMPTY)               ; ^\
025F                             ;     DB lsb(EMPTY)               ; ^]
025F                             ;     DB lsb(EMPTY)               ; ^^
025F                             ;     DB lsb(EMPTY)               ; ^_
025F                NEXT:        
025F   03                     INC   bc   ; Increment the IP
0260   0A                     LD   a,(bc)   ; Get the next character and dispatch
0261   D6 21                  SUB   " " + 1   ; whitespace?
0263   38 07                  JR   c,next1   
0265   6F                     LD   l,a   ; index into table
0266   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0268   6E                     LD   l,(hl)   ; get low jump address
0269   26 04                  LD   h,msb(page4)   ; Load h with the 1st page address
026B   E9                     JP   (hl)   ; Jump to routine
026C                NEXT1:       
026C   FE DF                  CP   NULL - (" " + 1)   ; is it end of text?
026E   28 0F                  JR   z,exit   
0270   FE E2                  CP   ENDTEXT - (" " + 1)   ; is it end of text?
0272   20 EB                  JR   nz,next   ; no, other whitespace, ignore
0274                ETX:         
0274   21 00 E6               LD   hl,-DSTACK   
0277   39                     ADD   hl,sp   
0278   30 03                  JR   nc,etx1   
027A   31 00 1A               LD   sp,DSTACK   
027D                ETX1:        
027D   18 2B                  JR   interpret   
027F                EXIT:        
027F   50 59                  LD   de,bc   ; address of code after exit opcode
0281   13                     INC   de   
0282   D9                     EXX      
0283   C1                     POP   bc   ; bc = last result
0284   FD 54                  LD   d,iyh   ; de = BP
0286   FD 5D                  LD   e,iyl   
0288   EB                     EX   de,hl   ; hl = BP, de = result
0289   F9                     LD   sp,hl   ; sp = BP
028A   D9                     EXX      
028B   E1                     POP   hl   ; hl = old BP
028C   C1                     POP   bc   ; pop SCP (discard)
028D   C1                     POP   bc   ; bc = IP
028E   F9                     LD   sp,hl   ; sp = old BP
028F   D9                     EXX      
0290   C5                     PUSH   bc   ; push result
0291   D9                     EXX      
0292   EB                     EX   de,hl   
0293   E9                     JP   (hl)   
0294                START:       
0294   31 00 1A               LD   sp,DSTACK   ; start of Siena
0297   CD 81 05               CALL   init   ; setups
029A   CD BC 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
029D   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02AA                INTERPRET:      
02AA   CD 68 05               CALL   prompt   
02AD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02B0   ED 43 82 1B            LD   (vTIBPtr),bc   
02B4                INTERPRET2:      ; calc nesting (a macro might have changed it)
02B4   1E 00                  LD   e,0   ; initilize nesting value
02B6   C5                     PUSH   bc   ; save offset into TIB,
02B7                             ; bc is also the count of chars in TIB
02B7   21 00 18               LD   hl,TIB   ; hl is start of TIB
02BA   18 06                  JR   interpret4   
02BC                INTERPRET3:      
02BC   7E                     LD   a,(hl)   ; a = char in TIB
02BD   23                     INC   hl   ; inc pointer into TIB
02BE   0B                     DEC   bc   ; dec count of chars in TIB
02BF   CD E1 07               CALL   nesting   ; update nesting value
02C2                INTERPRET4:      
02C2   79                     LD   a,c   ; is count zero?
02C3   B0                     OR   b   
02C4   20 F6                  JR   nz,interpret3   ; if not loop
02C6   C1                     POP   bc   ; restore offset into TIB
02C7                WAITCHAR:      
02C7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02CA   FE 20                  CP   $20   ; compare to space
02CC   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02CE   FE 00                  CP   $0   ; is it end of string? null end of string
02D0   28 2A                  JR   z,waitchar4   
02D2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02D4   28 10                  JR   z,waitchar3   ; if anything else its macro/control
02D6                MACRO:       
02D6                             ;     ld (vTIBPtr),bc
02D6                             ;     ld hl,ctrlCodes
02D6                             ;     add a,l			            ; look up key of macros
02D6                             ;     ld l,a
02D6                             ;     ld e,(hl)
02D6                             ;     ld a,e
02D6                             ;     or a
02D6                             ;     jr z,macro1
02D6                             ;     ld d,msb(macros)
02D6                             ;     push de
02D6                             ;     call exec		            ; Siena exec_ operation and jump to it
02D6                             ;     .cstr "ca"
02D6                             ; macro1:
02D6                             ;     ld bc,(vTIBPtr)
02D6   18 DC                  JR   interpret2   
02D8                WAITCHAR1:      
02D8   21 00 18               LD   hl,TIB   
02DB   09                     ADD   hl,bc   
02DC   77                     LD   (hl),a   ; store the character in textbuf
02DD   03                     INC   bc   
02DE   CD 85 00               CALL   putchar   ; echo character to screen
02E1   CD E1 07               CALL   nesting   
02E4   18 E1                  JR   waitchar   ; wait for next character
02E6                WAITCHAR3:      
02E6   21 00 18               LD   hl,TIB   
02E9   09                     ADD   hl,bc   
02EA   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02EC   23                     INC   hl   
02ED   36 0A                  LD   (hl),"\n"   
02EF   23                     INC   hl   
02F0   03                     INC   bc   
02F1   03                     INC   bc   
02F2   CD 7A 05               CALL   crlf   ; echo character to screen
02F5   7B                     LD   a,e   ; if zero nesting append and ETX after \r
02F6   B7                     OR   a   
02F7   20 CE                  JR   nz,waitchar   
02F9   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02FB   03                     INC   bc   
02FC                WAITCHAR4:      
02FC   ED 43 82 1B            LD   (vTIBPtr),bc   
0300   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0303   0B                     DEC   bc   
0304                             ; **********************************************************************			
0304                             ; Page 4 primitive routines
0304                             ; **********************************************************************
0304                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 07 07               JP   num   
0403                HEXNUM_:      
0403   C3 38 07               JP   hexnum   
0406                ARG_:        
0406   C3 EB 08               JP   arg   
0409                STRDEF_:      
0409   C3 0D 08               JP   strDef   
040C                NEWADD2_:      
040C   C3 1D 09               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 53 08               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 8E 08               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD 55 07               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   C3 5F 02               JP   next   
0421                BLOCK_:      
0421   C3 A3 08               JP   block   
0424                BLOCKEND_:      
0424   C3 D6 08               JP   blockend   
0427                CHAR_:       
0427   C3 27 08               JP   char   
042A                ARRAY_:      
042A   C3 C8 09               JP   array   
042D                ARRAYEND_:      
042D   C3 DB 09               JP   arrayEnd   
0430                IDENT_:      
0430   C3 E9 0A               JP   ident   
0433                AND_:        
0433   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0434   E1                     POP   hl   
0435   7B                     LD   a,e   
0436   A5                     AND   l   
0437   6F                     LD   l,a   
0438   7A                     LD   a,d   
0439   A4                     AND   h   
043A                AND1:        
043A   67                     LD   h,a   
043B   E5                     PUSH   hl   
043C   C3 5F 02               JP   next   
043F                OR_:         
043F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0440   E1                     POP   hl   
0441   7B                     LD   a,e   
0442   B5                     OR   l   
0443   6F                     LD   l,a   
0444   7A                     LD   a,d   
0445   B4                     OR   h   
0446   18 F2                  JR   and1   
0448                XOR_:        
0448   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0449                XOR1:        
0449   E1                     POP   hl   
044A   7B                     LD   a,e   
044B   AD                     XOR   l   
044C   6F                     LD   l,a   
044D   7A                     LD   a,d   
044E   AC                     XOR   h   
044F   18 E9                  JR   and1   
0451                INV_:        ; Bitwise INVert the top member of the stack
0451   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0454   18 F3                  JR   xor1   
0456                ADD_:        ; add the top 2 members of the stack
0456   D1                     POP   de   
0457   E1                     POP   hl   
0458   19                     ADD   hl,de   
0459   E5                     PUSH   hl   
045A   C3 5F 02               JP   next   
045D                HDOT_:       ; print hexadecimal
045D   E1                     POP   hl   
045E   CD 9D 07               CALL   prthex   
0461   C3 19 04               JP   dot2   
0464                ETX_:        
0464   C3 74 02               JP   ETX   
0467                EXIT_:       
0467   C3 7F 02               JP   exit   
046A                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046A   E1                     POP   hl   
046B                FETCH1:      
046B   5E                     LD   e,(hl)   
046C   23                     INC   hl   
046D   56                     LD   d,(hl)   
046E   D5                     PUSH   de   
046F   C3 5F 02               JP   next   
0472                KEY_:        
0472   CD 81 00               CALL   getchar   
0475   26 00                  LD   h,0   
0477   6F                     LD   l,a   
0478   E5                     PUSH   hl   
0479   C3 5F 02               JP   next   
047C   C3 4B 05     MUL_:     JP   mul   
047F                NOP_:        
047F   C3 5F 02               JP   next   ; hardwire white space to always exec_ to next (important for arrays)
0482                SHL_:        
0482   E1                     POP   hl   ; Duplicate the top member of the stack
0483   29                     ADD   hl,hl   
0484   E5                     PUSH   hl   ; shift left fallthrough into add_
0485   C3 5F 02               JP   next   
0488                             ;  Right shift } is a divide by 2		
0488                SHR_:        
0488   E1                     POP   hl   ; Get the top member of the stack
0489                SHR1:        
0489   CB 3C                  SRL   h   
048B   CB 1D                  RR   l   
048D   E5                     PUSH   hl   
048E   C3 5F 02               JP   next   
0491                STORE_:      ; Store the value at the address placed on the top of the stack
0491   E1                     POP   hl   
0492   D1                     POP   de   
0493   73                     LD   (hl),e   
0494   23                     INC   hl   
0495   72                     LD   (hl),d   
0496   C3 5F 02               JP   next   
0499                NEG_:        
0499   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
049C   D1                     POP   de   
049D   18 02                  JR   sub2   ; use the SUBtract routine
049F                SUB_:        ; Subtract the value 2nd on stack from top of stack
049F   D1                     POP   de   
04A0   E1                     POP   hl   ; Entry point for INVert
04A1                SUB2:        
04A1   B7                     OR   a   ; Entry point for NEGate
04A2   ED 52                  SBC   hl,de   
04A4   E5                     PUSH   hl   
04A5   C3 5F 02               JP   next   
04A8                EQ_:         
04A8   E1                     POP   hl   
04A9   D1                     POP   de   
04AA   B7                     OR   a   ; reset the carry flag
04AB   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04AD   28 15                  JR   z,true_   
04AF                FALSE_:      
04AF   21 00 00               LD   hl,0   
04B2   E5                     PUSH   hl   
04B3   C3 5F 02               JP   next   
04B6                GT_:         
04B6   D1                     POP   de   
04B7   E1                     POP   hl   
04B8   18 02                  JR   lt1   
04BA                LT_:         
04BA   E1                     POP   hl   
04BB   D1                     POP   de   
04BC                LT1:         
04BC   B7                     OR   a   ; reset the carry flag
04BD   ED 52                  SBC   hl,de   
04BF   28 EE                  JR   z,false_   
04C1   FA AF 04               JP   m,false_   
04C4                TRUE_:       
04C4   21 01 00               LD   hl,1   
04C7   E5                     PUSH   hl   
04C8   C3 5F 02               JP   next   
04CB                GTE_:        
04CB   D1                     POP   de   
04CC   E1                     POP   hl   
04CD   18 02                  JR   lte1   
04CF                LTE_:        
04CF   E1                     POP   hl   
04D0   D1                     POP   de   
04D1                LTE1:        
04D1   B7                     OR   a   ; reset the carry flag
04D2   ED 52                  SBC   hl,de   
04D4   FA AF 04               JP   m,false_   
04D7   C3 FF FF               JP   true   
04DA                MOD_:        ; todo
04DA                DIV_:        
04DA   18 00                  JR   div   
04DC                             ; division subroutine.
04DC                             ; 
04DC                             ; bc: divisor, de: dividend, hl: remainder
04DC                DIV:         ;=34
04DC   D1                     POP   de   ; get first value
04DD   E1                     POP   hl   ; get 2nd value
04DE   C5                     PUSH   bc   ; Preserve the IP
04DF   44                     LD   b,h   ; bc = 2nd value
04E0   4D                     LD   c,l   
04E1                             ; 
04E1   21 00 00               LD   hl,0   ; Zero the remainder
04E4   3E 10                  LD   a,16   ; Loop counter
04E6                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
04E6   CB 21                  SLA   c   
04E8   CB 10                  RL   b   
04EA   ED 6A                  ADC   hl,hl   
04EC   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
04EE   38 03                  JR   c,div2   
04F0   0C                     INC   c   
04F1   18 01                  JR   div3   
04F3                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
04F3   19                     ADD   hl,de   
04F4                DIV3:        
04F4   3D                     DEC   a   
04F5   20 EF                  JR   nz,div1   
04F7   50                     LD   d,b   ; Result from bc to de
04F8   59                     LD   e,c   
04F9                DIV4:        
04F9   C1                     POP   bc   ; Restore the IP
04FA   D5                     PUSH   de   ; push Result
04FB   E5                     PUSH   hl   ; push remainder
04FC   C3 5F 02               JP   next   
04FF                CFETCH_:      
04FF   E1                     POP   hl   
0500   16 00                  LD   d,0   
0502   5E                     LD   e,(hl)   
0503   D5                     PUSH   de   
0504   C3 5F 02               JP   next   
0507                COMMENT_:      
0507   03                     INC   bc   ; point to next char
0508   0A                     LD   a,(bc)   
0509   FE 0D                  CP   "\r"   ; terminate at cr
050B   20 FA                  JR   nz,comment_   
050D   0B                     DEC   bc   
050E   C3 5F 02               JP   next   
0511                CSTORE_:      
0511   E1                     POP   hl   
0512   D1                     POP   de   
0513   73                     LD   (hl),e   
0514   C3 5F 02               JP   next   
0517                EMIT_:       
0517   E1                     POP   hl   
0518   7D                     LD   a,l   
0519   CD 85 00               CALL   putchar   
051C   C3 5F 02               JP   next   
051F                PROMPT_:      
051F   CD 68 05               CALL   prompt   
0522   C3 5F 02               JP   next   
0525                INPORT_:      ; \<
0525   E1                     POP   hl   
0526   79                     LD   a,c   
0527   4D                     LD   c,l   
0528   ED 68                  IN   l,(c)   
052A   26 00                  LD   h,0   
052C   4F                     LD   c,a   
052D   E5                     PUSH   hl   
052E   C3 5F 02               JP   next   
0531                NEWLN_:      
0531   CD 7A 05               CALL   crlf   
0534   C3 5F 02               JP   next   
0537                OUTPORT_:      
0537   E1                     POP   hl   
0538   59                     LD   e,c   
0539   4D                     LD   c,l   
053A   E1                     POP   hl   
053B   ED 69                  OUT   (c),l   
053D   4B                     LD   c,e   
053E   C3 5F 02               JP   next   
0541                PRTSTR_:      
0541                PRTSTR:      
0541   E1                     POP   hl   
0542   CD 75 05               CALL   putStr   
0545   C3 5F 02               JP   next   
0548                             ; rpush_:
0548                             ;     pop hl
0548                             ;     call rpush
0548                             ;     jp next
0548                             ; rpop_:
0548                             ;     call rpop
0548                             ;     push hl
0548                             ;     jp next
0548                CLOSURE_:      
0548                FILTER_:      
0548                GET_:        
0548                LET_:        
0548                MAP_:        
0548                PRINT_:      
0548                SCAN_:       
0548                SET_:        
0548                SHIFT_:      
0548                WHILE_:      
0548                VAR_:        
0548   C3 5F 02               JP   next   
054B                             ;*******************************************************************
054B                             ; Page 5 primitive routines continued
054B                             ;*******************************************************************
054B                             ; ********************************************************************
054B                             ; 16-bit multiply
054B                MUL:         ;=19
054B   D1                     POP   de   ; get first value
054C   E1                     POP   hl   
054D   C5                     PUSH   bc   ; Preserve the IP
054E   44                     LD   b,h   ; bc = 2nd value
054F   4D                     LD   c,l   
0550   21 00 00               LD   hl,0   
0553   3E 10                  LD   a,16   
0555                MUL2:        
0555   29                     ADD   hl,hl   
0556   CB 13                  RL   e   
0558   CB 12                  RL   d   
055A   30 04                  JR   nc,$+6   
055C   09                     ADD   hl,bc   
055D   30 01                  JR   nc,$+3   
055F   13                     INC   de   
0560   3D                     DEC   a   
0561   20 F2                  JR   nz,mul2   
0563   C1                     POP   bc   ; Restore the IP
0564   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0565   C3 5F 02               JP   next   
0568                             ;*******************************************************************
0568                             ; Subroutines
0568                             ;*******************************************************************
0568                PROMPT:      
0568   CD BC 07               CALL   printStr   
056B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0570   C9                     RET      
0571                PUTSTR0:      
0571   CD 85 00               CALL   putchar   
0574   23                     INC   hl   
0575                PUTSTR:      
0575   7E                     LD   a,(hl)   
0576   B7                     OR   a   
0577   20 F8                  JR   nz,putStr0   
0579   C9                     RET      
057A                             ; rpush:
057A                             ;     dec ix
057A                             ;     ld (ix+0),h
057A                             ;     dec ix
057A                             ;     ld (ix+0),l
057A                             ;     ret
057A                             ; rpop:
057A                             ;     ld l,(ix+0)
057A                             ;     inc ix
057A                             ;     ld h,(ix+0)
057A                             ;     inc ix
057A                             ; rpop2:
057A                             ;     ret
057A                CRLF:        
057A   CD BC 07               CALL   printStr   
057D   0D 0A 00               .CSTR   "\r\n"   
0580   C9                     RET      
0581                INIT:        
0581   FD 21 00 1A            LD   iy,DSTACK   
0585   DD 21 80 19            LD   ix,RSTACK   
0589   21 80 01               LD   hl,isysVars   
058C   11 7E 1B               LD   de,sysVars   
058F   01 10 00               LD   bc,8 * 2   
0592   ED B0                  LDIR      
0594   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
0597   54 5D                  LD   de,hl   
0599   13                     INC   de   
059A   36 00                  LD   (hl),0   
059C   01 68 00               LD   bc,DATASIZE   
059F   ED B0                  LDIR      
05A1   3E FF                  LD   a,UNUSED   
05A3   06 00                  LD   b,0   
05A5   21 00 1D               LD   hl,hashSlots   
05A8                INIT1:       
05A8   77                     LD   (hl),a   
05A9   23                     INC   hl   
05AA   10 FC                  DJNZ   init1   
05AC   CD D1 0A               CALL   define   
05AF   04 61 64 64 00         .PSTR   "add",0   ; muat have length and null terminator
05B4   56 04                  DW   add_   
05B6   CD D1 0A               CALL   define   
05B9   05 61 64 64 72 00      .PSTR   "addr",0   
05BF   BB 0A                  DW   addr   
05C1   CD D1 0A               CALL   define   
05C4   04 61 6E 64 00         .PSTR   "and",0   
05C9   33 04                  DW   and_   
05CB   CD D1 0A               CALL   define   
05CE   06 62 79 74 65 73 00   .PSTR   "bytes",0   
05D5   BF 09                  DW   bytes   
05D7   CD D1 0A               CALL   define   
05DA   05 63 61 73 65 00      .PSTR   "case",0   
05E0   88 09                  DW   case   
05E2   CD D1 0A               CALL   define   
05E5   04 64 65 66 00         .PSTR   "def",0   
05EA   A0 0A                  DW   def   
05EC   CD D1 0A               CALL   define   
05EF   04 64 69 76 00         .PSTR   "div",0   
05F4   DA 04                  DW   div_   
05F6   CD D1 0A               CALL   define   
05F9   05 65 78 65 63 00      .PSTR   "exec",0   
05FF   3D 08                  DW   exec   
0601   CD D1 0A               CALL   define   
0604   03 65 71 00            .PSTR   "eq",0   
0608   A8 04                  DW   eq_   
060A   CD D1 0A               CALL   define   
060D   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0615   48 05                  DW   filter_   
0617   CD D1 0A               CALL   define   
061A   04 67 65 74 00         .PSTR   "get",0   
061F   48 05                  DW   get_   
0621   CD D1 0A               CALL   define   
0624   03 67 74 00            .PSTR   "gt",0   
0628   B6 04                  DW   gt_   
062A   CD D1 0A               CALL   define   
062D   05 68 61 73 68 00      .PSTR   "hash",0   
0633   94 0A                  DW   hash   
0635   CD D1 0A               CALL   define   
0638   03 69 6E 00            .PSTR   "in",0   
063C   07 09                  DW   in   
063E   CD D1 0A               CALL   define   
0641   04 69 6E 76 00         .PSTR   "inv",0   
0646   51 04                  DW   inv_   
0648   CD D1 0A               CALL   define   
064B   03 69 66 00            .PSTR   "if",0   
064F   49 09                  DW   if   
0651   CD D1 0A               CALL   define   
0654   05 69 66 74 65 00      .PSTR   "ifte",0   
065A   4E 09                  DW   ifte   
065C   CD D1 0A               CALL   define   
065F   04 6B 65 79 00         .PSTR   "key",0   
0664   72 04                  DW   key_   
0666   CD D1 0A               CALL   define   
0669   04 6C 65 74 00         .PSTR   "let",0   
066E   48 05                  DW   let_   
0670   CD D1 0A               CALL   define   
0673   03 6C 74 00            .PSTR   "lt",0   
0677   BA 04                  DW   lt_   
0679   CD D1 0A               CALL   define   
067C   04 6D 61 70 00         .PSTR   "map",0   
0681   48 05                  DW   map_   
0683   CD D1 0A               CALL   define   
0686   04 6D 75 6C 00         .PSTR   "mul",0   
068B   7C 04                  DW   mul_   
068D   CD D1 0A               CALL   define   
0690   04 6E 65 67 00         .PSTR   "neg",0   
0695   99 04                  DW   neg_   
0697   CD D1 0A               CALL   define   
069A   03 6F 72 00            .PSTR   "or",0   
069E   3F 04                  DW   or_   
06A0   CD D1 0A               CALL   define   
06A3   06 70 72 69 6E 74 00   .PSTR   "print",0   
06AA   48 05                  DW   print_   
06AC   CD D1 0A               CALL   define   
06AF   05 73 63 61 6E 00      .PSTR   "scan",0   
06B5   48 05                  DW   scan_   
06B7   CD D1 0A               CALL   define   
06BA   04 73 65 74 00         .PSTR   "set",0   
06BF   48 05                  DW   set_   
06C1   CD D1 0A               CALL   define   
06C4   06 73 68 69 66 74 00   .PSTR   "shift",0   
06CB   48 05                  DW   shift_   
06CD   CD D1 0A               CALL   define   
06D0   04 73 75 62 00         .PSTR   "sub",0   
06D5   9F 04                  DW   sub_   
06D7   CD D1 0A               CALL   define   
06DA   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
06E2   73 09                  DW   switch   
06E4   CD D1 0A               CALL   define   
06E7   06 77 68 69 6C 65 00   .PSTR   "while",0   
06EE   48 05                  DW   while_   
06F0   CD D1 0A               CALL   define   
06F3   06 77 6F 72 64 73 00   .PSTR   "words",0   
06FA   B9 09                  DW   words   
06FC   CD D1 0A               CALL   define   
06FF   04 78 6F 72 00         .PSTR   "xor",0   
0704   48 04                  DW   xor_   
0706   C9                     RET      
0707                NUM:         
0707   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
070A   0A                     LD   a,(bc)   ; Get numeral or -
070B   FE 2D                  CP   "-"   
070D   20 01                  JR   nz,num0   
070F   03                     INC   bc   ; move to next char, no flags affected
0710                NUM0:        
0710   08                     EX   af,af'   ; save zero flag = 0 for later
0711                NUM1:        
0711   0A                     LD   a,(bc)   ; read digit
0712   D6 30                  SUB   "0"   ; less than 0?
0714   38 13                  JR   c,num2   ; not a digit, exit loop
0716   FE 0A                  CP   10   ; greater that 9?
0718   30 0F                  JR   nc,num2   ; not a digit, exit loop
071A   03                     INC   bc   ; inc IP
071B   54 5D                  LD   de,hl   ; multiply hl * 10
071D   29                     ADD   hl,hl   
071E   29                     ADD   hl,hl   
071F   19                     ADD   hl,de   
0720   29                     ADD   hl,hl   
0721   85                     ADD   a,l   ; add digit in a to hl
0722   6F                     LD   l,a   
0723   3E 00                  LD   a,0   
0725   8C                     ADC   a,h   
0726   67                     LD   h,a   
0727   18 E8                  JR   num1   
0729                NUM2:        
0729   0B                     DEC   bc   
072A   08                     EX   af,af'   ; restore zero flag
072B   20 07                  JR   nz,num3   
072D   EB                     EX   de,hl   ; negate the value of hl
072E   21 00 00               LD   hl,0   
0731   B7                     OR   a   ; jump to sub2
0732   ED 52                  SBC   hl,de   
0734                NUM3:        
0734   E5                     PUSH   hl   ; Put the number on the stack
0735   C3 5F 02               JP   next   ; and process the next character
0738                HEXNUM:      ; 
0738   21 00 00               LD   hl,0   ; Clear hl to accept the number
073B                HEXNUM1:      
073B   03                     INC   bc   
073C   0A                     LD   a,(bc)   ; Get the character which is a numeral
073D   CB 77                  BIT   6,a   ; is it uppercase alpha?
073F   28 02                  JR   z,hexnum2   ; no a decimal
0741   D6 07                  SUB   7   ; sub 7  to make $a - $F
0743                HEXNUM2:      
0743   D6 30                  SUB   $30   ; Form decimal digit
0745   DA 29 07               JP   c,num2   
0748   FE 10                  CP   $0F+1   
074A   D2 29 07               JP   nc,num2   
074D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
074E   29                     ADD   hl,hl   ; 4X
074F   29                     ADD   hl,hl   ; 8X
0750   29                     ADD   hl,hl   ; 16X
0751   85                     ADD   a,l   ; add into bottom of hl
0752   6F                     LD   l,a   ; 
0753   18 E6                  JR   hexnum1   
0755                PRTDEC:      ;=34 ; removes leading zeros
0755                             ; ld a,h
0755                             ; or l
0755                             ; ld a, "0"
0755                             ; jp z, putchar
0755   CB 7C                  BIT   7,h   
0757   28 0B                  JR   z,prtdec0   
0759   3E 2D                  LD   a,"-"   
075B   CD 85 00               CALL   putchar   
075E   AF                     XOR   a   
075F   95                     SUB   l   
0760   6F                     LD   l,a   
0761   9F                     SBC   a,a   
0762   94                     SUB   h   
0763   67                     LD   h,a   
0764                PRTDEC0:      
0764   C5                     PUSH   bc   
0765   0E 00                  LD   c,0   ; leading zeros flag = false
0767   11 F0 D8               LD   de,-10000   
076A   CD 86 07               CALL   prtdec1   
076D   11 18 FC               LD   de,-1000   
0770   CD 86 07               CALL   prtdec1   
0773   11 9C FF               LD   de,-100   
0776   CD 86 07               CALL   prtdec1   
0779   1E F6                  LD   e,-10   
077B   CD 86 07               CALL   prtdec1   
077E   0C                     INC   c   ; flag = true for at least digit
077F   1E FF                  LD   e,-1   
0781   CD 86 07               CALL   prtdec1   
0784   C1                     POP   bc   
0785   C9                     RET      
0786                PRTDEC1:      
0786   06 2F                  LD   b,"0"-1   
0788                PRTDEC2:      
0788   04                     INC   b   
0789   19                     ADD   hl,de   
078A   38 FC                  JR   c,prtdec2   
078C   ED 52                  SBC   hl,de   
078E   3E 30                  LD   a,"0"   
0790   B8                     CP   b   
0791   20 05                  JR   nz,prtdec3   
0793   AF                     XOR   a   
0794   B1                     OR   c   
0795   C8                     RET   z   
0796   18 01                  JR   prtdec4   
0798                PRTDEC3:      
0798   0C                     INC   c   
0799                PRTDEC4:      
0799   78                     LD   a,b   
079A   C3 85 00               JP   putchar   
079D                             ; 
079D                PRTHEX:      
079D                             ; Display hl as a 16-bit number in hex.
079D   C5                     PUSH   bc   ; preserve the IP
079E   7C                     LD   a,h   
079F   CD A8 07               CALL   prthex2   
07A2   7D                     LD   a,l   
07A3   CD A8 07               CALL   prthex2   
07A6   C1                     POP   bc   
07A7   C9                     RET      
07A8                PRTHEX2:      
07A8   4F                     LD   c,a   
07A9   1F                     RRA      
07AA   1F                     RRA      
07AB   1F                     RRA      
07AC   1F                     RRA      
07AD   CD B1 07               CALL   prthex3   
07B0   79                     LD   a,c   
07B1                PRTHEX3:      
07B1   E6 0F                  AND   0x0F   
07B3   C6 90                  ADD   a,0x90   
07B5   27                     DAA      
07B6   CE 40                  ADC   a,0x40   
07B8   27                     DAA      
07B9   C3 85 00               JP   putchar   
07BC                PRINTSTR:      
07BC   E3                     EX   (sp),hl   ; swap			
07BD   CD 75 05               CALL   putStr   
07C0   23                     INC   hl   ; inc past null
07C1   E3                     EX   (sp),hl   ; put it back	
07C2   C9                     RET      
07C3                LOOKUPREF:      
07C3   16 00                  LD   d,0   
07C5                LOOKUPREF0:      
07C5   FE 61                  CP   "a"   
07C7   30 06                  JR   nc,lookupRef2   
07C9                LOOKUPREF1:      
07C9   D6 61                  SUB   "a"   
07CB   1E 00                  LD   e,0   
07CD   18 04                  JR   lookupRef3   
07CF                LOOKUPREF2:      
07CF   D6 61                  SUB   "a"   
07D1   1E 34                  LD   e,26*2   
07D3                LOOKUPREF3:      
07D3   87                     ADD   a,a   
07D4   83                     ADD   a,e   
07D5   21 C0 1B               LD   hl,DATA   
07D8   85                     ADD   a,l   
07D9   6F                     LD   l,a   
07DA   3E 00                  LD   a,0   
07DC   8C                     ADC   a,h   
07DD   67                     LD   h,a   
07DE   AF                     XOR   a   
07DF   B3                     OR   e   ; sets z flag if a-z
07E0   C9                     RET      
07E1                             ; **************************************************************************
07E1                             ; calculate nesting value
07E1                             ; a is char to be tested,
07E1                             ; e is the nesting value (initially 0)
07E1                             ; e is increased by ( and [
07E1                             ; e is decreased by ) and ]
07E1                             ; e has its bit 7 toggled by `
07E1                             ; limited to 127 levels
07E1                             ; **************************************************************************
07E1                NESTING:      
07E1   FE 22                  CP   $22   ; quote char
07E3   20 0A                  JR   nz,nesting1   
07E5   CB 7B                  BIT   7,e   
07E7   28 03                  JR   z,nesting1a   
07E9   CB BB                  RES   7,e   
07EB   C9                     RET      
07EC                NESTING1A:      
07EC   CB FB                  SET   7,e   
07EE   C9                     RET      
07EF                NESTING1:      
07EF   CB 7B                  BIT   7,e   
07F1   C0                     RET   nz   
07F2   FE 7B                  CP   "{"   
07F4   28 08                  JR   z,nesting2   
07F6   FE 5B                  CP   "["   
07F8   28 04                  JR   z,nesting2   
07FA   FE 28                  CP   "("   
07FC   20 02                  JR   nz,nesting3   
07FE                NESTING2:      
07FE   1C                     INC   e   
07FF   C9                     RET      
0800                NESTING3:      
0800   FE 7D                  CP   "}"   
0802   28 07                  JR   z,nesting4   
0804   FE 5D                  CP   "]"   
0806   28 03                  JR   z,nesting4   
0808   FE 29                  CP   ")"   
080A   C0                     RET   nz   
080B                NESTING4:      
080B   1D                     DEC   e   
080C   C9                     RET      
080D                             ; 
080D                STRDEF:      
080D   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0811   D5                     PUSH   de   ; save start of string
0812   03                     INC   bc   ; point to next char
0813   18 03                  JR   strDef2   
0815                STRDEF1:      
0815   12                     LD   (de),a   
0816   13                     INC   de   ; increase count
0817   03                     INC   bc   ; point to next char
0818                STRDEF2:      
0818   0A                     LD   a,(bc)   
0819   FE 27                  CP   "'"   ; ' is the string terminator
081B   20 F8                  JR   nz,strDef1   
081D   AF                     XOR   a   ; write null to terminate string
081E   12                     LD   (de),a   
081F   13                     INC   de   
0820   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0824   C3 5F 02               JP   next   
0827                CHAR:        
0827   21 00 00               LD   hl,0   ; if `` is empty
082A                CHAR1:       
082A   03                     INC   bc   ; point to next char
082B   0A                     LD   a,(bc)   
082C   FE 60                  CP   "`"   ; ` is the string terminator
082E   28 09                  JR   z,char3   
0830   FE 5C                  CP   $5c   ; \ is the escape
0832   20 02                  JR   nz,char2   
0834   03                     INC   bc   
0835   0A                     LD   a,(bc)   
0836                CHAR2:       
0836   6F                     LD   l,a   
0837   18 F1                  JR   char1   
0839                CHAR3:       
0839   E5                     PUSH   hl   
083A                             ; dec bc
083A   C3 5F 02               JP   next   
083D                EXEC:        ; execute lambda at pointer
083D   E1                     POP   hl   ; hl = pointer to lambda
083E                EXEC1:       
083E   7C                     LD   a,h   ; skip if destination address is null
083F   B5                     OR   l   
0840   28 0E                  JR   z,exec3   
0842                EXEC2:       
0842   C5                     PUSH   bc   ; push IP
0843   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0845   FD E5                  PUSH   iy   ; push BP
0847   FD 21 00 00            LD   iy,0   ; BP = SP
084B   FD 39                  ADD   iy,sp   
084D   44 4D                  LD   bc,hl   ; IP = pointer to lambda
084F   0B                     DEC   bc   ; dec to prepare for next routine
0850                EXEC3:       
0850   C3 5F 02               JP   next   
0853                LAMBDA:      
0853   03                     INC   bc   
0854   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
0857   E5                     PUSH   hl   
0858   16 01                  LD   d,1   ; nesting: count first parenthesis
085A                LAMBDA1:      ; Skip to end of definition
085A   0A                     LD   a,(bc)   ; Get the next character
085B   03                     INC   bc   ; Point to next character
085C   77                     LD   (hl),a   
085D   23                     INC   hl   
085E   FE 27                  CP   "'"   
0860   28 1C                  JR   z,lambda2   
0862   FE 28                  CP   "("   
0864   28 18                  JR   z,lambda2   
0866   FE 29                  CP   ")"   
0868   28 14                  JR   z,lambda2   
086A   FE 7B                  CP   "{"   
086C   28 10                  JR   z,lambda2   
086E   FE 7D                  CP   "}"   ; Is it the end of the definition?
0870   28 0C                  JR   z,lambda2   
0872   FE 5B                  CP   "["   
0874   28 08                  JR   z,lambda2   
0876   FE 5D                  CP   "]"   
0878   28 04                  JR   z,lambda2   
087A   FE 60                  CP   "`"   
087C   20 DC                  JR   nz,lambda1   
087E                LAMBDA2:      
087E   14                     INC   d   
087F   CB 42                  BIT   0,d   ; balanced?
0881   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0883   FE 7D                  CP   "}"   ; Is it the end of the definition?
0885   20 D3                  JR   nz,lambda1   ; get the next element
0887   0B                     DEC   bc   
0888   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
088B   C3 5F 02               JP   next   
088E                LAMBDAEND:      
088E   E1                     POP   hl   ; hl = last result
088F   FD 54                  LD   d,iyh   ; de = BP
0891   FD 5D                  LD   e,iyl   
0893   EB                     EX   de,hl   ; hl = BP, de = result
0894   F9                     LD   sp,hl   ; sp = BP
0895   E1                     POP   hl   ; hl = old BP
0896   C1                     POP   bc   ; pop scope ptr (discard)
0897   C1                     POP   bc   ; bc = IP
0898   F9                     LD   sp,hl   ; sp = old BP
0899   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
089D   FD 39                  ADD   iy,sp   
089F   D5                     PUSH   de   ; push result
08A0   C3 5F 02               JP   next   
08A3                BLOCK:       
08A3   03                     INC   bc   
08A4   C5                     PUSH   bc   ; return first opcode of block
08A5   16 01                  LD   d,1   ; nesting: count first parenthesis
08A7                BLOCK1:      ; Skip to end of definition
08A7   0A                     LD   a,(bc)   ; Get the next character
08A8   03                     INC   bc   ; Point to next character
08A9   FE 27                  CP   "'"   
08AB   28 1C                  JR   z,block2   
08AD   FE 28                  CP   "("   
08AF   28 18                  JR   z,block2   
08B1   FE 29                  CP   ")"   
08B3   28 14                  JR   z,block2   
08B5   FE 7B                  CP   "{"   
08B7   28 10                  JR   z,block2   
08B9   FE 7D                  CP   "}"   
08BB   28 0C                  JR   z,block2   
08BD   FE 5B                  CP   "["   
08BF   28 08                  JR   z,block2   
08C1   FE 5D                  CP   "]"   
08C3   28 04                  JR   z,block2   
08C5   FE 60                  CP   "`"   
08C7   20 DE                  JR   nz,block1   
08C9                BLOCK2:      
08C9   14                     INC   d   
08CA   CB 42                  BIT   0,d   ; balanced?
08CC   20 D9                  JR   nz,block1   ; not balanced, get the next element
08CE   FE 29                  CP   ")"   ; Is it the end of the block?
08D0   20 D5                  JR   nz,block1   ; get the next element
08D2   0B                     DEC   bc   
08D3   C3 5F 02               JP   next   
08D6                BLOCKEND:      
08D6   E1                     POP   hl   ; hl = last result
08D7   FD 54                  LD   d,iyh   ; de = BP
08D9   FD 5D                  LD   e,iyl   
08DB   EB                     EX   de,hl   ; hl = BP, de = result
08DC   F9                     LD   sp,hl   ; sp = BP
08DD   E1                     POP   hl   ; hl = old BP
08DE   C1                     POP   bc   ; pop SCP (discard)
08DF   C1                     POP   bc   ; bc = IP
08E0   F9                     LD   sp,hl   ; sp = old BP
08E1   FD 21 00 00            LD   iy,0   ; iy = sp
08E5   FD 39                  ADD   iy,sp   
08E7   D5                     PUSH   de   ; push result
08E8   C3 5F 02               JP   next   
08EB                ARG:         
08EB   03                     INC   bc   ; get next char
08EC   0A                     LD   a,(bc)   
08ED   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
08EF   E6 07                  AND   $07   ; mask
08F1   87                     ADD   a,a   ; double
08F2   6F                     LD   l,a   ; hl = offset into args
08F3   26 00                  LD   h,0   
08F5   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
08F8   FD 56 03               LD   d,(iy+3)   
08FB   EB                     EX   de,hl   ; hl = SCP - offset
08FC   B7                     OR   a   
08FD   ED 52                  SBC   hl,de   
08FF   2B                     DEC   hl   ; de = arg
0900   56                     LD   d,(hl)   
0901   2B                     DEC   hl   
0902   5E                     LD   e,(hl)   
0903   D5                     PUSH   de   ; push arg
0904   C3 5F 02               JP   next   
0907                             ; 
0907                IN:          
0907   E1                     POP   hl   ; hl = string
0908   D1                     POP   de   ; de = char
0909                IN1:         
0909   7E                     LD   a,(hl)   
090A   23                     INC   hl   
090B   FE 00                  CP   0   ; is end of string
090D   28 04                  JR   z,in2   
090F   BB                     CP   e   
0910   20 F7                  JR   nz,in1   
0912   B7                     OR   a   ; a is never 0, or a resets zero flag
0913                IN2:         
0913   21 00 00               LD   hl,0   ; hl = result
0916   28 01                  JR   z,in3   
0918   2B                     DEC   hl   ; if nz de = $ffff
0919                IN3:         
0919   E5                     PUSH   hl   ; push result
091A   C3 5F 02               JP   next   
091D                NEWADD2:      
091D   C5                     PUSH   bc   ; push IP
091E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0921   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0924   D5                     PUSH   de   ; push SCP
0925   FD E5                  PUSH   iy   ; push base pointer
0927   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
092B   FD 39                  ADD   iy,sp   ; 
092D   FD 56 FF               LD   d,(iy-1)   
0930   FD 5E FE               LD   e,(iy-2)   
0933   FD 66 FD               LD   h,(iy-3)   
0936   FD 6E FC               LD   l,(iy-4)   
0939   19                     ADD   hl,de   ; hl = hl + de
093A   EB                     EX   de,hl   ; de = result
093B   E1                     POP   hl   ; hl = old BP
093C   C1                     POP   bc   ; pop SCP (discard)
093D   C1                     POP   bc   ; bc = IP
093E   F9                     LD   sp,hl   ; sp = old BP
093F   FD 21 00 00            LD   iy,0   
0943   FD 39                  ADD   iy,sp   
0945   D5                     PUSH   de   ; push result
0946   C3 5F 02               JP   next   
0949                IF:          
0949   11 00 00               LD   de,0   ; null pointer for else
094C   18 01                  JR   ifte1   
094E                IFTE:        
094E   D1                     POP   de   ; de = else
094F                IFTE1:       
094F   E1                     POP   hl   ; hl = then
0950   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0951   23                     INC   hl   ; check for true
0952   7C                     LD   a,h   
0953   B5                     OR   l   
0954   E1                     POP   hl   ; hl = then
0955   28 01                  JR   z,ifte2   
0957   EB                     EX   de,hl   ; condition = false, hl = else
0958                IFTE2:       
0958   7C                     LD   a,h   ; check if hl is null
0959   B5                     OR   l   
095A   CA 5F 02               JP   z,next   
095D   C5                     PUSH   bc   ; push IP
095E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0961   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0964   D5                     PUSH   de   ; push SCP
0965   FD E5                  PUSH   iy   ; push BP
0967   FD 21 00 00            LD   iy,0   ; iy = sp
096B   FD 39                  ADD   iy,sp   
096D   44 4D                  LD   bc,hl   ; IP = then
096F   0B                     DEC   bc   
0970   C3 5F 02               JP   next   
0973                SWITCH:      
0973   E1                     POP   hl   ; get condition from stack
0974   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0975   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0978   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
097B   D5                     PUSH   de   ; push SCP
097C   FD E5                  PUSH   iy   ; push BP
097E   FD 21 00 00            LD   iy,0   ; BP = SP
0982   FD 39                  ADD   iy,sp   
0984   E5                     PUSH   hl   ; push condition as first arg of new frame
0985   C3 5F 02               JP   next   
0988                CASE:        
0988   FD 66 FF               LD   h,(iy-1)   ; hl = selector
098B   FD 6E FE               LD   l,(iy-2)   
098E   23                     INC   hl   ; hl -= 1 index from second arg
098F   29                     ADD   hl,hl   ; hl *= 2 word offset
0990   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0992   FD 5D                  LD   e,iyl   
0994   EB                     EX   de,hl   
0995   B7                     OR   a   ; hl = BP - offset
0996   ED 52                  SBC   hl,de   
0998   54 5D                  LD   de,hl   ; save arg ptr
099A   2B                     DEC   hl   ; hl += 2
099B   2B                     DEC   hl   
099C   B7                     OR   a   ; arg ptr - stack pointer
099D   ED 72                  SBC   hl,sp   
099F   30 03                  JR   nc,case0   
09A1   D1                     POP   de   ; pop last arg
09A2   18 05                  JR   case1   
09A4                CASE0:       
09A4   EB                     EX   de,hl   
09A5   2B                     DEC   hl   ; de = arg
09A6   56                     LD   d,(hl)   
09A7   2B                     DEC   hl   
09A8   5E                     LD   e,(hl)   
09A9                CASE1:       
09A9   7A                     LD   a,d   ; is arg == null ? then skip
09AA   B3                     OR   e   
09AB   28 09                  JR   z,case2   
09AD   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
09B0   FD 70 05               LD   (iy+5),b   
09B3   42 4B                  LD   bc,de   ; IP = arg
09B5   0B                     DEC   bc   
09B6                CASE2:       
09B6   C3 5F 02               JP   next   
09B9                WORDS:       
09B9   21 02 00               LD   hl,2   
09BC   C3 BF 09               JP   bytes   
09BF                BYTES:       
09BF   21 01 00               LD   hl,1   
09C2                BYTES1:      
09C2   22 80 1B               LD   (vDataWidth),hl   
09C5   C3 5F 02               JP   next   
09C8                ARRAY:       
09C8   C5                     PUSH   bc   ; create stack frame, push IP
09C9   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
09CC   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
09CF   D5                     PUSH   de   ; push SCP
09D0   FD E5                  PUSH   iy   ; push BP
09D2   FD 21 00 00            LD   iy,0   ; BP = SP
09D6   FD 39                  ADD   iy,sp   
09D8   C3 5F 02               JP   next   
09DB                ARRAYEND:      
09DB   FD 54                  LD   d,iyh   ; de = BP
09DD   FD 5D                  LD   e,iyl   
09DF   62 6B                  LD   hl,de   ; hl = de
09E1   B7                     OR   a   
09E2   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
09E4   C5                     PUSH   bc   ; bc' = IP
09E5   D9                     EXX      
09E6   C1                     POP   bc   
09E7   D9                     EXX      
09E8   44 4D                  LD   bc,hl   ; bc = count
09EA   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
09ED   71                     LD   (hl),c   ; write count before array data
09EE   23                     INC   hl   
09EF   70                     LD   (hl),b   
09F0   23                     INC   hl   
09F1   E5                     PUSH   hl   ; hl = ptr to array (index 0)
09F2   D9                     EXX      
09F3   E1                     POP   hl   ; hl' = ptr to array (index 0)
09F4   D9                     EXX      
09F5   3A 80 1B               LD   a,(vDataWidth)   
09F8   FE 01                  CP   1   ; byte?
09FA   20 0D                  JR   nz,arrayEnd2   
09FC   EB                     EX   de,hl   
09FD                ARRAYEND1:      
09FD   1B                     DEC   de   
09FE   1B                     DEC   de   
09FF   1A                     LD   a,(de)   
0A00   77                     LD   (hl),a   
0A01   23                     INC   hl   
0A02   0B                     DEC   bc   
0A03   79                     LD   a,c   
0A04   B0                     OR   b   
0A05   20 F6                  JR   nz,arrayEnd1   
0A07   18 10                  JR   arrayEnd4   
0A09                ARRAYEND2:      
0A09   1B                     DEC   de   
0A0A   1A                     LD   a,(de)   
0A0B   08                     EX   af,af'   
0A0C   1B                     DEC   de   
0A0D   1A                     LD   a,(de)   
0A0E   77                     LD   (hl),a   
0A0F   23                     INC   hl   
0A10   08                     EX   af,af'   
0A11   1A                     LD   a,(de)   
0A12   77                     LD   (hl),a   
0A13   23                     INC   hl   
0A14   0B                     DEC   bc   
0A15   79                     LD   a,c   
0A16   B0                     OR   b   
0A17   20 F0                  JR   nz,arrayEnd2   
0A19                ARRAYEND4:      
0A19   FD 54                  LD   d,iyh   ; de = BP
0A1B   FD 5D                  LD   e,iyl   
0A1D   EB                     EX   de,hl   ; hl = BP, de = result
0A1E   F9                     LD   sp,hl   ; sp = BP
0A1F   E1                     POP   hl   ; hl = old BP
0A20   C1                     POP   bc   ; pop SCP (discard)
0A21   C1                     POP   bc   ; bc = IP
0A22   F9                     LD   sp,hl   ; sp = old BP
0A23   FD 21 00 00            LD   iy,0   ; iy = sp
0A27   FD 39                  ADD   iy,sp   
0A29   D9                     EXX      
0A2A   E5                     PUSH   hl   
0A2B   C5                     PUSH   bc   
0A2C   D9                     EXX      
0A2D   C1                     POP   bc   
0A2E   C3 5F 02               JP   next   
0A31                             ; updateEntry:
0A31                             ;     ld bc,
0A31                             ;     pop hl                          ; pointer to args
0A31                             ;     ld e,(hl)
0A31                             ;     ret
0A31                             ; hash C-string in BC, result in HL
0A31                HASHSTR:      
0A31   21 00 00               LD   hl,0   
0A34                HASHSTR1:      
0A34   0A                     LD   a,(bc)   ; load next char
0A35   03                     INC   bc   
0A36   FE 00                  CP   0   ; null?
0A38   C8                     RET   z   
0A39                HASHSTR2:      
0A39   16 00                  LD   d,0   
0A3B   5F                     LD   e,a   
0A3C   19                     ADD   hl,de   
0A3D   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0A3F   29                     ADD   hl,hl   ; shift left
0A40   19                     ADD   hl,de   ; add
0A41   29                     ADD   hl,hl   ; shift left
0A42   29                     ADD   hl,hl   ; shift left
0A43   29                     ADD   hl,hl   ; shift left
0A44   29                     ADD   hl,hl   ; shift left
0A45   29                     ADD   hl,hl   ; shift left
0A46   29                     ADD   hl,hl   ; shift left
0A47   19                     ADD   hl,de   ; add
0A48   18 EA                  JR   hashStr1   
0A4A                             ; add entry to hash slots and hash pointers
0A4A                             ; bc = hash (b = hi, c = lo), de = addr
0A4A                             ; sets carry if successful
0A4A                DEFINEENTRY:      
0A4A   CB 21                  SLA   c   ; lo = lo * 2
0A4C   69                     LD   l,c   ; lo1 = lo
0A4D   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0A4F                DEFINEENTRY0:      
0A4F   7E                     LD   a,(hl)   ; a = (lo1)
0A50   FE FF                  CP   UNUSED   ; is it unused?
0A52   28 12                  JR   z,defineEntry3   ; yes, add entry
0A54   79                     LD   a,c   ; a = lo
0A55   BE                     CP   (hl)   ; compare (lo1) with lo
0A56   20 06                  JR   nz,defineEntry1   ; no match loop around
0A58   2C                     INC   l   
0A59   78                     LD   a,b   ; a = hi
0A5A   BE                     CP   (hl)   ; compare (lo1+1) with hi
0A5B   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0A5D   2D                     DEC   l   ; restore l
0A5E                DEFINEENTRY1:      
0A5E   2C                     INC   l   ; try next entry
0A5F   2C                     INC   l   
0A60   79                     LD   a,c   ; compare lo and lo1
0A61   BD                     CP   l   ; if equal then there's no space left, reject
0A62   20 EB                  JR   nz,defineEntry0   
0A64                DEFINEENTRY2:      
0A64   3F                     CCF      ; clear carry flag, failure
0A65   C9                     RET      
0A66                DEFINEENTRY3:      ; new entry
0A66   71                     LD   (hl),c   ; (lo1) = hash lo
0A67   23                     INC   hl   
0A68   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0A69   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0A6B   72                     LD   (hl),d   
0A6C   2B                     DEC   hl   
0A6D   73                     LD   (hl),e   ; (slot + 2) = address
0A6E   37                     SCF      ; set carry flag, success
0A6F   C9                     RET      
0A70                             ; looks up hash and returns address
0A70                             ; bc = hash
0A70                             ; returns addr in hl, sets carry if successful
0A70                LOOKUPENTRY:      
0A70   CB 21                  SLA   c   ; lo = lo * 2
0A72   69                     LD   l,c   ; lo1 = lo
0A73   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0A75                LOOKUPENTRY0:      
0A75   7E                     LD   a,(hl)   ; a = (hl), slot
0A76   FE FF                  CP   UNUSED   ; is it unused?
0A78   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0A7A   79                     LD   a,c   ; a = lo
0A7B   BE                     CP   (hl)   ; compare (lo1) with lo
0A7C   20 06                  JR   nz,lookupEntry1   ; no match loop around
0A7E   2C                     INC   l   
0A7F   78                     LD   a,b   ; a = hi
0A80   BE                     CP   (hl)   ; compare (lo1+1) with hi
0A81   28 09                  JR   z,lookupEntry3   
0A83   2D                     DEC   l   
0A84                LOOKUPENTRY1:      
0A84   2C                     INC   l   
0A85   2C                     INC   l   
0A86   79                     LD   a,c   
0A87   BD                     CP   l   ; no space left, reject
0A88   20 EB                  JR   nz,lookupEntry0   
0A8A                LOOKUPENTRY2:      
0A8A   3F                     CCF      ; clear carry flag, failure
0A8B   C9                     RET      
0A8C                LOOKUPENTRY3:      
0A8C   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0A8E   56                     LD   d,(hl)   
0A8F   2D                     DEC   l   ; restore l
0A90   5E                     LD   e,(hl)   ; (slot + 2) = address
0A91   EB                     EX   de,hl   
0A92   37                     SCF      
0A93   C9                     RET      
0A94                             ; str -- num
0A94                HASH:        
0A94   E1                     POP   hl   
0A95   C5                     PUSH   bc   
0A96   44 4D                  LD   bc,hl   
0A98   CD 31 0A               CALL   hashStr   
0A9B   C1                     POP   bc   
0A9C   E5                     PUSH   hl   
0A9D   C3 5F 02               JP   next   
0AA0                             ; str addr -- bool
0AA0                DEF:         
0AA0   E1                     POP   hl   ; hl = addr
0AA1   E3                     EX   (sp),hl   ; hl = str pointer (sp) = addr
0AA2   C5                     PUSH   bc   
0AA3   44 4D                  LD   bc,hl   
0AA5   CD 31 0A               CALL   hashStr   ; hl = hash
0AA8   44 4D                  LD   bc,hl   ; bc = hash
0AAA   E1                     POP   hl   ; hl = old BC
0AAB   E3                     EX   (sp),hl   ; hl = addr
0AAC   EB                     EX   de,hl   ; de = addr
0AAD   CD 4A 0A               CALL   defineEntry   
0AB0   21 00 00               LD   hl,0   ; if c return TRUE
0AB3   30 01                  JR   nc,def1   
0AB5   2B                     DEC   hl   
0AB6                DEF1:        
0AB6   C1                     POP   bc   
0AB7   E5                     PUSH   hl   
0AB8   C3 5F 02               JP   next   
0ABB                             ; str -- addr
0ABB                ADDR:        
0ABB   E1                     POP   hl   ; hl = str pointer
0ABC   C5                     PUSH   bc   
0ABD   44 4D                  LD   bc,hl   
0ABF   CD 31 0A               CALL   hashStr   ; hl = hash
0AC2   44 4D                  LD   bc,hl   
0AC4   CD 70 0A               CALL   lookupEntry   
0AC7   38 03                  JR   c,addr1   
0AC9   21 00 00               LD   hl,0   
0ACC                ADDR1:       
0ACC   C1                     POP   bc   
0ACD   E5                     PUSH   hl   
0ACE   C3 5F 02               JP   next   
0AD1                DEFINE:      
0AD1   E1                     POP   hl   
0AD2   7E                     LD   a,(hl)   
0AD3   23                     INC   hl   
0AD4   44 4D                  LD   bc,hl   
0AD6   5F                     LD   e,a   
0AD7   16 00                  LD   d,0   
0AD9   19                     ADD   hl,de   
0ADA   5E                     LD   e,(hl)   
0ADB   23                     INC   hl   
0ADC   56                     LD   d,(hl)   
0ADD   23                     INC   hl   
0ADE   E5                     PUSH   hl   ; bc = str
0ADF   D5                     PUSH   de   
0AE0   CD 31 0A               CALL   hashStr   ; hl = hash
0AE3   D1                     POP   de   
0AE4   44 4D                  LD   bc,hl   
0AE6   C3 4A 0A               JP   defineEntry   
0AE9                IDENT:       
0AE9   11 00 1A               LD   de,PAD   
0AEC   18 03                  JR   ident1   
0AEE   26 02                  LD   h,msb(opcodes)   ; this table identifies the char type
0AF0                IDENT0:      ; copy to PAD area
0AF0   03                     INC   bc   ; characters that are part of the identifier
0AF1                IDENT1:      ; 0-9 A-Z a-z _
0AF1   0A                     LD   a,(bc)   
0AF2   6F                     LD   l,a   
0AF3   7E                     LD   a,(hl)   
0AF4   D6 21                  SUB   " "+1   ; opcodes start above white space
0AF6   FE 30                  CP   lsb(ident_)   
0AF8   20 09                  JR   nz,ident2   
0AFA   FE 00                  CP   lsb(num_)   
0AFC   20 05                  JR   nz,ident2   
0AFE   7D                     LD   a,l   
0AFF   12                     LD   (de),a   
0B00   13                     INC   de   
0B01   18 ED                  JR   ident0   
0B03                IDENT2:      ; non identifier char detected
0B03   0B                     DEC   bc   
0B04   AF                     XOR   a   
0B05   77                     LD   (hl),a   ; terminate string with null
0B06   C5                     PUSH   bc   
0B07   01 00 1A               LD   bc,PAD   
0B0A   CD 31 0A               CALL   hashStr   ; hl = hash
0B0D   44 4D                  LD   bc,hl   
0B0F   CD 70 0A               CALL   lookupEntry   
0B12   C1                     POP   bc   
0B13   38 03                  JR   c,ident3   ; todo: no entry? print an error message
0B15   C3 5F 02               JP   next   
0B18                IDENT3:      
0B18   E9                     JP   (hl)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                          DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1 2 +", 3
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 81 05               CALL   init   
4006   CD 3D 08               CALL   exec   
4009   31 20 32 20 2B 00      .CSTR   "1 2 +"   
400F                          ;*Macro unroll:  expect "1 2 +",3
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 03 00               LD   DE,3   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 50                  JR   Z,expectM_0_2138S43   
401B   CD BC 07               CALL   printStr   
401E   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
402A   CD BC 07               CALL   printStr   
402D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403C   21 03 00               LD   HL,3   
403F   CD 55 07               CALL   prtdec   
4042   CD BC 07               CALL   printStr   
4045   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4052   E1                     POP   hl   
4053   E5                     PUSH   hl   
4054   CD 55 07               CALL   prtdec   
4057   E1                     POP   hl   
4058   CD BC 07               CALL   printStr   
405B   20 28 23 00            .CSTR   " (#"   
405F   CD 9D 07               CALL   prthex   
4062   CD BC 07               CALL   printStr   
4065   29 0D 0A 00            .CSTR   ")\r\n"   
4069   76                     HALT      
406A   00                     .CSTR      
406B                EXPECTM_0_2138S43:      
406B   E1                     POP   HL   
406C                             ; test "1 2 add", 3
406C                             ; test "'H' 2 def 'H' addr", 2
406C                             ; test "'H' 2 de 'J' 3 de 'H' lo 'J' lo +", 5
406C                             ; test "'H' 2 de", TRUE
406C                             ; test "'H' ha", $3648
406C                             ; test "'H' {1} de 'H' lo", 1
406C                             ; test "by [`A` `B` `C`]", 0
406C                             ; test "by [`A` `B` `C`] 1 ge", "B"
406C                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
406C                             ; test "wo [10 20 30] 1 ge", 10
406C                             ; test "wo [10 20 30] 1 50 set 1 get", 50
406C                             ; test "1 2 +", 3
406C                             ; test "4 1 2 +", 3
406C                             ; test "1", 1
406C                             ; test "2", 2
406C                             ; test "``", 0
406C                             ; test "`a`", $61
406C                             ; test "`\\``", $60
406C                             ; test "`b` 'cba' in", -1
406C                             ; test "`x` 'cba' in", 0
406C                             ; test "5 0 (1) if", 5
406C                             ; test "0 (1) (2) ife", 2
406C                             ; test "5 -1 (1) if", 1
406C                             ; test "-1 (1) (2) ife", 1
406C                             ; test "9 sw (1) (5) ca", 5
406C                             ; test "0 sw (1) ca", 1
406C                             ; test "1 sw (1) (2) (3) ca", 2
406C                             ; test "5 -1 (2) if", 2
406C                             ; test "5 0 (2) if", 5
406C                             ; test "5 0 (0 (2) if) if", 5
406C                             ; test "5 0 (-1 (2) if) if", 5
406C                             ; test "5 -1 (2) if", 2
406C                             ; test "5 -1 (-1 (2) if) if", 2
406C                             ; test "(1) ex", 1
406C                             ; test "2 ($1) ex", 2
406C                             ; test "2 4 ($2) ex", 4
406C                             ; test "((1) ex) ex", 1
406C                             ; test "5 (-1 ($1) if) ex", 5
406C                             ; test "'A' @", 65
406C                             ; test "1", 1
406C                             ; test "0", 0
406C                             ; test "10", 10
406C                             ; test "123", 123
406C                             ; test "$10", $10
406C                             ; test "$FF", $FF
406C                             ; test "2 3 =", 0
406C                             ; test "3 3 =", 1
406C                             ; test "2 3 <", 1
406C                             ; test "3 3 <", 0
406C                             ; test "3 3 >", 0
406C                             ; test "4 3 >", 1
406C                             ; test "1 2 +", 3
406C                             ; test "123 456 +", 123+456
406C                             ; test "64 128 +", 64+128
406C                             ; test "5 3 -", 2
406C                             ; test "3 5 &", 1
406C                             ; test "3 5 |", 7
406C                             ; test "2 3 *", 6
406C                             ; test "1 2 3 + *", 5
406C                             ; ; test "1 2 3 ' +", 3
406C                             ; ; test "1_ 2 +",1
406C                             ; ; test "1_ 1 +",0
406C                             ; ; call enter
406C                             ; ;     .cstr "1 3",$22,"+"
406C                             ; ; expect "1 3 DUP +", 6
406C                             ; ; test "5 2/'", 2
406C                             ; ; test "3 5$ -", 2
406C                             ; ; test "5 2/$ '", 1
406C                             ; ; test "2 3%++", 7
406C                             ; ; test "1 2 3~''", 2
406C                             ; ; test "1 2 3~+*", 8
406C                             ; ; test "2a!a@",2
406C                             ; ; test "3x! 1 x@+x! x@", 4
406C                             ; ; test "3x! 1_ x@+x! x@", 2
406C                             ; ; test "1{", 2
406C                             ; ; test "1}", 0
406C                             ; ; test "2}", 1
406C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
406C                             ; ; test "(2) \\^", 2
406C                             ; ; test ":X1; X", 1
406C                             ; ; test ":A100;A", 100
406C                             ; ; test ":Aa!; 3A a@", 3
406C                             ; ; test ":Aa!;:Ba@;4AB", 4
406C                             ; ; test "[]$ '", 0
406C                             ; ; test "[3]$ '", 1
406C                             ; ; test "[3]'@", 3
406C                             ; ; test "[1 2 3]'@", 1
406C                             ; ; test "[1 2 3]'2+@", 2
406C                             ; ; test "\\h@[1]''\\h@$-", 2
406C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
406C                             ; ; test "\\[]$ '", 0
406C                             ; ; test "\\[3]'\\@", 3
406C                             ; ; test "\\[3]$ '", 1
406C                             ; ; test "\\[1 2 3]'\\@", 1
406C                             ; ; test "\\[1 2 3]'1+\\@", 2
406C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
406C                             ; ; test "\\h@\\[1]''\\h@$-", 1
406C                             ; ; test "\\`A`\\@",65
406C                             ; ; test "0 0(1+)", 0
406C                             ; ; test "0 1(1+)", 1
406C                             ; ; test "0 2(1+)", 2
406C                             ; ; test "0 1(0(1+))", 0
406C                             ; ; test "0 1(1(1+))", 1
406C                             ; ; test "0 2(1(1+))", 2
406C                             ; ; test "0 2(2(1+))", 4
406C                             ; ; test "0 1(\\i@+)", 0
406C                             ; ; test "0 2(\\i@+)", 1
406C                             ; ; test "0 3(\\i@+)", 3
406C                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
406C                             ; ; test "0t! 10(1 t@+t!) t@",10
406C                             ; ; test "0(100)(200)",200
406C                             ; ; test "1(100)(200)",100
406C                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
406C                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
406C                             ; ; test ":X10;\\0X", 10
406C                             ; ; test "2 \\1x! \\1x@", 2
406C   CD BC 07               CALL   printStr   
406F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4075   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 257 IN Siena.asm
                    > USED AT LINE 419 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 287 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 677 IN Siena.asm
                    > USED AT LINE 929 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 995 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
                    > USED AT LINE 1540 IN Siena.asm
NULL:               0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 194 IN Siena.asm
ENDTEXT:            0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 196 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 717 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 52 IN Siena.asm
NEXT:               025F DEFINED AT LINE 183 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
                    > USED AT LINE 435 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
                    > USED AT LINE 466 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
                    > USED AT LINE 549 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 564 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
                    > USED AT LINE 576 IN Siena.asm
                    > USED AT LINE 580 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 604 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 664 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
                    > USED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1210 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1333 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
NEXT1:              026C DEFINED AT LINE 193 IN Siena.asm
                    > USED AT LINE 187 IN Siena.asm
ETX:                0274 DEFINED AT LINE 198 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
ETX1:               027D DEFINED AT LINE 203 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
EXIT:               027F DEFINED AT LINE 205 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
START:              0294 DEFINED AT LINE 225 IN Siena.asm
INTERPRET:          02AA DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
INTERPRET2:         02B4 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 280 IN Siena.asm
INTERPRET3:         02BC DEFINED AT LINE 244 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INTERPRET4:         02C2 DEFINED AT LINE 250 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
WAITCHAR:           02C7 DEFINED AT LINE 256 IN Siena.asm
                    > USED AT LINE 289 IN Siena.asm
                    > USED AT LINE 303 IN Siena.asm
MACRO:              02D6 DEFINED AT LINE 265 IN Siena.asm
WAITCHAR1:          02D8 DEFINED AT LINE 282 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
WAITCHAR3:          02E6 DEFINED AT LINE 291 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
WAITCHAR4:          02FC DEFINED AT LINE 307 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 316 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 318 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 320 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 322 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 324 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 326 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 328 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 330 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 332 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 335 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
BLOCK_:             0421 DEFINED AT LINE 339 IN Siena.asm
BLOCKEND_:          0424 DEFINED AT LINE 341 IN Siena.asm
CHAR_:              0427 DEFINED AT LINE 343 IN Siena.asm
ARRAY_:             042A DEFINED AT LINE 345 IN Siena.asm
ARRAYEND_:          042D DEFINED AT LINE 347 IN Siena.asm
IDENT_:             0430 DEFINED AT LINE 349 IN Siena.asm
AND_:               0433 DEFINED AT LINE 352 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
AND1:               043A DEFINED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 384 IN Siena.asm
OR_:                043F DEFINED AT LINE 365 IN Siena.asm
                    > USED AT LINE 822 IN Siena.asm
XOR_:               0448 DEFINED AT LINE 375 IN Siena.asm
                    > USED AT LINE 858 IN Siena.asm
XOR1:               0449 DEFINED AT LINE 377 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
INV_:               0451 DEFINED AT LINE 386 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
ADD_:               0456 DEFINED AT LINE 390 IN Siena.asm
                    > USED AT LINE 730 IN Siena.asm
HDOT_:              045D DEFINED AT LINE 397 IN Siena.asm
ETX_:               0464 DEFINED AT LINE 402 IN Siena.asm
EXIT_:              0467 DEFINED AT LINE 405 IN Siena.asm
FETCH_:             046A DEFINED AT LINE 408 IN Siena.asm
FETCH1:             046B DEFINED AT LINE 410 IN Siena.asm
KEY_:               0472 DEFINED AT LINE 418 IN Siena.asm
                    > USED AT LINE 798 IN Siena.asm
MUL_:               047C DEFINED AT LINE 425 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
NOP_:               047F DEFINED AT LINE 427 IN Siena.asm
SHL_:               0482 DEFINED AT LINE 431 IN Siena.asm
SHR_:               0488 DEFINED AT LINE 438 IN Siena.asm
SHR1:               0489 DEFINED AT LINE 440 IN Siena.asm
STORE_:             0491 DEFINED AT LINE 446 IN Siena.asm
NEG_:               0499 DEFINED AT LINE 454 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
SUB_:               049F DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
SUB2:               04A1 DEFINED AT LINE 462 IN Siena.asm
                    > USED AT LINE 457 IN Siena.asm
EQ_:                04A8 DEFINED AT LINE 468 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
FALSE_:             04AF DEFINED AT LINE 474 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
GT_:                04B6 DEFINED AT LINE 479 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
LT_:                04BA DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 806 IN Siena.asm
LT1:                04BC DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
TRUE_:              04C4 DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
GTE_:               04CB DEFINED AT LINE 497 IN Siena.asm
LTE_:               04CF DEFINED AT LINE 501 IN Siena.asm
LTE1:               04D1 DEFINED AT LINE 504 IN Siena.asm
                    > USED AT LINE 500 IN Siena.asm
MOD_:               04DA DEFINED AT LINE 510 IN Siena.asm
DIV_:               04DA DEFINED AT LINE 511 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
DIV:                04DC DEFINED AT LINE 518 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
DIV1:               04E6 DEFINED AT LINE 528 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
DIV2:               04F3 DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 534 IN Siena.asm
DIV3:               04F4 DEFINED AT LINE 539 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
DIV4:               04F9 DEFINED AT LINE 544 IN Siena.asm
CFETCH_:            04FF DEFINED AT LINE 551 IN Siena.asm
COMMENT_:           0507 DEFINED AT LINE 558 IN Siena.asm
                    > USED AT LINE 562 IN Siena.asm
CSTORE_:            0511 DEFINED AT LINE 566 IN Siena.asm
EMIT_:              0517 DEFINED AT LINE 572 IN Siena.asm
PROMPT_:            051F DEFINED AT LINE 578 IN Siena.asm
INPORT_:            0525 DEFINED AT LINE 583 IN Siena.asm
NEWLN_:             0531 DEFINED AT LINE 593 IN Siena.asm
OUTPORT_:           0537 DEFINED AT LINE 597 IN Siena.asm
PRTSTR_:            0541 DEFINED AT LINE 606 IN Siena.asm
PRTSTR:             0541 DEFINED AT LINE 607 IN Siena.asm
CLOSURE_:           0548 DEFINED AT LINE 623 IN Siena.asm
FILTER_:            0548 DEFINED AT LINE 624 IN Siena.asm
                    > USED AT LINE 766 IN Siena.asm
GET_:               0548 DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
LET_:               0548 DEFINED AT LINE 626 IN Siena.asm
                    > USED AT LINE 802 IN Siena.asm
MAP_:               0548 DEFINED AT LINE 627 IN Siena.asm
                    > USED AT LINE 810 IN Siena.asm
PRINT_:             0548 DEFINED AT LINE 628 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
SCAN_:              0548 DEFINED AT LINE 629 IN Siena.asm
                    > USED AT LINE 830 IN Siena.asm
SET_:               0548 DEFINED AT LINE 630 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
SHIFT_:             0548 DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
WHILE_:             0548 DEFINED AT LINE 632 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
VAR_:               0548 DEFINED AT LINE 633 IN Siena.asm
MUL:                054B DEFINED AT LINE 643 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
MUL2:               0555 DEFINED AT LINE 652 IN Siena.asm
                    > USED AT LINE 661 IN Siena.asm
PROMPT:             0568 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 232 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
PUTSTR0:            0571 DEFINED AT LINE 676 IN Siena.asm
                    > USED AT LINE 682 IN Siena.asm
PUTSTR:             0575 DEFINED AT LINE 679 IN Siena.asm
                    > USED AT LINE 609 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
CRLF:               057A DEFINED AT LINE 700 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 594 IN Siena.asm
INIT:               0581 DEFINED AT LINE 705 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 227 IN Siena.asm
                    > USED AT LINE 40
INIT1:              05A8 DEFINED AT LINE 723 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
NUM:                0707 DEFINED AT LINE 862 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
NUM0:               0710 DEFINED AT LINE 868 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
NUM1:               0711 DEFINED AT LINE 870 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
NUM2:               0729 DEFINED AT LINE 888 IN Siena.asm
                    > USED AT LINE 873 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
                    > USED AT LINE 912 IN Siena.asm
NUM3:               0734 DEFINED AT LINE 896 IN Siena.asm
                    > USED AT LINE 891 IN Siena.asm
HEXNUM:             0738 DEFINED AT LINE 900 IN Siena.asm
                    > USED AT LINE 321 IN Siena.asm
HEXNUM1:            073B DEFINED AT LINE 902 IN Siena.asm
                    > USED AT LINE 919 IN Siena.asm
HEXNUM2:            0743 DEFINED AT LINE 908 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
PRTDEC:             0755 DEFINED AT LINE 921 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0764 DEFINED AT LINE 936 IN Siena.asm
                    > USED AT LINE 927 IN Siena.asm
PRTDEC1:            0786 DEFINED AT LINE 952 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 949 IN Siena.asm
PRTDEC2:            0788 DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 957 IN Siena.asm
PRTDEC3:            0798 DEFINED AT LINE 966 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
PRTDEC4:            0799 DEFINED AT LINE 968 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
PRTHEX:             079D DEFINED AT LINE 972 IN Siena.asm
                    > USED AT LINE 399 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            07A8 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 976 IN Siena.asm
                    > USED AT LINE 978 IN Siena.asm
PRTHEX3:            07B1 DEFINED AT LINE 989 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
PRINTSTR:           07BC DEFINED AT LINE 997 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 151
LOOKUPREF:          07C3 DEFINED AT LINE 1004 IN Siena.asm
LOOKUPREF0:         07C5 DEFINED AT LINE 1006 IN Siena.asm
LOOKUPREF1:         07C9 DEFINED AT LINE 1009 IN Siena.asm
LOOKUPREF2:         07CF DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
LOOKUPREF3:         07D3 DEFINED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1012 IN Siena.asm
NESTING:            07E1 DEFINED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 248 IN Siena.asm
                    > USED AT LINE 288 IN Siena.asm
NESTING1A:          07EC DEFINED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1043 IN Siena.asm
NESTING1:           07EF DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
NESTING2:           07FE DEFINED AT LINE 1058 IN Siena.asm
                    > USED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1055 IN Siena.asm
NESTING3:           0800 DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
NESTING4:           080B DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
STRDEF:             080D DEFINED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 325 IN Siena.asm
STRDEF1:            0815 DEFINED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
STRDEF2:            0818 DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
CHAR:               0827 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 344 IN Siena.asm
CHAR1:              082A DEFINED AT LINE 1094 IN Siena.asm
                    > USED AT LINE 1105 IN Siena.asm
CHAR2:              0836 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1100 IN Siena.asm
CHAR3:              0839 DEFINED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
EXEC:               083D DEFINED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 758 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              083E DEFINED AT LINE 1113 IN Siena.asm
EXEC2:              0842 DEFINED AT LINE 1117 IN Siena.asm
EXEC3:              0850 DEFINED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
LAMBDA:             0853 DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 329 IN Siena.asm
LAMBDA1:            085A DEFINED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
LAMBDA2:            087E DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
LAMBDAEND:          088E DEFINED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
BLOCK:              08A3 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
BLOCK1:             08A7 DEFINED AT LINE 1184 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
BLOCK2:             08C9 DEFINED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
                    > USED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
BLOCKEND:           08D6 DEFINED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
ARG:                08EB DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
IN:                 0907 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
IN1:                0909 DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
IN2:                0913 DEFINED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
IN3:                0919 DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
NEWADD2:            091D DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
IF:                 0949 DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 790 IN Siena.asm
IFTE:               094E DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 794 IN Siena.asm
IFTE1:              094F DEFINED AT LINE 1299 IN Siena.asm
                    > USED AT LINE 1296 IN Siena.asm
IFTE2:              0958 DEFINED AT LINE 1308 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
SWITCH:             0973 DEFINED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
CASE:               0988 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 746 IN Siena.asm
CASE0:              09A4 DEFINED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1350 IN Siena.asm
CASE1:              09A9 DEFINED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1352 IN Siena.asm
CASE2:              09B6 DEFINED AT LINE 1367 IN Siena.asm
                    > USED AT LINE 1362 IN Siena.asm
WORDS:              09B9 DEFINED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 854 IN Siena.asm
BYTES:              09BF DEFINED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 742 IN Siena.asm
                    > USED AT LINE 1372 IN Siena.asm
BYTES1:             09C2 DEFINED AT LINE 1376 IN Siena.asm
ARRAY:              09C8 DEFINED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 346 IN Siena.asm
ARRAYEND:           09DB DEFINED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
ARRAYEND1:          09FD DEFINED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
ARRAYEND2:          0A09 DEFINED AT LINE 1427 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
ARRAYEND4:          0A19 DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1425 IN Siena.asm
HASHSTR:            0A31 DEFINED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
                    > USED AT LINE 1627 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
HASHSTR1:           0A34 DEFINED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
HASHSTR2:           0A39 DEFINED AT LINE 1476 IN Siena.asm
DEFINEENTRY:        0A4A DEFINED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
DEFINEENTRY0:       0A4F DEFINED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
DEFINEENTRY1:       0A5E DEFINED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
DEFINEENTRY2:       0A64 DEFINED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
DEFINEENTRY3:       0A66 DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1502 IN Siena.asm
LOOKUPENTRY:        0A70 DEFINED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
LOOKUPENTRY0:       0A75 DEFINED AT LINE 1538 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
LOOKUPENTRY1:       0A84 DEFINED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1544 IN Siena.asm
LOOKUPENTRY2:       0A8A DEFINED AT LINE 1556 IN Siena.asm
LOOKUPENTRY3:       0A8C DEFINED AT LINE 1559 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
HASH:               0A94 DEFINED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 778 IN Siena.asm
DEF:                0AA0 DEFINED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 750 IN Siena.asm
DEF1:               0AB6 DEFINED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
ADDR:               0ABB DEFINED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 734 IN Siena.asm
ADDR1:              0ACC DEFINED AT LINE 1608 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
DEFINE:             0AD1 DEFINED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 728 IN Siena.asm
                    > USED AT LINE 732 IN Siena.asm
                    > USED AT LINE 736 IN Siena.asm
                    > USED AT LINE 740 IN Siena.asm
                    > USED AT LINE 744 IN Siena.asm
                    > USED AT LINE 748 IN Siena.asm
                    > USED AT LINE 752 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
                    > USED AT LINE 760 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 772 IN Siena.asm
                    > USED AT LINE 776 IN Siena.asm
                    > USED AT LINE 780 IN Siena.asm
                    > USED AT LINE 784 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 796 IN Siena.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 804 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
                    > USED AT LINE 812 IN Siena.asm
                    > USED AT LINE 816 IN Siena.asm
                    > USED AT LINE 820 IN Siena.asm
                    > USED AT LINE 824 IN Siena.asm
                    > USED AT LINE 828 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 840 IN Siena.asm
                    > USED AT LINE 844 IN Siena.asm
                    > USED AT LINE 848 IN Siena.asm
                    > USED AT LINE 852 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
IDENT:              0AE9 DEFINED AT LINE 1632 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
IDENT0:             0AF0 DEFINED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
IDENT1:             0AF1 DEFINED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
IDENT2:             0B03 DEFINED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
IDENT3:             0B18 DEFINED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
                    > USED AT LINE 292 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 707 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 199 IN Siena.asm
                    > USED AT LINE 202 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 706 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 709 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 713 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 722 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2138S43:  406B DEFINED AT LINE 34
                    > USED AT LINE 10
