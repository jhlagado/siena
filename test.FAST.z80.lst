0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call exec
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD DE 07               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                UNUSED:   EQU   $ff   
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 00                  DW   0   ; a 			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1F                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODES:      
0200   AF                     DB   lsb(exit_)   ; NUL
0201   C7                     DB   lsb(nop_)   ; SOH
0202   C7                     DB   lsb(nop_)   ; STX
0203   AC                     DB   lsb(etx_)   ; ETX
0204   C7                     DB   lsb(nop_)   ; 
0205   C7                     DB   lsb(nop_)   ; 
0206   C7                     DB   lsb(nop_)   ; 
0207   C7                     DB   lsb(nop_)   ; 
0208   C7                     DB   lsb(nop_)   ; 
0209   C7                     DB   lsb(nop_)   ; 
020A   C7                     DB   lsb(nop_)   ; 
020B   C7                     DB   lsb(nop_)   ; 
020C   C7                     DB   lsb(nop_)   ; 
020D   C7                     DB   lsb(nop_)   ; 
020E   C7                     DB   lsb(nop_)   ; 
020F   C7                     DB   lsb(nop_)   ; 
0210   C7                     DB   lsb(nop_)   ; 
0211   C7                     DB   lsb(nop_)   ; 
0212   C7                     DB   lsb(nop_)   ; 
0213   C7                     DB   lsb(nop_)   ; 
0214   C7                     DB   lsb(nop_)   ; 
0215   C7                     DB   lsb(nop_)   ; 
0216   C7                     DB   lsb(nop_)   ; 
0217   C7                     DB   lsb(nop_)   ; 
0218   C7                     DB   lsb(nop_)   ; 
0219   C7                     DB   lsb(nop_)   ; 
021A   C7                     DB   lsb(nop_)   ; 
021B   C7                     DB   lsb(nop_)   ; 
021C   C7                     DB   lsb(nop_)   ; 
021D   C7                     DB   lsb(nop_)   ; 
021E   C7                     DB   lsb(nop_)   ; 
021F   C7                     DB   lsb(nop_)   ; 
0220   C7                     DB   lsb(nop_)   ; 
0221   C7                     DB   lsb(nop_)   ;    !
0222   C7                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C7                     DB   lsb(nop_)   ;    %
0226   C7                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   21                     DB   lsb(block_)   ;    (
0229   24                     DB   lsb(blockend_)   ;    )
022A   C7                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C7                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   15                     DB   lsb(dot_)   ;    .
022F   C7                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C7                     DB   lsb(nop_)   ;    :
023B   C7                     DB   lsb(nop_)   ;    ;
023C   C7                     DB   lsb(nop_)   ;    <
023D   C7                     DB   lsb(nop_)   ;    =
023E   C7                     DB   lsb(nop_)   ;    >
023F   C7                     DB   lsb(nop_)   ;    ?
0240   B2                     DB   lsb(fetch_)   ;    @
0241   30                     DB   lsb(ident_)   ;    A
0242   30                     DB   lsb(ident_)   ;    B
0243   30                     DB   lsb(ident_)   ;    C
0244   30                     DB   lsb(ident_)   ;    D
0245   30                     DB   lsb(ident_)   ;    E
0246   30                     DB   lsb(ident_)   ;    F
0247   30                     DB   lsb(ident_)   ;    G
0248   30                     DB   lsb(ident_)   ;    h
0249   30                     DB   lsb(ident_)   ;    I
024A   30                     DB   lsb(ident_)   ;    J
024B   30                     DB   lsb(ident_)   ;    K
024C   30                     DB   lsb(ident_)   ;    L
024D   30                     DB   lsb(ident_)   ;    M
024E   30                     DB   lsb(ident_)   ;    N
024F   30                     DB   lsb(ident_)   ;    O
0250   30                     DB   lsb(ident_)   ;    p
0251   30                     DB   lsb(ident_)   ;    Q
0252   30                     DB   lsb(ident_)   ;    R
0253   30                     DB   lsb(ident_)   ;    S
0254   30                     DB   lsb(ident_)   ;    T
0255   30                     DB   lsb(ident_)   ;    U
0256   30                     DB   lsb(ident_)   ;    V
0257   30                     DB   lsb(ident_)   ;    W
0258   30                     DB   lsb(ident_)   ;    X
0259   30                     DB   lsb(ident_)   ;    Y
025A   30                     DB   lsb(ident_)   ;    Z
025B   2A                     DB   lsb(array_)   ;    [
025C   C7                     DB   lsb(nop_)   ;    \
025D   2D                     DB   lsb(arrayEnd_)   ;    ]
025E   C7                     DB   lsb(nop_)   ;    ^
025F   30                     DB   lsb(ident_)   ;    _
0260   27                     DB   lsb(char_)   ;    `    	
0261   30                     DB   lsb(ident_)   ;    a
0262   30                     DB   lsb(ident_)   ;    b
0263   30                     DB   lsb(ident_)   ;    c
0264   30                     DB   lsb(ident_)   ;    d
0265   30                     DB   lsb(ident_)   ;    e
0266   30                     DB   lsb(ident_)   ;    f
0267   30                     DB   lsb(ident_)   ;    g
0268   30                     DB   lsb(ident_)   ;    h
0269   30                     DB   lsb(ident_)   ;    i
026A   30                     DB   lsb(ident_)   ;    j
026B   30                     DB   lsb(ident_)   ;    k
026C   30                     DB   lsb(ident_)   ;    l
026D   30                     DB   lsb(ident_)   ;    m
026E   30                     DB   lsb(ident_)   ;    n
026F   30                     DB   lsb(ident_)   ;    o
0270   30                     DB   lsb(ident_)   ;    p
0271   30                     DB   lsb(ident_)   ;    q
0272   30                     DB   lsb(ident_)   ;    r
0273   30                     DB   lsb(ident_)   ;    s
0274   30                     DB   lsb(ident_)   ;    t
0275   30                     DB   lsb(ident_)   ;    u
0276   30                     DB   lsb(ident_)   ;    v
0277   30                     DB   lsb(ident_)   ;    w
0278   30                     DB   lsb(ident_)   ;    x
0279   30                     DB   lsb(ident_)   ;    y
027A   30                     DB   lsb(ident_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   78                     DB   lsb(or_)   ;    |
027D   12                     DB   lsb(lambdaEnd_)   ;    }
027E   C7                     DB   lsb(nop_)   ;    ~
027F   C7                     DB   lsb(nop_)   ;    DEL	
0280                CTRLCODES:      
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0                ETX:         
02A0   21 00 E6               LD   hl,-DSTACK   
02A3   39                     ADD   hl,sp   
02A4   30 03                  JR   nc,etx1   
02A6   31 00 1A               LD   sp,DSTACK   
02A9                ETX1:        
02A9   18 16                  JR   interpret   
02AB                START:       
02AB   31 00 1A               LD   sp,DSTACK   ; start of Siena
02AE   CD DE 07               CALL   init   ; setups
02B1   CD C9 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
02B4   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
02C1                INTERPRET:      
02C1   CD AF 07               CALL   prompt   
02C4   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
02C7   ED 43 82 1B            LD   (vTIBPtr),bc   
02CB                INTERPRET2:      ; calc nesting (a macro might have changed it)
02CB   1E 00                  LD   e,0   ; initilize nesting value
02CD   C5                     PUSH   bc   ; save offset into TIB,
02CE                             ; bc is also the count of chars in TIB
02CE   21 00 18               LD   hl,TIB   ; hl is start of TIB
02D1   18 06                  JR   interpret4   
02D3                INTERPRET3:      
02D3   7E                     LD   a,(hl)   ; a = char in TIB
02D4   23                     INC   hl   ; inc pointer into TIB
02D5   0B                     DEC   bc   ; dec count of chars in TIB
02D6   CD EE 08               CALL   nesting   ; update nesting value
02D9                INTERPRET4:      
02D9   79                     LD   a,c   ; is count zero?
02DA   B0                     OR   b   
02DB   20 F6                  JR   nz,interpret3   ; if not loop
02DD   C1                     POP   bc   ; restore offset into TIB
02DE                WAITCHAR:      
02DE   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
02E1   FE 20                  CP   $20   ; compare to space
02E3   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
02E5   FE 00                  CP   $0   ; is it end of string? null end of string
02E7   28 45                  JR   z,waitchar4   
02E9   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02EB   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
02ED                MACRO:       
02ED   ED 43 82 1B            LD   (vTIBPtr),bc   
02F1   21 80 02               LD   hl,ctrlCodes   
02F4   85                     ADD   a,l   ; look up key of macros
02F5   6F                     LD   l,a   
02F6   5E                     LD   e,(hl)   
02F7   7B                     LD   a,e   
02F8   B7                     OR   a   
02F9   28 09                  JR   z,macro1   
02FB   16 01                  LD   d,msb(macros)   
02FD   D5                     PUSH   de   
02FE   CD 4A 09               CALL   exec   ; Siena exec_ operation and jump to it
0301   63 61 00               .CSTR   "ca"   
0304                MACRO1:      
0304   ED 4B 82 1B            LD   bc,(vTIBPtr)   
0308   18 C1                  JR   interpret2   
030A                WAITCHAR1:      
030A   21 00 18               LD   hl,TIB   
030D   09                     ADD   hl,bc   
030E   77                     LD   (hl),a   ; store the character in textbuf
030F   03                     INC   bc   
0310   CD 85 00               CALL   putchar   ; echo character to screen
0313   CD EE 08               CALL   nesting   
0316   18 C6                  JR   waitchar   ; wait for next character
0318                WAITCHAR3:      
0318   21 00 18               LD   hl,TIB   
031B   09                     ADD   hl,bc   
031C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
031E   23                     INC   hl   
031F   36 0A                  LD   (hl),"\n"   
0321   23                     INC   hl   
0322   03                     INC   bc   
0323   03                     INC   bc   
0324   CD D7 07               CALL   crlf   ; echo character to screen
0327   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0328   B7                     OR   a   
0329   20 B3                  JR   nz,waitchar   
032B   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
032D   03                     INC   bc   
032E                WAITCHAR4:      
032E   ED 43 82 1B            LD   (vTIBPtr),bc   
0332   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
0335   0B                     DEC   bc   
0336                             ; ********************************************************************************
0336                             ; 
0336                             ; Dispatch Routine.
0336                             ; 
0336                             ; Get the next character and form a 1 byte jump address
0336                             ; 
0336                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
0336                             ; jump to the selected function.
0336                             ; 
0336                             ; Individual handler routines will deal with each category:
0336                             ; 
0336                             ; 1. Detect characters a-z and jump to the User Command handler routine
0336                             ; 
0336                             ; 2. Detect characters a-z and jump to the variable handler routine
0336                             ; 
0336                             ; 3. All other characters are punctuation and cause a jump to the associated
0336                             ; primitive code.
0336                             ; 
0336                             ; Instruction Pointer IP bc is incremented
0336                             ; 
0336                             ; *********************************************************************************
0336                NEXT:        
0336   03                     INC   bc   ;  Increment the IP
0337   0A                     LD   a,(bc)   ;  Get the next character and dispatch
0338   6F                     LD   l,a   ;  Index into table
0339   26 02                  LD   h,msb(opcodes)   ;  Start address of jump table
033B   6E                     LD   l,(hl)   ;  get low jump address
033C   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
033E   E9                     JP   (hl)   ;  Jump to routine
033F                             ; **********************************************************************			
033F                             ; Page 4 primitive routines
033F                             ; **********************************************************************
033F                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 14 08               JP   num   
0403                HEXNUM_:      
0403   C3 45 08               JP   hexnum   
0406                ARG_:        
0406   C3 F8 09               JP   arg   
0409                STRDEF_:      
0409   C3 1A 09               JP   strDef   
040C                NEWADD2_:      
040C   C3 3F 0A               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 60 09               JP   lambda   
0412                LAMBDAEND_:      
0412   C3 9B 09               JP   lambdaEnd   
0415                DOT_:        
0415   E1                     POP   hl   
0416   CD 62 08               CALL   prtdec   
0419                DOT2:        
0419   3E 20                  LD   a," "   
041B   CD 85 00               CALL   putchar   
041E   C3 36 03               JP   next   
0421                BLOCK_:      
0421   C3 B0 09               JP   block   
0424                BLOCKEND_:      
0424   C3 E3 09               JP   blockend   
0427                CHAR_:       
0427   C3 34 09               JP   char   
042A                ARRAY_:      
042A   C3 EA 0A               JP   array   
042D                ARRAYEND_:      
042D   C3 FD 0A               JP   arrayEnd   
0430                IDENT_:      
0430   C3 0B 0C               JP   ident   
0433                A_:          
0433   C3 5A 06               JP   a   
0436                C_:          
0436   C3 75 06               JP   c   
0439                D_:          
0439   C3 80 06               JP   d   
043C                E_:          
043C   C3 90 06               JP   e   
043F                F_:          
043F   C3 A0 06               JP   f   
0442                G_:          
0442   C3 AB 06               JP   g   
0445                H_:          
0445   C3 BB 06               JP   h   
0448                I_:          
0448   C3 C6 06               JP   i   
044B                K_:          
044B   C3 E6 06               JP   k   
044E                L_:          
044E   C3 F4 06               JP   l   
0451                M_:          
0451   C3 09 07               JP   m   
0454                N_:          
0454   C3 19 07               JP   n   
0457                O_:          
0457   C3 24 07               JP   o   
045A                P_:          
045A   C3 34 07               JP   p   
045D                R_:          
045D   C3 3F 07               JP   r   
0460                S_:          
0460   C3 4A 07               JP   s   
0463                U_:          
0463   C3 69 07               JP   u   
0466                W_:          
0466   C3 74 07               JP   w   
0469                X_:          
0469   C3 84 07               JP   x   
046C                AND_:        
046C   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
046D   E1                     POP   hl   
046E   7B                     LD   a,e   
046F   A5                     AND   l   
0470   6F                     LD   l,a   
0471   7A                     LD   a,d   
0472   A4                     AND   h   
0473                AND1:        
0473   67                     LD   h,a   
0474   E5                     PUSH   hl   
0475   C3 36 03               JP   next   
0478                OR_:         
0478   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0479   E1                     POP   hl   
047A   7B                     LD   a,e   
047B   B5                     OR   l   
047C   6F                     LD   l,a   
047D   7A                     LD   a,d   
047E   B4                     OR   h   
047F   18 F2                  JR   and1   
0481                XOR_:        
0481   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0482                XOR1:        
0482   E1                     POP   hl   
0483   7B                     LD   a,e   
0484   AD                     XOR   l   
0485   6F                     LD   l,a   
0486   7A                     LD   a,d   
0487   AC                     XOR   h   
0488   18 E9                  JR   and1   
048A                INV_:        ; Bitwise INVert the top member of the stack
048A   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
048D   18 F3                  JR   xor1   
048F                ADD_:        ; add the top 2 members of the stack
048F   D1                     POP   de   
0490   E1                     POP   hl   
0491   19                     ADD   hl,de   
0492   E5                     PUSH   hl   
0493   C3 36 03               JP   next   
0496                HDOT_:       ; print hexadecimal
0496   E1                     POP   hl   
0497   CD AA 08               CALL   prthex   
049A   C3 19 04               JP   dot2   
049D                DROP_:       ; Discard the top member of the stack
049D   E1                     POP   hl   
049E   C3 36 03               JP   next   
04A1                UNDROP_:      
04A1   3B                     DEC   sp   
04A2   3B                     DEC   sp   
04A3   C3 36 03               JP   next   
04A6                DUP_:        
04A6   E1                     POP   hl   ; Duplicate the top member of the stack
04A7   E5                     PUSH   hl   
04A8   E5                     PUSH   hl   
04A9   C3 36 03               JP   next   
04AC                ETX_:        
04AC   C3 A0 02               JP   ETX   
04AF                EXIT_:       
04AF   C3 14 0A               JP   exit   
04B2                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B2   E1                     POP   hl   
04B3                FETCH1:      
04B3   5E                     LD   e,(hl)   
04B4   23                     INC   hl   
04B5   56                     LD   d,(hl)   
04B6   D5                     PUSH   de   
04B7   C3 36 03               JP   next   
04BA                KEY_:        
04BA   CD 81 00               CALL   getchar   
04BD   26 00                  LD   h,0   
04BF   6F                     LD   l,a   
04C0   E5                     PUSH   hl   
04C1   C3 36 03               JP   next   
04C4   C3 92 07     MUL_:     JP   mul   
04C7                NOP_:        
04C7   C3 36 03               JP   next   ; hardwire white space to always exec_ to next (important for arrays)
04CA                OVER_:       
04CA   E1                     POP   hl   ; Duplicate 2nd element of the stack
04CB   D1                     POP   de   
04CC   D5                     PUSH   de   
04CD   E5                     PUSH   hl   
04CE   D5                     PUSH   de   ; and push it to top of stack
04CF   C3 36 03               JP   next   
04D2                ROT_:        ; a b c -- b c a
04D2   D1                     POP   de   ; a b    de = c
04D3   E1                     POP   hl   ; a       hl = b
04D4   E3                     EX   (sp),hl   ; b       hl = a
04D5   D5                     PUSH   de   ; b c
04D6   E5                     PUSH   hl   ; b c a
04D7   C3 36 03               JP   next   
04DA                             ;  Left shift { is multiply by 2		
04DA                SHL_:        
04DA   E1                     POP   hl   ; Duplicate the top member of the stack
04DB   29                     ADD   hl,hl   
04DC   E5                     PUSH   hl   ; shift left fallthrough into add_
04DD   C3 36 03               JP   next   
04E0                             ;  Right shift } is a divide by 2		
04E0                SHR_:        
04E0   E1                     POP   hl   ; Get the top member of the stack
04E1                SHR1:        
04E1   CB 3C                  SRL   h   
04E3   CB 1D                  RR   l   
04E5   E5                     PUSH   hl   
04E6   C3 36 03               JP   next   
04E9                STORE_:      ; Store the value at the address placed on the top of the stack
04E9   E1                     POP   hl   
04EA   D1                     POP   de   
04EB   73                     LD   (hl),e   
04EC   23                     INC   hl   
04ED   72                     LD   (hl),d   
04EE   C3 36 03               JP   next   
04F1                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04F1   E1                     POP   hl   
04F2   E3                     EX   (sp),hl   
04F3   E5                     PUSH   hl   
04F4   C3 36 03               JP   next   
04F7                NEG_:        
04F7   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04FA   D1                     POP   de   
04FB   18 02                  JR   sub2   ; use the SUBtract routine
04FD                SUB_:        ; Subtract the value 2nd on stack from top of stack
04FD   D1                     POP   de   
04FE   E1                     POP   hl   ; Entry point for INVert
04FF                SUB2:        
04FF   B7                     OR   a   ; Entry point for NEGate
0500   ED 52                  SBC   hl,de   
0502   E5                     PUSH   hl   
0503   C3 36 03               JP   next   
0506                EQ_:         
0506   E1                     POP   hl   
0507   D1                     POP   de   
0508   B7                     OR   a   ; reset the carry flag
0509   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
050B   28 15                  JR   z,true_   
050D                FALSE_:      
050D   21 00 00               LD   hl,0   
0510   E5                     PUSH   hl   
0511   C3 36 03               JP   next   
0514                GT_:         
0514   D1                     POP   de   
0515   E1                     POP   hl   
0516   18 02                  JR   lt1   
0518                LT_:         
0518   E1                     POP   hl   
0519   D1                     POP   de   
051A                LT1:         
051A   B7                     OR   a   ; reset the carry flag
051B   ED 52                  SBC   hl,de   
051D   28 EE                  JR   z,false_   
051F   FA 0D 05               JP   m,false_   
0522                TRUE_:       
0522   21 01 00               LD   hl,1   
0525   E5                     PUSH   hl   
0526   C3 36 03               JP   next   
0529                GTE_:        
0529   D1                     POP   de   
052A   E1                     POP   hl   
052B   18 02                  JR   lte1   
052D                LTE_:        
052D   E1                     POP   hl   
052E   D1                     POP   de   
052F                LTE1:        
052F   B7                     OR   a   ; reset the carry flag
0530   ED 52                  SBC   hl,de   
0532   FA 0D 05               JP   m,false_   
0535   C3 FF FF               JP   true   
0538                DIV_:        
0538   18 00                  JR   div   
053A                             ; division subroutine.
053A                             ; 
053A                             ; bc: divisor, de: dividend, hl: remainder
053A                DIV:         ;=34
053A   D1                     POP   de   ; get first value
053B   E1                     POP   hl   ; get 2nd value
053C   C5                     PUSH   bc   ; Preserve the IP
053D   44                     LD   b,h   ; bc = 2nd value
053E   4D                     LD   c,l   
053F                             ; 
053F   21 00 00               LD   hl,0   ; Zero the remainder
0542   3E 10                  LD   a,16   ; Loop counter
0544                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0544   CB 21                  SLA   c   
0546   CB 10                  RL   b   
0548   ED 6A                  ADC   hl,hl   
054A   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
054C   38 03                  JR   c,div2   
054E   0C                     INC   c   
054F   18 01                  JR   div3   
0551                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
0551   19                     ADD   hl,de   
0552                DIV3:        
0552   3D                     DEC   a   
0553   20 EF                  JR   nz,div1   
0555   50                     LD   d,b   ; Result from bc to de
0556   59                     LD   e,c   
0557                DIV4:        
0557   C1                     POP   bc   ; Restore the IP
0558   D5                     PUSH   de   ; push Result
0559   E5                     PUSH   hl   ; push remainder
055A   C3 36 03               JP   next   
055D                             ;=57
055D                             ; **************************************************************************
055D                             ; Page 6 Alt primitives
055D                             ; **************************************************************************
055D                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 36 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 36 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 36 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 36 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 36 03               JP   next   
0623                PROMPT_:      
0623   CD AF 07               CALL   prompt   
0626   C3 36 03               JP   next   
0629                INPORT_:      ; \<
0629   E1                     POP   hl   
062A   79                     LD   a,c   
062B   4D                     LD   c,l   
062C   ED 68                  IN   l,(c)   
062E   26 00                  LD   h,0   
0630   4F                     LD   c,a   
0631   E5                     PUSH   hl   
0632   C3 36 03               JP   next   
0635                NEWLN_:      
0635   CD D7 07               CALL   crlf   
0638   C3 36 03               JP   next   
063B                OUTPORT_:      
063B   E1                     POP   hl   
063C   59                     LD   e,c   
063D   4D                     LD   c,l   
063E   E1                     POP   hl   
063F   ED 69                  OUT   (c),l   
0641   4B                     LD   c,e   
0642   C3 36 03               JP   next   
0645                PRTSTR_:      
0645                PRTSTR:      
0645   E1                     POP   hl   
0646   CD BC 07               CALL   putStr   
0649   C3 36 03               JP   next   
064C                RPUSH_:      
064C   E1                     POP   hl   
064D   CD C1 07               CALL   rpush   
0650   C3 36 03               JP   next   
0653                RPOP_:       
0653   CD CC 07               CALL   rpop   
0656   E5                     PUSH   hl   
0657   C3 36 03               JP   next   
065A                             ; **************************************************************************
065A                             ; Page 6 primitive routines continued  (page 7)
065A                             ; **************************************************************************
065A                             ; falls through to following page
065A                A:           
065A   03                     INC   bc   
065B   0A                     LD   a,(bc)   
065C   FE 64                  CP   "d"   
065E   CA 8F 04               JP   z,add_   
0661   FE 6E                  CP   "n"   
0663   CA 6C 04               JP   z,and_   
0666   0B                     DEC   bc   
0667   C3 8F 07               JP   var_   
066A                B:           
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 79                  CP   "y"   
066E   CA E1 0A               JP   z,bytes   
0671   0B                     DEC   bc   
0672   C3 8F 07               JP   var_   
0675                C:           
0675   03                     INC   bc   
0676   0A                     LD   a,(bc)   
0677   FE 61                  CP   "a"   
0679   CA AA 0A               JP   z,case   
067C   0B                     DEC   bc   
067D   C3 8F 07               JP   var_   
0680                D:           
0680   03                     INC   bc   
0681   0A                     LD   a,(bc)   
0682   FE 65                  CP   "e"   
0684   CA C2 0B               JP   z,def   
0687   FE 69                  CP   "i"   
0689   CA 38 05               JP   z,div_   
068C   0B                     DEC   bc   
068D   C3 8F 07               JP   var_   
0690                E:           
0690   03                     INC   bc   
0691   0A                     LD   a,(bc)   
0692   FE 78                  CP   "x"   
0694   CA 4A 09               JP   z,exec   
0697   FE 71                  CP   "q"   
0699   CA 06 05               JP   z,eq_   
069C   0B                     DEC   bc   
069D   C3 8F 07               JP   var_   
06A0                F:           
06A0   03                     INC   bc   
06A1   0A                     LD   a,(bc)   
06A2   FE 69                  CP   "i"   
06A4   CA 8F 07               JP   z,filter_   
06A7   0B                     DEC   bc   
06A8   C3 8F 07               JP   var_   
06AB                G:           
06AB   03                     INC   bc   
06AC   0A                     LD   a,(bc)   
06AD   FE 65                  CP   "e"   
06AF   CA 8F 07               JP   z,get_   
06B2   FE 74                  CP   "t"   
06B4   CA 14 05               JP   z,gt_   
06B7   0B                     DEC   bc   
06B8   C3 8F 07               JP   var_   
06BB                H:           
06BB   03                     INC   bc   
06BC   0A                     LD   a,(bc)   
06BD   FE 61                  CP   "a"   
06BF   CA B6 0B               JP   z,hash   
06C2   0B                     DEC   bc   
06C3   C3 8F 07               JP   var_   
06C6                I:           
06C6   03                     INC   bc   
06C7   0A                     LD   a,(bc)   
06C8   FE 6E                  CP   "n"   
06CA   CA 29 0A               JP   z,in   
06CD   FE 76                  CP   "v"   
06CF   CA 8A 04               JP   z,inv_   
06D2   FE 66                  CP   "f"   
06D4   C2 E2 06               JP   nz,i1   
06D7   03                     INC   bc   
06D8   0A                     LD   a,(bc)   
06D9   FE 65                  CP   "e"   
06DB   CA 70 0A               JP   z,ife   
06DE   0B                     DEC   bc   
06DF   C3 6B 0A               JP   if   
06E2                I1:          
06E2   0B                     DEC   bc   
06E3   C3 8F 07               JP   var_   
06E6                K:           
06E6   C3 84 07               JP   x   
06E9   03                     INC   bc   
06EA   0A                     LD   a,(bc)   
06EB   FE 65                  CP   "e"   
06ED   CA BA 04               JP   z,key_   
06F0   0B                     DEC   bc   
06F1   C3 8F 07               JP   var_   
06F4                L:           
06F4   03                     INC   bc   
06F5   0A                     LD   a,(bc)   
06F6   FE 65                  CP   "e"   
06F8   CA 8F 07               JP   z,let_   
06FB   FE 6F                  CP   "o"   
06FD   CA DD 0B               JP   z,lookup   
0700   FE 74                  CP   "t"   
0702   CA 18 05               JP   z,lt_   
0705   0B                     DEC   bc   
0706   C3 8F 07               JP   var_   
0709                M:           
0709   03                     INC   bc   
070A   0A                     LD   a,(bc)   
070B   FE 61                  CP   "a"   
070D   CA 8F 07               JP   z,map_   
0710   FE 75                  CP   "u"   
0712   CA C4 04               JP   z,mul_   
0715   0B                     DEC   bc   
0716   C3 8F 07               JP   var_   
0719                N:           
0719   03                     INC   bc   
071A   0A                     LD   a,(bc)   
071B   FE 65                  CP   "e"   
071D   CA F7 04               JP   z,neg_   
0720   0B                     DEC   bc   
0721   C3 8F 07               JP   var_   
0724                O:           
0724   03                     INC   bc   
0725   0A                     LD   a,(bc)   
0726   FE 76                  CP   "v"   
0728   CA CA 04               JP   z,over_   
072B   FE 72                  CP   "r"   
072D   CA 78 04               JP   z,or_   
0730   0B                     DEC   bc   
0731   C3 8F 07               JP   var_   
0734                P:           
0734   03                     INC   bc   
0735   0A                     LD   a,(bc)   
0736   FE 72                  CP   "r"   
0738   CA 8F 07               JP   z,print_   
073B   0B                     DEC   bc   
073C   C3 8F 07               JP   var_   
073F                R:           
073F   03                     INC   bc   
0740   0A                     LD   a,(bc)   
0741   FE 6F                  CP   "o"   
0743   CA D2 04               JP   z,rot_   
0746   0B                     DEC   bc   
0747   C3 8F 07               JP   var_   
074A                S:           
074A   03                     INC   bc   
074B   0A                     LD   a,(bc)   
074C   FE 63                  CP   "c"   
074E   CA 8F 07               JP   z,scan_   
0751   FE 65                  CP   "e"   
0753                             ; jp nz,s1
0753                             ; inc bc
0753                             ; ld a,(bc)
0753                             ; cp "l"
0753                             ; jp z,select
0753                             ; cp "t"
0753   CA 8F 07               JP   z,set_   
0756                             ; dec bc
0756                             ; s1:
0756   FE 68                  CP   "h"   
0758   CA 8F 07               JP   z,shift_   
075B   FE 75                  CP   "u"   
075D   CA FD 04               JP   z,sub_   
0760   FE 77                  CP   "w"   
0762   CA 95 0A               JP   z,switch   
0765   0B                     DEC   bc   
0766   C3 8F 07               JP   var_   
0769                U:           
0769   03                     INC   bc   
076A   0A                     LD   a,(bc)   
076B   FE 6E                  CP   "n"   
076D   CA A1 04               JP   z,undrop_   
0770   0B                     DEC   bc   
0771   C3 8F 07               JP   var_   
0774                W:           
0774   03                     INC   bc   
0775   0A                     LD   a,(bc)   
0776   FE 68                  CP   "h"   
0778   CA 8F 07               JP   z,while_   
077B   FE 6F                  CP   "o"   
077D   CA DB 0A               JP   z,words   
0780   0B                     DEC   bc   
0781   C3 8F 07               JP   var_   
0784                X:           
0784   03                     INC   bc   
0785   0A                     LD   a,(bc)   
0786   FE 78                  CP   "x"   
0788   CA 81 04               JP   z,xor_   
078B   0B                     DEC   bc   
078C   C3 8F 07               JP   var_   
078F                CLOSURE_:      
078F                FILTER_:      
078F                GET_:        
078F                IF_:         
078F                LET_:        
078F                MAP_:        
078F                PRINT_:      
078F                SCAN_:       
078F                SET_:        
078F                SHIFT_:      
078F                WHILE_:      
078F                VAR_:        
078F   C3 36 03               JP   next   
0792                             ;*******************************************************************
0792                             ; Page 5 primitive routines continued
0792                             ;*******************************************************************
0792                             ; ********************************************************************
0792                             ; 16-bit multiply
0792                MUL:         ;=19
0792   D1                     POP   de   ; get first value
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   ; Preserve the IP
0795   44                     LD   b,h   ; bc = 2nd value
0796   4D                     LD   c,l   
0797   21 00 00               LD   hl,0   
079A   3E 10                  LD   a,16   
079C                MUL2:        
079C   29                     ADD   hl,hl   
079D   CB 13                  RL   e   
079F   CB 12                  RL   d   
07A1   30 04                  JR   nc,$+6   
07A3   09                     ADD   hl,bc   
07A4   30 01                  JR   nc,$+3   
07A6   13                     INC   de   
07A7   3D                     DEC   a   
07A8   20 F2                  JR   nz,mul2   
07AA   C1                     POP   bc   ; Restore the IP
07AB   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
07AC   C3 36 03               JP   next   
07AF                             ;*******************************************************************
07AF                             ; Subroutines
07AF                             ;*******************************************************************
07AF                PROMPT:      
07AF   CD C9 08               CALL   printStr   
07B2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B7   C9                     RET      
07B8                PUTSTR0:      
07B8   CD 85 00               CALL   putchar   
07BB   23                     INC   hl   
07BC                PUTSTR:      
07BC   7E                     LD   a,(hl)   
07BD   B7                     OR   a   
07BE   20 F8                  JR   nz,putStr0   
07C0   C9                     RET      
07C1                RPUSH:       
07C1   DD 2B                  DEC   ix   
07C3   DD 74 00               LD   (ix+0),h   
07C6   DD 2B                  DEC   ix   
07C8   DD 75 00               LD   (ix+0),l   
07CB   C9                     RET      
07CC                RPOP:        
07CC   DD 6E 00               LD   l,(ix+0)   
07CF   DD 23                  INC   ix   
07D1   DD 66 00               LD   h,(ix+0)   
07D4   DD 23                  INC   ix   
07D6                RPOP2:       
07D6   C9                     RET      
07D7                CRLF:        
07D7   CD C9 08               CALL   printStr   
07DA   0D 0A 00               .CSTR   "\r\n"   
07DD   C9                     RET      
07DE                             ;*******************************************************************
07DE                             ;*******************************************************************
07DE                INIT:        
07DE   FD 21 00 1A            LD   iy,DSTACK   
07E2   DD 21 80 19            LD   ix,RSTACK   
07E6   21 80 01               LD   hl,ialtVars   
07E9   11 7E 1B               LD   de,altVars   
07EC   01 10 00               LD   bc,8 * 2   
07EF   ED B0                  LDIR      
07F1   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
07F4   54 5D                  LD   de,hl   
07F6   13                     INC   de   
07F7   36 00                  LD   (hl),0   
07F9   01 68 00               LD   bc,DATASIZE   
07FC   ED B0                  LDIR      
07FE   3E FF                  LD   a,UNUSED   
0800   06 00                  LD   b,0   
0802   21 00 1D               LD   hl,hashSlots   
0805                INIT1:       
0805   77                     LD   (hl),a   
0806   23                     INC   hl   
0807   10 FC                  DJNZ   init1   
0809   CD F3 0B               CALL   define   
080C   04 61 64 64 00         .PSTR   "add",0   ; muat have length and null terminator
0811   8F 04                  DW   add_   
0813   C9                     RET      
0814                NUM:         
0814   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0817   0A                     LD   a,(bc)   ; Get numeral or -
0818   FE 2D                  CP   "-"   
081A   20 01                  JR   nz,num0   
081C   03                     INC   bc   ; move to next char, no flags affected
081D                NUM0:        
081D   08                     EX   af,af'   ; save zero flag = 0 for later
081E                NUM1:        
081E   0A                     LD   a,(bc)   ; read digit
081F   D6 30                  SUB   "0"   ; less than 0?
0821   38 13                  JR   c,num2   ; not a digit, exit loop
0823   FE 0A                  CP   10   ; greater that 9?
0825   30 0F                  JR   nc,num2   ; not a digit, exit loop
0827   03                     INC   bc   ; inc IP
0828   54 5D                  LD   de,hl   ; multiply hl * 10
082A   29                     ADD   hl,hl   
082B   29                     ADD   hl,hl   
082C   19                     ADD   hl,de   
082D   29                     ADD   hl,hl   
082E   85                     ADD   a,l   ; add digit in a to hl
082F   6F                     LD   l,a   
0830   3E 00                  LD   a,0   
0832   8C                     ADC   a,h   
0833   67                     LD   h,a   
0834   18 E8                  JR   num1   
0836                NUM2:        
0836   0B                     DEC   bc   
0837   08                     EX   af,af'   ; restore zero flag
0838   20 07                  JR   nz,num3   
083A   EB                     EX   de,hl   ; negate the value of hl
083B   21 00 00               LD   hl,0   
083E   B7                     OR   a   ; jump to sub2
083F   ED 52                  SBC   hl,de   
0841                NUM3:        
0841   E5                     PUSH   hl   ; Put the number on the stack
0842   C3 36 03               JP   next   ; and process the next character
0845                HEXNUM:      ; 
0845   21 00 00               LD   hl,0   ; Clear hl to accept the number
0848                HEXNUM1:      
0848   03                     INC   bc   
0849   0A                     LD   a,(bc)   ; Get the character which is a numeral
084A   CB 77                  BIT   6,a   ; is it uppercase alpha?
084C   28 02                  JR   z,hexnum2   ; no a decimal
084E   D6 07                  SUB   7   ; sub 7  to make $a - $F
0850                HEXNUM2:      
0850   D6 30                  SUB   $30   ; Form decimal digit
0852   DA 36 08               JP   c,num2   
0855   FE 10                  CP   $0F+1   
0857   D2 36 08               JP   nc,num2   
085A   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
085B   29                     ADD   hl,hl   ; 4X
085C   29                     ADD   hl,hl   ; 8X
085D   29                     ADD   hl,hl   ; 16X
085E   85                     ADD   a,l   ; add into bottom of hl
085F   6F                     LD   l,a   ; 
0860   18 E6                  JR   hexnum1   
0862                PRTDEC:      ;=34 ; removes leading zeros
0862                             ; ld a,h
0862                             ; or l
0862                             ; ld a, "0"
0862                             ; jp z, putchar
0862   CB 7C                  BIT   7,h   
0864   28 0B                  JR   z,prtdec0   
0866   3E 2D                  LD   a,"-"   
0868   CD 85 00               CALL   putchar   
086B   AF                     XOR   a   
086C   95                     SUB   l   
086D   6F                     LD   l,a   
086E   9F                     SBC   a,a   
086F   94                     SUB   h   
0870   67                     LD   h,a   
0871                PRTDEC0:      
0871   C5                     PUSH   bc   
0872   0E 00                  LD   c,0   ; leading zeros flag = false
0874   11 F0 D8               LD   de,-10000   
0877   CD 93 08               CALL   prtdec1   
087A   11 18 FC               LD   de,-1000   
087D   CD 93 08               CALL   prtdec1   
0880   11 9C FF               LD   de,-100   
0883   CD 93 08               CALL   prtdec1   
0886   1E F6                  LD   e,-10   
0888   CD 93 08               CALL   prtdec1   
088B   0C                     INC   c   ; flag = true for at least digit
088C   1E FF                  LD   e,-1   
088E   CD 93 08               CALL   prtdec1   
0891   C1                     POP   bc   
0892   C9                     RET      
0893                PRTDEC1:      
0893   06 2F                  LD   b,"0"-1   
0895                PRTDEC2:      
0895   04                     INC   b   
0896   19                     ADD   hl,de   
0897   38 FC                  JR   c,prtdec2   
0899   ED 52                  SBC   hl,de   
089B   3E 30                  LD   a,"0"   
089D   B8                     CP   b   
089E   20 05                  JR   nz,prtdec3   
08A0   AF                     XOR   a   
08A1   B1                     OR   c   
08A2   C8                     RET   z   
08A3   18 01                  JR   prtdec4   
08A5                PRTDEC3:      
08A5   0C                     INC   c   
08A6                PRTDEC4:      
08A6   78                     LD   a,b   
08A7   C3 85 00               JP   putchar   
08AA                             ; 
08AA                PRTHEX:      
08AA                             ; Display hl as a 16-bit number in hex.
08AA   C5                     PUSH   bc   ; preserve the IP
08AB   7C                     LD   a,h   
08AC   CD B5 08               CALL   prthex2   
08AF   7D                     LD   a,l   
08B0   CD B5 08               CALL   prthex2   
08B3   C1                     POP   bc   
08B4   C9                     RET      
08B5                PRTHEX2:      
08B5   4F                     LD   c,a   
08B6   1F                     RRA      
08B7   1F                     RRA      
08B8   1F                     RRA      
08B9   1F                     RRA      
08BA   CD BE 08               CALL   prthex3   
08BD   79                     LD   a,c   
08BE                PRTHEX3:      
08BE   E6 0F                  AND   0x0F   
08C0   C6 90                  ADD   a,0x90   
08C2   27                     DAA      
08C3   CE 40                  ADC   a,0x40   
08C5   27                     DAA      
08C6   C3 85 00               JP   putchar   
08C9                PRINTSTR:      
08C9   E3                     EX   (sp),hl   ; swap			
08CA   CD BC 07               CALL   putStr   
08CD   23                     INC   hl   ; inc past null
08CE   E3                     EX   (sp),hl   ; put it back	
08CF   C9                     RET      
08D0                LOOKUPREF:      
08D0   16 00                  LD   d,0   
08D2                LOOKUPREF0:      
08D2   FE 61                  CP   "a"   
08D4   30 06                  JR   nc,lookupRef2   
08D6                LOOKUPREF1:      
08D6   D6 61                  SUB   "a"   
08D8   1E 00                  LD   e,0   
08DA   18 04                  JR   lookupRef3   
08DC                LOOKUPREF2:      
08DC   D6 61                  SUB   "a"   
08DE   1E 34                  LD   e,26*2   
08E0                LOOKUPREF3:      
08E0   87                     ADD   a,a   
08E1   83                     ADD   a,e   
08E2   21 C0 1B               LD   hl,DATA   
08E5   85                     ADD   a,l   
08E6   6F                     LD   l,a   
08E7   3E 00                  LD   a,0   
08E9   8C                     ADC   a,h   
08EA   67                     LD   h,a   
08EB   AF                     XOR   a   
08EC   B3                     OR   e   ; sets z flag if a-z
08ED   C9                     RET      
08EE                             ; **************************************************************************
08EE                             ; calculate nesting value
08EE                             ; a is char to be tested,
08EE                             ; e is the nesting value (initially 0)
08EE                             ; e is increased by ( and [
08EE                             ; e is decreased by ) and ]
08EE                             ; e has its bit 7 toggled by `
08EE                             ; limited to 127 levels
08EE                             ; **************************************************************************
08EE                NESTING:      
08EE   FE 22                  CP   $22   ; quote char
08F0   20 0A                  JR   nz,nesting1   
08F2   CB 7B                  BIT   7,e   
08F4   28 03                  JR   z,nesting1a   
08F6   CB BB                  RES   7,e   
08F8   C9                     RET      
08F9                NESTING1A:      
08F9   CB FB                  SET   7,e   
08FB   C9                     RET      
08FC                NESTING1:      
08FC   CB 7B                  BIT   7,e   
08FE   C0                     RET   nz   
08FF   FE 7B                  CP   "{"   
0901   28 08                  JR   z,nesting2   
0903   FE 5B                  CP   "["   
0905   28 04                  JR   z,nesting2   
0907   FE 28                  CP   "("   
0909   20 02                  JR   nz,nesting3   
090B                NESTING2:      
090B   1C                     INC   e   
090C   C9                     RET      
090D                NESTING3:      
090D   FE 7D                  CP   "}"   
090F   28 07                  JR   z,nesting4   
0911   FE 5D                  CP   "]"   
0913   28 03                  JR   z,nesting4   
0915   FE 29                  CP   ")"   
0917   C0                     RET   nz   
0918                NESTING4:      
0918   1D                     DEC   e   
0919   C9                     RET      
091A                             ; 
091A                STRDEF:      
091A   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
091E   D5                     PUSH   de   ; save start of string
091F   03                     INC   bc   ; point to next char
0920   18 03                  JR   strDef2   
0922                STRDEF1:      
0922   12                     LD   (de),a   
0923   13                     INC   de   ; increase count
0924   03                     INC   bc   ; point to next char
0925                STRDEF2:      
0925   0A                     LD   a,(bc)   
0926   FE 27                  CP   "'"   ; ' is the string terminator
0928   20 F8                  JR   nz,strDef1   
092A   AF                     XOR   a   ; write null to terminate string
092B   12                     LD   (de),a   
092C   13                     INC   de   
092D   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0931   C3 36 03               JP   next   
0934                CHAR:        
0934   21 00 00               LD   hl,0   ; if `` is empty
0937                CHAR1:       
0937   03                     INC   bc   ; point to next char
0938   0A                     LD   a,(bc)   
0939   FE 60                  CP   "`"   ; ` is the string terminator
093B   28 09                  JR   z,char3   
093D   FE 5C                  CP   $5c   ; \ is the escape
093F   20 02                  JR   nz,char2   
0941   03                     INC   bc   
0942   0A                     LD   a,(bc)   
0943                CHAR2:       
0943   6F                     LD   l,a   
0944   18 F1                  JR   char1   
0946                CHAR3:       
0946   E5                     PUSH   hl   
0947                             ; dec bc
0947   C3 36 03               JP   next   
094A                EXEC:        ; execute lambda at pointer
094A   E1                     POP   hl   ; hl = pointer to lambda
094B                EXEC1:       
094B   7C                     LD   a,h   ; skip if destination address is null
094C   B5                     OR   l   
094D   28 0E                  JR   z,exec3   
094F                EXEC2:       
094F   C5                     PUSH   bc   ; push IP
0950   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0952   FD E5                  PUSH   iy   ; push BP
0954   FD 21 00 00            LD   iy,0   ; BP = SP
0958   FD 39                  ADD   iy,sp   
095A   44 4D                  LD   bc,hl   ; IP = pointer to lambda
095C   0B                     DEC   bc   ; dec to prepare for next routine
095D                EXEC3:       
095D   C3 36 03               JP   next   
0960                LAMBDA:      
0960   03                     INC   bc   
0961   2A 8C 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
0964   E5                     PUSH   hl   
0965   16 01                  LD   d,1   ; nesting: count first parenthesis
0967                LAMBDA1:      ; Skip to end of definition
0967   0A                     LD   a,(bc)   ; Get the next character
0968   03                     INC   bc   ; Point to next character
0969   77                     LD   (hl),a   
096A   23                     INC   hl   
096B   FE 27                  CP   "'"   
096D   28 1C                  JR   z,lambda2   
096F   FE 28                  CP   "("   
0971   28 18                  JR   z,lambda2   
0973   FE 29                  CP   ")"   
0975   28 14                  JR   z,lambda2   
0977   FE 7B                  CP   "{"   
0979   28 10                  JR   z,lambda2   
097B   FE 7D                  CP   "}"   ; Is it the end of the definition?
097D   28 0C                  JR   z,lambda2   
097F   FE 5B                  CP   "["   
0981   28 08                  JR   z,lambda2   
0983   FE 5D                  CP   "]"   
0985   28 04                  JR   z,lambda2   
0987   FE 60                  CP   "`"   
0989   20 DC                  JR   nz,lambda1   
098B                LAMBDA2:      
098B   14                     INC   d   
098C   CB 42                  BIT   0,d   ; balanced?
098E   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0990   FE 7D                  CP   "}"   ; Is it the end of the definition?
0992   20 D3                  JR   nz,lambda1   ; get the next element
0994   0B                     DEC   bc   
0995   22 8C 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
0998   C3 36 03               JP   next   
099B                LAMBDAEND:      
099B   E1                     POP   hl   ; hl = last result
099C   FD 54                  LD   d,iyh   ; de = BP
099E   FD 5D                  LD   e,iyl   
09A0   EB                     EX   de,hl   ; hl = BP, de = result
09A1   F9                     LD   sp,hl   ; sp = BP
09A2   E1                     POP   hl   ; hl = old BP
09A3   C1                     POP   bc   ; pop scope ptr (discard)
09A4   C1                     POP   bc   ; bc = IP
09A5   F9                     LD   sp,hl   ; sp = old BP
09A6   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
09AA   FD 39                  ADD   iy,sp   
09AC   D5                     PUSH   de   ; push result
09AD   C3 36 03               JP   next   
09B0                BLOCK:       
09B0   03                     INC   bc   
09B1   C5                     PUSH   bc   ; return first opcode of block
09B2   16 01                  LD   d,1   ; nesting: count first parenthesis
09B4                BLOCK1:      ; Skip to end of definition
09B4   0A                     LD   a,(bc)   ; Get the next character
09B5   03                     INC   bc   ; Point to next character
09B6   FE 27                  CP   "'"   
09B8   28 1C                  JR   z,block2   
09BA   FE 28                  CP   "("   
09BC   28 18                  JR   z,block2   
09BE   FE 29                  CP   ")"   
09C0   28 14                  JR   z,block2   
09C2   FE 7B                  CP   "{"   
09C4   28 10                  JR   z,block2   
09C6   FE 7D                  CP   "}"   
09C8   28 0C                  JR   z,block2   
09CA   FE 5B                  CP   "["   
09CC   28 08                  JR   z,block2   
09CE   FE 5D                  CP   "]"   
09D0   28 04                  JR   z,block2   
09D2   FE 60                  CP   "`"   
09D4   20 DE                  JR   nz,block1   
09D6                BLOCK2:      
09D6   14                     INC   d   
09D7   CB 42                  BIT   0,d   ; balanced?
09D9   20 D9                  JR   nz,block1   ; not balanced, get the next element
09DB   FE 29                  CP   ")"   ; Is it the end of the block?
09DD   20 D5                  JR   nz,block1   ; get the next element
09DF   0B                     DEC   bc   
09E0   C3 36 03               JP   next   
09E3                BLOCKEND:      
09E3   E1                     POP   hl   ; hl = last result
09E4   FD 54                  LD   d,iyh   ; de = BP
09E6   FD 5D                  LD   e,iyl   
09E8   EB                     EX   de,hl   ; hl = BP, de = result
09E9   F9                     LD   sp,hl   ; sp = BP
09EA   E1                     POP   hl   ; hl = old BP
09EB   C1                     POP   bc   ; pop SCP (discard)
09EC   C1                     POP   bc   ; bc = IP
09ED   F9                     LD   sp,hl   ; sp = old BP
09EE   FD 21 00 00            LD   iy,0   ; iy = sp
09F2   FD 39                  ADD   iy,sp   
09F4   D5                     PUSH   de   ; push result
09F5   C3 36 03               JP   next   
09F8                ARG:         
09F8   03                     INC   bc   ; get next char
09F9   0A                     LD   a,(bc)   
09FA   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09FC   E6 07                  AND   $07   ; mask
09FE   87                     ADD   a,a   ; double
09FF   6F                     LD   l,a   ; hl = offset into args
0A00   26 00                  LD   h,0   
0A02   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
0A05   FD 56 03               LD   d,(iy+3)   
0A08   EB                     EX   de,hl   ; hl = SCP - offset
0A09   B7                     OR   a   
0A0A   ED 52                  SBC   hl,de   
0A0C   2B                     DEC   hl   ; de = arg
0A0D   56                     LD   d,(hl)   
0A0E   2B                     DEC   hl   
0A0F   5E                     LD   e,(hl)   
0A10   D5                     PUSH   de   ; push arg
0A11   C3 36 03               JP   next   
0A14                             ; 
0A14                EXIT:        
0A14   50 59                  LD   de,bc   ; address of code after exit opcode
0A16   13                     INC   de   
0A17   D9                     EXX      
0A18   C1                     POP   bc   ; bc = last result
0A19   FD 54                  LD   d,iyh   ; de = BP
0A1B   FD 5D                  LD   e,iyl   
0A1D   EB                     EX   de,hl   ; hl = BP, de = result
0A1E   F9                     LD   sp,hl   ; sp = BP
0A1F   D9                     EXX      
0A20   E1                     POP   hl   ; hl = old BP
0A21   C1                     POP   bc   ; pop SCP (discard)
0A22   C1                     POP   bc   ; bc = IP
0A23   F9                     LD   sp,hl   ; sp = old BP
0A24   D9                     EXX      
0A25   C5                     PUSH   bc   ; push result
0A26   D9                     EXX      
0A27   EB                     EX   de,hl   
0A28   E9                     JP   (hl)   
0A29                IN:          
0A29   E1                     POP   hl   ; hl = string
0A2A   D1                     POP   de   ; de = char
0A2B                IN1:         
0A2B   7E                     LD   a,(hl)   
0A2C   23                     INC   hl   
0A2D   FE 00                  CP   0   ; is end of string
0A2F   28 04                  JR   z,in2   
0A31   BB                     CP   e   
0A32   20 F7                  JR   nz,in1   
0A34   B7                     OR   a   ; a is never 0, or a resets zero flag
0A35                IN2:         
0A35   21 00 00               LD   hl,0   ; hl = result
0A38   28 01                  JR   z,in3   
0A3A   2B                     DEC   hl   ; if nz de = $ffff
0A3B                IN3:         
0A3B   E5                     PUSH   hl   ; push result
0A3C   C3 36 03               JP   next   
0A3F                NEWADD2:      
0A3F   C5                     PUSH   bc   ; push IP
0A40   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A43   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A46   D5                     PUSH   de   ; push SCP
0A47   FD E5                  PUSH   iy   ; push base pointer
0A49   FD 21 0A 00            LD   iy,(3+2)*2   ; base pointer = stack pointer - (stack frame vars) - 2 args
0A4D   FD 39                  ADD   iy,sp   ; 
0A4F   FD 56 FF               LD   d,(iy-1)   
0A52   FD 5E FE               LD   e,(iy-2)   
0A55   FD 66 FD               LD   h,(iy-3)   
0A58   FD 6E FC               LD   l,(iy-4)   
0A5B   19                     ADD   hl,de   ; hl = hl + de
0A5C   EB                     EX   de,hl   ; de = result
0A5D   E1                     POP   hl   ; hl = old BP
0A5E   C1                     POP   bc   ; pop SCP (discard)
0A5F   C1                     POP   bc   ; bc = IP
0A60   F9                     LD   sp,hl   ; sp = old BP
0A61   FD 21 00 00            LD   iy,0   
0A65   FD 39                  ADD   iy,sp   
0A67   D5                     PUSH   de   ; push result
0A68   C3 36 03               JP   next   
0A6B                IF:          
0A6B   11 00 00               LD   de,0   ; null pointer for else
0A6E   18 01                  JR   ife1   
0A70                IFE:         
0A70   D1                     POP   de   ; de = else
0A71                IFE1:        
0A71   E1                     POP   hl   ; hl = then
0A72   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A73   23                     INC   hl   ; check for true
0A74   7C                     LD   a,h   
0A75   B5                     OR   l   
0A76   E1                     POP   hl   ; hl = then
0A77   28 01                  JR   z,ife2   
0A79   EB                     EX   de,hl   ; condition = false, hl = else
0A7A                IFE2:        
0A7A   7C                     LD   a,h   ; check if hl is null
0A7B   B5                     OR   l   
0A7C   CA 36 03               JP   z,next   
0A7F   C5                     PUSH   bc   ; push IP
0A80   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A83   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A86   D5                     PUSH   de   ; push SCP
0A87   FD E5                  PUSH   iy   ; push BP
0A89   FD 21 00 00            LD   iy,0   ; iy = sp
0A8D   FD 39                  ADD   iy,sp   
0A8F   44 4D                  LD   bc,hl   ; IP = then
0A91   0B                     DEC   bc   
0A92   C3 36 03               JP   next   
0A95                SWITCH:      
0A95   E1                     POP   hl   ; get condition from stack
0A96   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0A97   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A9A   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A9D   D5                     PUSH   de   ; push SCP
0A9E   FD E5                  PUSH   iy   ; push BP
0AA0   FD 21 00 00            LD   iy,0   ; BP = SP
0AA4   FD 39                  ADD   iy,sp   
0AA6   E5                     PUSH   hl   ; push condition as first arg of new frame
0AA7   C3 36 03               JP   next   
0AAA                CASE:        
0AAA   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0AAD   FD 6E FE               LD   l,(iy-2)   
0AB0   23                     INC   hl   ; hl -= 1 index from second arg
0AB1   29                     ADD   hl,hl   ; hl *= 2 word offset
0AB2   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0AB4   FD 5D                  LD   e,iyl   
0AB6   EB                     EX   de,hl   
0AB7   B7                     OR   a   ; hl = BP - offset
0AB8   ED 52                  SBC   hl,de   
0ABA   54 5D                  LD   de,hl   ; save arg ptr
0ABC   2B                     DEC   hl   ; hl += 2
0ABD   2B                     DEC   hl   
0ABE   B7                     OR   a   ; arg ptr - stack pointer
0ABF   ED 72                  SBC   hl,sp   
0AC1   30 03                  JR   nc,case0   
0AC3   D1                     POP   de   ; pop last arg
0AC4   18 05                  JR   case1   
0AC6                CASE0:       
0AC6   EB                     EX   de,hl   
0AC7   2B                     DEC   hl   ; de = arg
0AC8   56                     LD   d,(hl)   
0AC9   2B                     DEC   hl   
0ACA   5E                     LD   e,(hl)   
0ACB                CASE1:       
0ACB   7A                     LD   a,d   ; is arg == null ? then skip
0ACC   B3                     OR   e   
0ACD   28 09                  JR   z,case2   
0ACF   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
0AD2   FD 70 05               LD   (iy+5),b   
0AD5   42 4B                  LD   bc,de   ; IP = arg
0AD7   0B                     DEC   bc   
0AD8                CASE2:       
0AD8   C3 36 03               JP   next   
0ADB                WORDS:       
0ADB   21 02 00               LD   hl,2   
0ADE   C3 E1 0A               JP   bytes   
0AE1                BYTES:       
0AE1   21 01 00               LD   hl,1   
0AE4                BYTES1:      
0AE4   22 80 1B               LD   (vDataWidth),hl   
0AE7   C3 36 03               JP   next   
0AEA                ARRAY:       
0AEA   C5                     PUSH   bc   ; create stack frame, push IP
0AEB   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AEE   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AF1   D5                     PUSH   de   ; push SCP
0AF2   FD E5                  PUSH   iy   ; push BP
0AF4   FD 21 00 00            LD   iy,0   ; BP = SP
0AF8   FD 39                  ADD   iy,sp   
0AFA   C3 36 03               JP   next   
0AFD                ARRAYEND:      
0AFD   FD 54                  LD   d,iyh   ; de = BP
0AFF   FD 5D                  LD   e,iyl   
0B01   62 6B                  LD   hl,de   ; hl = de
0B03   B7                     OR   a   
0B04   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B06   C5                     PUSH   bc   ; bc' = IP
0B07   D9                     EXX      
0B08   C1                     POP   bc   
0B09   D9                     EXX      
0B0A   44 4D                  LD   bc,hl   ; bc = count
0B0C   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
0B0F   71                     LD   (hl),c   ; write count before array data
0B10   23                     INC   hl   
0B11   70                     LD   (hl),b   
0B12   23                     INC   hl   
0B13   E5                     PUSH   hl   ; hl = ptr to array (index 0)
0B14   D9                     EXX      
0B15   E1                     POP   hl   ; hl' = ptr to array (index 0)
0B16   D9                     EXX      
0B17   3A 80 1B               LD   a,(vDataWidth)   
0B1A   FE 01                  CP   1   ; byte?
0B1C   20 0D                  JR   nz,arrayEnd2   
0B1E   EB                     EX   de,hl   
0B1F                ARRAYEND1:      
0B1F   1B                     DEC   de   
0B20   1B                     DEC   de   
0B21   1A                     LD   a,(de)   
0B22   77                     LD   (hl),a   
0B23   23                     INC   hl   
0B24   0B                     DEC   bc   
0B25   79                     LD   a,c   
0B26   B0                     OR   b   
0B27   20 F6                  JR   nz,arrayEnd1   
0B29   18 10                  JR   arrayEnd4   
0B2B                ARRAYEND2:      
0B2B   1B                     DEC   de   
0B2C   1A                     LD   a,(de)   
0B2D   08                     EX   af,af'   
0B2E   1B                     DEC   de   
0B2F   1A                     LD   a,(de)   
0B30   77                     LD   (hl),a   
0B31   23                     INC   hl   
0B32   08                     EX   af,af'   
0B33   1A                     LD   a,(de)   
0B34   77                     LD   (hl),a   
0B35   23                     INC   hl   
0B36   0B                     DEC   bc   
0B37   79                     LD   a,c   
0B38   B0                     OR   b   
0B39   20 F0                  JR   nz,arrayEnd2   
0B3B                ARRAYEND4:      
0B3B   FD 54                  LD   d,iyh   ; de = BP
0B3D   FD 5D                  LD   e,iyl   
0B3F   EB                     EX   de,hl   ; hl = BP, de = result
0B40   F9                     LD   sp,hl   ; sp = BP
0B41   E1                     POP   hl   ; hl = old BP
0B42   C1                     POP   bc   ; pop SCP (discard)
0B43   C1                     POP   bc   ; bc = IP
0B44   F9                     LD   sp,hl   ; sp = old BP
0B45   FD 21 00 00            LD   iy,0   ; iy = sp
0B49   FD 39                  ADD   iy,sp   
0B4B   D9                     EXX      
0B4C   E5                     PUSH   hl   
0B4D   C5                     PUSH   bc   
0B4E   D9                     EXX      
0B4F   C1                     POP   bc   
0B50   C3 36 03               JP   next   
0B53                             ; updateEntry:
0B53                             ;     ld bc,
0B53                             ;     pop hl                          ; pointer to args
0B53                             ;     ld e,(hl)
0B53                             ;     ret
0B53                             ; hash C-string in BC, result in HL
0B53                HASHSTR:      
0B53   21 00 00               LD   hl,0   
0B56                HASHSTR1:      
0B56   0A                     LD   a,(bc)   ; load next char
0B57   03                     INC   bc   
0B58   FE 00                  CP   0   ; null?
0B5A   C8                     RET   z   
0B5B                HASHSTR2:      
0B5B   16 00                  LD   d,0   
0B5D   5F                     LD   e,a   
0B5E   19                     ADD   hl,de   
0B5F   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0B61   29                     ADD   hl,hl   ; shift left
0B62   19                     ADD   hl,de   ; add
0B63   29                     ADD   hl,hl   ; shift left
0B64   29                     ADD   hl,hl   ; shift left
0B65   29                     ADD   hl,hl   ; shift left
0B66   29                     ADD   hl,hl   ; shift left
0B67   29                     ADD   hl,hl   ; shift left
0B68   29                     ADD   hl,hl   ; shift left
0B69   19                     ADD   hl,de   ; add
0B6A   18 EA                  JR   hashStr1   
0B6C                             ; add entry to hash slots and hash pointers
0B6C                             ; bc = hash (b = hi, c = lo), de = addr
0B6C                             ; sets carry if successful
0B6C                DEFINEENTRY:      
0B6C   CB 21                  SLA   c   ; lo = lo * 2
0B6E   69                     LD   l,c   ; lo1 = lo
0B6F   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0B71                DEFINEENTRY0:      
0B71   7E                     LD   a,(hl)   ; a = (lo1)
0B72   FE FF                  CP   UNUSED   ; is it unused?
0B74   28 12                  JR   z,defineEntry3   ; yes, add entry
0B76   79                     LD   a,c   ; a = lo
0B77   BE                     CP   (hl)   ; compare (lo1) with lo
0B78   20 06                  JR   nz,defineEntry1   ; no match loop around
0B7A   2C                     INC   l   
0B7B   78                     LD   a,b   ; a = hi
0B7C   BE                     CP   (hl)   ; compare (lo1+1) with hi
0B7D   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0B7F   2D                     DEC   l   ; restore l
0B80                DEFINEENTRY1:      
0B80   2C                     INC   l   ; try next entry
0B81   2C                     INC   l   
0B82   79                     LD   a,c   ; compare lo and lo1
0B83   BD                     CP   l   ; if equal then there's no space left, reject
0B84   20 EB                  JR   nz,defineEntry0   
0B86                DEFINEENTRY2:      
0B86   3F                     CCF      ; clear carry flag, failure
0B87   C9                     RET      
0B88                DEFINEENTRY3:      ; new entry
0B88   71                     LD   (hl),c   ; (lo1) = hash lo
0B89   23                     INC   hl   
0B8A   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0B8B   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0B8D   72                     LD   (hl),d   
0B8E   2B                     DEC   hl   
0B8F   73                     LD   (hl),e   ; (slot + 2) = address
0B90   37                     SCF      ; set carry flag, success
0B91   C9                     RET      
0B92                             ; looks up hash and returns address
0B92                             ; bc = hash
0B92                             ; returns addr in hl, sets carry if successful
0B92                LOOKUPENTRY:      
0B92   CB 21                  SLA   c   ; lo = lo * 2
0B94   69                     LD   l,c   ; lo1 = lo
0B95   26 1D                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0B97                LOOKUPENTRY0:      
0B97   7E                     LD   a,(hl)   ; a = (hl), slot
0B98   FE FF                  CP   UNUSED   ; is it unused?
0B9A   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0B9C   79                     LD   a,c   ; a = lo
0B9D   BE                     CP   (hl)   ; compare (lo1) with lo
0B9E   20 06                  JR   nz,lookupEntry1   ; no match loop around
0BA0   2C                     INC   l   
0BA1   78                     LD   a,b   ; a = hi
0BA2   BE                     CP   (hl)   ; compare (lo1+1) with hi
0BA3   28 09                  JR   z,lookupEntry3   
0BA5   2D                     DEC   l   
0BA6                LOOKUPENTRY1:      
0BA6   2C                     INC   l   
0BA7   2C                     INC   l   
0BA8   79                     LD   a,c   
0BA9   BD                     CP   l   ; no space left, reject
0BAA   20 EB                  JR   nz,lookupEntry0   
0BAC                LOOKUPENTRY2:      
0BAC   3F                     CCF      ; clear carry flag, failure
0BAD   C9                     RET      
0BAE                LOOKUPENTRY3:      
0BAE   26 1E                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0BB0   56                     LD   d,(hl)   
0BB1   2D                     DEC   l   ; restore l
0BB2   5E                     LD   e,(hl)   ; (slot + 2) = address
0BB3   EB                     EX   de,hl   
0BB4   37                     SCF      
0BB5   C9                     RET      
0BB6                             ; str -- num
0BB6                HASH:        
0BB6   E1                     POP   hl   
0BB7   C5                     PUSH   bc   
0BB8   44 4D                  LD   bc,hl   
0BBA   CD 53 0B               CALL   hashStr   
0BBD   C1                     POP   bc   
0BBE   E5                     PUSH   hl   
0BBF   C3 36 03               JP   next   
0BC2                             ; str addr -- bool
0BC2                DEF:         
0BC2   E1                     POP   hl   ; hl = addr
0BC3   E3                     EX   (sp),hl   ; hl = str pointer (sp) = addr
0BC4   C5                     PUSH   bc   
0BC5   44 4D                  LD   bc,hl   
0BC7   CD 53 0B               CALL   hashStr   ; hl = hash
0BCA   44 4D                  LD   bc,hl   ; bc = hash
0BCC   E1                     POP   hl   ; hl = old BC
0BCD   E3                     EX   (sp),hl   ; hl = addr
0BCE   EB                     EX   de,hl   ; de = addr
0BCF   CD 6C 0B               CALL   defineEntry   
0BD2   21 00 00               LD   hl,0   ; if c return TRUE
0BD5   30 01                  JR   nc,def1   
0BD7   2B                     DEC   hl   
0BD8                DEF1:        
0BD8   C1                     POP   bc   
0BD9   E5                     PUSH   hl   
0BDA   C3 36 03               JP   next   
0BDD                             ; str -- addr
0BDD                LOOKUP:      
0BDD   E1                     POP   hl   ; hl = str pointer
0BDE   C5                     PUSH   bc   
0BDF   44 4D                  LD   bc,hl   
0BE1   CD 53 0B               CALL   hashStr   ; hl = hash
0BE4   44 4D                  LD   bc,hl   
0BE6   CD 92 0B               CALL   lookupEntry   
0BE9   38 03                  JR   c,lookup1   
0BEB   21 00 00               LD   hl,0   
0BEE                LOOKUP1:      
0BEE   C1                     POP   bc   
0BEF   E5                     PUSH   hl   
0BF0   C3 36 03               JP   next   
0BF3                DEFINE:      
0BF3   E1                     POP   hl   
0BF4   7E                     LD   a,(hl)   
0BF5   23                     INC   hl   
0BF6   44 4D                  LD   bc,hl   
0BF8   5F                     LD   e,a   
0BF9   16 00                  LD   d,0   
0BFB   19                     ADD   hl,de   
0BFC   5E                     LD   e,(hl)   
0BFD   23                     INC   hl   
0BFE   56                     LD   d,(hl)   
0BFF   23                     INC   hl   
0C00   E5                     PUSH   hl   ; bc = str
0C01   D5                     PUSH   de   
0C02   CD 53 0B               CALL   hashStr   ; hl = hash
0C05   D1                     POP   de   
0C06   44 4D                  LD   bc,hl   
0C08   C3 6C 0B               JP   defineEntry   
0C0B                IDENT:       
0C0B   21 00 1A               LD   hl,PAD   
0C0E   18 01                  JR   ident1   
0C10                IDENT0:      
0C10   03                     INC   bc   
0C11                IDENT1:      
0C11   0A                     LD   a,(bc)   
0C12   FE 21                  CP   " "+1   
0C14   38 04                  JR   c,ident2   
0C16   77                     LD   (hl),a   
0C17   23                     INC   hl   
0C18   18 F6                  JR   ident0   
0C1A                IDENT2:      
0C1A   0B                     DEC   bc   
0C1B   AF                     XOR   a   
0C1C   77                     LD   (hl),a   ; terminate string with null
0C1D   C5                     PUSH   bc   
0C1E   01 00 1A               LD   bc,PAD   
0C21   CD 53 0B               CALL   hashStr   ; hl = hash
0C24   44 4D                  LD   bc,hl   
0C26   CD 92 0B               CALL   lookupEntry   
0C29   C1                     POP   bc   
0C2A   38 03                  JR   c,ident3   ; todo: no entry? print an error message
0C2C   C3 36 03               JP   next   
0C2F                IDENT3:      
0C2F   E9                     JP   (hl)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                ALTVARS:      
1B7E                          DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                             ; ****************************************************************
1BB2                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB2                             ; ****************************************************************
1BB2                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                          ALIGN   $100   
1D00                HASHSLOTS:   DS   $100   
1E00                          ALIGN   $100   
1E00                HASHWORDS:   DS   $100   
1F00                HEAP:        
1F00                BASE:     .SET   37   
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "1 2 add", 3
4000   31 00 1A               LD   SP,DSTACK   
4003   CD DE 07               CALL   init   
4006   CD 4A 09               CALL   exec   
4009   31 20 32 20 61 64 64 00 .CSTR   "1 2 add"   
4011                          ;*Macro unroll:  expect "1 2 add",3
4011   E1                     POP   HL   
4012   E5                     PUSH   HL   
4013   11 03 00               LD   DE,3   
4016   B7                     OR   A   
4017   ED 52                  SBC   HL,DE   
4019   7D                     LD   A,L   
401A   B4                     OR   H   
401B   28 52                  JR   Z,expectM_0_2350S43   
401D   CD C9 08               CALL   printStr   
4020   43 6F 64 65 3A 20 31 20 32 20 61 64 64 00 .CSTR   "Code: ","1 2 add"   
402E   CD C9 08               CALL   printStr   
4031   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4040   21 03 00               LD   HL,3   
4043   CD 62 08               CALL   prtdec   
4046   CD C9 08               CALL   printStr   
4049   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4056   E1                     POP   hl   
4057   E5                     PUSH   hl   
4058   CD 62 08               CALL   prtdec   
405B   E1                     POP   hl   
405C   CD C9 08               CALL   printStr   
405F   20 28 23 00            .CSTR   " (#"   
4063   CD AA 08               CALL   prthex   
4066   CD C9 08               CALL   printStr   
4069   29 0D 0A 00            .CSTR   ")\r\n"   
406D   76                     HALT      
406E   00                     .CSTR      
406F                EXPECTM_0_2350S43:      
406F   E1                     POP   HL   
4070                             ; test "'H' 2 de 'J' 3 de 'H' lo 'J' lo +", 5
4070                             ; test "'H' 2 de 'H' lo", 2
4070                             ; test "'H' 2 de", TRUE
4070                             ; test "'H' ha", $3648
4070                             ; test "'H' {1} de 'H' lo", 1
4070                             ; test "by [`A` `B` `C`]", 0
4070                             ; test "by [`A` `B` `C`] 1 ge", "B"
4070                             ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", "Z"
4070                             ; test "wo [10 20 30] 1 ge", 10
4070                             ; test "wo [10 20 30] 1 50 set 1 get", 50
4070                             ; test "1 2 +", 3
4070                             ; test "4 1 2 +", 3
4070                             ; test "1", 1
4070                             ; test "2", 2
4070                             ; test "``", 0
4070                             ; test "`a`", $61
4070                             ; test "`\\``", $60
4070                             ; test "`b` 'cba' in", -1
4070                             ; test "`x` 'cba' in", 0
4070                             ; test "5 0 (1) if", 5
4070                             ; test "0 (1) (2) ife", 2
4070                             ; test "5 -1 (1) if", 1
4070                             ; test "-1 (1) (2) ife", 1
4070                             ; test "9 sw (1) (5) ca", 5
4070                             ; test "0 sw (1) ca", 1
4070                             ; test "1 sw (1) (2) (3) ca", 2
4070                             ; test "5 -1 (2) if", 2
4070                             ; test "5 0 (2) if", 5
4070                             ; test "5 0 (0 (2) if) if", 5
4070                             ; test "5 0 (-1 (2) if) if", 5
4070                             ; test "5 -1 (2) if", 2
4070                             ; test "5 -1 (-1 (2) if) if", 2
4070                             ; test "(1) ex", 1
4070                             ; test "2 ($1) ex", 2
4070                             ; test "2 4 ($2) ex", 4
4070                             ; test "((1) ex) ex", 1
4070                             ; test "5 (-1 ($1) if) ex", 5
4070                             ; test "'A' @", 65
4070                             ; test "1", 1
4070                             ; test "0", 0
4070                             ; test "10", 10
4070                             ; test "123", 123
4070                             ; test "$10", $10
4070                             ; test "$FF", $FF
4070                             ; test "2 3 =", 0
4070                             ; test "3 3 =", 1
4070                             ; test "2 3 <", 1
4070                             ; test "3 3 <", 0
4070                             ; test "3 3 >", 0
4070                             ; test "4 3 >", 1
4070                             ; test "1 2 +", 3
4070                             ; test "123 456 +", 123+456
4070                             ; test "64 128 +", 64+128
4070                             ; test "5 3 -", 2
4070                             ; test "3 5 &", 1
4070                             ; test "3 5 |", 7
4070                             ; test "2 3 *", 6
4070                             ; test "1 2 3 + *", 5
4070                             ; ; test "1 2 3 ' +", 3
4070                             ; ; test "1_ 2 +",1
4070                             ; ; test "1_ 1 +",0
4070                             ; ; call enter
4070                             ; ;     .cstr "1 3",$22,"+"
4070                             ; ; expect "1 3 DUP +", 6
4070                             ; ; test "5 2/'", 2
4070                             ; ; test "3 5$ -", 2
4070                             ; ; test "5 2/$ '", 1
4070                             ; ; test "2 3%++", 7
4070                             ; ; test "1 2 3~''", 2
4070                             ; ; test "1 2 3~+*", 8
4070                             ; ; test "2a!a@",2
4070                             ; ; test "3x! 1 x@+x! x@", 4
4070                             ; ; test "3x! 1_ x@+x! x@", 2
4070                             ; ; test "1{", 2
4070                             ; ; test "1}", 0
4070                             ; ; test "2}", 1
4070                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
4070                             ; ; test "(2) \\^", 2
4070                             ; ; test ":X1; X", 1
4070                             ; ; test ":A100;A", 100
4070                             ; ; test ":Aa!; 3A a@", 3
4070                             ; ; test ":Aa!;:Ba@;4AB", 4
4070                             ; ; test "[]$ '", 0
4070                             ; ; test "[3]$ '", 1
4070                             ; ; test "[3]'@", 3
4070                             ; ; test "[1 2 3]'@", 1
4070                             ; ; test "[1 2 3]'2+@", 2
4070                             ; ; test "\\h@[1]''\\h@$-", 2
4070                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
4070                             ; ; test "\\[]$ '", 0
4070                             ; ; test "\\[3]'\\@", 3
4070                             ; ; test "\\[3]$ '", 1
4070                             ; ; test "\\[1 2 3]'\\@", 1
4070                             ; ; test "\\[1 2 3]'1+\\@", 2
4070                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
4070                             ; ; test "\\h@\\[1]''\\h@$-", 1
4070                             ; ; test "\\`A`\\@",65
4070                             ; ; test "0 0(1+)", 0
4070                             ; ; test "0 1(1+)", 1
4070                             ; ; test "0 2(1+)", 2
4070                             ; ; test "0 1(0(1+))", 0
4070                             ; ; test "0 1(1(1+))", 1
4070                             ; ; test "0 2(1(1+))", 2
4070                             ; ; test "0 2(2(1+))", 4
4070                             ; ; test "0 1(\\i@+)", 0
4070                             ; ; test "0 2(\\i@+)", 1
4070                             ; ; test "0 3(\\i@+)", 3
4070                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
4070                             ; ; test "0t! 10(1 t@+t!) t@",10
4070                             ; ; test "0(100)(200)",200
4070                             ; ; test "1(100)(200)",100
4070                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
4070                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
4070                             ; ; test ":X10;\\0X", 10
4070                             ; ; test "2 \\1x! \\1x@", 2
4070   CD C9 08               CALL   printStr   
4073   44 6F 6E 65 21 00      .CSTR   "Done!"   
4079   76                     HALT      


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 30 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 255 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 285 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1196 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 67 IN ram.asm
MACROS:             0180 DEFINED AT LINE 35 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 40 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
OPCODES:            0200 DEFINED AT LINE 51 IN Siena.asm
CTRLCODES:          0280 DEFINED AT LINE 181 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
ETX:                02A0 DEFINED AT LINE 215 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
ETX1:               02A9 DEFINED AT LINE 220 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
START:              02AB DEFINED AT LINE 223 IN Siena.asm
INTERPRET:          02C1 DEFINED AT LINE 229 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
INTERPRET2:         02CB DEFINED AT LINE 235 IN Siena.asm
                    > USED AT LINE 278 IN Siena.asm
INTERPRET3:         02D3 DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
INTERPRET4:         02D9 DEFINED AT LINE 248 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
WAITCHAR:           02DE DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
                    > USED AT LINE 301 IN Siena.asm
MACRO:              02ED DEFINED AT LINE 263 IN Siena.asm
MACRO1:             0304 DEFINED AT LINE 276 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
WAITCHAR1:          030A DEFINED AT LINE 280 IN Siena.asm
                    > USED AT LINE 257 IN Siena.asm
WAITCHAR3:          0318 DEFINED AT LINE 289 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
WAITCHAR4:          032E DEFINED AT LINE 305 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
NEXT:               0336 DEFINED AT LINE 332 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 478 IN Siena.asm
                    > USED AT LINE 484 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
                    > USED AT LINE 506 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
                    > USED AT LINE 544 IN Siena.asm
                    > USED AT LINE 552 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
                    > USED AT LINE 665 IN Siena.asm
                    > USED AT LINE 672 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
                    > USED AT LINE 686 IN Siena.asm
                    > USED AT LINE 692 IN Siena.asm
                    > USED AT LINE 696 IN Siena.asm
                    > USED AT LINE 707 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
                    > USED AT LINE 720 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
                    > USED AT LINE 732 IN Siena.asm
                    > USED AT LINE 737 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 990 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
                    > USED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
                    > USED AT LINE 1512 IN Siena.asm
                    > USED AT LINE 1532 IN Siena.asm
                    > USED AT LINE 1542 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1797 IN Siena.asm
                    > USED AT LINE 1817 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
                    > USED AT LINE 1876 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 345 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 347 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 349 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 351 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 353 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 355 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 357 IN Siena.asm
LAMBDAEND_:         0412 DEFINED AT LINE 359 IN Siena.asm
DOT_:               0415 DEFINED AT LINE 361 IN Siena.asm
DOT2:               0419 DEFINED AT LINE 364 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
BLOCK_:             0421 DEFINED AT LINE 368 IN Siena.asm
BLOCKEND_:          0424 DEFINED AT LINE 370 IN Siena.asm
CHAR_:              0427 DEFINED AT LINE 372 IN Siena.asm
ARRAY_:             042A DEFINED AT LINE 374 IN Siena.asm
ARRAYEND_:          042D DEFINED AT LINE 376 IN Siena.asm
IDENT_:             0430 DEFINED AT LINE 378 IN Siena.asm
A_:                 0433 DEFINED AT LINE 381 IN Siena.asm
C_:                 0436 DEFINED AT LINE 383 IN Siena.asm
D_:                 0439 DEFINED AT LINE 385 IN Siena.asm
E_:                 043C DEFINED AT LINE 387 IN Siena.asm
F_:                 043F DEFINED AT LINE 389 IN Siena.asm
G_:                 0442 DEFINED AT LINE 391 IN Siena.asm
H_:                 0445 DEFINED AT LINE 393 IN Siena.asm
I_:                 0448 DEFINED AT LINE 395 IN Siena.asm
K_:                 044B DEFINED AT LINE 397 IN Siena.asm
L_:                 044E DEFINED AT LINE 399 IN Siena.asm
M_:                 0451 DEFINED AT LINE 401 IN Siena.asm
N_:                 0454 DEFINED AT LINE 403 IN Siena.asm
O_:                 0457 DEFINED AT LINE 405 IN Siena.asm
P_:                 045A DEFINED AT LINE 407 IN Siena.asm
R_:                 045D DEFINED AT LINE 409 IN Siena.asm
S_:                 0460 DEFINED AT LINE 411 IN Siena.asm
U_:                 0463 DEFINED AT LINE 413 IN Siena.asm
W_:                 0466 DEFINED AT LINE 415 IN Siena.asm
X_:                 0469 DEFINED AT LINE 417 IN Siena.asm
AND_:               046C DEFINED AT LINE 420 IN Siena.asm
                    > USED AT LINE 749 IN Siena.asm
AND1:               0473 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 442 IN Siena.asm
                    > USED AT LINE 453 IN Siena.asm
OR_:                0478 DEFINED AT LINE 434 IN Siena.asm
                    > USED AT LINE 879 IN Siena.asm
XOR_:               0481 DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 944 IN Siena.asm
XOR1:               0482 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 457 IN Siena.asm
INV_:               048A DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 821 IN Siena.asm
ADD_:               048F DEFINED AT LINE 459 IN Siena.asm
                    > USED AT LINE 747 IN Siena.asm
                    > USED AT LINE 1060 IN Siena.asm
HDOT_:              0496 DEFINED AT LINE 466 IN Siena.asm
DROP_:              049D DEFINED AT LINE 471 IN Siena.asm
UNDROP_:            04A1 DEFINED AT LINE 475 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
DUP_:               04A6 DEFINED AT LINE 480 IN Siena.asm
ETX_:               04AC DEFINED AT LINE 485 IN Siena.asm
EXIT_:              04AF DEFINED AT LINE 488 IN Siena.asm
FETCH_:             04B2 DEFINED AT LINE 491 IN Siena.asm
FETCH1:             04B3 DEFINED AT LINE 493 IN Siena.asm
KEY_:               04BA DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 839 IN Siena.asm
MUL_:               04C4 DEFINED AT LINE 508 IN Siena.asm
                    > USED AT LINE 861 IN Siena.asm
NOP_:               04C7 DEFINED AT LINE 510 IN Siena.asm
OVER_:              04CA DEFINED AT LINE 514 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
ROT_:               04D2 DEFINED AT LINE 522 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
SHL_:               04DA DEFINED AT LINE 531 IN Siena.asm
SHR_:               04E0 DEFINED AT LINE 538 IN Siena.asm
SHR1:               04E1 DEFINED AT LINE 540 IN Siena.asm
STORE_:             04E9 DEFINED AT LINE 546 IN Siena.asm
SWAP_:              04F1 DEFINED AT LINE 554 IN Siena.asm
NEG_:               04F7 DEFINED AT LINE 560 IN Siena.asm
                    > USED AT LINE 869 IN Siena.asm
SUB_:               04FD DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 916 IN Siena.asm
SUB2:               04FF DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
EQ_:                0506 DEFINED AT LINE 574 IN Siena.asm
                    > USED AT LINE 785 IN Siena.asm
FALSE_:             050D DEFINED AT LINE 580 IN Siena.asm
                    > USED AT LINE 596 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
GT_:                0514 DEFINED AT LINE 585 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
LT_:                0518 DEFINED AT LINE 590 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
LT1:                051A DEFINED AT LINE 593 IN Siena.asm
                    > USED AT LINE 588 IN Siena.asm
TRUE_:              0522 DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
GTE_:               0529 DEFINED AT LINE 603 IN Siena.asm
LTE_:               052D DEFINED AT LINE 607 IN Siena.asm
LTE1:               052F DEFINED AT LINE 610 IN Siena.asm
                    > USED AT LINE 606 IN Siena.asm
DIV_:               0538 DEFINED AT LINE 616 IN Siena.asm
                    > USED AT LINE 775 IN Siena.asm
DIV:                053A DEFINED AT LINE 623 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
DIV1:               0544 DEFINED AT LINE 633 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
DIV2:               0551 DEFINED AT LINE 642 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
DIV3:               0552 DEFINED AT LINE 644 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
DIV4:               0557 DEFINED AT LINE 649 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 662 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 664 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 667 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 674 IN Siena.asm
                    > USED AT LINE 678 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 682 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 688 IN Siena.asm
PROMPT_:            0623 DEFINED AT LINE 694 IN Siena.asm
INPORT_:            0629 DEFINED AT LINE 699 IN Siena.asm
NEWLN_:             0635 DEFINED AT LINE 709 IN Siena.asm
OUTPORT_:           063B DEFINED AT LINE 713 IN Siena.asm
PRTSTR_:            0645 DEFINED AT LINE 722 IN Siena.asm
PRTSTR:             0645 DEFINED AT LINE 723 IN Siena.asm
RPUSH_:             064C DEFINED AT LINE 729 IN Siena.asm
RPOP_:              0653 DEFINED AT LINE 734 IN Siena.asm
A:                  065A DEFINED AT LINE 743 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 243 IN Siena.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
                    > USED AT LINE 270 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
                    > USED AT LINE 299 IN Siena.asm
                    > USED AT LINE 300 IN Siena.asm
                    > USED AT LINE 334 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
                    > USED AT LINE 426 IN Siena.asm
                    > USED AT LINE 429 IN Siena.asm
                    > USED AT LINE 437 IN Siena.asm
                    > USED AT LINE 439 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
                    > USED AT LINE 569 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
                    > USED AT LINE 594 IN Siena.asm
                    > USED AT LINE 611 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
                    > USED AT LINE 705 IN Siena.asm
                    > USED AT LINE 745 IN Siena.asm
                    > USED AT LINE 755 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 781 IN Siena.asm
                    > USED AT LINE 791 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
                    > USED AT LINE 825 IN Siena.asm
                    > USED AT LINE 837 IN Siena.asm
                    > USED AT LINE 845 IN Siena.asm
                    > USED AT LINE 857 IN Siena.asm
                    > USED AT LINE 867 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
                    > USED AT LINE 885 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
                    > USED AT LINE 932 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 1006 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 1072 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1085 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 1105 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1192 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1226 IN Siena.asm
                    > USED AT LINE 1280 IN Siena.asm
                    > USED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1287 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
                    > USED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1303 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1478 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1693 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
                    > USED AT LINE 1760 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
                    > USED AT LINE 1839 IN Siena.asm
                    > USED AT LINE 1859 IN Siena.asm
                    > USED AT LINE 1862 IN Siena.asm
                    > USED AT LINE 1867 IN Siena.asm
                    > USED AT LINE 1868 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
B:                  066A DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
                    > USED AT LINE 1154 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
                    > USED AT LINE 1744 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
C:                  0675 DEFINED AT LINE 761 IN Siena.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 384 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 634 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 701 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
                    > USED AT LINE 705 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 1148 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
                    > USED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 1643 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
                    > USED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1827 IN Siena.asm
                    > USED AT LINE 1861 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
D:                  0680 DEFINED AT LINE 769 IN Siena.asm
                    > USED AT LINE 272 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 426 IN Siena.asm
                    > USED AT LINE 440 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
                    > USED AT LINE 496 IN Siena.asm
                    > USED AT LINE 551 IN Siena.asm
                    > USED AT LINE 647 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
                    > USED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 1357 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
                    > USED AT LINE 1368 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1437 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
                    > USED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
                    > USED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1604 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1782 IN Siena.asm
                    > USED AT LINE 1840 IN Siena.asm
                    > USED AT LINE 1844 IN Siena.asm
E:                  0690 DEFINED AT LINE 779 IN Siena.asm
                    > USED AT LINE 236 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
                    > USED AT LINE 299 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
                    > USED AT LINE 423 IN Siena.asm
                    > USED AT LINE 437 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
                    > USED AT LINE 494 IN Siena.asm
                    > USED AT LINE 549 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 670 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 719 IN Siena.asm
                    > USED AT LINE 980 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
                    > USED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1476 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 1497 IN Siena.asm
                    > USED AT LINE 1534 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1748 IN Siena.asm
                    > USED AT LINE 1784 IN Siena.asm
                    > USED AT LINE 1839 IN Siena.asm
                    > USED AT LINE 1842 IN Siena.asm
F:                  06A0 DEFINED AT LINE 789 IN Siena.asm
                    > USED AT LINE 390 IN Siena.asm
G:                  06AB DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
H:                  06BB DEFINED AT LINE 807 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 427 IN Siena.asm
                    > USED AT LINE 429 IN Siena.asm
                    > USED AT LINE 441 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
                    > USED AT LINE 704 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
                    > USED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1315 IN Siena.asm
                    > USED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1745 IN Siena.asm
                    > USED AT LINE 1758 IN Siena.asm
                    > USED AT LINE 1781 IN Siena.asm
                    > USED AT LINE 9
I:                  06C6 DEFINED AT LINE 815 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
I1:                 06E2 DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 823 IN Siena.asm
K:                  06E6 DEFINED AT LINE 834 IN Siena.asm
                    > USED AT LINE 398 IN Siena.asm
L:                  06F4 DEFINED AT LINE 843 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
                    > USED AT LINE 400 IN Siena.asm
                    > USED AT LINE 424 IN Siena.asm
                    > USED AT LINE 425 IN Siena.asm
                    > USED AT LINE 438 IN Siena.asm
                    > USED AT LINE 439 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
                    > USED AT LINE 628 IN Siena.asm
                    > USED AT LINE 690 IN Siena.asm
                    > USED AT LINE 702 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
                    > USED AT LINE 1015 IN Siena.asm
                    > USED AT LINE 1019 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
                    > USED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1499 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
                    > USED AT LINE 1766 IN Siena.asm
                    > USED AT LINE 1770 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
                    > USED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 1775 IN Siena.asm
                    > USED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 8
M:                  0709 DEFINED AT LINE 855 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
                    > USED AT LINE 597 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
N:                  0719 DEFINED AT LINE 865 IN Siena.asm
                    > USED AT LINE 404 IN Siena.asm
O:                  0724 DEFINED AT LINE 873 IN Siena.asm
                    > USED AT LINE 406 IN Siena.asm
P:                  0734 DEFINED AT LINE 883 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
R:                  073F DEFINED AT LINE 890 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
S:                  074A DEFINED AT LINE 898 IN Siena.asm
                    > USED AT LINE 412 IN Siena.asm
U:                  0769 DEFINED AT LINE 922 IN Siena.asm
                    > USED AT LINE 414 IN Siena.asm
W:                  0774 DEFINED AT LINE 930 IN Siena.asm
                    > USED AT LINE 416 IN Siena.asm
X:                  0784 DEFINED AT LINE 940 IN Siena.asm
                    > USED AT LINE 418 IN Siena.asm
                    > USED AT LINE 835 IN Siena.asm
CLOSURE_:           078F DEFINED AT LINE 948 IN Siena.asm
FILTER_:            078F DEFINED AT LINE 949 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
GET_:               078F DEFINED AT LINE 950 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
IF_:                078F DEFINED AT LINE 951 IN Siena.asm
LET_:               078F DEFINED AT LINE 952 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
MAP_:               078F DEFINED AT LINE 953 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
PRINT_:             078F DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 887 IN Siena.asm
SCAN_:              078F DEFINED AT LINE 955 IN Siena.asm
                    > USED AT LINE 902 IN Siena.asm
SET_:               078F DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
SHIFT_:             078F DEFINED AT LINE 957 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
WHILE_:             078F DEFINED AT LINE 958 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
VAR_:               078F DEFINED AT LINE 959 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 759 IN Siena.asm
                    > USED AT LINE 767 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 805 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
                    > USED AT LINE 853 IN Siena.asm
                    > USED AT LINE 863 IN Siena.asm
                    > USED AT LINE 871 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
                    > USED AT LINE 889 IN Siena.asm
                    > USED AT LINE 896 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
MUL:                0792 DEFINED AT LINE 969 IN Siena.asm
                    > USED AT LINE 508 IN Siena.asm
MUL2:               079C DEFINED AT LINE 978 IN Siena.asm
                    > USED AT LINE 987 IN Siena.asm
PROMPT:             07AF DEFINED AT LINE 997 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
                    > USED AT LINE 695 IN Siena.asm
PUTSTR0:            07B8 DEFINED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
PUTSTR:             07BC DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 725 IN Siena.asm
                    > USED AT LINE 1200 IN Siena.asm
RPUSH:              07C1 DEFINED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
RPOP:               07CC DEFINED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 735 IN Siena.asm
RPOP2:              07D6 DEFINED AT LINE 1023 IN Siena.asm
CRLF:               07D7 DEFINED AT LINE 1026 IN Siena.asm
                    > USED AT LINE 298 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
INIT:               07DE DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 225 IN Siena.asm
                    > USED AT LINE 40
INIT1:              0805 DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
NUM:                0814 DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 348 IN Siena.asm
NUM0:               081D DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
NUM1:               081E DEFINED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
NUM2:               0836 DEFINED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
                    > USED AT LINE 1076 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
NUM3:               0841 DEFINED AT LINE 1097 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
HEXNUM:             0845 DEFINED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 350 IN Siena.asm
HEXNUM1:            0848 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
HEXNUM2:            0850 DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 1107 IN Siena.asm
PRTDEC:             0862 DEFINED AT LINE 1122 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            0871 DEFINED AT LINE 1137 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
PRTDEC1:            0893 DEFINED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
                    > USED AT LINE 1145 IN Siena.asm
                    > USED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1150 IN Siena.asm
PRTDEC2:            0895 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
PRTDEC3:            08A5 DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1162 IN Siena.asm
PRTDEC4:            08A6 DEFINED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
PRTHEX:             08AA DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 468 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            08B5 DEFINED AT LINE 1182 IN Siena.asm
                    > USED AT LINE 1177 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
PRTHEX3:            08BE DEFINED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1188 IN Siena.asm
PRINTSTR:           08C9 DEFINED AT LINE 1198 IN Siena.asm
                    > USED AT LINE 226 IN Siena.asm
                    > USED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1027 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 150
LOOKUPREF:          08D0 DEFINED AT LINE 1205 IN Siena.asm
LOOKUPREF0:         08D2 DEFINED AT LINE 1207 IN Siena.asm
LOOKUPREF1:         08D6 DEFINED AT LINE 1210 IN Siena.asm
LOOKUPREF2:         08DC DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1209 IN Siena.asm
LOOKUPREF3:         08E0 DEFINED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
NESTING:            08EE DEFINED AT LINE 1240 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 286 IN Siena.asm
NESTING1A:          08F9 DEFINED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
NESTING1:           08FC DEFINED AT LINE 1250 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
NESTING2:           090B DEFINED AT LINE 1259 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1256 IN Siena.asm
NESTING3:           090D DEFINED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1258 IN Siena.asm
NESTING4:           0918 DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1266 IN Siena.asm
STRDEF:             091A DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 354 IN Siena.asm
STRDEF1:            0922 DEFINED AT LINE 1279 IN Siena.asm
                    > USED AT LINE 1286 IN Siena.asm
STRDEF2:            0925 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
CHAR:               0934 DEFINED AT LINE 1293 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
CHAR1:              0937 DEFINED AT LINE 1295 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
CHAR2:              0943 DEFINED AT LINE 1304 IN Siena.asm
                    > USED AT LINE 1301 IN Siena.asm
CHAR3:              0946 DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1299 IN Siena.asm
EXEC:               094A DEFINED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 274 IN Siena.asm
                    > USED AT LINE 783 IN Siena.asm
                    > USED AT LINE 41
EXEC1:              094B DEFINED AT LINE 1314 IN Siena.asm
EXEC2:              094F DEFINED AT LINE 1318 IN Siena.asm
EXEC3:              095D DEFINED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
LAMBDA:             0960 DEFINED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LAMBDA1:            0967 DEFINED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
                    > USED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1361 IN Siena.asm
LAMBDA2:            098B DEFINED AT LINE 1356 IN Siena.asm
                    > USED AT LINE 1341 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
LAMBDAEND:          099B DEFINED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
BLOCK:              09B0 DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 369 IN Siena.asm
BLOCK1:             09B4 DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1409 IN Siena.asm
BLOCK2:             09D6 DEFINED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
BLOCKEND:           09E3 DEFINED AT LINE 1413 IN Siena.asm
                    > USED AT LINE 371 IN Siena.asm
ARG:                09F8 DEFINED AT LINE 1428 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
EXIT:               0A14 DEFINED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
IN:                 0A29 DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
IN1:                0A2B DEFINED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
IN2:                0A35 DEFINED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
IN3:                0A3B DEFINED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
NEWADD2:            0A3F DEFINED AT LINE 1487 IN Siena.asm
                    > USED AT LINE 356 IN Siena.asm
IF:                 0A6B DEFINED AT LINE 1515 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
IFE:                0A70 DEFINED AT LINE 1518 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
IFE1:               0A71 DEFINED AT LINE 1520 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
IFE2:               0A7A DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
SWITCH:             0A95 DEFINED AT LINE 1544 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
CASE:               0AAA DEFINED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 765 IN Siena.asm
CASE0:              0AC6 DEFINED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
CASE1:              0ACB DEFINED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
CASE2:              0AD8 DEFINED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
WORDS:              0ADB DEFINED AT LINE 1591 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
BYTES:              0AE1 DEFINED AT LINE 1595 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
BYTES1:             0AE4 DEFINED AT LINE 1597 IN Siena.asm
ARRAY:              0AEA DEFINED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 375 IN Siena.asm
ARRAYEND:           0AFD DEFINED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
ARRAYEND1:          0B1F DEFINED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
ARRAYEND2:          0B2B DEFINED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
ARRAYEND4:          0B3B DEFINED AT LINE 1665 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
HASHSTR:            0B53 DEFINED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
                    > USED AT LINE 1848 IN Siena.asm
                    > USED AT LINE 1871 IN Siena.asm
HASHSTR1:           0B56 DEFINED AT LINE 1692 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
HASHSTR2:           0B5B DEFINED AT LINE 1697 IN Siena.asm
DEFINEENTRY:        0B6C DEFINED AT LINE 1716 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
                    > USED AT LINE 1851 IN Siena.asm
DEFINEENTRY0:       0B71 DEFINED AT LINE 1720 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
DEFINEENTRY1:       0B80 DEFINED AT LINE 1732 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
DEFINEENTRY2:       0B86 DEFINED AT LINE 1738 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1762 IN Siena.asm
DEFINEENTRY3:       0B88 DEFINED AT LINE 1741 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
LOOKUPENTRY:        0B92 DEFINED AT LINE 1755 IN Siena.asm
                    > USED AT LINE 1826 IN Siena.asm
                    > USED AT LINE 1873 IN Siena.asm
LOOKUPENTRY0:       0B97 DEFINED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
LOOKUPENTRY1:       0BA6 DEFINED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
LOOKUPENTRY2:       0BAC DEFINED AT LINE 1777 IN Siena.asm
LOOKUPENTRY3:       0BAE DEFINED AT LINE 1780 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
HASH:               0BB6 DEFINED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 811 IN Siena.asm
DEF:                0BC2 DEFINED AT LINE 1800 IN Siena.asm
                    > USED AT LINE 773 IN Siena.asm
DEF1:               0BD8 DEFINED AT LINE 1814 IN Siena.asm
                    > USED AT LINE 1812 IN Siena.asm
LOOKUP:             0BDD DEFINED AT LINE 1820 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
LOOKUP1:            0BEE DEFINED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 1827 IN Siena.asm
DEFINE:             0BF3 DEFINED AT LINE 1834 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
IDENT:              0C0B DEFINED AT LINE 1853 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
IDENT0:             0C10 DEFINED AT LINE 1856 IN Siena.asm
                    > USED AT LINE 1864 IN Siena.asm
IDENT1:             0C11 DEFINED AT LINE 1858 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
IDENT2:             0C1A DEFINED AT LINE 1865 IN Siena.asm
                    > USED AT LINE 1861 IN Siena.asm
IDENT3:             0C2F DEFINED AT LINE 1877 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 239 IN Siena.asm
                    > USED AT LINE 281 IN Siena.asm
                    > USED AT LINE 290 IN Siena.asm
                    > USED AT LINE 307 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1037 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 216 IN Siena.asm
                    > USED AT LINE 219 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1854 IN Siena.asm
                    > USED AT LINE 1870 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1039 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1631 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 233 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
                    > USED AT LINE 306 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1275 IN Siena.asm
                    > USED AT LINE 1290 IN Siena.asm
                    > USED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 1043 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
HASHSLOTS:          1D00 DEFINED AT LINE 70 IN ram.asm
                    > USED AT LINE 1052 IN Siena.asm
HASHWORDS:          1E00 DEFINED AT LINE 73 IN ram.asm
HEAP:               1F00 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 48 IN Siena.asm
BASE:               0025 DEFINED AT LINE 15
TESTSSTART:         4000 DEFINED AT LINE 18
                    > USED AT LINE 10
EXPECTM_0_2350S43:  406F DEFINED AT LINE 34
                    > USED AT LINE 10
