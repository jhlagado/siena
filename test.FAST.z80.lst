0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,DSTACK
0000                 call init
0000                 call enter
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                             ; 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 46 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 48 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4A 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 36 1B               LD   (RST08),HL   
0094   22 38 1B               LD   (RST10),HL   
0097   22 3A 1B               LD   (RST18),HL   
009A   22 3C 1B               LD   (RST20),HL   
009D   22 3E 1B               LD   (RST28),HL   
00A0   22 40 1B               LD   (RST30),HL   
00A3   22 44 1B               LD   (INTVEC),HL   
00A6   22 46 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 48 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4A 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 1A               LD   SP,DSTACK   
00C6   CD 92 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                             ; 
00CC                DSIZE:    EQU   $80   
00CC                RSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   ; 
00CC                DATASIZE:   EQU   26*2*2   ; a..z, a..z words
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for user mintVars		
0180                             ; ***********************************************************************		
0180                IALTVARS:      ; value copied into tables
0180   00 1A                  DW   dStack   ; a vS0 start of datastack			
0182   00 00                  DW   0   ; b
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   28 1C                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                IOPCODES:      
0200   B0                     DB   lsb(exit_)   ; NUL
0201   C8                     DB   lsb(nop_)   ; SOH
0202   C8                     DB   lsb(nop_)   ; STX
0203   AD                     DB   lsb(etx_)   ; ETX
0204   C8                     DB   lsb(nop_)   ; 
0205   C8                     DB   lsb(nop_)   ; 
0206   C8                     DB   lsb(nop_)   ; 
0207   C8                     DB   lsb(nop_)   ; 
0208   C8                     DB   lsb(nop_)   ; 
0209   C8                     DB   lsb(nop_)   ; 
020A   C8                     DB   lsb(nop_)   ; 
020B   C8                     DB   lsb(nop_)   ; 
020C   C8                     DB   lsb(nop_)   ; 
020D   C8                     DB   lsb(nop_)   ; 
020E   C8                     DB   lsb(nop_)   ; 
020F   C8                     DB   lsb(nop_)   ; 
0210   C8                     DB   lsb(nop_)   ; 
0211   C8                     DB   lsb(nop_)   ; 
0212   C8                     DB   lsb(nop_)   ; 
0213   C8                     DB   lsb(nop_)   ; 
0214   C8                     DB   lsb(nop_)   ; 
0215   C8                     DB   lsb(nop_)   ; 
0216   C8                     DB   lsb(nop_)   ; 
0217   C8                     DB   lsb(nop_)   ; 
0218   C8                     DB   lsb(nop_)   ; 
0219   C8                     DB   lsb(nop_)   ; 
021A   C8                     DB   lsb(nop_)   ; 
021B   C8                     DB   lsb(nop_)   ; 
021C   C8                     DB   lsb(nop_)   ; 
021D   C8                     DB   lsb(nop_)   ; 
021E   C8                     DB   lsb(nop_)   ; 
021F   C8                     DB   lsb(nop_)   ; 
0220   C8                     DB   lsb(nop_)   ; 
0221   C8                     DB   lsb(nop_)   ;    !
0222   C8                     DB   lsb(nop_)   ;    "
0223   03                     DB   lsb(hexnum_)   ;    #
0224   06                     DB   lsb(arg_)   ;    $
0225   C8                     DB   lsb(nop_)   ;    %
0226   C8                     DB   lsb(nop_)   ;    &
0227   09                     DB   lsb(strDef_)   ;    '
0228   24                     DB   lsb(block_)   ;    (
0229   27                     DB   lsb(blockend_)   ;    )
022A   C8                     DB   lsb(nop_)   ;    *
022B   0C                     DB   lsb(newAdd2_)   ;    +
022C   C8                     DB   lsb(nop_)   ;    ,
022D   00                     DB   lsb(num_)   ;    -
022E   18                     DB   lsb(dot_)   ;    .
022F   C8                     DB   lsb(nop_)   ;    /	
0230   00                     DB   lsb(num_)   ;    0
0231   00                     DB   lsb(num_)   ;    1
0232   00                     DB   lsb(num_)   ;    2
0233   00                     DB   lsb(num_)   ;    3
0234   00                     DB   lsb(num_)   ;    4
0235   00                     DB   lsb(num_)   ;    5
0236   00                     DB   lsb(num_)   ;    6
0237   00                     DB   lsb(num_)   ;    7
0238   00                     DB   lsb(num_)   ;    8
0239   00                     DB   lsb(num_)   ;    9
023A   C8                     DB   lsb(nop_)   ;    :
023B   C8                     DB   lsb(nop_)   ;    ;
023C   C8                     DB   lsb(nop_)   ;    <
023D   C8                     DB   lsb(nop_)   ;    =
023E   C8                     DB   lsb(nop_)   ;    >
023F   C8                     DB   lsb(nop_)   ;    ?
0240   B3                     DB   lsb(fetch_)   ;    @
0241   8D                     DB   lsb(call_)   ;    A
0242   8D                     DB   lsb(call_)   ;    B
0243   8D                     DB   lsb(call_)   ;    C
0244   8D                     DB   lsb(call_)   ;    D
0245   8D                     DB   lsb(call_)   ;    E
0246   8D                     DB   lsb(call_)   ;    F
0247   8D                     DB   lsb(call_)   ;    G
0248   8D                     DB   lsb(call_)   ;    h
0249   8D                     DB   lsb(call_)   ;    I
024A   8D                     DB   lsb(call_)   ;    J
024B   8D                     DB   lsb(call_)   ;    K
024C   8D                     DB   lsb(call_)   ;    L
024D   8D                     DB   lsb(call_)   ;    M
024E   8D                     DB   lsb(call_)   ;    N
024F   8D                     DB   lsb(call_)   ;    O
0250   8D                     DB   lsb(call_)   ;    p
0251   8D                     DB   lsb(call_)   ;    Q
0252   8D                     DB   lsb(call_)   ;    R
0253   8D                     DB   lsb(call_)   ;    S
0254   8D                     DB   lsb(call_)   ;    T
0255   8D                     DB   lsb(call_)   ;    U
0256   8D                     DB   lsb(call_)   ;    V
0257   8D                     DB   lsb(call_)   ;    W
0258   8D                     DB   lsb(call_)   ;    X
0259   8D                     DB   lsb(call_)   ;    Y
025A   8D                     DB   lsb(call_)   ;    Z
025B   C8                     DB   lsb(nop_)   ;    [
025C   C8                     DB   lsb(nop_)   ;    \
025D   C8                     DB   lsb(nop_)   ;    ]
025E   C8                     DB   lsb(nop_)   ;    ^
025F   C8                     DB   lsb(nop_)   ;    _
0260   2A                     DB   lsb(char_)   ;    `    	
0261   2D                     DB   lsb(a_)   ;    a
0262   39                     DB   lsb(var_)   ;    b
0263   30                     DB   lsb(c_)   ;    c
0264   33                     DB   lsb(d_)   ;    d
0265   36                     DB   lsb(e_)   ;    e
0266   39                     DB   lsb(f_)   ;    f
0267   3C                     DB   lsb(g_)   ;    g
0268   39                     DB   lsb(var_)   ;    h
0269   3F                     DB   lsb(i_)   ;    i
026A   39                     DB   lsb(var_)   ;    j
026B   42                     DB   lsb(k_)   ;    k
026C   45                     DB   lsb(l_)   ;    l
026D   48                     DB   lsb(m_)   ;    m
026E   48                     DB   lsb(m_)   ;    n
026F   4E                     DB   lsb(o_)   ;    o
0270   51                     DB   lsb(p_)   ;    p
0271   39                     DB   lsb(var_)   ;    q
0272   54                     DB   lsb(r_)   ;    r
0273   57                     DB   lsb(s_)   ;    s
0274   39                     DB   lsb(var_)   ;    t
0275   5A                     DB   lsb(u_)   ;    u
0276   39                     DB   lsb(var_)   ;    v
0277   5D                     DB   lsb(w_)   ;    w
0278   60                     DB   lsb(x_)   ;    x
0279   39                     DB   lsb(var_)   ;    y
027A   39                     DB   lsb(var_)   ;    z
027B   0F                     DB   lsb(lambda_)   ;    {
027C   6F                     DB   lsb(or_)   ;    |
027D   15                     DB   lsb(lambdaEnd_)   ;    }
027E   C8                     DB   lsb(nop_)   ;    ~
027F   C8                     DB   lsb(nop_)   ;    DEL	
0280   00                     DB   lsb(EMPTY)   ; NUL ^@
0281   00                     DB   lsb(EMPTY)   ; SOH ^a  1
0282   00                     DB   lsb(EMPTY)   ; STX ^b  2
0283   00                     DB   lsb(EMPTY)   ; ETX ^c  3
0284   00                     DB   lsb(EMPTY)   ; EOT ^d  4
0285   00                     DB   lsb(EMPTY)   ; ENQ ^e  5
0286   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0287   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0288   00                     DB   lsb(EMPTY)   ; BS  ^h  8
0289   00                     DB   lsb(EMPTY)   ; TAB ^I  9
028A   00                     DB   lsb(EMPTY)   ; LF  ^J 10
028B   00                     DB   lsb(EMPTY)   ; VT  ^K 11
028C   00                     DB   lsb(EMPTY)   ; FF  ^l 12
028D   00                     DB   lsb(EMPTY)   ; CR  ^m 13
028E   00                     DB   lsb(EMPTY)   ; SO  ^N 14
028F   00                     DB   lsb(EMPTY)   ; SI  ^O 15
0290   00                     DB   lsb(EMPTY)   ; DLE ^p 16
0291   00                     DB   lsb(EMPTY)   ; ^Q
0292   00                     DB   lsb(EMPTY)   ; ^R
0293   00                     DB   lsb(EMPTY)   ; ^S
0294   00                     DB   lsb(EMPTY)   ; ^T
0295   00                     DB   lsb(EMPTY)   ; ^U
0296   00                     DB   lsb(EMPTY)   ; ^V
0297   00                     DB   lsb(EMPTY)   ; ^W
0298   00                     DB   lsb(EMPTY)   ; ^X
0299   00                     DB   lsb(EMPTY)   ; ^Y
029A   00                     DB   lsb(EMPTY)   ; ^Z
029B   00                     DB   lsb(EMPTY)   ; ^[
029C   00                     DB   lsb(EMPTY)   ; ^\
029D   00                     DB   lsb(EMPTY)   ; ^]
029E   00                     DB   lsb(EMPTY)   ; ^^
029F   00                     DB   lsb(EMPTY)   ; ^_
02A0   00                     DB   lsb(aNop_)   
02A1   00                     DB   lsb(aNop_)   
02A2   00                     DB   lsb(aNop_)   
02A3   00                     DB   lsb(aNop_)   
02A4   00                     DB   lsb(aNop_)   
02A5   00                     DB   lsb(aNop_)   
02A6   00                     DB   lsb(aNop_)   
02A7   00                     DB   lsb(aNop_)   
02A8   00                     DB   lsb(aNop_)   
02A9   00                     DB   lsb(aNop_)   
02AA   00                     DB   lsb(aNop_)   
02AB   00                     DB   lsb(aNop_)   
02AC   00                     DB   lsb(aNop_)   
02AD   00                     DB   lsb(aNop_)   
02AE   00                     DB   lsb(aNop_)   
02AF   00                     DB   lsb(aNop_)   
02B0   00                     DB   lsb(aNop_)   
02B1   00                     DB   lsb(aNop_)   
02B2   00                     DB   lsb(aNop_)   
02B3   00                     DB   lsb(aNop_)   
02B4   00                     DB   lsb(aNop_)   
02B5   00                     DB   lsb(aNop_)   
02B6   00                     DB   lsb(aNop_)   
02B7   00                     DB   lsb(aNop_)   
02B8   00                     DB   lsb(aNop_)   
02B9   00                     DB   lsb(aNop_)   
02BA   00                     DB   lsb(aNop_)   
02BB   00                     DB   lsb(aNop_)   
02BC   00                     DB   lsb(aNop_)   
02BD   00                     DB   lsb(aNop_)   
02BE   00                     DB   lsb(aNop_)   
02BF   00                     DB   lsb(aNop_)   
02C0   00                     DB   lsb(aNop_)   
02C1   00                     DB   lsb(aNop_)   
02C2   00                     DB   lsb(aNop_)   
02C3   00                     DB   lsb(aNop_)   
02C4   00                     DB   lsb(aNop_)   
02C5   00                     DB   lsb(aNop_)   
02C6   00                     DB   lsb(aNop_)   
02C7   00                     DB   lsb(aNop_)   
02C8   00                     DB   lsb(aNop_)   
02C9   00                     DB   lsb(aNop_)   
02CA   00                     DB   lsb(aNop_)   
02CB   00                     DB   lsb(aNop_)   
02CC   00                     DB   lsb(aNop_)   
02CD   00                     DB   lsb(aNop_)   
02CE   00                     DB   lsb(aNop_)   
02CF   00                     DB   lsb(aNop_)   
02D0   00                     DB   lsb(aNop_)   
02D1   00                     DB   lsb(aNop_)   
02D2   00                     DB   lsb(aNop_)   
02D3   00                     DB   lsb(aNop_)   
02D4   00                     DB   lsb(aNop_)   
02D5   00                     DB   lsb(aNop_)   
02D6   00                     DB   lsb(aNop_)   
02D7   00                     DB   lsb(aNop_)   
02D8   00                     DB   lsb(aNop_)   
02D9   00                     DB   lsb(aNop_)   
02DA   00                     DB   lsb(aNop_)   
02DB   00                     DB   lsb(aNop_)   
02DC   00                     DB   lsb(aNop_)   
02DD   00                     DB   lsb(aNop_)   
02DE   00                     DB   lsb(aNop_)   
02DF   00                     DB   lsb(aNop_)   
02E0   00                     DB   lsb(aNop_)   
02E1   00                     DB   lsb(aNop_)   
02E2   00                     DB   lsb(aNop_)   
02E3   00                     DB   lsb(aNop_)   
02E4   00                     DB   lsb(aNop_)   
02E5   00                     DB   lsb(aNop_)   
02E6   00                     DB   lsb(aNop_)   
02E7   00                     DB   lsb(aNop_)   
02E8   00                     DB   lsb(aNop_)   
02E9   00                     DB   lsb(aNop_)   
02EA   00                     DB   lsb(aNop_)   
02EB   00                     DB   lsb(aNop_)   
02EC   00                     DB   lsb(aNop_)   
02ED   00                     DB   lsb(aNop_)   
02EE   00                     DB   lsb(aNop_)   
02EF   00                     DB   lsb(aNop_)   
02F0   00                     DB   lsb(aNop_)   
02F1   00                     DB   lsb(aNop_)   
02F2   00                     DB   lsb(aNop_)   
02F3   00                     DB   lsb(aNop_)   
02F4   00                     DB   lsb(aNop_)   
02F5   00                     DB   lsb(aNop_)   
02F6   00                     DB   lsb(aNop_)   
02F7   00                     DB   lsb(aNop_)   
02F8   00                     DB   lsb(aNop_)   
02F9   00                     DB   lsb(aNop_)   
02FA   00                     DB   lsb(aNop_)   
02FB   00                     DB   lsb(aNop_)   
02FC   00                     DB   lsb(aNop_)   
02FD   00                     DB   lsb(aNop_)   
02FE   00                     DB   lsb(aNop_)   
02FF   00                     DB   lsb(aNop_)   
0300                NESTINGSTR:      
0300   22 27 28 29 5B 5D 7B 7D 60 00 .CSTR   $22,"'()[]{}`"   
030A                ETX:         
030A   21 00 E6               LD   hl,-DSTACK   
030D   39                     ADD   hl,sp   
030E   30 03                  JR   nc,etx1   
0310   31 00 1A               LD   sp,DSTACK   
0313                ETX1:        
0313   18 16                  JR   interpret   
0315                START:       
0315   31 00 1A               LD   sp,DSTACK   ; start of Siena
0318   CD 92 08               CALL   init   ; setups
031B   CD B3 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
031E   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
032B                INTERPRET:      
032B   CD AE 07               CALL   prompt   
032E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0331   ED 43 84 1B            LD   (vTIBPtr),bc   
0335                INTERPRET2:      ; calc nesting (a macro might have changed it)
0335   1E 00                  LD   e,0   ; initilize nesting value
0337   C5                     PUSH   bc   ; save offset into TIB,
0338                             ; bc is also the count of chars in TIB
0338   21 00 18               LD   hl,TIB   ; hl is start of TIB
033B   18 06                  JR   interpret4   
033D                INTERPRET3:      
033D   7E                     LD   a,(hl)   ; a = char in TIB
033E   23                     INC   hl   ; inc pointer into TIB
033F   0B                     DEC   bc   ; dec count of chars in TIB
0340   CD D8 08               CALL   nesting   ; update nesting value
0343                INTERPRET4:      
0343   79                     LD   a,c   ; is count zero?
0344   B0                     OR   b   
0345   20 F6                  JR   nz,interpret3   ; if not loop
0347   C1                     POP   bc   ; restore offset into TIB
0348                WAITCHAR:      
0348   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
034B   FE 20                  CP   $20   ; compare to space
034D   30 25                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
034F   FE 00                  CP   $0   ; is it end of string? null end of string
0351   28 45                  JR   z,waitchar4   
0353   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0355   28 2B                  JR   z,waitchar3   ; if anything else its macro/control
0357                MACRO:       
0357   ED 43 84 1B            LD   (vTIBPtr),bc   
035B   21 80 1A               LD   hl,ctrlCodes   
035E   85                     ADD   a,l   ; look up key of macros
035F   6F                     LD   l,a   
0360   5E                     LD   e,(hl)   
0361   7B                     LD   a,e   
0362   B7                     OR   a   
0363   28 09                  JR   z,macro1   
0365   16 01                  LD   d,msb(macros)   
0367   D5                     PUSH   de   
0368   CD 52 09               CALL   enter   ; Siena go operation and jump to it
036B   67 6F 00               .CSTR   "go"   
036E                MACRO1:      
036E   ED 4B 84 1B            LD   bc,(vTIBPtr)   
0372   18 C1                  JR   interpret2   
0374                WAITCHAR1:      
0374   21 00 18               LD   hl,TIB   
0377   09                     ADD   hl,bc   
0378   77                     LD   (hl),a   ; store the character in textbuf
0379   03                     INC   bc   
037A   CD 85 00               CALL   putchar   ; echo character to screen
037D   CD D8 08               CALL   nesting   
0380   18 C6                  JR   waitchar   ; wait for next character
0382                WAITCHAR3:      
0382   21 00 18               LD   hl,TIB   
0385   09                     ADD   hl,bc   
0386   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0388   23                     INC   hl   
0389   36 0A                  LD   (hl),"\n"   
038B   23                     INC   hl   
038C   03                     INC   bc   
038D   03                     INC   bc   
038E   CD D6 07               CALL   crlf   ; echo character to screen
0391   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0392   B7                     OR   a   
0393   20 B3                  JR   nz,waitchar   
0395   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0397   03                     INC   bc   
0398                WAITCHAR4:      
0398   ED 43 84 1B            LD   (vTIBPtr),bc   
039C   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE, we pressed enter
039F   0B                     DEC   bc   
03A0                             ; ********************************************************************************
03A0                             ; 
03A0                             ; Dispatch Routine.
03A0                             ; 
03A0                             ; Get the next character and form a 1 byte jump address
03A0                             ; 
03A0                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
03A0                             ; jump to the selected function.
03A0                             ; 
03A0                             ; Individual handler routines will deal with each category:
03A0                             ; 
03A0                             ; 1. Detect characters a-z and jump to the User Command handler routine
03A0                             ; 
03A0                             ; 2. Detect characters a-z and jump to the variable handler routine
03A0                             ; 
03A0                             ; 3. All other characters are punctuation and cause a jump to the associated
03A0                             ; primitive code.
03A0                             ; 
03A0                             ; Instruction Pointer IP bc is incremented
03A0                             ; 
03A0                             ; *********************************************************************************
03A0                NEXT:        
03A0   03                     INC   bc   ;  Increment the IP
03A1   0A                     LD   a,(bc)   ;  Get the next character and dispatch
03A2   6F                     LD   l,a   ;  Index into table
03A3   26 02                  LD   h,msb(iOpcodes)   ;  Start address of jump table
03A5   6E                     LD   l,(hl)   ;  get low jump address
03A6   26 04                  LD   h,msb(page4)   ;  Load h with the 1st page address
03A8   E9                     JP   (hl)   ;  Jump to routine
03A9                             ; **********************************************************************			
03A9                             ; Page 4 primitive routines
03A9                             ; **********************************************************************
03A9                          ALIGN   $100   
0400                PAGE4:       
0400                NUM_:        
0400   C3 DD 07               JP   num   
0403                HEXNUM_:      
0403   C3 0E 08               JP   hexnum   
0406                ARG_:        
0406   C3 B8 09               JP   arg   
0409                STRDEF_:      
0409   C3 04 09               JP   strDef   
040C                NEWADD2_:      
040C   C3 34 09               JP   newAdd2   
040F                LAMBDA_:      
040F   C3 68 09               JP   lambda   
0412                GO_:         
0412   C3 52 09               JP   go   
0415                LAMBDAEND_:      
0415   C3 A3 09               JP   lambdaEnd   
0418                DOT_:        
0418   E1                     POP   hl   
0419   CD 2B 08               CALL   prtdec   
041C                DOT2:        
041C   3E 20                  LD   a," "   
041E   CD 85 00               CALL   putchar   
0421   C3 A0 03               JP   next   
0424                BLOCK_:      
0424   C3 FF 09               JP   block   
0427                BLOCKEND_:      
0427   C3 32 0A               JP   blockend   
042A                CHAR_:       
042A   C3 1E 09               JP   char   
042D                A_:          
042D   C3 63 06               JP   a   
0430                C_:          
0430   C3 73 06               JP   c   
0433                D_:          
0433   C3 92 06               JP   d   
0436                E_:          
0436   C3 AC 06               JP   e   
0439                F_:          
0439   C3 B7 06               JP   f   
043C                G_:          
043C   C3 C2 06               JP   g   
043F                I_:          
043F   C3 D7 06               JP   i   
0442                K_:          
0442   C3 EF 06               JP   k   
0445                L_:          
0445   C3 FD 06               JP   l   
0448                M_:          
0448   C3 0D 07               JP   m   
044B                N_:          
044B   C3 1D 07               JP   n   
044E                O_:          
044E   C3 28 07               JP   o   
0451                P_:          
0451   C3 38 07               JP   p   
0454                R_:          
0454   C3 43 07               JP   r   
0457                S_:          
0457   C3 4E 07               JP   s   
045A                U_:          
045A   C3 6D 07               JP   u   
045D                W_:          
045D   C3 78 07               JP   w   
0460                X_:          
0460   C3 83 07               JP   x   
0463                AND_:        
0463   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0464   E1                     POP   hl   
0465   7B                     LD   a,e   
0466   A5                     AND   l   
0467   6F                     LD   l,a   
0468   7A                     LD   a,d   
0469   A4                     AND   h   
046A                AND1:        
046A   67                     LD   h,a   
046B   E5                     PUSH   hl   
046C   C3 A0 03               JP   next   
046F                OR_:         
046F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0470   E1                     POP   hl   
0471   7B                     LD   a,e   
0472   B5                     OR   l   
0473   6F                     LD   l,a   
0474   7A                     LD   a,d   
0475   B4                     OR   h   
0476   18 F2                  JR   and1   
0478                XOR_:        
0478   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0479                XOR1:        
0479   E1                     POP   hl   
047A   7B                     LD   a,e   
047B   AD                     XOR   l   
047C   6F                     LD   l,a   
047D   7A                     LD   a,d   
047E   AC                     XOR   h   
047F   18 E9                  JR   and1   
0481                INV_:        ; Bitwise INVert the top member of the stack
0481   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0484   18 F3                  JR   xor1   
0486                ADD_:        ; add the top 2 members of the stack
0486   D1                     POP   de   
0487   E1                     POP   hl   
0488   19                     ADD   hl,de   
0489   E5                     PUSH   hl   
048A   C3 A0 03               JP   next   
048D                CALL_:       
048D   0A                     LD   a,(bc)   
048E   CD C0 08               CALL   lookupRef1   
0491   5E                     LD   e,(hl)   
0492   23                     INC   hl   
0493   56                     LD   d,(hl)   
0494   C3 53 09               JP   go1   
0497                HDOT_:       ; print hexadecimal
0497   E1                     POP   hl   
0498   CD 73 08               CALL   prthex   
049B   C3 1C 04               JP   dot2   
049E                DROP_:       ; Discard the top member of the stack
049E   E1                     POP   hl   
049F   C3 A0 03               JP   next   
04A2                UNDROP_:      
04A2   3B                     DEC   sp   
04A3   3B                     DEC   sp   
04A4   C3 A0 03               JP   next   
04A7                DUP_:        
04A7   E1                     POP   hl   ; Duplicate the top member of the stack
04A8   E5                     PUSH   hl   
04A9   E5                     PUSH   hl   
04AA   C3 A0 03               JP   next   
04AD                ETX_:        
04AD   C3 0A 03               JP   ETX   
04B0                EXIT_:       
04B0   C3 D4 09               JP   exit   
04B3                FETCH_:      ; Fetch the value from the address placed on the top of the stack
04B3   E1                     POP   hl   
04B4                FETCH1:      
04B4   5E                     LD   e,(hl)   
04B5   23                     INC   hl   
04B6   56                     LD   d,(hl)   
04B7   D5                     PUSH   de   
04B8   C3 A0 03               JP   next   
04BB                KEY_:        
04BB   CD 81 00               CALL   getchar   
04BE   26 00                  LD   h,0   
04C0   6F                     LD   l,a   
04C1   E5                     PUSH   hl   
04C2   C3 A0 03               JP   next   
04C5   C3 91 07     MUL_:     JP   mul   
04C8                NOP_:        
04C8   C3 A0 03               JP   next   ; hardwire white space to always go to next (important for arrays)
04CB                OVER_:       
04CB   E1                     POP   hl   ; Duplicate 2nd element of the stack
04CC   D1                     POP   de   
04CD   D5                     PUSH   de   
04CE   E5                     PUSH   hl   
04CF   D5                     PUSH   de   ; and push it to top of stack
04D0   C3 A0 03               JP   next   
04D3                ROT_:        ; a b c -- b c a
04D3   D1                     POP   de   ; a b    de = c
04D4   E1                     POP   hl   ; a       hl = b
04D5   E3                     EX   (sp),hl   ; b       hl = a
04D6   D5                     PUSH   de   ; b c
04D7   E5                     PUSH   hl   ; b c a
04D8   C3 A0 03               JP   next   
04DB                             ;  Left shift { is multiply by 2		
04DB                SHL_:        
04DB   E1                     POP   hl   ; Duplicate the top member of the stack
04DC   29                     ADD   hl,hl   
04DD   E5                     PUSH   hl   ; shift left fallthrough into add_
04DE   C3 A0 03               JP   next   
04E1                             ;  Right shift } is a divide by 2		
04E1                SHR_:        
04E1   E1                     POP   hl   ; Get the top member of the stack
04E2                SHR1:        
04E2   CB 3C                  SRL   h   
04E4   CB 1D                  RR   l   
04E6   E5                     PUSH   hl   
04E7   C3 A0 03               JP   next   
04EA                STORE_:      ; Store the value at the address placed on the top of the stack
04EA   E1                     POP   hl   
04EB   D1                     POP   de   
04EC   73                     LD   (hl),e   
04ED   23                     INC   hl   
04EE   72                     LD   (hl),d   
04EF   C3 A0 03               JP   next   
04F2                SWAP_:       ; a b -- b a Swap the top 2 elements of the stack
04F2   E1                     POP   hl   
04F3   E3                     EX   (sp),hl   
04F4   E5                     PUSH   hl   
04F5   C3 A0 03               JP   next   
04F8                NEG_:        
04F8   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
04FB   D1                     POP   de   
04FC   18 02                  JR   sub2   ; use the SUBtract routine
04FE                SUB_:        ; Subtract the value 2nd on stack from top of stack
04FE   D1                     POP   de   
04FF   E1                     POP   hl   ; Entry point for INVert
0500                SUB2:        
0500   B7                     OR   a   ; Entry point for NEGate
0501   ED 52                  SBC   hl,de   
0503   E5                     PUSH   hl   
0504   C3 A0 03               JP   next   
0507                EQ_:         
0507   E1                     POP   hl   
0508   D1                     POP   de   
0509   B7                     OR   a   ; reset the carry flag
050A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
050C   28 15                  JR   z,true_   
050E                FALSE_:      
050E   21 00 00               LD   hl,0   
0511   E5                     PUSH   hl   
0512   C3 A0 03               JP   next   
0515                GT_:         
0515   D1                     POP   de   
0516   E1                     POP   hl   
0517   18 02                  JR   lt1   
0519                LT_:         
0519   E1                     POP   hl   
051A   D1                     POP   de   
051B                LT1:         
051B   B7                     OR   a   ; reset the carry flag
051C   ED 52                  SBC   hl,de   
051E   28 EE                  JR   z,false_   
0520   FA 0E 05               JP   m,false_   
0523                TRUE_:       
0523   21 01 00               LD   hl,1   
0526   E5                     PUSH   hl   
0527   C3 A0 03               JP   next   
052A                GTE_:        
052A   D1                     POP   de   
052B   E1                     POP   hl   
052C   18 02                  JR   lte1   
052E                LTE_:        
052E   E1                     POP   hl   
052F   D1                     POP   de   
0530                LTE1:        
0530   B7                     OR   a   ; reset the carry flag
0531   ED 52                  SBC   hl,de   
0533   FA 0E 05               JP   m,false_   
0536   C3 FF FF               JP   true   
0539                VAR_:        
0539   0A                     LD   a,(bc)   
053A   CD C6 08               CALL   lookupRef2   
053D   E5                     PUSH   hl   
053E   C3 A0 03               JP   next   
0541                DIV_:        
0541   18 04                  JR   div   
0543                             ;*******************************************************************
0543                             ; Page 5 primitive routines
0543                             ;*******************************************************************
0543                             ;falls through
0543   E5                     PUSH   hl   
0544   C3 A0 03               JP   next   
0547                             ; ********************************************************************
0547                             ; 16-bit division subroutine.
0547                             ; 
0547                             ; bc: divisor, de: dividend, hl: remainder
0547                             ; *********************************************************************
0547                             ; This divides de by bc, storing the result in de, remainder in hl
0547                             ; *********************************************************************
0547                             ; 1382 cycles
0547                             ; 35 bytes (reduced from 48)
0547                             ; 
0547                DIV:         ;=34
0547   D1                     POP   de   ; get first value
0548   E1                     POP   hl   ; get 2nd value
0549   C5                     PUSH   bc   ; Preserve the IP
054A   44                     LD   b,h   ; bc = 2nd value
054B   4D                     LD   c,l   
054C                             ; 
054C   21 00 00               LD   hl,0   ; Zero the remainder
054F   3E 10                  LD   a,16   ; Loop counter
0551                DIV1:        ;shift the bits from bc (numerator) into hl (accumulator)
0551   CB 21                  SLA   c   
0553   CB 10                  RL   b   
0555   ED 6A                  ADC   hl,hl   
0557   ED 52                  SBC   hl,de   ;Check if remainder >= denominator (hl>=de)
0559   38 03                  JR   c,div2   
055B   0C                     INC   c   
055C   18 01                  JR   div3   
055E                DIV2:        ; remainder is not >= denominator, so we have to add de back to hl
055E   19                     ADD   hl,de   
055F                DIV3:        
055F   3D                     DEC   a   
0560   20 EF                  JR   nz,div1   
0562   50                     LD   d,b   ; Result from bc to de
0563   59                     LD   e,c   
0564                DIV4:        
0564   C1                     POP   bc   ; Restore the IP
0565   D5                     PUSH   de   ; push Result
0566   E5                     PUSH   hl   ; push remainder
0567   C3 A0 03               JP   next   
056A                             ;=57
056A                             ; **************************************************************************
056A                             ; Page 6 Alt primitives
056A                             ; **************************************************************************
056A                          ALIGN   $100   
0600                PAGE6:       
0600                ANOP_:       
0600   C3 A0 03               JP   next   
0603                CFETCH_:      
0603   E1                     POP   hl   
0604   16 00                  LD   d,0   
0606   5E                     LD   e,(hl)   
0607   D5                     PUSH   de   
0608   C3 A0 03               JP   next   
060B                COMMENT_:      
060B   03                     INC   bc   ; point to next char
060C   0A                     LD   a,(bc)   
060D   FE 0D                  CP   "\r"   ; terminate at cr
060F   20 FA                  JR   nz,comment_   
0611   0B                     DEC   bc   
0612   C3 A0 03               JP   next   
0615                CSTORE_:      
0615   E1                     POP   hl   
0616   D1                     POP   de   
0617   73                     LD   (hl),e   
0618   C3 A0 03               JP   next   
061B                EMIT_:       
061B   E1                     POP   hl   
061C   7D                     LD   a,l   
061D   CD 85 00               CALL   putchar   
0620   C3 A0 03               JP   next   
0623                EXEC_:       
0623   CD 29 06               CALL   exec1   
0626   C3 A0 03               JP   next   
0629                EXEC1:       
0629   E1                     POP   hl   
062A   E3                     EX   (sp),hl   
062B   E9                     JP   (hl)   
062C                PROMPT_:      
062C   CD AE 07               CALL   prompt   
062F   C3 A0 03               JP   next   
0632                INPORT_:      ; \<
0632   E1                     POP   hl   
0633   79                     LD   a,c   
0634   4D                     LD   c,l   
0635   ED 68                  IN   l,(c)   
0637   26 00                  LD   h,0   
0639   4F                     LD   c,a   
063A   E5                     PUSH   hl   
063B   C3 A0 03               JP   next   
063E                NEWLN_:      
063E   CD D6 07               CALL   crlf   
0641   C3 A0 03               JP   next   
0644                OUTPORT_:      
0644   E1                     POP   hl   
0645   59                     LD   e,c   
0646   4D                     LD   c,l   
0647   E1                     POP   hl   
0648   ED 69                  OUT   (c),l   
064A   4B                     LD   c,e   
064B   C3 A0 03               JP   next   
064E                PRTSTR_:      
064E                PRTSTR:      
064E   E1                     POP   hl   
064F   CD BB 07               CALL   putStr   
0652   C3 A0 03               JP   next   
0655                RPUSH_:      
0655   E1                     POP   hl   
0656   CD C0 07               CALL   rpush   
0659   C3 A0 03               JP   next   
065C                RPOP_:       
065C   CD CB 07               CALL   rpop   
065F   E5                     PUSH   hl   
0660   C3 A0 03               JP   next   
0663                             ; **************************************************************************
0663                             ; Page 6 primitive routines continued  (page 7)
0663                             ; **************************************************************************
0663                             ; falls through to following page
0663                A:           
0663   03                     INC   bc   
0664   0A                     LD   a,(bc)   
0665   FE 64                  CP   "d"   
0667   CA 86 04               JP   z,add_   
066A   FE 6E                  CP   "n"   
066C   CA 63 04               JP   z,and_   
066F   0B                     DEC   bc   
0670   C3 39 05               JP   var_   
0673                C:           
0673   03                     INC   bc   
0674   0A                     LD   a,(bc)   
0675   FE 61                  CP   "a"   
0677   C2 89 06               JP   nz,c1   
067A   03                     INC   bc   
067B   0A                     LD   a,(bc)   
067C   FE 6C                  CP   "l"   
067E   CA 52 09               JP   z,xcall   
0681   FE 73                  CP   "s"   
0683   CA 67 0A               JP   z,case   
0686   C3 39 05               JP   var_   
0689                C1:          
0689   FE 6C                  CP   "l"   
068B   CA 8E 07               JP   z,closure_   
068E   0B                     DEC   bc   
068F   C3 39 05               JP   var_   
0692                D:           
0692   03                     INC   bc   
0693   0A                     LD   a,(bc)   
0694   FE 65                  CP   "e"   
0696   CA 8E 07               JP   z,def_   
0699   FE 69                  CP   "i"   
069B   CA 41 05               JP   z,div_   
069E   FE 72                  CP   "r"   
06A0   CA 9E 04               JP   z,drop_   
06A3   FE 75                  CP   "u"   
06A5   CA A7 04               JP   z,dup_   
06A8   0B                     DEC   bc   
06A9   C3 39 05               JP   var_   
06AC                E:           
06AC   03                     INC   bc   
06AD   0A                     LD   a,(bc)   
06AE   FE 71                  CP   "q"   
06B0   CA 07 05               JP   z,eq_   
06B3   0B                     DEC   bc   
06B4   C3 39 05               JP   var_   
06B7                F:           
06B7   03                     INC   bc   
06B8   0A                     LD   a,(bc)   
06B9   FE 69                  CP   "i"   
06BB   CA 8E 07               JP   z,filter_   
06BE   0B                     DEC   bc   
06BF   C3 39 05               JP   var_   
06C2                G:           
06C2   03                     INC   bc   
06C3   0A                     LD   a,(bc)   
06C4   FE 65                  CP   "e"   
06C6   CA 8E 07               JP   z,get_   
06C9   FE 6F                  CP   "o"   
06CB   CA 12 04               JP   z,go_   
06CE   FE 74                  CP   "t"   
06D0   CA 15 05               JP   z,gt_   
06D3   0B                     DEC   bc   
06D4   C3 39 05               JP   var_   
06D7                I:           
06D7   03                     INC   bc   
06D8   0A                     LD   a,(bc)   
06D9   FE 66                  CP   "f"   
06DB   CA 47 0A               JP   z,if   
06DE   FE 6E                  CP   "n"   
06E0   C2 EB 06               JP   nz,i1   
06E3   FE 76                  CP   "v"   
06E5   CA 81 04               JP   z,inv_   
06E8   C3 E9 09               JP   in   
06EB                I1:          
06EB   0B                     DEC   bc   
06EC   C3 39 05               JP   var_   
06EF                K:           
06EF   C3 83 07               JP   x   
06F2   03                     INC   bc   
06F3   0A                     LD   a,(bc)   
06F4   FE 65                  CP   "e"   
06F6   CA BB 04               JP   z,key_   
06F9   0B                     DEC   bc   
06FA   C3 39 05               JP   var_   
06FD                L:           
06FD   03                     INC   bc   
06FE   0A                     LD   a,(bc)   
06FF   FE 65                  CP   "e"   
0701   CA 8E 07               JP   z,let_   
0704   FE 74                  CP   "t"   
0706   CA 19 05               JP   z,lt_   
0709   0B                     DEC   bc   
070A   C3 39 05               JP   var_   
070D                M:           
070D   03                     INC   bc   
070E   0A                     LD   a,(bc)   
070F   FE 61                  CP   "a"   
0711   CA 8E 07               JP   z,map_   
0714   FE 75                  CP   "u"   
0716   CA C5 04               JP   z,mul_   
0719   0B                     DEC   bc   
071A   C3 39 05               JP   var_   
071D                N:           
071D   03                     INC   bc   
071E   0A                     LD   a,(bc)   
071F   FE 65                  CP   "e"   
0721   CA F8 04               JP   z,neg_   
0724   0B                     DEC   bc   
0725   C3 39 05               JP   var_   
0728                O:           
0728   03                     INC   bc   
0729   0A                     LD   a,(bc)   
072A   FE 76                  CP   "v"   
072C   CA CB 04               JP   z,over_   
072F   FE 72                  CP   "r"   
0731   CA 6F 04               JP   z,or_   
0734   0B                     DEC   bc   
0735   C3 39 05               JP   var_   
0738                P:           
0738   03                     INC   bc   
0739   0A                     LD   a,(bc)   
073A   FE 72                  CP   "r"   
073C   CA 8E 07               JP   z,print_   
073F   0B                     DEC   bc   
0740   C3 39 05               JP   var_   
0743                R:           
0743   03                     INC   bc   
0744   0A                     LD   a,(bc)   
0745   FE 6F                  CP   "o"   
0747   CA D3 04               JP   z,rot_   
074A   0B                     DEC   bc   
074B   C3 39 05               JP   var_   
074E                S:           
074E   03                     INC   bc   
074F   0A                     LD   a,(bc)   
0750   FE 63                  CP   "c"   
0752   CA 8E 07               JP   z,scan_   
0755   FE 65                  CP   "e"   
0757   CA 8E 07               JP   z,set_   
075A   FE 68                  CP   "h"   
075C   CA 8E 07               JP   z,shift_   
075F   FE 75                  CP   "u"   
0761   CA FE 04               JP   z,sub_   
0764   FE 77                  CP   "w"   
0766   CA F2 04               JP   z,swap_   
0769   0B                     DEC   bc   
076A   C3 39 05               JP   var_   
076D                U:           
076D   03                     INC   bc   
076E   0A                     LD   a,(bc)   
076F   FE 6E                  CP   "n"   
0771   CA A2 04               JP   z,undrop_   
0774   0B                     DEC   bc   
0775   C3 39 05               JP   var_   
0778                W:           
0778   03                     INC   bc   
0779   0A                     LD   a,(bc)   
077A   FE 68                  CP   "h"   
077C   CA 8E 07               JP   z,while_   
077F   0B                     DEC   bc   
0780   C3 39 05               JP   var_   
0783                X:           
0783   03                     INC   bc   
0784   0A                     LD   a,(bc)   
0785   FE 78                  CP   "x"   
0787   CA 78 04               JP   z,xor_   
078A   0B                     DEC   bc   
078B   C3 39 05               JP   var_   
078E                CLOSURE_:      
078E                DEF_:        
078E                FILTER_:      
078E                GET_:        
078E                IF_:         
078E                LET_:        
078E                MAP_:        
078E                PRINT_:      
078E                SCAN_:       
078E                SET_:        
078E                SHIFT_:      
078E                WHILE_:      
078E   C3 A0 03               JP   next   
0791                             ;*******************************************************************
0791                             ; Page 5 primitive routines continued
0791                             ;*******************************************************************
0791                             ; ********************************************************************
0791                             ; 16-bit multiply
0791                MUL:         ;=19
0791   D1                     POP   de   ; get first value
0792   E1                     POP   hl   
0793   C5                     PUSH   bc   ; Preserve the IP
0794   44                     LD   b,h   ; bc = 2nd value
0795   4D                     LD   c,l   
0796   21 00 00               LD   hl,0   
0799   3E 10                  LD   a,16   
079B                MUL2:        
079B   29                     ADD   hl,hl   
079C   CB 13                  RL   e   
079E   CB 12                  RL   d   
07A0   30 04                  JR   nc,$+6   
07A2   09                     ADD   hl,bc   
07A3   30 01                  JR   nc,$+3   
07A5   13                     INC   de   
07A6   3D                     DEC   a   
07A7   20 F2                  JR   nz,mul2   
07A9   C1                     POP   bc   ; Restore the IP
07AA   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
07AB   C3 A0 03               JP   next   
07AE                             ;*******************************************************************
07AE                             ; Subroutines
07AE                             ;*******************************************************************
07AE                PROMPT:      
07AE   CD B3 08               CALL   printStr   
07B1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07B6   C9                     RET      
07B7                PUTSTR0:      
07B7   CD 85 00               CALL   putchar   
07BA   23                     INC   hl   
07BB                PUTSTR:      
07BB   7E                     LD   a,(hl)   
07BC   B7                     OR   a   
07BD   20 F8                  JR   nz,putStr0   
07BF   C9                     RET      
07C0                RPUSH:       
07C0   DD 2B                  DEC   ix   
07C2   DD 74 00               LD   (ix+0),h   
07C5   DD 2B                  DEC   ix   
07C7   DD 75 00               LD   (ix+0),l   
07CA   C9                     RET      
07CB                RPOP:        
07CB   DD 6E 00               LD   l,(ix+0)   
07CE   DD 23                  INC   ix   
07D0   DD 66 00               LD   h,(ix+0)   
07D3   DD 23                  INC   ix   
07D5                RPOP2:       
07D5   C9                     RET      
07D6                CRLF:        
07D6   CD B3 08               CALL   printStr   
07D9   0D 0A 00               .CSTR   "\r\n"   
07DC   C9                     RET      
07DD                             ;*******************************************************************
07DD                             ;*******************************************************************
07DD                NUM:         
07DD   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07E0   0A                     LD   a,(bc)   ; Get numeral or -
07E1   FE 2D                  CP   "-"   
07E3   20 01                  JR   nz,num0   
07E5   03                     INC   bc   ; move to next char, no flags affected
07E6                NUM0:        
07E6   08                     EX   af,af'   ; save zero flag = 0 for later
07E7                NUM1:        
07E7   0A                     LD   a,(bc)   ; read digit
07E8   D6 30                  SUB   "0"   ; less than 0?
07EA   38 13                  JR   c,num2   ; not a digit, exit loop
07EC   FE 0A                  CP   10   ; greater that 9?
07EE   30 0F                  JR   nc,num2   ; not a digit, exit loop
07F0   03                     INC   bc   ; inc IP
07F1   54 5D                  LD   de,hl   ; multiply hl * 10
07F3   29                     ADD   hl,hl   
07F4   29                     ADD   hl,hl   
07F5   19                     ADD   hl,de   
07F6   29                     ADD   hl,hl   
07F7   85                     ADD   a,l   ; add digit in a to hl
07F8   6F                     LD   l,a   
07F9   3E 00                  LD   a,0   
07FB   8C                     ADC   a,h   
07FC   67                     LD   h,a   
07FD   18 E8                  JR   num1   
07FF                NUM2:        
07FF   0B                     DEC   bc   
0800   08                     EX   af,af'   ; restore zero flag
0801   20 07                  JR   nz,num3   
0803   EB                     EX   de,hl   ; negate the value of hl
0804   21 00 00               LD   hl,0   
0807   B7                     OR   a   ; jump to sub2
0808   ED 52                  SBC   hl,de   
080A                NUM3:        
080A   E5                     PUSH   hl   ; Put the number on the stack
080B   C3 A0 03               JP   next   ; and process the next character
080E                HEXNUM:      ; 
080E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0811                HEXNUM1:      
0811   03                     INC   bc   
0812   0A                     LD   a,(bc)   ; Get the character which is a numeral
0813   CB 77                  BIT   6,a   ; is it uppercase alpha?
0815   28 02                  JR   z,hexnum2   ; no a decimal
0817   D6 07                  SUB   7   ; sub 7  to make $a - $F
0819                HEXNUM2:      
0819   D6 30                  SUB   $30   ; Form decimal digit
081B   DA FF 07               JP   c,num2   
081E   FE 10                  CP   $0F+1   
0820   D2 FF 07               JP   nc,num2   
0823   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0824   29                     ADD   hl,hl   ; 4X
0825   29                     ADD   hl,hl   ; 8X
0826   29                     ADD   hl,hl   ; 16X
0827   85                     ADD   a,l   ; add into bottom of hl
0828   6F                     LD   l,a   ; 
0829   18 E6                  JR   hexnum1   
082B                PRTDEC:      ;=34 ; removes leading zeros
082B                             ; ld a,h
082B                             ; or l
082B                             ; ld a, "0"
082B                             ; jp z, putchar
082B   CB 7C                  BIT   7,h   
082D   28 0B                  JR   z,prtdec0   
082F   3E 2D                  LD   a,"-"   
0831   CD 85 00               CALL   putchar   
0834   AF                     XOR   a   
0835   95                     SUB   l   
0836   6F                     LD   l,a   
0837   9F                     SBC   a,a   
0838   94                     SUB   h   
0839   67                     LD   h,a   
083A                PRTDEC0:      
083A   C5                     PUSH   bc   
083B   0E 00                  LD   c,0   ; leading zeros flag = false
083D   11 F0 D8               LD   de,-10000   
0840   CD 5C 08               CALL   prtdec1   
0843   11 18 FC               LD   de,-1000   
0846   CD 5C 08               CALL   prtdec1   
0849   11 9C FF               LD   de,-100   
084C   CD 5C 08               CALL   prtdec1   
084F   1E F6                  LD   e,-10   
0851   CD 5C 08               CALL   prtdec1   
0854   0C                     INC   c   ; flag = true for at least digit
0855   1E FF                  LD   e,-1   
0857   CD 5C 08               CALL   prtdec1   
085A   C1                     POP   bc   
085B   C9                     RET      
085C                PRTDEC1:      
085C   06 2F                  LD   b,"0"-1   
085E                PRTDEC2:      
085E   04                     INC   b   
085F   19                     ADD   hl,de   
0860   38 FC                  JR   c,prtdec2   
0862   ED 52                  SBC   hl,de   
0864   3E 30                  LD   a,"0"   
0866   B8                     CP   b   
0867   20 05                  JR   nz,prtdec3   
0869   AF                     XOR   a   
086A   B1                     OR   c   
086B   C8                     RET   z   
086C   18 01                  JR   prtdec4   
086E                PRTDEC3:      
086E   0C                     INC   c   
086F                PRTDEC4:      
086F   78                     LD   a,b   
0870   C3 85 00               JP   putchar   
0873                             ; 
0873                PRTHEX:      
0873                             ; Display hl as a 16-bit number in hex.
0873   C5                     PUSH   bc   ; preserve the IP
0874   7C                     LD   a,h   
0875   CD 7E 08               CALL   prthex2   
0878   7D                     LD   a,l   
0879   CD 7E 08               CALL   prthex2   
087C   C1                     POP   bc   
087D   C9                     RET      
087E                PRTHEX2:      
087E   4F                     LD   c,a   
087F   1F                     RRA      
0880   1F                     RRA      
0881   1F                     RRA      
0882   1F                     RRA      
0883   CD 87 08               CALL   prthex3   
0886   79                     LD   a,c   
0887                PRTHEX3:      
0887   E6 0F                  AND   0x0F   
0889   C6 90                  ADD   a,0x90   
088B   27                     DAA      
088C   CE 40                  ADC   a,0x40   
088E   27                     DAA      
088F   C3 85 00               JP   putchar   
0892                INIT:        
0892   FD 21 00 1A            LD   iy,DSTACK   
0896   DD 21 80 19            LD   ix,RSTACK   
089A   21 80 01               LD   hl,ialtVars   
089D   11 80 1B               LD   de,altVars   
08A0   01 10 00               LD   bc,8 * 2   
08A3   ED B0                  LDIR      
08A5   21 C0 1B               LD   hl,data   ; init namespaces to 0 using ldir
08A8   54 5D                  LD   de,hl   
08AA   13                     INC   de   
08AB   36 00                  LD   (hl),0   
08AD   01 68 00               LD   bc,DATASIZE   
08B0   ED B0                  LDIR      
08B2   C9                     RET      
08B3                PRINTSTR:      
08B3   E3                     EX   (sp),hl   ; swap			
08B4   CD BB 07               CALL   putStr   
08B7   23                     INC   hl   ; inc past null
08B8   E3                     EX   (sp),hl   ; put it back	
08B9   C9                     RET      
08BA                LOOKUPREF:      
08BA   16 00                  LD   d,0   
08BC                LOOKUPREF0:      
08BC   FE 61                  CP   "a"   
08BE   30 06                  JR   nc,lookupRef2   
08C0                LOOKUPREF1:      
08C0   D6 61                  SUB   "a"   
08C2   1E 00                  LD   e,0   
08C4   18 04                  JR   lookupRef3   
08C6                LOOKUPREF2:      
08C6   D6 61                  SUB   "a"   
08C8   1E 34                  LD   e,26*2   
08CA                LOOKUPREF3:      
08CA   87                     ADD   a,a   
08CB   83                     ADD   a,e   
08CC   21 C0 1B               LD   hl,DATA   
08CF   85                     ADD   a,l   
08D0   6F                     LD   l,a   
08D1   3E 00                  LD   a,0   
08D3   8C                     ADC   a,h   
08D4   67                     LD   h,a   
08D5   AF                     XOR   a   
08D6   B3                     OR   e   ; sets z flag if a-z
08D7   C9                     RET      
08D8                             ; **************************************************************************
08D8                             ; calculate nesting value
08D8                             ; a is char to be tested,
08D8                             ; e is the nesting value (initially 0)
08D8                             ; e is increased by ( and [
08D8                             ; e is decreased by ) and ]
08D8                             ; e has its bit 7 toggled by `
08D8                             ; limited to 127 levels
08D8                             ; **************************************************************************
08D8                NESTING:      
08D8   FE 22                  CP   $22   ; quote char
08DA   20 0A                  JR   nz,nesting1   
08DC   CB 7B                  BIT   7,e   
08DE   28 03                  JR   z,nesting1a   
08E0   CB BB                  RES   7,e   
08E2   C9                     RET      
08E3                NESTING1A:      
08E3   CB FB                  SET   7,e   
08E5   C9                     RET      
08E6                NESTING1:      
08E6   CB 7B                  BIT   7,e   
08E8   C0                     RET   nz   
08E9   FE 7B                  CP   "{"   
08EB   28 08                  JR   z,nesting2   
08ED   FE 5B                  CP   "["   
08EF   28 04                  JR   z,nesting2   
08F1   FE 28                  CP   "("   
08F3   20 02                  JR   nz,nesting3   
08F5                NESTING2:      
08F5   1C                     INC   e   
08F6   C9                     RET      
08F7                NESTING3:      
08F7   FE 7D                  CP   "}"   
08F9   28 07                  JR   z,nesting4   
08FB   FE 5D                  CP   "]"   
08FD   28 03                  JR   z,nesting4   
08FF   FE 29                  CP   ")"   
0901   C0                     RET   nz   
0902                NESTING4:      
0902   1D                     DEC   e   
0903   C9                     RET      
0904                             ; 
0904                STRDEF:      
0904   ED 5B 8E 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
0908   D5                     PUSH   de   ; save start of string
0909   03                     INC   bc   ; point to next char
090A   18 03                  JR   strDef2   
090C                STRDEF1:      
090C   12                     LD   (de),a   
090D   13                     INC   de   ; increase count
090E   03                     INC   bc   ; point to next char
090F                STRDEF2:      
090F   0A                     LD   a,(bc)   
0910   FE 27                  CP   "'"   ; ' is the string terminator
0912   20 F8                  JR   nz,strDef1   
0914   AF                     XOR   a   ; write null to terminate string
0915   12                     LD   (de),a   
0916   13                     INC   de   
0917   ED 53 8E 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
091B   C3 A0 03               JP   next   
091E                CHAR:        
091E   21 00 00               LD   hl,0   ; if `` is empty
0921                CHAR1:       
0921   03                     INC   bc   ; point to next char
0922   0A                     LD   a,(bc)   
0923   FE 60                  CP   "`"   ; ` is the string terminator
0925   28 09                  JR   z,char3   
0927   FE 5C                  CP   $5c   ; \ is the escape
0929   20 02                  JR   nz,char2   
092B   03                     INC   bc   
092C   0A                     LD   a,(bc)   
092D                CHAR2:       
092D   6F                     LD   l,a   
092E   18 F1                  JR   char1   
0930                CHAR3:       
0930   E5                     PUSH   hl   
0931                             ; dec bc
0931   C3 A0 03               JP   next   
0934                NEWADD2:      
0934   C5                     PUSH   bc   ; push IP
0935   FD 56 FF               LD   d,(iy-1)   
0938   FD 5E FE               LD   e,(iy-2)   
093B   FD 66 FD               LD   h,(iy-3)   
093E   FD 6E FC               LD   l,(iy-4)   
0941   FD E5                  PUSH   iy   ; push base pointer
0943   FD 21 00 00            LD   iy,0   ; base pointer = stack pointer
0947   FD 39                  ADD   iy,sp   
0949   19                     ADD   hl,de   ; hl = hl + de
094A   EB                     EX   de,hl   ; de = result
094B   E1                     POP   hl   ; hl = old BP
094C   C1                     POP   bc   ; bc = IP
094D   F9                     LD   sp,hl   ; sp = old BP
094E   D5                     PUSH   de   ; push result
094F   C3 A0 03               JP   next   
0952                XCALL:       
0952                ENTER:       
0952                GO:          ; execute Siena lambda at pointer
0952   D1                     POP   de   ; de = pointer to lambda
0953                GO1:         
0953   7A                     LD   a,d   ; skip if destination address is null
0954   B3                     OR   e   
0955   28 0E                  JR   z,go3   
0957                GO2:         
0957   C5                     PUSH   bc   ; push IP
0958   FD E5                  PUSH   iy   ; push SCP (scope pointer)
095A   FD E5                  PUSH   iy   ; push BP
095C   FD 21 00 00            LD   iy,0   ; BP = SP
0960   FD 39                  ADD   iy,sp   
0962   42 4B                  LD   bc,de   ; IP = pointer to lambda
0964   0B                     DEC   bc   ; dec to prepare for next routine
0965                GO3:         
0965   C3 A0 03               JP   next   
0968                LAMBDA:      
0968   03                     INC   bc   
0969   2A 8E 1B               LD   hl,(vHeapPtr)   ; start of lambda defintion
096C   E5                     PUSH   hl   
096D   16 01                  LD   d,1   ; nesting: count first parenthesis
096F                LAMBDA1:      ; Skip to end of definition
096F   0A                     LD   a,(bc)   ; Get the next character
0970   03                     INC   bc   ; Point to next character
0971   77                     LD   (hl),a   
0972   23                     INC   hl   
0973   FE 27                  CP   "'"   
0975   28 1C                  JR   z,lambda2   
0977   FE 28                  CP   "("   
0979   28 18                  JR   z,lambda2   
097B   FE 29                  CP   ")"   
097D   28 14                  JR   z,lambda2   
097F   FE 7B                  CP   "{"   
0981   28 10                  JR   z,lambda2   
0983   FE 7D                  CP   "}"   ; Is it the end of the definition?
0985   28 0C                  JR   z,lambda2   
0987   FE 5B                  CP   "["   
0989   28 08                  JR   z,lambda2   
098B   FE 5D                  CP   "]"   
098D   28 04                  JR   z,lambda2   
098F   FE 60                  CP   "`"   
0991   20 DC                  JR   nz,lambda1   
0993                LAMBDA2:      
0993   14                     INC   d   
0994   CB 42                  BIT   0,d   ; balanced?
0996   20 D7                  JR   nz,lambda1   ; not balanced, get the next element
0998   FE 7D                  CP   "}"   ; Is it the end of the definition?
099A   20 D3                  JR   nz,lambda1   ; get the next element
099C   0B                     DEC   bc   
099D   22 8E 1B               LD   (vHeapPtr),hl   ; bump heap ptr to after definiton
09A0   C3 A0 03               JP   next   
09A3                LAMBDAEND:      
09A3   E1                     POP   hl   ; hl = last result
09A4   FD 54                  LD   d,iyh   ; de = BP
09A6   FD 5D                  LD   e,iyl   
09A8   EB                     EX   de,hl   ; hl = BP, de = result
09A9   F9                     LD   sp,hl   ; sp = BP
09AA   E1                     POP   hl   ; hl = old BP
09AB   C1                     POP   bc   ; pop scope ptr (discard)
09AC   C1                     POP   bc   ; bc = IP
09AD   F9                     LD   sp,hl   ; sp = old BP
09AE   FD 21 00 00            LD   iy,0   ; iy = sp = old BP
09B2   FD 39                  ADD   iy,sp   
09B4   D5                     PUSH   de   ; push result
09B5   C3 A0 03               JP   next   
09B8                ARG:         
09B8   03                     INC   bc   ; get next char
09B9   0A                     LD   a,(bc)   
09BA   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
09BC   E6 07                  AND   $07   ; mask
09BE   87                     ADD   a,a   ; double
09BF   6F                     LD   l,a   ; hl = offset into args
09C0   26 00                  LD   h,0   
09C2   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
09C5   FD 56 03               LD   d,(iy+3)   
09C8   EB                     EX   de,hl   ; hl = SCP - offset
09C9   B7                     OR   a   
09CA   ED 52                  SBC   hl,de   
09CC   2B                     DEC   hl   ; de = arg
09CD   56                     LD   d,(hl)   
09CE   2B                     DEC   hl   
09CF   5E                     LD   e,(hl)   
09D0   D5                     PUSH   de   ; push arg
09D1   C3 A0 03               JP   next   
09D4                             ; 
09D4                EXIT:        
09D4   50 59                  LD   de,bc   ; address of code after exit opcode
09D6   13                     INC   de   
09D7   D9                     EXX      
09D8   C1                     POP   bc   ; bc = last result
09D9   FD 54                  LD   d,iyh   ; de = BP
09DB   FD 5D                  LD   e,iyl   
09DD   EB                     EX   de,hl   ; hl = BP, de = result
09DE   F9                     LD   sp,hl   ; sp = BP
09DF   D9                     EXX      
09E0   E1                     POP   hl   ; hl = old BP
09E1   C1                     POP   bc   ; pop SCP (discard)
09E2   C1                     POP   bc   ; bc = IP
09E3   F9                     LD   sp,hl   ; sp = old BP
09E4   D9                     EXX      
09E5   C5                     PUSH   bc   ; push result
09E6   D9                     EXX      
09E7   EB                     EX   de,hl   
09E8   E9                     JP   (hl)   
09E9                IN:          
09E9   E1                     POP   hl   ; hl = string
09EA   D1                     POP   de   ; de = char
09EB                IN1:         
09EB   7E                     LD   a,(hl)   
09EC   23                     INC   hl   
09ED   FE 00                  CP   0   ; is end of string
09EF   28 04                  JR   z,in2   
09F1   BB                     CP   e   
09F2   20 F7                  JR   nz,in1   
09F4   B7                     OR   a   ; a is never 0, or a resets zero flag
09F5                IN2:         
09F5   21 00 00               LD   hl,0   ; hl = result
09F8   28 01                  JR   z,in3   
09FA   2B                     DEC   hl   ; if nz de = $ffff
09FB                IN3:         
09FB   E5                     PUSH   hl   ; push result
09FC   C3 A0 03               JP   next   
09FF                BLOCK:       
09FF   03                     INC   bc   
0A00   C5                     PUSH   bc   ; return first opcode of block
0A01   16 01                  LD   d,1   ; nesting: count first parenthesis
0A03                BLOCK1:      ; Skip to end of definition
0A03   0A                     LD   a,(bc)   ; Get the next character
0A04   03                     INC   bc   ; Point to next character
0A05   FE 27                  CP   "'"   
0A07   28 1C                  JR   z,block2   
0A09   FE 28                  CP   "("   
0A0B   28 18                  JR   z,block2   
0A0D   FE 29                  CP   ")"   
0A0F   28 14                  JR   z,block2   
0A11   FE 7B                  CP   "{"   
0A13   28 10                  JR   z,block2   
0A15   FE 7D                  CP   "}"   
0A17   28 0C                  JR   z,block2   
0A19   FE 5B                  CP   "["   
0A1B   28 08                  JR   z,block2   
0A1D   FE 5D                  CP   "]"   
0A1F   28 04                  JR   z,block2   
0A21   FE 60                  CP   "`"   
0A23   20 DE                  JR   nz,block1   
0A25                BLOCK2:      
0A25   14                     INC   d   
0A26   CB 42                  BIT   0,d   ; balanced?
0A28   20 D9                  JR   nz,block1   ; not balanced, get the next element
0A2A   FE 29                  CP   ")"   ; Is it the end of the block?
0A2C   20 D5                  JR   nz,block1   ; get the next element
0A2E   0B                     DEC   bc   
0A2F   C3 A0 03               JP   next   
0A32                BLOCKEND:      
0A32   E1                     POP   hl   ; hl = last result
0A33   FD 54                  LD   d,iyh   ; de = BP
0A35   FD 5D                  LD   e,iyl   
0A37   EB                     EX   de,hl   ; hl = BP, de = result
0A38   F9                     LD   sp,hl   ; sp = BP
0A39   E1                     POP   hl   ; hl = old BP
0A3A   C1                     POP   bc   ; pop SCP (discard)
0A3B   C1                     POP   bc   ; bc = IP
0A3C   F9                     LD   sp,hl   ; sp = old BP
0A3D   FD 21 00 00            LD   iy,0   ; iy = sp
0A41   FD 39                  ADD   iy,sp   
0A43   D5                     PUSH   de   ; push result
0A44   C3 A0 03               JP   next   
0A47                IF:          
0A47   E1                     POP   hl   ; hl = then block
0A48   D1                     POP   de   ; de = condition
0A49   13                     INC   de   ; check for true
0A4A   7A                     LD   a,d   
0A4B   B3                     OR   e   
0A4C   28 03                  JR   z,if2   
0A4E   C3 A0 03               JP   next   ; condition = false, continue
0A51                IF2:         ; condition = true, hl = then block
0A51   C5                     PUSH   bc   ; push IP
0A52   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A55   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A58   D5                     PUSH   de   ; push SCP
0A59   FD E5                  PUSH   iy   ; push BP
0A5B   FD 21 00 00            LD   iy,0   ; iy = sp
0A5F   FD 39                  ADD   iy,sp   
0A61   44 4D                  LD   bc,hl   ; IP = then
0A63   0B                     DEC   bc   
0A64   C3 A0 03               JP   next   
0A67                CASE:        
0A67   FD 66 FF               LD   h,(iy-1)   ; hl = selector
0A6A   FD 6E FE               LD   l,(iy-2)   
0A6D   23                     INC   hl   ; index from second arg
0A6E   29                     ADD   hl,hl   ; word offset
0A6F   FD 54                  LD   d,iyh   
0A71   FD 5D                  LD   e,iyl   
0A73   EB                     EX   de,hl   
0A74   B7                     OR   a   
0A75   ED 52                  SBC   hl,de   
0A77   2B                     DEC   hl   ; de = arg
0A78   56                     LD   d,(hl)   
0A79   2B                     DEC   hl   
0A7A   5E                     LD   e,(hl)   
0A7B   EB                     EX   de,hl   ; hl = arg
0A7C   C5                     PUSH   bc   ; push IP
0A7D   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0A80   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0A83   D5                     PUSH   de   ; push SCP
0A84   FD E5                  PUSH   iy   ; push BP
0A86   FD 21 00 00            LD   iy,0   ; iy = sp
0A8A   FD 39                  ADD   iy,sp   
0A8C   44 4D                  LD   bc,hl   ; IP = arg
0A8E   0B                     DEC   bc   
0A8F   C3 A0 03               JP   next   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                OPCODES:      
1A00                          DS   $80   
1A80                CTRLCODES:      
1A80                ALTCODES:      
1A80                          DS   $80   
1B00                          ALIGN   $100   
1B00                MINTVARS:      
1B00                          DS   $30   
1B30                VLOOPSP:   DS   2   ; 
1B32                VBYTEMODE:   DS   2   ; 
1B34                TBPTR:    DS   2   ; reserved for tests
1B36                RST08:    DS   2   
1B38                RST10:    DS   2   
1B3A                RST18:    DS   2   
1B3C                RST20:    DS   2   
1B3E                RST28:    DS   2   
1B40                RST30:    DS   2   ; 
1B42                BAUD:     DS   2   ; 
1B44                INTVEC:   DS   2   ; 
1B46                NMIVEC:   DS   2   ; 
1B48                GETCVEC:   DS   2   ; 
1B4A                PUTCVEC:   DS   2   ; 
1B4C                          DS   26*2   
1B80                ALTVARS:      
1B80                VS0:      DS   2   ; a
1B82                          DS   2   ; b
1B84                VTIBPTR:   DS   2   ; c
1B86                          DS   2   ; d
1B88                VLASTDEF:   DS   2   ; e
1B8A                          DS   2   ; f
1B8C                          DS   2   ; g
1B8E                VHEAPPTR:   DS   2   ; h
1B90                          DS   2   ; i
1B92                          DS   2   ; j
1B94                          DS   2   ; k
1B96                          DS   2   ; l
1B98                          DS   2   ; m
1B9A                          DS   2   ; n
1B9C                          DS   2   ; o
1B9E                          DS   2   ; p
1BA0                          DS   2   ; q
1BA2                          DS   2   ; r
1BA4                          DS   2   ; s
1BA6                          DS   2   ; t
1BA8                          DS   2   ; u
1BAA                          DS   2   ; v
1BAC                          DS   2   ; w
1BAE                          DS   2   ; x
1BB0                          DS   2   ; y
1BB2                          DS   2   ; z
1BB4                             ; ****************************************************************
1BB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
1BB4                             ; ****************************************************************
1BB4                          ALIGN   $40   
1BC0                DATA:     DS   dataSize   
1C28                HEAP:        
1C28                             ; 
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                             ; 
4000                          ;*Macro unroll:  test "0 (1) (2) cas", 1
4000   31 00 1A               LD   SP,DSTACK   
4003   CD 92 08               CALL   init   
4006   CD 52 09               CALL   enter   
4009   30 20 28 31 29 20 28 32 29 20 63 61 73 00 .CSTR   "0 (1) (2) cas"   
4017                          ;*Macro unroll:  expect "0 (1) (2) cas",1
4017   E1                     POP   HL   
4018   E5                     PUSH   HL   
4019   11 01 00               LD   DE,1   
401C   B7                     OR   A   
401D   ED 52                  SBC   HL,DE   
401F   7D                     LD   A,L   
4020   B4                     OR   H   
4021   28 58                  JR   Z,expectM_0_2146S43   
4023   CD B3 08               CALL   printStr   
4026   43 6F 64 65 3A 20 30 20 28 31 29 20 28 32 29 20 63 61 73 00 .CSTR   "Code: ","0 (1) (2) cas"   
403A   CD B3 08               CALL   printStr   
403D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
404C   21 01 00               LD   HL,1   
404F   CD 2B 08               CALL   prtdec   
4052   CD B3 08               CALL   printStr   
4055   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4062   E1                     POP   hl   
4063   E5                     PUSH   hl   
4064   CD 2B 08               CALL   prtdec   
4067   E1                     POP   hl   
4068   CD B3 08               CALL   printStr   
406B   20 28 23 00            .CSTR   " (#"   
406F   CD 73 08               CALL   prthex   
4072   CD B3 08               CALL   printStr   
4075   29 0D 0A 00            .CSTR   ")\r\n"   
4079   76                     HALT      
407A   00                     .CSTR      
407B                EXPECTM_0_2146S43:      
407B   E1                     POP   HL   
407C                             ; 
407C                             ; test "1", 1
407C                             ; test "2", 2
407C                             ; test "``", 0
407C                             ; test "`a`", $61
407C                             ; test "`\\``", $60
407C                             ; test "`b` 'cba' in", -1
407C                             ; test "`x` 'cba' in", 0
407C                             ; test "1 2 +", 3
407C                             ; test "5 -1 (2) if", 2
407C                             ; test "5 0 (2) if", 5
407C                             ; test "5 0 (0 (2) if) if", 5
407C                             ; test "5 0 (-1 (2) if) if", 5
407C                             ; test "5 -1 (2) if", 2
407C                             ; test "5 -1 (-1 (2) if) if", 2
407C                             ; test "{1} go", 1
407C                             ; test "2 {$1} go", 2
407C                             ; test "2 4 {$2} go", 4
407C                             ; test "{{1} go} go", 1
407C                             ; test "5 {-1 ($1) if} go", 5
407C                             ; 
407C                             ; 
407C                             ; test "'A' @", 65
407C                             ; 
407C                             ; test "1", 1
407C                             ; test "0", 0
407C                             ; test "10", 10
407C                             ; test "123", 123
407C                             ; test "$10", $10
407C                             ; test "$FF", $FF
407C                             ; test "2 3 =", 0
407C                             ; test "3 3 =", 1
407C                             ; test "2 3 <", 1
407C                             ; test "3 3 <", 0
407C                             ; test "3 3 >", 0
407C                             ; test "4 3 >", 1
407C                             ; test "1 2 +", 3
407C                             ; test "123 456 +", 123+456
407C                             ; test "64 128 +", 64+128
407C                             ; test "5 3 -", 2
407C                             ; test "3 5 &", 1
407C                             ; test "3 5 |", 7
407C                             ; test "2 3 *", 6
407C                             ; test "1 2 3 + *", 5
407C                             ; 
407C                             ; ; test "1 2 3 ' +", 3
407C                             ; ; test "1_ 2 +",1
407C                             ; ; test "1_ 1 +",0
407C                             ; ; call enter
407C                             ; ;     .cstr "1 3",$22,"+"
407C                             ; ; expect "1 3 DUP +", 6
407C                             ; 
407C                             ; ; test "5 2/'", 2
407C                             ; ; test "3 5$ -", 2
407C                             ; ; test "5 2/$ '", 1
407C                             ; ; test "2 3%++", 7
407C                             ; ; test "1 2 3~''", 2
407C                             ; ; test "1 2 3~+*", 8
407C                             ; ; test "2a!a@",2
407C                             ; ; test "3x! 1 x@+x! x@", 4
407C                             ; ; test "3x! 1_ x@+x! x@", 2
407C                             ; 
407C                             ; 
407C                             ; 
407C                             ; ; test "1{", 2
407C                             ; ; test "1}", 0
407C                             ; ; test "2}", 1
407C                             ; ; test "10 11 12\\#3$ '$ '$ '", 4
407C                             ; ; test "(2) \\^", 2
407C                             ; ; test ":X1; X", 1
407C                             ; ; test ":A100;A", 100
407C                             ; ; test ":Aa!; 3A a@", 3
407C                             ; ; test ":Aa!;:Ba@;4AB", 4
407C                             ; ; test "[]$ '", 0
407C                             ; ; test "[3]$ '", 1
407C                             ; ; test "[3]'@", 3
407C                             ; ; test "[1 2 3]'@", 1
407C                             ; ; test "[1 2 3]'2+@", 2
407C                             ; ; test "\\h@[1]''\\h@$-", 2
407C                             ; ; test "\\h@[1 2 3]''\\h@$-", 6
407C                             ; ; test "\\[]$ '", 0
407C                             ; ; test "\\[3]'\\@", 3
407C                             ; ; test "\\[3]$ '", 1
407C                             ; ; test "\\[1 2 3]'\\@", 1
407C                             ; ; test "\\[1 2 3]'1+\\@", 2
407C                             ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
407C                             ; ; test "\\h@\\[1]''\\h@$-", 1
407C                             ; ; test "\\`A`\\@",65
407C                             ; ; test "0 0(1+)", 0
407C                             ; ; test "0 1(1+)", 1
407C                             ; ; test "0 2(1+)", 2
407C                             ; ; test "0 1(0(1+))", 0
407C                             ; ; test "0 1(1(1+))", 1
407C                             ; ; test "0 2(1(1+))", 2
407C                             ; ; test "0 2(2(1+))", 4
407C                             ; ; test "0 1(\\i@+)", 0
407C                             ; ; test "0 2(\\i@+)", 1
407C                             ; ; test "0 3(\\i@+)", 3
407C                             ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
407C                             ; ; test "0t! 10(1 t@+t!) t@",10
407C                             ; ; test "0(100)(200)",200
407C                             ; ; test "1(100)(200)",100
407C                             ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
407C                             ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
407C                             ; ; test ":X10;\\0X", 10
407C                             ; ; test "2 \\1x! \\1x@", 2
407C                             ; 
407C   CD B3 08               CALL   printStr   
407F   44 6F 6E 65 21 00      .CSTR   "Done!"   
4085   76                     HALT      
4086                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 29 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 351 IN Siena.asm
                    > USED AT LINE 599 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 464 IN Siena.asm
                    > USED AT LINE 814 IN Siena.asm
                    > USED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
                    > USED AT LINE 1280 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
DATASIZE:           0068 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 71 IN ram.asm
MACROS:             0180 DEFINED AT LINE 34 IN Siena.asm
IALTVARS:           0180 DEFINED AT LINE 39 IN Siena.asm
                    > USED AT LINE 1285 IN Siena.asm
IOPCODES:           0200 DEFINED AT LINE 50 IN Siena.asm
NESTINGSTR:         0300 DEFINED AT LINE 308 IN Siena.asm
ETX:                030A DEFINED AT LINE 311 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
ETX1:               0313 DEFINED AT LINE 316 IN Siena.asm
                    > USED AT LINE 314 IN Siena.asm
START:              0315 DEFINED AT LINE 319 IN Siena.asm
INTERPRET:          032B DEFINED AT LINE 325 IN Siena.asm
                    > USED AT LINE 317 IN Siena.asm
INTERPRET2:         0335 DEFINED AT LINE 331 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
INTERPRET3:         033D DEFINED AT LINE 338 IN Siena.asm
                    > USED AT LINE 347 IN Siena.asm
INTERPRET4:         0343 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
WAITCHAR:           0348 DEFINED AT LINE 350 IN Siena.asm
                    > USED AT LINE 383 IN Siena.asm
                    > USED AT LINE 397 IN Siena.asm
MACRO:              0357 DEFINED AT LINE 359 IN Siena.asm
MACRO1:             036E DEFINED AT LINE 372 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
WAITCHAR1:          0374 DEFINED AT LINE 376 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
WAITCHAR3:          0382 DEFINED AT LINE 385 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
WAITCHAR4:          0398 DEFINED AT LINE 401 IN Siena.asm
                    > USED AT LINE 355 IN Siena.asm
NEXT:               03A0 DEFINED AT LINE 428 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
                    > USED AT LINE 520 IN Siena.asm
                    > USED AT LINE 553 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
                    > USED AT LINE 575 IN Siena.asm
                    > USED AT LINE 581 IN Siena.asm
                    > USED AT LINE 595 IN Siena.asm
                    > USED AT LINE 603 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
                    > USED AT LINE 617 IN Siena.asm
                    > USED AT LINE 625 IN Siena.asm
                    > USED AT LINE 632 IN Siena.asm
                    > USED AT LINE 641 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
                    > USED AT LINE 669 IN Siena.asm
                    > USED AT LINE 680 IN Siena.asm
                    > USED AT LINE 698 IN Siena.asm
                    > USED AT LINE 718 IN Siena.asm
                    > USED AT LINE 731 IN Siena.asm
                    > USED AT LINE 777 IN Siena.asm
                    > USED AT LINE 788 IN Siena.asm
                    > USED AT LINE 795 IN Siena.asm
                    > USED AT LINE 803 IN Siena.asm
                    > USED AT LINE 809 IN Siena.asm
                    > USED AT LINE 815 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
                    > USED AT LINE 827 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 842 IN Siena.asm
                    > USED AT LINE 851 IN Siena.asm
                    > USED AT LINE 857 IN Siena.asm
                    > USED AT LINE 863 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
                    > USED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1432 IN Siena.asm
                    > USED AT LINE 1452 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
                    > USED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1594 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
PAGE4:              0400 DEFINED AT LINE 441 IN Siena.asm
NUM_:               0400 DEFINED AT LINE 443 IN Siena.asm
HEXNUM_:            0403 DEFINED AT LINE 445 IN Siena.asm
ARG_:               0406 DEFINED AT LINE 447 IN Siena.asm
STRDEF_:            0409 DEFINED AT LINE 449 IN Siena.asm
NEWADD2_:           040C DEFINED AT LINE 451 IN Siena.asm
LAMBDA_:            040F DEFINED AT LINE 453 IN Siena.asm
GO_:                0412 DEFINED AT LINE 455 IN Siena.asm
                    > USED AT LINE 938 IN Siena.asm
LAMBDAEND_:         0415 DEFINED AT LINE 457 IN Siena.asm
DOT_:               0418 DEFINED AT LINE 459 IN Siena.asm
DOT2:               041C DEFINED AT LINE 462 IN Siena.asm
                    > USED AT LINE 566 IN Siena.asm
BLOCK_:             0424 DEFINED AT LINE 466 IN Siena.asm
BLOCKEND_:          0427 DEFINED AT LINE 468 IN Siena.asm
CHAR_:              042A DEFINED AT LINE 470 IN Siena.asm
A_:                 042D DEFINED AT LINE 472 IN Siena.asm
C_:                 0430 DEFINED AT LINE 474 IN Siena.asm
D_:                 0433 DEFINED AT LINE 476 IN Siena.asm
E_:                 0436 DEFINED AT LINE 478 IN Siena.asm
F_:                 0439 DEFINED AT LINE 480 IN Siena.asm
G_:                 043C DEFINED AT LINE 482 IN Siena.asm
I_:                 043F DEFINED AT LINE 484 IN Siena.asm
K_:                 0442 DEFINED AT LINE 486 IN Siena.asm
L_:                 0445 DEFINED AT LINE 488 IN Siena.asm
M_:                 0448 DEFINED AT LINE 490 IN Siena.asm
N_:                 044B DEFINED AT LINE 492 IN Siena.asm
O_:                 044E DEFINED AT LINE 494 IN Siena.asm
P_:                 0451 DEFINED AT LINE 496 IN Siena.asm
R_:                 0454 DEFINED AT LINE 498 IN Siena.asm
S_:                 0457 DEFINED AT LINE 500 IN Siena.asm
U_:                 045A DEFINED AT LINE 502 IN Siena.asm
W_:                 045D DEFINED AT LINE 504 IN Siena.asm
X_:                 0460 DEFINED AT LINE 506 IN Siena.asm
AND_:               0463 DEFINED AT LINE 509 IN Siena.asm
                    > USED AT LINE 880 IN Siena.asm
AND1:               046A DEFINED AT LINE 517 IN Siena.asm
                    > USED AT LINE 531 IN Siena.asm
                    > USED AT LINE 542 IN Siena.asm
OR_:                046F DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
XOR_:               0478 DEFINED AT LINE 533 IN Siena.asm
                    > USED AT LINE 1056 IN Siena.asm
XOR1:               0479 DEFINED AT LINE 535 IN Siena.asm
                    > USED AT LINE 546 IN Siena.asm
INV_:               0481 DEFINED AT LINE 544 IN Siena.asm
                    > USED AT LINE 952 IN Siena.asm
ADD_:               0486 DEFINED AT LINE 548 IN Siena.asm
                    > USED AT LINE 878 IN Siena.asm
CALL_:              048D DEFINED AT LINE 555 IN Siena.asm
HDOT_:              0497 DEFINED AT LINE 563 IN Siena.asm
DROP_:              049E DEFINED AT LINE 568 IN Siena.asm
                    > USED AT LINE 910 IN Siena.asm
UNDROP_:            04A2 DEFINED AT LINE 572 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
DUP_:               04A7 DEFINED AT LINE 577 IN Siena.asm
                    > USED AT LINE 912 IN Siena.asm
ETX_:               04AD DEFINED AT LINE 582 IN Siena.asm
EXIT_:              04B0 DEFINED AT LINE 585 IN Siena.asm
FETCH_:             04B3 DEFINED AT LINE 588 IN Siena.asm
FETCH1:             04B4 DEFINED AT LINE 590 IN Siena.asm
KEY_:               04BB DEFINED AT LINE 598 IN Siena.asm
                    > USED AT LINE 963 IN Siena.asm
MUL_:               04C5 DEFINED AT LINE 605 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
NOP_:               04C8 DEFINED AT LINE 607 IN Siena.asm
OVER_:              04CB DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 999 IN Siena.asm
ROT_:               04D3 DEFINED AT LINE 619 IN Siena.asm
                    > USED AT LINE 1016 IN Siena.asm
SHL_:               04DB DEFINED AT LINE 628 IN Siena.asm
SHR_:               04E1 DEFINED AT LINE 635 IN Siena.asm
SHR1:               04E2 DEFINED AT LINE 637 IN Siena.asm
STORE_:             04EA DEFINED AT LINE 643 IN Siena.asm
SWAP_:              04F2 DEFINED AT LINE 651 IN Siena.asm
                    > USED AT LINE 1032 IN Siena.asm
NEG_:               04F8 DEFINED AT LINE 657 IN Siena.asm
                    > USED AT LINE 991 IN Siena.asm
SUB_:               04FE DEFINED AT LINE 662 IN Siena.asm
                    > USED AT LINE 1030 IN Siena.asm
SUB2:               0500 DEFINED AT LINE 665 IN Siena.asm
                    > USED AT LINE 660 IN Siena.asm
EQ_:                0507 DEFINED AT LINE 671 IN Siena.asm
                    > USED AT LINE 920 IN Siena.asm
FALSE_:             050E DEFINED AT LINE 677 IN Siena.asm
                    > USED AT LINE 693 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
GT_:                0515 DEFINED AT LINE 682 IN Siena.asm
                    > USED AT LINE 940 IN Siena.asm
LT_:                0519 DEFINED AT LINE 687 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
LT1:                051B DEFINED AT LINE 690 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
TRUE_:              0523 DEFINED AT LINE 695 IN Siena.asm
                    > USED AT LINE 676 IN Siena.asm
GTE_:               052A DEFINED AT LINE 700 IN Siena.asm
LTE_:               052E DEFINED AT LINE 704 IN Siena.asm
LTE1:               0530 DEFINED AT LINE 707 IN Siena.asm
                    > USED AT LINE 703 IN Siena.asm
VAR_:               0539 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 882 IN Siena.asm
                    > USED AT LINE 895 IN Siena.asm
                    > USED AT LINE 900 IN Siena.asm
                    > USED AT LINE 914 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 930 IN Siena.asm
                    > USED AT LINE 942 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 965 IN Siena.asm
                    > USED AT LINE 975 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 993 IN Siena.asm
                    > USED AT LINE 1003 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1042 IN Siena.asm
                    > USED AT LINE 1050 IN Siena.asm
                    > USED AT LINE 1058 IN Siena.asm
DIV_:               0541 DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 908 IN Siena.asm
DIV:                0547 DEFINED AT LINE 746 IN Siena.asm
                    > USED AT LINE 722 IN Siena.asm
DIV1:               0551 DEFINED AT LINE 756 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
DIV2:               055E DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
DIV3:               055F DEFINED AT LINE 767 IN Siena.asm
                    > USED AT LINE 764 IN Siena.asm
DIV4:               0564 DEFINED AT LINE 772 IN Siena.asm
PAGE6:              0600 DEFINED AT LINE 785 IN Siena.asm
ANOP_:              0600 DEFINED AT LINE 787 IN Siena.asm
CFETCH_:            0603 DEFINED AT LINE 790 IN Siena.asm
COMMENT_:           060B DEFINED AT LINE 797 IN Siena.asm
                    > USED AT LINE 801 IN Siena.asm
CSTORE_:            0615 DEFINED AT LINE 805 IN Siena.asm
EMIT_:              061B DEFINED AT LINE 811 IN Siena.asm
EXEC_:              0623 DEFINED AT LINE 817 IN Siena.asm
EXEC1:              0629 DEFINED AT LINE 820 IN Siena.asm
                    > USED AT LINE 818 IN Siena.asm
PROMPT_:            062C DEFINED AT LINE 825 IN Siena.asm
INPORT_:            0632 DEFINED AT LINE 830 IN Siena.asm
NEWLN_:             063E DEFINED AT LINE 840 IN Siena.asm
OUTPORT_:           0644 DEFINED AT LINE 844 IN Siena.asm
PRTSTR_:            064E DEFINED AT LINE 853 IN Siena.asm
PRTSTR:             064E DEFINED AT LINE 854 IN Siena.asm
RPUSH_:             0655 DEFINED AT LINE 860 IN Siena.asm
RPOP_:              065C DEFINED AT LINE 865 IN Siena.asm
A:                  0663 DEFINED AT LINE 874 IN Siena.asm
                    > USED AT LINE 296 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 302 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
                    > USED AT LINE 312 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
                    > USED AT LINE 339 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 366 IN Siena.asm
                    > USED AT LINE 379 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 396 IN Siena.asm
                    > USED AT LINE 430 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
                    > USED AT LINE 473 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 556 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 666 IN Siena.asm
                    > USED AT LINE 674 IN Siena.asm
                    > USED AT LINE 691 IN Siena.asm
                    > USED AT LINE 708 IN Siena.asm
                    > USED AT LINE 715 IN Siena.asm
                    > USED AT LINE 754 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 876 IN Siena.asm
                    > USED AT LINE 886 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
                    > USED AT LINE 904 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
                    > USED AT LINE 926 IN Siena.asm
                    > USED AT LINE 934 IN Siena.asm
                    > USED AT LINE 946 IN Siena.asm
                    > USED AT LINE 961 IN Siena.asm
                    > USED AT LINE 969 IN Siena.asm
                    > USED AT LINE 979 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1014 IN Siena.asm
                    > USED AT LINE 1022 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1089 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
                    > USED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1149 IN Siena.asm
                    > USED AT LINE 1156 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1169 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
                    > USED AT LINE 1179 IN Siena.asm
                    > USED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1190 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1213 IN Siena.asm
                    > USED AT LINE 1215 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1220 IN Siena.asm
                    > USED AT LINE 1244 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1254 IN Siena.asm
                    > USED AT LINE 1260 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
                    > USED AT LINE 1276 IN Siena.asm
                    > USED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1318 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1324 IN Siena.asm
                    > USED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
                    > USED AT LINE 1380 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1387 IN Siena.asm
                    > USED AT LINE 1388 IN Siena.asm
                    > USED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 6
                    > USED AT LINE 8
C:                  0673 DEFINED AT LINE 884 IN Siena.asm
                    > USED AT LINE 345 IN Siena.asm
                    > USED AT LINE 475 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
                    > USED AT LINE 762 IN Siena.asm
                    > USED AT LINE 763 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 832 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1252 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
                    > USED AT LINE 1273 IN Siena.asm
C1:                 0689 DEFINED AT LINE 896 IN Siena.asm
                    > USED AT LINE 888 IN Siena.asm
D:                  0692 DEFINED AT LINE 902 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
                    > USED AT LINE 477 IN Siena.asm
                    > USED AT LINE 515 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 593 IN Siena.asm
                    > USED AT LINE 648 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 792 IN Siena.asm
                    > USED AT LINE 1093 IN Siena.asm
                    > USED AT LINE 1306 IN Siena.asm
                    > USED AT LINE 1415 IN Siena.asm
                    > USED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1481 IN Siena.asm
                    > USED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1492 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
E:                  06AC DEFINED AT LINE 916 IN Siena.asm
                    > USED AT LINE 332 IN Siena.asm
                    > USED AT LINE 364 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
                    > USED AT LINE 395 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
                    > USED AT LINE 512 IN Siena.asm
                    > USED AT LINE 526 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
                    > USED AT LINE 558 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 771 IN Siena.asm
                    > USED AT LINE 793 IN Siena.asm
                    > USED AT LINE 808 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
                    > USED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1233 IN Siena.asm
                    > USED AT LINE 1312 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1348 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
                    > USED AT LINE 1416 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
                    > USED AT LINE 1621 IN Siena.asm
                    > USED AT LINE 1637 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
F:                  06B7 DEFINED AT LINE 924 IN Siena.asm
                    > USED AT LINE 481 IN Siena.asm
G:                  06C2 DEFINED AT LINE 932 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
I:                  06D7 DEFINED AT LINE 944 IN Siena.asm
                    > USED AT LINE 485 IN Siena.asm
I1:                 06EB DEFINED AT LINE 954 IN Siena.asm
                    > USED AT LINE 950 IN Siena.asm
K:                  06EF DEFINED AT LINE 958 IN Siena.asm
                    > USED AT LINE 487 IN Siena.asm
L:                  06FD DEFINED AT LINE 967 IN Siena.asm
                    > USED AT LINE 362 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
                    > USED AT LINE 431 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
                    > USED AT LINE 489 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 527 IN Siena.asm
                    > USED AT LINE 528 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 601 IN Siena.asm
                    > USED AT LINE 639 IN Siena.asm
                    > USED AT LINE 751 IN Siena.asm
                    > USED AT LINE 813 IN Siena.asm
                    > USED AT LINE 833 IN Siena.asm
                    > USED AT LINE 834 IN Siena.asm
                    > USED AT LINE 847 IN Siena.asm
                    > USED AT LINE 849 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1127 IN Siena.asm
                    > USED AT LINE 1131 IN Siena.asm
                    > USED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
                    > USED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1203 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1322 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1418 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 8
M:                  070D DEFINED AT LINE 977 IN Siena.asm
                    > USED AT LINE 491 IN Siena.asm
                    > USED AT LINE 694 IN Siena.asm
                    > USED AT LINE 710 IN Siena.asm
N:                  071D DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 493 IN Siena.asm
O:                  0728 DEFINED AT LINE 995 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
P:                  0738 DEFINED AT LINE 1005 IN Siena.asm
                    > USED AT LINE 497 IN Siena.asm
R:                  0743 DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 499 IN Siena.asm
S:                  074E DEFINED AT LINE 1020 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
U:                  076D DEFINED AT LINE 1036 IN Siena.asm
                    > USED AT LINE 503 IN Siena.asm
W:                  0778 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
X:                  0783 DEFINED AT LINE 1052 IN Siena.asm
                    > USED AT LINE 507 IN Siena.asm
                    > USED AT LINE 959 IN Siena.asm
CLOSURE_:           078E DEFINED AT LINE 1060 IN Siena.asm
                    > USED AT LINE 898 IN Siena.asm
DEF_:               078E DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 906 IN Siena.asm
FILTER_:            078E DEFINED AT LINE 1062 IN Siena.asm
                    > USED AT LINE 928 IN Siena.asm
GET_:               078E DEFINED AT LINE 1063 IN Siena.asm
                    > USED AT LINE 936 IN Siena.asm
IF_:                078E DEFINED AT LINE 1064 IN Siena.asm
LET_:               078E DEFINED AT LINE 1065 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
MAP_:               078E DEFINED AT LINE 1066 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
PRINT_:             078E DEFINED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
SCAN_:              078E DEFINED AT LINE 1068 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
SET_:               078E DEFINED AT LINE 1069 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
SHIFT_:             078E DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1028 IN Siena.asm
WHILE_:             078E DEFINED AT LINE 1071 IN Siena.asm
                    > USED AT LINE 1048 IN Siena.asm
MUL:                0791 DEFINED AT LINE 1081 IN Siena.asm
                    > USED AT LINE 605 IN Siena.asm
MUL2:               079B DEFINED AT LINE 1090 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
PROMPT:             07AE DEFINED AT LINE 1109 IN Siena.asm
                    > USED AT LINE 326 IN Siena.asm
                    > USED AT LINE 826 IN Siena.asm
PUTSTR0:            07B7 DEFINED AT LINE 1114 IN Siena.asm
                    > USED AT LINE 1120 IN Siena.asm
PUTSTR:             07BB DEFINED AT LINE 1117 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
                    > USED AT LINE 1300 IN Siena.asm
RPUSH:              07C0 DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 862 IN Siena.asm
RPOP:               07CB DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
RPOP2:              07D5 DEFINED AT LINE 1135 IN Siena.asm
CRLF:               07D6 DEFINED AT LINE 1138 IN Siena.asm
                    > USED AT LINE 394 IN Siena.asm
                    > USED AT LINE 841 IN Siena.asm
NUM:                07DD DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 444 IN Siena.asm
NUM0:               07E6 DEFINED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1151 IN Siena.asm
NUM1:               07E7 DEFINED AT LINE 1155 IN Siena.asm
                    > USED AT LINE 1172 IN Siena.asm
NUM2:               07FF DEFINED AT LINE 1173 IN Siena.asm
                    > USED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1195 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
NUM3:               080A DEFINED AT LINE 1181 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
HEXNUM:             080E DEFINED AT LINE 1185 IN Siena.asm
                    > USED AT LINE 446 IN Siena.asm
HEXNUM1:            0811 DEFINED AT LINE 1187 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
HEXNUM2:            0819 DEFINED AT LINE 1193 IN Siena.asm
                    > USED AT LINE 1191 IN Siena.asm
PRTDEC:             082B DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 461 IN Siena.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
PRTDEC0:            083A DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
PRTDEC1:            085C DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1231 IN Siena.asm
                    > USED AT LINE 1234 IN Siena.asm
PRTDEC2:            085E DEFINED AT LINE 1239 IN Siena.asm
                    > USED AT LINE 1242 IN Siena.asm
PRTDEC3:            086E DEFINED AT LINE 1251 IN Siena.asm
                    > USED AT LINE 1246 IN Siena.asm
PRTDEC4:            086F DEFINED AT LINE 1253 IN Siena.asm
                    > USED AT LINE 1250 IN Siena.asm
PRTHEX:             0873 DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 28
PRTHEX2:            087E DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1263 IN Siena.asm
PRTHEX3:            0887 DEFINED AT LINE 1274 IN Siena.asm
                    > USED AT LINE 1272 IN Siena.asm
INIT:               0892 DEFINED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 9
                    > USED AT LINE 321 IN Siena.asm
                    > USED AT LINE 40
PRINTSTR:           08B3 DEFINED AT LINE 1298 IN Siena.asm
                    > USED AT LINE 322 IN Siena.asm
                    > USED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 1139 IN Siena.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 126
LOOKUPREF:          08BA DEFINED AT LINE 1305 IN Siena.asm
LOOKUPREF0:         08BC DEFINED AT LINE 1307 IN Siena.asm
LOOKUPREF1:         08C0 DEFINED AT LINE 1310 IN Siena.asm
                    > USED AT LINE 557 IN Siena.asm
LOOKUPREF2:         08C6 DEFINED AT LINE 1314 IN Siena.asm
                    > USED AT LINE 716 IN Siena.asm
                    > USED AT LINE 1309 IN Siena.asm
LOOKUPREF3:         08CA DEFINED AT LINE 1317 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
NESTING:            08D8 DEFINED AT LINE 1340 IN Siena.asm
                    > USED AT LINE 342 IN Siena.asm
                    > USED AT LINE 382 IN Siena.asm
NESTING1A:          08E3 DEFINED AT LINE 1347 IN Siena.asm
                    > USED AT LINE 1344 IN Siena.asm
NESTING1:           08E6 DEFINED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
NESTING2:           08F5 DEFINED AT LINE 1359 IN Siena.asm
                    > USED AT LINE 1354 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
NESTING3:           08F7 DEFINED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
NESTING4:           0902 DEFINED AT LINE 1369 IN Siena.asm
                    > USED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
STRDEF:             0904 DEFINED AT LINE 1374 IN Siena.asm
                    > USED AT LINE 450 IN Siena.asm
STRDEF1:            090C DEFINED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
STRDEF2:            090F DEFINED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 1378 IN Siena.asm
CHAR:               091E DEFINED AT LINE 1393 IN Siena.asm
                    > USED AT LINE 471 IN Siena.asm
CHAR1:              0921 DEFINED AT LINE 1395 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
CHAR2:              092D DEFINED AT LINE 1404 IN Siena.asm
                    > USED AT LINE 1401 IN Siena.asm
CHAR3:              0930 DEFINED AT LINE 1407 IN Siena.asm
                    > USED AT LINE 1399 IN Siena.asm
NEWADD2:            0934 DEFINED AT LINE 1412 IN Siena.asm
                    > USED AT LINE 452 IN Siena.asm
XCALL:              0952 DEFINED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 892 IN Siena.asm
ENTER:              0952 DEFINED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 370 IN Siena.asm
                    > USED AT LINE 41
GO:                 0952 DEFINED AT LINE 1436 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
GO1:                0953 DEFINED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 561 IN Siena.asm
GO2:                0957 DEFINED AT LINE 1442 IN Siena.asm
GO3:                0965 DEFINED AT LINE 1451 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
LAMBDA:             0968 DEFINED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 454 IN Siena.asm
LAMBDA1:            096F DEFINED AT LINE 1459 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
                    > USED AT LINE 1483 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
LAMBDA2:            0993 DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1465 IN Siena.asm
                    > USED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
                    > USED AT LINE 1473 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
LAMBDAEND:          09A3 DEFINED AT LINE 1490 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
ARG:                09B8 DEFINED AT LINE 1505 IN Siena.asm
                    > USED AT LINE 448 IN Siena.asm
EXIT:               09D4 DEFINED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 586 IN Siena.asm
IN:                 09E9 DEFINED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 953 IN Siena.asm
IN1:                09EB DEFINED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1554 IN Siena.asm
IN2:                09F5 DEFINED AT LINE 1556 IN Siena.asm
                    > USED AT LINE 1552 IN Siena.asm
IN3:                09FB DEFINED AT LINE 1560 IN Siena.asm
                    > USED AT LINE 1558 IN Siena.asm
BLOCK:              09FF DEFINED AT LINE 1564 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
BLOCK1:             0A03 DEFINED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1586 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
                    > USED AT LINE 1592 IN Siena.asm
BLOCK2:             0A25 DEFINED AT LINE 1587 IN Siena.asm
                    > USED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
                    > USED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1578 IN Siena.asm
                    > USED AT LINE 1580 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1584 IN Siena.asm
BLOCKEND:           0A32 DEFINED AT LINE 1596 IN Siena.asm
                    > USED AT LINE 469 IN Siena.asm
IF:                 0A47 DEFINED AT LINE 1611 IN Siena.asm
                    > USED AT LINE 948 IN Siena.asm
IF2:                0A51 DEFINED AT LINE 1619 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
CASE:               0A67 DEFINED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 335 IN Siena.asm
                    > USED AT LINE 377 IN Siena.asm
                    > USED AT LINE 386 IN Siena.asm
                    > USED AT LINE 403 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 1284 IN Siena.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 40 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
                    > USED AT LINE 315 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
                    > USED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 39
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
OPCODES:            1A00 DEFINED AT LINE 12 IN ram.asm
CTRLCODES:          1A80 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 361 IN Siena.asm
ALTCODES:           1A80 DEFINED AT LINE 15 IN ram.asm
MINTVARS:           1B00 DEFINED AT LINE 19 IN ram.asm
VLOOPSP:            1B30 DEFINED AT LINE 21 IN ram.asm
VBYTEMODE:          1B32 DEFINED AT LINE 22 IN ram.asm
TBPTR:              1B34 DEFINED AT LINE 23 IN ram.asm
RST08:              1B36 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B38 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B3A DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3C DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3E DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B40 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B42 DEFINED AT LINE 31 IN ram.asm
INTVEC:             1B44 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B46 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B48 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B4A DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            1B80 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1286 IN Siena.asm
VS0:                1B80 DEFINED AT LINE 40 IN ram.asm
VTIBPTR:            1B84 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 329 IN Siena.asm
                    > USED AT LINE 360 IN Siena.asm
                    > USED AT LINE 373 IN Siena.asm
                    > USED AT LINE 402 IN Siena.asm
VLASTDEF:           1B88 DEFINED AT LINE 44 IN ram.asm
VHEAPPTR:           1B8E DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1390 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1487 IN Siena.asm
DATA:               1BC0 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 1290 IN Siena.asm
                    > USED AT LINE 1320 IN Siena.asm
HEAP:               1C28 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 47 IN Siena.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2146S43:  407B DEFINED AT LINE 34
                    > USED AT LINE 10
