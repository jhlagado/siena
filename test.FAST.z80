    ; .engine mycomputer

    .include "constants.asm"
    .include "test.fast.mac.asm"
    
    .include "IOSerial.asm"
    
    ld SP,DSTACK
    call init
    jp testsStart
    
    .include "Siena.asm"
    .include "ram.asm"

base:   .set 37

    .org $4000
testsStart:
    ld hl,0
    ld de,1
    add hl,de
    ld de,hl                            ; hl *= 193 (11000001)
    add hl,hl                           ; shift left
    add hl,de                           ; add
    add hl,hl                           ; shift left
    add hl,hl                           ; shift left
    add hl,hl                           ; shift left
    add hl,hl                           ; shift left
    add hl,hl                           ; shift left
    add hl,hl                           ; shift left
    add hl,de                           ; add


    test "'hello' hash", $7f54
    ; test ":hello", $7f54
    ; test ":hello 2 def", TRUE
    ; test ":hello 2 def :hello addr", 2
    ; test ":hello 2 def :there 3 def :hello addr :there addr +", 5

    ; test "10 sqrt", 3
    ; test "10 sqrt frac", 1
    ; test "7 3 /", 2
    ; test "7 3 / frac", 1
    ; test "1 2 +", 3

    ; test ":h {1} def :h addr exec", 1

    ; test "by [`A` `B` `C`]", 0
    ; test "by [`A` `B` `C`] 1 ge", 'B'
    ; test "by [`A` `B` `C`] 1 `Z` se 1 ge", 'Z'
    
    ; test "wo [10 20 30] 1 ge", 10
    ; test "wo [10 20 30] 1 50 set 1 get", 50
    
    ; test "1 2 +", 3
    ; test "4 1 2 +", 3
    ; test "1", 1
    ; test "2", 2
    ; test "``", 0
    ; test "`a`", $61
    ; test "`\\``", $60
    ; test "`b` 'cba' in", -1
    ; test "`x` 'cba' in", 0
    ; test "5 0 (1) if", 5
    ; test "0 (1) (2) ife", 2
    ; test "5 -1 (1) if", 1
    ; test "-1 (1) (2) ife", 1
    ; test "9 sw (1) (5) ca", 5
    ; test "0 sw (1) ca", 1
    ; test "1 sw (1) (2) (3) ca", 2
    ; test "5 -1 (2) if", 2
    ; test "5 0 (2) if", 5
    ; test "5 0 (0 (2) if) if", 5
    ; test "5 0 (-1 (2) if) if", 5
    ; test "5 -1 (2) if", 2
    ; test "5 -1 (-1 (2) if) if", 2
    ; test "(1) ex", 1
    ; test "2 ($1) ex", 2
    ; test "2 4 ($2) ex", 4
    ; test "((1) ex) ex", 1
    ; test "5 (-1 ($1) if) ex", 5



    ; test "'A' @", 65

    ; test "1", 1
    ; test "0", 0
    ; test "10", 10
    ; test "123", 123
    ; test "$10", $10
    ; test "$FF", $FF
    ; test "2 3 =", 0
    ; test "3 3 =", 1
    ; test "2 3 <", 1
    ; test "3 3 <", 0
    ; test "3 3 >", 0
    ; test "4 3 >", 1
    ; test "1 2 +", 3
    ; test "123 456 +", 123+456
    ; test "64 128 +", 64+128
    ; test "5 3 -", 2
    ; test "3 5 &", 1
    ; test "3 5 |", 7
    ; test "2 3 *", 6
    ; test "1 2 3 + *", 5
    
    ; ; test "1 2 3 ' +", 3
    ; ; test "1_ 2 +",1
    ; ; test "1_ 1 +",0
    ; ; call enter
    ; ;     .cstr "1 3",$22,"+"
    ; ; expect "1 3 DUP +", 6
    
    ; ; test "5 2/'", 2
    ; ; test "3 5$ -", 2
    ; ; test "5 2/$ '", 1
    ; ; test "2 3%++", 7
    ; ; test "1 2 3~''", 2
    ; ; test "1 2 3~+*", 8
    ; ; test "2a!a@",2
    ; ; test "3x! 1 x@+x! x@", 4
    ; ; test "3x! 1_ x@+x! x@", 2



    ; ; test "1{", 2
    ; ; test "1}", 0
    ; ; test "2}", 1
    ; ; test "10 11 12\\#3$ '$ '$ '", 4
    ; ; test "(2) \\^", 2
    ; ; test ":X1; X", 1
    ; ; test ":A100;A", 100
    ; ; test ":Aa!; 3A a@", 3
    ; ; test ":Aa!;:Ba@;4AB", 4
    ; ; test "[]$ '", 0
    ; ; test "[3]$ '", 1
    ; ; test "[3]'@", 3
    ; ; test "[1 2 3]'@", 1
    ; ; test "[1 2 3]'2+@", 2
    ; ; test "\\h@[1]''\\h@$-", 2
    ; ; test "\\h@[1 2 3]''\\h@$-", 6
    ; ; test "\\[]$ '", 0
    ; ; test "\\[3]'\\@", 3
    ; ; test "\\[3]$ '", 1
    ; ; test "\\[1 2 3]'\\@", 1
    ; ; test "\\[1 2 3]'1+\\@", 2
    ; ; test "\\h@\\[1 2 3]''\\h@$-", 3
    ; ; test "\\h@\\[1]''\\h@$-", 1
    ; ; test "\\`A`\\@",65
    ; ; test "0 0(1+)", 0
    ; ; test "0 1(1+)", 1
    ; ; test "0 2(1+)", 2
    ; ; test "0 1(0(1+))", 0
    ; ; test "0 1(1(1+))", 1
    ; ; test "0 2(1(1+))", 2
    ; ; test "0 2(2(1+))", 4
    ; ; test "0 1(\\i@+)", 0
    ; ; test "0 2(\\i@+)", 1
    ; ; test "0 3(\\i@+)", 3
    ; ; test "0 2(2(\\i@ \\i6+@ ++))", 4
    ; ; test "0t! 10(1 t@+t!) t@",10
    ; ; test "0(100)(200)",200
    ; ; test "1(100)(200)",100
    ; ; test "0t! 10(\\i@ 4>\\~ \\i@ 1 t@+t!) t@",5
    ; ; test "0t! [1 2 3] $ a! ( a@ \\i@ {+ @ t@+t! ) t@", 6
    ; ; test ":X10;\\0X", 10
    ; ; test "2 \\1x! \\1x@", 2

    call printStr
    .cstr "Done!"
    HALT
    