0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 E2 09               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Siena programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2022
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                             ; 
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                UNUSED:   EQU   $ff   
00C6                NUL:      EQU   0   
00C6                ETX:      EQU   3   
00C6                ESC:      EQU   27   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1
0202   00                     DB   lsb(EMPTY)   ; ^B  2
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4
0205   00                     DB   lsb(EMPTY)   ; ^E  5
0206   00                     DB   lsb(EMPTY)   ; ^F  6
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11
020C   00                     DB   lsb(EMPTY)   ; ^L 12
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14
020F   00                     DB   lsb(EMPTY)   ; ^O 15
0210   00                     DB   lsb(EMPTY)   ; ^P 16
0211   00                     DB   lsb(EMPTY)   ; ^Q
0212   00                     DB   lsb(EMPTY)   ; ^R
0213   00                     DB   lsb(EMPTY)   ; ^S
0214   00                     DB   lsb(EMPTY)   ; ^T
0215   00                     DB   lsb(EMPTY)   ; ^U
0216   00                     DB   lsb(EMPTY)   ; ^V
0217   00                     DB   lsb(EMPTY)   ; ^W
0218   00                     DB   lsb(EMPTY)   ; ^X
0219   00                     DB   lsb(EMPTY)   ; ^Y
021A   00                     DB   lsb(EMPTY)   ; ^Z
021B   00                     DB   lsb(EMPTY)   ; ^[
021C   00                     DB   lsb(EMPTY)   ; ^\
021D   00                     DB   lsb(EMPTY)   ; ^]
021E   00                     DB   lsb(EMPTY)   ; ^^
021F   00                     DB   lsb(EMPTY)   ; ^_
0220                OPCODES:      ; still available " , ?
0220   DC                     DB   lsb(nop_)   ; SP
0221   52                     DB   lsb(store_)   ; !
0222   DC                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   36                     DB   lsb(index_)   ; %
0226   74                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(strDef_)   ; '
0228   5F                     DB   lsb(block_)   ; (
0229   62                     DB   lsb(blockend_)   ; )
022A   A3                     DB   lsb(mul_)   ; *
022B   96                     DB   lsb(add_)   ; +
022C   DC                     DB   lsb(nop_)   ; ,
022D   A6                     DB   lsb(sub_)   ; -
022E   0C                     DB   lsb(dot_)   ; .
022F   C4                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   71                     DB   lsb(symbol_)   ; :
023B   D3                     DB   lsb(comment_)   ; ;
023C   B7                     DB   lsb(lt_)   ; <
023D   AE                     DB   lsb(eq_)   ; =
023E   B3                     DB   lsb(gt_)   ; >
023F   DC                     DB   lsb(nop_)   ; ?
0240   43                     DB   lsb(fetch_)   ; @
0241   6E                     DB   lsb(ident_)   ; A
0242   6E                     DB   lsb(ident_)   ; B
0243   6E                     DB   lsb(ident_)   ; C
0244   6E                     DB   lsb(ident_)   ; D
0245   6E                     DB   lsb(ident_)   ; E
0246   6E                     DB   lsb(ident_)   ; F
0247   6E                     DB   lsb(ident_)   ; G
0248   6E                     DB   lsb(ident_)   ; h
0249   6E                     DB   lsb(ident_)   ; I
024A   6E                     DB   lsb(ident_)   ; J
024B   6E                     DB   lsb(ident_)   ; K
024C   6E                     DB   lsb(ident_)   ; L
024D   6E                     DB   lsb(ident_)   ; M
024E   6E                     DB   lsb(ident_)   ; N
024F   6E                     DB   lsb(ident_)   ; O
0250   6E                     DB   lsb(ident_)   ; p
0251   6E                     DB   lsb(ident_)   ; Q
0252   6E                     DB   lsb(ident_)   ; R
0253   6E                     DB   lsb(ident_)   ; S
0254   6E                     DB   lsb(ident_)   ; T
0255   6E                     DB   lsb(ident_)   ; U
0256   6E                     DB   lsb(ident_)   ; V
0257   6E                     DB   lsb(ident_)   ; W
0258   6E                     DB   lsb(ident_)   ; X
0259   6E                     DB   lsb(ident_)   ; Y
025A   6E                     DB   lsb(ident_)   ; Z
025B   68                     DB   lsb(array_)   ; [
025C   DC                     DB   lsb(nop_)   ; \
025D   6B                     DB   lsb(arrayEnd_)   ; ]
025E   88                     DB   lsb(xor_)   ; ^
025F   6E                     DB   lsb(ident_)   ; _
0260   65                     DB   lsb(char_)   ; `    	
0261   6E                     DB   lsb(ident_)   ; a
0262   6E                     DB   lsb(ident_)   ; b
0263   6E                     DB   lsb(ident_)   ; c
0264   6E                     DB   lsb(ident_)   ; d
0265   6E                     DB   lsb(ident_)   ; e
0266   6E                     DB   lsb(ident_)   ; f
0267   6E                     DB   lsb(ident_)   ; g
0268   6E                     DB   lsb(ident_)   ; h
0269   6E                     DB   lsb(ident_)   ; i
026A   6E                     DB   lsb(ident_)   ; j
026B   6E                     DB   lsb(ident_)   ; k
026C   6E                     DB   lsb(ident_)   ; l
026D   6E                     DB   lsb(ident_)   ; m
026E   6E                     DB   lsb(ident_)   ; n
026F   6E                     DB   lsb(ident_)   ; o
0270   6E                     DB   lsb(ident_)   ; p
0271   6E                     DB   lsb(ident_)   ; q
0272   6E                     DB   lsb(ident_)   ; r
0273   6E                     DB   lsb(ident_)   ; s
0274   6E                     DB   lsb(ident_)   ; t
0275   6E                     DB   lsb(ident_)   ; u
0276   6E                     DB   lsb(ident_)   ; v
0277   6E                     DB   lsb(ident_)   ; w
0278   6E                     DB   lsb(ident_)   ; x
0279   6E                     DB   lsb(ident_)   ; y
027A   6E                     DB   lsb(ident_)   ; z
027B   DC                     DB   lsb(nop_)   ; {
027C   7F                     DB   lsb(or_)   ; |
027D   DC                     DB   lsb(nop_)   ; }
027E   91                     DB   lsb(inv_)   ; ~
027F   DC                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1D 04               JP   num   
0303                HEXNUM_:      
0303   C3 4D 04               JP   hexnum   
0306                ARG_:        
0306   C3 E0 04               JP   arg   
0309                STRDEF_:      
0309   C3 6A 04               JP   strDef   
030C                             ; lambda_:
030C                             ;     jp lambda
030C                             ; lambdaEnd_:
030C                             ;     jp lambdaEnd
030C                DOT_:        
030C   E1                     POP   hl   
030D   03                     INC   bc   
030E   0A                     LD   a,(bc)   
030F   FE 68                  CP   "h"   
0311   20 05                  JR   nz,dot1   
0313   CD 0D 08               CALL   prthex   
0316   18 17                  JR   dot4   
0318                DOT1:        
0318   FE 73                  CP   "s"   
031A   20 05                  JR   nz,dot2   
031C   CD 30 08               CALL   prtstr   
031F   18 0E                  JR   dot4   
0321                DOT2:        
0321   FE 63                  CP   "c"   
0323   20 06                  JR   nz,dot3   
0325   7D                     LD   a,l   
0326   CD 85 00               CALL   putchar   
0329   18 04                  JR   dot4   
032B                DOT3:        
032B   0B                     DEC   bc   
032C   CD C5 07               CALL   prtdec   
032F                DOT4:        
032F   3E 20                  LD   a," "   
0331   CD 85 00               CALL   putchar   
0334   DD E9                  JP   (ix)   
0336                             ; addr index -- addr2
0336                INDEX_:      
0336   E1                     POP   hl   ; hl = index
0337   D1                     POP   de   ; de = addr
0338   3A 80 1B               LD   a,(vDataWidth)   
033B   3D                     DEC   a   
033C   28 01                  JR   z,index1   
033E   29                     ADD   hl,hl   ; if data width = 2 then double
033F                INDEX1:      
033F   19                     ADD   hl,de   ; add addr
0340   E5                     PUSH   hl   
0341   DD E9                  JP   (ix)   
0343                             ; addr -- value
0343                FETCH_:      
0343   E1                     POP   hl   
0344   16 00                  LD   d,0   
0346   5E                     LD   e,(hl)   
0347   3A 80 1B               LD   a,(vDataWidth)   
034A   3D                     DEC   a   
034B   28 02                  JR   z,fetch1   
034D   23                     INC   hl   
034E   56                     LD   d,(hl)   
034F                FETCH1:      
034F   D5                     PUSH   de   
0350   DD E9                  JP   (ix)   
0352                             ; value addr --
0352                STORE_:      
0352   E1                     POP   hl   
0353   D1                     POP   de   
0354   73                     LD   (hl),e   
0355   3A 80 1B               LD   a,(vDataWidth)   
0358   3D                     DEC   a   
0359   28 02                  JR   z,store1   
035B   23                     INC   hl   
035C   72                     LD   (hl),d   
035D                STORE1:      
035D   DD E9                  JP   (ix)   
035F                BLOCK_:      
035F   C3 98 04               JP   block   
0362                BLOCKEND_:      
0362   C3 CC 04               JP   blockend   
0365                CHAR_:       
0365   C3 83 04               JP   char   
0368                ARRAY_:      
0368   C3 C4 05               JP   array   
036B                ARRAYEND_:      
036B   C3 D6 05               JP   arrayEnd   
036E                IDENT_:      
036E   C3 7F 06               JP   ident   
0371                SYMBOL_:      
0371   C3 58 06               JP   symbol   
0374                AND_:        
0374   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0375   E1                     POP   hl   
0376   7B                     LD   a,e   
0377   A5                     AND   l   
0378   6F                     LD   l,a   
0379   7A                     LD   a,d   
037A   A4                     AND   h   
037B                AND1:        
037B   67                     LD   h,a   
037C   E5                     PUSH   hl   
037D   DD E9                  JP   (ix)   
037F                OR_:         
037F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0380   E1                     POP   hl   
0381   7B                     LD   a,e   
0382   B5                     OR   l   
0383   6F                     LD   l,a   
0384   7A                     LD   a,d   
0385   B4                     OR   h   
0386   18 F3                  JR   and1   
0388                XOR_:        
0388   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0389                XOR1:        
0389   E1                     POP   hl   
038A   7B                     LD   a,e   
038B   AD                     XOR   l   
038C   6F                     LD   l,a   
038D   7A                     LD   a,d   
038E   AC                     XOR   h   
038F   18 EA                  JR   and1   
0391                INV_:        ; Bitwise INVert the top member of the stack
0391   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0394   18 F3                  JR   xor1   
0396                ADD_:        ; add the top 2 members of the stack
0396   D1                     POP   de   
0397   E1                     POP   hl   
0398   19                     ADD   hl,de   
0399   E5                     PUSH   hl   
039A   DD E9                  JP   (ix)   
039C                HDOT_:       ; print hexadecimal
039C   E1                     POP   hl   
039D   CD 0D 08               CALL   prthex   
03A0   C3 2B 03               JP   dot3   
03A3                MUL_:        
03A3   C3 01 04               JP   mul   
03A6                SUB_:        ; Subtract the value 2nd on stack from top of stack
03A6   D1                     POP   de   
03A7   E1                     POP   hl   ; Entry point for INVert
03A8                SUB2:        
03A8   B7                     OR   a   ; Entry point for NEGate
03A9   ED 52                  SBC   hl,de   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                EQ_:         
03AE   E1                     POP   hl   
03AF   D1                     POP   de   
03B0   C3 D8 06               JP   equals   
03B3                GT_:         
03B3   D1                     POP   de   
03B4   E1                     POP   hl   
03B5   18 02                  JR   lt1   
03B7                LT_:         
03B7   E1                     POP   hl   
03B8   D1                     POP   de   
03B9                LT1:         
03B9   03                     INC   bc   
03BA   0A                     LD   a,(bc)   
03BB   FE 3D                  CP   "="   
03BD   CA E0 06               JP   z,lessthaneq   
03C0   0B                     DEC   bc   
03C1   C3 E5 06               JP   lessthan   
03C4                DIV_:        
03C4   D1                     POP   de   ; get first value
03C5   E1                     POP   hl   ; get 2nd value
03C6   C5                     PUSH   bc   ; preserve the IP
03C7   44 4D                  LD   bc,hl   
03C9   CD 82 07               CALL   divide   
03CC   22 7E 1B               LD   (vFrac),hl   
03CF   C1                     POP   bc   
03D0   D5                     PUSH   de   ; push result
03D1   DD E9                  JP   (ix)   
03D3                COMMENT_:      
03D3   03                     INC   bc   ; point to next char
03D4   0A                     LD   a,(bc)   
03D5   FE 20                  CP   " "   ; terminate on any char less than SP
03D7   30 FA                  JR   nc,comment_   
03D9   0B                     DEC   bc   
03DA   DD E9                  JP   (ix)   
03DC                NOP_:        
03DC   DD E9                  JP   (ix)   
03DE                             ;*******************************************************************
03DE                             ; word operators
03DE                             ;*******************************************************************
03DE                             ; shl
03DE                             ; value count -- value2          shift left count places
03DE                SHL:         
03DE   50 59                  LD   de,bc   ; save IP
03E0   C1                     POP   bc   ; bc = count
03E1   41                     LD   b,c   ; b = loop counter
03E2   E1                     POP   hl   
03E3   04                     INC   b   ; test for counter=0 case
03E4   18 01                  JR   shl2   
03E6                SHL1:        
03E6   29                     ADD   hl,hl   ; left shift hl
03E7                SHL2:        
03E7   10 FD                  DJNZ   shl1   
03E9   E5                     PUSH   hl   
03EA   42 4B                  LD   bc,de   ; restore IP
03EC   DD E9                  JP   (ix)   
03EE                             ; shr
03EE                             ; value count -- value2          shift left count places
03EE                SHR:         
03EE   50 59                  LD   de,bc   ; save IP
03F0   C1                     POP   bc   ; bc = count
03F1   41                     LD   b,c   ; b = loop counter
03F2   E1                     POP   hl   
03F3   04                     INC   b   ; test for counter=0 case
03F4   18 04                  JR   shr2   
03F6                SHR1:        
03F6   CB 3C                  SRL   h   ; right shift hl
03F8   CB 1D                  RR   l   
03FA                SHR2:        
03FA   10 FA                  DJNZ   shr1   
03FC   E5                     PUSH   hl   
03FD   42 4B                  LD   bc,de   ; restore IP
03FF   DD E9                  JP   (ix)   
0401                MUL:         ;=19
0401   D1                     POP   de   ; get first value
0402   E1                     POP   hl   
0403   C5                     PUSH   bc   ; Preserve the IP
0404   44                     LD   b,h   ; bc = 2nd value
0405   4D                     LD   c,l   
0406   21 00 00               LD   hl,0   
0409   3E 10                  LD   a,16   
040B                MUL2:        
040B   29                     ADD   hl,hl   
040C   CB 13                  RL   e   
040E   CB 12                  RL   d   
0410   30 04                  JR   nc,$+6   
0412   09                     ADD   hl,bc   
0413   30 01                  JR   nc,$+3   
0415   13                     INC   de   
0416   3D                     DEC   a   
0417   20 F2                  JR   nz,mul2   
0419   C1                     POP   bc   ; Restore the IP
041A   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
041B   DD E9                  JP   (ix)   
041D                NUM:         
041D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0420   0A                     LD   a,(bc)   ; Get numeral or -
0421   FE 2D                  CP   "-"   
0423   20 01                  JR   nz,num0   
0425   03                     INC   bc   ; move to next char, no flags affected
0426                NUM0:        
0426   08                     EX   af,af'   ; save zero flag = 0 for later
0427                NUM1:        
0427   0A                     LD   a,(bc)   ; read digit
0428   D6 30                  SUB   "0"   ; less than 0?
042A   38 13                  JR   c,num2   ; not a digit, exit loop
042C   FE 0A                  CP   10   ; greater that 9?
042E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0430   03                     INC   bc   ; inc IP
0431   54 5D                  LD   de,hl   ; multiply hl * 10
0433   29                     ADD   hl,hl   
0434   29                     ADD   hl,hl   
0435   19                     ADD   hl,de   
0436   29                     ADD   hl,hl   
0437   85                     ADD   a,l   ; add digit in a to hl
0438   6F                     LD   l,a   
0439   3E 00                  LD   a,0   
043B   8C                     ADC   a,h   
043C   67                     LD   h,a   
043D   18 E8                  JR   num1   
043F                NUM2:        
043F   0B                     DEC   bc   
0440   08                     EX   af,af'   ; restore zero flag
0441   20 07                  JR   nz,num3   
0443   EB                     EX   de,hl   ; negate the value of hl
0444   21 00 00               LD   hl,0   
0447   B7                     OR   a   ; jump to sub2
0448   ED 52                  SBC   hl,de   
044A                NUM3:        
044A   E5                     PUSH   hl   ; Put the number on the stack
044B   DD E9                  JP   (ix)   ; and process the next character
044D                HEXNUM:      ; 
044D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0450                HEXNUM1:      
0450   03                     INC   bc   
0451   0A                     LD   a,(bc)   ; Get the character which is a numeral
0452   CB 77                  BIT   6,a   ; is it uppercase alpha?
0454   28 02                  JR   z,hexnum2   ; no a decimal
0456   D6 07                  SUB   7   ; sub 7  to make $a - $F
0458                HEXNUM2:      
0458   D6 30                  SUB   $30   ; Form decimal digit
045A   DA 3F 04               JP   c,num2   
045D   FE 10                  CP   $0F+1   
045F   D2 3F 04               JP   nc,num2   
0462   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0463   29                     ADD   hl,hl   ; 4X
0464   29                     ADD   hl,hl   ; 8X
0465   29                     ADD   hl,hl   ; 16X
0466   85                     ADD   a,l   ; add into bottom of hl
0467   6F                     LD   l,a   ; 
0468   18 E6                  JR   hexnum1   
046A                             ; 
046A                STRDEF:      
046A   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
046E   D5                     PUSH   de   ; save start of string
046F   03                     INC   bc   ; point to next char
0470   18 03                  JR   strDef2   
0472                STRDEF1:      
0472   12                     LD   (de),a   
0473   13                     INC   de   ; increase count
0474   03                     INC   bc   ; point to next char
0475                STRDEF2:      
0475   0A                     LD   a,(bc)   
0476   FE 27                  CP   "'"   ; ' is the string terminator
0478   20 F8                  JR   nz,strDef1   
047A   AF                     XOR   a   ; write NUL to terminate string
047B   12                     LD   (de),a   
047C   13                     INC   de   
047D   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0481   DD E9                  JP   (ix)   
0483                CHAR:        
0483   21 00 00               LD   hl,0   ; if `` is empty
0486                CHAR1:       
0486   03                     INC   bc   ; point to next char
0487   0A                     LD   a,(bc)   
0488   FE 60                  CP   "`"   ; ` is the string terminator
048A   28 09                  JR   z,char3   
048C   FE 5C                  CP   $5c   ; \ is the escape
048E   20 02                  JR   nz,char2   
0490   03                     INC   bc   
0491   0A                     LD   a,(bc)   
0492                CHAR2:       
0492   6F                     LD   l,a   
0493   18 F1                  JR   char1   
0495                CHAR3:       
0495   E5                     PUSH   hl   
0496                             ; dec bc
0496   DD E9                  JP   (ix)   
0498                             ; lambda:
0498                             ;     inc bc
0498                             ;     ld hl,(vHeapPtr)            ; start of lambda defintion
0498                             ;     push hl
0498                             ;     ld d,1                      ; nesting: count first parenthesis
0498                             ; lambda1:                        ; Skip to end of definition
0498                             ;     ld a,(bc)                   ; Get the next character
0498                             ;     inc bc                      ; Point to next character
0498                             ;     ld (hl),a
0498                             ;     inc hl
0498                             ;     cp "'"
0498                             ;     jr z,lambda2
0498                             ;     cp "("
0498                             ;     jr z,lambda2
0498                             ;     cp ")"
0498                             ;     jr z,lambda2
0498                             ;     cp "{"
0498                             ;     jr z,lambda2
0498                             ;     cp "}"                      ; Is it the end of the definition?
0498                             ;     jr z,lambda2
0498                             ;     cp "["
0498                             ;     jr z,lambda2
0498                             ;     cp "]"
0498                             ;     jr z,lambda2
0498                             ;     cp "`"
0498                             ;     jr nz,lambda1
0498                             ; lambda2:
0498                             ;     inc d
0498                             ;     bit 0,d                     ; balanced?
0498                             ;     jr nz, lambda1              ; not balanced, get the next element
0498                             ;     cp "}"                      ; Is it the end of the definition?
0498                             ;     jr nz, lambda1              ; get the next element
0498                             ;     dec bc
0498                             ;     ld (vHeapPtr),hl            ; bump heap ptr to after definiton
0498                             ;     jp (ix)
0498                             ; lambdaEnd:
0498                             ;     pop hl                      ; hl = last result
0498                             ;     ld d,iyh                    ; de = BP
0498                             ;     ld e,iyl
0498                             ;     ex de,hl                    ; hl = BP, de = result
0498                             ;     ld sp,hl                    ; sp = BP
0498                             ;     pop hl                      ; hl = old BP
0498                             ;     pop bc                      ; pop scope ptr (discard)
0498                             ;     pop bc                      ; bc = IP
0498                             ;     ld sp,hl                    ; sp = old BP
0498                             ;     ld iy,0                     ; iy = sp = old BP
0498                             ;     add iy,sp
0498                             ;     push de                     ; push result
0498                             ;     jp (ix)
0498                BLOCK:       
0498   03                     INC   bc   
0499   C5                     PUSH   bc   ; return first opcode of block
049A   16 01                  LD   d,1   ; nesting: count first parenthesis
049C                BLOCK1:      ; Skip to end of definition
049C   0A                     LD   a,(bc)   ; Get the next character
049D   03                     INC   bc   ; Point to next character
049E   FE 27                  CP   "'"   
04A0   28 22                  JR   z,block4   
04A2   FE 60                  CP   "`"   
04A4   28 1E                  JR   z,block4   
04A6   FE 28                  CP   "("   
04A8   28 17                  JR   z,block3   
04AA   FE 7B                  CP   "{"   
04AC   28 13                  JR   z,block3   
04AE   FE 5B                  CP   "["   
04B0   28 0F                  JR   z,block3   
04B2   FE 29                  CP   ")"   
04B4   28 08                  JR   z,block2   
04B6   FE 7D                  CP   "}"   
04B8   28 04                  JR   z,block2   
04BA   FE 5D                  CP   "]"   
04BC   20 DE                  JR   nz,block1   
04BE                BLOCK2:      
04BE   15                     DEC   d   
04BF   18 06                  JR   block5   
04C1                BLOCK3:      
04C1   14                     INC   d   
04C2   18 D8                  JR   block1   
04C4                BLOCK4:      
04C4   3E 80                  LD   a,$80   
04C6   82                     ADD   a,d   
04C7                BLOCK5:      
04C7   20 D3                  JR   nz,block1   ; get the next element
04C9   0B                     DEC   bc   ; balanced, exit
04CA   DD E9                  JP   (ix)   
04CC                BLOCKEND:      
04CC   E1                     POP   hl   ; hl = last result
04CD   FD 54                  LD   d,iyh   ; de = BP
04CF   FD 5D                  LD   e,iyl   
04D1   EB                     EX   de,hl   ; hl = BP, de = result
04D2   F9                     LD   sp,hl   ; sp = BP
04D3   E1                     POP   hl   ; hl = old BP
04D4   C1                     POP   bc   ; pop SCP (discard)
04D5   C1                     POP   bc   ; bc = IP
04D6   F9                     LD   sp,hl   ; sp = old BP
04D7   FD 21 00 00            LD   iy,0   ; iy = sp
04DB   FD 39                  ADD   iy,sp   
04DD   D5                     PUSH   de   ; push result
04DE   DD E9                  JP   (ix)   
04E0                ARG:         
04E0   03                     INC   bc   ; get next char
04E1   0A                     LD   a,(bc)   
04E2   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04E4   E6 07                  AND   $07   ; mask
04E6   87                     ADD   a,a   ; double
04E7   6F                     LD   l,a   ; hl = offset into args
04E8   26 00                  LD   h,0   
04EA   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04ED   FD 56 03               LD   d,(iy+3)   
04F0   EB                     EX   de,hl   ; hl = SCP - offset
04F1   B7                     OR   a   
04F2   ED 52                  SBC   hl,de   
04F4   2B                     DEC   hl   ; de = arg
04F5   56                     LD   d,(hl)   
04F6   2B                     DEC   hl   
04F7   5E                     LD   e,(hl)   
04F8   D5                     PUSH   de   ; push arg
04F9   DD E9                  JP   (ix)   
04FB                             ; 
04FB                             ; in:
04FB                             ;  pop hl                      ; hl = string
04FB                             ;  pop de                      ; de = char
04FB                             ; in1:
04FB                             ;  ld a,(hl)
04FB                             ;  inc hl
04FB                             ;  cp 0                        ; is end of string
04FB                             ;  jr z,in2
04FB                             ;  cp e
04FB                             ;  jr nz,in1
04FB                             ;  or a                        ; a is never 0, or a resets zero flag
04FB                             ; in2:
04FB                             ;  ld hl,0                     ; hl = result
04FB                             ;  jr z,in3
04FB                             ;  dec hl                      ; if nz de = $ffff
04FB                             ; in3:
04FB                             ;  push hl                     ; push result
04FB                             ;  jp (ix)
04FB                             ; newAdd2:
04FB                             ;  push bc                     ; push IP
04FB                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
04FB                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
04FB                             ;  push de                     ; push SCP
04FB                             ;  push iy                     ; push base pointer
04FB                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
04FB                             ;  add iy,sp                   ;
04FB                             ;  ld d,(iy-1)
04FB                             ;  ld e,(iy-2)
04FB                             ;  ld h,(iy-3)
04FB                             ;  ld l,(iy-4)
04FB                             ;  add hl,de                   ; hl = hl + de
04FB                             ;  ex de,hl                    ; de = result
04FB                             ;  pop hl                      ; hl = old BP
04FB                             ;  pop bc                      ; pop SCP (discard)
04FB                             ;  pop bc                      ; bc = IP
04FB                             ;  ld sp,hl                    ; sp = old BP
04FB                             ;  ld iy,0
04FB                             ;  add iy,sp
04FB                             ;  push de                     ; push result
04FB                             ;  jp (ix)
04FB                IF:          
04FB   11 00 00               LD   de,0   ; NUL pointer for else
04FE   18 01                  JR   ifte1   
0500                IFTE:        
0500   D1                     POP   de   ; de = else
0501                IFTE1:       
0501   E1                     POP   hl   ; hl = then
0502   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0503   23                     INC   hl   ; check for true
0504   7C                     LD   a,h   
0505   B5                     OR   l   
0506   E1                     POP   hl   ; hl = then
0507   28 01                  JR   z,ifte2   
0509   EB                     EX   de,hl   ; condition = false, hl = else
050A                IFTE2:       
050A   7C                     LD   a,h   ; check if hl is NUL
050B   B5                     OR   l   
050C   28 13                  JR   z,ifte3   
050E   C5                     PUSH   bc   ; push IP
050F   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0512   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0515   D5                     PUSH   de   ; push SCP
0516   FD E5                  PUSH   iy   ; push BP
0518   FD 21 00 00            LD   iy,0   ; iy = sp
051C   FD 39                  ADD   iy,sp   
051E   44 4D                  LD   bc,hl   ; IP = then
0520   0B                     DEC   bc   
0521                IFTE3:       
0521   DD E9                  JP   (ix)   
0523                             ; c b --
0523                             ; loops until c = 0
0523                LOOP:        
0523   D1                     POP   de   ; de = block                    c
0524   E1                     POP   hl   ; hl = condition
0525   D5                     PUSH   de   
0526   C5                     PUSH   bc   ; push IP
0527   42 4B                  LD   bc,de   ; bc = block
0529   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
052C   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
052F   D5                     PUSH   de   ; push SCP
0530   FD E5                  PUSH   iy   ; push BP
0532   FD 21 00 00            LD   iy,0   ; iy = sp
0536   FD 39                  ADD   iy,sp   
0538                LOOP1:       
0538   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0539   B4                     OR   h   
053A   28 21                  JR   z,loop3   
053C   11 52 05               LD   de,loop2-1   ; IP return address
053F   D5                     PUSH   de   
0540   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
0543   FD 56 03               LD   d,(iy+3)   
0546   D5                     PUSH   de   ; 
0547   FD E5                  PUSH   iy   ; push BP
0549   FD 21 00 00            LD   iy,0   ; iy = sp
054D   FD 39                  ADD   iy,sp   
054F   E5                     PUSH   hl   ; push condition
0550   0B                     DEC   bc   
0551   DD E9                  JP   (ix)   
0553                LOOP2:       
0553   1B                     DB   ESC   ; escape from interpreter
0554   FD 4E 06               LD   c,(iy+6)   ; bc = block
0557   FD 46 07               LD   b,(iy+7)   
055A   E1                     POP   hl   ; hl = condition
055B   18 DB                  JR   loop1   
055D                LOOP3:       
055D   FD 54                  LD   d,iyh   ; de = BP
055F   FD 5D                  LD   e,iyl   
0561   EB                     EX   de,hl   ; hl = BP, de = result
0562   F9                     LD   sp,hl   ; sp = BP
0563   E1                     POP   hl   ; hl = old BP
0564   C1                     POP   bc   ; pop SCP (discard)
0565   C1                     POP   bc   ; bc = IP
0566   F9                     LD   sp,hl   ; sp = old BP
0567   FD 21 00 00            LD   iy,0   ; iy = sp
056B   FD 39                  ADD   iy,sp   
056D   DD 21 52 0A            LD   ix,next   
0571   DD E9                  JP   (ix)   
0573                             ; xxxblockend:
0573                             ;     pop hl                      ; hl = last result
0573                             ;     ld d,iyh                    ; de = BP
0573                             ;     ld e,iyl
0573                             ;     ex de,hl                    ; hl = BP, de = result
0573                             ;     ld sp,hl                    ; sp = BP
0573                             ;     pop hl                      ; hl = old BP
0573                             ;     pop bc                      ; pop SCP (discard)
0573                             ;     pop bc                      ; bc = IP
0573                             ;     ld sp,hl                    ; sp = old BP
0573                             ;     ld iy,0                     ; iy = sp
0573                             ;     add iy,sp
0573                             ;     push de                     ; push result
0573                             ;     jp (ix)
0573                SWITCH:      
0573   E1                     POP   hl   ; get selector from stack
0574   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
0575   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0578   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
057B   D5                     PUSH   de   ; push SCP
057C   FD E5                  PUSH   iy   ; push BP
057E   FD 21 00 00            LD   iy,0   ; BP = SP
0582   FD 39                  ADD   iy,sp   
0584   E5                     PUSH   hl   ; push selector as first arg of new frame
0585   DD E9                  JP   (ix)   
0587                CASE:        
0587   FD 66 FF               LD   h,(iy-1)   ; hl = selector
058A   FD 6E FE               LD   l,(iy-2)   
058D   23                     INC   hl   ; hl -= 1 index from second arg
058E   29                     ADD   hl,hl   ; hl *= 2 word offset
058F   FD 54                  LD   d,iyh   ; hl = BP, de = offset
0591   FD 5D                  LD   e,iyl   
0593   EB                     EX   de,hl   
0594   B7                     OR   a   ; hl = BP - offset
0595   ED 52                  SBC   hl,de   
0597   54 5D                  LD   de,hl   ; save arg ptr
0599   2B                     DEC   hl   ; hl += 2
059A   2B                     DEC   hl   
059B   B7                     OR   a   ; arg ptr - stack pointer
059C   ED 72                  SBC   hl,sp   
059E   30 03                  JR   nc,case0   
05A0   D1                     POP   de   ; pop last arg
05A1   18 05                  JR   case1   
05A3                CASE0:       
05A3   EB                     EX   de,hl   
05A4   2B                     DEC   hl   ; de = arg
05A5   56                     LD   d,(hl)   
05A6   2B                     DEC   hl   
05A7   5E                     LD   e,(hl)   
05A8                CASE1:       
05A8   7A                     LD   a,d   ; is arg == NUL ? then skip
05A9   B3                     OR   e   
05AA   28 09                  JR   z,case2   
05AC   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05AF   FD 70 05               LD   (iy+5),b   
05B2   42 4B                  LD   bc,de   ; IP = arg
05B4   0B                     DEC   bc   
05B5                CASE2:       
05B5   DD E9                  JP   (ix)   
05B7                WORDS:       
05B7   21 02 00               LD   hl,2   
05BA   18 03                  JR   bytes1   
05BC                BYTES:       
05BC   21 01 00               LD   hl,1   
05BF                BYTES1:      
05BF   22 80 1B               LD   (vDataWidth),hl   
05C2   DD E9                  JP   (ix)   
05C4                ARRAY:       
05C4   C5                     PUSH   bc   ; create stack frame, push IP
05C5   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05C8   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05CB   D5                     PUSH   de   ; push SCP
05CC   FD E5                  PUSH   iy   ; push BP
05CE   FD 21 00 00            LD   iy,0   ; BP = SP
05D2   FD 39                  ADD   iy,sp   
05D4   DD E9                  JP   (ix)   
05D6                ARRAYEND:      
05D6   FD 54                  LD   d,iyh   ; de = BP
05D8   FD 5D                  LD   e,iyl   
05DA   62 6B                  LD   hl,de   ; hl = de
05DC   B7                     OR   a   
05DD   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05DF   C5                     PUSH   bc   ; bc' = IP
05E0   D9                     EXX      
05E1   C1                     POP   bc   
05E2   D9                     EXX      
05E3   44 4D                  LD   bc,hl   ; bc = count
05E5   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap ptr
05E8   71                     LD   (hl),c   ; write count before array data
05E9   23                     INC   hl   
05EA   70                     LD   (hl),b   
05EB   23                     INC   hl   
05EC   E5                     PUSH   hl   ; hl = ptr to array (index 0)
05ED   D9                     EXX      
05EE   E1                     POP   hl   ; hl' = ptr to array (index 0)
05EF   D9                     EXX      
05F0   3A 80 1B               LD   a,(vDataWidth)   
05F3   FE 01                  CP   1   ; byte?
05F5   20 0D                  JR   nz,arrayEnd2   
05F7   EB                     EX   de,hl   
05F8                ARRAYEND1:      
05F8   1B                     DEC   de   
05F9   1B                     DEC   de   
05FA   1A                     LD   a,(de)   
05FB   77                     LD   (hl),a   
05FC   23                     INC   hl   
05FD   0B                     DEC   bc   
05FE   79                     LD   a,c   
05FF   B0                     OR   b   
0600   28 12                  JR   z,arrayEnd3   
0602   18 F4                  JR   arrayEnd1   
0604                ARRAYEND2:      
0604   1B                     DEC   de   
0605   1A                     LD   a,(de)   
0606   08                     EX   af,af'   
0607   1B                     DEC   de   
0608   1A                     LD   a,(de)   
0609   77                     LD   (hl),a   
060A   23                     INC   hl   
060B   08                     EX   af,af'   
060C   1A                     LD   a,(de)   
060D   77                     LD   (hl),a   
060E   23                     INC   hl   
060F   0B                     DEC   bc   
0610   79                     LD   a,c   
0611   B0                     OR   b   
0612   20 F0                  JR   nz,arrayEnd2   
0614                ARRAYEND3:      
0614   FD 54                  LD   d,iyh   ; de = BP
0616   FD 5D                  LD   e,iyl   
0618   EB                     EX   de,hl   ; hl = BP, de = result
0619   F9                     LD   sp,hl   ; sp = BP
061A   E1                     POP   hl   ; hl = old BP
061B   C1                     POP   bc   ; pop SCP (discard)
061C   C1                     POP   bc   ; bc = IP
061D   F9                     LD   sp,hl   ; sp = old BP
061E   FD 21 00 00            LD   iy,0   ; iy = sp
0622   FD 39                  ADD   iy,sp   
0624   D9                     EXX      
0625   E5                     PUSH   hl   
0626   C5                     PUSH   bc   
0627   D9                     EXX      
0628   C1                     POP   bc   
0629   DD E9                  JP   (ix)   
062B                             ; str -- num
062B                HASH:        
062B   E1                     POP   hl   
062C   C5                     PUSH   bc   
062D   44 4D                  LD   bc,hl   
062F   CD 1F 07               CALL   hashStr   
0632   C1                     POP   bc   
0633   E5                     PUSH   hl   
0634   DD E9                  JP   (ix)   
0636                             ; str addr -- bool
0636                DEF:         
0636   60 69                  LD   hl,bc   ; hl = IP
0638   D1                     POP   de   ; de = addr
0639   C1                     POP   bc   ; bc = hash
063A   E5                     PUSH   hl   
063B   CD 38 07               CALL   defineEntry   
063E   21 00 00               LD   hl,0   ; if c return TRUE
0641   30 01                  JR   nc,def1   
0643   2B                     DEC   hl   
0644                DEF1:        
0644   C1                     POP   bc   
0645   E5                     PUSH   hl   
0646   DD E9                  JP   (ix)   
0648                             ; str -- addr
0648                ADDR:        
0648   E1                     POP   hl   ; hl = hash
0649   C5                     PUSH   bc   
064A   44 4D                  LD   bc,hl   
064C   CD 5E 07               CALL   lookupEntry   
064F   38 03                  JR   c,addr1   
0651   21 00 00               LD   hl,0   
0654                ADDR1:       
0654   C1                     POP   bc   
0655   E5                     PUSH   hl   
0656   DD E9                  JP   (ix)   
0658                SYMBOL:      
0658   03                     INC   bc   
0659   11 00 1A               LD   de,PAD   
065C   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
065E   18 02                  JR   symbol1   
0660                SYMBOL0:      ; copy to PAD area
0660   03                     INC   bc   ; characters that are part of the identifier
0661   13                     INC   de   
0662                SYMBOL1:      ; 0-9 A-Z a-z _
0662   0A                     LD   a,(bc)   
0663   12                     LD   (de),a   
0664   B7                     OR   a   
0665   28 0A                  JR   z,symbol2   
0667   6F                     LD   l,a   
0668   7E                     LD   a,(hl)   
0669   FE 6E                  CP   lsb(ident_)   
066B   28 F3                  JR   z,symbol0   
066D   FE 00                  CP   lsb(num_)   
066F   28 EF                  JR   z,symbol0   
0671                SYMBOL2:      
0671   0B                     DEC   bc   
0672   AF                     XOR   a   
0673   12                     LD   (de),a   ; terminate string with NUL
0674   C5                     PUSH   bc   
0675   01 00 1A               LD   bc,PAD   
0678   CD 1F 07               CALL   hashStr   ; hl = hash
067B   C1                     POP   bc   
067C   E5                     PUSH   hl   
067D   DD E9                  JP   (ix)   
067F                IDENT:       
067F   11 00 1A               LD   de,PAD   
0682   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0684   18 02                  JR   ident1   
0686                IDENT0:      ; copy to PAD area
0686   03                     INC   bc   ; characters that are part of the identifier
0687   13                     INC   de   
0688                IDENT1:      ; 0-9 A-Z a-z _
0688   0A                     LD   a,(bc)   
0689   12                     LD   (de),a   
068A   B7                     OR   a   
068B   28 0A                  JR   z,ident2   
068D   6F                     LD   l,a   
068E   7E                     LD   a,(hl)   
068F   FE 6E                  CP   lsb(ident_)   
0691   28 F3                  JR   z,ident0   
0693   FE 00                  CP   lsb(num_)   
0695   28 EF                  JR   z,ident0   
0697                IDENT2:      
0697   0B                     DEC   bc   
0698   AF                     XOR   a   
0699   12                     LD   (de),a   ; terminate string with NUL
069A   C5                     PUSH   bc   
069B   01 00 1A               LD   bc,PAD   
069E   CD 1F 07               CALL   hashStr   ; hl = hash
06A1   44 4D                  LD   bc,hl   
06A3   CD 5E 07               CALL   lookupEntry   
06A6   C1                     POP   bc   
06A7   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06A9   DD E9                  JP   (ix)   
06AB                IDENT3:      
06AB   E9                     JP   (hl)   
06AC                FRAC:        
06AC   2A 7E 1B               LD   hl,(vFrac)   
06AF   E5                     PUSH   hl   
06B0   DD E9                  JP   (ix)   
06B2                SQRT1:       
06B2   E1                     POP   hl   
06B3   C5                     PUSH   bc   
06B4   CD 9B 07               CALL   squareRoot   
06B7   ED 43 7E 1B            LD   (vFrac),bc   
06BB   C1                     POP   bc   
06BC   D5                     PUSH   de   
06BD   DD E9                  JP   (ix)   
06BF                ABS1:        
06BF   E1                     POP   hl   
06C0   CB 7C                  BIT   7,h   
06C2   C8                     RET   z   
06C3   AF                     XOR   a   
06C4   95                     SUB   l   
06C5   6F                     LD   l,a   
06C6   9F                     SBC   a,a   
06C7   94                     SUB   h   
06C8   67                     LD   h,a   
06C9   E5                     PUSH   hl   
06CA   DD E9                  JP   (ix)   
06CC                MOD:         
06CC   D1                     POP   de   ; get first value
06CD   E1                     POP   hl   ; get 2nd value
06CE   C5                     PUSH   bc   ; preserve the IP
06CF   44 4D                  LD   bc,hl   
06D1   CD 82 07               CALL   divide   
06D4   C1                     POP   bc   
06D5   E5                     PUSH   hl   ; push remainder
06D6   DD E9                  JP   (ix)   
06D8                             ; hl = value1, de = value2
06D8                             ; hl = result
06D8                EQUALS:      
06D8   B7                     OR   a   ; reset the carry flag
06D9   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06DB   28 10                  JR   z,true1   
06DD   C3 F3 06               JP   false1   
06E0                             ; hl = value1 de = value2
06E0                             ; hl = result
06E0                LESSTHANEQ:      
06E0   B7                     OR   a   
06E1   ED 52                  SBC   hl,de   
06E3   18 05                  JR   lessthan1   
06E5                             ; hl = value1 de = value2
06E5                             ; hl = result
06E5                LESSTHAN:      
06E5   B7                     OR   a   
06E6   ED 52                  SBC   hl,de   
06E8   28 09                  JR   z,false1   
06EA                LESSTHAN1:      
06EA   FA F3 06               JP   m,false1   
06ED                TRUE1:       
06ED   21 FF FF               LD   hl,TRUE   
06F0   E5                     PUSH   hl   
06F1   DD E9                  JP   (ix)   
06F3                FALSE1:      
06F3   21 00 00               LD   hl,FALSE   
06F6   E5                     PUSH   hl   
06F7   DD E9                  JP   (ix)   
06F9                             ; Z80 port input
06F9                             ; port -- value
06F9                INPUT:       
06F9   E1                     POP   hl   
06FA   59                     LD   e,c   ; save IP
06FB   4D                     LD   c,l   
06FC   ED 68                  IN   l,(c)   
06FE   26 00                  LD   h,0   
0700   4B                     LD   c,e   ; restore IP
0701   E5                     PUSH   hl   
0702   DD E9                  JP   (ix)   
0704                             ; Z80 port output
0704                             ; value port --
0704                OUTPUT:      
0704   E1                     POP   hl   
0705   59                     LD   e,c   ; save IP
0706   4D                     LD   c,l   
0707   E1                     POP   hl   
0708   ED 69                  OUT   (c),l   
070A   4B                     LD   c,e   ; restore IP
070B   DD E9                  JP   (ix)   
070D                KEY:         
070D   CD 81 00               CALL   getchar   
0710   26 00                  LD   h,0   
0712   6F                     LD   l,a   
0713   E5                     PUSH   hl   
0714   DD E9                  JP   (ix)   
0716                NEG:         
0716   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0719   D1                     POP   de   
071A   C3 A8 03               JP   sub2   ; use the SUBtract routine
071D                LET:         
071D                FILTER:      
071D                MAP:         
071D                SCAN:        
071D   DD E9                  JP   (ix)   
071F                             ; -------------------------------------------------------------------------------
071F                             ; hash C-string
071F                             ; BC = str
071F                             ; HL = hash
071F                HASHSTR:      
071F   21 00 00               LD   hl,0   
0722                HASHSTR1:      
0722   0A                     LD   a,(bc)   ; load next char
0723   03                     INC   bc   
0724   FE 00                  CP   0   ; NUL?
0726   C8                     RET   z   
0727                HASHSTR2:      
0727   16 00                  LD   d,0   
0729   5F                     LD   e,a   
072A   19                     ADD   hl,de   
072B   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
072D   29                     ADD   hl,hl   ; shift left
072E   19                     ADD   hl,de   ; add
072F   29                     ADD   hl,hl   ; shift left
0730   29                     ADD   hl,hl   ; shift left
0731   29                     ADD   hl,hl   ; shift left
0732   29                     ADD   hl,hl   ; shift left
0733   29                     ADD   hl,hl   ; shift left
0734   29                     ADD   hl,hl   ; shift left
0735   19                     ADD   hl,de   ; add
0736   18 EA                  JR   hashStr1   
0738                             ; add entry to hash slots and hash pointers
0738                             ; bc = hash (b = hi, c = lo), de = addr
0738                             ; sets carry if successful
0738                DEFINEENTRY:      
0738   CB 21                  SLA   c   ; lo = lo * 2
073A   69                     LD   l,c   ; lo1 = lo
073B   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
073D                DEFINEENTRY0:      
073D   7E                     LD   a,(hl)   ; a = (lo1)
073E   FE FF                  CP   UNUSED   ; is it unused?
0740   28 12                  JR   z,defineEntry3   ; yes, add entry
0742   79                     LD   a,c   ; a = lo
0743   BE                     CP   (hl)   ; compare (lo1) with lo
0744   20 06                  JR   nz,defineEntry1   ; no match loop around
0746   2C                     INC   l   
0747   78                     LD   a,b   ; a = hi
0748   BE                     CP   (hl)   ; compare (lo1+1) with hi
0749   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
074B   2D                     DEC   l   ; restore l
074C                DEFINEENTRY1:      
074C   2C                     INC   l   ; try next entry
074D   2C                     INC   l   
074E   79                     LD   a,c   ; compare lo and lo1
074F   BD                     CP   l   ; if equal then there's no space left, reject
0750   20 EB                  JR   nz,defineEntry0   
0752                DEFINEENTRY2:      
0752   3F                     CCF      ; clear carry flag, failure
0753   C9                     RET      
0754                DEFINEENTRY3:      ; new entry
0754   71                     LD   (hl),c   ; (lo1) = hash lo
0755   23                     INC   hl   
0756   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0757   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0759   72                     LD   (hl),d   
075A   2B                     DEC   hl   
075B   73                     LD   (hl),e   ; (slot + 2) = address
075C   37                     SCF      ; set carry flag, success
075D   C9                     RET      
075E                             ; looks up hash and returns address
075E                             ; bc = hash
075E                             ; returns addr in hl, sets carry if successful
075E                LOOKUPENTRY:      
075E   CB 21                  SLA   c   ; lo = lo * 2
0760   69                     LD   l,c   ; lo1 = lo
0761   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0763                LOOKUPENTRY0:      
0763   7E                     LD   a,(hl)   ; a = (hl), slot
0764   FE FF                  CP   UNUSED   ; is it unused?
0766   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0768   79                     LD   a,c   ; a = lo
0769   BE                     CP   (hl)   ; compare (lo1) with lo
076A   20 06                  JR   nz,lookupEntry1   ; no match loop around
076C   2C                     INC   l   
076D   78                     LD   a,b   ; a = hi
076E   BE                     CP   (hl)   ; compare (lo1+1) with hi
076F   28 09                  JR   z,lookupEntry3   
0771   2D                     DEC   l   
0772                LOOKUPENTRY1:      
0772   2C                     INC   l   
0773   2C                     INC   l   
0774   79                     LD   a,c   
0775   BD                     CP   l   ; no space left, reject
0776   20 EB                  JR   nz,lookupEntry0   
0778                LOOKUPENTRY2:      
0778   3F                     CCF      ; clear carry flag, failure
0779   C9                     RET      
077A                LOOKUPENTRY3:      
077A   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
077C   56                     LD   d,(hl)   
077D   2D                     DEC   l   ; restore l
077E   5E                     LD   e,(hl)   ; (slot + 2) = address
077F   EB                     EX   de,hl   
0780   37                     SCF      
0781   C9                     RET      
0782                             ; division subroutine.
0782                             ; bc: divisor, de: dividend, hl: remainder
0782                DIVIDE:      
0782   21 00 00               LD   hl,0   ; zero the remainder
0785   3E 10                  LD   a,16   ; loop counter
0787                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0787   CB 21                  SLA   c   
0789   CB 10                  RL   b   
078B   ED 6A                  ADC   hl,hl   
078D   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
078F   38 03                  JR   c,divide2   
0791   0C                     INC   c   
0792   18 01                  JR   divide3   
0794                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0794   19                     ADD   hl,de   
0795                DIVIDE3:      
0795   3D                     DEC   a   
0796   20 EF                  JR   nz,divide1   
0798   50 59                  LD   de,bc   ; result from bc to de
079A   C9                     RET      
079B                             ; squareroot
079B                             ; Input: HL = value
079B                             ; Result: DE = square root BC = remainder
079B                SQUAREROOT:      
079B   01 00 08               LD   bc,0800h   
079E   59                     LD   e,c   
079F   AF                     XOR   a   
07A0                SQUAREROOT1:      
07A0   29                     ADD   hl,hl   
07A1   CB 11                  RL   c   
07A3   ED 6A                  ADC   hl,hl   
07A5   CB 11                  RL   c   
07A7   30 02                  JR   nc,$+4   
07A9   CB C5                  SET   0,l   
07AB   7B                     LD   a,e   
07AC   87                     ADD   a,a   
07AD   5F                     LD   e,a   
07AE   87                     ADD   a,a   
07AF   CB 45                  BIT   0,l   
07B1   20 03                  JR   nz,$+5   
07B3   91                     SUB   c   
07B4   30 05                  JR   nc,squareRoot4   
07B6   79                     LD   a,c   
07B7   93                     SUB   e   
07B8   1C                     INC   e   
07B9   93                     SUB   e   
07BA   4F                     LD   c,a   
07BB                SQUAREROOT4:      
07BB   10 E3                  DJNZ   squareRoot1   
07BD   CB 45                  BIT   0,l   
07BF   28 01                  JR   z,squareRoot5   
07C1   04                     INC   b   
07C2                SQUAREROOT5:      
07C2   16 00                  LD   d,0   
07C4   C9                     RET      
07C5                PRTDEC:      
07C5   CB 7C                  BIT   7,h   
07C7   28 0B                  JR   z,prtdec0   
07C9   3E 2D                  LD   a,"-"   
07CB   CD 85 00               CALL   putchar   
07CE   AF                     XOR   a   
07CF   95                     SUB   l   
07D0   6F                     LD   l,a   
07D1   9F                     SBC   a,a   
07D2   94                     SUB   h   
07D3   67                     LD   h,a   
07D4                PRTDEC0:      
07D4   C5                     PUSH   bc   
07D5   0E 00                  LD   c,0   ; leading zeros flag = false
07D7   11 F0 D8               LD   de,-10000   
07DA   CD F6 07               CALL   prtdec1   
07DD   11 18 FC               LD   de,-1000   
07E0   CD F6 07               CALL   prtdec1   
07E3   11 9C FF               LD   de,-100   
07E6   CD F6 07               CALL   prtdec1   
07E9   1E F6                  LD   e,-10   
07EB   CD F6 07               CALL   prtdec1   
07EE   0C                     INC   c   ; flag = true for at least digit
07EF   1E FF                  LD   e,-1   
07F1   CD F6 07               CALL   prtdec1   
07F4   C1                     POP   bc   
07F5   C9                     RET      
07F6                PRTDEC1:      
07F6   06 2F                  LD   b,"0"-1   
07F8                PRTDEC2:      
07F8   04                     INC   b   
07F9   19                     ADD   hl,de   
07FA   38 FC                  JR   c,prtdec2   
07FC   ED 52                  SBC   hl,de   
07FE   3E 30                  LD   a,"0"   
0800   B8                     CP   b   
0801   20 05                  JR   nz,prtdec3   
0803   AF                     XOR   a   
0804   B1                     OR   c   
0805   C8                     RET   z   
0806   18 01                  JR   prtdec4   
0808                PRTDEC3:      
0808   0C                     INC   c   
0809                PRTDEC4:      
0809   78                     LD   a,b   
080A   C3 85 00               JP   putchar   
080D                PRTHEX:      ; display hl as a 16-bit number in hex.
080D   C5                     PUSH   bc   ; preserve the IP
080E   7C                     LD   a,h   
080F   CD 18 08               CALL   prthex2   
0812   7D                     LD   a,l   
0813   CD 18 08               CALL   prthex2   
0816   C1                     POP   bc   
0817   C9                     RET      
0818                PRTHEX2:      
0818   4F                     LD   c,a   
0819   1F                     RRA      
081A   1F                     RRA      
081B   1F                     RRA      
081C   1F                     RRA      
081D   CD 21 08               CALL   prthex3   
0820   79                     LD   a,c   
0821                PRTHEX3:      
0821   E6 0F                  AND   0x0F   
0823   C6 90                  ADD   a,0x90   
0825   27                     DAA      
0826   CE 40                  ADC   a,0x40   
0828   27                     DAA      
0829   C3 85 00               JP   putchar   
082C                PRTSTR0:      
082C   CD 85 00               CALL   putchar   
082F   23                     INC   hl   
0830                PRTSTR:      
0830   7E                     LD   a,(hl)   
0831   B7                     OR   a   
0832   20 F8                  JR   nz,prtstr0   
0834   C9                     RET      
0835                             ; **************************************************************************
0835                             ; calculate nesting value
0835                             ; a is char to be tested,
0835                             ; e is the nesting value (initially 0)
0835                             ; e is increased by ( and [
0835                             ; e is decreased by ) and ]
0835                             ; e has its bit 7 toggled by `
0835                             ; limited to 127 levels
0835                             ; **************************************************************************
0835                NESTING:      
0835   FE 22                  CP   $22   ; quote char
0837   20 0A                  JR   nz,nesting1   
0839   CB 7B                  BIT   7,e   
083B   28 03                  JR   z,nesting1a   
083D   CB BB                  RES   7,e   
083F   C9                     RET      
0840                NESTING1A:      
0840   CB FB                  SET   7,e   
0842   C9                     RET      
0843                NESTING1:      
0843   CB 7B                  BIT   7,e   
0845   C0                     RET   nz   
0846   FE 7B                  CP   "{"   
0848   28 08                  JR   z,nesting2   
084A   FE 5B                  CP   "["   
084C   28 04                  JR   z,nesting2   
084E   FE 28                  CP   "("   
0850   20 02                  JR   nz,nesting3   
0852                NESTING2:      
0852   1C                     INC   e   
0853   C9                     RET      
0854                NESTING3:      
0854   FE 7D                  CP   "}"   
0856   28 07                  JR   z,nesting4   
0858   FE 5D                  CP   "]"   
085A   28 03                  JR   z,nesting4   
085C   FE 29                  CP   ")"   
085E   C0                     RET   nz   
085F                NESTING4:      
085F   1D                     DEC   e   
0860   C9                     RET      
0861                PROMPT:      
0861   CD 71 08               CALL   printStr   
0864   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0869   C9                     RET      
086A                CRLF:        
086A   CD 71 08               CALL   printStr   
086D   0D 0A 00               .CSTR   "\r\n"   
0870   C9                     RET      
0871                PRINTSTR:      
0871   E3                     EX   (sp),hl   ; swap			
0872   CD 30 08               CALL   prtstr   
0875   23                     INC   hl   ; inc past NUL
0876   E3                     EX   (sp),hl   ; put it back	
0877   C9                     RET      
0878                DEFINE:      
0878   E1                     POP   hl   
0879   7E                     LD   a,(hl)   
087A   23                     INC   hl   
087B   44 4D                  LD   bc,hl   
087D   5F                     LD   e,a   
087E   16 00                  LD   d,0   
0880   19                     ADD   hl,de   
0881   5E                     LD   e,(hl)   
0882   23                     INC   hl   
0883   56                     LD   d,(hl)   
0884   23                     INC   hl   
0885   E5                     PUSH   hl   ; bc = str
0886   D5                     PUSH   de   
0887   CD 1F 07               CALL   hashStr   ; hl = hash
088A   D1                     POP   de   
088B   44 4D                  LD   bc,hl   
088D   C3 38 07               JP   defineEntry   
0890                INIT:        
0890   DD 21 52 0A            LD   ix,next   
0894   FD 21 00 1A            LD   iy,DSTACK   
0898   21 80 01               LD   hl,isysVars   
089B   11 7E 1B               LD   de,sysVars   
089E   01 10 00               LD   bc,8 * 2   
08A1   ED B0                  LDIR      
08A3   3E FF                  LD   a,UNUSED   
08A5   06 00                  LD   b,0   
08A7   21 00 1C               LD   hl,hashSlots   
08AA                INIT1:       
08AA   77                     LD   (hl),a   
08AB   23                     INC   hl   
08AC   10 FC                  DJNZ   init1   
08AE   CD 78 08               CALL   define   
08B1   04 61 62 73 00         .PSTR   "abs",0   
08B6   BF 06                  DW   abs1   
08B8   CD 78 08               CALL   define   
08BB   05 61 64 64 72 00      .PSTR   "addr",0   
08C1   48 06                  DW   addr   
08C3   CD 78 08               CALL   define   
08C6   06 62 79 74 65 73 00   .PSTR   "bytes",0   
08CD   BC 05                  DW   bytes   
08CF   CD 78 08               CALL   define   
08D2   05 63 61 73 65 00      .PSTR   "case",0   
08D8   87 05                  DW   case   
08DA   CD 78 08               CALL   define   
08DD   04 64 65 66 00         .PSTR   "def",0   
08E2   36 06                  DW   def   
08E4   CD 78 08               CALL   define   
08E7   05 65 78 65 63 00      .PSTR   "exec",0   
08ED   9A 0A                  DW   exec   
08EF   CD 78 08               CALL   define   
08F2   05 63 61 6C 6C 00      .PSTR   "call",0   
08F8   85 0A                  DW   call   
08FA   CD 78 08               CALL   define   
08FD   06 66 61 6C 73 65 00   .PSTR   "false",0   
0904   00 00                  DW   false   
0906   CD 78 08               CALL   define   
0909   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0911   1D 07                  DW   filter   
0913   CD 78 08               CALL   define   
0916   05 66 72 61 63 00      .PSTR   "frac",0   
091C   AC 06                  DW   frac   
091E   CD 78 08               CALL   define   
0921   05 68 61 73 68 00      .PSTR   "hash",0   
0927   2B 06                  DW   hash   
0929   CD 78 08               CALL   define   
092C   06 69 6E 70 75 74 00   .PSTR   "input",0   
0933   F9 06                  DW   input   
0935   CD 78 08               CALL   define   
0938   03 69 66 00            .PSTR   "if",0   
093C   FB 04                  DW   if   
093E   CD 78 08               CALL   define   
0941   05 69 66 74 65 00      .PSTR   "ifte",0   
0947   00 05                  DW   ifte   
0949   CD 78 08               CALL   define   
094C   04 6B 65 79 00         .PSTR   "key",0   
0951   0D 07                  DW   key   
0953   CD 78 08               CALL   define   
0956   04 6C 65 74 00         .PSTR   "let",0   
095B   1D 07                  DW   let   
095D   CD 78 08               CALL   define   
0960   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0966   23 05                  DW   loop   
0968   CD 78 08               CALL   define   
096B   04 6D 61 70 00         .PSTR   "map",0   
0970   1D 07                  DW   map   
0972   CD 78 08               CALL   define   
0975   04 6D 6F 64 00         .PSTR   "mod",0   
097A   CC 06                  DW   mod   
097C   CD 78 08               CALL   define   
097F   04 6E 65 67 00         .PSTR   "neg",0   
0984   16 07                  DW   neg   
0986   CD 78 08               CALL   define   
0989   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0991   04 07                  DW   output   
0993   CD 78 08               CALL   define   
0996   05 73 63 61 6E 00      .PSTR   "scan",0   
099C   01 00                  DW   scan   
099E   CD 78 08               CALL   define   
09A1   04 73 68 6C 00         .PSTR   "shl",0   
09A6   DE 03                  DW   shl   
09A8   CD 78 08               CALL   define   
09AB   04 73 68 72 00         .PSTR   "shr",0   
09B0   EE 03                  DW   shr   
09B2   CD 78 08               CALL   define   
09B5   05 73 71 72 74 00      .PSTR   "sqrt",0   
09BB   B2 06                  DW   sqrt1   
09BD   CD 78 08               CALL   define   
09C0   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
09C8   73 05                  DW   switch   
09CA   CD 78 08               CALL   define   
09CD   05 74 72 75 65 00      .PSTR   "true",0   
09D3   FF FF                  DW   true   
09D5   CD 78 08               CALL   define   
09D8   06 77 6F 72 64 73 00   .PSTR   "words",0   
09DF   B7 05                  DW   words   
09E1   C9                     RET      
09E2                START:       
09E2   31 00 1A               LD   sp,DSTACK   ; start of Siena
09E5   CD 90 08               CALL   init   ; setups
09E8   CD 71 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09EB   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
09F8                INTERPRET:      
09F8   CD 61 08               CALL   prompt   
09FB   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09FE   ED 43 82 1B            LD   (vTIBPtr),bc   
0A02                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A02   1E 00                  LD   e,0   ; initilize nesting value
0A04   C5                     PUSH   bc   ; save offset into TIB,
0A05                             ; bc is also the count of chars in TIB
0A05   21 00 18               LD   hl,TIB   ; hl is start of TIB
0A08   18 06                  JR   interpret4   
0A0A                INTERPRET3:      
0A0A   7E                     LD   a,(hl)   ; a = char in TIB
0A0B   23                     INC   hl   ; inc pointer into TIB
0A0C   0B                     DEC   bc   ; dec count of chars in TIB
0A0D   CD 35 08               CALL   nesting   ; update nesting value
0A10                INTERPRET4:      
0A10   79                     LD   a,c   ; is count zero?
0A11   B0                     OR   b   
0A12   20 F6                  JR   nz,interpret3   ; if not loop
0A14   C1                     POP   bc   ; restore offset into TIB
0A15                WAITCHAR:      
0A15   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A18   FE 20                  CP   $20   ; compare to space
0A1A   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A1C   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A1E                             ; ???? NEEDED?
0A1E   28 2A                  JR   z,waitchar4   
0A20   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A22   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A24                MACRO:       
0A24                             ;  ld (vTIBPtr),bc
0A24                             ;  ld hl,ctrlCodes
0A24                             ;  add a,l			            ; look up key of macros
0A24                             ;  ld l,a
0A24                             ;  ld e,(hl)
0A24                             ;  ld a,e
0A24                             ;  or a
0A24                             ;  jr z,macro1
0A24                             ;  ld d,msb(macros)
0A24                             ;  push de
0A24                             ;  call call		            ; Siena exec_ operation and jump to it
0A24                             ;  db DC1,0
0A24                             ; macro1:
0A24                             ;  ld bc,(vTIBPtr)
0A24   18 DC                  JR   interpret2   
0A26                WAITCHAR1:      
0A26   21 00 18               LD   hl,TIB   
0A29   09                     ADD   hl,bc   
0A2A   77                     LD   (hl),a   ; store the character in textbuf
0A2B   03                     INC   bc   
0A2C   CD 85 00               CALL   putchar   ; echo character to screen
0A2F   CD 35 08               CALL   nesting   
0A32   18 E1                  JR   waitchar   ; wait for next character
0A34                WAITCHAR3:      
0A34   21 00 18               LD   hl,TIB   
0A37   09                     ADD   hl,bc   
0A38   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A3A   23                     INC   hl   
0A3B   36 0A                  LD   (hl),"\n"   
0A3D   23                     INC   hl   
0A3E   03                     INC   bc   
0A3F   03                     INC   bc   
0A40   CD 6A 08               CALL   crlf   ; echo character to screen
0A43   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A44   B7                     OR   a   
0A45   20 CE                  JR   nz,waitchar   
0A47   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0A49   03                     INC   bc   
0A4A                WAITCHAR4:      
0A4A   ED 43 82 1B            LD   (vTIBPtr),bc   
0A4E   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A51                             ; we pressed enter
0A51   0B                     DEC   bc   
0A52                NEXT:        
0A52   03                     INC   bc   ; Increment the IP
0A53   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A54                             ; bit 7,a                   ; is 15-bit opcode ?
0A54                             ; jr nz,next3
0A54   FE 20                  CP   " "   ; whitespace?
0A56   28 FA                  JR   z,next   ; space? ignore
0A58   38 07                  JR   c,next1   
0A5A   6F                     LD   l,a   ; index into table
0A5B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A5D   6E                     LD   l,(hl)   ; get low jump address
0A5E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A60   E9                     JP   (hl)   ; Jump to routine
0A61                NEXT1:       
0A61   FE 1B                  CP   ESC   ; escape from interpreter
0A63   28 07                  JR   z,escape   
0A65   FE 00                  CP   NUL   ; end of input string?
0A67   28 07                  JR   z,exit   
0A69                             ; cp ETX                      ; end of command line input text?
0A69                             ; jr nz,next
0A69                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0A69                             ;     add hl,sp
0A69                             ;     jr nc,next2
0A69                             ;     ld sp,DSTACK                ; yes, reset stack
0A69                             ; next2:
0A69   C3 F8 09               JP   interpret   ; no, other whitespace, macros?
0A6C                             ; next3:
0A6C                             ;     ld h,a                    ; build address
0A6C                             ;     inc bc
0A6C                             ;     ld a,(bc)
0A6C                             ;     ld l,a
0A6C                             ;     add hl,hl
0A6C                             ;     jp (hl)
0A6C                ESCAPE:      
0A6C   60 69                  LD   hl,bc   ; address of code after escape opcode
0A6E   23                     INC   hl   
0A6F   E9                     JP   (hl)   
0A70                EXIT:        
0A70   50 59                  LD   de,bc   ; address of code after exit opcode
0A72   13                     INC   de   
0A73   D9                     EXX      
0A74   C1                     POP   bc   ; bc = last result
0A75   FD 54                  LD   d,iyh   ; de = BP
0A77   FD 5D                  LD   e,iyl   
0A79   EB                     EX   de,hl   ; hl = BP
0A7A   F9                     LD   sp,hl   ; sp = BP
0A7B   D9                     EXX      
0A7C   E1                     POP   hl   ; hl = old BP
0A7D   C1                     POP   bc   ; pop SCP (discard)
0A7E   C1                     POP   bc   ; bc = IP
0A7F   F9                     LD   sp,hl   ; sp = old BP
0A80   D9                     EXX      
0A81   C5                     PUSH   bc   ; push result
0A82   D9                     EXX      
0A83   EB                     EX   de,hl   
0A84   E9                     JP   (hl)   
0A85                             ; call with args
0A85                             ; creates a scope
0A85                CALL:        ; execute code at pointer
0A85   E1                     POP   hl   ; hl = pointer to code
0A86   7C                     LD   a,h   ; skip if destination address is NUL
0A87   B5                     OR   l   
0A88   28 0E                  JR   z,call2   
0A8A   C5                     PUSH   bc   ; push IP
0A8B   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0A8D   FD E5                  PUSH   iy   ; push BP
0A8F   FD 21 00 00            LD   iy,0   ; BP = SP
0A93   FD 39                  ADD   iy,sp   
0A95   44 4D                  LD   bc,hl   ; IP = pointer to code
0A97   0B                     DEC   bc   ; dec to prepare for next routine
0A98                CALL2:       
0A98   DD E9                  JP   (ix)   
0A9A                             ; execute a block of code
0A9A                             ; uses parent scope
0A9A                EXEC:        ; execute code at pointer
0A9A   E1                     POP   hl   ; hl = pointer to code
0A9B   7C                     LD   a,h   ; skip if destination address is NUL
0A9C   B5                     OR   l   
0A9D   28 13                  JR   z,exec2   
0A9F   C5                     PUSH   bc   ; push IP
0AA0   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0AA3   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0AA6   D5                     PUSH   de   ; push SCP
0AA7   FD E5                  PUSH   iy   ; push BP
0AA9   FD 21 00 00            LD   iy,0   ; BP = SP
0AAD   FD 39                  ADD   iy,sp   
0AAF   44 4D                  LD   bc,hl   ; IP = pointer to code
0AB1   0B                     DEC   bc   ; dec to prepare for next routine
0AB2                EXEC2:       
0AB2   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               071D DEFINED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1595 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 782 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1152 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 231 IN Siena.asm
                    > USED AT LINE 1338 IN Siena.asm
                    > USED AT LINE 1379 IN Siena.asm
                    > USED AT LINE 1403 IN Siena.asm
                    > USED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1119 IN Siena.asm
                    > USED AT LINE 1615 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1539 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1208 IN Siena.asm
                    > USED AT LINE 1247 IN Siena.asm
                    > USED AT LINE 1501 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1496 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 55 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 89 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 192 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 194 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 196 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 198 IN Siena.asm
STRDEF_:            0309 DEFINED AT LINE 200 IN Siena.asm
DOT_:               030C DEFINED AT LINE 207 IN Siena.asm
DOT1:               0318 DEFINED AT LINE 215 IN Siena.asm
                    > USED AT LINE 212 IN Siena.asm
DOT2:               0321 DEFINED AT LINE 220 IN Siena.asm
                    > USED AT LINE 217 IN Siena.asm
DOT3:               032B DEFINED AT LINE 226 IN Siena.asm
                    > USED AT LINE 222 IN Siena.asm
                    > USED AT LINE 336 IN Siena.asm
DOT4:               032F DEFINED AT LINE 229 IN Siena.asm
                    > USED AT LINE 214 IN Siena.asm
                    > USED AT LINE 219 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
INDEX_:             0336 DEFINED AT LINE 235 IN Siena.asm
INDEX1:             033F DEFINED AT LINE 242 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
FETCH_:             0343 DEFINED AT LINE 248 IN Siena.asm
FETCH1:             034F DEFINED AT LINE 257 IN Siena.asm
                    > USED AT LINE 254 IN Siena.asm
STORE_:             0352 DEFINED AT LINE 262 IN Siena.asm
STORE1:             035D DEFINED AT LINE 271 IN Siena.asm
                    > USED AT LINE 268 IN Siena.asm
BLOCK_:             035F DEFINED AT LINE 274 IN Siena.asm
BLOCKEND_:          0362 DEFINED AT LINE 276 IN Siena.asm
CHAR_:              0365 DEFINED AT LINE 278 IN Siena.asm
ARRAY_:             0368 DEFINED AT LINE 280 IN Siena.asm
ARRAYEND_:          036B DEFINED AT LINE 282 IN Siena.asm
IDENT_:             036E DEFINED AT LINE 284 IN Siena.asm
SYMBOL_:            0371 DEFINED AT LINE 286 IN Siena.asm
AND_:               0374 DEFINED AT LINE 288 IN Siena.asm
AND1:               037B DEFINED AT LINE 296 IN Siena.asm
                    > USED AT LINE 309 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
OR_:                037F DEFINED AT LINE 301 IN Siena.asm
XOR_:               0388 DEFINED AT LINE 311 IN Siena.asm
XOR1:               0389 DEFINED AT LINE 313 IN Siena.asm
                    > USED AT LINE 324 IN Siena.asm
INV_:               0391 DEFINED AT LINE 322 IN Siena.asm
ADD_:               0396 DEFINED AT LINE 326 IN Siena.asm
HDOT_:              039C DEFINED AT LINE 333 IN Siena.asm
MUL_:               03A3 DEFINED AT LINE 338 IN Siena.asm
SUB_:               03A6 DEFINED AT LINE 341 IN Siena.asm
SUB2:               03A8 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 1161 IN Siena.asm
EQ_:                03AE DEFINED AT LINE 350 IN Siena.asm
GT_:                03B3 DEFINED AT LINE 354 IN Siena.asm
LT_:                03B7 DEFINED AT LINE 358 IN Siena.asm
LT1:                03B9 DEFINED AT LINE 361 IN Siena.asm
                    > USED AT LINE 357 IN Siena.asm
DIV_:               03C4 DEFINED AT LINE 369 IN Siena.asm
COMMENT_:           03D3 DEFINED AT LINE 380 IN Siena.asm
                    > USED AT LINE 384 IN Siena.asm
NOP_:               03DC DEFINED AT LINE 388 IN Siena.asm
SHL:                03DE DEFINED AT LINE 398 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
SHL1:               03E6 DEFINED AT LINE 405 IN Siena.asm
                    > USED AT LINE 408 IN Siena.asm
SHL2:               03E7 DEFINED AT LINE 407 IN Siena.asm
                    > USED AT LINE 404 IN Siena.asm
SHR:                03EE DEFINED AT LINE 415 IN Siena.asm
                    > USED AT LINE 1603 IN Siena.asm
SHR1:               03F6 DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 426 IN Siena.asm
SHR2:               03FA DEFINED AT LINE 425 IN Siena.asm
                    > USED AT LINE 421 IN Siena.asm
MUL:                0401 DEFINED AT LINE 431 IN Siena.asm
                    > USED AT LINE 339 IN Siena.asm
MUL2:               040B DEFINED AT LINE 440 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
NUM:                041D DEFINED AT LINE 454 IN Siena.asm
                    > USED AT LINE 195 IN Siena.asm
NUM0:               0426 DEFINED AT LINE 460 IN Siena.asm
                    > USED AT LINE 458 IN Siena.asm
NUM1:               0427 DEFINED AT LINE 462 IN Siena.asm
                    > USED AT LINE 479 IN Siena.asm
NUM2:               043F DEFINED AT LINE 480 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
                    > USED AT LINE 502 IN Siena.asm
                    > USED AT LINE 504 IN Siena.asm
NUM3:               044A DEFINED AT LINE 488 IN Siena.asm
                    > USED AT LINE 483 IN Siena.asm
HEXNUM:             044D DEFINED AT LINE 492 IN Siena.asm
                    > USED AT LINE 197 IN Siena.asm
HEXNUM1:            0450 DEFINED AT LINE 494 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
HEXNUM2:            0458 DEFINED AT LINE 500 IN Siena.asm
                    > USED AT LINE 498 IN Siena.asm
STRDEF:             046A DEFINED AT LINE 513 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
STRDEF1:            0472 DEFINED AT LINE 518 IN Siena.asm
                    > USED AT LINE 525 IN Siena.asm
STRDEF2:            0475 DEFINED AT LINE 522 IN Siena.asm
                    > USED AT LINE 517 IN Siena.asm
CHAR:               0483 DEFINED AT LINE 532 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
CHAR1:              0486 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 545 IN Siena.asm
CHAR2:              0492 DEFINED AT LINE 543 IN Siena.asm
                    > USED AT LINE 540 IN Siena.asm
CHAR3:              0495 DEFINED AT LINE 546 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
BLOCK:              0498 DEFINED AT LINE 602 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
BLOCK1:             049C DEFINED AT LINE 606 IN Siena.asm
                    > USED AT LINE 624 IN Siena.asm
                    > USED AT LINE 630 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
BLOCK2:             04BE DEFINED AT LINE 625 IN Siena.asm
                    > USED AT LINE 620 IN Siena.asm
                    > USED AT LINE 622 IN Siena.asm
BLOCK3:             04C1 DEFINED AT LINE 628 IN Siena.asm
                    > USED AT LINE 614 IN Siena.asm
                    > USED AT LINE 616 IN Siena.asm
                    > USED AT LINE 618 IN Siena.asm
BLOCK4:             04C4 DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 610 IN Siena.asm
                    > USED AT LINE 612 IN Siena.asm
BLOCK5:             04C7 DEFINED AT LINE 634 IN Siena.asm
                    > USED AT LINE 627 IN Siena.asm
BLOCKEND:           04CC DEFINED AT LINE 639 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
ARG:                04E0 DEFINED AT LINE 654 IN Siena.asm
                    > USED AT LINE 199 IN Siena.asm
IF:                 04FB DEFINED AT LINE 721 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
IFTE:               0500 DEFINED AT LINE 724 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
IFTE1:              0501 DEFINED AT LINE 726 IN Siena.asm
                    > USED AT LINE 723 IN Siena.asm
IFTE2:              050A DEFINED AT LINE 735 IN Siena.asm
                    > USED AT LINE 733 IN Siena.asm
IFTE3:              0521 DEFINED AT LINE 748 IN Siena.asm
                    > USED AT LINE 738 IN Siena.asm
LOOP:               0523 DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 1575 IN Siena.asm
LOOP1:              0538 DEFINED AT LINE 765 IN Siena.asm
                    > USED AT LINE 786 IN Siena.asm
LOOP2:              0553 DEFINED AT LINE 781 IN Siena.asm
                    > USED AT LINE 769 IN Siena.asm
LOOP3:              055D DEFINED AT LINE 788 IN Siena.asm
                    > USED AT LINE 768 IN Siena.asm
SWITCH:             0573 DEFINED AT LINE 817 IN Siena.asm
                    > USED AT LINE 1611 IN Siena.asm
CASE:               0587 DEFINED AT LINE 829 IN Siena.asm
                    > USED AT LINE 1523 IN Siena.asm
CASE0:              05A3 DEFINED AT LINE 847 IN Siena.asm
                    > USED AT LINE 844 IN Siena.asm
CASE1:              05A8 DEFINED AT LINE 853 IN Siena.asm
                    > USED AT LINE 846 IN Siena.asm
CASE2:              05B5 DEFINED AT LINE 861 IN Siena.asm
                    > USED AT LINE 856 IN Siena.asm
WORDS:              05B7 DEFINED AT LINE 864 IN Siena.asm
                    > USED AT LINE 1619 IN Siena.asm
BYTES:              05BC DEFINED AT LINE 867 IN Siena.asm
                    > USED AT LINE 1519 IN Siena.asm
BYTES1:             05BF DEFINED AT LINE 869 IN Siena.asm
                    > USED AT LINE 866 IN Siena.asm
ARRAY:              05C4 DEFINED AT LINE 873 IN Siena.asm
                    > USED AT LINE 281 IN Siena.asm
ARRAYEND:           05D6 DEFINED AT LINE 883 IN Siena.asm
                    > USED AT LINE 283 IN Siena.asm
ARRAYEND1:          05F8 DEFINED AT LINE 908 IN Siena.asm
                    > USED AT LINE 918 IN Siena.asm
ARRAYEND2:          0604 DEFINED AT LINE 920 IN Siena.asm
                    > USED AT LINE 905 IN Siena.asm
                    > USED AT LINE 935 IN Siena.asm
ARRAYEND3:          0614 DEFINED AT LINE 937 IN Siena.asm
                    > USED AT LINE 917 IN Siena.asm
HASH:               062B DEFINED AT LINE 956 IN Siena.asm
                    > USED AT LINE 1551 IN Siena.asm
DEF:                0636 DEFINED AT LINE 966 IN Siena.asm
                    > USED AT LINE 1527 IN Siena.asm
DEF1:               0644 DEFINED AT LINE 975 IN Siena.asm
                    > USED AT LINE 973 IN Siena.asm
ADDR:               0648 DEFINED AT LINE 981 IN Siena.asm
                    > USED AT LINE 1515 IN Siena.asm
ADDR1:              0654 DEFINED AT LINE 988 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
SYMBOL:             0658 DEFINED AT LINE 993 IN Siena.asm
                    > USED AT LINE 287 IN Siena.asm
SYMBOL0:            0660 DEFINED AT LINE 998 IN Siena.asm
                    > USED AT LINE 1009 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
SYMBOL1:            0662 DEFINED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
SYMBOL2:            0671 DEFINED AT LINE 1012 IN Siena.asm
                    > USED AT LINE 1005 IN Siena.asm
IDENT:              067F DEFINED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 285 IN Siena.asm
IDENT0:             0686 DEFINED AT LINE 1027 IN Siena.asm
                    > USED AT LINE 1038 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
IDENT1:             0688 DEFINED AT LINE 1030 IN Siena.asm
                    > USED AT LINE 1026 IN Siena.asm
IDENT2:             0697 DEFINED AT LINE 1041 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
IDENT3:             06AB DEFINED AT LINE 1053 IN Siena.asm
                    > USED AT LINE 1051 IN Siena.asm
FRAC:               06AC DEFINED AT LINE 1056 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
SQRT1:              06B2 DEFINED AT LINE 1061 IN Siena.asm
                    > USED AT LINE 1607 IN Siena.asm
ABS1:               06BF DEFINED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
MOD:                06CC DEFINED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1583 IN Siena.asm
EQUALS:             06D8 DEFINED AT LINE 1095 IN Siena.asm
                    > USED AT LINE 353 IN Siena.asm
LESSTHANEQ:         06E0 DEFINED AT LINE 1103 IN Siena.asm
                    > USED AT LINE 365 IN Siena.asm
LESSTHAN:           06E5 DEFINED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 367 IN Siena.asm
LESSTHAN1:          06EA DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
TRUE1:              06ED DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1098 IN Siena.asm
FALSE1:             06F3 DEFINED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 1113 IN Siena.asm
                    > USED AT LINE 1116 IN Siena.asm
INPUT:              06F9 DEFINED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
OUTPUT:             0704 DEFINED AT LINE 1142 IN Siena.asm
                    > USED AT LINE 1591 IN Siena.asm
KEY:                070D DEFINED AT LINE 1151 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
NEG:                0716 DEFINED AT LINE 1158 IN Siena.asm
                    > USED AT LINE 1587 IN Siena.asm
LET:                071D DEFINED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1571 IN Siena.asm
FILTER:             071D DEFINED AT LINE 1164 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
MAP:                071D DEFINED AT LINE 1165 IN Siena.asm
                    > USED AT LINE 1579 IN Siena.asm
HASHSTR:            071F DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 960 IN Siena.asm
                    > USED AT LINE 1018 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1488 IN Siena.asm
HASHSTR1:           0722 DEFINED AT LINE 1178 IN Siena.asm
                    > USED AT LINE 1197 IN Siena.asm
HASHSTR2:           0727 DEFINED AT LINE 1183 IN Siena.asm
DEFINEENTRY:        0738 DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 971 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
DEFINEENTRY0:       073D DEFINED AT LINE 1206 IN Siena.asm
                    > USED AT LINE 1223 IN Siena.asm
DEFINEENTRY1:       074C DEFINED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
DEFINEENTRY2:       0752 DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 1248 IN Siena.asm
DEFINEENTRY3:       0754 DEFINED AT LINE 1227 IN Siena.asm
                    > USED AT LINE 1209 IN Siena.asm
LOOKUPENTRY:        075E DEFINED AT LINE 1241 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 1049 IN Siena.asm
LOOKUPENTRY0:       0763 DEFINED AT LINE 1245 IN Siena.asm
                    > USED AT LINE 1262 IN Siena.asm
LOOKUPENTRY1:       0772 DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1251 IN Siena.asm
LOOKUPENTRY2:       0778 DEFINED AT LINE 1263 IN Siena.asm
LOOKUPENTRY3:       077A DEFINED AT LINE 1266 IN Siena.asm
                    > USED AT LINE 1255 IN Siena.asm
DIVIDE:             0782 DEFINED AT LINE 1278 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
                    > USED AT LINE 1088 IN Siena.asm
DIVIDE1:            0787 DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 1293 IN Siena.asm
DIVIDE2:            0794 DEFINED AT LINE 1289 IN Siena.asm
                    > USED AT LINE 1286 IN Siena.asm
DIVIDE3:            0795 DEFINED AT LINE 1291 IN Siena.asm
                    > USED AT LINE 1288 IN Siena.asm
SQUAREROOT:         079B DEFINED AT LINE 1301 IN Siena.asm
                    > USED AT LINE 1064 IN Siena.asm
SQUAREROOT1:        07A0 DEFINED AT LINE 1305 IN Siena.asm
                    > USED AT LINE 1326 IN Siena.asm
SQUAREROOT4:        07BB DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1319 IN Siena.asm
SQUAREROOT5:        07C2 DEFINED AT LINE 1330 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
PRTDEC:             07C5 DEFINED AT LINE 1334 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
PRTDEC0:            07D4 DEFINED AT LINE 1345 IN Siena.asm
                    > USED AT LINE 1336 IN Siena.asm
PRTDEC1:            07F6 DEFINED AT LINE 1361 IN Siena.asm
                    > USED AT LINE 1349 IN Siena.asm
                    > USED AT LINE 1351 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
                    > USED AT LINE 1355 IN Siena.asm
                    > USED AT LINE 1358 IN Siena.asm
PRTDEC2:            07F8 DEFINED AT LINE 1363 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
PRTDEC3:            0808 DEFINED AT LINE 1375 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
PRTDEC4:            0809 DEFINED AT LINE 1377 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
PRTHEX:             080D DEFINED AT LINE 1381 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
                    > USED AT LINE 335 IN Siena.asm
PRTHEX2:            0818 DEFINED AT LINE 1389 IN Siena.asm
                    > USED AT LINE 1384 IN Siena.asm
                    > USED AT LINE 1386 IN Siena.asm
PRTHEX3:            0821 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 1395 IN Siena.asm
PRTSTR0:            082C DEFINED AT LINE 1405 IN Siena.asm
                    > USED AT LINE 1411 IN Siena.asm
PRTSTR:             0830 DEFINED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
                    > USED AT LINE 1469 IN Siena.asm
NESTING:            0835 DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
NESTING1A:          0840 DEFINED AT LINE 1431 IN Siena.asm
                    > USED AT LINE 1428 IN Siena.asm
NESTING1:           0843 DEFINED AT LINE 1434 IN Siena.asm
                    > USED AT LINE 1426 IN Siena.asm
NESTING2:           0852 DEFINED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
                    > USED AT LINE 1440 IN Siena.asm
NESTING3:           0854 DEFINED AT LINE 1446 IN Siena.asm
                    > USED AT LINE 1442 IN Siena.asm
NESTING4:           085F DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 1448 IN Siena.asm
                    > USED AT LINE 1450 IN Siena.asm
PROMPT:             0861 DEFINED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
CRLF:               086A DEFINED AT LINE 1462 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
PRINTSTR:           0871 DEFINED AT LINE 1467 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
DEFINE:             0878 DEFINED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1509 IN Siena.asm
                    > USED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 1517 IN Siena.asm
                    > USED AT LINE 1521 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
                    > USED AT LINE 1537 IN Siena.asm
                    > USED AT LINE 1541 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
                    > USED AT LINE 1549 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
                    > USED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
                    > USED AT LINE 1573 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1585 IN Siena.asm
                    > USED AT LINE 1589 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
                    > USED AT LINE 1597 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
                    > USED AT LINE 1605 IN Siena.asm
                    > USED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1613 IN Siena.asm
                    > USED AT LINE 1617 IN Siena.asm
INIT:               0890 DEFINED AT LINE 1493 IN Siena.asm
                    > USED AT LINE 1625 IN Siena.asm
INIT1:              08AA DEFINED AT LINE 1504 IN Siena.asm
                    > USED AT LINE 1507 IN Siena.asm
START:              09E2 DEFINED AT LINE 1623 IN Siena.asm
                    > USED AT LINE 6
INTERPRET:          09F8 DEFINED AT LINE 1629 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
INTERPRET2:         0A02 DEFINED AT LINE 1635 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
INTERPRET3:         0A0A DEFINED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
INTERPRET4:         0A10 DEFINED AT LINE 1648 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
WAITCHAR:           0A15 DEFINED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
MACRO:              0A24 DEFINED AT LINE 1664 IN Siena.asm
WAITCHAR1:          0A26 DEFINED AT LINE 1681 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
WAITCHAR3:          0A34 DEFINED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
WAITCHAR4:          0A4A DEFINED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
NEXT:               0A52 DEFINED AT LINE 1712 IN Siena.asm
                    > USED AT LINE 799 IN Siena.asm
                    > USED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
NEXT1:              0A61 DEFINED AT LINE 1725 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
ESCAPE:             0A6C DEFINED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
EXIT:               0A70 DEFINED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
CALL:               0A85 DEFINED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 1535 IN Siena.asm
CALL2:              0A98 DEFINED AT LINE 1785 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
EXEC:               0A9A DEFINED AT LINE 1790 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
EXEC2:              0AB2 DEFINED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1794 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1639 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1691 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1495 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 995 IN Siena.asm
                    > USED AT LINE 1017 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1497 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 375 IN Siena.asm
                    > USED AT LINE 1057 IN Siena.asm
                    > USED AT LINE 1065 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 238 IN Siena.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 266 IN Siena.asm
                    > USED AT LINE 870 IN Siena.asm
                    > USED AT LINE 903 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 514 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
                    > USED AT LINE 894 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1503 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
