0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 34 1B               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 36 1B               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 38 1B               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3A 1B               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3C 1B               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 3E 1B               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 42 1B               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 44 1B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 46 1B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 48 1B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 1A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 34 1B               LD   (RST08),HL   
0094   22 36 1B               LD   (RST10),HL   
0097   22 38 1B               LD   (RST18),HL   
009A   22 3A 1B               LD   (RST20),HL   
009D   22 3C 1B               LD   (RST28),HL   
00A0   22 3E 1B               LD   (RST30),HL   
00A3   22 42 1B               LD   (INTVEC),HL   
00A6   22 44 1B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 46 1B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 48 1B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 E3 0A               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Siena programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2022
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                DSIZE:    EQU   $80   
00C6                RSIZE:    EQU   $80   
00C6                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   
00C6                UNUSED:   EQU   $ff   
00C6                NUL:      EQU   0   
00C6                ETX:      EQU   3   
00C6                ESC:      EQU   27   
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a fractional part of calculation			
0182   01 00                  DW   1   ; b width in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d
0188   00 00                  DW   0   ; e
018A   00 00                  DW   0   ; f
018C   00 00                  DW   0   ; g
018E   00 1E                  DW   HEAP   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ! " % , @ \ 00bbIA==
0220   C9                     DB   lsb(nop_)   ; SP
0221   C9                     DB   lsb(nop_)   ; !
0222   C9                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   C9                     DB   lsb(nop_)   ; %
0226   61                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(paren_)   ; (
0229   12                     DB   lsb(parenEnd_)   ; )
022A   90                     DB   lsb(mul_)   ; *
022B   83                     DB   lsb(add_)   ; +
022C   C9                     DB   lsb(nop_)   ; ,
022D   93                     DB   lsb(sub_)   ; -
022E   15                     DB   lsb(dot_)   ; .
022F   B1                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   5E                     DB   lsb(symbol_)   ; :
023B   0C                     DB   lsb(clear_)   ; ;
023C   A4                     DB   lsb(lt_)   ; <
023D   9B                     DB   lsb(eq_)   ; =
023E   A0                     DB   lsb(gt_)   ; >
023F   3F                     DB   lsb(index_)   ; ?
0240   C9                     DB   lsb(nop_)   ; @
0241   5B                     DB   lsb(ident_)   ; A
0242   5B                     DB   lsb(ident_)   ; B
0243   5B                     DB   lsb(ident_)   ; C
0244   5B                     DB   lsb(ident_)   ; D
0245   5B                     DB   lsb(ident_)   ; E
0246   5B                     DB   lsb(ident_)   ; F
0247   5B                     DB   lsb(ident_)   ; G
0248   5B                     DB   lsb(ident_)   ; h
0249   5B                     DB   lsb(ident_)   ; I
024A   5B                     DB   lsb(ident_)   ; J
024B   5B                     DB   lsb(ident_)   ; K
024C   5B                     DB   lsb(ident_)   ; L
024D   5B                     DB   lsb(ident_)   ; M
024E   5B                     DB   lsb(ident_)   ; N
024F   5B                     DB   lsb(ident_)   ; O
0250   5B                     DB   lsb(ident_)   ; p
0251   5B                     DB   lsb(ident_)   ; Q
0252   5B                     DB   lsb(ident_)   ; R
0253   5B                     DB   lsb(ident_)   ; S
0254   5B                     DB   lsb(ident_)   ; T
0255   5B                     DB   lsb(ident_)   ; U
0256   5B                     DB   lsb(ident_)   ; V
0257   5B                     DB   lsb(ident_)   ; W
0258   5B                     DB   lsb(ident_)   ; X
0259   5B                     DB   lsb(ident_)   ; Y
025A   5B                     DB   lsb(ident_)   ; Z
025B   55                     DB   lsb(array_)   ; [
025C   C9                     DB   lsb(nop_)   ; \
025D   58                     DB   lsb(arrayEnd_)   ; ]
025E   75                     DB   lsb(xor_)   ; ^
025F   5B                     DB   lsb(ident_)   ; _
0260   52                     DB   lsb(char_)   ; `    	
0261   5B                     DB   lsb(ident_)   ; a
0262   5B                     DB   lsb(ident_)   ; b
0263   5B                     DB   lsb(ident_)   ; c
0264   5B                     DB   lsb(ident_)   ; d
0265   5B                     DB   lsb(ident_)   ; e
0266   5B                     DB   lsb(ident_)   ; f
0267   5B                     DB   lsb(ident_)   ; g
0268   5B                     DB   lsb(ident_)   ; h
0269   5B                     DB   lsb(ident_)   ; i
026A   5B                     DB   lsb(ident_)   ; j
026B   5B                     DB   lsb(ident_)   ; k
026C   5B                     DB   lsb(ident_)   ; l
026D   5B                     DB   lsb(ident_)   ; m
026E   5B                     DB   lsb(ident_)   ; n
026F   5B                     DB   lsb(ident_)   ; o
0270   5B                     DB   lsb(ident_)   ; p
0271   5B                     DB   lsb(ident_)   ; q
0272   5B                     DB   lsb(ident_)   ; r
0273   5B                     DB   lsb(ident_)   ; s
0274   5B                     DB   lsb(ident_)   ; t
0275   5B                     DB   lsb(ident_)   ; u
0276   5B                     DB   lsb(ident_)   ; v
0277   5B                     DB   lsb(ident_)   ; w
0278   5B                     DB   lsb(ident_)   ; x
0279   5B                     DB   lsb(ident_)   ; y
027A   5B                     DB   lsb(ident_)   ; z
027B   4C                     DB   lsb(block_)   ; {
027C   6C                     DB   lsb(or_)   ; |
027D   4F                     DB   lsb(blockEnd_)   ; }
027E   7E                     DB   lsb(inv_)   ; ~
027F   C9                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0A 04               JP   num   
0303                HEXNUM_:      
0303   C3 3A 04               JP   hexnum   
0306                ARG_:        
0306   C3 EE 04               JP   arg   
0309                STRING_:      
0309   C3 57 04               JP   string   
030C                CLEAR_:      
030C   C3 71 0B               JP   clear   
030F                PAREN_:      
030F   C3 85 04               JP   paren   
0312                PARENEND_:      
0312   C3 92 04               JP   parenEnd   
0315                DOT_:        
0315   E1                     POP   hl   
0316   03                     INC   bc   
0317   0A                     LD   a,(bc)   
0318   FE 68                  CP   "h"   
031A   20 05                  JR   nz,dot1   
031C   CD EE 08               CALL   prthex   
031F   18 17                  JR   dot4   
0321                DOT1:        
0321   FE 73                  CP   "s"   
0323   20 05                  JR   nz,dot2   
0325   CD 11 09               CALL   prtstr   
0328   18 0E                  JR   dot4   
032A                DOT2:        
032A   FE 63                  CP   "c"   
032C   20 06                  JR   nz,dot3   
032E   7D                     LD   a,l   
032F   CD 85 00               CALL   putchar   
0332   18 04                  JR   dot4   
0334                DOT3:        
0334   0B                     DEC   bc   
0335   CD A6 08               CALL   prtdec   
0338                DOT4:        
0338   3E 20                  LD   a," "   
033A   CD 85 00               CALL   putchar   
033D   DD E9                  JP   (ix)   
033F                             ; addr index -- addr2
033F                INDEX_:      
033F   E1                     POP   hl   ; hl = index
0340   D1                     POP   de   ; de = addr
0341   3A 80 1B               LD   a,(vDataWidth)   
0344   3D                     DEC   a   
0345   28 01                  JR   z,index1   
0347   29                     ADD   hl,hl   ; if data width = 2 then double
0348                INDEX1:      
0348   19                     ADD   hl,de   ; add addr
0349   E5                     PUSH   hl   
034A   DD E9                  JP   (ix)   
034C                BLOCK_:      
034C   C3 A1 04               JP   block   
034F                BLOCKEND_:      
034F   C3 DA 04               JP   blockend   
0352                CHAR_:       
0352   C3 70 04               JP   char   
0355                ARRAY_:      
0355   C3 F3 05               JP   array   
0358                ARRAYEND_:      
0358   C3 05 06               JP   arrayEnd   
035B                IDENT_:      
035B   C3 60 07               JP   ident   
035E                SYMBOL_:      
035E   C3 39 07               JP   symbol   
0361                AND_:        
0361   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0362   E1                     POP   hl   
0363   7B                     LD   a,e   
0364   A5                     AND   l   
0365   6F                     LD   l,a   
0366   7A                     LD   a,d   
0367   A4                     AND   h   
0368                AND1:        
0368   67                     LD   h,a   
0369   E5                     PUSH   hl   
036A   DD E9                  JP   (ix)   
036C                OR_:         
036C   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
036D   E1                     POP   hl   
036E   7B                     LD   a,e   
036F   B5                     OR   l   
0370   6F                     LD   l,a   
0371   7A                     LD   a,d   
0372   B4                     OR   h   
0373   18 F3                  JR   and1   
0375                XOR_:        
0375   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0376                XOR1:        
0376   E1                     POP   hl   
0377   7B                     LD   a,e   
0378   AD                     XOR   l   
0379   6F                     LD   l,a   
037A   7A                     LD   a,d   
037B   AC                     XOR   h   
037C   18 EA                  JR   and1   
037E                INV_:        ; Bitwise INVert the top member of the stack
037E   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0381   18 F3                  JR   xor1   
0383                ADD_:        ; add the top 2 members of the stack
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   19                     ADD   hl,de   
0386   E5                     PUSH   hl   
0387   DD E9                  JP   (ix)   
0389                HDOT_:       ; print hexadecimal
0389   E1                     POP   hl   
038A   CD EE 08               CALL   prthex   
038D   C3 34 03               JP   dot3   
0390                MUL_:        
0390   C3 EE 03               JP   mul   
0393                SUB_:        ; Subtract the value 2nd on stack from top of stack
0393   D1                     POP   de   
0394   E1                     POP   hl   ; Entry point for INVert
0395                SUB2:        
0395   B7                     OR   a   ; Entry point for NEGate
0396   ED 52                  SBC   hl,de   
0398   E5                     PUSH   hl   
0399   DD E9                  JP   (ix)   
039B                EQ_:         
039B   E1                     POP   hl   
039C   D1                     POP   de   
039D   C3 B9 07               JP   equals   
03A0                GT_:         
03A0   D1                     POP   de   
03A1   E1                     POP   hl   
03A2   18 02                  JR   lt1   
03A4                LT_:         
03A4   E1                     POP   hl   
03A5   D1                     POP   de   
03A6                LT1:         
03A6   03                     INC   bc   
03A7   0A                     LD   a,(bc)   
03A8   FE 3D                  CP   "="   
03AA   CA C1 07               JP   z,lessthaneq   
03AD   0B                     DEC   bc   
03AE   C3 C6 07               JP   lessthan   
03B1                DIV_:        
03B1   D1                     POP   de   ; get first value
03B2   E1                     POP   hl   ; get 2nd value
03B3   C5                     PUSH   bc   ; preserve the IP
03B4   44 4D                  LD   bc,hl   
03B6   CD 63 08               CALL   divide   
03B9   22 7E 1B               LD   (vFrac),hl   
03BC   C1                     POP   bc   
03BD   D5                     PUSH   de   ; push result
03BE   DD E9                  JP   (ix)   
03C0                COMMENT_:      
03C0   03                     INC   bc   ; point to next char
03C1   0A                     LD   a,(bc)   
03C2   FE 20                  CP   " "   ; terminate on any char less than SP
03C4   30 FA                  JR   nc,comment_   
03C6   0B                     DEC   bc   
03C7   DD E9                  JP   (ix)   
03C9                NOP_:        
03C9   DD E9                  JP   (ix)   
03CB                             ;*******************************************************************
03CB                             ; word operators
03CB                             ;*******************************************************************
03CB                             ; shl
03CB                             ; value count -- value2          shift left count places
03CB                SHL:         
03CB   50 59                  LD   de,bc   ; save IP
03CD   C1                     POP   bc   ; bc = count
03CE   41                     LD   b,c   ; b = loop counter
03CF   E1                     POP   hl   
03D0   04                     INC   b   ; test for counter=0 case
03D1   18 01                  JR   shl2   
03D3                SHL1:        
03D3   29                     ADD   hl,hl   ; left shift hl
03D4                SHL2:        
03D4   10 FD                  DJNZ   shl1   
03D6   E5                     PUSH   hl   
03D7   42 4B                  LD   bc,de   ; restore IP
03D9   DD E9                  JP   (ix)   
03DB                             ; shr
03DB                             ; value count -- value2          shift left count places
03DB                SHR:         
03DB   50 59                  LD   de,bc   ; save IP
03DD   C1                     POP   bc   ; bc = count
03DE   41                     LD   b,c   ; b = loop counter
03DF   E1                     POP   hl   
03E0   04                     INC   b   ; test for counter=0 case
03E1   18 04                  JR   shr2   
03E3                SHR1:        
03E3   CB 3C                  SRL   h   ; right shift hl
03E5   CB 1D                  RR   l   
03E7                SHR2:        
03E7   10 FA                  DJNZ   shr1   
03E9   E5                     PUSH   hl   
03EA   42 4B                  LD   bc,de   ; restore IP
03EC   DD E9                  JP   (ix)   
03EE                MUL:         ;=19
03EE   D1                     POP   de   ; get first value
03EF   E1                     POP   hl   
03F0   C5                     PUSH   bc   ; Preserve the IP
03F1   44                     LD   b,h   ; bc = 2nd value
03F2   4D                     LD   c,l   
03F3   21 00 00               LD   hl,0   
03F6   3E 10                  LD   a,16   
03F8                MUL2:        
03F8   29                     ADD   hl,hl   
03F9   CB 13                  RL   e   
03FB   CB 12                  RL   d   
03FD   30 04                  JR   nc,$+6   
03FF   09                     ADD   hl,bc   
0400   30 01                  JR   nc,$+3   
0402   13                     INC   de   
0403   3D                     DEC   a   
0404   20 F2                  JR   nz,mul2   
0406   C1                     POP   bc   ; Restore the IP
0407   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0408   DD E9                  JP   (ix)   
040A                NUM:         
040A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
040D   0A                     LD   a,(bc)   ; Get numeral or -
040E   FE 2D                  CP   "-"   
0410   20 01                  JR   nz,num0   
0412   03                     INC   bc   ; move to next char, no flags affected
0413                NUM0:        
0413   08                     EX   af,af'   ; save zero flag = 0 for later
0414                NUM1:        
0414   0A                     LD   a,(bc)   ; read digit
0415   D6 30                  SUB   "0"   ; less than 0?
0417   38 13                  JR   c,num2   ; not a digit, exit loop
0419   FE 0A                  CP   10   ; greater that 9?
041B   30 0F                  JR   nc,num2   ; not a digit, exit loop
041D   03                     INC   bc   ; inc IP
041E   54 5D                  LD   de,hl   ; multiply hl * 10
0420   29                     ADD   hl,hl   
0421   29                     ADD   hl,hl   
0422   19                     ADD   hl,de   
0423   29                     ADD   hl,hl   
0424   85                     ADD   a,l   ; add digit in a to hl
0425   6F                     LD   l,a   
0426   3E 00                  LD   a,0   
0428   8C                     ADC   a,h   
0429   67                     LD   h,a   
042A   18 E8                  JR   num1   
042C                NUM2:        
042C   0B                     DEC   bc   
042D   08                     EX   af,af'   ; restore zero flag
042E   20 07                  JR   nz,num3   
0430   EB                     EX   de,hl   ; negate the value of hl
0431   21 00 00               LD   hl,0   
0434   B7                     OR   a   ; jump to sub2
0435   ED 52                  SBC   hl,de   
0437                NUM3:        
0437   E5                     PUSH   hl   ; Put the number on the stack
0438   DD E9                  JP   (ix)   ; and process the next character
043A                HEXNUM:      ; 
043A   21 00 00               LD   hl,0   ; Clear hl to accept the number
043D                HEXNUM1:      
043D   03                     INC   bc   
043E   0A                     LD   a,(bc)   ; Get the character which is a numeral
043F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0441   28 02                  JR   z,hexnum2   ; no a decimal
0443   D6 07                  SUB   7   ; sub 7  to make $a - $F
0445                HEXNUM2:      
0445   D6 30                  SUB   $30   ; Form decimal digit
0447   DA 2C 04               JP   c,num2   
044A   FE 10                  CP   $0F+1   
044C   D2 2C 04               JP   nc,num2   
044F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0450   29                     ADD   hl,hl   ; 4X
0451   29                     ADD   hl,hl   ; 8X
0452   29                     ADD   hl,hl   ; 16X
0453   85                     ADD   a,l   ; add into bottom of hl
0454   6F                     LD   l,a   ; 
0455   18 E6                  JR   hexnum1   
0457                             ; 
0457                STRING:      
0457   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; DE = heap ptr
045B   D5                     PUSH   de   ; save start of string
045C   03                     INC   bc   ; point to next char
045D   18 03                  JR   string2   
045F                STRING1:      
045F   12                     LD   (de),a   
0460   13                     INC   de   ; increase count
0461   03                     INC   bc   ; point to next char
0462                STRING2:      
0462   0A                     LD   a,(bc)   
0463   FE 27                  CP   "'"   ; ' is the string terminator
0465   20 F8                  JR   nz,string1   
0467   AF                     XOR   a   ; write NUL to terminate string
0468   12                     LD   (de),a   
0469   13                     INC   de   
046A   ED 53 8C 1B            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
046E   DD E9                  JP   (ix)   
0470                CHAR:        
0470   21 00 00               LD   hl,0   ; if `` is empty
0473                CHAR1:       
0473   03                     INC   bc   ; point to next char
0474   0A                     LD   a,(bc)   
0475   FE 60                  CP   "`"   ; ` is the string terminator
0477   28 09                  JR   z,char3   
0479   FE 5C                  CP   $5c   ; \ is the escape
047B   20 02                  JR   nz,char2   
047D   03                     INC   bc   
047E   0A                     LD   a,(bc)   
047F                CHAR2:       
047F   6F                     LD   l,a   
0480   18 F1                  JR   char1   
0482                CHAR3:       
0482   E5                     PUSH   hl   
0483   DD E9                  JP   (ix)   
0485                PAREN:       
0485   DD 21 8B 04            LD   ix,paren2   
0489   18 16                  JR   block   
048B                PAREN2:      
048B   DD 21 53 0B            LD   ix,next   
048F   C3 A3 0B               JP   exec   
0492                PARENEND:      
0492   E1                     POP   hl   ; hl = last result
0493   D1                     POP   de   
0494   C1                     POP   bc   
0495   C1                     POP   bc   
0496   E5                     PUSH   hl   
0497   FD 62                  LD   iyh,d   
0499   FD 6B                  LD   iyl,e   
049B   DD 21 53 0B            LD   ix,next   
049F   DD E9                  JP   (ix)   
04A1                BLOCK:       
04A1   03                     INC   bc   
04A2   C5                     PUSH   bc   ; return first opcode of block
04A3   16 01                  LD   d,1   ; nesting: count first parenthesis
04A5                BLOCK1:      ; Skip to end of definition
04A5   0A                     LD   a,(bc)   ; Get the next character
04A6   03                     INC   bc   ; Point to next character
04A7   FE 21                  CP   " " + 1   ; ignore whitespace
04A9   38 FA                  JR   c,block1   
04AB   FE 29                  CP   ")"   
04AD   28 25                  JR   z,block4   
04AF   FE 7D                  CP   "}"   
04B1   28 21                  JR   z,block4   
04B3   FE 5D                  CP   "]"   
04B5   28 1D                  JR   z,block4   
04B7   FE 28                  CP   "("   
04B9   28 13                  JR   z,block3   
04BB   FE 7B                  CP   "{"   
04BD   28 0F                  JR   z,block3   
04BF   FE 5B                  CP   "["   
04C1   28 0B                  JR   z,block3   
04C3   FE 27                  CP   "'"   
04C5   28 07                  JR   z,block3   
04C7   FE 60                  CP   "`"   
04C9   20 DA                  JR   nz,block1   
04CB                BLOCK2:      
04CB   14                     INC   d   
04CC   18 D7                  JR   block1   
04CE                BLOCK3:      
04CE   3E 80                  LD   a,$80   
04D0   AA                     XOR   d   
04D1   47                     LD   b,a   
04D2   18 D1                  JR   block1   
04D4                BLOCK4:      
04D4   15                     DEC   d   
04D5   20 CE                  JR   nz,block1   ; get the next element
04D7   0B                     DEC   bc   ; balanced, exit
04D8   DD E9                  JP   (ix)   
04DA                BLOCKEND:      
04DA   E1                     POP   hl   ; hl = last result
04DB   FD 54                  LD   d,iyh   ; de = BP
04DD   FD 5D                  LD   e,iyl   
04DF   EB                     EX   de,hl   ; hl = BP, de = result
04E0   F9                     LD   sp,hl   ; sp = BP
04E1   E1                     POP   hl   ; hl = old BP
04E2   C1                     POP   bc   ; pop SCP (discard)
04E3   C1                     POP   bc   ; bc = IP
04E4   F9                     LD   sp,hl   ; sp = old BP
04E5   FD 21 00 00            LD   iy,0   ; iy = sp
04E9   FD 39                  ADD   iy,sp   
04EB   D5                     PUSH   de   ; push result
04EC   DD E9                  JP   (ix)   
04EE                ARG:         
04EE   03                     INC   bc   ; get next char
04EF   0A                     LD   a,(bc)   
04F0   D6 31                  SUB   "1"   ; treat as a digit, 1 based index
04F2   E6 07                  AND   $07   ; mask
04F4   87                     ADD   a,a   ; double
04F5   6F                     LD   l,a   ; hl = offset into args
04F6   26 00                  LD   h,0   
04F8   FD 5E 02               LD   e,(iy+2)   ; de = SCP (scope ptr)
04FB   FD 56 03               LD   d,(iy+3)   
04FE   EB                     EX   de,hl   ; hl = SCP - offset
04FF   B7                     OR   a   
0500   ED 52                  SBC   hl,de   
0502   2B                     DEC   hl   ; de = arg
0503   56                     LD   d,(hl)   
0504   2B                     DEC   hl   
0505   5E                     LD   e,(hl)   
0506   D5                     PUSH   de   ; push arg
0507   DD E9                  JP   (ix)   
0509                             ; addr -- value
0509                GET:         
0509   E1                     POP   hl   
050A   16 00                  LD   d,0   
050C   5E                     LD   e,(hl)   
050D   3A 80 1B               LD   a,(vDataWidth)   
0510   3D                     DEC   a   
0511   28 02                  JR   z,get1   
0513   23                     INC   hl   
0514   56                     LD   d,(hl)   
0515                GET1:        
0515   D5                     PUSH   de   
0516   DD E9                  JP   (ix)   
0518                             ; addr value -- value0
0518                SET:         
0518   E1                     POP   hl   
0519   D1                     POP   de   
051A   7E                     LD   a,(hl)   
051B   73                     LD   (hl),e   
051C   5F                     LD   e,a   
051D   3A 80 1B               LD   a,(vDataWidth)   
0520   3D                     DEC   a   
0521   28 04                  JR   z,set1   
0523   23                     INC   hl   
0524   7E                     LD   a,(hl)   
0525   72                     LD   (hl),d   
0526   57                     LD   d,a   
0527                SET1:        
0527   D5                     PUSH   de   ; return old value
0528   DD E9                  JP   (ix)   
052A                             ; 
052A                             ; in:
052A                             ;  pop hl                      ; hl = string
052A                             ;  pop de                      ; de = char
052A                             ; in1:
052A                             ;  ld a,(hl)
052A                             ;  inc hl
052A                             ;  cp 0                        ; is end of string
052A                             ;  jr z,in2
052A                             ;  cp e
052A                             ;  jr nz,in1
052A                             ;  or a                        ; a is never 0, or a resets zero flag
052A                             ; in2:
052A                             ;  ld hl,0                     ; hl = result
052A                             ;  jr z,in3
052A                             ;  dec hl                      ; if nz de = $ffff
052A                             ; in3:
052A                             ;  push hl                     ; push result
052A                             ;  jp (ix)
052A                             ; newAdd2:
052A                             ;  push bc                     ; push IP
052A                             ;  ld e,(iy+2)                 ; get SCP from parent stack frame
052A                             ;  ld d,(iy+3)                 ; make this the old BP for this stack frame
052A                             ;  push de                     ; push SCP
052A                             ;  push iy                     ; push base pointer
052A                             ;  ld iy,(3+2)*2               ; base pointer = stack pointer - (stack frame vars) - 2 args
052A                             ;  add iy,sp                   ;
052A                             ;  ld d,(iy-1)
052A                             ;  ld e,(iy-2)
052A                             ;  ld h,(iy-3)
052A                             ;  ld l,(iy-4)
052A                             ;  add hl,de                   ; hl = hl + de
052A                             ;  ex de,hl                    ; de = result
052A                             ;  pop hl                      ; hl = old BP
052A                             ;  pop bc                      ; pop SCP (discard)
052A                             ;  pop bc                      ; bc = IP
052A                             ;  ld sp,hl                    ; sp = old BP
052A                             ;  ld iy,0
052A                             ;  add iy,sp
052A                             ;  push de                     ; push result
052A                             ;  jp (ix)
052A                IF:          
052A   11 00 00               LD   de,0   ; NUL pointer for else
052D   18 01                  JR   ifte1   
052F                IFTE:        
052F   D1                     POP   de   ; de = else
0530                IFTE1:       
0530   E1                     POP   hl   ; hl = then
0531   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0532   23                     INC   hl   ; check for true
0533   7C                     LD   a,h   
0534   B5                     OR   l   
0535   E1                     POP   hl   ; hl = then
0536   28 01                  JR   z,ifte2   
0538   EB                     EX   de,hl   ; condition = false, hl = else
0539                IFTE2:       
0539   7C                     LD   a,h   ; check if hl is NUL
053A   B5                     OR   l   
053B   28 13                  JR   z,ifte3   
053D   C5                     PUSH   bc   ; push IP
053E   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0541   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0544   D5                     PUSH   de   ; push SCP
0545   FD E5                  PUSH   iy   ; push BP
0547   FD 21 00 00            LD   iy,0   ; iy = sp
054B   FD 39                  ADD   iy,sp   
054D   44 4D                  LD   bc,hl   ; IP = then
054F   0B                     DEC   bc   
0550                IFTE3:       
0550   DD E9                  JP   (ix)   
0552                             ; c b --
0552                             ; loops until c = 0
0552                LOOP:        
0552   D1                     POP   de   ; de = block                    c
0553   E1                     POP   hl   ; hl = condition
0554   D5                     PUSH   de   
0555   C5                     PUSH   bc   ; push IP
0556   42 4B                  LD   bc,de   ; bc = block
0558   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
055B   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
055E   D5                     PUSH   de   ; push SCP
055F   FD E5                  PUSH   iy   ; push BP
0561   FD 21 00 00            LD   iy,0   ; iy = sp
0565   FD 39                  ADD   iy,sp   
0567                LOOP1:       
0567   7D                     LD   a,l   ; bc = block, hl = condition = zero?
0568   B4                     OR   h   
0569   28 21                  JR   z,loop3   
056B   11 81 05               LD   de,loop2-1   ; IP return address
056E   D5                     PUSH   de   
056F   FD 5E 02               LD   e,(iy+2)   ; push parent SCP
0572   FD 56 03               LD   d,(iy+3)   
0575   D5                     PUSH   de   ; 
0576   FD E5                  PUSH   iy   ; push BP
0578   FD 21 00 00            LD   iy,0   ; iy = sp
057C   FD 39                  ADD   iy,sp   
057E   E5                     PUSH   hl   ; push condition
057F   0B                     DEC   bc   
0580   DD E9                  JP   (ix)   
0582                LOOP2:       
0582   1B                     DB   ESC   ; escape from interpreter
0583   FD 4E 06               LD   c,(iy+6)   ; bc = block
0586   FD 46 07               LD   b,(iy+7)   
0589   E1                     POP   hl   ; hl = condition
058A   18 DB                  JR   loop1   
058C                LOOP3:       
058C   FD 54                  LD   d,iyh   ; de = BP
058E   FD 5D                  LD   e,iyl   
0590   EB                     EX   de,hl   ; hl = BP, de = result
0591   F9                     LD   sp,hl   ; sp = BP
0592   E1                     POP   hl   ; hl = old BP
0593   C1                     POP   bc   ; pop SCP (discard)
0594   C1                     POP   bc   ; bc = IP
0595   F9                     LD   sp,hl   ; sp = old BP
0596   FD 21 00 00            LD   iy,0   ; iy = sp
059A   FD 39                  ADD   iy,sp   
059C   DD 21 53 0B            LD   ix,next   
05A0   DD E9                  JP   (ix)   
05A2                SWITCH:      
05A2   E1                     POP   hl   ; get selector from stack
05A3   C5                     PUSH   bc   ; create stack frame, push IP (replace later)
05A4   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05A7   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05AA   D5                     PUSH   de   ; push SCP
05AB   FD E5                  PUSH   iy   ; push BP
05AD   FD 21 00 00            LD   iy,0   ; BP = SP
05B1   FD 39                  ADD   iy,sp   
05B3   E5                     PUSH   hl   ; push selector as first arg of new frame
05B4   DD E9                  JP   (ix)   
05B6                CASE:        
05B6   FD 66 FF               LD   h,(iy-1)   ; hl = selector
05B9   FD 6E FE               LD   l,(iy-2)   
05BC   23                     INC   hl   ; hl -= 1 index from second arg
05BD   29                     ADD   hl,hl   ; hl *= 2 word offset
05BE   FD 54                  LD   d,iyh   ; hl = BP, de = offset
05C0   FD 5D                  LD   e,iyl   
05C2   EB                     EX   de,hl   
05C3   B7                     OR   a   ; hl = BP - offset
05C4   ED 52                  SBC   hl,de   
05C6   54 5D                  LD   de,hl   ; save arg ptr
05C8   2B                     DEC   hl   ; hl += 2
05C9   2B                     DEC   hl   
05CA   B7                     OR   a   ; arg ptr - stack pointer
05CB   ED 72                  SBC   hl,sp   
05CD   30 03                  JR   nc,case0   
05CF   D1                     POP   de   ; pop last arg
05D0   18 05                  JR   case1   
05D2                CASE0:       
05D2   EB                     EX   de,hl   
05D3   2B                     DEC   hl   ; de = arg
05D4   56                     LD   d,(hl)   
05D5   2B                     DEC   hl   
05D6   5E                     LD   e,(hl)   
05D7                CASE1:       
05D7   7A                     LD   a,d   ; is arg == NUL ? then skip
05D8   B3                     OR   e   
05D9   28 09                  JR   z,case2   
05DB   FD 71 04               LD   (iy+4),c   ; update return address in stack frame
05DE   FD 70 05               LD   (iy+5),b   
05E1   42 4B                  LD   bc,de   ; IP = arg
05E3   0B                     DEC   bc   
05E4                CASE2:       
05E4   DD E9                  JP   (ix)   
05E6                WORDS:       
05E6   21 02 00               LD   hl,2   
05E9   18 03                  JR   bytes1   
05EB                BYTES:       
05EB   21 01 00               LD   hl,1   
05EE                BYTES1:      
05EE   22 80 1B               LD   (vDataWidth),hl   
05F1   DD E9                  JP   (ix)   
05F3                ARRAY:       
05F3   C5                     PUSH   bc   ; create stack frame, push IP
05F4   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
05F7   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
05FA   D5                     PUSH   de   ; push SCP
05FB   FD E5                  PUSH   iy   ; push BP
05FD   FD 21 00 00            LD   iy,0   ; BP = SP
0601   FD 39                  ADD   iy,sp   
0603   DD E9                  JP   (ix)   
0605                ARRAYEND:      
0605   FD 54                  LD   d,iyh   ; de = BP
0607   FD 5D                  LD   e,iyl   
0609   DD 62                  LD   ixh,d   ; ix = BP
060B   DD 6B                  LD   ixl,e   
060D   62 6B                  LD   hl,de   ; hl = de
060F   B7                     OR   a   
0610   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0612   CB 3C                  SRL   h   
0614   CB 1D                  RR   l   
0616   EB                     EX   de,hl   ; de = count
0617   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
061A   73                     LD   (hl),e   
061B   23                     INC   hl   
061C   72                     LD   (hl),d   
061D   23                     INC   hl   ; hl = array[0], de = count
061E   3A 80 1B               LD   a,(vDataWidth)   ; vDataWidth=1?
0621   FE 01                  CP   1   
0623   20 10                  JR   nz,arrayEnd2   
0625                ARRAYEND1:      ; byte
0625   DD 7E FE               LD   a,(ix-2)   
0628   77                     LD   (hl),a   
0629   23                     INC   hl   
062A   DD 2B                  DEC   ix   
062C   DD 2B                  DEC   ix   
062E   1B                     DEC   de   
062F   7B                     LD   a,e   
0630   B2                     OR   d   
0631   20 F2                  JR   nz,arrayEnd1   
0633   18 13                  JR   arrayEnd3   
0635                ARRAYEND2:      ; word
0635   DD 7E FE               LD   a,(ix-2)   
0638   77                     LD   (hl),a   
0639   23                     INC   hl   
063A   DD 7E FF               LD   a,(ix-1)   
063D   77                     LD   (hl),a   
063E   23                     INC   hl   
063F   DD 2B                  DEC   ix   
0641   DD 2B                  DEC   ix   
0643   1B                     DEC   de   
0644   7B                     LD   a,e   
0645   B2                     OR   d   
0646   20 ED                  JR   nz,arrayEnd2   
0648                ARRAYEND3:      
0648   FD 54                  LD   d,iyh   ; de = BP, hl = end of array
064A   FD 5D                  LD   e,iyl   
064C   EB                     EX   de,hl   ; hl = BP, de = end of array
064D   F9                     LD   sp,hl   ; sp = BP
064E   E1                     POP   hl   ; hl = old BP, de = end of array
064F   DD E1                  POP   ix   ; pop SCP (discard)
0651   DD E1                  POP   ix   ; pop IP (discard)
0653   F9                     LD   sp,hl   ; sp = old BP
0654   FD 21 00 00            LD   iy,0   ; iy = sp
0658   FD 39                  ADD   iy,sp   
065A   DD 21 53 0B            LD   ix,next   
065E   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[0], de = end of array
0661   23                     INC   hl   
0662   23                     INC   hl   
0663   E5                     PUSH   hl   ; return array[0]
0664   EB                     EX   de,hl   ; hl = end of array, de = array[0]
0665   B7                     OR   a   
0666   ED 52                  SBC   hl,de   ; hl = size = end of array - array[0]
0668   EB                     EX   de,hl   
0669   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = array[-2]
066C   73                     LD   (hl),e   ; array[-2] = size
066D   23                     INC   hl   
066E   72                     LD   (hl),d   
066F   DD E9                  JP   (ix)   
0671                             ; str -- num
0671                HASH:        
0671   E1                     POP   hl   
0672   C5                     PUSH   bc   
0673   44 4D                  LD   bc,hl   
0675   CD 00 08               CALL   hashStr   
0678   C1                     POP   bc   
0679   E5                     PUSH   hl   
067A   DD E9                  JP   (ix)   
067C                             ; symbol addr --
067C                DEF:         
067C   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
067E   E3                     EX   (sp),hl   
067F   EB                     EX   de,hl   
0680   06 01                  LD   b,1   ; b = nesting
0682   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap
0685   36 CD                  LD   (hl),$cd   ; compile "call exec"
0687   23                     INC   hl   
0688   36 8E                  LD   (hl),lsb(call)   
068A   23                     INC   hl   
068B   36 0B                  LD   (hl),msb(call)   
068D   23                     INC   hl   
068E                DEF1:        
068E   1A                     LD   a,(de)   
068F   13                     INC   de   
0690   77                     LD   (hl),a   
0691   23                     INC   hl   
0692   FE 29                  CP   ")"   
0694   28 25                  JR   z,def4   
0696   FE 7D                  CP   "}"   
0698   28 21                  JR   z,def4   
069A   FE 5D                  CP   "]"   
069C   28 1D                  JR   z,def4   
069E   FE 28                  CP   "("   
06A0   28 13                  JR   z,def3   
06A2   FE 7B                  CP   "{"   
06A4   28 0F                  JR   z,def3   
06A6   FE 5B                  CP   "["   
06A8   28 0B                  JR   z,def3   
06AA   FE 27                  CP   "'"   
06AC   28 07                  JR   z,def3   
06AE   FE 60                  CP   "`"   
06B0   20 DC                  JR   nz,def1   
06B2                DEF2:        
06B2   04                     INC   b   
06B3   18 D9                  JR   def1   
06B5                DEF3:        
06B5   3E 80                  LD   a,$80   
06B7   A8                     XOR   b   
06B8   47                     LD   b,a   
06B9   18 D3                  JR   def1   
06BB                DEF4:        
06BB   05                     DEC   b   
06BC   20 D0                  JR   nz,def1   ; get the next element
06BE   AF                     XOR   a   ; end with NUL ??? needed?
06BF   77                     LD   (hl),a   
06C0   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; de = start of defintion
06C4   22 8C 1B               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
06C7   E1                     POP   hl   ; de = addr, hl = IP
06C8   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06C9   44 4D                  LD   bc,hl   ; bc = symbol
06CB   CD 19 08               CALL   defineEntry   
06CE   38 00                  JR   c,def5   
06D0                             ; call error
06D0                             ; .cstr "Def Collision"
06D0                DEF5:        
06D0   C1                     POP   bc   
06D1   DD E9                  JP   (ix)   
06D3                             ; symbol value --
06D3                LET:         
06D3   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06D5   E3                     EX   (sp),hl   
06D6   EB                     EX   de,hl   
06D7   06 01                  LD   b,1   ; b = nesting
06D9   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap
06DC   36 CD                  LD   (hl),$cd   ; compile "call dovar"
06DE   23                     INC   hl   
06DF   36 BD                  LD   (hl),lsb(dovar)   
06E1   23                     INC   hl   
06E2   36 0B                  LD   (hl),msb(dovar)   
06E4   23                     INC   hl   
06E5                LET1:        
06E5   73                     LD   (hl),e   
06E6   23                     INC   hl   
06E7   72                     LD   (hl),d   
06E8   2B                     DEC   hl   
06E9   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; de = start of defintion
06ED   22 8C 1B               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
06F0   E1                     POP   hl   ; de = addr, hl = IP
06F1   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
06F2   44 4D                  LD   bc,hl   ; bc = symbol
06F4   CD 19 08               CALL   defineEntry   
06F7   38 00                  JR   c,let2   
06F9                             ; call error
06F9                             ; .cstr "Let Collision"
06F9                LET2:        
06F9   C1                     POP   bc   
06FA   DD E9                  JP   (ix)   
06FC                             ; symbol value --
06FC                CONST:       
06FC   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
06FE   E3                     EX   (sp),hl   
06FF   EB                     EX   de,hl   
0700   06 01                  LD   b,1   ; b = nesting
0702   2A 8C 1B               LD   hl,(vHeapPtr)   ; hl = heap
0705   36 CD                  LD   (hl),$cd   ; compile "call doconst"
0707   23                     INC   hl   
0708   36 BF                  LD   (hl),lsb(doconst)   
070A   23                     INC   hl   
070B   36 0B                  LD   (hl),msb(doconst)   
070D   23                     INC   hl   
070E                CONST1:      
070E   73                     LD   (hl),e   
070F   23                     INC   hl   
0710   72                     LD   (hl),d   
0711   23                     INC   hl   
0712   ED 5B 8C 1B            LD   de,(vHeapPtr)   ; de = start of defintion
0716   22 8C 1B               LD   (vHeapPtr),hl   ; update heap ptr to end of defintion
0719   E1                     POP   hl   ; de = addr, hl = IP
071A   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
071B   44 4D                  LD   bc,hl   ; bc = symbol
071D   CD 19 08               CALL   defineEntry   
0720   38 00                  JR   c,const2   
0722                             ; call error
0722                             ; .cstr "Const Collision"
0722                CONST2:      
0722   C1                     POP   bc   
0723   DD E9                  JP   (ix)   
0725                             ; str -- addr
0725                ADDR:        
0725   E1                     POP   hl   ; hl = hash
0726   C5                     PUSH   bc   
0727   44 4D                  LD   bc,hl   
0729   CD 3F 08               CALL   lookupEntry   
072C   38 03                  JR   c,addr1   
072E   21 00 00               LD   hl,0   
0731                             ; call printStr		
0731                             ; .cstr "Undefined"
0731                             ; jp interpret
0731                ADDR1:       
0731   C1                     POP   bc   
0732   11 03 00               LD   de,3   
0735   19                     ADD   hl,de   
0736   E5                     PUSH   hl   
0737   DD E9                  JP   (ix)   
0739                SYMBOL:      
0739   03                     INC   bc   
073A   11 00 1A               LD   de,PAD   
073D   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
073F   18 02                  JR   symbol1   
0741                SYMBOL0:      ; copy to PAD area
0741   03                     INC   bc   ; characters that are part of the identifier
0742   13                     INC   de   
0743                SYMBOL1:      ; 0-9 A-Z a-z _
0743   0A                     LD   a,(bc)   
0744   12                     LD   (de),a   
0745   B7                     OR   a   
0746   28 0A                  JR   z,symbol2   
0748   6F                     LD   l,a   
0749   7E                     LD   a,(hl)   
074A   FE 5B                  CP   lsb(ident_)   
074C   28 F3                  JR   z,symbol0   
074E   FE 00                  CP   lsb(num_)   
0750   28 EF                  JR   z,symbol0   
0752                SYMBOL2:      
0752   0B                     DEC   bc   
0753   AF                     XOR   a   
0754   12                     LD   (de),a   ; terminate string with NUL
0755   C5                     PUSH   bc   
0756   01 00 1A               LD   bc,PAD   
0759   CD 00 08               CALL   hashStr   ; hl = hash
075C   C1                     POP   bc   
075D   E5                     PUSH   hl   
075E   DD E9                  JP   (ix)   
0760                IDENT:       
0760   11 00 1A               LD   de,PAD   
0763   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
0765   18 02                  JR   ident1   
0767                IDENT0:      ; copy to PAD area
0767   03                     INC   bc   ; characters that are part of the identifier
0768   13                     INC   de   
0769                IDENT1:      ; 0-9 A-Z a-z _
0769   0A                     LD   a,(bc)   
076A   12                     LD   (de),a   
076B   B7                     OR   a   
076C   28 0A                  JR   z,ident2   
076E   6F                     LD   l,a   
076F   7E                     LD   a,(hl)   
0770   FE 5B                  CP   lsb(ident_)   
0772   28 F3                  JR   z,ident0   
0774   FE 00                  CP   lsb(num_)   
0776   28 EF                  JR   z,ident0   
0778                IDENT2:      
0778   0B                     DEC   bc   
0779   AF                     XOR   a   
077A   12                     LD   (de),a   ; terminate string with NUL
077B   C5                     PUSH   bc   
077C   01 00 1A               LD   bc,PAD   
077F   CD 00 08               CALL   hashStr   ; hl = hash
0782   44 4D                  LD   bc,hl   
0784   CD 3F 08               CALL   lookupEntry   
0787   C1                     POP   bc   
0788   38 02                  JR   c,ident3   ; todo: no entry? print an error message
078A   DD E9                  JP   (ix)   
078C                IDENT3:      
078C   E9                     JP   (hl)   
078D                FRAC:        
078D   2A 7E 1B               LD   hl,(vFrac)   
0790   E5                     PUSH   hl   
0791   DD E9                  JP   (ix)   
0793                SQRT1:       
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   
0795   CD 7C 08               CALL   squareRoot   
0798   ED 43 7E 1B            LD   (vFrac),bc   
079C   C1                     POP   bc   
079D   D5                     PUSH   de   
079E   DD E9                  JP   (ix)   
07A0                ABS1:        
07A0   E1                     POP   hl   
07A1   CB 7C                  BIT   7,h   
07A3   C8                     RET   z   
07A4   AF                     XOR   a   
07A5   95                     SUB   l   
07A6   6F                     LD   l,a   
07A7   9F                     SBC   a,a   
07A8   94                     SUB   h   
07A9   67                     LD   h,a   
07AA   E5                     PUSH   hl   
07AB   DD E9                  JP   (ix)   
07AD                MOD:         
07AD   D1                     POP   de   ; get first value
07AE   E1                     POP   hl   ; get 2nd value
07AF   C5                     PUSH   bc   ; preserve the IP
07B0   44 4D                  LD   bc,hl   
07B2   CD 63 08               CALL   divide   
07B5   C1                     POP   bc   
07B6   E5                     PUSH   hl   ; push remainder
07B7   DD E9                  JP   (ix)   
07B9                             ; hl = value1, de = value2
07B9                             ; hl = result
07B9                EQUALS:      
07B9   B7                     OR   a   ; reset the carry flag
07BA   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
07BC   28 10                  JR   z,true1   
07BE   C3 D4 07               JP   false1   
07C1                             ; hl = value1 de = value2
07C1                             ; hl = result
07C1                LESSTHANEQ:      
07C1   B7                     OR   a   
07C2   ED 52                  SBC   hl,de   
07C4   18 05                  JR   lessthan1   
07C6                             ; hl = value1 de = value2
07C6                             ; hl = result
07C6                LESSTHAN:      
07C6   B7                     OR   a   
07C7   ED 52                  SBC   hl,de   
07C9   28 09                  JR   z,false1   
07CB                LESSTHAN1:      
07CB   FA D4 07               JP   m,false1   
07CE                TRUE1:       
07CE   21 FF FF               LD   hl,TRUE   
07D1   E5                     PUSH   hl   
07D2   DD E9                  JP   (ix)   
07D4                FALSE1:      
07D4   21 00 00               LD   hl,FALSE   
07D7   E5                     PUSH   hl   
07D8   DD E9                  JP   (ix)   
07DA                             ; Z80 port input
07DA                             ; port -- value
07DA                INPUT:       
07DA   E1                     POP   hl   
07DB   59                     LD   e,c   ; save IP
07DC   4D                     LD   c,l   
07DD   ED 68                  IN   l,(c)   
07DF   26 00                  LD   h,0   
07E1   4B                     LD   c,e   ; restore IP
07E2   E5                     PUSH   hl   
07E3   DD E9                  JP   (ix)   
07E5                             ; Z80 port output
07E5                             ; value port --
07E5                OUTPUT:      
07E5   E1                     POP   hl   
07E6   59                     LD   e,c   ; save IP
07E7   4D                     LD   c,l   
07E8   E1                     POP   hl   
07E9   ED 69                  OUT   (c),l   
07EB   4B                     LD   c,e   ; restore IP
07EC   DD E9                  JP   (ix)   
07EE                KEY:         
07EE   CD 81 00               CALL   getchar   
07F1   26 00                  LD   h,0   
07F3   6F                     LD   l,a   
07F4   E5                     PUSH   hl   
07F5   DD E9                  JP   (ix)   
07F7                NEG:         
07F7   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
07FA   D1                     POP   de   
07FB   C3 95 03               JP   sub2   ; use the SUBtract routine
07FE                FILTER:      
07FE                MAP:         
07FE                SCAN:        
07FE   DD E9                  JP   (ix)   
0800                             ; -------------------------------------------------------------------------------
0800                             ; hash C-string
0800                             ; BC = str
0800                             ; HL = hash
0800                HASHSTR:      
0800   21 00 00               LD   hl,0   
0803                HASHSTR1:      
0803   0A                     LD   a,(bc)   ; load next char
0804   03                     INC   bc   
0805   FE 00                  CP   0   ; NUL?
0807   C8                     RET   z   
0808                HASHSTR2:      
0808   16 00                  LD   d,0   
080A   5F                     LD   e,a   
080B   19                     ADD   hl,de   
080C   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
080E   29                     ADD   hl,hl   ; shift left
080F   19                     ADD   hl,de   ; add
0810   29                     ADD   hl,hl   ; shift left
0811   29                     ADD   hl,hl   ; shift left
0812   29                     ADD   hl,hl   ; shift left
0813   29                     ADD   hl,hl   ; shift left
0814   29                     ADD   hl,hl   ; shift left
0815   29                     ADD   hl,hl   ; shift left
0816   19                     ADD   hl,de   ; add
0817   18 EA                  JR   hashStr1   
0819                             ; add entry to hash slots and hash pointers
0819                             ; bc = hash (b = hi, c = lo), de = addr
0819                             ; sets carry if successful
0819                DEFINEENTRY:      
0819   CB 21                  SLA   c   ; lo = lo * 2
081B   69                     LD   l,c   ; lo1 = lo
081C   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
081E                DEFINEENTRY0:      
081E   7E                     LD   a,(hl)   ; a = (lo1)
081F   FE FF                  CP   UNUSED   ; is it unused?
0821   28 12                  JR   z,defineEntry3   ; yes, add entry
0823   79                     LD   a,c   ; a = lo
0824   BE                     CP   (hl)   ; compare (lo1) with lo
0825   20 06                  JR   nz,defineEntry1   ; no match loop around
0827   2C                     INC   l   
0828   78                     LD   a,b   ; a = hi
0829   BE                     CP   (hl)   ; compare (lo1+1) with hi
082A   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
082C   2D                     DEC   l   ; restore l
082D                DEFINEENTRY1:      
082D   2C                     INC   l   ; try next entry
082E   2C                     INC   l   
082F   79                     LD   a,c   ; compare lo and lo1
0830   BD                     CP   l   ; if equal then there's no space left, reject
0831   20 EB                  JR   nz,defineEntry0   
0833                DEFINEENTRY2:      
0833   B7                     OR   a   ; clear carry flag, failure
0834   C9                     RET      
0835                DEFINEENTRY3:      ; new entry
0835   71                     LD   (hl),c   ; (lo1) = hash lo
0836   23                     INC   hl   
0837   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0838   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
083A   72                     LD   (hl),d   
083B   2B                     DEC   hl   
083C   73                     LD   (hl),e   ; (slot + 2) = address
083D   37                     SCF      ; set carry flag, success
083E   C9                     RET      
083F                             ; looks up hash and returns address
083F                             ; bc = hash
083F                             ; returns addr in hl, sets carry if successful
083F                LOOKUPENTRY:      
083F   CB 21                  SLA   c   ; lo = lo * 2
0841   69                     LD   l,c   ; lo1 = lo
0842   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0844                LOOKUPENTRY0:      
0844   7E                     LD   a,(hl)   ; a = (hl), slot
0845   FE FF                  CP   UNUSED   ; is it unused?
0847   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0849   79                     LD   a,c   ; a = lo
084A   BE                     CP   (hl)   ; compare (lo1) with lo
084B   20 06                  JR   nz,lookupEntry1   ; no match loop around
084D   2C                     INC   l   
084E   78                     LD   a,b   ; a = hi
084F   BE                     CP   (hl)   ; compare (lo1+1) with hi
0850   28 09                  JR   z,lookupEntry3   
0852   2D                     DEC   l   
0853                LOOKUPENTRY1:      
0853   2C                     INC   l   
0854   2C                     INC   l   
0855   79                     LD   a,c   
0856   BD                     CP   l   ; no space left, reject
0857   20 EB                  JR   nz,lookupEntry0   
0859                LOOKUPENTRY2:      
0859   B7                     OR   a   ; clear carry flag, failure
085A   C9                     RET      
085B                LOOKUPENTRY3:      
085B   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
085D   56                     LD   d,(hl)   
085E   2D                     DEC   l   ; restore l
085F   5E                     LD   e,(hl)   ; (slot + 2) = address
0860   EB                     EX   de,hl   
0861   37                     SCF      
0862   C9                     RET      
0863                             ; division subroutine.
0863                             ; bc: divisor, de: dividend, hl: remainder
0863                DIVIDE:      
0863   21 00 00               LD   hl,0   ; zero the remainder
0866   3E 10                  LD   a,16   ; loop counter
0868                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0868   CB 21                  SLA   c   
086A   CB 10                  RL   b   
086C   ED 6A                  ADC   hl,hl   
086E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0870   38 03                  JR   c,divide2   
0872   0C                     INC   c   
0873   18 01                  JR   divide3   
0875                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0875   19                     ADD   hl,de   
0876                DIVIDE3:      
0876   3D                     DEC   a   
0877   20 EF                  JR   nz,divide1   
0879   50 59                  LD   de,bc   ; result from bc to de
087B   C9                     RET      
087C                             ; squareroot
087C                             ; Input: HL = value
087C                             ; Result: DE = square root BC = remainder
087C                SQUAREROOT:      
087C   01 00 08               LD   bc,0800h   
087F   59                     LD   e,c   
0880   AF                     XOR   a   
0881                SQUAREROOT1:      
0881   29                     ADD   hl,hl   
0882   CB 11                  RL   c   
0884   ED 6A                  ADC   hl,hl   
0886   CB 11                  RL   c   
0888   30 02                  JR   nc,$+4   
088A   CB C5                  SET   0,l   
088C   7B                     LD   a,e   
088D   87                     ADD   a,a   
088E   5F                     LD   e,a   
088F   87                     ADD   a,a   
0890   CB 45                  BIT   0,l   
0892   20 03                  JR   nz,$+5   
0894   91                     SUB   c   
0895   30 05                  JR   nc,squareRoot4   
0897   79                     LD   a,c   
0898   93                     SUB   e   
0899   1C                     INC   e   
089A   93                     SUB   e   
089B   4F                     LD   c,a   
089C                SQUAREROOT4:      
089C   10 E3                  DJNZ   squareRoot1   
089E   CB 45                  BIT   0,l   
08A0   28 01                  JR   z,squareRoot5   
08A2   04                     INC   b   
08A3                SQUAREROOT5:      
08A3   16 00                  LD   d,0   
08A5   C9                     RET      
08A6                PRTDEC:      
08A6   CB 7C                  BIT   7,h   
08A8   28 0B                  JR   z,prtdec0   
08AA   3E 2D                  LD   a,"-"   
08AC   CD 85 00               CALL   putchar   
08AF   AF                     XOR   a   
08B0   95                     SUB   l   
08B1   6F                     LD   l,a   
08B2   9F                     SBC   a,a   
08B3   94                     SUB   h   
08B4   67                     LD   h,a   
08B5                PRTDEC0:      
08B5   C5                     PUSH   bc   
08B6   0E 00                  LD   c,0   ; leading zeros flag = false
08B8   11 F0 D8               LD   de,-10000   
08BB   CD D7 08               CALL   prtdec1   
08BE   11 18 FC               LD   de,-1000   
08C1   CD D7 08               CALL   prtdec1   
08C4   11 9C FF               LD   de,-100   
08C7   CD D7 08               CALL   prtdec1   
08CA   1E F6                  LD   e,-10   
08CC   CD D7 08               CALL   prtdec1   
08CF   0C                     INC   c   ; flag = true for at least digit
08D0   1E FF                  LD   e,-1   
08D2   CD D7 08               CALL   prtdec1   
08D5   C1                     POP   bc   
08D6   C9                     RET      
08D7                PRTDEC1:      
08D7   06 2F                  LD   b,"0"-1   
08D9                PRTDEC2:      
08D9   04                     INC   b   
08DA   19                     ADD   hl,de   
08DB   38 FC                  JR   c,prtdec2   
08DD   ED 52                  SBC   hl,de   
08DF   3E 30                  LD   a,"0"   
08E1   B8                     CP   b   
08E2   20 05                  JR   nz,prtdec3   
08E4   AF                     XOR   a   
08E5   B1                     OR   c   
08E6   C8                     RET   z   
08E7   18 01                  JR   prtdec4   
08E9                PRTDEC3:      
08E9   0C                     INC   c   
08EA                PRTDEC4:      
08EA   78                     LD   a,b   
08EB   C3 85 00               JP   putchar   
08EE                PRTHEX:      ; display hl as a 16-bit number in hex.
08EE   C5                     PUSH   bc   ; preserve the IP
08EF   7C                     LD   a,h   
08F0   CD F9 08               CALL   prthex2   
08F3   7D                     LD   a,l   
08F4   CD F9 08               CALL   prthex2   
08F7   C1                     POP   bc   
08F8   C9                     RET      
08F9                PRTHEX2:      
08F9   4F                     LD   c,a   
08FA   1F                     RRA      
08FB   1F                     RRA      
08FC   1F                     RRA      
08FD   1F                     RRA      
08FE   CD 02 09               CALL   prthex3   
0901   79                     LD   a,c   
0902                PRTHEX3:      
0902   E6 0F                  AND   0x0F   
0904   C6 90                  ADD   a,0x90   
0906   27                     DAA      
0907   CE 40                  ADC   a,0x40   
0909   27                     DAA      
090A   C3 85 00               JP   putchar   
090D                PRTSTR0:      
090D   CD 85 00               CALL   putchar   
0910   23                     INC   hl   
0911                PRTSTR:      
0911   7E                     LD   a,(hl)   
0912   B7                     OR   a   
0913   20 F8                  JR   nz,prtstr0   
0915   C9                     RET      
0916                             ; **************************************************************************
0916                             ; calculate nesting value
0916                             ; a is char to be tested,
0916                             ; e is the nesting value (initially 0)
0916                             ; e is increased by ( and [
0916                             ; e is decreased by ) and ]
0916                             ; e has its bit 7 toggled by `
0916                             ; limited to 127 levels
0916                             ; **************************************************************************
0916                NESTING:      
0916   FE 22                  CP   $22   ; quote char
0918   20 0A                  JR   nz,nesting1   
091A   CB 7B                  BIT   7,e   
091C   28 03                  JR   z,nesting1a   
091E   CB BB                  RES   7,e   
0920   C9                     RET      
0921                NESTING1A:      
0921   CB FB                  SET   7,e   
0923   C9                     RET      
0924                NESTING1:      
0924   CB 7B                  BIT   7,e   
0926   C0                     RET   nz   
0927   FE 7B                  CP   "{"   
0929   28 08                  JR   z,nesting2   
092B   FE 5B                  CP   "["   
092D   28 04                  JR   z,nesting2   
092F   FE 28                  CP   "("   
0931   20 02                  JR   nz,nesting3   
0933                NESTING2:      
0933   1C                     INC   e   
0934   C9                     RET      
0935                NESTING3:      
0935   FE 7D                  CP   "}"   
0937   28 07                  JR   z,nesting4   
0939   FE 5D                  CP   "]"   
093B   28 03                  JR   z,nesting4   
093D   FE 29                  CP   ")"   
093F   C0                     RET   nz   
0940                NESTING4:      
0940   1D                     DEC   e   
0941   C9                     RET      
0942                PROMPT:      
0942   CD 52 09               CALL   printStr   
0945   0D 0A 3E 20 00         .CSTR   "\r\n> "   
094A   C9                     RET      
094B                CRLF:        
094B   CD 52 09               CALL   printStr   
094E   0D 0A 00               .CSTR   "\r\n"   
0951   C9                     RET      
0952                PRINTSTR:      
0952   E3                     EX   (sp),hl   ; swap			
0953   CD 11 09               CALL   prtstr   
0956   23                     INC   hl   ; inc past NUL
0957   E3                     EX   (sp),hl   ; put it back	
0958   C9                     RET      
0959                DEFINE:      
0959   E1                     POP   hl   
095A   7E                     LD   a,(hl)   
095B   23                     INC   hl   
095C   44 4D                  LD   bc,hl   
095E   5F                     LD   e,a   
095F   16 00                  LD   d,0   
0961   19                     ADD   hl,de   
0962   5E                     LD   e,(hl)   
0963   23                     INC   hl   
0964   56                     LD   d,(hl)   
0965   23                     INC   hl   
0966   E5                     PUSH   hl   ; bc = str
0967   D5                     PUSH   de   
0968   CD 00 08               CALL   hashStr   ; hl = hash
096B   D1                     POP   de   
096C   44 4D                  LD   bc,hl   
096E   C3 19 08               JP   defineEntry   
0971                INIT:        
0971   DD 21 53 0B            LD   ix,next   
0975   FD 21 00 1A            LD   iy,DSTACK   
0979   21 80 01               LD   hl,isysVars   
097C   11 7E 1B               LD   de,sysVars   
097F   01 10 00               LD   bc,8 * 2   
0982   ED B0                  LDIR      
0984   3E FF                  LD   a,UNUSED   
0986   06 00                  LD   b,0   
0988   21 00 1C               LD   hl,hashSlots   
098B                INIT1:       
098B   77                     LD   (hl),a   
098C   23                     INC   hl   
098D   10 FC                  DJNZ   init1   
098F   CD 59 09               CALL   define   
0992   04 61 62 73 00         .PSTR   "abs",0   
0997   A0 07                  DW   abs1   
0999   CD 59 09               CALL   define   
099C   05 61 64 64 72 00      .PSTR   "addr",0   
09A2   25 07                  DW   addr   
09A4   CD 59 09               CALL   define   
09A7   06 62 79 74 65 73 00   .PSTR   "bytes",0   
09AE   EB 05                  DW   bytes   
09B0   CD 59 09               CALL   define   
09B3   05 63 61 6C 6C 00      .PSTR   "call",0   
09B9   8E 0B                  DW   call   
09BB   CD 59 09               CALL   define   
09BE   05 63 61 73 65 00      .PSTR   "case",0   
09C4   B6 05                  DW   case   
09C6   CD 59 09               CALL   define   
09C9   06 63 6F 6E 73 74 00   .PSTR   "const",0   
09D0   FC 06                  DW   const   
09D2   CD 59 09               CALL   define   
09D5   04 64 65 66 00         .PSTR   "def",0   
09DA   7C 06                  DW   def   
09DC   CD 59 09               CALL   define   
09DF   05 65 78 65 63 00      .PSTR   "exec",0   
09E5   A3 0B                  DW   exec   
09E7   CD 59 09               CALL   define   
09EA   06 66 61 6C 73 65 00   .PSTR   "false",0   
09F1   00 00                  DW   false   
09F3   CD 59 09               CALL   define   
09F6   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
09FE   FE 07                  DW   filter   
0A00   CD 59 09               CALL   define   
0A03   05 66 72 61 63 00      .PSTR   "frac",0   
0A09   8D 07                  DW   frac   
0A0B   CD 59 09               CALL   define   
0A0E   04 67 65 74 00         .PSTR   "get",0   
0A13   09 05                  DW   get   
0A15   CD 59 09               CALL   define   
0A18   05 68 61 73 68 00      .PSTR   "hash",0   
0A1E   71 06                  DW   hash   
0A20   CD 59 09               CALL   define   
0A23   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A2A   DA 07                  DW   input   
0A2C   CD 59 09               CALL   define   
0A2F   03 69 66 00            .PSTR   "if",0   
0A33   2A 05                  DW   if   
0A35   CD 59 09               CALL   define   
0A38   05 69 66 74 65 00      .PSTR   "ifte",0   
0A3E   2F 05                  DW   ifte   
0A40   CD 59 09               CALL   define   
0A43   04 6B 65 79 00         .PSTR   "key",0   
0A48   EE 07                  DW   key   
0A4A   CD 59 09               CALL   define   
0A4D   04 6C 65 74 00         .PSTR   "let",0   
0A52   D3 06                  DW   let   
0A54   CD 59 09               CALL   define   
0A57   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0A5D   52 05                  DW   loop   
0A5F   CD 59 09               CALL   define   
0A62   04 6D 61 70 00         .PSTR   "map",0   
0A67   FE 07                  DW   map   
0A69   CD 59 09               CALL   define   
0A6C   04 6D 6F 64 00         .PSTR   "mod",0   
0A71   AD 07                  DW   mod   
0A73   CD 59 09               CALL   define   
0A76   04 6E 65 67 00         .PSTR   "neg",0   
0A7B   F7 07                  DW   neg   
0A7D   CD 59 09               CALL   define   
0A80   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0A88   E5 07                  DW   output   
0A8A   CD 59 09               CALL   define   
0A8D   05 73 63 61 6E 00      .PSTR   "scan",0   
0A93   01 00                  DW   scan   
0A95   CD 59 09               CALL   define   
0A98   04 73 65 74 00         .PSTR   "set",0   
0A9D   18 05                  DW   set   
0A9F   CD 59 09               CALL   define   
0AA2   04 73 68 6C 00         .PSTR   "shl",0   
0AA7   CB 03                  DW   shl   
0AA9   CD 59 09               CALL   define   
0AAC   04 73 68 72 00         .PSTR   "shr",0   
0AB1   DB 03                  DW   shr   
0AB3   CD 59 09               CALL   define   
0AB6   05 73 71 72 74 00      .PSTR   "sqrt",0   
0ABC   93 07                  DW   sqrt1   
0ABE   CD 59 09               CALL   define   
0AC1   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0AC9   A2 05                  DW   switch   
0ACB   CD 59 09               CALL   define   
0ACE   05 74 72 75 65 00      .PSTR   "true",0   
0AD4   FF FF                  DW   true   
0AD6   CD 59 09               CALL   define   
0AD9   06 77 6F 72 64 73 00   .PSTR   "words",0   
0AE0   E6 05                  DW   words   
0AE2   C9                     RET      
0AE3                START:       
0AE3   31 00 1A               LD   sp,DSTACK   ; start of Siena
0AE6   CD 71 09               CALL   init   ; setups
0AE9   CD 52 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0AEC   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0AF9                INTERPRET:      
0AF9   CD 42 09               CALL   prompt   
0AFC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0AFF   ED 43 82 1B            LD   (vTIBPtr),bc   
0B03                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B03   1E 00                  LD   e,0   ; initilize nesting value
0B05   C5                     PUSH   bc   ; save offset into TIB,
0B06                             ; bc is also the count of chars in TIB
0B06   21 00 18               LD   hl,TIB   ; hl is start of TIB
0B09   18 06                  JR   interpret4   
0B0B                INTERPRET3:      
0B0B   7E                     LD   a,(hl)   ; a = char in TIB
0B0C   23                     INC   hl   ; inc pointer into TIB
0B0D   0B                     DEC   bc   ; dec count of chars in TIB
0B0E   CD 16 09               CALL   nesting   ; update nesting value
0B11                INTERPRET4:      
0B11   79                     LD   a,c   ; is count zero?
0B12   B0                     OR   b   
0B13   20 F6                  JR   nz,interpret3   ; if not loop
0B15   C1                     POP   bc   ; restore offset into TIB
0B16                WAITCHAR:      
0B16   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B19   FE 20                  CP   $20   ; compare to space
0B1B   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0B1D   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B1F                             ; ???? NEEDED?
0B1F   28 2A                  JR   z,waitchar4   
0B21   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B23   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0B25                MACRO:       
0B25                             ;  ld (vTIBPtr),bc
0B25                             ;  ld hl,ctrlCodes
0B25                             ;  add a,l			            ; look up key of macros
0B25                             ;  ld l,a
0B25                             ;  ld e,(hl)
0B25                             ;  ld a,e
0B25                             ;  or a
0B25                             ;  jr z,macro1
0B25                             ;  ld d,msb(macros)
0B25                             ;  push de
0B25                             ;  call call		            ; Siena exec_ operation and jump to it
0B25                             ;  db DC1,0
0B25                             ; macro1:
0B25                             ;  ld bc,(vTIBPtr)
0B25   18 DC                  JR   interpret2   
0B27                WAITCHAR1:      
0B27   21 00 18               LD   hl,TIB   
0B2A   09                     ADD   hl,bc   
0B2B   77                     LD   (hl),a   ; store the character in textbuf
0B2C   03                     INC   bc   
0B2D   CD 85 00               CALL   putchar   ; echo character to screen
0B30   CD 16 09               CALL   nesting   
0B33   18 E1                  JR   waitchar   ; wait for next character
0B35                WAITCHAR3:      
0B35   21 00 18               LD   hl,TIB   
0B38   09                     ADD   hl,bc   
0B39   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B3B   23                     INC   hl   
0B3C   36 0A                  LD   (hl),"\n"   
0B3E   23                     INC   hl   
0B3F   03                     INC   bc   
0B40   03                     INC   bc   
0B41   CD 4B 09               CALL   crlf   ; echo character to screen
0B44   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B45   B7                     OR   a   
0B46   20 CE                  JR   nz,waitchar   
0B48   36 03                  LD   (hl),ETX   ; store end of text ETX in text buffer ??? NEEDED?
0B4A   03                     INC   bc   
0B4B                WAITCHAR4:      
0B4B   ED 43 82 1B            LD   (vTIBPtr),bc   
0B4F   01 00 18               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B52                             ; we pressed enter
0B52   0B                     DEC   bc   
0B53                NEXT:        
0B53   03                     INC   bc   ; Increment the IP
0B54   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B55                             ; bit 7,a                   ; is 15-bit opcode ?
0B55                             ; jr nz,next3
0B55   FE 20                  CP   " "   ; whitespace?
0B57   28 FA                  JR   z,next   ; space? ignore
0B59   38 07                  JR   c,next1   
0B5B   6F                     LD   l,a   ; index into table
0B5C   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B5E   6E                     LD   l,(hl)   ; get low jump address
0B5F   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0B61   E9                     JP   (hl)   ; Jump to routine
0B62                NEXT1:       
0B62   FE 1B                  CP   ESC   ; escape from interpreter
0B64   28 07                  JR   z,escape   
0B66   FE 00                  CP   NUL   ; end of input string?
0B68   28 0F                  JR   z,exit   
0B6A                             ; cp ETX                      ; end of command line input text?
0B6A                             ; jr nz,next
0B6A                             ;     ld hl,-DSTACK               ; etx, is SP valid? (too many pops?)
0B6A                             ;     add hl,sp
0B6A                             ;     jr nc,next2
0B6A                             ;     ld sp,DSTACK                ; yes, reset stack
0B6A                             ; next2:
0B6A   C3 F9 0A               JP   interpret   ; no, other whitespace, macros?
0B6D                             ; next3:
0B6D                             ;     ld h,a                    ; build address
0B6D                             ;     inc bc
0B6D                             ;     ld a,(bc)
0B6D                             ;     ld l,a
0B6D                             ;     add hl,hl
0B6D                             ;     jp (hl)
0B6D                ESCAPE:      
0B6D   60 69                  LD   hl,bc   ; address of code after escape opcode
0B6F   23                     INC   hl   
0B70   E9                     JP   (hl)   
0B71                             ; clear stack args
0B71                CLEAR:       
0B71   FD 54                  LD   d,iyh   ; de = BP
0B73   FD 5D                  LD   e,iyl   
0B75   EB                     EX   de,hl   ; hl = BP, de = result
0B76   F9                     LD   sp,hl   ; sp = BP
0B77   DD E9                  JP   (ix)   
0B79                EXIT:        
0B79   50 59                  LD   de,bc   ; address of code after exit opcode
0B7B   13                     INC   de   
0B7C   D9                     EXX      
0B7D   C1                     POP   bc   ; bc = last result
0B7E   FD 54                  LD   d,iyh   ; de = BP
0B80   FD 5D                  LD   e,iyl   
0B82   EB                     EX   de,hl   ; hl = BP
0B83   F9                     LD   sp,hl   ; sp = BP
0B84   D9                     EXX      
0B85   E1                     POP   hl   ; hl = old BP
0B86   C1                     POP   bc   ; pop SCP (discard)
0B87   C1                     POP   bc   ; bc = IP
0B88   F9                     LD   sp,hl   ; sp = old BP
0B89   D9                     EXX      
0B8A   C5                     PUSH   bc   ; push result
0B8B   D9                     EXX      
0B8C   EB                     EX   de,hl   
0B8D   E9                     JP   (hl)   
0B8E                             ; call with args
0B8E                             ; creates a scope
0B8E                CALL:        ; execute code at pointer
0B8E   E1                     POP   hl   ; hl = pointer to code
0B8F   7C                     LD   a,h   ; skip if destination address is NUL
0B90   B5                     OR   l   
0B91   28 0E                  JR   z,call2   
0B93   C5                     PUSH   bc   ; push IP
0B94   FD E5                  PUSH   iy   ; push SCP (scope pointer)
0B96   FD E5                  PUSH   iy   ; push BP
0B98   FD 21 00 00            LD   iy,0   ; BP = SP
0B9C   FD 39                  ADD   iy,sp   
0B9E   44 4D                  LD   bc,hl   ; IP = pointer to code
0BA0   0B                     DEC   bc   ; dec to prepare for next routine
0BA1                CALL2:       
0BA1   DD E9                  JP   (ix)   
0BA3                             ; execute a block of code
0BA3                             ; uses parent scope
0BA3                EXEC:        ; execute code at pointer
0BA3   E1                     POP   hl   ; hl = pointer to code
0BA4   7C                     LD   a,h   ; skip if destination address is NUL
0BA5   B5                     OR   l   
0BA6   28 13                  JR   z,exec2   
0BA8   C5                     PUSH   bc   ; push IP
0BA9   FD 5E 02               LD   e,(iy+2)   ; get SCP from parent stack frame
0BAC   FD 56 03               LD   d,(iy+3)   ; make this the old BP for this stack frame
0BAF   D5                     PUSH   de   ; push SCP
0BB0   FD E5                  PUSH   iy   ; push BP
0BB2   FD 21 00 00            LD   iy,0   ; BP = SP
0BB6   FD 39                  ADD   iy,sp   
0BB8   44 4D                  LD   bc,hl   ; IP = pointer to code
0BBA   0B                     DEC   bc   ; dec to prepare for next routine
0BBB                EXEC2:       
0BBB   DD E9                  JP   (ix)   
0BBD                             ; -- addr
0BBD                             ; returns address of variable
0BBD                DOVAR:       ; execute code at pointer
0BBD   DD E9                  JP   (ix)   
0BBF                             ; -- value
0BBF                             ; returns address of variable
0BBF                DOCONST:      ; execute code at pointer
0BBF   E1                     POP   hl   
0BC0   5E                     LD   e,(hl)   
0BC1   23                     INC   hl   
0BC2   56                     LD   d,(hl)   
0BC3   D5                     PUSH   de   
0BC4   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                TIB:      DS   TIBSIZE   
1900                          DS   RSIZE   
1980                RSTACK:      
1980                          DS   DSIZE   
1A00                DSTACK:      
1A00                STACK:       
1A00                          ALIGN   $100   
1A00                PAD:         
1A00                          DS   $100   
1B00                          DS   $30   
1B30                VBYTEMODE:   DS   2   ; 
1B32                TBPTR:    DS   2   ; reserved for tests
1B34                RST08:    DS   2   
1B36                RST10:    DS   2   
1B38                RST18:    DS   2   
1B3A                RST20:    DS   2   
1B3C                RST28:    DS   2   
1B3E                RST30:    DS   2   ; 
1B40                BAUD:     DS   2   ; 
1B42                INTVEC:   DS   2   ; 
1B44                NMIVEC:   DS   2   ; 
1B46                GETCVEC:   DS   2   ; 
1B48                PUTCVEC:   DS   2   ; 
1B4A                          DS   26*2   
1B7E                SYSVARS:      
1B7E                VFRAC:    DS   2   ; a
1B80                VDATAWIDTH:   DS   2   ; b
1B82                VTIBPTR:   DS   2   ; c
1B84                          DS   2   ; d
1B86                VLASTDEF:   DS   2   ; e
1B88                          DS   2   ; f
1B8A                          DS   2   ; g
1B8C                VHEAPPTR:   DS   2   ; h
1B8E                          DS   2   ; i
1B90                          DS   2   ; j
1B92                          DS   2   ; k
1B94                          DS   2   ; l
1B96                          DS   2   ; m
1B98                          DS   2   ; n
1B9A                          DS   2   ; o
1B9C                          DS   2   ; p
1B9E                          DS   2   ; q
1BA0                          DS   2   ; r
1BA2                          DS   2   ; s
1BA4                          DS   2   ; t
1BA6                          DS   2   ; u
1BA8                          DS   2   ; v
1BAA                          DS   2   ; w
1BAC                          DS   2   ; x
1BAE                          DS   2   ; y
1BB0                          DS   2   ; z
1BB2                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 31 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07FE DEFINED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1708 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN Siena.asm
                    > USED AT LINE 770 IN Siena.asm
                    > USED AT LINE 1843 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1258 IN Siena.asm
                    > USED AT LINE 1772 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 235 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 1443 IN Siena.asm
                    > USED AT LINE 1484 IN Siena.asm
                    > USED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1511 IN Siena.asm
                    > USED AT LINE 1803 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 5 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
                    > USED AT LINE 1732 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 20 IN Siena.asm
                    > USED AT LINE 1230 IN Siena.asm
                    > USED AT LINE 1648 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 21 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1313 IN Siena.asm
                    > USED AT LINE 1352 IN Siena.asm
                    > USED AT LINE 1606 IN Siena.asm
NUL:                0000 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1845 IN Siena.asm
ETX:                0003 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1820 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 36 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 41 IN Siena.asm
                    > USED AT LINE 1601 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 53 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 58 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 92 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 195 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 197 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 200 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 203 IN Siena.asm
STRING_:            0309 DEFINED AT LINE 206 IN Siena.asm
CLEAR_:             030C DEFINED AT LINE 209 IN Siena.asm
PAREN_:             030F DEFINED AT LINE 212 IN Siena.asm
PARENEND_:          0312 DEFINED AT LINE 215 IN Siena.asm
DOT_:               0315 DEFINED AT LINE 218 IN Siena.asm
DOT1:               0321 DEFINED AT LINE 226 IN Siena.asm
                    > USED AT LINE 223 IN Siena.asm
DOT2:               032A DEFINED AT LINE 231 IN Siena.asm
                    > USED AT LINE 228 IN Siena.asm
DOT3:               0334 DEFINED AT LINE 237 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
                    > USED AT LINE 320 IN Siena.asm
DOT4:               0338 DEFINED AT LINE 240 IN Siena.asm
                    > USED AT LINE 225 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
                    > USED AT LINE 236 IN Siena.asm
INDEX_:             033F DEFINED AT LINE 246 IN Siena.asm
INDEX1:             0348 DEFINED AT LINE 253 IN Siena.asm
                    > USED AT LINE 251 IN Siena.asm
BLOCK_:             034C DEFINED AT LINE 258 IN Siena.asm
BLOCKEND_:          034F DEFINED AT LINE 260 IN Siena.asm
CHAR_:              0352 DEFINED AT LINE 262 IN Siena.asm
ARRAY_:             0355 DEFINED AT LINE 264 IN Siena.asm
ARRAYEND_:          0358 DEFINED AT LINE 266 IN Siena.asm
IDENT_:             035B DEFINED AT LINE 268 IN Siena.asm
SYMBOL_:            035E DEFINED AT LINE 270 IN Siena.asm
AND_:               0361 DEFINED AT LINE 272 IN Siena.asm
AND1:               0368 DEFINED AT LINE 280 IN Siena.asm
                    > USED AT LINE 293 IN Siena.asm
                    > USED AT LINE 304 IN Siena.asm
OR_:                036C DEFINED AT LINE 285 IN Siena.asm
XOR_:               0375 DEFINED AT LINE 295 IN Siena.asm
XOR1:               0376 DEFINED AT LINE 297 IN Siena.asm
                    > USED AT LINE 308 IN Siena.asm
INV_:               037E DEFINED AT LINE 306 IN Siena.asm
ADD_:               0383 DEFINED AT LINE 310 IN Siena.asm
HDOT_:              0389 DEFINED AT LINE 317 IN Siena.asm
MUL_:               0390 DEFINED AT LINE 322 IN Siena.asm
SUB_:               0393 DEFINED AT LINE 325 IN Siena.asm
SUB2:               0395 DEFINED AT LINE 328 IN Siena.asm
                    > USED AT LINE 1267 IN Siena.asm
EQ_:                039B DEFINED AT LINE 334 IN Siena.asm
GT_:                03A0 DEFINED AT LINE 338 IN Siena.asm
LT_:                03A4 DEFINED AT LINE 342 IN Siena.asm
LT1:                03A6 DEFINED AT LINE 345 IN Siena.asm
                    > USED AT LINE 341 IN Siena.asm
DIV_:               03B1 DEFINED AT LINE 353 IN Siena.asm
COMMENT_:           03C0 DEFINED AT LINE 364 IN Siena.asm
                    > USED AT LINE 368 IN Siena.asm
NOP_:               03C9 DEFINED AT LINE 372 IN Siena.asm
SHL:                03CB DEFINED AT LINE 382 IN Siena.asm
                    > USED AT LINE 1716 IN Siena.asm
SHL1:               03D3 DEFINED AT LINE 389 IN Siena.asm
                    > USED AT LINE 392 IN Siena.asm
SHL2:               03D4 DEFINED AT LINE 391 IN Siena.asm
                    > USED AT LINE 388 IN Siena.asm
SHR:                03DB DEFINED AT LINE 399 IN Siena.asm
                    > USED AT LINE 1720 IN Siena.asm
SHR1:               03E3 DEFINED AT LINE 406 IN Siena.asm
                    > USED AT LINE 410 IN Siena.asm
SHR2:               03E7 DEFINED AT LINE 409 IN Siena.asm
                    > USED AT LINE 405 IN Siena.asm
MUL:                03EE DEFINED AT LINE 415 IN Siena.asm
                    > USED AT LINE 323 IN Siena.asm
MUL2:               03F8 DEFINED AT LINE 424 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
NUM:                040A DEFINED AT LINE 438 IN Siena.asm
                    > USED AT LINE 198 IN Siena.asm
NUM0:               0413 DEFINED AT LINE 444 IN Siena.asm
                    > USED AT LINE 442 IN Siena.asm
NUM1:               0414 DEFINED AT LINE 446 IN Siena.asm
                    > USED AT LINE 463 IN Siena.asm
NUM2:               042C DEFINED AT LINE 464 IN Siena.asm
                    > USED AT LINE 449 IN Siena.asm
                    > USED AT LINE 451 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
                    > USED AT LINE 488 IN Siena.asm
NUM3:               0437 DEFINED AT LINE 472 IN Siena.asm
                    > USED AT LINE 467 IN Siena.asm
HEXNUM:             043A DEFINED AT LINE 476 IN Siena.asm
                    > USED AT LINE 201 IN Siena.asm
HEXNUM1:            043D DEFINED AT LINE 478 IN Siena.asm
                    > USED AT LINE 495 IN Siena.asm
HEXNUM2:            0445 DEFINED AT LINE 484 IN Siena.asm
                    > USED AT LINE 482 IN Siena.asm
STRING:             0457 DEFINED AT LINE 497 IN Siena.asm
                    > USED AT LINE 207 IN Siena.asm
STRING1:            045F DEFINED AT LINE 502 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
STRING2:            0462 DEFINED AT LINE 506 IN Siena.asm
                    > USED AT LINE 501 IN Siena.asm
CHAR:               0470 DEFINED AT LINE 516 IN Siena.asm
                    > USED AT LINE 263 IN Siena.asm
CHAR1:              0473 DEFINED AT LINE 518 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
CHAR2:              047F DEFINED AT LINE 527 IN Siena.asm
                    > USED AT LINE 524 IN Siena.asm
CHAR3:              0482 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 522 IN Siena.asm
PAREN:              0485 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 213 IN Siena.asm
PAREN2:             048B DEFINED AT LINE 537 IN Siena.asm
                    > USED AT LINE 535 IN Siena.asm
PARENEND:           0492 DEFINED AT LINE 541 IN Siena.asm
                    > USED AT LINE 216 IN Siena.asm
BLOCK:              04A1 DEFINED AT LINE 552 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 536 IN Siena.asm
BLOCK1:             04A5 DEFINED AT LINE 556 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
                    > USED AT LINE 582 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
                    > USED AT LINE 590 IN Siena.asm
BLOCK2:             04CB DEFINED AT LINE 580 IN Siena.asm
BLOCK3:             04CE DEFINED AT LINE 583 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 574 IN Siena.asm
                    > USED AT LINE 577 IN Siena.asm
BLOCK4:             04D4 DEFINED AT LINE 588 IN Siena.asm
                    > USED AT LINE 563 IN Siena.asm
                    > USED AT LINE 565 IN Siena.asm
                    > USED AT LINE 567 IN Siena.asm
BLOCKEND:           04DA DEFINED AT LINE 595 IN Siena.asm
                    > USED AT LINE 261 IN Siena.asm
ARG:                04EE DEFINED AT LINE 610 IN Siena.asm
                    > USED AT LINE 204 IN Siena.asm
GET:                0509 DEFINED AT LINE 631 IN Siena.asm
                    > USED AT LINE 1660 IN Siena.asm
GET1:               0515 DEFINED AT LINE 640 IN Siena.asm
                    > USED AT LINE 637 IN Siena.asm
SET:                0518 DEFINED AT LINE 645 IN Siena.asm
                    > USED AT LINE 1712 IN Siena.asm
SET1:               0527 DEFINED AT LINE 658 IN Siena.asm
                    > USED AT LINE 653 IN Siena.asm
IF:                 052A DEFINED AT LINE 709 IN Siena.asm
                    > USED AT LINE 1672 IN Siena.asm
IFTE:               052F DEFINED AT LINE 712 IN Siena.asm
                    > USED AT LINE 1676 IN Siena.asm
IFTE1:              0530 DEFINED AT LINE 714 IN Siena.asm
                    > USED AT LINE 711 IN Siena.asm
IFTE2:              0539 DEFINED AT LINE 723 IN Siena.asm
                    > USED AT LINE 721 IN Siena.asm
IFTE3:              0550 DEFINED AT LINE 736 IN Siena.asm
                    > USED AT LINE 726 IN Siena.asm
LOOP:               0552 DEFINED AT LINE 741 IN Siena.asm
                    > USED AT LINE 1688 IN Siena.asm
LOOP1:              0567 DEFINED AT LINE 753 IN Siena.asm
                    > USED AT LINE 774 IN Siena.asm
LOOP2:              0582 DEFINED AT LINE 769 IN Siena.asm
                    > USED AT LINE 757 IN Siena.asm
LOOP3:              058C DEFINED AT LINE 776 IN Siena.asm
                    > USED AT LINE 756 IN Siena.asm
SWITCH:             05A2 DEFINED AT LINE 790 IN Siena.asm
                    > USED AT LINE 1728 IN Siena.asm
CASE:               05B6 DEFINED AT LINE 802 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
CASE0:              05D2 DEFINED AT LINE 820 IN Siena.asm
                    > USED AT LINE 817 IN Siena.asm
CASE1:              05D7 DEFINED AT LINE 826 IN Siena.asm
                    > USED AT LINE 819 IN Siena.asm
CASE2:              05E4 DEFINED AT LINE 834 IN Siena.asm
                    > USED AT LINE 829 IN Siena.asm
WORDS:              05E6 DEFINED AT LINE 837 IN Siena.asm
                    > USED AT LINE 1736 IN Siena.asm
BYTES:              05EB DEFINED AT LINE 840 IN Siena.asm
                    > USED AT LINE 1624 IN Siena.asm
BYTES1:             05EE DEFINED AT LINE 842 IN Siena.asm
                    > USED AT LINE 839 IN Siena.asm
ARRAY:              05F3 DEFINED AT LINE 846 IN Siena.asm
                    > USED AT LINE 265 IN Siena.asm
ARRAYEND:           0605 DEFINED AT LINE 856 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
ARRAYEND1:          0625 DEFINED AT LINE 879 IN Siena.asm
                    > USED AT LINE 890 IN Siena.asm
ARRAYEND2:          0635 DEFINED AT LINE 893 IN Siena.asm
                    > USED AT LINE 877 IN Siena.asm
                    > USED AT LINE 907 IN Siena.asm
ARRAYEND3:          0648 DEFINED AT LINE 909 IN Siena.asm
                    > USED AT LINE 891 IN Siena.asm
HASH:               0671 DEFINED AT LINE 941 IN Siena.asm
                    > USED AT LINE 1664 IN Siena.asm
DEF:                067C DEFINED AT LINE 951 IN Siena.asm
                    > USED AT LINE 1640 IN Siena.asm
DEF1:               068E DEFINED AT LINE 963 IN Siena.asm
                    > USED AT LINE 986 IN Siena.asm
                    > USED AT LINE 989 IN Siena.asm
                    > USED AT LINE 994 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
DEF2:               06B2 DEFINED AT LINE 987 IN Siena.asm
DEF3:               06B5 DEFINED AT LINE 990 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 979 IN Siena.asm
                    > USED AT LINE 981 IN Siena.asm
                    > USED AT LINE 984 IN Siena.asm
DEF4:               06BB DEFINED AT LINE 995 IN Siena.asm
                    > USED AT LINE 970 IN Siena.asm
                    > USED AT LINE 972 IN Siena.asm
                    > USED AT LINE 974 IN Siena.asm
DEF5:               06D0 DEFINED AT LINE 1011 IN Siena.asm
                    > USED AT LINE 1008 IN Siena.asm
LET:                06D3 DEFINED AT LINE 1016 IN Siena.asm
                    > USED AT LINE 1684 IN Siena.asm
LET1:               06E5 DEFINED AT LINE 1028 IN Siena.asm
LET2:               06F9 DEFINED AT LINE 1044 IN Siena.asm
                    > USED AT LINE 1041 IN Siena.asm
CONST:              06FC DEFINED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1636 IN Siena.asm
CONST1:             070E DEFINED AT LINE 1061 IN Siena.asm
CONST2:             0722 DEFINED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1074 IN Siena.asm
ADDR:               0725 DEFINED AT LINE 1082 IN Siena.asm
                    > USED AT LINE 1620 IN Siena.asm
ADDR1:              0731 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1087 IN Siena.asm
SYMBOL:             0739 DEFINED AT LINE 1099 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
SYMBOL0:            0741 DEFINED AT LINE 1104 IN Siena.asm
                    > USED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1117 IN Siena.asm
SYMBOL1:            0743 DEFINED AT LINE 1107 IN Siena.asm
                    > USED AT LINE 1103 IN Siena.asm
SYMBOL2:            0752 DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1111 IN Siena.asm
IDENT:              0760 DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
IDENT0:             0767 DEFINED AT LINE 1133 IN Siena.asm
                    > USED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1146 IN Siena.asm
IDENT1:             0769 DEFINED AT LINE 1136 IN Siena.asm
                    > USED AT LINE 1132 IN Siena.asm
IDENT2:             0778 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1140 IN Siena.asm
IDENT3:             078C DEFINED AT LINE 1159 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
FRAC:               078D DEFINED AT LINE 1162 IN Siena.asm
                    > USED AT LINE 1656 IN Siena.asm
SQRT1:              0793 DEFINED AT LINE 1167 IN Siena.asm
                    > USED AT LINE 1724 IN Siena.asm
ABS1:               07A0 DEFINED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1616 IN Siena.asm
MOD:                07AD DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1696 IN Siena.asm
EQUALS:             07B9 DEFINED AT LINE 1201 IN Siena.asm
                    > USED AT LINE 337 IN Siena.asm
LESSTHANEQ:         07C1 DEFINED AT LINE 1209 IN Siena.asm
                    > USED AT LINE 349 IN Siena.asm
LESSTHAN:           07C6 DEFINED AT LINE 1216 IN Siena.asm
                    > USED AT LINE 351 IN Siena.asm
LESSTHAN1:          07CB DEFINED AT LINE 1221 IN Siena.asm
                    > USED AT LINE 1212 IN Siena.asm
TRUE1:              07CE DEFINED AT LINE 1224 IN Siena.asm
                    > USED AT LINE 1204 IN Siena.asm
FALSE1:             07D4 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 1205 IN Siena.asm
                    > USED AT LINE 1219 IN Siena.asm
                    > USED AT LINE 1222 IN Siena.asm
INPUT:              07DA DEFINED AT LINE 1236 IN Siena.asm
                    > USED AT LINE 1668 IN Siena.asm
OUTPUT:             07E5 DEFINED AT LINE 1248 IN Siena.asm
                    > USED AT LINE 1704 IN Siena.asm
KEY:                07EE DEFINED AT LINE 1257 IN Siena.asm
                    > USED AT LINE 1680 IN Siena.asm
NEG:                07F7 DEFINED AT LINE 1264 IN Siena.asm
                    > USED AT LINE 1700 IN Siena.asm
FILTER:             07FE DEFINED AT LINE 1269 IN Siena.asm
                    > USED AT LINE 1652 IN Siena.asm
MAP:                07FE DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1692 IN Siena.asm
HASHSTR:            0800 DEFINED AT LINE 1281 IN Siena.asm
                    > USED AT LINE 945 IN Siena.asm
                    > USED AT LINE 1124 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
                    > USED AT LINE 1593 IN Siena.asm
HASHSTR1:           0803 DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1302 IN Siena.asm
HASHSTR2:           0808 DEFINED AT LINE 1288 IN Siena.asm
DEFINEENTRY:        0819 DEFINED AT LINE 1307 IN Siena.asm
                    > USED AT LINE 1007 IN Siena.asm
                    > USED AT LINE 1040 IN Siena.asm
                    > USED AT LINE 1073 IN Siena.asm
                    > USED AT LINE 1596 IN Siena.asm
DEFINEENTRY0:       081E DEFINED AT LINE 1311 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
DEFINEENTRY1:       082D DEFINED AT LINE 1323 IN Siena.asm
                    > USED AT LINE 1317 IN Siena.asm
DEFINEENTRY2:       0833 DEFINED AT LINE 1329 IN Siena.asm
                    > USED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1353 IN Siena.asm
DEFINEENTRY3:       0835 DEFINED AT LINE 1332 IN Siena.asm
                    > USED AT LINE 1314 IN Siena.asm
LOOKUPENTRY:        083F DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1086 IN Siena.asm
                    > USED AT LINE 1155 IN Siena.asm
LOOKUPENTRY0:       0844 DEFINED AT LINE 1350 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
LOOKUPENTRY1:       0853 DEFINED AT LINE 1362 IN Siena.asm
                    > USED AT LINE 1356 IN Siena.asm
LOOKUPENTRY2:       0859 DEFINED AT LINE 1368 IN Siena.asm
LOOKUPENTRY3:       085B DEFINED AT LINE 1371 IN Siena.asm
                    > USED AT LINE 1360 IN Siena.asm
DIVIDE:             0863 DEFINED AT LINE 1383 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
                    > USED AT LINE 1194 IN Siena.asm
DIVIDE1:            0868 DEFINED AT LINE 1386 IN Siena.asm
                    > USED AT LINE 1398 IN Siena.asm
DIVIDE2:            0875 DEFINED AT LINE 1394 IN Siena.asm
                    > USED AT LINE 1391 IN Siena.asm
DIVIDE3:            0876 DEFINED AT LINE 1396 IN Siena.asm
                    > USED AT LINE 1393 IN Siena.asm
SQUAREROOT:         087C DEFINED AT LINE 1406 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
SQUAREROOT1:        0881 DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1431 IN Siena.asm
SQUAREROOT4:        089C DEFINED AT LINE 1430 IN Siena.asm
                    > USED AT LINE 1424 IN Siena.asm
SQUAREROOT5:        08A3 DEFINED AT LINE 1435 IN Siena.asm
                    > USED AT LINE 1433 IN Siena.asm
PRTDEC:             08A6 DEFINED AT LINE 1439 IN Siena.asm
                    > USED AT LINE 239 IN Siena.asm
PRTDEC0:            08B5 DEFINED AT LINE 1450 IN Siena.asm
                    > USED AT LINE 1441 IN Siena.asm
PRTDEC1:            08D7 DEFINED AT LINE 1466 IN Siena.asm
                    > USED AT LINE 1454 IN Siena.asm
                    > USED AT LINE 1456 IN Siena.asm
                    > USED AT LINE 1458 IN Siena.asm
                    > USED AT LINE 1460 IN Siena.asm
                    > USED AT LINE 1463 IN Siena.asm
PRTDEC2:            08D9 DEFINED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1471 IN Siena.asm
PRTDEC3:            08E9 DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1475 IN Siena.asm
PRTDEC4:            08EA DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1479 IN Siena.asm
PRTHEX:             08EE DEFINED AT LINE 1486 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
                    > USED AT LINE 319 IN Siena.asm
PRTHEX2:            08F9 DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
                    > USED AT LINE 1491 IN Siena.asm
PRTHEX3:            0902 DEFINED AT LINE 1502 IN Siena.asm
                    > USED AT LINE 1500 IN Siena.asm
PRTSTR0:            090D DEFINED AT LINE 1510 IN Siena.asm
                    > USED AT LINE 1516 IN Siena.asm
PRTSTR:             0911 DEFINED AT LINE 1513 IN Siena.asm
                    > USED AT LINE 229 IN Siena.asm
                    > USED AT LINE 1574 IN Siena.asm
NESTING:            0916 DEFINED AT LINE 1529 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1804 IN Siena.asm
NESTING1A:          0921 DEFINED AT LINE 1536 IN Siena.asm
                    > USED AT LINE 1533 IN Siena.asm
NESTING1:           0924 DEFINED AT LINE 1539 IN Siena.asm
                    > USED AT LINE 1531 IN Siena.asm
NESTING2:           0933 DEFINED AT LINE 1548 IN Siena.asm
                    > USED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
NESTING3:           0935 DEFINED AT LINE 1551 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
NESTING4:           0940 DEFINED AT LINE 1558 IN Siena.asm
                    > USED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1555 IN Siena.asm
PROMPT:             0942 DEFINED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
CRLF:               094B DEFINED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1816 IN Siena.asm
PRINTSTR:           0952 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1563 IN Siena.asm
                    > USED AT LINE 1568 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
DEFINE:             0959 DEFINED AT LINE 1579 IN Siena.asm
                    > USED AT LINE 1614 IN Siena.asm
                    > USED AT LINE 1618 IN Siena.asm
                    > USED AT LINE 1622 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
                    > USED AT LINE 1630 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
                    > USED AT LINE 1638 IN Siena.asm
                    > USED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1646 IN Siena.asm
                    > USED AT LINE 1650 IN Siena.asm
                    > USED AT LINE 1654 IN Siena.asm
                    > USED AT LINE 1658 IN Siena.asm
                    > USED AT LINE 1662 IN Siena.asm
                    > USED AT LINE 1666 IN Siena.asm
                    > USED AT LINE 1670 IN Siena.asm
                    > USED AT LINE 1674 IN Siena.asm
                    > USED AT LINE 1678 IN Siena.asm
                    > USED AT LINE 1682 IN Siena.asm
                    > USED AT LINE 1686 IN Siena.asm
                    > USED AT LINE 1690 IN Siena.asm
                    > USED AT LINE 1694 IN Siena.asm
                    > USED AT LINE 1698 IN Siena.asm
                    > USED AT LINE 1702 IN Siena.asm
                    > USED AT LINE 1706 IN Siena.asm
                    > USED AT LINE 1710 IN Siena.asm
                    > USED AT LINE 1714 IN Siena.asm
                    > USED AT LINE 1718 IN Siena.asm
                    > USED AT LINE 1722 IN Siena.asm
                    > USED AT LINE 1726 IN Siena.asm
                    > USED AT LINE 1730 IN Siena.asm
                    > USED AT LINE 1734 IN Siena.asm
INIT:               0971 DEFINED AT LINE 1598 IN Siena.asm
                    > USED AT LINE 1742 IN Siena.asm
INIT1:              098B DEFINED AT LINE 1609 IN Siena.asm
                    > USED AT LINE 1612 IN Siena.asm
START:              0AE3 DEFINED AT LINE 1740 IN Siena.asm
                    > USED AT LINE 6
INTERPRET:          0AF9 DEFINED AT LINE 1746 IN Siena.asm
                    > USED AT LINE 1854 IN Siena.asm
INTERPRET2:         0B03 DEFINED AT LINE 1752 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
INTERPRET3:         0B0B DEFINED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1768 IN Siena.asm
INTERPRET4:         0B11 DEFINED AT LINE 1765 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
WAITCHAR:           0B16 DEFINED AT LINE 1771 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
                    > USED AT LINE 1819 IN Siena.asm
MACRO:              0B25 DEFINED AT LINE 1781 IN Siena.asm
WAITCHAR1:          0B27 DEFINED AT LINE 1798 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
WAITCHAR3:          0B35 DEFINED AT LINE 1807 IN Siena.asm
                    > USED AT LINE 1779 IN Siena.asm
WAITCHAR4:          0B4B DEFINED AT LINE 1823 IN Siena.asm
                    > USED AT LINE 1777 IN Siena.asm
NEXT:               0B53 DEFINED AT LINE 1829 IN Siena.asm
                    > USED AT LINE 538 IN Siena.asm
                    > USED AT LINE 549 IN Siena.asm
                    > USED AT LINE 787 IN Siena.asm
                    > USED AT LINE 922 IN Siena.asm
                    > USED AT LINE 1599 IN Siena.asm
                    > USED AT LINE 1835 IN Siena.asm
NEXT1:              0B62 DEFINED AT LINE 1842 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
ESCAPE:             0B6D DEFINED AT LINE 1863 IN Siena.asm
                    > USED AT LINE 1844 IN Siena.asm
CLEAR:              0B71 DEFINED AT LINE 1869 IN Siena.asm
                    > USED AT LINE 210 IN Siena.asm
EXIT:               0B79 DEFINED AT LINE 1876 IN Siena.asm
                    > USED AT LINE 1846 IN Siena.asm
CALL:               0B8E DEFINED AT LINE 1898 IN Siena.asm
                    > USED AT LINE 1628 IN Siena.asm
CALL2:              0BA1 DEFINED AT LINE 1910 IN Siena.asm
                    > USED AT LINE 1902 IN Siena.asm
EXEC:               0BA3 DEFINED AT LINE 1915 IN Siena.asm
                    > USED AT LINE 539 IN Siena.asm
                    > USED AT LINE 1644 IN Siena.asm
EXEC2:              0BBB DEFINED AT LINE 1929 IN Siena.asm
                    > USED AT LINE 1919 IN Siena.asm
DOVAR:              0BBD DEFINED AT LINE 1934 IN Siena.asm
DOCONST:            0BBF DEFINED AT LINE 1939 IN Siena.asm
TIB:                1800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 1756 IN Siena.asm
                    > USED AT LINE 1799 IN Siena.asm
                    > USED AT LINE 1808 IN Siena.asm
                    > USED AT LINE 1825 IN Siena.asm
RSTACK:             1980 DEFINED AT LINE 6 IN ram.asm
DSTACK:             1A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1600 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
STACK:              1A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
PAD:                1A00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 1101 IN Siena.asm
                    > USED AT LINE 1123 IN Siena.asm
                    > USED AT LINE 1130 IN Siena.asm
                    > USED AT LINE 1152 IN Siena.asm
VBYTEMODE:          1B30 DEFINED AT LINE 17 IN ram.asm
TBPTR:              1B32 DEFINED AT LINE 18 IN ram.asm
RST08:              1B34 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1B36 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1B38 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1B3A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              1B3C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              1B3E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               1B40 DEFINED AT LINE 26 IN ram.asm
INTVEC:             1B42 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1B44 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1B46 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1B48 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1B7E DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1602 IN Siena.asm
VFRAC:              1B7E DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 359 IN Siena.asm
                    > USED AT LINE 1163 IN Siena.asm
                    > USED AT LINE 1171 IN Siena.asm
VDATAWIDTH:         1B80 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 249 IN Siena.asm
                    > USED AT LINE 635 IN Siena.asm
                    > USED AT LINE 651 IN Siena.asm
                    > USED AT LINE 843 IN Siena.asm
                    > USED AT LINE 875 IN Siena.asm
VTIBPTR:            1B82 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1750 IN Siena.asm
                    > USED AT LINE 1824 IN Siena.asm
VLASTDEF:           1B86 DEFINED AT LINE 39 IN ram.asm
VHEAPPTR:           1B8C DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 498 IN Siena.asm
                    > USED AT LINE 513 IN Siena.asm
                    > USED AT LINE 869 IN Siena.asm
                    > USED AT LINE 924 IN Siena.asm
                    > USED AT LINE 933 IN Siena.asm
                    > USED AT LINE 956 IN Siena.asm
                    > USED AT LINE 1001 IN Siena.asm
                    > USED AT LINE 1002 IN Siena.asm
                    > USED AT LINE 1021 IN Siena.asm
                    > USED AT LINE 1034 IN Siena.asm
                    > USED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1054 IN Siena.asm
                    > USED AT LINE 1067 IN Siena.asm
                    > USED AT LINE 1068 IN Siena.asm
HASHSLOTS:          1C00 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 1608 IN Siena.asm
HASHWORDS:          1D00 DEFINED AT LINE 66 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 49 IN Siena.asm
