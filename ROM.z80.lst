0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD D9 08               CALL   init   
00C9   C3 43 0A               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Siena programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2022
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Siena code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   B0 0A                  DW   next   ; g nNext
018E   00 1D                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available " % , ; DEL
0220   CD                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   CD                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   CD                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   0C                     DB   lsb(string_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   CD                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   CD                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   12                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   CD                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   3C                     DB   lsb(index_)   ; ?
0240   09                     DB   lsb(prop_)   ; @
0241   4E                     DB   lsb(ident_)   ; A
0242   4E                     DB   lsb(ident_)   ; B
0243   4E                     DB   lsb(ident_)   ; C
0244   4E                     DB   lsb(ident_)   ; D
0245   4E                     DB   lsb(ident_)   ; E
0246   4E                     DB   lsb(ident_)   ; F
0247   4E                     DB   lsb(ident_)   ; G
0248   4E                     DB   lsb(ident_)   ; h
0249   4E                     DB   lsb(ident_)   ; I
024A   4E                     DB   lsb(ident_)   ; J
024B   4E                     DB   lsb(ident_)   ; K
024C   4E                     DB   lsb(ident_)   ; L
024D   4E                     DB   lsb(ident_)   ; M
024E   4E                     DB   lsb(ident_)   ; N
024F   4E                     DB   lsb(ident_)   ; O
0250   4E                     DB   lsb(ident_)   ; p
0251   4E                     DB   lsb(ident_)   ; Q
0252   4E                     DB   lsb(ident_)   ; R
0253   4E                     DB   lsb(ident_)   ; S
0254   4E                     DB   lsb(ident_)   ; T
0255   4E                     DB   lsb(ident_)   ; U
0256   4E                     DB   lsb(ident_)   ; V
0257   4E                     DB   lsb(ident_)   ; W
0258   4E                     DB   lsb(ident_)   ; X
0259   4E                     DB   lsb(ident_)   ; Y
025A   4E                     DB   lsb(ident_)   ; Z
025B   48                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(comment_)   ; \
025D   4B                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   4E                     DB   lsb(ident_)   ; _
0260   45                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(ident_)   ; a
0262   4E                     DB   lsb(ident_)   ; b
0263   4E                     DB   lsb(ident_)   ; c
0264   4E                     DB   lsb(ident_)   ; d
0265   4E                     DB   lsb(ident_)   ; e
0266   4E                     DB   lsb(ident_)   ; f
0267   4E                     DB   lsb(ident_)   ; g
0268   4E                     DB   lsb(ident_)   ; h
0269   4E                     DB   lsb(ident_)   ; i
026A   4E                     DB   lsb(ident_)   ; j
026B   4E                     DB   lsb(ident_)   ; k
026C   4E                     DB   lsb(ident_)   ; l
026D   4E                     DB   lsb(ident_)   ; m
026E   4E                     DB   lsb(ident_)   ; n
026F   4E                     DB   lsb(ident_)   ; o
0270   4E                     DB   lsb(ident_)   ; p
0271   4E                     DB   lsb(ident_)   ; q
0272   4E                     DB   lsb(ident_)   ; r
0273   4E                     DB   lsb(ident_)   ; s
0274   4E                     DB   lsb(ident_)   ; t
0275   4E                     DB   lsb(ident_)   ; u
0276   4E                     DB   lsb(ident_)   ; v
0277   4E                     DB   lsb(ident_)   ; w
0278   4E                     DB   lsb(ident_)   ; x
0279   4E                     DB   lsb(ident_)   ; y
027A   4E                     DB   lsb(ident_)   ; z
027B   3F                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   42                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   CD                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 0E 04               JP   num   
0303                HEXNUM_:      
0303   C3 3E 04               JP   hexnum   
0306                ARG_:        
0306   C3 03 0C               JP   arg   
0309                PROP_:       
0309   C3 54 05               JP   prop   
030C                STRING_:      
030C   C3 5B 04               JP   string   
030F                ARG_LIST_:      
030F   C3 7F 04               JP   arg_list   
0312                DOT_:        
0312   E1                     POP   hl   
0313   03                     INC   bc   
0314   0A                     LD   a,(bc)   
0315   FE 68                  CP   "h"   
0317   20 05                  JR   nz,dot1   
0319   CD 52 08               CALL   prthex   
031C   18 17                  JR   dot4   
031E                DOT1:        
031E   FE 73                  CP   "s"   
0320   20 05                  JR   nz,dot2   
0322   CD 75 08               CALL   prtstr   
0325   18 0E                  JR   dot4   
0327                DOT2:        
0327   FE 63                  CP   "c"   
0329   20 06                  JR   nz,dot3   
032B   7D                     LD   a,l   
032C   CD 85 00               CALL   putchar   
032F   18 04                  JR   dot4   
0331                DOT3:        
0331   0B                     DEC   bc   
0332   CD 0A 08               CALL   prtdec   
0335                DOT4:        
0335   3E 20                  LD   a," "   
0337   CD 85 00               CALL   putchar   
033A   DD E9                  JP   (ix)   
033C                             ; addr index -- addr2
033C                INDEX_:      
033C   C3 84 05               JP   index   
033F                BLOCK_:      
033F   C3 C6 04               JP   block   
0342                BLOCKEND_:      
0342   C3 03 05               JP   blockend   
0345                CHAR_:       
0345   C3 B1 04               JP   char   
0348                ARRAY_:      
0348   C3 BB 05               JP   array   
034B                ARRAYEND_:      
034B   C3 D7 05               JP   arrayEnd   
034E                IDENT_:      
034E   C3 BF 06               JP   ident   
0351                SYMBOL_:      
0351   C3 97 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 52 08               CALL   prthex   
0380   C3 31 03               JP   dot3   
0383                MUL_:        
0383   C3 F2 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 19 07               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA 21 07               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 26 07               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD C7 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMENT_:      
03C4   03                     INC   bc   ; point to next char
03C5   0A                     LD   a,(bc)   
03C6   FE 20                  CP   " "   ; terminate on any char less than SP
03C8   30 FA                  JR   nc,comment_   
03CA   0B                     DEC   bc   
03CB   DD E9                  JP   (ix)   
03CD                NOP_:        
03CD   DD E9                  JP   (ix)   
03CF                             ;*******************************************************************
03CF                             ; word operators
03CF                             ;*******************************************************************
03CF                             ; shl
03CF                             ; value count -- value2          shift left count places
03CF                SHL:         
03CF   50 59                  LD   de,bc   ; save IP
03D1   C1                     POP   bc   ; bc = count
03D2   41                     LD   b,c   ; b = loop counter
03D3   E1                     POP   hl   
03D4   04                     INC   b   ; test for counter=0 case
03D5   18 01                  JR   shl2   
03D7                SHL1:        
03D7   29                     ADD   hl,hl   ; left shift hl
03D8                SHL2:        
03D8   10 FD                  DJNZ   shl1   
03DA   E5                     PUSH   hl   
03DB   42 4B                  LD   bc,de   ; restore IP
03DD   DD E9                  JP   (ix)   
03DF                             ; shr
03DF                             ; value count -- value2          shift left count places
03DF                SHR:         
03DF   50 59                  LD   de,bc   ; save IP
03E1   C1                     POP   bc   ; bc = count
03E2   41                     LD   b,c   ; b = loop counter
03E3   E1                     POP   hl   
03E4   04                     INC   b   ; test for counter=0 case
03E5   18 04                  JR   shr2   
03E7                SHR1:        
03E7   CB 3C                  SRL   h   ; right shift hl
03E9   CB 1D                  RR   l   
03EB                SHR2:        
03EB   10 FA                  DJNZ   shr1   
03ED   E5                     PUSH   hl   
03EE   42 4B                  LD   bc,de   ; restore IP
03F0   DD E9                  JP   (ix)   
03F2                MUL:         ;=19
03F2   D1                     POP   de   ; get first value
03F3   E1                     POP   hl   
03F4   C5                     PUSH   bc   ; Preserve the IP
03F5   44                     LD   b,h   ; bc = 2nd value
03F6   4D                     LD   c,l   
03F7   21 00 00               LD   hl,0   
03FA   3E 10                  LD   a,16   
03FC                MUL2:        
03FC   29                     ADD   hl,hl   
03FD   CB 13                  RL   e   
03FF   CB 12                  RL   d   
0401   30 04                  JR   nc,$+6   
0403   09                     ADD   hl,bc   
0404   30 01                  JR   nc,$+3   
0406   13                     INC   de   
0407   3D                     DEC   a   
0408   20 F2                  JR   nz,mul2   
040A   C1                     POP   bc   ; Restore the IP
040B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
040C   DD E9                  JP   (ix)   
040E                NUM:         
040E   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0411   0A                     LD   a,(bc)   ; Get numeral or -
0412   FE 2D                  CP   "-"   
0414   20 01                  JR   nz,num0   
0416   03                     INC   bc   ; move to next char, no flags affected
0417                NUM0:        
0417   08                     EX   af,af'   ; save zero flag = 0 for later
0418                NUM1:        
0418   0A                     LD   a,(bc)   ; read digit
0419   D6 30                  SUB   "0"   ; less than 0?
041B   38 13                  JR   c,num2   ; not a digit, exit loop
041D   FE 0A                  CP   10   ; greater that 9?
041F   30 0F                  JR   nc,num2   ; not a digit, exit loop
0421   03                     INC   bc   ; inc IP
0422   54 5D                  LD   de,hl   ; multiply hl * 10
0424   29                     ADD   hl,hl   
0425   29                     ADD   hl,hl   
0426   19                     ADD   hl,de   
0427   29                     ADD   hl,hl   
0428   85                     ADD   a,l   ; add digit in a to hl
0429   6F                     LD   l,a   
042A   3E 00                  LD   a,0   
042C   8C                     ADC   a,h   
042D   67                     LD   h,a   
042E   18 E8                  JR   num1   
0430                NUM2:        
0430   0B                     DEC   bc   
0431   08                     EX   af,af'   ; restore zero flag
0432   20 07                  JR   nz,num3   
0434   EB                     EX   de,hl   ; negate the value of hl
0435   21 00 00               LD   hl,0   
0438   B7                     OR   a   ; jump to sub2
0439   ED 52                  SBC   hl,de   
043B                NUM3:        
043B   E5                     PUSH   hl   ; Put the number on the stack
043C   DD E9                  JP   (ix)   ; and process the next character
043E                HEXNUM:      
043E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0441                HEXNUM1:      
0441   03                     INC   bc   
0442   0A                     LD   a,(bc)   ; Get the character which is a numeral
0443   CB 77                  BIT   6,a   ; is it uppercase alpha?
0445   28 02                  JR   z,hexnum2   ; no a decimal
0447   D6 07                  SUB   7   ; sub 7  to make $a - $F
0449                HEXNUM2:      
0449   D6 30                  SUB   $30   ; Form decimal digit
044B   DA 30 04               JP   c,num2   
044E   FE 10                  CP   $0F+1   
0450   D2 30 04               JP   nc,num2   
0453   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0454   29                     ADD   hl,hl   ; 4X
0455   29                     ADD   hl,hl   ; 8X
0456   29                     ADD   hl,hl   ; 16X
0457   85                     ADD   a,l   ; add into bottom of hl
0458   6F                     LD   l,a   ; 
0459   18 E6                  JR   hexnum1   
045B                             ; string
045B                             ; -- ptr                        ; points to start of string chars,
045B                             ; length is stored at start - 2 bytes
045B                STRING:      
045B   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
045E   23                     INC   hl   ; skip length field to start
045F   23                     INC   hl   
0460   E5                     PUSH   hl   ; save start of string
0461   03                     INC   bc   ; point to next char
0462   18 03                  JR   string2   
0464                STRING1:      
0464   77                     LD   (hl),a   
0465   23                     INC   hl   ; increase count
0466   03                     INC   bc   ; point to next char
0467                STRING2:      
0467   0A                     LD   a,(bc)   
0468   FE 27                  CP   "'"   ; ' is the string terminator
046A   20 F8                  JR   nz,string1   
046C   AF                     XOR   a   ; write NUL to terminate string
046D   77                     LD   (hl),a   ; hl = end of string
046E   23                     INC   hl   
046F   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0472   2B                     DEC   hl   ; hl = end of string without terminator
0473   D1                     POP   de   ; de = start of string
0474   D5                     PUSH   de   ; return start of string
0475   B7                     OR   a   ; hl = length bytes, de = start of string
0476   ED 52                  SBC   hl,de   
0478   EB                     EX   de,hl   
0479   2B                     DEC   hl   ; write length bytes to length field at start - 2
047A   72                     LD   (hl),d   
047B   2B                     DEC   hl   
047C   73                     LD   (hl),e   
047D   DD E9                  JP   (ix)   
047F                             ; arg_list - parses input (ab:c)
047F                             ; names after the : represent uninitialised locals
047F                             ; return values are the state of the stack after the block ends
047F                ARG_LIST:      
047F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0482   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0485   23                     INC   hl   ; skip length field to start
0486   23                     INC   hl   
0487   E5                     PUSH   hl   ; save start of arg_list
0488   03                     INC   bc   ; point to next char
0489                ARG_LIST1:      
0489   0A                     LD   a,(bc)   
048A   FE 29                  CP   ")"   ; ) is the arg_list terminator
048C   28 12                  JR   z,arg_list4   
048E   FE 3A                  CP   ":"   
0490   20 03                  JR   nz,arg_list2   
0492   14                     INC   d   ; non zero value local count acts as flag
0493   20 08                  JR   nz,arg_list3   
0495                ARG_LIST2:      
0495   77                     LD   (hl),a   
0496   23                     INC   hl   
0497   1C                     INC   e   ; increase arg count
0498   AF                     XOR   a   
0499   B2                     OR   d   
049A   28 01                  JR   z,arg_list3   
049C   14                     INC   d   ; if d > 0 increase local count
049D                ARG_LIST3:      
049D   03                     INC   bc   ; point to next char
049E   18 E9                  JR   arg_list1   
04A0                ARG_LIST4:      
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arg_list5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARG_LIST5:      
04A5   23                     INC   hl   
04A6   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04A9   E1                     POP   hl   ; hl = start of arg_list
04AA   E5                     PUSH   hl   ; return start of string
04AB   2B                     DEC   hl   ; write length bytes to length field at start - 2
04AC   72                     LD   (hl),d   
04AD   2B                     DEC   hl   
04AE   73                     LD   (hl),e   
04AF   DD E9                  JP   (ix)   
04B1                CHAR:        
04B1   21 00 00               LD   hl,0   ; if `` is empty
04B4                CHAR1:       
04B4   03                     INC   bc   ; point to next char
04B5   0A                     LD   a,(bc)   
04B6   FE 60                  CP   "`"   ; ` is the string terminator
04B8   28 09                  JR   z,char3   
04BA   FE 5C                  CP   $5c   ; \ is the escape
04BC   20 02                  JR   nz,char2   
04BE   03                     INC   bc   
04BF   0A                     LD   a,(bc)   
04C0                CHAR2:       
04C0   6F                     LD   l,a   
04C1   18 F1                  JR   char1   
04C3                CHAR3:       
04C3   E5                     PUSH   hl   
04C4   DD E9                  JP   (ix)   
04C6                BLOCK:       
04C6   03                     INC   bc   
04C7   C5                     PUSH   bc   ; return first opcode of block
04C8   16 01                  LD   d,1   ; nesting: count first parenthesis
04CA                BLOCK1:      ; Skip to end of definition
04CA   0A                     LD   a,(bc)   ; Get the next character
04CB   03                     INC   bc   ; Point to next character
04CC   FE 21                  CP   " " + 1   ; ignore whitespace
04CE   38 FA                  JR   c,block1   
04D0   FE 29                  CP   ")"   
04D2   28 29                  JR   z,block4   
04D4   FE 7D                  CP   "}"   
04D6   28 25                  JR   z,block4   
04D8   FE 5D                  CP   "]"   
04DA   28 21                  JR   z,block4   
04DC   FE 28                  CP   "("   
04DE   28 12                  JR   z,block2   
04E0   FE 7B                  CP   "{"   
04E2   28 0E                  JR   z,block2   
04E4   FE 5B                  CP   "["   
04E6   28 0A                  JR   z,block2   
04E8   FE 27                  CP   "'"   
04EA   28 09                  JR   z,block3   
04EC   FE 60                  CP   "`"   
04EE   28 05                  JR   z,block3   
04F0   18 D8                  JR   block1   
04F2                BLOCK2:      
04F2   14                     INC   d   
04F3   18 D5                  JR   block1   
04F5                BLOCK3:      
04F5   3E 80                  LD   a,$80   
04F7   AA                     XOR   d   
04F8   47                     LD   b,a   
04F9   20 CF                  JR   nz,block1   
04FB   18 03                  JR   block5   
04FD                BLOCK4:      
04FD   15                     DEC   d   
04FE   20 CA                  JR   nz,block1   ; get the next element
0500                BLOCK5:      
0500   0B                     DEC   bc   ; balanced, exit
0501   DD E9                  JP   (ix)   
0503                BLOCKEND:      
0503   D9                     EXX      
0504   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0507   FD 56 01               LD   d,(iy+1)   
050A   FD 4E 06               LD   c,(iy+6)   ; bc = IP
050D   FD 46 07               LD   b,(iy+7)   
0510   D9                     EXX      
0511   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0514   FD 56 03               LD   d,(iy+3)   
0517   EB                     EX   de,hl   
0518   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
051B   FD 56 01               LD   d,(iy+1)   
051E                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
051E   13                     INC   de   ; for carry flag <=
051F   B7                     OR   a   
0520   ED 52                  SBC   hl,de   
0522   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0524   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0526   FD 5D                  LD   e,iyl   
0528   21 08 00               LD   hl,8   
052B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
052C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
052D   18 0C                  JR   blockend2   
052F                BLOCKEND1:      ; same scope
052F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0532   FD 56 03               LD   d,(iy+3)   
0535   EB                     EX   de,hl   
0536   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0538   FD 5D                  LD   e,iyl   
053A   EB                     EX   de,hl   
053B                BLOCKEND2:      
053B   44 4D                  LD   bc,hl   ; bc = hl = BP
053D   B7                     OR   a   ; hl = BP - SP = count
053E   ED 72                  SBC   hl,sp   
0540   C5                     PUSH   bc   ; bc = count, hl = BP
0541   44 4D                  LD   bc,hl   
0543   E1                     POP   hl   
0544   2B                     DEC   hl   ; hl = BP-1
0545   1B                     DEC   de   ; de = args*-1
0546   ED B8                  LDDR      
0548   13                     INC   de   ; hl = new tos
0549   EB                     EX   de,hl   
054A   F9                     LD   sp,hl   ; sp = new tos
054B   D9                     EXX      ; bc = IP, iy = oldBP
054C   D5                     PUSH   de   
054D   C5                     PUSH   bc   
054E   D9                     EXX      
054F   C1                     POP   bc   
0550   FD E1                  POP   iy   
0552   DD E9                  JP   (ix)   
0554                             ; blockend:
0554                             ;     exx
0554                             ;     ld e,(iy+0)                 ; de = oldBP
0554                             ;     ld d,(iy+1)
0554                             ;     ld c,(iy+6)                 ; bc = IP
0554                             ;     ld b,(iy+7)
0554                             ;     exx
0554                             ;     ld d,iyh                    ; hl = BP
0554                             ;     ld e,iyl
0554                             ;     ex de,hl
0554                             ;     ld e,(iy+4)                 ; de = BP, hl = arg_list*
0554                             ;     ld d,(iy+5)
0554                             ;     ex de,hl
0554                             ;     ld bc,0                     ; bc = 0, b = num locals = 0, c = num args = 0
0554                             ;     ld a,l                      ; arg_list* == null skip
0554                             ;     or h
0554                             ;     jr z,blockend2
0554                             ;     dec hl                      ; b = (num locals) * 2
0554                             ;     ld b,(hl)
0554                             ;     sla b
0554                             ;     dec hl
0554                             ;     ld c,(hl)                   ; c = (num args) * 2
0554                             ;     sla c
0554                             ; blockend2:
0554                             ;     ld a,8                      ; a = header size in bytes
0554                             ;     add a,c                     ; a = offset to args*
0554                             ;     ld l,a                      ; de = bp, hl = offset to args*
0554                             ;     ld h,0
0554                             ;     add hl,de                   ; de = args*, hl = bp,
0554                             ;     ex de,hl
0554                             ;     push hl                     ; save bp
0554                             ;     or a                        ; bc = count
0554                             ;     sbc hl,sp
0554                             ;     ld bc,hl
0554                             ;     dec bc                      ; bc -= 2 remove space used to save BP
0554                             ;     dec bc
0554                             ;     pop hl                      ; hl = bp
0554                             ;     dec de                      ; de = args*-1
0554                             ;     dec hl                      ; hl = BP-1
0554                             ;     lddr
0554                             ;     inc de                      ; hl = new tos
0554                             ;     ex de,hl
0554                             ;     ld sp,hl                    ; sp = new tos
0554                             ;     exx                         ; bc = IP, iy = oldBP
0554                             ;     push de
0554                             ;     push bc
0554                             ;     exx
0554                             ;     pop bc
0554                             ;     pop iy
0554                             ;     jp (ix)
0554                             ; @1..9
0554                             ; returns address of prop
0554                PROP:        
0554                             ; inc bc                      ; get next char
0554                             ; ld a,(bc)
0554                             ; sub "1"                     ; treat as a digit, 1 based index
0554                             ; and $0F                     ; mask
0554                             ; add a,a                     ; double
0554                             ; ld l,a                      ; hl = offset into args
0554                             ; ld h,0
0554                             ; ld e,(iy+6)                 ; de = closure array
0554                             ; ld d,(iy+7)
0554                             ; add hl,de                   ; find address of prop in array
0554                             ; ld (vPointer),hl             ; store address in setter
0554                             ; ld e,(hl)
0554                             ; inc hl
0554                             ; ld d,(hl)
0554                             ; push de                     ; push prop value
0554   DD E9                  JP   (ix)   
0556                             ; addr -- value
0556                DOLET:       
0556   E1                     POP   hl   
0557   22 9E 18               LD   (vPointer),hl   ; store address in setter
055A                DOLET2:      
055A   5E                     LD   e,(hl)   
055B   23                     INC   hl   
055C   56                     LD   d,(hl)   
055D   23                     INC   hl   
055E                DOLET3:      
055E   D5                     PUSH   de   
055F   5E                     LD   e,(hl)   
0560   23                     INC   hl   
0561   56                     LD   d,(hl)   
0562   ED 53 A2 18            LD   (vHashStr),de   
0566   DD E9                  JP   (ix)   
0568                             ; if
0568                             ; condition then -- value
0568                IF:          
0568   11 00 00               LD   de,0   ; NUL pointer for else
056B   18 01                  JR   ifte1   
056D                             ; ; ifte
056D                             ; ; condition then else -- value
056D                             ; ifte:
056D                             ;     pop de                      ; de = else
056D                             ; ifte1:
056D                             ;     pop hl                      ; hl = then
056D                             ;     ex (sp),hl                  ; hl = condition, (sp) = then
056D                             ;     inc hl                      ; check for true
056D                             ;     ld a,h
056D                             ;     or l
056D                             ;     pop hl                      ; hl = then
056D                             ;     jr z,ifte2
056D                             ;     ex de,hl                    ; condition = false, hl = else
056D                             ; ifte2:
056D                             ;     push hl
056D                             ;     jp exec
056D                             ; ifte
056D                             ; condition then else -- value
056D                IFTE:        
056D   D1                     POP   de   ; de = else
056E                IFTE1:       
056E   E1                     POP   hl   ; hl = then
056F   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0570   7C                     LD   a,h   
0571   B5                     OR   l   
0572   E1                     POP   hl   ; hl = then
0573   CA E9 0A               JP   z,exec0   ; if z de = else
0576   EB                     EX   de,hl   ; condition = false, hl = else
0577   C3 E9 0A               JP   exec0   
057A                             ; switch
057A                             ; index array -- value
057A                SWITCH:      
057A   D1                     POP   de   ; de = array
057B   E1                     POP   hl   ; hl = index
057C   29                     ADD   hl,hl   ; if data width = 2 then double
057D   19                     ADD   hl,de   ; add addr
057E   5E                     LD   e,(hl)   
057F   23                     INC   hl   
0580   56                     LD   d,(hl)   
0581   C3 E9 0A               JP   exec0   
0584                             ; index of an array, based on vDataWidth
0584                             ; array num -- value    ; also sets vPointer to address
0584                INDEX:       
0584   E1                     POP   hl   ; hl = index
0585   D1                     POP   de   ; de = array
0586   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0589   3D                     DEC   a   
058A   28 01                  JR   z,index1   
058C                INDEX0:      
058C   29                     ADD   hl,hl   ; if data width = 2 then double
058D                INDEX1:      
058D   19                     ADD   hl,de   ; add addr
058E   22 9E 18               LD   (vPointer),hl   ; store address in setter
0591   16 00                  LD   d,0   
0593   5E                     LD   e,(hl)   
0594   B7                     OR   a   ; check data width again
0595   28 02                  JR   z,index2   
0597   23                     INC   hl   
0598   56                     LD   d,(hl)   
0599                INDEX2:      
0599   D5                     PUSH   de   
059A   DD E9                  JP   (ix)   
059C                             ; newvalue --
059C                SET:         
059C   E1                     POP   hl   ; discard last accessed value
059D   D1                     POP   de   ; new value
059E   2A 9E 18               LD   hl,(vPointer)   
05A1   73                     LD   (hl),e   
05A2   3A 9A 18               LD   a,(vDataWidth)   
05A5   3D                     DEC   a   
05A6   28 02                  JR   z,set1   
05A8   23                     INC   hl   
05A9   72                     LD   (hl),d   
05AA                SET1:        
05AA   DD E9                  JP   (ix)   
05AC                             ; c b --
05AC                             ; loops until c = 0
05AC                LOOP:        
05AC   DD E9                  JP   (ix)   
05AE                             ;     pop de                      ; de = block                    c
05AE                             ;     pop hl                      ; hl = condition
05AE                             ;     push de
05AE                             ;     push bc                     ; push IP
05AE                             ;     ld bc,de                    ; bc = block
05AE                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05AE                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05AE                             ;     push de                     ; push ScopeBP
05AE                             ;     push iy                     ; push BP
05AE                             ;     ld iy,0                     ; iy = sp
05AE                             ;     add iy,sp
05AE                             ; loop1:
05AE                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05AE                             ;     or h
05AE                             ;     jr z,loop3
05AE                             ;     ld de,loop2-1               ; IP return address
05AE                             ;     push de
05AE                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05AE                             ;     ld d,(iy+3)
05AE                             ;     push de                     ;
05AE                             ;     push iy                     ; push BP
05AE                             ;     ld iy,0                     ; iy = sp
05AE                             ;     add iy,sp
05AE                             ;     push hl                     ; push condition
05AE                             ;     dec bc
05AE                             ;     jp (ix)
05AE                             ; loop2:
05AE                             ;     db ESC                      ; escape from interpreter
05AE                             ;     ld c,(iy+6)                 ; bc = block
05AE                             ;     ld b,(iy+7)
05AE                             ;     pop hl                      ; hl = condition
05AE                             ;     jr loop1
05AE                             ; loop3:
05AE                             ;     ld d,iyh                    ; de = BP
05AE                             ;     ld e,iyl
05AE                             ;     ex de,hl                    ; hl = BP, de = result
05AE                             ;     ld sp,hl                    ; sp = BP
05AE                             ;     pop hl                      ; hl = old BP
05AE                             ;     pop bc                      ; pop ScopeBP (discard)
05AE                             ;     pop bc                      ; bc = IP
05AE                             ;     ld sp,hl                    ; sp = old BP
05AE                             ;     ld iy,0                     ; iy = sp
05AE                             ;     add iy,sp
05AE                             ;     ld ix,(vNext)                  ; needed?
05AE                             ;     jp (ix)
05AE                WORDS:       
05AE   21 02 00               LD   hl,2   
05B1   18 03                  JR   bytes1   
05B3                BYTES:       
05B3   21 01 00               LD   hl,1   
05B6                BYTES1:      
05B6   22 9A 18               LD   (vDataWidth),hl   
05B9   DD E9                  JP   (ix)   
05BB                ARRAY:       
05BB   11 00 00               LD   de,0   ; create stack frame
05BE   D5                     PUSH   de   ; push null for IP
05BF   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05C2   FD 56 05               LD   d,(iy+5)   ; 
05C5   D5                     PUSH   de   ; 
05C6   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05C9   FD 56 03               LD   d,(iy+3)   ; 
05CC   D5                     PUSH   de   ; 
05CD   FD E5                  PUSH   iy   ; push BP
05CF   FD 21 00 00            LD   iy,0   ; BP = SP
05D3   FD 39                  ADD   iy,sp   
05D5   DD E9                  JP   (ix)   
05D7                ARRAYEND:      
05D7   FD 54                  LD   d,iyh   ; de = BP
05D9   FD 5D                  LD   e,iyl   
05DB   C5                     PUSH   bc   ; save IP
05DC   D9                     EXX      
05DD   C1                     POP   bc   
05DE   D9                     EXX      
05DF   62 6B                  LD   hl,de   ; hl = de = BP
05E1   B7                     OR   a   
05E2   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05E4   CB 3C                  SRL   h   ; 
05E6   CB 1D                  RR   l   
05E8   44 4D                  LD   bc,hl   ; bc = count
05EA   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05ED   71                     LD   (hl),c   ; write num items in length word
05EE   23                     INC   hl   
05EF   70                     LD   (hl),b   
05F0   23                     INC   hl   ; hl = array[0], bc = count
05F1                             ; de = BP, hl = array[0], bc = count
05F1   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05F4   FE 01                  CP   1   
05F6   20 10                  JR   nz,arrayEnd2   
05F8                ARRAYEND1:      ; byte
05F8   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05FB   77                     LD   (hl),a   ; write a to array item
05FC   23                     INC   hl   ; move to next byte in array
05FD   FD 2B                  DEC   iy   ; move tho next word on stack
05FF   FD 2B                  DEC   iy   
0601   0B                     DEC   bc   ; dec items count
0602   79                     LD   a,c   ; if not zero loop
0603   B0                     OR   b   
0604   20 F2                  JR   nz,arrayEnd1   
0606   18 13                  JR   arrayEnd3   
0608                ARRAYEND2:      ; word
0608   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
060B   77                     LD   (hl),a   ; write lsb of array item
060C   23                     INC   hl   ; move to msb of array item
060D   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0610   77                     LD   (hl),a   ; write msb of array item
0611   23                     INC   hl   ; move to next word in array
0612   FD 2B                  DEC   iy   ; move to next word on stack
0614   FD 2B                  DEC   iy   
0616   0B                     DEC   bc   ; dec items count
0617   79                     LD   a,c   ; if not zero loop
0618   B0                     OR   b   
0619   20 ED                  JR   nz,arrayEnd2   
061B                ARRAYEND3:      
061B   EB                     EX   de,hl   ; de = end of array, hl = BP
061C   F9                     LD   sp,hl   ; sp = BP
061D   E1                     POP   hl   ; de = end of array, hl = old BP
061E   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
061F   FD 62                  LD   iyh,d   
0621   FD 6B                  LD   iyl,e   
0623   D1                     POP   de   ; pop arg_list (discard)
0624   D1                     POP   de   ; pop ScopeBP (discard)
0625   D1                     POP   de   ; pop IP (discard)
0626   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
062A   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
062D   D9                     EXX      ; restore IP
062E   C5                     PUSH   bc   
062F   D9                     EXX      
0630   C1                     POP   bc   
0631   13                     INC   de   ; de = array[0]
0632   13                     INC   de   
0633   D5                     PUSH   de   ; return array[0]
0634   DD E9                  JP   (ix)   
0636                             ; str -- num
0636                HASH:        
0636   E1                     POP   hl   
0637   C5                     PUSH   bc   
0638   44 4D                  LD   bc,hl   
063A   CD 60 07               CALL   hashStr   
063D   C1                     POP   bc   
063E   E5                     PUSH   hl   
063F   DD E9                  JP   (ix)   
0641                             ; symbol func --
0641                DEF:         
0641   DD 21 48 06            LD   ix,def1   
0645   C3 51 0B               JP   func   
0648                DEF1:        
0648   DD 2A A4 18            LD   ix,(vNext)   
064C   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
064D   60 69                  LD   hl,bc   
064F   18 24                  JR   let1   
0651                             ; symbol value --
0651                LET:         
0651   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0653   E3                     EX   (sp),hl   
0654   EB                     EX   de,hl   
0655   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0658   36 CD                  LD   (hl),$cd   ; compile "call dolet"
065A   23                     INC   hl   
065B   36 56                  LD   (hl),lsb(dolet)   
065D   23                     INC   hl   
065E   36 05                  LD   (hl),msb(dolet)   
0660   23                     INC   hl   
0661   73                     LD   (hl),e   
0662   23                     INC   hl   
0663   72                     LD   (hl),d   
0664   ED 5B A2 18            LD   de,(vHashStr)   
0668   23                     INC   hl   
0669   73                     LD   (hl),e   
066A   23                     INC   hl   
066B   72                     LD   (hl),d   
066C   2B                     DEC   hl   
066D   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0671   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0674   E1                     POP   hl   ; de = addr, hl = IP
0675                LET1:        
0675   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
0676   44 4D                  LD   bc,hl   ; bc = symbol
0678   CD 7D 07               CALL   defineEntry   
067B   38 00                  JR   c,let2   
067D                             ; call error
067D                             ; .cstr "Let Collision"
067D                LET2:        
067D   C1                     POP   bc   
067E   DD E9                  JP   (ix)   
0680                             ; symbol -- ptr
0680                ADDR:        
0680   E1                     POP   hl   ; hl = hash
0681   C5                     PUSH   bc   
0682   44 4D                  LD   bc,hl   
0684   CD A3 07               CALL   lookupEntry   
0687   38 03                  JR   c,addr1   
0689   21 00 00               LD   hl,0   
068C                             ; call printStr		
068C                             ; .cstr "Undefined"
068C                             ; jp interpret
068C                ADDR1:       
068C   C1                     POP   bc   
068D   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
0690   19                     ADD   hl,de   
0691   22 9E 18               LD   (vPointer),hl   
0694   E5                     PUSH   hl   
0695   DD E9                  JP   (ix)   
0697                SYMBOL:      
0697   03                     INC   bc   
0698   11 00 1A               LD   de,PAD   
069B   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
069D   18 02                  JR   symbol1   
069F                SYMBOL0:      ; copy to PAD area
069F   03                     INC   bc   ; characters that are part of the identifier
06A0   13                     INC   de   
06A1                SYMBOL1:      ; 0-9 A-Z a-z _
06A1   0A                     LD   a,(bc)   
06A2   12                     LD   (de),a   
06A3   FE 21                  CP   " "+1   
06A5   38 0A                  JR   c,symbol2   
06A7   6F                     LD   l,a   
06A8   7E                     LD   a,(hl)   
06A9   FE 4E                  CP   lsb(ident_)   
06AB   28 F2                  JR   z,symbol0   
06AD   FE 00                  CP   lsb(num_)   
06AF   28 EE                  JR   z,symbol0   
06B1                SYMBOL2:      
06B1   0B                     DEC   bc   
06B2   AF                     XOR   a   
06B3   12                     LD   (de),a   ; terminate string with NUL
06B4   C5                     PUSH   bc   
06B5   01 00 1A               LD   bc,PAD   
06B8   CD 60 07               CALL   hashStr   ; hl = hash
06BB   C1                     POP   bc   
06BC   E5                     PUSH   hl   
06BD   DD E9                  JP   (ix)   
06BF                IDENT:       
06BF   11 00 1A               LD   de,PAD   
06C2   26 02                  LD   h,msb(opcodesBase)   ; this table identifies the char type
06C4   18 02                  JR   ident1   
06C6                IDENT0:      ; copy to PAD area
06C6   03                     INC   bc   ; characters that are part of the identifier
06C7   13                     INC   de   
06C8                IDENT1:      ; 0-9 A-Z a-z _
06C8   0A                     LD   a,(bc)   
06C9   12                     LD   (de),a   
06CA                             ; or a
06CA                             ; jr z,ident2
06CA   FE 21                  CP   " "+1   
06CC   38 0A                  JR   c,ident2   
06CE   6F                     LD   l,a   
06CF   7E                     LD   a,(hl)   
06D0   FE 4E                  CP   lsb(ident_)   
06D2   28 F2                  JR   z,ident0   
06D4   FE 00                  CP   lsb(num_)   
06D6   28 EE                  JR   z,ident0   
06D8                IDENT2:      
06D8   0B                     DEC   bc   
06D9   AF                     XOR   a   
06DA   12                     LD   (de),a   ; terminate string with NUL
06DB   C5                     PUSH   bc   
06DC   01 00 1A               LD   bc,PAD   
06DF   CD 60 07               CALL   hashStr   ; hl = hash
06E2   44 4D                  LD   bc,hl   
06E4   CD A3 07               CALL   lookupEntry   
06E7   C1                     POP   bc   
06E8   38 02                  JR   c,ident3   ; todo: no entry? print an error message
06EA   DD E9                  JP   (ix)   
06EC                IDENT3:      
06EC   E9                     JP   (hl)   
06ED                FRAC:        
06ED   2A 98 18               LD   hl,(vFrac)   
06F0   E5                     PUSH   hl   
06F1   DD E9                  JP   (ix)   
06F3                SQRT1:       
06F3   E1                     POP   hl   
06F4   C5                     PUSH   bc   
06F5   CD E0 07               CALL   squareRoot   
06F8   ED 43 98 18            LD   (vFrac),bc   
06FC   C1                     POP   bc   
06FD   D5                     PUSH   de   
06FE   DD E9                  JP   (ix)   
0700                ABS1:        
0700   E1                     POP   hl   
0701   CB 7C                  BIT   7,h   
0703   C8                     RET   z   
0704   AF                     XOR   a   
0705   95                     SUB   l   
0706   6F                     LD   l,a   
0707   9F                     SBC   a,a   
0708   94                     SUB   h   
0709   67                     LD   h,a   
070A   E5                     PUSH   hl   
070B   DD E9                  JP   (ix)   
070D                MOD:         
070D   D1                     POP   de   ; get first value
070E   E1                     POP   hl   ; get 2nd value
070F   C5                     PUSH   bc   ; preserve the IP
0710   44 4D                  LD   bc,hl   
0712   CD C7 07               CALL   divide   
0715   C1                     POP   bc   
0716   E5                     PUSH   hl   ; push remainder
0717   DD E9                  JP   (ix)   
0719                             ; hl = value1, de = value2
0719                             ; hl = result
0719                EQUALS:      
0719   B7                     OR   a   ; reset the carry flag
071A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
071C   28 10                  JR   z,true1   
071E   C3 34 07               JP   false1   
0721                             ; hl = value1 de = value2
0721                             ; hl = result
0721                LESSTHANEQ:      
0721   B7                     OR   a   
0722   ED 52                  SBC   hl,de   
0724   18 05                  JR   lessthan1   
0726                             ; hl = value1 de = value2
0726                             ; hl = result
0726                LESSTHAN:      
0726   B7                     OR   a   
0727   ED 52                  SBC   hl,de   
0729   28 09                  JR   z,false1   
072B                LESSTHAN1:      
072B   FA 34 07               JP   m,false1   
072E                TRUE1:       
072E   21 FF FF               LD   hl,TRUE   
0731   E5                     PUSH   hl   
0732   DD E9                  JP   (ix)   
0734                FALSE1:      
0734   21 00 00               LD   hl,FALSE   
0737   E5                     PUSH   hl   
0738   DD E9                  JP   (ix)   
073A                             ; Z80 port input
073A                             ; port -- value
073A                INPUT:       
073A   E1                     POP   hl   
073B   59                     LD   e,c   ; save IP
073C   4D                     LD   c,l   
073D   ED 68                  IN   l,(c)   
073F   26 00                  LD   h,0   
0741   4B                     LD   c,e   ; restore IP
0742   E5                     PUSH   hl   
0743   DD E9                  JP   (ix)   
0745                             ; Z80 port output
0745                             ; value port --
0745                OUTPUT:      
0745   E1                     POP   hl   
0746   59                     LD   e,c   ; save IP
0747   4D                     LD   c,l   
0748   E1                     POP   hl   
0749   ED 69                  OUT   (c),l   
074B   4B                     LD   c,e   ; restore IP
074C   DD E9                  JP   (ix)   
074E                KEY:         
074E   CD 81 00               CALL   getchar   
0751   26 00                  LD   h,0   
0753   6F                     LD   l,a   
0754   E5                     PUSH   hl   
0755   DD E9                  JP   (ix)   
0757                NEG:         
0757   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
075A   D1                     POP   de   
075B   C3 94 03               JP   sub2   ; use the SUBtract routine
075E                FILTER:      
075E                MAP:         
075E                SCAN:        
075E   DD E9                  JP   (ix)   
0760                             ; -------------------------------------------------------------------------------
0760                             ; hash C-string
0760                             ; BC = str
0760                             ; HL = hash
0760                HASHSTR:      
0760   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
0764   21 00 00               LD   hl,0   
0767                HASHSTR1:      
0767   0A                     LD   a,(bc)   ; load next char
0768   03                     INC   bc   
0769   FE 00                  CP   0   ; NUL?
076B   C8                     RET   z   
076C                HASHSTR2:      
076C   16 00                  LD   d,0   
076E   5F                     LD   e,a   
076F   19                     ADD   hl,de   
0770   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
0772   29                     ADD   hl,hl   ; shift left
0773   19                     ADD   hl,de   ; add
0774   29                     ADD   hl,hl   ; shift left
0775   29                     ADD   hl,hl   ; shift left
0776   29                     ADD   hl,hl   ; shift left
0777   29                     ADD   hl,hl   ; shift left
0778   29                     ADD   hl,hl   ; shift left
0779   29                     ADD   hl,hl   ; shift left
077A   19                     ADD   hl,de   ; add
077B   18 EA                  JR   hashStr1   
077D                             ; add entry to hash slots and hash pointers
077D                             ; bc = hash (b = hi, c = lo), de = addr
077D                             ; sets carry if successful
077D                DEFINEENTRY:      
077D   CB 21                  SLA   c   ; lo = lo * 2
077F   69                     LD   l,c   ; lo1 = lo
0780   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0782                DEFINEENTRY0:      
0782   7E                     LD   a,(hl)   ; a = (lo1)
0783   FE FF                  CP   UNUSED   ; is it unused?
0785   28 12                  JR   z,defineEntry3   ; yes, add entry
0787   79                     LD   a,c   ; a = lo
0788   BE                     CP   (hl)   ; compare (lo1) with lo
0789   20 06                  JR   nz,defineEntry1   ; no match loop around
078B   2C                     INC   l   
078C   78                     LD   a,b   ; a = hi
078D   BE                     CP   (hl)   ; compare (lo1+1) with hi
078E   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0790   2D                     DEC   l   ; restore l
0791                DEFINEENTRY1:      
0791   2C                     INC   l   ; try next entry
0792   2C                     INC   l   
0793   79                     LD   a,c   ; compare lo and lo1
0794   BD                     CP   l   ; if equal then there's no space left, reject
0795   20 EB                  JR   nz,defineEntry0   
0797                DEFINEENTRY2:      
0797   B7                     OR   a   ; clear carry flag, failure
0798   C9                     RET      
0799                DEFINEENTRY3:      ; new entry
0799   71                     LD   (hl),c   ; (lo1) = hash lo
079A   23                     INC   hl   
079B   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
079C   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
079E   72                     LD   (hl),d   
079F   2B                     DEC   hl   
07A0   73                     LD   (hl),e   ; (slot + 2) = address
07A1   37                     SCF      ; set carry flag, success
07A2   C9                     RET      
07A3                             ; looks up hash and returns address
07A3                             ; bc = hash
07A3                             ; returns addr in hl, sets carry if successful
07A3                LOOKUPENTRY:      
07A3   CB 21                  SLA   c   ; lo = lo * 2
07A5   69                     LD   l,c   ; lo1 = lo
07A6   26 1B                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
07A8                LOOKUPENTRY0:      
07A8   7E                     LD   a,(hl)   ; a = (hl), slot
07A9   FE FF                  CP   UNUSED   ; is it unused?
07AB   28 EA                  JR   z,defineEntry2   ; yes, does not exist
07AD   79                     LD   a,c   ; a = lo
07AE   BE                     CP   (hl)   ; compare (lo1) with lo
07AF   20 06                  JR   nz,lookupEntry1   ; no match loop around
07B1   2C                     INC   l   
07B2   78                     LD   a,b   ; a = hi
07B3   BE                     CP   (hl)   ; compare (lo1+1) with hi
07B4   28 09                  JR   z,lookupEntry3   
07B6   2D                     DEC   l   
07B7                LOOKUPENTRY1:      
07B7   2C                     INC   l   
07B8   2C                     INC   l   
07B9   79                     LD   a,c   
07BA   BD                     CP   l   ; no space left, reject
07BB   20 EB                  JR   nz,lookupEntry0   
07BD                LOOKUPENTRY2:      
07BD   B7                     OR   a   ; clear carry flag, failure
07BE   C9                     RET      
07BF                LOOKUPENTRY3:      
07BF   26 1C                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
07C1   56                     LD   d,(hl)   
07C2   2D                     DEC   l   ; restore l
07C3   5E                     LD   e,(hl)   ; (slot + 2) = address
07C4   EB                     EX   de,hl   
07C5   37                     SCF      
07C6   C9                     RET      
07C7                             ; division subroutine.
07C7                             ; bc: divisor, de: dividend, hl: remainder
07C7                DIVIDE:      
07C7   21 00 00               LD   hl,0   ; zero the remainder
07CA   3E 10                  LD   a,16   ; loop counter
07CC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
07CC   CB 21                  SLA   c   
07CE   CB 10                  RL   b   
07D0   ED 6A                  ADC   hl,hl   
07D2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
07D4   38 03                  JR   c,divide2   
07D6   0C                     INC   c   
07D7   18 01                  JR   divide3   
07D9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07D9   19                     ADD   hl,de   
07DA                DIVIDE3:      
07DA   3D                     DEC   a   
07DB   20 EF                  JR   nz,divide1   
07DD   50 59                  LD   de,bc   ; result from bc to de
07DF   C9                     RET      
07E0                             ; squareroot
07E0                             ; Input: HL = value
07E0                             ; Result: DE = square root BC = remainder
07E0                SQUAREROOT:      
07E0   01 00 08               LD   bc,0800h   
07E3   59                     LD   e,c   
07E4   AF                     XOR   a   
07E5                SQUAREROOT1:      
07E5   29                     ADD   hl,hl   
07E6   CB 11                  RL   c   
07E8   ED 6A                  ADC   hl,hl   
07EA   CB 11                  RL   c   
07EC   30 02                  JR   nc,$+4   
07EE   CB C5                  SET   0,l   
07F0   7B                     LD   a,e   
07F1   87                     ADD   a,a   
07F2   5F                     LD   e,a   
07F3   87                     ADD   a,a   
07F4   CB 45                  BIT   0,l   
07F6   20 03                  JR   nz,$+5   
07F8   91                     SUB   c   
07F9   30 05                  JR   nc,squareRoot4   
07FB   79                     LD   a,c   
07FC   93                     SUB   e   
07FD   1C                     INC   e   
07FE   93                     SUB   e   
07FF   4F                     LD   c,a   
0800                SQUAREROOT4:      
0800   10 E3                  DJNZ   squareRoot1   
0802   CB 45                  BIT   0,l   
0804   28 01                  JR   z,squareRoot5   
0806   04                     INC   b   
0807                SQUAREROOT5:      
0807   16 00                  LD   d,0   
0809   C9                     RET      
080A                PRTDEC:      
080A   CB 7C                  BIT   7,h   
080C   28 0B                  JR   z,prtdec0   
080E   3E 2D                  LD   a,"-"   
0810   CD 85 00               CALL   putchar   
0813   AF                     XOR   a   
0814   95                     SUB   l   
0815   6F                     LD   l,a   
0816   9F                     SBC   a,a   
0817   94                     SUB   h   
0818   67                     LD   h,a   
0819                PRTDEC0:      
0819   C5                     PUSH   bc   
081A   0E 00                  LD   c,0   ; leading zeros flag = false
081C   11 F0 D8               LD   de,-10000   
081F   CD 3B 08               CALL   prtdec1   
0822   11 18 FC               LD   de,-1000   
0825   CD 3B 08               CALL   prtdec1   
0828   11 9C FF               LD   de,-100   
082B   CD 3B 08               CALL   prtdec1   
082E   1E F6                  LD   e,-10   
0830   CD 3B 08               CALL   prtdec1   
0833   0C                     INC   c   ; flag = true for at least digit
0834   1E FF                  LD   e,-1   
0836   CD 3B 08               CALL   prtdec1   
0839   C1                     POP   bc   
083A   C9                     RET      
083B                PRTDEC1:      
083B   06 2F                  LD   b,"0"-1   
083D                PRTDEC2:      
083D   04                     INC   b   
083E   19                     ADD   hl,de   
083F   38 FC                  JR   c,prtdec2   
0841   ED 52                  SBC   hl,de   
0843   3E 30                  LD   a,"0"   
0845   B8                     CP   b   
0846   20 05                  JR   nz,prtdec3   
0848   AF                     XOR   a   
0849   B1                     OR   c   
084A   C8                     RET   z   
084B   18 01                  JR   prtdec4   
084D                PRTDEC3:      
084D   0C                     INC   c   
084E                PRTDEC4:      
084E   78                     LD   a,b   
084F   C3 85 00               JP   putchar   
0852                PRTHEX:      ; display hl as a 16-bit number in hex.
0852   C5                     PUSH   bc   ; preserve the IP
0853   7C                     LD   a,h   
0854   CD 5D 08               CALL   prthex2   
0857   7D                     LD   a,l   
0858   CD 5D 08               CALL   prthex2   
085B   C1                     POP   bc   
085C   C9                     RET      
085D                PRTHEX2:      
085D   4F                     LD   c,a   
085E   1F                     RRA      
085F   1F                     RRA      
0860   1F                     RRA      
0861   1F                     RRA      
0862   CD 66 08               CALL   prthex3   
0865   79                     LD   a,c   
0866                PRTHEX3:      
0866   E6 0F                  AND   0x0F   
0868   C6 90                  ADD   a,0x90   
086A   27                     DAA      
086B   CE 40                  ADC   a,0x40   
086D   27                     DAA      
086E   C3 85 00               JP   putchar   
0871                PRTSTR0:      
0871   CD 85 00               CALL   putchar   
0874   23                     INC   hl   
0875                PRTSTR:      
0875   7E                     LD   a,(hl)   
0876   B7                     OR   a   
0877   20 F8                  JR   nz,prtstr0   
0879   C9                     RET      
087A                             ; **************************************************************************
087A                             ; calculate nesting value
087A                             ; a is char to be tested,
087A                             ; e is the nesting value (initially 0)
087A                             ; e is increased by ( and [
087A                             ; e is decreased by ) and ]
087A                             ; e has its bit 7 toggled by `
087A                             ; limited to 127 levels
087A                             ; **************************************************************************
087A                NESTING:      
087A   FE 22                  CP   $22   ; quote char
087C   20 0A                  JR   nz,nesting1   
087E   CB 7B                  BIT   7,e   
0880   28 03                  JR   z,nesting1a   
0882   CB BB                  RES   7,e   
0884   C9                     RET      
0885                NESTING1A:      
0885   CB FB                  SET   7,e   
0887   C9                     RET      
0888                NESTING1:      
0888   CB 7B                  BIT   7,e   
088A   C0                     RET   nz   
088B   FE 7B                  CP   "{"   
088D   28 08                  JR   z,nesting2   
088F   FE 5B                  CP   "["   
0891   28 04                  JR   z,nesting2   
0893   FE 28                  CP   "("   
0895   20 02                  JR   nz,nesting3   
0897                NESTING2:      
0897   1C                     INC   e   
0898   C9                     RET      
0899                NESTING3:      
0899   FE 7D                  CP   "}"   
089B   28 07                  JR   z,nesting4   
089D   FE 5D                  CP   "]"   
089F   28 03                  JR   z,nesting4   
08A1   FE 29                  CP   ")"   
08A3   C0                     RET   nz   
08A4                NESTING4:      
08A4   1D                     DEC   e   
08A5   C9                     RET      
08A6                PROMPT:      
08A6   CD B6 08               CALL   printStr   
08A9   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08AE   C9                     RET      
08AF                CRLF:        
08AF   CD B6 08               CALL   printStr   
08B2   0D 0A 00               .CSTR   "\r\n"   
08B5   C9                     RET      
08B6                             ; prints a null teminated string
08B6                             ; the string should be immedaitely following the call
08B6                PRINTSTR:      
08B6   E3                     EX   (sp),hl   ; swap			
08B7   CD 75 08               CALL   prtstr   
08BA   23                     INC   hl   ; inc past NUL
08BB   E3                     EX   (sp),hl   ; put it back	
08BC   C9                     RET      
08BD                             ; executes a null teminated string (null executes exit_)
08BD                             ; the string should be immedaitely following the call
08BD                EXECSTR:      ; create a root stack frame
08BD                             ; pop bc                      ; bc = code*
08BD                             ; dec bc                      ; dec to prepare for next routine
08BD                             ; ld de,0
08BD                             ; push de                     ; push fake IP
08BD                             ; push de                     ; push null arglist*
08BD                             ; push de                     ; push null first_arg*
08BD                             ; push de                     ; push fake BP
08BD                             ; jp (ix)
08BD                BRANCH:      ; executes the address on the stack
08BD   C1                     POP   bc   ; bc = code*
08BE   0B                     DEC   bc   ; dec to prepare for next routine
08BF   DD E9                  JP   (ix)   
08C1                DEFINE:      
08C1   E1                     POP   hl   
08C2   7E                     LD   a,(hl)   
08C3   23                     INC   hl   
08C4   44 4D                  LD   bc,hl   
08C6   5F                     LD   e,a   
08C7   16 00                  LD   d,0   
08C9   19                     ADD   hl,de   
08CA   5E                     LD   e,(hl)   
08CB   23                     INC   hl   
08CC   56                     LD   d,(hl)   
08CD   23                     INC   hl   
08CE   E5                     PUSH   hl   ; bc = str
08CF   D5                     PUSH   de   
08D0   CD 60 07               CALL   hashStr   ; hl = hash
08D3   D1                     POP   de   
08D4   44 4D                  LD   bc,hl   
08D6   C3 7D 07               JP   defineEntry   
08D9                INIT:        
08D9   DD 2A A4 18            LD   ix,(vNext)   
08DD   FD 21 80 18            LD   iy,STACK   
08E1   21 80 01               LD   hl,isysVars   
08E4   11 98 18               LD   de,sysVars   
08E7   01 10 00               LD   bc,8 * 2   
08EA   ED B0                  LDIR      
08EC   3E FF                  LD   a,UNUSED   
08EE   06 00                  LD   b,0   
08F0   21 00 1B               LD   hl,hashSlots   
08F3                INIT1:       
08F3   77                     LD   (hl),a   
08F4   23                     INC   hl   
08F5   10 FC                  DJNZ   init1   
08F7   CD C1 08               CALL   define   
08FA   04 61 62 73 00         .PSTR   "abs",0   
08FF   00 07                  DW   abs1   
0901   CD C1 08               CALL   define   
0904   05 61 64 64 72 00      .PSTR   "addr",0   
090A   80 06                  DW   addr   
090C   CD C1 08               CALL   define   
090F   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0916   B3 05                  DW   bytes   
0918   CD C1 08               CALL   define   
091B   05 63 61 6C 6C 00      .PSTR   "call",0   
0921   E6 0A                  DW   call   
0923   CD C1 08               CALL   define   
0926   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
092F   A9 0B                  DW   closure   
0931   CD C1 08               CALL   define   
0934   04 64 65 66 00         .PSTR   "def",0   
0939   41 06                  DW   def   
093B   CD C1 08               CALL   define   
093E   05 65 78 65 63 00      .PSTR   "exec",0   
0944   E8 0A                  DW   exec   
0946   CD C1 08               CALL   define   
0949   06 66 61 6C 73 65 00   .PSTR   "false",0   
0950   34 07                  DW   false1   
0952   CD C1 08               CALL   define   
0955   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
095D   5E 07                  DW   filter   
095F   CD C1 08               CALL   define   
0962   05 66 72 61 63 00      .PSTR   "frac",0   
0968   ED 06                  DW   frac   
096A   CD C1 08               CALL   define   
096D   05 66 75 6E 63 00      .PSTR   "func",0   
0973   51 0B                  DW   func   
0975                             ; call define
0975                             ; .pstr "get",0
0975                             ; dw get
0975   CD C1 08               CALL   define   
0978   05 68 61 73 68 00      .PSTR   "hash",0   
097E   36 06                  DW   hash   
0980   CD C1 08               CALL   define   
0983   06 69 6E 70 75 74 00   .PSTR   "input",0   
098A   3A 07                  DW   input   
098C   CD C1 08               CALL   define   
098F   03 69 66 00            .PSTR   "if",0   
0993   68 05                  DW   if   
0995   CD C1 08               CALL   define   
0998   05 69 66 74 65 00      .PSTR   "ifte",0   
099E   6D 05                  DW   ifte   
09A0   CD C1 08               CALL   define   
09A3   04 6B 65 79 00         .PSTR   "key",0   
09A8   4E 07                  DW   key   
09AA   CD C1 08               CALL   define   
09AD   04 6C 65 74 00         .PSTR   "let",0   
09B2   51 06                  DW   let   
09B4   CD C1 08               CALL   define   
09B7   05 6C 6F 6F 70 00      .PSTR   "loop",0   
09BD   AC 05                  DW   loop   
09BF   CD C1 08               CALL   define   
09C2   04 6D 61 70 00         .PSTR   "map",0   
09C7   5E 07                  DW   map   
09C9   CD C1 08               CALL   define   
09CC   04 6D 6F 64 00         .PSTR   "mod",0   
09D1   0D 07                  DW   mod   
09D3   CD C1 08               CALL   define   
09D6   04 6E 65 67 00         .PSTR   "neg",0   
09DB   57 07                  DW   neg   
09DD   CD C1 08               CALL   define   
09E0   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
09E8   45 07                  DW   output   
09EA   CD C1 08               CALL   define   
09ED   05 73 63 61 6E 00      .PSTR   "scan",0   
09F3   01 00                  DW   scan   
09F5   CD C1 08               CALL   define   
09F8   04 73 65 74 00         .PSTR   "set",0   
09FD   9C 05                  DW   set   
09FF   CD C1 08               CALL   define   
0A02   04 73 68 6C 00         .PSTR   "shl",0   
0A07   CF 03                  DW   shl   
0A09   CD C1 08               CALL   define   
0A0C   04 73 68 72 00         .PSTR   "shr",0   
0A11   DF 03                  DW   shr   
0A13   CD C1 08               CALL   define   
0A16   05 73 71 72 74 00      .PSTR   "sqrt",0   
0A1C   F3 06                  DW   sqrt1   
0A1E   CD C1 08               CALL   define   
0A21   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0A29   7A 05                  DW   switch   
0A2B   CD C1 08               CALL   define   
0A2E   05 74 72 75 65 00      .PSTR   "true",0   
0A34   2E 07                  DW   true1   
0A36   CD C1 08               CALL   define   
0A39   06 77 6F 72 64 73 00   .PSTR   "words",0   
0A40   AE 05                  DW   words   
0A42   C9                     RET      
0A43                START:       
0A43   31 80 18               LD   sp,STACK   ; start of Siena
0A46   CD D9 08               CALL   init   ; setups
0A49   CD B6 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0A4C   53 69 65 6E 61 20 56 30 2E 30 0D 0A 00 .CSTR   "Siena V0.0\r\n"   
0A59                INTERPRET:      
0A59   CD A6 08               CALL   prompt   
0A5C   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A5F   ED 43 9C 18            LD   (vTIBPtr),bc   
0A63                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A63   1E 00                  LD   e,0   ; initilize nesting value
0A65   C5                     PUSH   bc   ; save offset into TIB,
0A66                             ; bc is also the count of chars in TIB
0A66   21 00 19               LD   hl,TIB   ; hl is start of TIB
0A69   18 06                  JR   interpret4   
0A6B                INTERPRET3:      
0A6B   7E                     LD   a,(hl)   ; a = char in TIB
0A6C   23                     INC   hl   ; inc pointer into TIB
0A6D   0B                     DEC   bc   ; dec count of chars in TIB
0A6E   CD 7A 08               CALL   nesting   ; update nesting value
0A71                INTERPRET4:      
0A71   79                     LD   a,c   ; is count zero?
0A72   B0                     OR   b   
0A73   20 F6                  JR   nz,interpret3   ; if not loop
0A75   C1                     POP   bc   ; restore offset into TIB
0A76                WAITCHAR:      
0A76   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A79   FE 20                  CP   $20   ; compare to space
0A7B   30 0A                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0A7D   FE 00                  CP   $0   ; is it end of string? NUL end of string
0A7F                             ; ???? NEEDED?
0A7F   28 27                  JR   z,waitchar4   
0A81   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A83   28 10                  JR   z,waitchar3   ; if anything else its macro/control
0A85                MACRO:       
0A85                             ;  ld (vTIBPtr),bc
0A85                             ;  ld hl,ctrlCodes
0A85                             ;  add a,l			            ; look up key of macros
0A85                             ;  ld l,a
0A85                             ;  ld e,(hl)
0A85                             ;  ld a,e
0A85                             ;  or a
0A85                             ;  jr z,macro1
0A85                             ;  ld d,msb(macros)
0A85                             ;  push de
0A85                             ;  call call		            ; Siena exec_ operation and jump to it
0A85                             ;  db DC1,0
0A85                             ; macro1:
0A85                             ;  ld bc,(vTIBPtr)
0A85   18 DC                  JR   interpret2   
0A87                WAITCHAR1:      
0A87   21 00 19               LD   hl,TIB   
0A8A   09                     ADD   hl,bc   
0A8B   77                     LD   (hl),a   ; store the character in textbuf
0A8C   03                     INC   bc   
0A8D   CD 85 00               CALL   putchar   ; echo character to screen
0A90   CD 7A 08               CALL   nesting   
0A93   18 E1                  JR   waitchar   ; wait for next character
0A95                WAITCHAR3:      
0A95   21 00 19               LD   hl,TIB   
0A98   09                     ADD   hl,bc   
0A99   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A9B   23                     INC   hl   
0A9C   36 0A                  LD   (hl),"\n"   
0A9E   23                     INC   hl   
0A9F   03                     INC   bc   
0AA0   03                     INC   bc   
0AA1   CD AF 08               CALL   crlf   ; echo character to screen
0AA4   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0AA5   B7                     OR   a   
0AA6   20 CE                  JR   nz,waitchar   
0AA8                WAITCHAR4:      
0AA8   ED 43 9C 18            LD   (vTIBPtr),bc   
0AAC   01 00 19               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0AAF                             ; we pressed enter
0AAF   0B                     DEC   bc   
0AB0                NEXT:        
0AB0   03                     INC   bc   ; Increment the IP
0AB1   0A                     LD   a,(bc)   ; Get the next character and dispatch
0AB2   FE 20                  CP   " "   ; whitespace?
0AB4   28 FA                  JR   z,next   ; space? ignore
0AB6   38 07                  JR   c,next1   
0AB8   6F                     LD   l,a   ; index into table
0AB9   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0ABB   6E                     LD   l,(hl)   ; get low jump address
0ABC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0ABE   E9                     JP   (hl)   ; Jump to routine
0ABF                NEXT1:       
0ABF   FE 1B                  CP   ESC   ; escape from interpreter, needed???
0AC1   28 0F                  JR   z,escape_   
0AC3   FE 00                  CP   NUL   ; end of input string?
0AC5   28 0C                  JR   z,exit_   
0AC7   FE 11                  CP   DC1   ; literal number
0AC9   28 0B                  JR   z,literal_   
0ACB   FE 12                  CP   DC2   ; enter routine
0ACD   28 10                  JR   z,enter_   
0ACF   C3 59 0A               JP   interpret   ; no, other whitespace, macros?
0AD2                ESCAPE_:      
0AD2   03                     INC   bc   ; falls through
0AD3                EXIT_:       
0AD3   60 69                  LD   hl,bc   
0AD5   E9                     JP   (hl)   
0AD6                LITERAL_:      
0AD6   03                     INC   bc   
0AD7   0A                     LD   a,(bc)   
0AD8   6F                     LD   l,a   
0AD9   03                     INC   bc   
0ADA   0A                     LD   a,(bc)   
0ADB   67                     LD   h,a   
0ADC   E5                     PUSH   hl   
0ADD   DD E9                  JP   (ix)   
0ADF                ENTER_:      
0ADF   03                     INC   bc   
0AE0   0A                     LD   a,(bc)   
0AE1   6F                     LD   l,a   
0AE2   03                     INC   bc   
0AE3   0A                     LD   a,(bc)   
0AE4   67                     LD   h,a   
0AE5   E9                     JP   (hl)   
0AE6                             ; arg1 .. argn func -- ?
0AE6                CALL:        
0AE6   E1                     POP   hl   
0AE7   E9                     JP   (hl)   
0AE8                             ; execute a block of code which ends with }
0AE8                             ; creates a root scope if BP == stack
0AE8                             ; else uses outer scope
0AE8                EXEC:        
0AE8   D1                     POP   de   ; de = block*
0AE9                EXEC0:       
0AE9   7B                     LD   a,e   ; if block* == null, exit
0AEA   B2                     OR   d   
0AEB   20 02                  JR   nz,exec1   
0AED   DD E9                  JP   (ix)   
0AEF                EXEC1:       
0AEF   C5                     PUSH   bc   ; push IP
0AF0   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0AF3   FD 44                  LD   b,iyh   
0AF5   FD 4D                  LD   c,iyl   
0AF7   B7                     OR   a   ; hl = stack - BP = root_scope
0AF8   ED 42                  SBC   hl,bc   
0AFA   7D                     LD   a,l   ; if root_scope, skip
0AFB   B4                     OR   h   
0AFC   28 11                  JR   z,exec2   
0AFE   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B01   FD 46 05               LD   b,(iy+5)   
0B04   C5                     PUSH   bc   
0B05   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0B08   FD 46 03               LD   b,(iy+3)   
0B0B   60 69                  LD   hl,bc   
0B0D   18 34                  JR   doCall4   
0B0F                EXEC2:       
0B0F   E5                     PUSH   hl   ; push arg_list (null)
0B10   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0B13   39                     ADD   hl,sp   
0B14   18 2D                  JR   doCall4   ; 
0B16                             ; call with args
0B16                             ; creates a scope
0B16                             ; code* -- ?
0B16                DOCALL:      ; execute code at pointer
0B16   E1                     POP   hl   ; hl = code*
0B17   7D                     LD   a,l   ; if code* == null, skip
0B18   B4                     OR   h   
0B19   28 34                  JR   z,doCall5   
0B1B   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0B1C   23                     INC   hl   
0B1D   56                     LD   d,(hl)   
0B1E   23                     INC   hl   
0B1F   EB                     EX   de,hl   
0B20   7D                     LD   a,l   ; if arg_list* != null skip
0B21   B4                     OR   h   
0B22   20 08                  JR   nz,doCall1   
0B24   C5                     PUSH   bc   ; push IP
0B25   E5                     PUSH   hl   ; push arg_list (null)
0B26   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0B29   39                     ADD   hl,sp   
0B2A   18 17                  JR   doCall4   
0B2C                DOCALL1:      
0B2C   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0B2D   7E                     LD   a,(hl)   
0B2E   23                     INC   hl   
0B2F   B7                     OR   a   
0B30   28 05                  JR   z,doCall3   
0B32                DOCALL2:      
0B32   3B                     DEC   sp   
0B33   3B                     DEC   sp   
0B34   3D                     DEC   a   
0B35   20 FB                  JR   nz,doCall2   
0B37                DOCALL3:      
0B37   C5                     PUSH   bc   ; push IP
0B38   E5                     PUSH   hl   ; push arg_list*
0B39   2B                     DEC   hl   ; hl = num_args*
0B3A   2B                     DEC   hl   
0B3B   7E                     LD   a,(hl)   ; hl = num_args * 2
0B3C   87                     ADD   a,a   
0B3D   C6 04                  ADD   a,4   ; offset for IP and arg_list
0B3F   6F                     LD   l,a   
0B40   26 00                  LD   h,$0   
0B42   39                     ADD   hl,sp   ; hl = first_arg*
0B43                DOCALL4:      
0B43   E5                     PUSH   hl   ; push first_arg
0B44   FD E5                  PUSH   iy   ; push BP
0B46   FD 21 00 00            LD   iy,0   ; BP = SP
0B4A   FD 39                  ADD   iy,sp   
0B4C   42 4B                  LD   bc,de   ; bc = de = block*-1
0B4E   0B                     DEC   bc   
0B4F                DOCALL5:      
0B4F   DD E9                  JP   (ix)   
0B51                             ; arg_list* block* -- ptr
0B51                FUNC:        
0B51   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0B54   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0B56   23                     INC   hl   
0B57   36 16                  LD   (hl),lsb(doCall)   
0B59   23                     INC   hl   
0B5A   36 0B                  LD   (hl),msb(doCall)   
0B5C   23                     INC   hl   
0B5D   D1                     POP   de   ; hl = heapPtr, de = block
0B5E   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
0B5F   E3                     EX   (sp),hl   
0B60   EB                     EX   de,hl   
0B61   73                     LD   (hl),e   ; compile arg_list*
0B62   23                     INC   hl   
0B63   72                     LD   (hl),d   
0B64   23                     INC   hl   
0B65   D1                     POP   de   ; de = block*
0B66   C5                     PUSH   bc   ; (sp) = IP
0B67   06 01                  LD   b,1   ; b = nesting
0B69                FUNC1:       
0B69   1A                     LD   a,(de)   
0B6A   13                     INC   de   
0B6B   77                     LD   (hl),a   
0B6C   23                     INC   hl   
0B6D   FE 29                  CP   ")"   
0B6F   28 29                  JR   z,func4   
0B71   FE 7D                  CP   "}"   
0B73   28 25                  JR   z,func4   
0B75   FE 5D                  CP   "]"   
0B77   28 21                  JR   z,func4   
0B79   FE 28                  CP   "("   
0B7B   28 12                  JR   z,func2   
0B7D   FE 7B                  CP   "{"   
0B7F   28 0E                  JR   z,func2   
0B81   FE 5B                  CP   "["   
0B83   28 0A                  JR   z,func2   
0B85   FE 27                  CP   "'"   
0B87   28 09                  JR   z,func3   
0B89   FE 60                  CP   "`"   
0B8B   28 05                  JR   z,func3   
0B8D   18 DA                  JR   func1   
0B8F                FUNC2:       
0B8F   04                     INC   b   
0B90   18 D7                  JR   func1   
0B92                FUNC3:       
0B92   3E 80                  LD   a,$80   
0B94   A8                     XOR   b   
0B95   47                     LD   b,a   
0B96   20 D1                  JR   nz,func1   
0B98   18 03                  JR   func4a   
0B9A                FUNC4:       
0B9A   05                     DEC   b   
0B9B   20 CC                  JR   nz,func1   ; get the next element
0B9D                FUNC4A:      
0B9D   23                     INC   hl   
0B9E   C1                     POP   bc   ; de = defstart, hl = IP
0B9F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0BA3   D5                     PUSH   de   
0BA4   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0BA7   DD E9                  JP   (ix)   
0BA9                             ; closure:
0BA9                             ; array func -- closure
0BA9                CLOSURE:      
0BA9   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap_ptr
0BAC   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
0BAE   23                     INC   hl   
0BAF   36 E2                  LD   (hl),lsb(doClosure)   
0BB1   23                     INC   hl   
0BB2   36 0B                  LD   (hl),msb(doClosure)   
0BB4   23                     INC   hl   
0BB5   FD 54                  LD   d,iyh   ; de = heap_ptr, hl = BP
0BB7   FD 5D                  LD   e,iyl   
0BB9   EB                     EX   de,hl   
0BBA   B7                     OR   a   
0BBB   ED 72                  SBC   hl,sp   ; de = count, hl = heap_ptr
0BBD   EB                     EX   de,hl   
0BBE   73                     LD   (hl),e   ; write count
0BBF   23                     INC   hl   
0BC0   72                     LD   (hl),d   
0BC1   23                     INC   hl   
0BC2   7B                     LD   a,e   
0BC3   B2                     OR   d   
0BC4   28 12                  JR   z,closure1   
0BC6   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
0BCA   44 4D                  LD   bc,hl   ; bc = count
0BCC   EB                     EX   de,hl   ; de = heap_ptr, hl = SP
0BCD   21 00 00               LD   hl,0   
0BD0   39                     ADD   hl,sp   
0BD1                             ; inc de
0BD1                             ; inc hl
0BD1   ED B0                  LDIR      ; write state of stack
0BD3   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0BD7   EB                     EX   de,hl   ; hl = heap_ptr
0BD8                CLOSURE1:      
0BD8   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = closure start
0BDC   D5                     PUSH   de   
0BDD   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
0BE0   DD E9                  JP   (ix)   
0BE2                             ; code* -- arr1 arr2 .. arrn func
0BE2                DOCLOSURE:      
0BE2   E1                     POP   hl   ; hl = code*
0BE3   5E                     LD   e,(hl)   ; de = count
0BE4   23                     INC   hl   
0BE5   56                     LD   d,(hl)   
0BE6   23                     INC   hl   
0BE7   7B                     LD   a,e   ; count == 0, skip
0BE8   B2                     OR   d   
0BE9   28 16                  JR   z,doClosure1   
0BEB   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
0BEF   42 4B                  LD   bc,de   ; bp = count
0BF1   EB                     EX   de,hl   ; de = heap_ptr,
0BF2   21 00 00               LD   hl,0   ; hl = -count
0BF5   B7                     OR   a   
0BF6   ED 42                  SBC   hl,bc   
0BF8   39                     ADD   hl,sp   ; hl = sp - count
0BF9   F9                     LD   sp,hl   
0BFA   EB                     EX   de,hl   ; bc = count, de = sp - count, hl = heap_ptr
0BFB                             ; inc de
0BFB                             ; inc hl
0BFB   ED B0                  LDIR      ; write to the stack
0BFD   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0C01                DOCLOSURE1:      
0C01   DD E9                  JP   (ix)   
0C03                             ; $a .. $z
0C03                             ; -- value
0C03                             ; returns value of arg
0C03                ARG:         
0C03   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C06   FD 56 05               LD   d,(iy+5)   
0C09   EB                     EX   de,hl   
0C0A   7D                     LD   a,l   ; arg_list* == null, skip
0C0B   B4                     OR   h   
0C0C   28 1C                  JR   z,arg0a   
0C0E   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0C0F   2B                     DEC   hl   
0C10   7E                     LD   a,(hl)   
0C11   23                     INC   hl   
0C12   23                     INC   hl   
0C13   B7                     OR   a   
0C14   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C16   5F                     LD   e,a   ; e = a = num_args
0C17   03                     INC   bc   ; a = next char = arg_name
0C18   0A                     LD   a,(bc)   
0C19   C5                     PUSH   bc   ; save IP
0C1A   43                     LD   b,e   ; b = e = num_args
0C1B   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C1E   FD 56 03               LD   d,(iy+3)   
0C21                ARG0:        
0C21   1B                     DEC   de   ; a = arg_name, de = next arg*
0C22   1B                     DEC   de   
0C23   BE                     CP   (hl)   
0C24   28 09                  JR   z,arg1   
0C26   23                     INC   hl   ; hl = next arg_list*
0C27   10 F8                  DJNZ   arg0   
0C29   C1                     POP   bc   ; no match, restore IP
0C2A                ARG0A:       
0C2A   11 00 00               LD   de,0   ; return 0
0C2D   18 08                  JR   arg1a   
0C2F                ARG1:        
0C2F   C1                     POP   bc   ; restore IP
0C30   EB                     EX   de,hl   ; hl = arg*
0C31   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0C34   5E                     LD   e,(hl)   
0C35   23                     INC   hl   
0C36   56                     LD   d,(hl)   ; de = arg
0C37                ARG1A:       
0C37   D5                     PUSH   de   ; push arg
0C38   DD E9                  JP   (ix)   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; initialised sys variables
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                VTEMP1:   DS   2   ; uninitialised sys variables
18AA                          ALIGN   $100   
1900                TIB:      DS   TIBSIZE   
1A00                          ALIGN   $100   
1A00                PAD:      DS   $100   
1B00                          ALIGN   $100   
1B00                HASHSLOTS:   DS   $100   
1C00                          ALIGN   $100   
1C00                HASHWORDS:   DS   $100   
1D00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 54 IN Siena.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               075E DEFINED AT LINE 1284 IN Siena.asm
                    > USED AT LINE 1741 IN Siena.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN Siena.asm
                    > USED AT LINE 1872 IN Siena.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1271 IN Siena.asm
                    > USED AT LINE 1805 IN Siena.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 252 IN Siena.asm
                    > USED AT LINE 259 IN Siena.asm
                    > USED AT LINE 1457 IN Siena.asm
                    > USED AT LINE 1498 IN Siena.asm
                    > USED AT LINE 1522 IN Siena.asm
                    > USED AT LINE 1525 IN Siena.asm
                    > USED AT LINE 1836 IN Siena.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN Siena.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN Siena.asm
                    > USED AT LINE 34 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN Siena.asm
                    > USED AT LINE 1238 IN Siena.asm
FALSE:              0000 DEFINED AT LINE 19 IN Siena.asm
                    > USED AT LINE 1243 IN Siena.asm
EMPTY:              0000 DEFINED AT LINE 20 IN Siena.asm
UNUSED:             00FF DEFINED AT LINE 21 IN Siena.asm
                    > USED AT LINE 1327 IN Siena.asm
                    > USED AT LINE 1366 IN Siena.asm
                    > USED AT LINE 1639 IN Siena.asm
NUL:                0000 DEFINED AT LINE 22 IN Siena.asm
                    > USED AT LINE 1874 IN Siena.asm
DC1:                0011 DEFINED AT LINE 23 IN Siena.asm
                    > USED AT LINE 1876 IN Siena.asm
DC2:                0012 DEFINED AT LINE 24 IN Siena.asm
                    > USED AT LINE 1878 IN Siena.asm
DC3:                0013 DEFINED AT LINE 25 IN Siena.asm
MACROS:             0180 DEFINED AT LINE 59 IN Siena.asm
ISYSVARS:           0180 DEFINED AT LINE 64 IN Siena.asm
                    > USED AT LINE 1634 IN Siena.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN Siena.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN Siena.asm
OPCODES:            0220 DEFINED AT LINE 112 IN Siena.asm
PAGE4:              0300 DEFINED AT LINE 215 IN Siena.asm
NUM_:               0300 DEFINED AT LINE 217 IN Siena.asm
                    > USED AT LINE 340 IN Siena.asm
HEXNUM_:            0303 DEFINED AT LINE 220 IN Siena.asm
ARG_:               0306 DEFINED AT LINE 223 IN Siena.asm
PROP_:              0309 DEFINED AT LINE 226 IN Siena.asm
STRING_:            030C DEFINED AT LINE 229 IN Siena.asm
ARG_LIST_:          030F DEFINED AT LINE 232 IN Siena.asm
DOT_:               0312 DEFINED AT LINE 235 IN Siena.asm
DOT1:               031E DEFINED AT LINE 243 IN Siena.asm
                    > USED AT LINE 240 IN Siena.asm
DOT2:               0327 DEFINED AT LINE 248 IN Siena.asm
                    > USED AT LINE 245 IN Siena.asm
DOT3:               0331 DEFINED AT LINE 254 IN Siena.asm
                    > USED AT LINE 250 IN Siena.asm
                    > USED AT LINE 328 IN Siena.asm
DOT4:               0335 DEFINED AT LINE 257 IN Siena.asm
                    > USED AT LINE 242 IN Siena.asm
                    > USED AT LINE 247 IN Siena.asm
                    > USED AT LINE 253 IN Siena.asm
INDEX_:             033C DEFINED AT LINE 263 IN Siena.asm
BLOCK_:             033F DEFINED AT LINE 266 IN Siena.asm
BLOCKEND_:          0342 DEFINED AT LINE 268 IN Siena.asm
CHAR_:              0345 DEFINED AT LINE 270 IN Siena.asm
ARRAY_:             0348 DEFINED AT LINE 272 IN Siena.asm
ARRAYEND_:          034B DEFINED AT LINE 274 IN Siena.asm
IDENT_:             034E DEFINED AT LINE 276 IN Siena.asm
SYMBOL_:            0351 DEFINED AT LINE 278 IN Siena.asm
AND_:               0354 DEFINED AT LINE 280 IN Siena.asm
AND1:               035B DEFINED AT LINE 288 IN Siena.asm
                    > USED AT LINE 301 IN Siena.asm
                    > USED AT LINE 312 IN Siena.asm
OR_:                035F DEFINED AT LINE 293 IN Siena.asm
XOR_:               0368 DEFINED AT LINE 303 IN Siena.asm
XOR1:               0369 DEFINED AT LINE 305 IN Siena.asm
                    > USED AT LINE 316 IN Siena.asm
INV_:               0371 DEFINED AT LINE 314 IN Siena.asm
ADD_:               0376 DEFINED AT LINE 318 IN Siena.asm
HDOT_:              037C DEFINED AT LINE 325 IN Siena.asm
MUL_:               0383 DEFINED AT LINE 330 IN Siena.asm
SUB_:               0386 DEFINED AT LINE 333 IN Siena.asm
SUB1:               0392 DEFINED AT LINE 341 IN Siena.asm
                    > USED AT LINE 338 IN Siena.asm
SUB2:               0394 DEFINED AT LINE 344 IN Siena.asm
                    > USED AT LINE 1280 IN Siena.asm
NOT_:               039A DEFINED AT LINE 350 IN Siena.asm
EQ_:                039F DEFINED AT LINE 354 IN Siena.asm
EQ1:                03A0 DEFINED AT LINE 356 IN Siena.asm
                    > USED AT LINE 352 IN Siena.asm
GT_:                03A4 DEFINED AT LINE 360 IN Siena.asm
LT_:                03A8 DEFINED AT LINE 365 IN Siena.asm
LT1:                03AA DEFINED AT LINE 368 IN Siena.asm
                    > USED AT LINE 363 IN Siena.asm
DIV_:               03B5 DEFINED AT LINE 376 IN Siena.asm
COMMENT_:           03C4 DEFINED AT LINE 387 IN Siena.asm
                    > USED AT LINE 391 IN Siena.asm
NOP_:               03CD DEFINED AT LINE 395 IN Siena.asm
SHL:                03CF DEFINED AT LINE 405 IN Siena.asm
                    > USED AT LINE 1749 IN Siena.asm
SHL1:               03D7 DEFINED AT LINE 412 IN Siena.asm
                    > USED AT LINE 415 IN Siena.asm
SHL2:               03D8 DEFINED AT LINE 414 IN Siena.asm
                    > USED AT LINE 411 IN Siena.asm
SHR:                03DF DEFINED AT LINE 422 IN Siena.asm
                    > USED AT LINE 1753 IN Siena.asm
SHR1:               03E7 DEFINED AT LINE 429 IN Siena.asm
                    > USED AT LINE 433 IN Siena.asm
SHR2:               03EB DEFINED AT LINE 432 IN Siena.asm
                    > USED AT LINE 428 IN Siena.asm
MUL:                03F2 DEFINED AT LINE 438 IN Siena.asm
                    > USED AT LINE 331 IN Siena.asm
MUL2:               03FC DEFINED AT LINE 447 IN Siena.asm
                    > USED AT LINE 456 IN Siena.asm
NUM:                040E DEFINED AT LINE 461 IN Siena.asm
                    > USED AT LINE 218 IN Siena.asm
NUM0:               0417 DEFINED AT LINE 467 IN Siena.asm
                    > USED AT LINE 465 IN Siena.asm
NUM1:               0418 DEFINED AT LINE 469 IN Siena.asm
                    > USED AT LINE 486 IN Siena.asm
NUM2:               0430 DEFINED AT LINE 487 IN Siena.asm
                    > USED AT LINE 472 IN Siena.asm
                    > USED AT LINE 474 IN Siena.asm
                    > USED AT LINE 509 IN Siena.asm
                    > USED AT LINE 511 IN Siena.asm
NUM3:               043B DEFINED AT LINE 495 IN Siena.asm
                    > USED AT LINE 490 IN Siena.asm
HEXNUM:             043E DEFINED AT LINE 499 IN Siena.asm
                    > USED AT LINE 221 IN Siena.asm
HEXNUM1:            0441 DEFINED AT LINE 501 IN Siena.asm
                    > USED AT LINE 518 IN Siena.asm
HEXNUM2:            0449 DEFINED AT LINE 507 IN Siena.asm
                    > USED AT LINE 505 IN Siena.asm
STRING:             045B DEFINED AT LINE 523 IN Siena.asm
                    > USED AT LINE 230 IN Siena.asm
STRING1:            0464 DEFINED AT LINE 530 IN Siena.asm
                    > USED AT LINE 537 IN Siena.asm
STRING2:            0467 DEFINED AT LINE 534 IN Siena.asm
                    > USED AT LINE 529 IN Siena.asm
ARG_LIST:           047F DEFINED AT LINE 558 IN Siena.asm
                    > USED AT LINE 233 IN Siena.asm
ARG_LIST1:          0489 DEFINED AT LINE 565 IN Siena.asm
                    > USED AT LINE 583 IN Siena.asm
ARG_LIST2:          0495 DEFINED AT LINE 573 IN Siena.asm
                    > USED AT LINE 570 IN Siena.asm
ARG_LIST3:          049D DEFINED AT LINE 581 IN Siena.asm
                    > USED AT LINE 572 IN Siena.asm
                    > USED AT LINE 579 IN Siena.asm
ARG_LIST4:          04A0 DEFINED AT LINE 584 IN Siena.asm
                    > USED AT LINE 568 IN Siena.asm
ARG_LIST5:          04A5 DEFINED AT LINE 589 IN Siena.asm
                    > USED AT LINE 587 IN Siena.asm
CHAR:               04B1 DEFINED AT LINE 600 IN Siena.asm
                    > USED AT LINE 271 IN Siena.asm
CHAR1:              04B4 DEFINED AT LINE 602 IN Siena.asm
                    > USED AT LINE 613 IN Siena.asm
CHAR2:              04C0 DEFINED AT LINE 611 IN Siena.asm
                    > USED AT LINE 608 IN Siena.asm
CHAR3:              04C3 DEFINED AT LINE 614 IN Siena.asm
                    > USED AT LINE 606 IN Siena.asm
BLOCK:              04C6 DEFINED AT LINE 618 IN Siena.asm
                    > USED AT LINE 267 IN Siena.asm
BLOCK1:             04CA DEFINED AT LINE 622 IN Siena.asm
                    > USED AT LINE 626 IN Siena.asm
                    > USED AT LINE 646 IN Siena.asm
                    > USED AT LINE 649 IN Siena.asm
                    > USED AT LINE 654 IN Siena.asm
                    > USED AT LINE 658 IN Siena.asm
BLOCK2:             04F2 DEFINED AT LINE 647 IN Siena.asm
                    > USED AT LINE 636 IN Siena.asm
                    > USED AT LINE 638 IN Siena.asm
                    > USED AT LINE 640 IN Siena.asm
BLOCK3:             04F5 DEFINED AT LINE 650 IN Siena.asm
                    > USED AT LINE 643 IN Siena.asm
                    > USED AT LINE 645 IN Siena.asm
BLOCK4:             04FD DEFINED AT LINE 656 IN Siena.asm
                    > USED AT LINE 629 IN Siena.asm
                    > USED AT LINE 631 IN Siena.asm
                    > USED AT LINE 633 IN Siena.asm
BLOCK5:             0500 DEFINED AT LINE 659 IN Siena.asm
                    > USED AT LINE 655 IN Siena.asm
BLOCKEND:           0503 DEFINED AT LINE 663 IN Siena.asm
                    > USED AT LINE 269 IN Siena.asm
BLOCKEND1:          052F DEFINED AT LINE 686 IN Siena.asm
                    > USED AT LINE 679 IN Siena.asm
BLOCKEND2:          053B DEFINED AT LINE 693 IN Siena.asm
                    > USED AT LINE 685 IN Siena.asm
PROP:               0554 DEFINED AT LINE 768 IN Siena.asm
                    > USED AT LINE 227 IN Siena.asm
DOLET:              0556 DEFINED AT LINE 787 IN Siena.asm
DOLET2:             055A DEFINED AT LINE 790 IN Siena.asm
DOLET3:             055E DEFINED AT LINE 795 IN Siena.asm
IF:                 0568 DEFINED AT LINE 805 IN Siena.asm
                    > USED AT LINE 1705 IN Siena.asm
IFTE:               056D DEFINED AT LINE 828 IN Siena.asm
                    > USED AT LINE 1709 IN Siena.asm
IFTE1:              056E DEFINED AT LINE 830 IN Siena.asm
                    > USED AT LINE 807 IN Siena.asm
SWITCH:             057A DEFINED AT LINE 842 IN Siena.asm
                    > USED AT LINE 1761 IN Siena.asm
INDEX:              0584 DEFINED AT LINE 854 IN Siena.asm
                    > USED AT LINE 264 IN Siena.asm
INDEX0:             058C DEFINED AT LINE 860 IN Siena.asm
INDEX1:             058D DEFINED AT LINE 862 IN Siena.asm
                    > USED AT LINE 859 IN Siena.asm
INDEX2:             0599 DEFINED AT LINE 871 IN Siena.asm
                    > USED AT LINE 868 IN Siena.asm
SET:                059C DEFINED AT LINE 876 IN Siena.asm
                    > USED AT LINE 1745 IN Siena.asm
SET1:               05AA DEFINED AT LINE 886 IN Siena.asm
                    > USED AT LINE 883 IN Siena.asm
LOOP:               05AC DEFINED AT LINE 891 IN Siena.asm
                    > USED AT LINE 1721 IN Siena.asm
WORDS:              05AE DEFINED AT LINE 941 IN Siena.asm
                    > USED AT LINE 1769 IN Siena.asm
BYTES:              05B3 DEFINED AT LINE 944 IN Siena.asm
                    > USED AT LINE 1657 IN Siena.asm
BYTES1:             05B6 DEFINED AT LINE 946 IN Siena.asm
                    > USED AT LINE 943 IN Siena.asm
ARRAY:              05BB DEFINED AT LINE 950 IN Siena.asm
                    > USED AT LINE 273 IN Siena.asm
ARRAYEND:           05D7 DEFINED AT LINE 964 IN Siena.asm
                    > USED AT LINE 275 IN Siena.asm
ARRAYEND1:          05F8 DEFINED AT LINE 987 IN Siena.asm
                    > USED AT LINE 996 IN Siena.asm
ARRAYEND2:          0608 DEFINED AT LINE 999 IN Siena.asm
                    > USED AT LINE 985 IN Siena.asm
                    > USED AT LINE 1011 IN Siena.asm
ARRAYEND3:          061B DEFINED AT LINE 1013 IN Siena.asm
                    > USED AT LINE 997 IN Siena.asm
HASH:               0636 DEFINED AT LINE 1035 IN Siena.asm
                    > USED AT LINE 1697 IN Siena.asm
DEF:                0641 DEFINED AT LINE 1045 IN Siena.asm
                    > USED AT LINE 1669 IN Siena.asm
DEF1:               0648 DEFINED AT LINE 1048 IN Siena.asm
                    > USED AT LINE 1046 IN Siena.asm
LET:                0651 DEFINED AT LINE 1055 IN Siena.asm
                    > USED AT LINE 1717 IN Siena.asm
LET1:               0675 DEFINED AT LINE 1080 IN Siena.asm
                    > USED AT LINE 1052 IN Siena.asm
LET2:               067D DEFINED AT LINE 1087 IN Siena.asm
                    > USED AT LINE 1084 IN Siena.asm
ADDR:               0680 DEFINED AT LINE 1092 IN Siena.asm
                    > USED AT LINE 1653 IN Siena.asm
ADDR1:              068C DEFINED AT LINE 1102 IN Siena.asm
                    > USED AT LINE 1097 IN Siena.asm
SYMBOL:             0697 DEFINED AT LINE 1110 IN Siena.asm
                    > USED AT LINE 279 IN Siena.asm
SYMBOL0:            069F DEFINED AT LINE 1115 IN Siena.asm
                    > USED AT LINE 1126 IN Siena.asm
                    > USED AT LINE 1128 IN Siena.asm
SYMBOL1:            06A1 DEFINED AT LINE 1118 IN Siena.asm
                    > USED AT LINE 1114 IN Siena.asm
SYMBOL2:            06B1 DEFINED AT LINE 1129 IN Siena.asm
                    > USED AT LINE 1122 IN Siena.asm
IDENT:              06BF DEFINED AT LINE 1140 IN Siena.asm
                    > USED AT LINE 277 IN Siena.asm
IDENT0:             06C6 DEFINED AT LINE 1144 IN Siena.asm
                    > USED AT LINE 1157 IN Siena.asm
                    > USED AT LINE 1159 IN Siena.asm
IDENT1:             06C8 DEFINED AT LINE 1147 IN Siena.asm
                    > USED AT LINE 1143 IN Siena.asm
IDENT2:             06D8 DEFINED AT LINE 1160 IN Siena.asm
                    > USED AT LINE 1153 IN Siena.asm
IDENT3:             06EC DEFINED AT LINE 1172 IN Siena.asm
                    > USED AT LINE 1170 IN Siena.asm
FRAC:               06ED DEFINED AT LINE 1175 IN Siena.asm
                    > USED AT LINE 1685 IN Siena.asm
SQRT1:              06F3 DEFINED AT LINE 1180 IN Siena.asm
                    > USED AT LINE 1757 IN Siena.asm
ABS1:               0700 DEFINED AT LINE 1189 IN Siena.asm
                    > USED AT LINE 1649 IN Siena.asm
MOD:                070D DEFINED AT LINE 1202 IN Siena.asm
                    > USED AT LINE 1729 IN Siena.asm
EQUALS:             0719 DEFINED AT LINE 1214 IN Siena.asm
                    > USED AT LINE 358 IN Siena.asm
LESSTHANEQ:         0721 DEFINED AT LINE 1222 IN Siena.asm
                    > USED AT LINE 372 IN Siena.asm
LESSTHAN:           0726 DEFINED AT LINE 1229 IN Siena.asm
                    > USED AT LINE 374 IN Siena.asm
LESSTHAN1:          072B DEFINED AT LINE 1234 IN Siena.asm
                    > USED AT LINE 1225 IN Siena.asm
TRUE1:              072E DEFINED AT LINE 1237 IN Siena.asm
                    > USED AT LINE 1217 IN Siena.asm
                    > USED AT LINE 1765 IN Siena.asm
FALSE1:             0734 DEFINED AT LINE 1242 IN Siena.asm
                    > USED AT LINE 1218 IN Siena.asm
                    > USED AT LINE 1232 IN Siena.asm
                    > USED AT LINE 1235 IN Siena.asm
                    > USED AT LINE 1677 IN Siena.asm
INPUT:              073A DEFINED AT LINE 1249 IN Siena.asm
                    > USED AT LINE 1701 IN Siena.asm
OUTPUT:             0745 DEFINED AT LINE 1261 IN Siena.asm
                    > USED AT LINE 1737 IN Siena.asm
KEY:                074E DEFINED AT LINE 1270 IN Siena.asm
                    > USED AT LINE 1713 IN Siena.asm
NEG:                0757 DEFINED AT LINE 1277 IN Siena.asm
                    > USED AT LINE 1733 IN Siena.asm
FILTER:             075E DEFINED AT LINE 1282 IN Siena.asm
                    > USED AT LINE 1681 IN Siena.asm
MAP:                075E DEFINED AT LINE 1283 IN Siena.asm
                    > USED AT LINE 1725 IN Siena.asm
HASHSTR:            0760 DEFINED AT LINE 1294 IN Siena.asm
                    > USED AT LINE 1039 IN Siena.asm
                    > USED AT LINE 1135 IN Siena.asm
                    > USED AT LINE 1166 IN Siena.asm
                    > USED AT LINE 1626 IN Siena.asm
HASHSTR1:           0767 DEFINED AT LINE 1297 IN Siena.asm
                    > USED AT LINE 1316 IN Siena.asm
HASHSTR2:           076C DEFINED AT LINE 1302 IN Siena.asm
DEFINEENTRY:        077D DEFINED AT LINE 1321 IN Siena.asm
                    > USED AT LINE 1083 IN Siena.asm
                    > USED AT LINE 1629 IN Siena.asm
DEFINEENTRY0:       0782 DEFINED AT LINE 1325 IN Siena.asm
                    > USED AT LINE 1342 IN Siena.asm
DEFINEENTRY1:       0791 DEFINED AT LINE 1337 IN Siena.asm
                    > USED AT LINE 1331 IN Siena.asm
DEFINEENTRY2:       0797 DEFINED AT LINE 1343 IN Siena.asm
                    > USED AT LINE 1335 IN Siena.asm
                    > USED AT LINE 1367 IN Siena.asm
DEFINEENTRY3:       0799 DEFINED AT LINE 1346 IN Siena.asm
                    > USED AT LINE 1328 IN Siena.asm
LOOKUPENTRY:        07A3 DEFINED AT LINE 1360 IN Siena.asm
                    > USED AT LINE 1096 IN Siena.asm
                    > USED AT LINE 1168 IN Siena.asm
LOOKUPENTRY0:       07A8 DEFINED AT LINE 1364 IN Siena.asm
                    > USED AT LINE 1381 IN Siena.asm
LOOKUPENTRY1:       07B7 DEFINED AT LINE 1376 IN Siena.asm
                    > USED AT LINE 1370 IN Siena.asm
LOOKUPENTRY2:       07BD DEFINED AT LINE 1382 IN Siena.asm
LOOKUPENTRY3:       07BF DEFINED AT LINE 1385 IN Siena.asm
                    > USED AT LINE 1374 IN Siena.asm
DIVIDE:             07C7 DEFINED AT LINE 1397 IN Siena.asm
                    > USED AT LINE 381 IN Siena.asm
                    > USED AT LINE 1207 IN Siena.asm
DIVIDE1:            07CC DEFINED AT LINE 1400 IN Siena.asm
                    > USED AT LINE 1412 IN Siena.asm
DIVIDE2:            07D9 DEFINED AT LINE 1408 IN Siena.asm
                    > USED AT LINE 1405 IN Siena.asm
DIVIDE3:            07DA DEFINED AT LINE 1410 IN Siena.asm
                    > USED AT LINE 1407 IN Siena.asm
SQUAREROOT:         07E0 DEFINED AT LINE 1420 IN Siena.asm
                    > USED AT LINE 1183 IN Siena.asm
SQUAREROOT1:        07E5 DEFINED AT LINE 1424 IN Siena.asm
                    > USED AT LINE 1445 IN Siena.asm
SQUAREROOT4:        0800 DEFINED AT LINE 1444 IN Siena.asm
                    > USED AT LINE 1438 IN Siena.asm
SQUAREROOT5:        0807 DEFINED AT LINE 1449 IN Siena.asm
                    > USED AT LINE 1447 IN Siena.asm
PRTDEC:             080A DEFINED AT LINE 1453 IN Siena.asm
                    > USED AT LINE 256 IN Siena.asm
PRTDEC0:            0819 DEFINED AT LINE 1464 IN Siena.asm
                    > USED AT LINE 1455 IN Siena.asm
PRTDEC1:            083B DEFINED AT LINE 1480 IN Siena.asm
                    > USED AT LINE 1468 IN Siena.asm
                    > USED AT LINE 1470 IN Siena.asm
                    > USED AT LINE 1472 IN Siena.asm
                    > USED AT LINE 1474 IN Siena.asm
                    > USED AT LINE 1477 IN Siena.asm
PRTDEC2:            083D DEFINED AT LINE 1482 IN Siena.asm
                    > USED AT LINE 1485 IN Siena.asm
PRTDEC3:            084D DEFINED AT LINE 1494 IN Siena.asm
                    > USED AT LINE 1489 IN Siena.asm
PRTDEC4:            084E DEFINED AT LINE 1496 IN Siena.asm
                    > USED AT LINE 1493 IN Siena.asm
PRTHEX:             0852 DEFINED AT LINE 1500 IN Siena.asm
                    > USED AT LINE 241 IN Siena.asm
                    > USED AT LINE 327 IN Siena.asm
PRTHEX2:            085D DEFINED AT LINE 1508 IN Siena.asm
                    > USED AT LINE 1503 IN Siena.asm
                    > USED AT LINE 1505 IN Siena.asm
PRTHEX3:            0866 DEFINED AT LINE 1516 IN Siena.asm
                    > USED AT LINE 1514 IN Siena.asm
PRTSTR0:            0871 DEFINED AT LINE 1524 IN Siena.asm
                    > USED AT LINE 1530 IN Siena.asm
PRTSTR:             0875 DEFINED AT LINE 1527 IN Siena.asm
                    > USED AT LINE 246 IN Siena.asm
                    > USED AT LINE 1590 IN Siena.asm
NESTING:            087A DEFINED AT LINE 1543 IN Siena.asm
                    > USED AT LINE 1796 IN Siena.asm
                    > USED AT LINE 1837 IN Siena.asm
NESTING1A:          0885 DEFINED AT LINE 1550 IN Siena.asm
                    > USED AT LINE 1547 IN Siena.asm
NESTING1:           0888 DEFINED AT LINE 1553 IN Siena.asm
                    > USED AT LINE 1545 IN Siena.asm
NESTING2:           0897 DEFINED AT LINE 1562 IN Siena.asm
                    > USED AT LINE 1557 IN Siena.asm
                    > USED AT LINE 1559 IN Siena.asm
NESTING3:           0899 DEFINED AT LINE 1565 IN Siena.asm
                    > USED AT LINE 1561 IN Siena.asm
NESTING4:           08A4 DEFINED AT LINE 1572 IN Siena.asm
                    > USED AT LINE 1567 IN Siena.asm
                    > USED AT LINE 1569 IN Siena.asm
PROMPT:             08A6 DEFINED AT LINE 1576 IN Siena.asm
                    > USED AT LINE 1780 IN Siena.asm
CRLF:               08AF DEFINED AT LINE 1581 IN Siena.asm
                    > USED AT LINE 1849 IN Siena.asm
PRINTSTR:           08B6 DEFINED AT LINE 1588 IN Siena.asm
                    > USED AT LINE 1577 IN Siena.asm
                    > USED AT LINE 1582 IN Siena.asm
                    > USED AT LINE 1776 IN Siena.asm
EXECSTR:            08BD DEFINED AT LINE 1597 IN Siena.asm
BRANCH:             08BD DEFINED AT LINE 1607 IN Siena.asm
DEFINE:             08C1 DEFINED AT LINE 1612 IN Siena.asm
                    > USED AT LINE 1647 IN Siena.asm
                    > USED AT LINE 1651 IN Siena.asm
                    > USED AT LINE 1655 IN Siena.asm
                    > USED AT LINE 1659 IN Siena.asm
                    > USED AT LINE 1663 IN Siena.asm
                    > USED AT LINE 1667 IN Siena.asm
                    > USED AT LINE 1671 IN Siena.asm
                    > USED AT LINE 1675 IN Siena.asm
                    > USED AT LINE 1679 IN Siena.asm
                    > USED AT LINE 1683 IN Siena.asm
                    > USED AT LINE 1687 IN Siena.asm
                    > USED AT LINE 1695 IN Siena.asm
                    > USED AT LINE 1699 IN Siena.asm
                    > USED AT LINE 1703 IN Siena.asm
                    > USED AT LINE 1707 IN Siena.asm
                    > USED AT LINE 1711 IN Siena.asm
                    > USED AT LINE 1715 IN Siena.asm
                    > USED AT LINE 1719 IN Siena.asm
                    > USED AT LINE 1723 IN Siena.asm
                    > USED AT LINE 1727 IN Siena.asm
                    > USED AT LINE 1731 IN Siena.asm
                    > USED AT LINE 1735 IN Siena.asm
                    > USED AT LINE 1739 IN Siena.asm
                    > USED AT LINE 1743 IN Siena.asm
                    > USED AT LINE 1747 IN Siena.asm
                    > USED AT LINE 1751 IN Siena.asm
                    > USED AT LINE 1755 IN Siena.asm
                    > USED AT LINE 1759 IN Siena.asm
                    > USED AT LINE 1763 IN Siena.asm
                    > USED AT LINE 1767 IN Siena.asm
INIT:               08D9 DEFINED AT LINE 1631 IN Siena.asm
                    > USED AT LINE 7
                    > USED AT LINE 1775 IN Siena.asm
INIT1:              08F3 DEFINED AT LINE 1642 IN Siena.asm
                    > USED AT LINE 1645 IN Siena.asm
START:              0A43 DEFINED AT LINE 1773 IN Siena.asm
                    > USED AT LINE 8
INTERPRET:          0A59 DEFINED AT LINE 1779 IN Siena.asm
                    > USED AT LINE 1880 IN Siena.asm
INTERPRET2:         0A63 DEFINED AT LINE 1785 IN Siena.asm
                    > USED AT LINE 1829 IN Siena.asm
INTERPRET3:         0A6B DEFINED AT LINE 1792 IN Siena.asm
                    > USED AT LINE 1801 IN Siena.asm
INTERPRET4:         0A71 DEFINED AT LINE 1798 IN Siena.asm
                    > USED AT LINE 1790 IN Siena.asm
WAITCHAR:           0A76 DEFINED AT LINE 1804 IN Siena.asm
                    > USED AT LINE 1838 IN Siena.asm
                    > USED AT LINE 1852 IN Siena.asm
MACRO:              0A85 DEFINED AT LINE 1814 IN Siena.asm
WAITCHAR1:          0A87 DEFINED AT LINE 1831 IN Siena.asm
                    > USED AT LINE 1807 IN Siena.asm
WAITCHAR3:          0A95 DEFINED AT LINE 1840 IN Siena.asm
                    > USED AT LINE 1812 IN Siena.asm
WAITCHAR4:          0AA8 DEFINED AT LINE 1854 IN Siena.asm
                    > USED AT LINE 1810 IN Siena.asm
NEXT:               0AB0 DEFINED AT LINE 1860 IN Siena.asm
                    > USED AT LINE 71 IN Siena.asm
                    > USED AT LINE 1864 IN Siena.asm
NEXT1:              0ABF DEFINED AT LINE 1871 IN Siena.asm
                    > USED AT LINE 1865 IN Siena.asm
ESCAPE_:            0AD2 DEFINED AT LINE 1882 IN Siena.asm
                    > USED AT LINE 1873 IN Siena.asm
EXIT_:              0AD3 DEFINED AT LINE 1885 IN Siena.asm
                    > USED AT LINE 1875 IN Siena.asm
LITERAL_:           0AD6 DEFINED AT LINE 1889 IN Siena.asm
                    > USED AT LINE 1877 IN Siena.asm
ENTER_:             0ADF DEFINED AT LINE 1899 IN Siena.asm
                    > USED AT LINE 1879 IN Siena.asm
CALL:               0AE6 DEFINED AT LINE 1909 IN Siena.asm
                    > USED AT LINE 1661 IN Siena.asm
EXEC:               0AE8 DEFINED AT LINE 1916 IN Siena.asm
                    > USED AT LINE 1673 IN Siena.asm
EXEC0:              0AE9 DEFINED AT LINE 1918 IN Siena.asm
                    > USED AT LINE 836 IN Siena.asm
                    > USED AT LINE 838 IN Siena.asm
                    > USED AT LINE 850 IN Siena.asm
EXEC1:              0AEF DEFINED AT LINE 1923 IN Siena.asm
                    > USED AT LINE 1921 IN Siena.asm
EXEC2:              0B0F DEFINED AT LINE 1940 IN Siena.asm
                    > USED AT LINE 1932 IN Siena.asm
DOCALL:             0B16 DEFINED AT LINE 1949 IN Siena.asm
DOCALL1:            0B2C DEFINED AT LINE 1967 IN Siena.asm
                    > USED AT LINE 1961 IN Siena.asm
DOCALL2:            0B32 DEFINED AT LINE 1973 IN Siena.asm
                    > USED AT LINE 1977 IN Siena.asm
DOCALL3:            0B37 DEFINED AT LINE 1978 IN Siena.asm
                    > USED AT LINE 1972 IN Siena.asm
DOCALL4:            0B43 DEFINED AT LINE 1989 IN Siena.asm
                    > USED AT LINE 1939 IN Siena.asm
                    > USED AT LINE 1944 IN Siena.asm
                    > USED AT LINE 1966 IN Siena.asm
DOCALL5:            0B4F DEFINED AT LINE 1996 IN Siena.asm
                    > USED AT LINE 1953 IN Siena.asm
FUNC:               0B51 DEFINED AT LINE 2000 IN Siena.asm
                    > USED AT LINE 1047 IN Siena.asm
                    > USED AT LINE 1689 IN Siena.asm
FUNC1:              0B69 DEFINED AT LINE 2021 IN Siena.asm
                    > USED AT LINE 2045 IN Siena.asm
                    > USED AT LINE 2048 IN Siena.asm
                    > USED AT LINE 2053 IN Siena.asm
                    > USED AT LINE 2057 IN Siena.asm
FUNC2:              0B8F DEFINED AT LINE 2046 IN Siena.asm
                    > USED AT LINE 2035 IN Siena.asm
                    > USED AT LINE 2037 IN Siena.asm
                    > USED AT LINE 2039 IN Siena.asm
FUNC3:              0B92 DEFINED AT LINE 2049 IN Siena.asm
                    > USED AT LINE 2042 IN Siena.asm
                    > USED AT LINE 2044 IN Siena.asm
FUNC4:              0B9A DEFINED AT LINE 2055 IN Siena.asm
                    > USED AT LINE 2028 IN Siena.asm
                    > USED AT LINE 2030 IN Siena.asm
                    > USED AT LINE 2032 IN Siena.asm
FUNC4A:             0B9D DEFINED AT LINE 2058 IN Siena.asm
                    > USED AT LINE 2054 IN Siena.asm
CLOSURE:            0BA9 DEFINED AT LINE 2068 IN Siena.asm
                    > USED AT LINE 1665 IN Siena.asm
CLOSURE1:           0BD8 DEFINED AT LINE 2099 IN Siena.asm
                    > USED AT LINE 2088 IN Siena.asm
DOCLOSURE:          0BE2 DEFINED AT LINE 2106 IN Siena.asm
DOCLOSURE1:         0C01 DEFINED AT LINE 2128 IN Siena.asm
                    > USED AT LINE 2114 IN Siena.asm
ARG:                0C03 DEFINED AT LINE 2134 IN Siena.asm
                    > USED AT LINE 224 IN Siena.asm
ARG0:               0C21 DEFINED AT LINE 2155 IN Siena.asm
                    > USED AT LINE 2161 IN Siena.asm
ARG0A:              0C2A DEFINED AT LINE 2163 IN Siena.asm
                    > USED AT LINE 2140 IN Siena.asm
                    > USED AT LINE 2147 IN Siena.asm
ARG1:               0C2F DEFINED AT LINE 2166 IN Siena.asm
                    > USED AT LINE 2159 IN Siena.asm
ARG1A:              0C37 DEFINED AT LINE 2173 IN Siena.asm
                    > USED AT LINE 2165 IN Siena.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1633 IN Siena.asm
                    > USED AT LINE 1774 IN Siena.asm
                    > USED AT LINE 1925 IN Siena.asm
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1635 IN Siena.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 382 IN Siena.asm
                    > USED AT LINE 1176 IN Siena.asm
                    > USED AT LINE 1184 IN Siena.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 857 IN Siena.asm
                    > USED AT LINE 881 IN Siena.asm
                    > USED AT LINE 947 IN Siena.asm
                    > USED AT LINE 983 IN Siena.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1783 IN Siena.asm
                    > USED AT LINE 1855 IN Siena.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 789 IN Siena.asm
                    > USED AT LINE 864 IN Siena.asm
                    > USED AT LINE 879 IN Siena.asm
                    > USED AT LINE 1106 IN Siena.asm
                    > USED AT LINE 2169 IN Siena.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 800 IN Siena.asm
                    > USED AT LINE 1070 IN Siena.asm
                    > USED AT LINE 1295 IN Siena.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1049 IN Siena.asm
                    > USED AT LINE 1632 IN Siena.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 524 IN Siena.asm
                    > USED AT LINE 541 IN Siena.asm
                    > USED AT LINE 560 IN Siena.asm
                    > USED AT LINE 591 IN Siena.asm
                    > USED AT LINE 977 IN Siena.asm
                    > USED AT LINE 1023 IN Siena.asm
                    > USED AT LINE 1024 IN Siena.asm
                    > USED AT LINE 1059 IN Siena.asm
                    > USED AT LINE 1077 IN Siena.asm
                    > USED AT LINE 1078 IN Siena.asm
                    > USED AT LINE 2001 IN Siena.asm
                    > USED AT LINE 2061 IN Siena.asm
                    > USED AT LINE 2063 IN Siena.asm
                    > USED AT LINE 2069 IN Siena.asm
                    > USED AT LINE 2100 IN Siena.asm
                    > USED AT LINE 2102 IN Siena.asm
VTEMP1:             18A8 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 2089 IN Siena.asm
                    > USED AT LINE 2097 IN Siena.asm
                    > USED AT LINE 2115 IN Siena.asm
                    > USED AT LINE 2127 IN Siena.asm
TIB:                1900 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 1789 IN Siena.asm
                    > USED AT LINE 1832 IN Siena.asm
                    > USED AT LINE 1841 IN Siena.asm
                    > USED AT LINE 1856 IN Siena.asm
PAD:                1A00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1112 IN Siena.asm
                    > USED AT LINE 1134 IN Siena.asm
                    > USED AT LINE 1141 IN Siena.asm
                    > USED AT LINE 1165 IN Siena.asm
HASHSLOTS:          1B00 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1641 IN Siena.asm
HASHWORDS:          1C00 DEFINED AT LINE 43 IN ram.asm
HEAP:               1D00 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 72 IN Siena.asm
